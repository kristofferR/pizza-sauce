'use strict';
var COMPILED = !0, goog = goog || {};
goog.global = this;
goog.DEBUG = !1;
goog.LOCALE = "en";
goog.provide = function (a) {
  if (!COMPILED) {
    if (goog.isProvided_(a))
      throw Error('Namespace "' + a + '" already declared.');
    delete goog.implicitNamespaces_[a];
    for (var b = a; (b = b.substring(0, b.lastIndexOf("."))) && !goog.getObjectByName(b); )
      goog.implicitNamespaces_[b] = !0
  }
  goog.exportPath_(a)
};
goog.setTestOnly = function (a) {
  if (COMPILED && !goog.DEBUG)
    throw a = a || "", Error("Importing test-only code into non-debug environment" + a ? ": " + a : ".");
};
COMPILED || (goog.isProvided_ = function (a) {
  return !goog.implicitNamespaces_[a] && !!goog.getObjectByName(a)
}, goog.implicitNamespaces_ = {});
goog.exportPath_ = function (a, b, c) {
  a = a.split(".");
  c = c || goog.global;
  !(a[0]in c) && c.execScript && c.execScript("var " + a[0]);
  for (var d; a.length && (d = a.shift()); )
    !a.length && goog.isDef(b) ? c[d] = b : c = c[d] ? c[d] : c[d] = {}

};
goog.getObjectByName = function (a, b) {
  for (var c = a.split("."), d = b || goog.global, e; e = c.shift(); )
    if (goog.isDefAndNotNull(d[e]))
      d = d[e];
    else
      return null;
  return d
};
goog.globalize = function (a, b) {
  var c = b || goog.global,
  d;
  for (d in a)
    c[d] = a[d]
};
goog.addDependency = function (a, b, c) {
  if (!COMPILED) {
    for (var d, a = a.replace(/\\/g, "/"), e = goog.dependencies_, f = 0; d = b[f]; f++) {
      e.nameToPath[d] = a;
      a in e.pathToNames || (e.pathToNames[a] = {});
      e.pathToNames[a][d] = true
    }
    for (d = 0; b = c[d]; d++) {
      a in e.requires || (e.requires[a] = {});
      e.requires[a][b] = true
    }
  }
};
goog.ENABLE_DEBUG_LOADER = !0;
goog.require = function (a) {
  if (!COMPILED && !goog.isProvided_(a)) {
    if (goog.ENABLE_DEBUG_LOADER) {
      var b = goog.getPathFromDeps_(a);
      if (b) {
        goog.included_[b] = true;
        goog.writeScripts_();
        return
      }
    }
    a = "goog.require could not find: " + a;
    goog.global.console && goog.global.console.error(a);
    throw Error(a);
  }
};
goog.basePath = "";
goog.nullFunction = function () {};
goog.identityFunction = function (a) {
  return a
};
goog.abstractMethod = function () {
  throw Error("unimplemented abstract method");
};
goog.addSingletonGetter = function (a) {
  a.getInstance = function () {
    if (a.instance_)
      return a.instance_;
    goog.DEBUG && (goog.instantiatedSingletons_[goog.instantiatedSingletons_.length] = a);
    return a.instance_ = new a
  }
};
goog.instantiatedSingletons_ = [];
!COMPILED && goog.ENABLE_DEBUG_LOADER && (goog.included_ = {}, goog.dependencies_ = {
    pathToNames : {},
    nameToPath : {},
    requires : {},
    visited : {},
    written : {}

  }, goog.inHtmlDocument_ = function () {
  var a = goog.global.document;
  return typeof a != "undefined" && "write" in a
}, goog.findBasePath_ = function () {
  if (goog.global.CLOSURE_BASE_PATH)
    goog.basePath = goog.global.CLOSURE_BASE_PATH;
  else if (goog.inHtmlDocument_())
    for (var a = goog.global.document.getElementsByTagName("script"), b = a.length - 1; b >= 0; --b) {
      var c = a[b].src,
      d = c.lastIndexOf("?"),
      d = d == -1 ? c.length : d;
      if (c.substr(d - 7, 7) == "base.js") {
        goog.basePath = c.substr(0, d - 7);
        break
      }
    }
}, goog.importScript_ = function (a) {
  var b = goog.global.CLOSURE_IMPORT_SCRIPT || goog.writeScriptTag_;
  !goog.dependencies_.written[a] && b(a) && (goog.dependencies_.written[a] = true)
}, goog.writeScriptTag_ = function (a) {
  if (goog.inHtmlDocument_()) {
    goog.global.document.write('<script type="text/javascript" src="' + a + '"><\/script>');
    return true
  }
  return false
}, goog.writeScripts_ = function () {
  function a(e) {
    if (!(e in d.written)) {
      if (!(e in
          d.visited)) {
        d.visited[e] = true;
        if (e in d.requires)
          for (var g in d.requires[e])
            if (!goog.isProvided_(g))
              if (g in d.nameToPath)
                a(d.nameToPath[g]);
              else
                throw Error("Undefined nameToPath for " + g);
      }
      if (!(e in c)) {
        c[e] = true;
        b.push(e)
      }
    }
  }
  var b = [],
  c = {},
  d = goog.dependencies_,
  e;
  for (e in goog.included_)
    d.written[e] || a(e);
  for (e = 0; e < b.length; e++)
    if (b[e])
      goog.importScript_(goog.basePath + b[e]);
    else
      throw Error("Undefined script input");
}, goog.getPathFromDeps_ = function (a) {
  return a in goog.dependencies_.nameToPath ? goog.dependencies_.nameToPath[a] :
  null
}, goog.findBasePath_(), goog.global.CLOSURE_NO_DEPS || goog.importScript_(goog.basePath + "deps.js"));
goog.typeOf = function (a) {
  var b = typeof a;
  if (b == "object")
    if (a) {
      if (a instanceof Array)
        return "array";
      if (a instanceof Object)
        return b;
      var c = Object.prototype.toString.call(a);
      if (c == "[object Window]")
        return "object";
      if (c == "[object Array]" || typeof a.length == "number" && typeof a.splice != "undefined" && typeof a.propertyIsEnumerable != "undefined" && !a.propertyIsEnumerable("splice"))
        return "array";
      if (c == "[object Function]" || typeof a.call != "undefined" && typeof a.propertyIsEnumerable != "undefined" && !a.propertyIsEnumerable("call"))
        return "function"
    } else
      return "null";
  else if (b == "function" && typeof a.call == "undefined")
    return "object";
  return b
};
goog.isDef = function (a) {
  return a !== void 0
};
goog.isNull = function (a) {
  return a === null
};
goog.isDefAndNotNull = function (a) {
  return a != null
};
goog.isArray = function (a) {
  return goog.typeOf(a) == "array"
};
goog.isArrayLike = function (a) {
  var b = goog.typeOf(a);
  return b == "array" || b == "object" && typeof a.length == "number"
};
goog.isDateLike = function (a) {
  return goog.isObject(a) && typeof a.getFullYear == "function"
};
goog.isString = function (a) {
  return typeof a == "string"
};
goog.isBoolean = function (a) {
  return typeof a == "boolean"
};
goog.isNumber = function (a) {
  return typeof a == "number"
};
goog.isFunction = function (a) {
  return goog.typeOf(a) == "function"
};
goog.isObject = function (a) {
  var b = typeof a;
  return b == "object" && a != null || b == "function"
};
goog.getUid = function (a) {
  return a[goog.UID_PROPERTY_] || (a[goog.UID_PROPERTY_] = ++goog.uidCounter_)
};
goog.removeUid = function (a) {
  "removeAttribute" in a && a.removeAttribute(goog.UID_PROPERTY_);
  try {
    delete a[goog.UID_PROPERTY_]
  } catch (b) {}

};
goog.UID_PROPERTY_ = "closure_uid_" + Math.floor(2147483648 * Math.random()).toString(36);
goog.uidCounter_ = 0;
goog.getHashCode = goog.getUid;
goog.removeHashCode = goog.removeUid;
goog.cloneObject = function (a) {
  var b = goog.typeOf(a);
  if (b == "object" || b == "array") {
    if (a.clone)
      return a.clone();
    var b = b == "array" ? [] : {},
    c;
    for (c in a)
      b[c] = goog.cloneObject(a[c]);
    return b
  }
  return a
};
goog.bindNative_ = function (a, b, c) {
  return a.call.apply(a.bind, arguments)
};
goog.bindJs_ = function (a, b, c) {
  if (!a)
    throw Error();
  if (arguments.length > 2) {
    var d = Array.prototype.slice.call(arguments, 2);
    return function () {
      var c = Array.prototype.slice.call(arguments);
      Array.prototype.unshift.apply(c, d);
      return a.apply(b, c)
    }
  }
  return function () {
    return a.apply(b, arguments)
  }
};
goog.bind = function (a, b, c) {
  goog.bind = Function.prototype.bind && Function.prototype.bind.toString().indexOf("native code") != -1 ? goog.bindNative_ : goog.bindJs_;
  return goog.bind.apply(null, arguments)
};
goog.partial = function (a, b) {
  var c = Array.prototype.slice.call(arguments, 1);
  return function () {
    var b = Array.prototype.slice.call(arguments);
    b.unshift.apply(b, c);
    return a.apply(this, b)
  }
};
goog.mixin = function (a, b) {
  for (var c in b)
    a[c] = b[c]
};
goog.now = Date.now || function () {
  return +new Date
};
goog.globalEval = function (a) {
  if (goog.global.execScript)
    goog.global.execScript(a, "JavaScript");
  else if (goog.global.eval) {
    if (goog.evalWorksForGlobals_ == null) {
      goog.global.eval("var _et_ = 1;");
      if (typeof goog.global._et_ != "undefined") {
        delete goog.global._et_;
        goog.evalWorksForGlobals_ = true
      } else
        goog.evalWorksForGlobals_ = false
    }
    if (goog.evalWorksForGlobals_)
      goog.global.eval(a);
    else {
      var b = goog.global.document,
      c = b.createElement("script");
      c.type = "text/javascript";
      c.defer = false;
      c.appendChild(b.createTextNode(a));
      b.body.appendChild(c);
      b.body.removeChild(c)
    }
  } else
    throw Error("goog.globalEval not available");
};
goog.evalWorksForGlobals_ = null;
goog.getCssName = function (a, b) {
  var c = function (a) {
    return goog.cssNameMapping_[a] || a
  },
  d = function (a) {
    for (var a = a.split("-"), b = [], d = 0; d < a.length; d++)
      b.push(c(a[d]));
    return b.join("-")
  },
  d = goog.cssNameMapping_ ? goog.cssNameMappingStyle_ == "BY_WHOLE" ? c : d : function (a) {
    return a
  };
  return b ? a + "-" + d(b) : d(a)
};
goog.setCssNameMapping = function (a, b) {
  goog.cssNameMapping_ = a;
  goog.cssNameMappingStyle_ = b
};
!COMPILED && goog.global.CLOSURE_CSS_NAME_MAPPING && (goog.cssNameMapping_ = goog.global.CLOSURE_CSS_NAME_MAPPING);
goog.getMsg = function (a, b) {
  var c = b || {},
  d;
  for (d in c)
    var e = ("" + c[d]).replace(/\$/g, "$$$$"), a = a.replace(RegExp("\\{\\$" + d + "\\}", "gi"), e);
  return a
};
goog.exportSymbol = function (a, b, c) {
  goog.exportPath_(a, b, c)
};
goog.exportProperty = function (a, b, c) {
  a[b] = c
};
goog.inherits = function (a, b) {
  function c() {}

  c.prototype = b.prototype;
  a.superClass_ = b.prototype;
  a.prototype = new c;
  a.prototype.constructor = a
};
goog.base = function (a, b, c) {
  var d = arguments.callee.caller;
  if (d.superClass_)
    return d.superClass_.constructor.apply(a, Array.prototype.slice.call(arguments, 1));
  for (var e = Array.prototype.slice.call(arguments, 2), f = false, g = a.constructor; g; g = g.superClass_ && g.superClass_.constructor)
    if (g.prototype[b] === d)
      f = true;
    else if (f)
      return g.prototype[b].apply(a, e);
  if (a[b] === d)
    return a.constructor.prototype[b].apply(a, e);
  throw Error("goog.base called from a method of one name to a method of a different name");
};
goog.scope = function (a) {
  a.call(goog.global)
};
var simcity = {
  AgentQueryUI : {},
  cAgentQueryUIHandler : function () {
    this.UIHandler = scrui.cUIHandler;
    this.UIHandler();
    this.mAgentQueryUILayout = this.mParentControl = null;
    this.mOriginalLayoutWidth = 0;
    this.mNameTextControl = null;
    this.mDefaultNamePositionLeft = 0;
    this.mDataBindings = this.mZoomToSourceButtonControl = this.mFollowButtonControl = this.mResourceBarAmountControl = this.mResourceBarFillControl = this.mResourceBarContainerControl = this.mResourceTextControl = this.mResourceWindowControl = this.mSimStatusIconWindowControl =
      this.mSourceTextControl = this.mDestinationTextControl = null;
    this.mCurrentSharedBindings = [];
    this.mCurrentSharedTimedRefreshBindings = [];
    this.mCurrentDataBindings = [];
    this.mRefreshTimer = 0;
    this.mDefaultDestinationTextColor = this.mDestinationPrependText = this.mDestinationText = "";
    this.mAvatarTemplateContainer = null;
    this.mAgentGender = 1
  }
};
goog.inherits(simcity.cAgentQueryUIHandler, scrui.cUIHandler);
simcity.cAgentQueryUIHandler.kLayoutNameTextID = 164191353;
simcity.cAgentQueryUIHandler.kLayoutIconWindowID = 237484883;
simcity.cAgentQueryUIHandler.kLayoutDestinationTextID = 236702504;
simcity.cAgentQueryUIHandler.kLayoutSourceTextID = 237570896;
simcity.cAgentQueryUIHandler.kLayoutSimStatusIconWindowID = 237916421;
simcity.cAgentQueryUIHandler.kLayoutResourceWindowID = 238178069;
simcity.cAgentQueryUIHandler.kLayoutResourceTextID = 237979994;
simcity.cAgentQueryUIHandler.kLayoutResourceBarContainerID = 238178071;
simcity.cAgentQueryUIHandler.klayoutResourceBarFillID = 238178073;
simcity.cAgentQueryUIHandler.kLayoutResourceBarAmountID = 252673365;
simcity.cAgentQueryUIHandler.kLayoutFollowAgentCamButtonID = 238781781;
simcity.cAgentQueryUIHandler.kLayoutZoomToSourceButtonID = 238783027;
simcity.cAgentQueryUIHandler.kLayoutAvatarTemplateContainer = 253206823;
simcity.cAgentQueryUIHandler.kBindingTypePosition = 238092092;
simcity.cAgentQueryUIHandler.kBindingTypeName = 238084822;
simcity.cAgentQueryUIHandler.kBindingTypeGender = 244221262;
simcity.cAgentQueryUIHandler.kBindingTypeDestination = 238086977;
simcity.cAgentQueryUIHandler.kBindingTypeSource = 238090037;
simcity.cAgentQueryUIHandler.kBindingTypeSimStatus = 238092041;
simcity.cAgentQueryUIHandler.kBindingTypePrependDestination = 238853567;
simcity.cAgentQueryUIHandler.kBindingTypeResourceBin = 238091235;
simcity.cAgentQueryUIHandler.kBindingTypeShowGoToSource = 251821342;
simcity.cAgentQueryUIHandler.kBindingTypeRegionalBoxUID = 253205894;
simcity.cAgentQueryUIHandler.kRefreshTime = 1E3;
simcity.cAgentQueryUIHandler.prototype.Init = function (a) {
  scrui.Assert(null !== a);
  this.mParentControl = a;
  this.mAgentQueryUILayout = gUIManager.LoadLayout("Layouts/AgentQueryLayout.js", this.mParentControl);
  this.mOriginalLayoutWidth = this.mAgentQueryUILayout.mWidth;
  this.mNameTextControl = this.mAgentQueryUILayout.FindControlByID(simcity.cAgentQueryUIHandler.kLayoutNameTextID);
  this.mDefaultNamePositionLeft = this.mNameTextControl.mLeft;
  this.mDestinationTextControl = this.mAgentQueryUILayout.FindControlByID(simcity.cAgentQueryUIHandler.kLayoutDestinationTextID);
  this.mSourceTextControl = this.mAgentQueryUILayout.FindControlByID(simcity.cAgentQueryUIHandler.kLayoutSourceTextID);
  this.mSimStatusIconWindowControl = this.mAgentQueryUILayout.FindControlByID(simcity.cAgentQueryUIHandler.kLayoutSimStatusIconWindowID);
  this.mResourceWindowControl = this.mAgentQueryUILayout.FindControlByID(simcity.cAgentQueryUIHandler.kLayoutResourceWindowID);
  this.mResourceTextControl = this.mAgentQueryUILayout.FindControlByID(simcity.cAgentQueryUIHandler.kLayoutResourceTextID);
  this.mResourceBarContainerControl =
    this.mAgentQueryUILayout.FindControlByID(simcity.cAgentQueryUIHandler.kLayoutResourceBarContainerID);
  this.mResourceBarFillControl = this.mAgentQueryUILayout.FindControlByID(simcity.cAgentQueryUIHandler.klayoutResourceBarFillID);
  this.mResourceBarAmountControl = this.mAgentQueryUILayout.FindControlByID(simcity.cAgentQueryUIHandler.kLayoutResourceBarAmountID);
  this.mFollowButtonControl = this.mAgentQueryUILayout.FindControlByID(simcity.cAgentQueryUIHandler.kLayoutFollowAgentCamButtonID);
  this.mZoomToSourceButtonControl =
    this.mAgentQueryUILayout.FindControlByID(simcity.cAgentQueryUIHandler.kLayoutZoomToSourceButtonID);
  this.mDefaultDestinationTextColor = this.mDestinationTextControl.mTextElement.style.color;
  this.mAvatarTemplateContainer = this.mAgentQueryUILayout.FindControlByID(simcity.cAgentQueryUIHandler.kLayoutAvatarTemplateContainer);
  this.Hide();
  this.mDataBindings = simcity.AgentQueryDataBindings
};
simcity.cAgentQueryUIHandler.prototype.AddDataBinding = function (a) {
  a && this.mCurrentDataBindings.push(a)
};
simcity.cAgentQueryUIHandler.prototype.AddDataBindings = function (a) {
  if (a)
    for (var b = a.length, c = 0; c < b; ++c)
      this.AddDataBinding(a[c])
};
simcity.cAgentQueryUIHandler.prototype.HandleGameEvent = function (a, b) {
  switch (a) {
  case simcity.kGameMessageAgentSelected:
    this.mRefreshTimer = 0;
    this.mCurrentDataBindings = [];
    this.Hide();
    this.mAgentQueryUILayout.SetWidth(this.mOriginalLayoutWidth);
    this.mCurrentSharedBindings = simcity.kSharedAgentQueryDataBindings;
    this.mCurrentSharedTimedRefreshBindings = simcity.kSharedAgentQueryTimedRefreshDataBindings;
    scrui.Assert(simcity.AgentQueryDataBindings[b.transportType], "Agent has invalid scTransportUIType. Please check the prop file for this agent.");
    this.AddDataBindings(simcity.AgentQueryDataBindings[b.transportType]);
    this.Show(!0);
    this.SendDataBindingRequest(this.mCurrentSharedTimedRefreshBindings, !1);
    this.SendDataBindingRequest(this.mCurrentDataBindings, !1);
    simcity.gEventManager.TriggerEvent(simcity.gEventTypes.GENERICEVENT, b.transportType, this.mAgentQueryUILayout);
    break;
  case simcity.kGameMessageActorSelected:
    this.mRefreshTimer = 0;
    this.Hide();
    this.mAgentQueryUILayout.SetWidth(this.mOriginalLayoutWidth);
    this.mCurrentSharedBindings = simcity.kSharedActorQueryDataBindings;
    this.mCurrentSharedTimedRefreshBindings = simcity.kSharedActorQueryTimedRefreshDataBindings;
    this.mCurrentDataBindings = [];
    this.Show(!1);
    this.SendDataBindingRequest(this.mCurrentSharedTimedRefreshBindings, !1);
    this.SendDataBindingRequest(this.mCurrentDataBindings, !1);
    break;
  case simcity.kGameMessageAgentDeselected:
    this.mCurrentSharedBindings = [],
    this.mCurrentSharedTimedRefreshBindings = [],
    this.mCurrentDataBindings = [],
    this.Hide()
  }
};
simcity.cAgentQueryUIHandler.prototype.HandleUIMessage = function (a, b) {
  switch (a) {
  case scrui.kMsgTypeButtonClicked:
    switch (b) {
    case simcity.cAgentQueryUIHandler.kLayoutFollowAgentCamButtonID:
      scrui.PostGameCommand(scrui.BuildCommand([simcity.kCommandActivateFollowAgentCam]));
      break;
    case simcity.cAgentQueryUIHandler.kLayoutZoomToSourceButtonID:
      simcity.IsTutorialInProgress() || scrui.PostGameCommand(scrui.BuildCommand([simcity.kCommandZoomToAgentSource]))
    }
  }
};
simcity.cAgentQueryUIHandler.prototype.Update = scrui.Client_ProfZone("AgentQueryUIUpdate", function (a) {
    this.mAgentQueryUILayout && (this.mAgentQueryUILayout.mIsVisible && this.mCurrentDataBindings) && (this.SendDataBindingRequest(this.mCurrentSharedBindings, !0), this.mRefreshTimer -= a, 0 >= this.mRefreshTimer && (this.mRefreshTimer = simcity.cAgentQueryUIHandler.kRefreshTime, this.mAgentQueryUILayout.SetWidth(this.mOriginalLayoutWidth), this.AutoResizeLayout(this.mNameTextControl), this.SendDataBindingRequest(this.mCurrentSharedTimedRefreshBindings,
          !0), this.SendDataBindingRequest(this.mCurrentDataBindings, !0)))
  });
simcity.cAgentQueryUIHandler.prototype.SendDataBindingRequest = function (a, b) {
  var c = this,
  d = a.length,
  e = [],
  f = [];
  simcity.GenerateDataBindingQueries(a, e, {}, f, b);
  simcity.RequestDataBindingData(e, a, f, b, function (e) {
    for (var f = 0; f < d; ++f) {
      var i = a[f];
      if (i.dynamic || !1 === b)
        switch (i.bindingType) {
        case simcity.cAgentQueryUIHandler.kBindingTypePosition:
          c.SetPosition(e[f].screenPosition);
          break;
        case simcity.cAgentQueryUIHandler.kBindingTypeShowGoToSource:
          c.SetGoToSourceVisible(i.update(e[f]));
          break;
        case simcity.cAgentQueryUIHandler.kBindingTypeName:
          c.SetName(i.update(e[f]));
          break;
        case simcity.cAgentQueryUIHandler.kBindingTypeGender:
          c.SetGender(i.update(e[f]));
          break;
        case simcity.cAgentQueryUIHandler.kBindingTypeRegionalBoxUID:
          c.SetPlayerDisplay(i.update(e[f]));
          break;
        case simcity.cAgentQueryUIHandler.kBindingTypeDestination:
          c.SetDestination(i.update(e[f]), i.color);
          break;
        case simcity.cAgentQueryUIHandler.kBindingTypeSource:
          c.SetSource(i.update(e[f]));
          break;
        case simcity.cAgentQueryUIHandler.kBindingTypeSimStatus:
          c.SetSimStatus(i.update(e[f]), i.iconPath);
          break;
        case simcity.cAgentQueryUIHandler.kBindingTypePrependDestination:
          c.SetDestinationPrependText(i.update(e[f]),
            i.color);
          break;
        case simcity.cAgentQueryUIHandler.kBindingTypeResourceBin:
          c.SetResourceBinInfo(e[f].resource, i.localeString, i.formatType);
          break;
        default:
          i.hasOwnProperty("update") && i.update(e[f])
        }
    }
  })
};
simcity.cAgentQueryUIHandler.prototype.SetPosition = function (a) {
  a && this.mAgentQueryUILayout.SetPosition(a[0] - this.mAgentQueryUILayout.mWidth / 2, a[1] - this.mAgentQueryUILayout.mHeight)
};
simcity.cAgentQueryUIHandler.prototype.SetGoToSourceVisible = function (a) {
  a ? this.mZoomToSourceButtonControl.SetVisibility(a) : this.mZoomToSourceButtonControl.SetVisibility(!1)
};
simcity.cAgentQueryUIHandler.prototype.SetName = function (a) {
  var b = "";
  a.vehicleName ? this.mNameTextControl.SetLocaleText(scrui.LocaleStringFromLocaleProperty(a.vehicleName), {
    cityName : a.cityName
  }) : (a.firstName && (b = scrui.TextFromLocaleProperty(a.firstName)), a.lastName && (b += " " + this.GetGenderedTextFromLocaleString(scrui.LocaleStringFromLocaleProperty(a.lastName), this.mAgentGender)), this.mNameTextControl.SetRawText(b));
  this.mDestinationTextControl.SetTextColor(this.mDefaultDestinationTextColor);
  this.AutoResizeLayout(this.mNameTextControl)
};
simcity.cAgentQueryUIHandler.prototype.SetGender = function (a) {
  this.mAgentGender = a
};
simcity.cAgentQueryUIHandler.prototype.SetPlayerDisplay = function (a) {
  0 < a ? (a = simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData.mBoxes[a], simcity.gGlobalUIHandler.mAvatarManagerHandler.AddSubscription({
      playerID : a.creatorId,
      layoutInfo : this.mAvatarTemplateContainer,
      isBoxClaimed : !0,
      isMyBox : a.creatorId == simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData.mPlayingBox.creatorId,
      isCurrentBox : !1,
      showAlerts : !1,
      group : "agentQuery" + a.uid,
      boxID : a.uid
    }), this.mAvatarTemplateContainer.SetVisibility(!0)) :
  this.mAvatarTemplateContainer.SetVisibility(!1)
};
simcity.cAgentQueryUIHandler.prototype.SetDestination = function (a, b) {
  a && (this.mDestinationText = this.GetGenderedTextFromLocaleString(scrui.LocaleStringFromLocaleProperty(a), this.mAgentGender), this.UpdateDestination(b))
};
simcity.cAgentQueryUIHandler.prototype.SetSource = function (a) {
  a ? (this.mSourceTextControl.SetVisibility(!0), this.mSourceTextControl.UpdateLocaleText({
      sourceName : a,
      gender : this.mAgentGender
    }), this.AutoResizeLayout(this.mSourceTextControl)) : this.mSourceTextControl.SetVisibility(!1)
};
simcity.cAgentQueryUIHandler.prototype.SetSimStatus = function (a, b) {
  a && (this.mSimStatusIconWindowControl.SetVisibility(!0), this.mSimStatusIconWindowControl.SetWindowImage(b), this.SetDestinationPrependText(a, null))
};
simcity.cAgentQueryUIHandler.prototype.SetDestinationPrependText = function (a, b) {
  a && (this.mDestinationPrependText = this.GetGenderedTextFromLocaleString(a, this.mAgentGender), this.UpdateDestination(b))
};
simcity.cAgentQueryUIHandler.prototype.SetResourceBinInfo = function (a, b, c) {
  this.mResourceWindowControl.SetVisibility(!0);
  var d;
  b.LoadString(function () {
    d = b.GetText()
  });
  this.mResourceTextControl.SetRawText(d);
  this.AutoResizeLayout(this.mResourceTextControl);
  var e = a.amount / a.capacity;
  this.mResourceBarFillControl.SetWidth(e * this.mResourceBarContainerControl.mWidth);
  var f = this.GetResourceTextString(c);
  if ("undefined" != c && c != simcity.NumberFormat.Standard) {
    var g = c ? simcity.FormatLargeNumberByType(a.amount,
        c).number : a.amount,
    a = c ? simcity.FormatLargeNumberByType(a.capacity, c).number : a.capacity,
    h;
    f.LoadString(function () {
      h = f.GetText()
    });
    this.mResourceBarAmountControl.SetRawText(g + "/" + a + " " + h);
    this.AutoResizeProgressBar(this.mResourceBarAmountControl, e)
  } else
    this.mResourceBarAmountControl.SetRawText(a.amount + "/" + a.capacity)
};
simcity.cAgentQueryUIHandler.prototype.GetResourceTextString = function (a) {
  var b = 0;
  switch (a) {
  case simcity.NumberFormat.Tons:
    b = "0x0e8d4573";
    break;
  case simcity.NumberFormat.Barrels:
    b = "0x0e8d4575";
    break;
  case simcity.NumberFormat.Crates:
  case simcity.NumberFormat.Units:
    b = "0x0e8d4574"
  }
  return new scrui.cLocaleString("BuildingRollover.json", b, "AgentQueryUI")
};
simcity.cAgentQueryUIHandler.prototype.AutoResizeLayout = function (a) {
  var b = a.GetTextWidth(),
  a = a.mWidth - b;
  0 > a && this.mAgentQueryUILayout.SetWidth(this.mAgentQueryUILayout.mWidth - a + 1)
};
simcity.cAgentQueryUIHandler.prototype.AutoResizeProgressBar = function (a) {
  var b = a.GetTextWidth(),
  c = a.mWidth - b;
  0 > c ? (a.SetPosition(a.mLeft + c, a.mTop, b, a.mHeight), this.mAgentQueryUILayout.SetWidth(this.mAgentQueryUILayout.mWidth - a.mLeft + this.mResourceTextControl.mWidth), this.mResourceBarContainerControl.SetPosition(this.mResourceBarContainerControl.mLeft + c, this.mResourceBarContainerControl.mTop, b + 1, this.mResourceBarContainerControl.mHeight)) : this.mAgentQueryUILayout.SetWidth(this.mAgentQueryUILayout.mWidth -
    a.mLeft + this.mResourceTextControl.mWidth + 10)
};
simcity.cAgentQueryUIHandler.prototype.GetGenderedTextFromLocaleString = function (a, b) {
  var c = "";
  a.LoadString(function () {
    c = a.GetText({
        gender : b
      })
  });
  return c
};
simcity.cAgentQueryUIHandler.prototype.UpdateDestination = function (a) {
  a ? this.mDestinationTextControl.SetTextColor(a) : this.mDestinationTextControl.SetTextColor(this.mDefaultDestinationTextColor);
  this.mDestinationTextControl.SetRawText(this.mDestinationPrependText + " " + this.mDestinationText);
  this.AutoResizeLayout(this.mDestinationTextControl)
};
simcity.cAgentQueryUIHandler.prototype.Show = function (a) {
  this.mAgentQueryUILayout.SetVisibility(!0);
  this.mFollowButtonControl.SetSelected(!1);
  this.mZoomToSourceButtonControl.SetEnabled(a);
  this.mZoomToSourceButtonControl.SetVisibility(!1);
  this.mAvatarTemplateContainer.SetVisibility(!1);
  this.mDestinationTextControl.SetRawText("");
  this.mNameTextControl.SetPosition(this.mDefaultNamePositionLeft, this.mNameTextControl.mTop);
  a ? this.mFollowButtonControl.SetVisibility(!0) : this.mFollowButtonControl.SetVisibility(!1)
};
simcity.cAgentQueryUIHandler.prototype.Hide = function () {
  this.mAgentQueryUILayout.SetVisibility(!1);
  this.mSimStatusIconWindowControl.SetVisibility(!1);
  this.mResourceWindowControl.SetVisibility(!1);
  this.mDestinationPrependText = this.mDestinationText = "";
  this.mAgentGender = 1;
  this.mDestinationTextControl.SetTextColor(this.mDefaultDestinationTextColor)
};
simcity.RegionTradeUI = {};
simcity.kRegionTradeOutgoingTokenPanelID = 239646136;
simcity.kRegionTradeIncomingTokenPanelID = 239644807;
simcity.kRegionTradeRefreshTime = 1E3;
simcity.kRegionTradeTokenType_Fire = "fire";
simcity.kRegionTradeTokenType_Police = "police";
simcity.kRegionTradeTokenType_Garbage = "garbage";
simcity.kRegionTradeTokenType_Health = "health";
simcity.kRegionTradeTokenTypes = [simcity.kRegionTradeTokenType_Fire, simcity.kRegionTradeTokenType_Police, simcity.kRegionTradeTokenType_Garbage, simcity.kRegionTradeTokenType_Health];
simcity.kRegionTradeResourceGiftAmount = 1E4;
simcity.kRegionTradeResourceGiftMaxAmount = 1E7;
simcity.kUtilityPanelIDs = {
  myCity : {
    rootPanel : 239654550,
    tradePanel : 239644807,
    noTradeText : 239811505,
    titleText : 239812302
  },
  item : {
    cityOwnerIcon : 240577914,
    cityNameText : 242413919,
    cityOwnerText : 242413908,
    statusText : 242397569,
    receivingFromCityText : 253390028,
    button : 242397758
  }
};
simcity.kTokenPanelIDs = {
  outgoing : {
    rootPanel : 239654560,
    tokensPanel : 239646136,
    noTokensText : 239811492,
    titleText : 239812235,
    removeTokenPanel : 239901846,
    removeTokenButton : 239901837,
    removeTokenText : 239901832
  },
  incoming : {
    rootPanel : 239654550,
    tokensPanel : 239644807,
    noTokensText : 239811505,
    titleText : 239812302,
    shareTokenPanel : 239811577,
    shareTokenButton : 239811671,
    shareTokenText : 239811734
  },
  avatar : {
    avatarImage : 237907905,
    btnAvatar : 242832115,
    avatarOnlineHighlight : 239800634,
    avatarAlert : 239807635,
    textWindow : 242832079,
    playerName : 242832082
  },
  vehicle : {
    iconAndButtonWindow : 247687083,
    amountText : 244665831,
    tooltipText : 239656078,
    buttonsWindow : 246016822,
    buttonAdd : 246016823,
    buttonSubtract : 246016824,
    icon : 239656036
  }
};
simcity.kGiftingPanelIDs = {
  resources : {
    startingTabID : 249422240,
    lastTabID : 249422250,
    titleBarText : 241808376,
    selectedCityTitleBarText : 241808377,
    playingCity : {
      amountText : 249485363,
      nameText : 249485369,
      truckIcon : 249761536,
      railIcon : 249761537,
      boatIcon : 249761538
    },
    viewingCity : {
      avatarWindow : 243530044,
      amountText : 249485356,
      nameText : 249485359,
      displayInfoAnimation : 249648679,
      truckIcon : 249761539,
      railIcon : 249761540,
      boatIcon : 249761541
    },
    unconnectedCity : {
      window : 249764729,
      nameText : 249918847,
      displayInfoAnimation : 249918411
    },
    sendButton : 236790941,
    sendAmountText : 241707655,
    incrementButton : 236790942,
    decrementButton : 236790943,
    maxAmountButton : 249916003,
    pendingText : 249574691,
    tab : {
      button : 249484086,
      lightIcon : 249484087,
      darkIcon : 249484088,
      tooltipResourceText : 249914354,
      tooltipAmountText : 249914355
    }
  }
};
simcity.kGiftingTooltips = {
  SendingEnabled : "",
  UnclaimedOrUnconnectedCity : new scrui.cLocaleString("Gifting.json", "0x0ee94dee", "City not connected/claimed placeholder"),
  GiftInProgress : new scrui.cLocaleString("Gifting.json", "0x0e952dc6", "Gift in progress placeholder"),
  EmptyGiftAmount : new scrui.cLocaleString("Gifting.json", "0x0ee94def", "Increase gift amount placeholder")
};
simcity.cRegionTradeUIHandler = function () {
  this.UIHandler = scrui.cUIHandler;
  this.UIHandler();
  this.mRegionViewUI = simcity.gGlobalUIHandler.mRegionViewUIHandler;
  this.mStatusIconLayoutPath = "Layouts/Region/TradeTokenStatusIcon.js";
  this.mTimeSinceLastUpdate = 0;
  this.mResourceGiftingItemControls = [];
  this.mResourceGiftingCurrentAmount = this.mResourceGiftingSelectedTab = this.mRefreshTimer = 0;
  this.mResourceGiftingMaxAmount = !1;
  this.mResourceGiftingCurrentClickAmount = this.mResourceGiftingLastTickPress = this.mResourceGiftingLegendControl =
    0
};
goog.inherits(simcity.cRegionTradeUIHandler, scrui.cUIHandler);
simcity.cRegionTradeUIHandler.kVehicleContainers = [249129195, 249129200, 249129202, 249129206, 249129209];
simcity.cRegionTradeUIHandler.kVehicleContainerImage = 248984352;
simcity.cRegionTradeUIHandler.kVehicleContainerTextAmount = 248984355;
simcity.cRegionTradeUIHandler.kNoCitySelectedBanner = 248983030;
simcity.cRegionTradeUIHandler.kGivingToBox = 248983052;
simcity.cRegionTradeUIHandler.kCoveringBox = 248983055;
simcity.cRegionTradeUIHandler.kTxtMyCityName = 248983081;
simcity.cRegionTradeUIHandler.kTxtNeighborCityName = 248983044;
simcity.cRegionTradeUIHandler.kTxtSpinnerValue = 248979371;
simcity.cRegionTradeUIHandler.kTxtServiceHoverName = 250259057;
simcity.cRegionTradeUIHandler.kTxtServiceHoverDescription = 250258365;
simcity.cRegionTradeUIHandler.kTxtServiceHoverImage = 250259876;
simcity.cRegionTradeUIHandler.kBtnIncrementVehicle = 248979367;
simcity.cRegionTradeUIHandler.kBtnDecrementVehicle = 248979369;
simcity.cRegionTradeUIHandler.kTxtSpinnerAmount = 248979371;
simcity.cRegionTradeUIHandler.kYourAvatarContainer = 248983083;
simcity.cRegionTradeUIHandler.kTradePartnerAvatarContainer = 249493477;
simcity.cRegionTradeUIHandler.kTxtServiceTradeTitleNeighbour = 249659712;
simcity.cRegionTradeUIHandler.kTxtServiceTradeTitle = 249659715;
simcity.cRegionTradeUIHandler.kTxtSelectCityText = 248983033;
simcity.cRegionTradeUIHandler.prototype.Init = function () {};
simcity.cRegionTradeUIHandler.prototype.HandleUIMessage = function (a, b, c) {
  switch (a) {
  case scrui.kMsgTypeButtonClicked:
    switch (b) {
    case simcity.cRegionTradeUIHandler.kBtnIncrementVehicle:
      c.mUserData && this.ServiceVehicleButtonPressed("increment", c.mUserData);
      break;
    case simcity.cRegionTradeUIHandler.kBtnDecrementVehicle:
      c.mUserData && this.ServiceVehicleButtonPressed("decrement", c.mUserData);
      break;
    case simcity.kUtilityPanelIDs.item.button:
      c.mUserData && this.ToggleUtilityTrade(c);
      break;
    case simcity.kGiftingPanelIDs.resources.tab.button:
      0 <=
      c.mUserData && this.ShowGiftingTab(c.mUserData);
      break;
    case simcity.kGiftingPanelIDs.resources.sendButton:
      c.mUserData && this.SendResourceGift(c);
      break;
    case simcity.kGiftingPanelIDs.resources.maxAmountButton:
      this.mResourceGiftingMaxAmount = !0;
      this.UpdateGiftingTextForSelectedTab();
      break;
    case simcity.kGiftingPanelIDs.resources.incrementButton:
      this.UpdateGiftingClickRun();
      this.mResourceGiftingCurrentAmount = 19 <= this.mResourceGiftingCurrentClickAmount && 0 == this.mResourceGiftingCurrentAmount % (50 * simcity.kRegionTradeResourceGiftAmount) ?
        this.mResourceGiftingCurrentAmount + 50 * simcity.kRegionTradeResourceGiftAmount : 14 <= this.mResourceGiftingCurrentClickAmount && 0 == this.mResourceGiftingCurrentAmount % (10 * simcity.kRegionTradeResourceGiftAmount) ? this.mResourceGiftingCurrentAmount + 10 * simcity.kRegionTradeResourceGiftAmount : 5 <= this.mResourceGiftingCurrentClickAmount && 0 == this.mResourceGiftingCurrentAmount % (5 * simcity.kRegionTradeResourceGiftAmount) ? this.mResourceGiftingCurrentAmount + 5 * simcity.kRegionTradeResourceGiftAmount : this.mResourceGiftingCurrentAmount +
        simcity.kRegionTradeResourceGiftAmount;
      this.UpdateGiftingTextForSelectedTab();
      break;
    case simcity.kGiftingPanelIDs.resources.decrementButton:
      this.UpdateGiftingClickRun(),
      this.mResourceGiftingCurrentAmount = 19 <= this.mResourceGiftingCurrentClickAmount && 0 == this.mResourceGiftingCurrentAmount % (50 * simcity.kRegionTradeResourceGiftAmount) ? this.mResourceGiftingCurrentAmount - 50 * simcity.kRegionTradeResourceGiftAmount : 14 <= this.mResourceGiftingCurrentClickAmount && 0 == this.mResourceGiftingCurrentAmount % (10 * simcity.kRegionTradeResourceGiftAmount) ?
        this.mResourceGiftingCurrentAmount - 10 * simcity.kRegionTradeResourceGiftAmount : 5 <= this.mResourceGiftingCurrentClickAmount && 0 == this.mResourceGiftingCurrentAmount % (5 * simcity.kRegionTradeResourceGiftAmount) ? this.mResourceGiftingCurrentAmount - 5 * simcity.kRegionTradeResourceGiftAmount : this.mResourceGiftingCurrentAmount - simcity.kRegionTradeResourceGiftAmount,
      this.UpdateGiftingTextForSelectedTab()
    }
  }
};
simcity.cRegionTradeUIHandler.prototype.GetViewingCity = function () {
  return this.mRegionViewUI.mSelectedRegionViewItem ? this.mRegionViewUI.mSelectedRegionViewItem.mRegionalBoxID : this.mRegionViewUI.mRegionData.mPlayingBox.uid
};
simcity.cRegionTradeUIHandler.prototype.GetServiceVehicleButton = function (a, b) {
  var c = simcity.gGlobalUIHandler.mRegionViewUIHandler.mContextPanelObj,
  d = this.mRegionViewUI.mContextPanelDataBinding.getServiceVehicles();
  if (!c || !d)
    return null;
  for (d = 0; d < simcity.cRegionTradeUIHandler.kVehicleContainers.length; d++) {
    var e = c.FindControlByID(simcity.cRegionTradeUIHandler.kVehicleContainers[d]);
    if (e && (e = e.FindControlByID(a)) && e.mUserData && e.mUserData[0] == b)
      return e
  }
  return null
};
simcity.cRegionTradeUIHandler.prototype.GetResourceButton = function (a) {
  for (var b = simcity.kGiftingPanelIDs.resources.startingTabID, c = simcity.gGlobalUIHandler.mRegionViewUIHandler.mContextPanelObj, d = 0, e = simcity.kGiftableResourcesDataBindings.length; d < e; ++d) {
    if (simcity.kGiftableResourcesDataBindings[d]) {
      var f = c.FindControlByID(b).FindControlByID(simcity.kGiftingPanelIDs.resources.tab.button);
      if (f && f.mUserData == a)
        return f
    }
    ++b
  }
  return null
};
simcity.cRegionTradeUIHandler.prototype.ShowTokenUI = function (a) {
  for (var b = this.mRegionViewUI.mContextPanelDataBinding, c = b.getServiceVehicles(), d = this.IsViewingOwnBox(), e = this.IsConnectedToPlayingCityViaRoad(this.GetViewingCity()), f = simcity.gGlobalUIHandler.mRegionViewUIHandler, g = f.mRegionData, h = f.mContextPanelObj, i = 0; i < simcity.cRegionTradeUIHandler.kVehicleContainers.length; i++) {
    var j = h.FindControlByID(simcity.cRegionTradeUIHandler.kVehicleContainers[i]);
    if (j && (j.SetVisibility(!1), i < c.length && (j.SetVisibility(!0),
          d || !e ? (j.FindControlByID(simcity.cRegionTradeUIHandler.kBtnIncrementVehicle).SetVisibility(!1), j.FindControlByID(simcity.cRegionTradeUIHandler.kBtnDecrementVehicle).SetVisibility(!1)) : (j.FindControlByID(simcity.cRegionTradeUIHandler.kBtnIncrementVehicle).SetVisibility(!0), j.FindControlByID(simcity.cRegionTradeUIHandler.kBtnDecrementVehicle).SetVisibility(!0)), j.FindControlByID(simcity.cRegionTradeUIHandler.kVehicleContainerImage).SetWindowImage(c[i].icon), j.FindControlByID(simcity.cRegionTradeUIHandler.kTxtServiceHoverName).SetLocaleText(c[i].text),
          j.FindControlByID(simcity.cRegionTradeUIHandler.kTxtServiceHoverImage).SetWindowImage(c[i].rolloverIcon), j.FindControlByID(simcity.cRegionTradeUIHandler.kTxtServiceHoverDescription).SetLocaleText(c[i].rolloverText), f.mSelectedRegionViewItem))) {
      var k = g.mConnectedUnits[f.mSelectedRegionViewItem.mRegionalBoxID];
      j.FindControlByID(simcity.cRegionTradeUIHandler.kBtnIncrementVehicle).mUserData = [c[i].index, k];
      j.FindControlByID(simcity.cRegionTradeUIHandler.kBtnDecrementVehicle).mUserData = [c[i].index, k]
    }
  }
  simcity.gGlobalUIHandler.mAvatarManagerHandler.ClearSubscriptions("tradeServicesYou");
  c = h.FindControlByID(simcity.cRegionTradeUIHandler.kYourAvatarContainer);
  c = {
    playerID : g.mPlayingBox.creatorId,
    layoutInfo : c,
    isBoxClaimed : "true",
    isMyBox : !0,
    isCurrentBox : !1,
    showAlerts : !1,
    group : "tradeServicesYou",
    boxID : g.mPlayingBox.uid
  };
  simcity.gGlobalUIHandler.mAvatarManagerHandler.AddSubscription(c);
  d ? h.FindControlByID(simcity.cRegionTradeUIHandler.kTxtSelectCityText).SetLocaleText(new scrui.cLocaleString("RegionView.json", "0x0ed7185a", "Select a city.")) : this.IsConnectedToPlayingCityViaRoad(this.GetViewingCity()) ?
  h.FindControlByID(simcity.cRegionTradeUIHandler.kTxtSelectCityText).SetLocaleText(new scrui.cLocaleString("RegionView.json", "0x0ef7ea23", "Unclaimed city!")) : h.FindControlByID(simcity.cRegionTradeUIHandler.kTxtSelectCityText).SetLocaleText(new scrui.cLocaleString("RegionView.json", "0x0ef7ea24", "Too far away!"));
  h.FindControlByID(simcity.cRegionTradeUIHandler.kTxtServiceTradeTitle).SetLocaleText(b.getServiceString());
  b = b.getServiceDestinationString();
  !d && e && (d = simcity.gGlobalUIHandler.mRegionViewUIHandler.mSelectedRegionViewItem.mRegionalBoxID,
    e = "", e = g.mCities[d] ? g.mCities[d].name : scrui.ParseLocaleString(g.mCityDefaultData.cities[d].cityName).LoadAndGetTextSynchronous(), h.FindControlByID(simcity.cRegionTradeUIHandler.kTxtServiceTradeTitleNeighbour).SetLocaleText(b, {
      cityname : e
    }), simcity.gGlobalUIHandler.mAvatarManagerHandler.ClearSubscriptions("tradeServicesTradePartner"), g.mBoxes[d] && (e = h.FindControlByID(simcity.cRegionTradeUIHandler.kTradePartnerAvatarContainer), c = {
        playerID : g.mBoxes[d].creatorId,
        layoutInfo : e,
        isBoxClaimed : "true",
        isMyBox : g.mPlayingBox.creatorId ==
        g.mBoxes[d].creatorId,
        isCurrentBox : !1,
        showAlerts : !1,
        group : "tradeServicesTradePartner",
        boxID : d
      }, simcity.gGlobalUIHandler.mAvatarManagerHandler.AddSubscription(c)));
  (g = h.FindControlByID(253646199)) && g.UpdateLocaleText({
    amount : this.GetIncomeTotalForTradedService(a)
  });
  this.SetupResourceTradingBaseUIState(h)
};
simcity.cRegionTradeUIHandler.prototype.GetIncomeTotalForTradedService = function (a) {
  for (var b = 0, c = simcity.GetHistoryData(simcity.kTransactionsToTrack, 20), d = 0, e = c.length; d < e; d++) {
    var f = c[d].label;
    if ("fire" == a && f == simcity.gHistoryData[simcity.kHashServiceIncomeFire].label || "police" == a && f == simcity.gHistoryData[simcity.kHashServiceIncomePolice].label || "garbage" == a && f == simcity.gHistoryData[simcity.kHashServiceIncomeGarbage].label || "garbage" == a && f == simcity.gHistoryData[simcity.kHashServiceIncomeRecycling].label ||
      "health" == a && f == simcity.gHistoryData[simcity.kHashServiceIncomeHealth].label)
      b += c[d].amount
  }
  return b
};
simcity.cRegionTradeUIHandler.prototype.UpdateTokenUI = function () {
  var a = this.mRegionViewUI.mContextPanelDataBinding,
  b = simcity.gGlobalUIHandler.mRegionViewUIHandler,
  c = b.mContextPanelObj,
  d = a.getCurrentValueQueries();
  scrui.RequestGameData(d, function (a) {
    var b = c.FindControlByID(simcity.cRegionTradeUIHandler.kVehicleContainers[0]);
    b.FindControlByID(simcity.cRegionTradeUIHandler.kVehicleContainerImage).SetOpacity(a[0] ? 1 : 0.3);
    b.FindControlByID(simcity.cRegionTradeUIHandler.kVehicleContainerTextAmount).SetRawText(" " +
      (a[0] - a[1]) + "/" + a[0]);
    b.FindControlByID(simcity.cRegionTradeUIHandler.kTxtSpinnerValue).SetRawText("0");
    b.FindControlByID(simcity.cRegionTradeUIHandler.kBtnIncrementVehicle).SetEnabled(0 < a[0] - a[1]);
    b = c.FindControlByID(simcity.cRegionTradeUIHandler.kVehicleContainers[1]);
    b.FindControlByID(simcity.cRegionTradeUIHandler.kVehicleContainerImage).SetOpacity(a[2] ? 1 : 0.3);
    b.FindControlByID(simcity.cRegionTradeUIHandler.kVehicleContainerTextAmount).SetRawText(" " + (a[2] - a[3]) + "/" + a[2]);
    b.FindControlByID(simcity.cRegionTradeUIHandler.kTxtSpinnerValue).SetRawText("0");
    b.FindControlByID(simcity.cRegionTradeUIHandler.kBtnIncrementVehicle).SetEnabled(0 < a[2] - a[3]);
    b = c.FindControlByID(simcity.cRegionTradeUIHandler.kVehicleContainers[2]);
    b.FindControlByID(simcity.cRegionTradeUIHandler.kVehicleContainerImage).SetOpacity(a[4] ? 1 : 0.3);
    b.FindControlByID(simcity.cRegionTradeUIHandler.kVehicleContainerTextAmount).SetRawText(" " + (a[4] - a[5]) + "/" + a[4]);
    b.FindControlByID(simcity.cRegionTradeUIHandler.kTxtSpinnerValue).SetRawText("0");
    b.FindControlByID(simcity.cRegionTradeUIHandler.kBtnIncrementVehicle).SetEnabled(0 <
      a[4] - a[5]);
    b = c.FindControlByID(simcity.cRegionTradeUIHandler.kVehicleContainers[3]);
    b.FindControlByID(simcity.cRegionTradeUIHandler.kVehicleContainerImage).SetOpacity(a[6] ? 1 : 0.3);
    b.FindControlByID(simcity.cRegionTradeUIHandler.kVehicleContainerTextAmount).SetRawText(" " + (a[6] - a[7]) + "/" + a[6]);
    b.FindControlByID(simcity.cRegionTradeUIHandler.kTxtSpinnerValue).SetRawText("0");
    b.FindControlByID(simcity.cRegionTradeUIHandler.kBtnIncrementVehicle).SetEnabled(0 < a[6] - a[7]);
    b = c.FindControlByID(simcity.cRegionTradeUIHandler.kVehicleContainers[4]);
    b.FindControlByID(simcity.cRegionTradeUIHandler.kVehicleContainerImage).SetOpacity(a[8] ? 1 : 0.3);
    b.FindControlByID(simcity.cRegionTradeUIHandler.kVehicleContainerTextAmount).SetRawText(" " + (a[8] - a[9]) + "/" + a[8]);
    b.FindControlByID(simcity.cRegionTradeUIHandler.kTxtSpinnerValue).SetRawText("0");
    b.FindControlByID(simcity.cRegionTradeUIHandler.kBtnIncrementVehicle).SetEnabled(0 < a[8] - a[9])
  });
  d = b.mSelectedRegionViewItem ? b.mSelectedRegionViewItem.mRegionalBoxID : null;
  if (!this.IsViewingOwnBox() && this.IsConnectedToPlayingCityViaRoad(d))
    for (var a =
        a.getServiceVehicles(), b = b.mRegionData.mConnectedUnits[b.mSelectedRegionViewItem.mRegionalBoxID], e = 0; e < a.length; e++) {
      var f = [a[e]],
      d = [],
      g = [];
      simcity.GenerateDataBindingQueries(f, d, {
        argumentList : [b]
      }, g, !1, "queries");
      simcity.RequestDataBindingData(d, f, g, !1, function (a) {
        var a = a[0].outgoingVehicle,
        b = c.FindControlByID(simcity.cRegionTradeUIHandler.kVehicleContainers[e]);
        if (b) {
          b.FindControlByID(simcity.cRegionTradeUIHandler.kBtnDecrementVehicle).SetEnabled(a > 0);
          (b = b.FindControlByID(simcity.cRegionTradeUIHandler.kTxtSpinnerAmount)) &&
          b.SetText(a)
        }
      })
    }
};
simcity.cRegionTradeUIHandler.prototype.SetupResourceTradingBaseUIState = function (a) {
  var b = this.IsViewingOwnBox(),
  c = this.IsConnectedToPlayingCityViaRoad(this.GetViewingCity()),
  d = simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData;
  a.FindControlByID(simcity.cRegionTradeUIHandler.kNoCitySelectedBanner).SetVisibility(b || !c);
  a.FindControlByID(simcity.cRegionTradeUIHandler.kGivingToBox).SetVisibility(!b && c);
  a.FindControlByID(simcity.cRegionTradeUIHandler.kCoveringBox).SetVisibility(b || !c);
  b ? this.SetupTradingAvatars(a) :
  (b = simcity.gGlobalUIHandler.mRegionViewUIHandler.mSelectedRegionViewItem.mRegionalBoxID, c = "", c = d.mCities[b] ? d.mCities[b].name : scrui.ParseLocaleString(d.mCityDefaultData.cities[b].cityName).LoadAndGetTextSynchronous(), a.FindControlByID(simcity.cRegionTradeUIHandler.kTxtNeighborCityName).SetText(c));
  a.FindControlByID(simcity.cRegionTradeUIHandler.kTxtMyCityName).SetText(d.mPlayingBox.name);
  this.UpdateTokenUI()
};
simcity.cRegionTradeUIHandler.prototype.GetCoveringAndReceivingDetails = function () {
  var a = this.mRegionViewUI.mContextPanelDataBinding,
  b = simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData;
  this.mListOfBoxesYouCover = {};
  this.mListOfBoxesCoveringYou = {};
  for (var c = this, d = Object.keys(b.mCityTradeData[b.mPlayingBox.uid].connections), e = a.getServiceVehicles(), f = 0; f < d.length; f++) {
    var g = b.mBoxes[d[f]];
    if (g && "true" === g.isClaimed && this.IsConnectedToPlayingCityViaRoad(d[f])) {
      var h = parseInt(g.uid),
      g = b.mConnectedUnits[h];
      c.mListOfBoxesYouCover[h] = [];
      c.mListOfBoxesCoveringYou[h] = [];
      for (var i = 0; i < e.length; i++) {
        var j = [e[i]],
        k = [],
        l = [];
        simcity.GenerateDataBindingQueries(j, k, {
          argumentList : [g]
        }, l, !1, "queries");
        simcity.RequestDataBindingData(k, j, l, !1, function (b) {
          b = b[0];
          if (b.outgoingVehicle) {
            var d = {
              category : a.tokenType,
              icon : e[i].icon,
              count : b.outgoingVehicle
            };
            c.mListOfBoxesYouCover[h].push(d)
          }
          if (b.incomingVehicle) {
            d = {
              category : a.tokenType,
              icon : e[i].icon,
              count : b.incomingVehicle
            };
            c.mListOfBoxesCoveringYou[h].push(d)
          }
        })
      }
    }
  }
};
simcity.cRegionTradeUIHandler.prototype.SetupTradingAvatars = function (a) {
  for (var b = [249487666, 249487665, 249487663, 249487661, 249487658], c = [249487650, 249487652, 249487654, 249487655, 249487657], d = 0; d < b.length; d++) {
    var e = a.FindControlByID(b[d]);
    e.SetVisibility(!1);
    e = a.FindControlByID(c[d]);
    e.SetVisibility(!1)
  }
  var f = simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData,
  g = simcity.cRegionTradeUIHandler.prototype.GetYourBoxID();
  this.GetCoveringAndReceivingDetails();
  for (var h = Object.keys(this.mListOfBoxesYouCover),
    d = 0; d < h.length; d++) {
    var i = h[d];
    if (this.mListOfBoxesYouCover[i] && this.mListOfBoxesYouCover[i].length) {
      var j = b[d],
      e = a.FindControlByID(j);
      e.SetVisibility(!0);
      var j = e.FindControlByID(249494366),
      k = i == g;
      simcity.gGlobalUIHandler.mAvatarManagerHandler.ClearSubscriptions("servicesCovering" + d);
      j = {
        playerID : f.mCities[i].creatorId,
        layoutInfo : j,
        isBoxClaimed : "true",
        isMyBox : k,
        isCurrentBox : !1,
        showAlerts : !1,
        group : "servicesCovering" + d,
        boxID : i
      };
      simcity.gGlobalUIHandler.mAvatarManagerHandler.AddSubscription(j);
      j = e.FindControlByID(249587886);
      this.mHoverWindowDefaultHeight || (this.mHoverWindowDefaultHeight = j.mHeight);
      e.FindControlByID(248984626).SetText(f.mCities[i].name);
      e = e.FindControlByID(249576388);
      this.mVehicleHoverLayouts = [];
      for (var k = this.mListOfBoxesYouCover[i].length, l = 0; l < k; l++) {
        this.mVehicleHoverLayouts[l] = gUIManager.LoadAndCacheLayout("Layouts/Region/TokenVehicle_AvatarCoverage.js", e);
        this.mVehicleHoverLayouts[l].FindControlByID(249576508).SetWindowImage(this.mListOfBoxesYouCover[i][l].icon);
        this.mVehicleHoverLayouts[l].FindControlByID(249576511).SetText("" +
          this.mListOfBoxesYouCover[i][l].count);
        var m = this.mVehicleHoverLayouts[l].mHeight,
        n = this.mVehicleHoverLayouts[l].mLeft,
        p = this.mVehicleHoverLayouts[l].mTop;
        this.mVehicleHoverLayouts[l].SetPosition(n, p + l * m)
      }
      j.SetHeight(this.mHoverWindowDefaultHeight + e.mHeight * (k - 1) + 10)
    }
  }
  for (d = 0; d < h.length; d++)
    if (i = h[d], this.mListOfBoxesCoveringYou[i] && this.mListOfBoxesCoveringYou[i].length) {
      j = c[d];
      e = a.FindControlByID(j);
      e.SetVisibility(!0);
      j = e.FindControlByID(249494366);
      k = i == g;
      simcity.gGlobalUIHandler.mAvatarManagerHandler.ClearSubscriptions("servicesReceiving" +
        d);
      j = {
        playerID : f.mCities[i].creatorId,
        layoutInfo : j,
        isBoxClaimed : "true",
        isMyBox : k,
        isCurrentBox : !1,
        showAlerts : !1,
        group : "servicesReceiving" + d,
        boxID : i
      };
      simcity.gGlobalUIHandler.mAvatarManagerHandler.AddSubscription(j);
      j = e.FindControlByID(249587886);
      this.mHoverWindowDefaultHeight || (this.mHoverWindowDefaultHeight = j.mHeight);
      e.FindControlByID(248984626).SetText(f.mCities[i].name);
      e = e.FindControlByID(249576388);
      this.mVehicleHoverLayoutsReceive = [];
      k = this.mListOfBoxesCoveringYou[i].length;
      for (l = 0; l < k; l++)
        this.mVehicleHoverLayoutsReceive[l] =
          gUIManager.LoadAndCacheLayout("Layouts/Region/TokenVehicle_AvatarCoverage.js", e), this.mVehicleHoverLayoutsReceive[l].FindControlByID(249576508).SetWindowImage(this.mListOfBoxesCoveringYou[i][l].icon), this.mVehicleHoverLayoutsReceive[l].FindControlByID(249576511).SetText("" + this.mListOfBoxesCoveringYou[i][l].count), m = this.mVehicleHoverLayoutsReceive[l].mHeight, n = this.mVehicleHoverLayoutsReceive[l].mLeft, p = this.mVehicleHoverLayoutsReceive[l].mTop, this.mVehicleHoverLayoutsReceive[l].SetPosition(n, p +
          l * m);
      j.SetHeight(this.mHoverWindowDefaultHeight + e.mHeight * (k - 1) + 10)
    }
};
simcity.cRegionTradeUIHandler.prototype.IsViewingClaimedBox = function () {
  var a = !1,
  b = simcity.gGlobalUIHandler.mRegionViewUIHandler,
  c = b.mSelectedRegionViewItem;
  c && (b.mRegionData.mBoxes[c.mRegionalBoxID] && "true" == b.mRegionData.mBoxes[c.mRegionalBoxID].isClaimed) && (a = this.IsConnectedToPlayingCityViaRoad(c.mRegionalBoxID));
  return a
};
simcity.cRegionTradeUIHandler.prototype.IsConnectedToPlayingCityViaRoad = function (a) {
  a = this.mRegionViewUI.GetDirectionalCityTradeData(a, simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData.mPlayingBox.uid);
  return null != a && 0 < a.transport.data.numberRoadConnections
};
simcity.cRegionTradeUIHandler.prototype.GetYourBoxID = function () {
  return simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData.mPlayingBox.uid
};
simcity.cRegionTradeUIHandler.prototype.IsViewingOwnBox = function () {
  var a = null,
  b = simcity.gGlobalUIHandler.mRegionViewUIHandler,
  a = b.mSelectedRegionViewItem ? b.mSelectedRegionViewItem.mRegionalBoxID : b.mRegionData.mPlayingBox.uid;
  return b.mRegionData.mPlayingBox.uid == a
};
simcity.cRegionTradeUIHandler.prototype.ServiceVehicleButtonPressed = function (a, b) {
  if (b[1]) {
    for (var c = 0; c < b[0]; ++c)
      scrui.PostGameCommand(scrui.BuildCommand(["runUnitPlayerRule", b[1], simcity.kRuleIDSCPlayerRuleCycleResearch]));
    switch (a) {
    case "increment":
      scrui.PostGameCommand(scrui.BuildCommand(["runUnitPlayerRule", b[1], simcity.kRuleIDSCPlayerRuleStartResearch]));
      break;
    case "decrement":
      scrui.PostGameCommand(scrui.BuildCommand(["runUnitPlayerRule", b[1], simcity.kRuleIDSCPlayerRuleCancelResearch]))
    }
  }
};
simcity.cRegionTradeUIHandler.prototype.GetCityTokens = function (a, b) {
  for (var c = this.mRegionViewUI.GetCityTradeData(a), d = [], e = [], f = 0, g = c.outgoing.length; f < g; f++) {
    var h = c.outgoing[f];
    -1 != h.tradeData[b + "TokenPending"] ? 1 == h.tradeData[b + "TokenPending"] && d.push(h.cityData) : h.tradeData[b + "Token"] && d.push(h.cityData)
  }
  f = 0;
  for (g = c.incoming.length; f < g; f++)
    h = c.incoming[f], -1 != h.tradeData[b + "TokenPending"] ? 1 == h.tradeData[b + "TokenPending"] && e.push(h.cityData) : h.tradeData[b + "Token"] && e.push(h.cityData);
  return {
    outgoing : d,
    incoming : e
  }
};
simcity.cRegionTradeUIHandler.prototype.CanShareToken = function (a, b) {
  var c = this.mRegionViewUI.mRegionData.mPlayingBox.uid;
  if (this.mRegionViewUI.IsConnectedCity(a)) {
    var d = this.mRegionViewUI.GetCityTradeData(c) || null,
    e = this.mRegionViewUI.GetCityTradeData(a) || null;
    if (d && (e && this.IsTokenAvailable(c, a, b)) && !this.IsSharingToken(c, a, b))
      return !0
  } else if (c == a && (d = this.mRegionViewUI.GetRegionalConnectedCities(c), 0 < d.length && (a = d[0][0].uid, d = this.mRegionViewUI.GetCityTradeData(c) || null, e = this.mRegionViewUI.GetCityTradeData(a) || null,
        d && (e && this.IsTokenAvailable(c, a, b)) && !this.IsSharingToken(c, a, b))))
    return !0;
  return !1
};
simcity.cRegionTradeUIHandler.prototype.IsTokenAvailable = function (a, b, c) {
  var d,
  e,
  f,
  g,
  h = [scrui.BuildRequestQuery(["bins", simcity.kResourceIDGarbageServiceTokenCounter]), scrui.BuildRequestQuery(["bins", simcity.kResourceIDFireServiceTokenCounter]), scrui.BuildRequestQuery(["bins", simcity.kResourceIDPoliceServiceTokenCounter]), scrui.BuildRequestQuery(["bins", simcity.kResourceIDHealthServiceTokenCounter])];
  scrui.RequestGameData(h, function (a) {
    d = 0 < a[0].amount;
    e = 0 < a[1].amount;
    f = 0 < a[2].amount;
    g = 0 < a[3].amount
  });
  h = this.mRegionViewUI.mRegionData.mCityTradeData[b];
  b = null;
  if (h && (a = h.connections[a]) && a.connectionData && a.connectionData.hasOwnProperty("t2"))
    b = a.connectionData.t2.data;
  if (b)
    switch (c) {
    case simcity.kRegionTradeTokenType_Fire:
      return 0 < b.fireStations || e;
    case simcity.kRegionTradeTokenType_Police:
      return 0 < b.policeStations || f;
    case simcity.kRegionTradeTokenType_Garbage:
      return 0 < b.garbageBases || d;
    case simcity.kRegionTradeTokenType_Health:
      return 0 < b.hospitals || g
    }
  return !1
};
simcity.cRegionTradeUIHandler.prototype.IsSharingToken = function (a, b, c) {
  if (this.mRegionViewUI.IsConnectedCity(b) && (b = this.mRegionViewUI.GetCityTradeData(b) || null))
    for (var d = 0, e = b.incoming.length; d < e; d++)
      if (b.incoming[d].cityData.uid == a) {
        var f = b.incoming[d].tradeData;
        switch (c) {
        case simcity.kRegionTradeTokenType_Fire:
          return 0 <= f.fireTokenPending ? f.fireTokenPending : f.fireToken;
        case simcity.kRegionTradeTokenType_Police:
          return 0 <= f.policeTokenPending ? f.policeTokenPending : f.policeToken;
        case simcity.kRegionTradeTokenType_Garbage:
          return 0 <=
          f.garbageTokenPending ? f.garbageTokenPending : f.garbageToken;
        case simcity.kRegionTradeTokenType_Health:
          return 0 <= f.healthTokenPending ? f.healthTokenPending : f.healthToken
        }
      }
  return !1
};
simcity.cRegionTradeUIHandler.prototype.UpdateUtilityTradePanel = function (a, b, c, d) {
  var e = Object.keys(this.mRegionViewUI.mRegionData.mCityTradeData[b].connections),
  f = [],
  g = [];
  switch (a) {
  case "Power":
    g = ["0x0eb384b5", "0x0eb384b6", "0x0eb384b7", "0x0eb384b8"];
    f = ["0x0e731a2a", "0x0e731a2b", "0x0e731a2c"];
    break;
  case "Water":
    g = ["0x0eb384bb", "0x0eb384bc", "0x0eb384bd", "0x0eb384be"];
    f = ["0x0e731a3a", "0x0e731a3b", "0x0e731a3c"];
    break;
  case "Sewage":
    g = ["0x0eb384cb", "0x0eb384cc", "0x0eb384cd", "0x0eb384ce"];
    f = ["0x0e731a4a",
      "0x0e731a4b", "0x0e731a4c"];
    break;
  default:
    scrui.Assert(!1, "ShowTradeUI - Undefined utility type: " + a)
  }
  var h = 0,
  i = 0,
  j = 0,
  k = [scrui.BuildRequestQuery(["bins", simcity.kResourceIDPowerImportExchangeRate]), scrui.BuildRequestQuery(["bins", simcity.kResourceIDWaterImportExchangeRate]), scrui.BuildRequestQuery(["bins", simcity.kResourceIDSewageTreatmentImportExchangeRate])];
  scrui.RequestGameData(k, function (a) {
    h = a[0].amount;
    i = a[1].amount;
    j = a[2].amount
  });
  c.DestroyChildren();
  for (var k = 0, l = [], m = !1, n = this.GetViewingCity(),
    p = 0, q = e.length; p < q; ++p) {
    var o = e[p];
    if (n == this.mRegionViewUI.mRegionData.mPlayingBox.uid || n == o) {
      var r = this.mRegionViewUI.mRegionData.mCities[o];
      if (r) {
        var s = this.mRegionViewUI.GetDirectionalCityTradeData(b, o),
        t = this.mRegionViewUI.GetDirectionalCityTradeData(o, b);
        if (this.IsConnectedToPlayingCityViaRoad(o)) {
          var u = 0,
          v = 0,
          x = 0,
          w = 0,
          A = 0,
          z = 0,
          y = null;
          switch (a) {
          case "Power":
            u = s.power.data.tradePower;
            A = this.mRegionViewUI.mRegionData.mPlayingBox.uid != b ? 0 : t.power.data.boughtPowerPerHour;
            v = this.mRegionViewUI.mRegionData.mPlayingBox.uid ==
              b ? 0 : t.power.data.tradePower;
            y = t.power.visualizedTradeData.tradePower;
            z = h;
            break;
          case "Water":
            u = s.water.data.tradingWater;
            A = this.mRegionViewUI.mRegionData.mPlayingBox.uid != b ? 0 : t.water.data.boughtWaterPerHour;
            v = this.mRegionViewUI.mRegionData.mPlayingBox.uid == b ? 0 : t.water.data.tradingWater;
            y = t.water.visualizedTradeData.tradeWater;
            z = i;
            break;
          case "Sewage":
            u = s.sewage.data.tradeSewage,
            A = this.mRegionViewUI.mRegionData.mPlayingBox.uid != b ? 0 : t.sewage.data.boughtTreatmentCapacityPerHour,
            v = this.mRegionViewUI.mRegionData.mPlayingBox.uid ==
              b ? 0 : t.sewage.data.tradeSewage,
            y = t.sewage.visualizedTradeData.tradeSewage,
            z = j
          }
          x = this.mRegionViewUI.DetermineTradeData(u, v);
          s = !0;
          x && 0 != x.amount ? (0 < x.amount ? (w = 2, x = x.amount) : (m = !0, x = -x.amount), s = "Sewage" == a ? this.mRegionViewUI.DetermineTradeStatus(o, b, !m, y) : this.mRegionViewUI.DetermineTradeStatus(b, o, !m, y)) : x = 0;
          if (0 < x && (b == this.mRegionViewUI.mRegionData.mPlayingBox.uid && m || s)) {
            y = gUIManager.LoadAndCacheLayout("Layouts/Region/UtilityTradeItem.js", c);
            t = y.FindControlByID(simcity.kUtilityPanelIDs.item.button);
            if (m && b == this.mRegionViewUI.mRegionData.mPlayingBox.uid) {
              if (o = this.mRegionViewUI.mRegionData.mConnectedUnits[o]) {
                u = 0;
                switch (a) {
                case "Power":
                  u = 13;
                  break;
                case "Water":
                  u = 14;
                  break;
                case "Sewage":
                  u = 15
                }
                t.mUserData = {
                  "0" : u,
                  1 : o
                };
                t.SetVisibility(!0);
                t.SetSelected(s);
                t.SetEnabled(!0);
                s || (w = 1)
              }
            } else
              t.SetVisibility(!1);
            l.push({
              cityName : r.name,
              tradeAmount : x,
              tradeAmountUsed : A,
              exchangeRate : z,
              textIndex : w,
              layout : y
            });
            y.FindControlByID(simcity.kUtilityPanelIDs.item.cityNameText).SetRawText(r.name);
            y.FindControlByID(simcity.kUtilityPanelIDs.item.cityOwnerText).SetRawText(r.creator.screenName);
            z = y.FindControlByID(simcity.kUtilityPanelIDs.item.cityOwnerIcon);
            simcity.gGlobalUIHandler.mAvatarManagerHandler.ClearSubscriptions("tradeServicesHim" + r.creator.id);
            simcity.gGlobalUIHandler.mAvatarManagerHandler.AddSubscription({
              playerID : r.creator.id,
              layoutInfo : z,
              isBoxClaimed : "true",
              isMyBox : r.creator.id == this.mRegionViewUI.mRegionData.mPlayingBox.creatorId,
              isCurrentBox : !1,
              showAlerts : !1,
              group : "tradeServicesHim" + r.creator.id,
              boxID : r.uid
            });
            y.FindControlByID(simcity.kUtilityPanelIDs.item.statusText).SetLocaleText(new scrui.cLocaleString("RegionView.json",
                f[w], "Receiving Utility"));
            y.SetPosition(0, y.mHeight * k);
            k++
          }
        }
      }
    }
  }
  p = 0;
  for (b = l.length; p < b; p++) {
    c = l[p];
    w = c.textIndex;
    z = c.exchangeRate / 1E3;
    e = c.tradeAmountUsed;
    r = simcity.FormatDecimalPlace(e / (1E3 * z), 0);
    f = {
      number : c.tradeAmount,
      exponent : ""
    };
    m = {
      number : e,
      exponent : ""
    };
    q = z;
    switch (a) {
    case "Power":
      f = simcity.FormatLargeNumberForPower(c.tradeAmount);
      m = simcity.FormatLargeNumberForPower(c.tradeAmountUsed);
      break;
    case "Water":
    case "Sewage":
      f = simcity.FormatLargeNumberForFluid(c.tradeAmount),
      m = simcity.FormatLargeNumberForFluid(c.tradeAmountUsed)
    }
    1 ==
    w ? c.layout.FindControlByID(simcity.kUtilityPanelIDs.item.statusText).UpdateLocaleText({
      amount1 : f.number,
      exponent1 : f.exponent,
      amount2 : q
    }) : 1 > e / (1E3 * z) ? c.layout.FindControlByID(simcity.kUtilityPanelIDs.item.statusText).UpdateLocaleText({
      amount : m.number,
      amount1 : f.number,
      amount2 : 0,
      exponent : m.exponent,
      exponent1 : f.exponent
    }) : c.layout.FindControlByID(simcity.kUtilityPanelIDs.item.statusText).UpdateLocaleText({
      amount : m.number,
      amount1 : f.number,
      amount2 : r,
      exponent : m.exponent,
      exponent1 : f.exponent
    });
    c.layout.FindControlByID(simcity.kUtilityPanelIDs.item.receivingFromCityText).UpdateLocaleText({
      city : c.cityName
    })
  }
  d.SetVisibility(0 ==
    k);
  0 == k && (n == this.mRegionViewUI.mRegionData.mPlayingBox.uid ? d.SetLocaleText(new scrui.cLocaleString("RegionView.json", g[0], "NO TRADES")) : this.IsConnectedToPlayingCityViaRoad(n) ? this.IsViewingClaimedBox() ? d.SetLocaleText(new scrui.cLocaleString("RegionView.json", g[1], "NO TRADES"), {
      city : this.mRegionViewUI.mRegionData.mCities[n].name
    }) : d.SetLocaleText(new scrui.cLocaleString("RegionView.json", g[2], "NO TRADES")) : d.SetLocaleText(new scrui.cLocaleString("RegionView.json", g[3], "NO TRADES")))
};
simcity.cRegionTradeUIHandler.prototype.ShowTradeUI = function (a) {
  var b = gUIManager.FindControlByID(simcity.kUtilityPanelIDs.myCity.rootPanel),
  c = this.mRegionViewUI.mRegionData.mCities[this.mRegionViewUI.mRegionData.mPlayingBox.uid];
  b && (b.FindControlByID(simcity.kUtilityPanelIDs.myCity.titleText).SetRawText(c.name), this.UpdateUtilityTradePanel(a, this.mRegionViewUI.mRegionData.mPlayingBox.uid, b.FindControlByID(simcity.kUtilityPanelIDs.myCity.tradePanel), b.FindControlByID(simcity.kUtilityPanelIDs.myCity.noTradeText)))
};
simcity.cRegionTradeUIHandler.prototype.ToggleUtilityTrade = function (a) {
  for (var b = 0; b < a.mUserData[0]; ++b)
    scrui.PostGameCommand(scrui.BuildCommand(["runUnitPlayerRule", a.mUserData[1], simcity.kRuleIDSCPlayerRuleCycleResearch]));
  scrui.PostGameCommand(scrui.BuildCommand(["runUnitPlayerRule", a.mUserData[1], simcity.kRuleIDSCPlayerRuleStartResearch]));
  a.SetSelected(!a.mIsSelected);
  this.mRegionViewUI.mInitialTradeDataRequestCompleted = !1;
  this.mRegionViewUI.mTimeSinceLastDataUpdate = simcity.kRegionViewDataUpdateTimeMS -
    1E3;
  this.mRegionViewUI.mShouldUpdateDataLayerContextPanel = !0
};
simcity.cRegionTradeUIHandler.prototype.ShowGreatWorksUI = function () {};
simcity.cRegionTradeUIHandler.prototype.ShowGiftingUI = function () {
  for (var a = this.mRegionViewUI.mRegionData.mPlayingBox.uid, b = this.GetViewingCity(), c = simcity.kGiftingPanelIDs.resources.startingTabID, d = simcity.gGlobalUIHandler.mRegionViewUIHandler.mContextPanelObj, e = 0, f = simcity.kGiftableResourcesDataBindings.length; e < f; ++e) {
    var g = simcity.kGiftableResourcesDataBindings[e];
    if (g) {
      var h = d.FindControlByID(c);
      h && (h.FindControlByID(simcity.kGiftingPanelIDs.resources.tab.button).mUserData = e, h.FindControlByID(simcity.kGiftingPanelIDs.resources.tab.button).SetSelected(this.mResourceGiftingSelectedTab ==
          e), h.FindControlByID(simcity.kGiftingPanelIDs.resources.tab.lightIcon).SetWindowImage(g.lightIcon), h.FindControlByID(simcity.kGiftingPanelIDs.resources.tab.darkIcon).SetWindowImage(g.darkIcon), g.text.LoadString(), h.FindControlByID(simcity.kGiftingPanelIDs.resources.tab.tooltipResourceText).SetRawText(g.text.GetText()));
      ++c
    }
  }
  this.mResourceGiftingLegendControl = 0;
  simcity.gGlobalUIHandler.mAvatarManagerHandler.ClearSubscriptions("giftingResourcesPlayingCity");
  c = d.FindControlByID(243530043);
  c = {
    playerID : this.mRegionViewUI.mRegionData.mPlayingBox.creatorId,
    layoutInfo : c,
    isBoxClaimed : "true",
    isMyBox : !0,
    isCurrentBox : !1,
    showAlerts : !1,
    group : "giftingResourcesPlayingCity",
    boxID : this.mRegionViewUI.mRegionData.mPlayingBox.uid
  };
  simcity.gGlobalUIHandler.mAvatarManagerHandler.AddSubscription(c);
  d.FindControlByID(simcity.kGiftingPanelIDs.resources.viewingCity.avatarWindow).SetVisibility(a != b);
  if (a != b) {
    if (d.FindAnimationByID(simcity.kGiftingPanelIDs.resources.viewingCity.displayInfoAnimation).Start(scrui.cAnimation.kPlayForward), simcity.gGlobalUIHandler.mAvatarManagerHandler.ClearSubscriptions("giftingResourcesViewingCity"),
      c = d.FindControlByID(243530044), this.mRegionViewUI.mRegionData.mBoxes[b] && (c = {
          playerID : this.mRegionViewUI.mRegionData.mBoxes[b].creatorId,
          layoutInfo : c,
          isBoxClaimed : "true",
          isMyBox : !1,
          isCurrentBox : !1,
          showAlerts : !1,
          group : "giftingResourcesViewingCity",
          boxID : this.mRegionViewUI.mRegionData.mBoxes[b].uid
        }, simcity.gGlobalUIHandler.mAvatarManagerHandler.AddSubscription(c)), a = (a = this.mRegionViewUI.mRegionData.mCityTradeData[a]) && null != a.connections[b], d.FindControlByID(simcity.kGiftingPanelIDs.resources.unconnectedCity.window).SetVisibility(!a),
      !a)
      a = simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData, c = "", c = a.mCities[b] ? a.mCities[b].name : scrui.ParseLocaleString(a.mCityDefaultData.cities[b].cityName).LoadAndGetTextSynchronous(), d.FindControlByID(simcity.kGiftingPanelIDs.resources.unconnectedCity.nameText).UpdateLocaleText({
        cityName : c
      }), d.FindAnimationByID(simcity.kGiftingPanelIDs.resources.unconnectedCity.displayInfoAnimation).Start(scrui.cAnimation.kPlayForward)
  } else
    d.FindControlByID(simcity.kGiftingPanelIDs.resources.unconnectedCity.window).SetVisibility(!1);
  this.ShowGiftingTab(this.mResourceGiftingSelectedTab)
};
simcity.cRegionTradeUIHandler.prototype.ShowGiftingTab = function (a) {
  if (this.mResourceGiftingLegendControl) {
    var b = simcity.gGlobalUIHandler.mLayerUIHandler.mLegendLayout;
    b && (b.FindControlByID(this.mResourceGiftingLegendControl).SetVisibility(!1), this.mResourceGiftingLegendControl = 0)
  }
  var c = simcity.gGlobalUIHandler.mRegionViewUIHandler.mContextPanelObj,
  d = simcity.kGiftableResourcesDataBindings[a];
  if (d) {
    simcity.gGlobalUIHandler.mLayerUIHandler.ActivateLayer(d.layerID);
    this.mResourceGiftingSelectedTab != a &&
    (this.mResourceGiftingCurrentAmount = 0);
    if (d.legendID && (b = simcity.gGlobalUIHandler.mLayerUIHandler.mLegendLayout))
      this.mResourceGiftingLegendControl = d.legendID, b.FindControlByID(this.mResourceGiftingLegendControl).SetVisibility(!0);
    this.mResourceGiftingSelectedTab = a;
    a = this.GetViewingCity();
    d.text.LoadString();
    b = simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData;
    c.FindControlByID(simcity.kGiftingPanelIDs.resources.titleBarText).UpdateLocaleText({
      resource : d.text.GetText()
    });
    c.FindControlByID(simcity.kGiftingPanelIDs.resources.playingCity.nameText).UpdateLocaleText({
      cityName : b.mPlayingBox.name
    });
    var e = "",
    e = b.mCities[a] ? b.mCities[a].name : scrui.ParseLocaleString(b.mCityDefaultData.cities[a].cityName).LoadAndGetTextSynchronous();
    c.FindControlByID(simcity.kGiftingPanelIDs.resources.selectedCityTitleBarText).UpdateLocaleText({
      resource : d.text.GetText(),
      cityName : e
    });
    c.FindControlByID(simcity.kGiftingPanelIDs.resources.viewingCity.nameText).UpdateLocaleText({
      cityName : e
    });
    c.FindControlByID(simcity.kGiftingPanelIDs.resources.sendButton).mUserData = d.scriptIndex;
    this.UpdateGiftingTextForSelectedTab()
  }
};
simcity.cRegionTradeUIHandler.prototype.UpdateGiftingTextForSelectedTab = function () {
  var a = this.mRegionViewUI.mRegionData.mPlayingBox.uid,
  b = this.GetViewingCity(),
  c = simcity.gGlobalUIHandler.mRegionViewUIHandler.mContextPanelObj,
  d = simcity.kGiftableResourcesDataBindings[this.mResourceGiftingSelectedTab];
  if (d) {
    var e = 0,
    f = 0,
    g = this.mRegionViewUI.mRegionData.mConnectedUnits[b];
    g && d.enRouteQueries && (d.resourceID == simcity.kResourceIDSimoleons ? scrui.RequestGameData(d.enRouteQueries(g), function (a) {
        e = a[0];
        f = a[1]
      }) :
      scrui.RequestGameData(d.enRouteQueries(g), function (a) {
        e = Math.max(0, a[0] + a[1]) * simcity.kRegionTradeResourceGiftAmount;
        f = Math.max(0, a[2] + a[3]) * simcity.kRegionTradeResourceGiftAmount
      }));
    d.amountText.LoadString();
    g = simcity.FormatLargeNumberByType(e, d.formatType);
    g = d.amountText.GetText({
        amount : g.number,
        exponent : g.exponent
      });
    c.FindControlByID(simcity.kGiftingPanelIDs.resources.pendingText).UpdateLocaleText({
      amount : g
    });
    if ((g = this.mRegionViewUI.mRegionData.mCityTradeData[a]) && g.giftableResources) {
      var h = Math.max(0,
          d.calculateTotal(g.giftableResources.data) - f),
      i = Math.min(h, simcity.kRegionTradeResourceGiftMaxAmount);
      if (this.mResourceGiftingMaxAmount) {
        for (; this.mResourceGiftingCurrentAmount + simcity.kRegionTradeResourceGiftAmount <= i; )
          this.mResourceGiftingCurrentAmount += simcity.kRegionTradeResourceGiftAmount;
        this.mResourceGiftingMaxAmount = !1
      } else {
        for (; this.mResourceGiftingCurrentAmount > i; )
          this.mResourceGiftingCurrentAmount -= simcity.kRegionTradeResourceGiftAmount;
        this.mResourceGiftingCurrentAmount = Math.max(0, this.mResourceGiftingCurrentAmount)
      }
      var j =
        simcity.kGiftingTooltips.SendingEnabled;
      if (null == g.connections[b])
        j = simcity.kGiftingTooltips.UnclaimedOrUnconnectedCity;
      else if (0 == this.mResourceGiftingCurrentAmount && (j = simcity.kGiftingTooltips.EmptyGiftAmount), d.resourceID == simcity.kResourceIDSimoleons)
        0 < f && (j = simcity.kGiftingTooltips.GiftInProgress), h = Math.max(0, d.calculateTotal(g.giftableResources.data));
      c.FindControlByID(simcity.kGiftingPanelIDs.resources.sendButton).SetEnabled(j == simcity.kGiftingTooltips.SendingEnabled);
      c.FindControlByID(simcity.kGiftingPanelIDs.resources.sendButton).SetTooltipLocaleText(j);
      h = simcity.FormatLargeNumberByType(h, d.formatType);
      c.FindControlByID(simcity.kGiftingPanelIDs.resources.playingCity.amountText).SetLocaleText(d.amountText, {
        amount : h.number,
        exponent : h.exponent
      });
      c.FindControlByID(simcity.kGiftingPanelIDs.resources.incrementButton).SetEnabled(this.mResourceGiftingCurrentAmount + simcity.kRegionTradeResourceGiftAmount <= i);
      c.FindControlByID(simcity.kGiftingPanelIDs.resources.decrementButton).SetEnabled(0 < this.mResourceGiftingCurrentAmount);
      h = simcity.FormatLargeNumberByType(this.mResourceGiftingCurrentAmount,
          d.formatType);
      c.FindControlByID(simcity.kGiftingPanelIDs.resources.sendAmountText).SetLocaleText(d.amountText, {
        amount : h.number,
        exponent : h.exponent
      });
      c.FindControlByID(simcity.kGiftingPanelIDs.resources.playingCity.truckIcon).SetVisibility(0 < g.giftableResources.data.numberOfTruckLots);
      c.FindControlByID(simcity.kGiftingPanelIDs.resources.playingCity.railIcon).SetVisibility(0 < g.giftableResources.data.numberOfRailLots);
      c.FindControlByID(simcity.kGiftingPanelIDs.resources.playingCity.boatIcon).SetVisibility(0 <
        g.giftableResources.data.numberOfBoatLots)
    }
    if ((g = this.mRegionViewUI.mRegionData.mCityTradeData[b]) && g.giftableResources)
      h = d.calculateTotal(g.giftableResources.data), h = simcity.FormatLargeNumberByType(h, d.formatType), c.FindControlByID(simcity.kGiftingPanelIDs.resources.viewingCity.amountText).SetLocaleText(d.amountText, {
        amount : h.number,
        exponent : h.exponent
      }), c.FindControlByID(simcity.kGiftingPanelIDs.resources.viewingCity.truckIcon).SetVisibility(0 < g.giftableResources.data.numberOfTruckLots), c.FindControlByID(simcity.kGiftingPanelIDs.resources.viewingCity.railIcon).SetVisibility(0 <
        g.giftableResources.data.numberOfRailLots), c.FindControlByID(simcity.kGiftingPanelIDs.resources.viewingCity.boatIcon).SetVisibility(0 < g.giftableResources.data.numberOfBoatLots)
  }
  b = simcity.kGiftingPanelIDs.resources.startingTabID;
  c = simcity.gGlobalUIHandler.mRegionViewUIHandler.mContextPanelObj;
  i = 0;
  for (j = simcity.kGiftableResourcesDataBindings.length; i < j; ++i)
    if (d = simcity.kGiftableResourcesDataBindings[i]) {
      var k = c.FindControlByID(b);
      if (k && (g = this.mRegionViewUI.mRegionData.mCityTradeData[a]) && g.giftableResources)
        h =
          Math.max(0, d.calculateTotal(g.giftableResources.data)), h = simcity.FormatLargeNumberByType(h, d.formatType), k.FindControlByID(simcity.kGiftingPanelIDs.resources.tab.tooltipAmountText).SetLocaleText(d.amountText, {
          amount : h.number,
          exponent : h.exponent
        });
      ++b
    }
};
simcity.cRegionTradeUIHandler.prototype.UpdateGiftingClickRun = function () {
  this.mResourceGiftingLastTickPress > gUIManager.mTickCount - 8 ? this.mResourceGiftingCurrentClickAmount++ : this.mResourceGiftingCurrentClickAmount = 0;
  this.mResourceGiftingLastTickPress = gUIManager.mTickCount
};
simcity.cRegionTradeUIHandler.prototype.SendResourceGift = function (a) {
  var b = this.mRegionViewUI.mRegionData.mConnectedUnits[this.GetViewingCity()];
  if (b) {
    for (; 0 < this.mResourceGiftingCurrentAmount; ) {
      for (var c = 0; c < a.mUserData; ++c)
        scrui.PostGameCommand(scrui.BuildCommand(["runUnitPlayerRule", b, simcity.kRuleIDSCPlayerRuleCycleResearch]));
      scrui.PostGameCommand(scrui.BuildCommand(["runUnitPlayerRule", b, simcity.kRuleIDSCPlayerRuleStartResearch]));
      this.mResourceGiftingCurrentAmount -= simcity.kRegionTradeResourceGiftAmount
    }
    this.mResourceGiftingCurrentAmount =
      0;
    0 == this.mResourceGiftingSelectedTab && simcity.CreateUnit("Trading_SendSimoleonGift", b);
    simcity.ShowTradeCompleteSurvey()
  }
};
simcity.cRegionTradeUIHandler.prototype.Update = scrui.Client_ProfZone("RegionTradeUIUpdate", function (a) {
    this.mRegionViewUI.mIsContextPanelActive && this.mRegionViewUI.mContextPanelDataBinding && (this.mRefreshTimer -= a, 0 >= this.mRefreshTimer && (this.mRefreshTimer = simcity.kRegionTradeRefreshTime, "gifting" == this.mRegionViewUI.mContextPanelDataBinding.tradeType ? this.UpdateGiftingTextForSelectedTab() : "token" == this.mRegionViewUI.mContextPanelDataBinding.tradeType && this.UpdateTokenUI()))
  });
simcity.CategoryQuerying = {};
simcity.gCategoryQueryDataBindings = {};
simcity.gCategoryDLC = {};
simcity.SetAlertLevel = function (a, b) {
  var c = simcity.gGlobalUIHandler.mToolPaletteUIHandler,
  d = a.hasOwnProperty("parentCategoryID");
  if (d) {
    var e = simcity.gGlobalUIHandler.mCategoryQueryingHandler;
    e.mParentCategoryAlertLevels[a.parentCategoryID] = e.mParentCategoryAlertLevels.hasOwnProperty(a.parentCategoryID) ? Math.max(e.mParentCategoryAlertLevels[a.parentCategoryID], b) : b
  }
  c.UpdateAlert(a.categoryID, b, d)
};
simcity.UpdateCategoryAlert = function (a, b, c, d) {
  var e = simcity.gGlobalUIHandler.mAlertsUIHandler;
  void 0 === d && (d = 0);
  e.UpdateAlertForCategory(a, b, c, d)
};
simcity.UpdateContextualInfo = function (a, b, c, d, e) {
  var f = void 0 !== b,
  g = simcity.gGlobalUIHandler.mCategoryQueryingHandler;
  a && a.categoryID && (g.mContextualInfo[a.categoryID] = void 0 !== e ? {
      showInfo : f,
      tableID : b,
      headerTextID : c,
      bodyTextID : d,
      bodyTableID : e
    }
     : {
    showInfo : f,
    tableID : b,
    headerTextID : c,
    bodyTextID : d
  })
};
simcity.UpdateGenericContextualInfo = function (a, b) {
  simcity.GenericCategory.updateCategoryInfo(a, b)
};
simcity.GetCategoryInfo = function (a, b) {
  return simcity.gGlobalUIHandler.mCategoryQueryingHandler.GetDataBinding(a, b)
};
simcity.ForceUpdateCategory = function (a, b) {
  var c = simcity.gGlobalUIHandler.mCategoryQueryingHandler,
  d = b ? c.GetParentCategoryFromCategory(a) : a;
  if (d)
    for (var e = Object.keys(c.mDataBindings), f = 0, g = e.length; f < g; ++f)
      if (e[f] == d) {
        c.mDataBindingIndex = f;
        c.mDataBindingForceUpdateIndex = f;
        break
      }
  c.mTimeSinceLastQuery = 1E3;
  c.RunQueries()
};
simcity.GetDLCAlert = function (a, b, c, d) {
  if (b !== simcity.kAlertLevelCritical && a.hasOwnProperty("DLCAlerts"))
    for (var e = 0, f = a.DLCAlerts.length; e < f; ++e) {
      var g = (0, a.DLCAlerts[e])(c, d),
      b = Math.max(b, g);
      if (b === simcity.kAlertLevelCritical)
        break
    }
  return b
};
simcity.UpdateDLCCategoryInfo = function (a, b, c, d) {
  if (a.hasOwnProperty("DLCCategoryInfo"))
    for (var e = 0, f = a.DLCCategoryInfo.length; e < f; ++e) {
      var g = (0, a.DLCCategoryInfo[e])(b, c, d);
      if (g)
        return simcity.UpdateContextualInfo(a, g[0], g[1], g[2]), !0
    }
  return !1
};
simcity.GetCategoryInfoLayout = function () {
  var a = null,
  b = simcity.gGlobalUIHandler.mToolPaletteUIHandler;
  b.mDemolishPanelOpen ? a = b.mDemolishInfoContainer : b.mInfoLayout && (a = b.mInfoLayout);
  return a
};
simcity.GetCategoryInfoControl = function (a, b) {
  var c = null,
  d = simcity.GetCategoryInfoLayout(a);
  if (d) {
    if (d.hasOwnProperty(b))
      return d[b];
    c = d.FindControlByID(b);
    d[b] = c
  }
  return c
};
simcity.NumberFormat = {};
simcity.NumberFormat.kiloGUID = 2030840470;
simcity.NumberFormat.megaGUID = 2724999403;
simcity.NumberFormat.gigaGUID = 1070310141;
simcity.NumberFormat.teraGUID = 3140225643;
simcity.NumberFormat.Tons = 3209013327;
simcity.NumberFormat.Units = 1821810158;
simcity.NumberFormat.Crates = 1016488917;
simcity.NumberFormat.Fluids = 2997842382;
simcity.NumberFormat.Power = 2391494160;
simcity.NumberFormat.Barrels = 2833605196;
simcity.NumberFormat.Standard = 3025917178;
simcity.FormatLargeNumber = function (a) {
  var b = 1;
  0 > a && (b = -1);
  var c = 0;
  1E12 < b * a ? (a /= 1E12, c = simcity.NumberFormat.teraGUID) : 1E9 < b * a ? (a /= 1E9, c = simcity.NumberFormat.gigaGUID) : 1E6 < b * a ? (a /= 1E6, c = simcity.NumberFormat.megaGUID) : 1E3 < b * a && (a /= 1E3, c = simcity.NumberFormat.kiloGUID);
  b = "";
  0 != c && (b = scrui.TextFromLocaleProperty({
        tableID : simcity.StringID.TableGlobalUI,
        stringID : c
      }));
  a = Math.round(100 * a) / 100;
  return {
    number : a,
    exponent : b,
    exponentGUID : c
  }
};
simcity.FormatDecimalPlace = function (a, b) {
  0 <= b && (a = Math.round(a * Math.pow(10, b)) / Math.pow(10, b));
  return a
};
simcity.FormatLargeNumberForPower = function (a) {
  var b = simcity.NumberFormat.megaGUID,
  c = scrui.TextFromLocaleProperty({
      tableID : simcity.StringID.TableGlobalUI,
      stringID : b
    }),
  a = simcity.FormatDecimalPlace(a / 1E3, 1);
  return {
    number : a,
    exponent : c,
    exponentGUID : b
  }
};
simcity.FormatLargeNumberForFluid = function (a) {
  var a = a / 1E3,
  b = simcity.NumberFormat.kiloGUID,
  c = scrui.TextFromLocaleProperty({
      tableID : simcity.StringID.TableGlobalUI,
      stringID : b
    }),
  a = simcity.FormatDecimalPlace(a, 1);
  return {
    number : a,
    exponent : c,
    exponentGUID : b
  }
};
simcity.FormatLargeNumberForBarrels = function (a) {
  a = simcity.FormatDecimalPlace(a / 10, 1);
  return {
    number : a,
    exponent : "",
    exponentGUID : 0
  }
};
simcity.FormatLargeNumberForTons = function (a) {
  a = simcity.FormatDecimalPlace(a / 1E3, 1);
  return {
    number : a,
    exponent : "",
    exponentGUID : 0
  }
};
simcity.FormatLargeNumberForCrates = function (a) {
  a = simcity.FormatDecimalPlace(a / 10, 1);
  return {
    number : a,
    exponent : "",
    exponentGUID : 0
  }
};
simcity.FormatLargeNumberByType = function (a, b) {
  switch (b) {
  case simcity.NumberFormat.Power:
    return simcity.FormatLargeNumberForPower(a);
  case simcity.NumberFormat.Fluids:
    return simcity.FormatLargeNumberForFluid(a);
  case simcity.NumberFormat.Tons:
    return simcity.FormatLargeNumberForTons(a);
  case simcity.NumberFormat.Crates:
  case simcity.NumberFormat.Units:
    return simcity.FormatLargeNumberForCrates(a);
  case simcity.NumberFormat.Barrels:
    return simcity.FormatLargeNumberForBarrels(a);
  case simcity.NumberFormat.Standard:
    return simcity.FormatLargeNumber(a)
  }
  return {
    number : a,
    exponent : "",
    exponentGUID : 0
  }
};
simcity.IsFormattableType = function (a) {
  switch (a) {
  case simcity.NumberFormat.Power:
    return !0;
  case simcity.NumberFormat.Fluids:
    return !0;
  case simcity.NumberFormat.Tons:
    return !0;
  case simcity.NumberFormat.Crates:
  case simcity.NumberFormat.Units:
    return !0;
  case simcity.NumberFormat.Barrels:
    return !0;
  case simcity.NumberFormat.Standard:
    return !0
  }
  return !1
};
simcity.UpdateCategoryInfoMaintenaceCost = function (a, b) {
  var c = simcity.GetCategoryInfoControl(a, 196874183);
  c && (0 !== b && (b *= -1), c.UpdateLocaleText({
      maintenance : b
    }))
};
simcity.UpdateCategoryInfoWorkers = function (a, b, c) {
  (a = simcity.GetCategoryInfoControl(a, 210950011)) && a.UpdateLocaleText({
    amount : b,
    capacity : c
  })
};
simcity.UpdateCategoryInfoTextControl = function (a, b, c) {
  (a = simcity.GetCategoryInfoControl(a, b)) && a.UpdateLocaleText(c)
};
simcity.UpdateCategoryInfoHorizontalSliderControl = function (a, b, c) {
  if (a = simcity.GetCategoryInfoControl(a, b))
    c = Math.max(0, Math.min(1, c)), a.SetPosition(a.mParentControl.mWidth * c - a.mWidth / 2, a.mTop)
};
simcity.UpdateCategoryInfoGauge = function (a, b, c) {
  if (a = simcity.GetCategoryInfoControl(a, b))
    c = Math.max(0, Math.min(1, c)), c = scrui.math.GetValueInRange(-90, 90, c), a.SetRotation(c)
};
simcity.UpdateCategoryInfoMeter = function (a, b, c, d) {
  1 < c && (c = 1);
  a = simcity.GetCategoryInfoControl(a, b);
  d ? scrui.SetProgressBarHeight(a, c) : scrui.SetProgressBarWidth(a, c)
};
simcity.UpdateCategoryInfoAnimation = function (a, b, c, d) {
  1 < c ? c = 1 : 0 > c && (c = 0);
  a = a.FindAnimationByID(b);
  b = a.GetDurationMS();
  d ? a.PlayToTime(c * b) : a.JumpToTime(c * b)
};
simcity.cCategoryQueryingHandler = function () {
  this.UIHandler = scrui.cUIHandler;
  this.UIHandler();
  this.mTimeSinceLastQuery = 0;
  this.mDataBindings = {};
  this.mDataBindingIndex = 0;
  this.mDataBindingForceUpdateIndex = null;
  this.mUpdateOpenCategory = !1;
  this.mContextualInfo = {};
  this.mParentCategoryAlertLevels = {};
  this.mQueryInProgress = this.mShouldDisplayContextualInfo = !1
};
goog.inherits(simcity.cCategoryQueryingHandler, scrui.cUIHandler);
simcity.cCategoryQueryingHandler.prototype.Update = scrui.Client_ProfZone("cCategoryQueryingHandler.Update", function (a) {
    this.mTimeSinceLastQuery += a;
    this.RunQueries()
  });
simcity.cCategoryQueryingHandler.prototype.Init = function () {
  for (var a in simcity.gCategoryQueryDataBindings) {
    var b = simcity.gCategoryQueryDataBindings[a];
    b.hasOwnProperty("parentCategoryID") ? (this.mDataBindings.hasOwnProperty(b.parentCategoryID) || (this.mDataBindings[b.parentCategoryID] = []), this.mDataBindings[b.parentCategoryID].push(b)) : this.mDataBindings[b.categoryID] = [b]
  }
  for (a in simcity.gCategoryDLC) {
    var c = simcity.gCategoryDLC[a],
    b = scrui.BuildRequestQuery([simcity.kDataBinAmount, c.unlockBin]);
    scrui.RequestGameData([b],
      function (a) {
      if (a[0]) {
        var a = c.category,
        b = a.alertQueries,
        f;
        for (f in c.alertQueries)
          b[f] = c.alertQueries[f];
        a.DLCAlerts.push(c.getAlerts);
        b = a.categoryInfoQueries;
        for (f in c.categoryInfoQueries)
          b[f] = c.categoryInfoQueries[f];
        a.DLCCategoryInfo.push(c.getCategoryInfo)
      }
    })
  }
};
simcity.cCategoryQueryingHandler.prototype.PrintDebugInfo = function () {
  simcity.DEBUG && scrui.DebugPrint("cCategoryQueryingHandler gCategoryQueryDataBindings = " + Object.keys(simcity.gCategoryQueryDataBindings).length + ", gCategoryDLC = " + Object.keys(simcity.gCategoryDLC).length + ", mDataBindings = " + Object.keys(this.mDataBindings).length)
};
simcity.cCategoryQueryingHandler.prototype.GetDataBinding = function (a, b) {
  if (a) {
    if (!b && this.mDataBindings.hasOwnProperty(a))
      return this.mDataBindings[a][0];
    for (var c in this.mDataBindings)
      for (var d = this.mDataBindings[c], e = 0, f = d.length; e < f; ++e) {
        var g = d[e];
        if (g.categoryID === a || g.categoryID === b)
          return g
      }
  }
  return null
};
simcity.cCategoryQueryingHandler.prototype.GetParentCategoryFromCategory = function (a) {
  if (a)
    for (var b in this.mDataBindings) {
      if (b === a)
        return b;
      for (var c = this.mDataBindings[b], d = 0, e = c.length; d < e; ++d)
        if (c[d].categoryID === a)
          return b
    }
  return null
};
simcity.AddCategoryInfoDataBinding = function (a, b, c, d) {
  var e = a.categoryInfoQueries;
  b.push(e);
  simcity.AddSimpleQueries(c, e);
  d.push(a)
};
simcity.cCategoryQueryingHandler.prototype.RunQueries = scrui.Client_ProfZone("cCategoryQueryingHandler.RunQueries", function () {
    if (!this.mQueryInProgress) {
      this.mQueryInProgress = !0;
      var a = simcity.gGlobalUIHandler.mToolPaletteUIHandler,
      b = a.GetParentAndSubCategoryIDs(),
      c = b[0],
      d = b[1];
      null === c && (this.mDataBindingForceUpdateIndex = null);
      b = Object.keys(this.mDataBindings);
      if (null == this.mDataBindingForceUpdateIndex && simcity.IsMainTutorialInProgress())
        this.mQueryInProgress = !1;
      else {
        var e = null !== this.mDataBindingForceUpdateIndex &&
          (this.mUpdateOpenCategory || simcity.IsMainTutorialInProgress()) ? this.mDataBindingForceUpdateIndex : this.mDataBindingIndex++;
        this.mUpdateOpenCategory = !this.mUpdateOpenCategory;
        var f = this.mDataBindings[b[e]];
        this.mDataBindingIndex === b.length && (this.mDataBindingIndex = 0);
        var g = f.length;
        this.mParentCategoryAlertLevels = {};
        for (var b = [], e = [], h = this, i = !1, j = 0, k = f.length; j < k; ++j) {
          var l = f[j];
          if (1E3 < this.mTimeSinceLastQuery && (l.categoryID === c || l.categoryID === d))
            i = !0;
          simcity.AddSimpleQueries(b, l.alertQueries);
          e.push(l.alertQueries)
        }
        i &&
        (j = this.GetDataBinding(c, d), simcity.AddCategoryInfoDataBinding(j, e, b, f));
        simcity.AddCategoryInfoDataBinding(simcity.GenericCategory, e, b, f);
        simcity.RequestDataBindingData(b, f, e, !1, function (b) {
          var e = b[b.length - 1];
          h.mShouldDisplayContextualInfo = simcity.GenericCategory.shouldDisplayContextualInfo(e);
          for (var j = 0; j < g; ++j) {
            var l = f[j];
            if (l.hasOwnProperty("categoryID")) {
              l.updateAlerts(b[j], e);
              if (i && (l.categoryID === c || l.categoryID === d)) {
                l.updateCategoryInfo(b[j], b[b.length - 2], e);
                simcity.IsMainTutorialInProgress() &&
                (simcity.gGlobalUIHandler.mTutorialManager.mTutorialData && simcity.gGlobalUIHandler.mTutorialManager.mTutorialData.hasOwnProperty("updateCategoryInfo")) && simcity.gGlobalUIHandler.mTutorialManager.mTutorialData.updateCategoryInfo(l)
              }
            }
          }
          f.pop();
          i && f.pop();
          if (h.mTimeSinceLastQuery > 1E3)
            h.mTimeSinceLastQuery = 0;
          for (var k in h.mParentCategoryAlertLevels)
            a.UpdateAlert(Number(k), h.mParentCategoryAlertLevels[k]);
          h.mQueryInProgress = false
        })
      }
    }
  });
simcity.PopulateNonTokenAvatars = function (a, b, c, d) {
  var e = simcity.GetCategoryInfoControl(a, 243964766),
  f = simcity.GetCategoryInfoControl(a, 243964768),
  g = "export" === d,
  d = f,
  h = e;
  g && (d = e, h = f);
  c && h.DestroyChildren();
  for (var e = simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData, f = e.mPlayingBox.uid, h = Object.keys(e.mConnectedUnits), c = {}, i = 0; i < h.length; i++) {
    var j = e.mCityTradeData[f],
    k = h[i];
    g && (j = e.mCityTradeData[h[i]], k = f);
    if (j && e.mCities[h[i]] && j.connections[k]) {
      var j = e.mCities[h[i]],
      l = e.mConnectedUnits[h[i]],
      m = !1,
      k = "0x0ec47f94",
      n = {
        name : j.creator.screenName
      },
      p = 40,
      q = -43;
      switch (b) {
      case "power":
        var o = [scrui.BuildRequestQuery([simcity.kDataUnits, l, simcity.kDataBinAmount, simcity.kResourceIDTradeSwitchPower]), scrui.BuildRequestQuery([simcity.kDataUnits, l, simcity.kDataBinAmount, simcity.kResourceIDPower])];
        g && (o = [scrui.BuildRequestQuery([simcity.kDataUnits, l, simcity.kDataBinAmount, simcity.kResourceIDTradePowerUsedProfit])]);
        scrui.RequestGameData(o, function (a) {
          m = g ? a[0] : a[0] > 0 && a[1] > 0
        });
        n = {
          name : j.creator.screenName
        };
        break;
      case "water":
        o = [scrui.BuildRequestQuery([simcity.kDataUnits, l, simcity.kDataBinAmount, simcity.kResourceIDTradeSwitchWater]), scrui.BuildRequestQuery([simcity.kDataUnits, l, simcity.kDataBinAmount, simcity.kResourceIDWater])];
        g && (o = [scrui.BuildRequestQuery([simcity.kDataUnits, l, simcity.kDataBinAmount, simcity.kResourceIDTradeWaterUsedProfit])]);
        scrui.RequestGameData(o, function (a) {
          m = g ? a[0] : a[0] > 0 && a[1] > 0
        });
        n = {
          name : j.creator.screenName
        };
        break;
      case "sewage":
        o = [scrui.BuildRequestQuery([simcity.kDataUnits,
              l, simcity.kDataBinAmount, simcity.kResourceIDTradeSwitchSewage])];
        g && (o = [scrui.BuildRequestQuery([simcity.kDataUnits, l, simcity.kDataBinAmount, simcity.kResourceIDTradeSewageExportAllowedUsedProfit])]);
        scrui.RequestGameData(o, function (a) {
          m = a[0]
        });
        n = {
          name : j.creator.screenName
        };
        break;
      case "fire":
        o = [scrui.BuildRequestQuery([simcity.kDataUnits, l, simcity.kDataBinAmount, simcity.kResourceIDFireTruckR1]), scrui.BuildRequestQuery([simcity.kDataUnits, l, simcity.kDataBinAmount, simcity.kResourceIDFireTruckR2]), scrui.BuildRequestQuery([simcity.kDataUnits,
              l, simcity.kDataBinAmount, simcity.kResourceIDHazMatTruckR2]), scrui.BuildRequestQuery([simcity.kDataUnits, l, simcity.kDataBinAmount, simcity.kResourceIDFireInspectorR2]), scrui.BuildRequestQuery([simcity.kDataUnits, l, simcity.kDataBinAmount, simcity.kResourceIDFireHelicopterR2])];
        g && (o = [scrui.BuildRequestQuery([simcity.kDataUnits, l, simcity.kDataBinAmount, simcity.kResourceIDTradeExcessFireTruckR1]), scrui.BuildRequestQuery([simcity.kDataUnits, l, simcity.kDataBinAmount, simcity.kResourceIDTradeExcessFireTruckR2]),
            scrui.BuildRequestQuery([simcity.kDataUnits, l, simcity.kDataBinAmount, simcity.kResourceIDTradeExcessHazMatTruckR2]), scrui.BuildRequestQuery([simcity.kDataUnits, l, simcity.kDataBinAmount, simcity.kResourceIDTradeExcessFireInspectorR2]), scrui.BuildRequestQuery([simcity.kDataUnits, l, simcity.kDataBinAmount, simcity.kResourceIDTradeExcessFireHelicopterR2])]);
        scrui.RequestGameData(o, function (a) {
          m = a[0] + a[1] + a[2] + a[3] + a[4];
          n = {
            T1 : a[0],
            T2 : a[1],
            HazMat : a[2],
            Inspector : a[3],
            Helicopter : a[4]
          }
        });
        k = "0x0e8be34b";
        p = 90;
        q =
          -93;
        break;
      case "police":
        o = [scrui.BuildRequestQuery([simcity.kDataUnits, l, simcity.kDataBinAmount, simcity.kResourceIDPoliceCarR1]), scrui.BuildRequestQuery([simcity.kDataUnits, l, simcity.kDataBinAmount, simcity.kResourceIDPoliceDetectiveVanR2]), scrui.BuildRequestQuery([simcity.kDataUnits, l, simcity.kDataBinAmount, simcity.kResourceIDPoliceOutreachVanR2]), scrui.BuildRequestQuery([simcity.kDataUnits, l, simcity.kDataBinAmount, simcity.kResourceIDPoliceHelicopterR2])];
        g && (o = [scrui.BuildRequestQuery([simcity.kDataUnits,
                l, simcity.kDataBinAmount, simcity.kResourceIDTradeExcessPoliceCarR1]), scrui.BuildRequestQuery([simcity.kDataUnits, l, simcity.kDataBinAmount, simcity.kResourceIDTradeExcessPoliceDetectiveVanR2]), scrui.BuildRequestQuery([simcity.kDataUnits, l, simcity.kDataBinAmount, simcity.kResourceIDTradeExcessPoliceOutreachVanR2]), scrui.BuildRequestQuery([simcity.kDataUnits, l, simcity.kDataBinAmount, simcity.kResourceIDTradeExcessPoliceHelicopterR2])]);
        scrui.RequestGameData(o, function (a) {
          m = a[0] + a[1] + a[2] + a[3];
          n = {
            PatrolCars : a[0],
            Detective : a[1],
            Outreach : a[2],
            Helicopter : a[3]
          }
        });
        k = "0x0e8bab35";
        p = 75;
        q = -78;
        break;
      case "health":
        o = [scrui.BuildRequestQuery([simcity.kDataUnits, l, simcity.kDataBinAmount, simcity.kResourceIDAmbulanceR1]), scrui.BuildRequestQuery([simcity.kDataUnits, l, simcity.kDataBinAmount, simcity.kResourceIDCommunityOutreachVanR2])];
        g && (o = [scrui.BuildRequestQuery([simcity.kDataUnits, l, simcity.kDataBinAmount, simcity.kResourceIDTradeExcessAmbulanceR1]), scrui.BuildRequestQuery([simcity.kDataUnits, l, simcity.kDataBinAmount,
                simcity.kResourceIDTradeExcessCommunityOutreachVanR2])]);
        scrui.RequestGameData(o, function (a) {
          m = a[0] + a[1];
          n = {
            Ambulance : a[0],
            Outreach : a[1]
          }
        });
        k = "0x0e8be34c";
        p = 45;
        q = -48;
        break;
      case "garbage":
        o = [scrui.BuildRequestQuery([simcity.kDataUnits, l, simcity.kDataBinAmount, simcity.kResourceIDGarbageTruckR1]), scrui.BuildRequestQuery([simcity.kDataUnits, l, simcity.kDataBinAmount, simcity.kResourceIDRecyclingTruckR2])];
        g && (o = [scrui.BuildRequestQuery([simcity.kDataUnits, l, simcity.kDataBinAmount, simcity.kResourceIDTradeExcessGarbageTruckR1]),
            scrui.BuildRequestQuery([simcity.kDataUnits, l, simcity.kDataBinAmount, simcity.kResourceIDTradeExcessRecyclingTruckR2])]);
        scrui.RequestGameData(o, function (a) {
          m = a[0] + a[1];
          n = {
            GarbageTrucks : a[0],
            RecyclingTrucks : a[1]
          };
          if (simcity.IsMainTutorialInProgress() && !g) {
            m = 1;
            n = {
              GarbageTrucks : 1,
              RecyclingTrucks : 0
            }
          }
        });
        k = "0x0e8be34d";
        p = 45;
        q = -48;
        break;
      case "education":
        o = [scrui.BuildRequestQuery([simcity.kDataUnits, l, simcity.kDataBinAmount, simcity.kResourceIDStudentE2]), scrui.BuildRequestQuery([simcity.kDataUnits, l, simcity.kDataBinAmount,
              simcity.kResourceIDStudentE3])];
        g && (o = [scrui.BuildRequestQuery([simcity.kDataUnits, l, simcity.kDataBinAmount, simcity.kResourceIDTradeExcessStudentE2]), scrui.BuildRequestQuery([simcity.kDataUnits, l, simcity.kDataBinAmount, simcity.kResourceIDTradeExcessStudentE3])]);
        scrui.RequestGameData(o, function (a) {
          m = a[0] + a[1];
          n = {
            studentsE2 : a[0],
            studentsE3 : a[1]
          }
        });
        k = "0x0ee02d54";
        p = 45;
        q = -48;
        break;
      case "mining":
        o = [scrui.BuildRequestQuery([simcity.kDataUnits, l, simcity.kDataBinAmount, simcity.kResourceIDAlloy]), scrui.BuildRequestQuery([simcity.kDataUnits,
              l, simcity.kDataBinAmount, simcity.kResourceIDCoal]), scrui.BuildRequestQuery([simcity.kDataUnits, l, simcity.kDataBinAmount, simcity.kResourceIDMetal]), scrui.BuildRequestQuery([simcity.kDataUnits, l, simcity.kDataBinAmount, simcity.kResourceIDOreRaw])];
        g && (o = [scrui.BuildRequestQuery([simcity.kDataUnits, l, simcity.kDataBinAmount, simcity.kResourceIDAlloyTransportToSend]), scrui.BuildRequestQuery([simcity.kDataUnits, l, simcity.kDataBinAmount, simcity.kResourceIDCoalTransportToSend]), scrui.BuildRequestQuery([simcity.kDataUnits,
                l, simcity.kDataBinAmount, simcity.kResourceIDMetalTransportToSend]), scrui.BuildRequestQuery([simcity.kDataUnits, l, simcity.kDataBinAmount, simcity.kResourceIDOreRawTransportToSend])]);
        scrui.RequestGameData(o, function (a) {
          var b = g ? simcity.kRegionTradeResourceGiftAmount : 1;
          m = a[0] + a[1] + a[2] + a[3];
          n = {
            Alloy : simcity.FormatLargeNumberByType(a[0] * b, simcity.NumberFormat.Tons).number,
            Coal : simcity.FormatLargeNumberByType(a[1] * b, simcity.NumberFormat.Tons).number,
            Metal : simcity.FormatLargeNumberByType(a[2] * b, simcity.NumberFormat.Tons).number,
            OreRaw : simcity.FormatLargeNumberByType(a[3] * b, simcity.NumberFormat.Tons).number
          }
        });
        k = "0x0ee58e9f";
        p = 90;
        q = -93;
        break;
      case "petroleum":
        o = [scrui.BuildRequestQuery([simcity.kDataUnits, l, simcity.kDataBinAmount, simcity.kResourceIDFuel]), scrui.BuildRequestQuery([simcity.kDataUnits, l, simcity.kDataBinAmount, simcity.kResourceIDOilCrude]), scrui.BuildRequestQuery([simcity.kDataUnits, l, simcity.kDataBinAmount, simcity.kResourceIDPlastic])];
        g && (o = [scrui.BuildRequestQuery([simcity.kDataUnits, l, simcity.kDataBinAmount,
                simcity.kResourceIDFuelTransportToSend]), scrui.BuildRequestQuery([simcity.kDataUnits, l, simcity.kDataBinAmount, simcity.kResourceIDOilCrudeTransportToSend]), scrui.BuildRequestQuery([simcity.kDataUnits, l, simcity.kDataBinAmount, simcity.kResourceIDPlasticTransportToSend])]);
        scrui.RequestGameData(o, function (a) {
          var b = g ? simcity.kRegionTradeResourceGiftAmount : 1;
          m = a[0] + a[1] + a[2];
          n = {
            Fuel : simcity.FormatLargeNumberByType(a[0] * b, simcity.NumberFormat.Barrels).number,
            OilCrude : simcity.FormatLargeNumberByType(a[1] *
              b, simcity.NumberFormat.Barrels).number,
            Plastic : simcity.FormatLargeNumberByType(a[2] * b, simcity.NumberFormat.Crates).number
          }
        });
        k = "0x0ee58ea0";
        p = 75;
        q = -78;
        break;
      case "electronics":
        o = [scrui.BuildRequestQuery([simcity.kDataUnits, l, simcity.kDataBinAmount, simcity.kResourceIDAlloy]), scrui.BuildRequestQuery([simcity.kDataUnits, l, simcity.kDataBinAmount, simcity.kResourceIDComputer]), scrui.BuildRequestQuery([simcity.kDataUnits, l, simcity.kDataBinAmount, simcity.kResourceIDElectronics]), scrui.BuildRequestQuery([simcity.kDataUnits,
              l, simcity.kDataBinAmount, simcity.kResourceIDPlastic]), scrui.BuildRequestQuery([simcity.kDataUnits, l, simcity.kDataBinAmount, simcity.kResourceIDTelevision])];
        g && (o = [scrui.BuildRequestQuery([simcity.kDataUnits, l, simcity.kDataBinAmount, simcity.kResourceIDAlloyTransportToSend]), scrui.BuildRequestQuery([simcity.kDataUnits, l, simcity.kDataBinAmount, simcity.kResourceIDComputerTransportToSend]), scrui.BuildRequestQuery([simcity.kDataUnits, l, simcity.kDataBinAmount, simcity.kResourceIDElectronicsTransportToSend]),
            scrui.BuildRequestQuery([simcity.kDataUnits, l, simcity.kDataBinAmount, simcity.kResourceIDPlasticTransportToSend]), scrui.BuildRequestQuery([simcity.kDataUnits, l, simcity.kDataBinAmount, simcity.kResourceIDTelevisionTransportToSend])]);
        scrui.RequestGameData(o, function (a) {
          var b = g ? simcity.kRegionTradeResourceGiftAmount : 1;
          m = a[0] + a[1] + a[2] + a[3] + a[4];
          n = {
            Alloy : simcity.FormatLargeNumberByType(a[0] * b, simcity.NumberFormat.Tons).number,
            Computer : simcity.FormatLargeNumberByType(a[1] * b, simcity.NumberFormat.Crates).number,
            Electronics : simcity.FormatLargeNumberByType(a[2] * b, simcity.NumberFormat.Crates).number,
            Plastic : simcity.FormatLargeNumberByType(a[3] * b, simcity.NumberFormat.Crates).number,
            Television : simcity.FormatLargeNumberByType(a[4] * b, simcity.NumberFormat.Crates).number
          }
        });
        k = "0x0ee58ea1";
        p = 105;
        q = -108;
        break;
      case "trade":
        o = [scrui.BuildRequestQuery([simcity.kDataUnits, l, simcity.kDataBinAmount, simcity.kResourceIDAlloy]), scrui.BuildRequestQuery([simcity.kDataUnits, l, simcity.kDataBinAmount, simcity.kResourceIDCoal]), scrui.BuildRequestQuery([simcity.kDataUnits,
              l, simcity.kDataBinAmount, simcity.kResourceIDComputer]), scrui.BuildRequestQuery([simcity.kDataUnits, l, simcity.kDataBinAmount, simcity.kResourceIDElectronics]), scrui.BuildRequestQuery([simcity.kDataUnits, l, simcity.kDataBinAmount, simcity.kResourceIDFuel]), scrui.BuildRequestQuery([simcity.kDataUnits, l, simcity.kDataBinAmount, simcity.kResourceIDMetal]), scrui.BuildRequestQuery([simcity.kDataUnits, l, simcity.kDataBinAmount, simcity.kResourceIDOilCrude]), scrui.BuildRequestQuery([simcity.kDataUnits, l, simcity.kDataBinAmount,
              simcity.kResourceIDOreRaw]), scrui.BuildRequestQuery([simcity.kDataUnits, l, simcity.kDataBinAmount, simcity.kResourceIDPlastic]), scrui.BuildRequestQuery([simcity.kDataUnits, l, simcity.kDataBinAmount, simcity.kResourceIDTelevision])];
        g && (o = [scrui.BuildRequestQuery([simcity.kDataUnits, l, simcity.kDataBinAmount, simcity.kResourceIDAlloyTransportToSend]), scrui.BuildRequestQuery([simcity.kDataUnits, l, simcity.kDataBinAmount, simcity.kResourceIDCoalTransportToSend]), scrui.BuildRequestQuery([simcity.kDataUnits, l,
                simcity.kDataBinAmount, simcity.kResourceIDComputerTransportToSend]), scrui.BuildRequestQuery([simcity.kDataUnits, l, simcity.kDataBinAmount, simcity.kResourceIDElectronicsTransportToSend]), scrui.BuildRequestQuery([simcity.kDataUnits, l, simcity.kDataBinAmount, simcity.kResourceIDFuelTransportToSend]), scrui.BuildRequestQuery([simcity.kDataUnits, l, simcity.kDataBinAmount, simcity.kResourceIDMetalTransportToSend]), scrui.BuildRequestQuery([simcity.kDataUnits, l, simcity.kDataBinAmount, simcity.kResourceIDOilCrudeTransportToSend]),
            scrui.BuildRequestQuery([simcity.kDataUnits, l, simcity.kDataBinAmount, simcity.kResourceIDOreRawTransportToSend]), scrui.BuildRequestQuery([simcity.kDataUnits, l, simcity.kDataBinAmount, simcity.kResourceIDPlasticTransportToSend]), scrui.BuildRequestQuery([simcity.kDataUnits, l, simcity.kDataBinAmount, simcity.kResourceIDTelevisionTransportToSend])]);
        scrui.RequestGameData(o, function (a) {
          var b = g ? simcity.kRegionTradeResourceGiftAmount : 1;
          m = a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9];
          n = {
            Alloy : simcity.FormatLargeNumberByType(a[0] *
              b, simcity.NumberFormat.Tons).number,
            Coal : simcity.FormatLargeNumberByType(a[1] * b, simcity.NumberFormat.Tons).number,
            Computer : simcity.FormatLargeNumberByType(a[2] * b, simcity.NumberFormat.Crates).number,
            Electronics : simcity.FormatLargeNumberByType(a[3] * b, simcity.NumberFormat.Crates).number,
            Fuel : simcity.FormatLargeNumberByType(a[4] * b, simcity.NumberFormat.Barrels).number,
            Metal : simcity.FormatLargeNumberByType(a[5] * b, simcity.NumberFormat.Tons).number,
            OilCrude : simcity.FormatLargeNumberByType(a[6] * b, simcity.NumberFormat.Barrels).number,
            OreRaw : simcity.FormatLargeNumberByType(a[7] * b, simcity.NumberFormat.Tons).number,
            Plastic : simcity.FormatLargeNumberByType(a[8] * b, simcity.NumberFormat.Crates).number,
            Television : simcity.FormatLargeNumberByType(a[9] * b, simcity.NumberFormat.Crates).number
          }
        });
        k = "0x0ee58e9e";
        p = 180;
        q = -183;
        break;
      case "bus":
        o = [scrui.BuildRequestQuery([simcity.kDataUnits, l, simcity.kDataBinAmount, simcity.kResourceIDBusR2Stop]), scrui.BuildRequestQuery([simcity.kDataBinAmount, simcity.kResourceIDNumberOfBusT2Stops])];
        scrui.RequestGameData(o,
          function (a) {
          m = a[0] > 0 && a[1] > 0
        });
        break;
      case "train":
        o = [scrui.BuildRequestQuery([simcity.kDataUnits, l, simcity.kDataBinAmount, simcity.kResourceIDTrainT2Stop]), scrui.BuildRequestQuery([simcity.kDataBinAmount, simcity.kResourceIDNumberOfTrainT2Stops])];
        scrui.RequestGameData(o, function (a) {
          m = a[0] > 0 && a[1] > 0
        });
        break;
      case "boat":
        o = [scrui.BuildRequestQuery([simcity.kDataUnits, l, simcity.kDataBinAmount, simcity.kResourceIDFerryT1Stop]), scrui.BuildRequestQuery([simcity.kDataBinAmount, simcity.kResourceIDNumberOfFerryT1Stops]),
          scrui.BuildRequestQuery([simcity.kDataUnits, l, simcity.kDataBinAmount, simcity.kResourceIDCruiseShipT2Stop]), scrui.BuildRequestQuery([simcity.kDataBinAmount, simcity.kResourceIDNumberOfCruiseShipT2Stops])],
        scrui.RequestGameData(o, function (a) {
          m = a[0] > 0 && a[1] > 0 || a[2] > 0 && a[3] > 0
        })
      }
      0 < m && (l = simcity.gUIToolbox.GetAvatarUrl(j.creator.screenName), c[j.uid] = {
          img : l,
          token : n,
          text : k,
          cityName : j.name,
          height : p,
          top : q
        })
    }
  }
  e = [];
  e = g || "power" === b || "water" === b || "sewage" === b ? [simcity.GetCategoryInfoControl(a, 251827585), simcity.GetCategoryInfoControl(a,
        251827586), simcity.GetCategoryInfoControl(a, 251827587), simcity.GetCategoryInfoControl(a, 251827588), simcity.GetCategoryInfoControl(a, 251827589), simcity.GetCategoryInfoControl(a, 251827590)] : [simcity.GetCategoryInfoControl(a, 251828641), simcity.GetCategoryInfoControl(a, 251828642), simcity.GetCategoryInfoControl(a, 251828643), simcity.GetCategoryInfoControl(a, 251828644), simcity.GetCategoryInfoControl(a, 251828645), simcity.GetCategoryInfoControl(a, 251828646)];
  simcity.DrawAvatars(e, d, c, a)
};
simcity.DrawAvatars = function (a, b, c) {
  for (var d = 0, e = [], f = 0; f < a.length; f++)
    if (a[f]) {
      var g = a[f].GetAbsolutePosition(),
      h = b.ConvertAbsoluteToLocalSpace(g[0], g[1], h);
      e.push([h[0] - a[f].mWidth / 2 - 1, h[1] - a[f].mHeight])
    }
  if (b.hasOwnProperty("mChildren") && 0 < b.mChildren.length)
    for (a = 0; a < b.mChildren.length; )
      if (f = b.mChildren[a], c[f.mUserData])
        delete c[f.mUserData], e[d] ? f.SetPosition(e[d][0], e[d][1]) : f.SetPosition(d * f.mWidth, f.mTop), d++, a++;
      else if (f.DestroyControl(), !b.mChildren)
        break;
  a = Object.keys(c);
  for (f = 0; f < a.length; f++) {
    g =
      gUIManager.LoadAndCacheLayout("Layouts/Palette/CategoryInfo/CoveredByAvatar.js", b);
    e[d] ? g.SetPosition(e[d][0], e[d][1]) : g.SetPosition(d * g.mWidth, 0);
    d++;
    g.mUserData = a[f];
    var h = c[a[f]].img,
    i = g.FindControlByID(237907905);
    simcity.gUIToolbox.SetAvatarByUrl(i, h);
    g.FindControlByID(242832082).SetText(c[a[f]].cityName);
    h = g.FindControlByID(244034683);
    i = new scrui.cLocaleString("PaletteInfoPanel.json", c[a[f]].text, "Mayor Name");
    h.SetLocaleText(i, c[a[f]].token);
    g = g.mExposedProperties[0].mControl;
    g.SetPosition(g.mLeft,
      c[a[f]].top, g.mWidth, h.mTextElement.scrollHeight + 25)
  }
};
simcity.databindings = {};
simcity.databindings.DataBindingsAgentQuery = {};
simcity.AgentQueryItems = {};
simcity.AgentQueryItems.kAgentQueryScreenPosition = {
  dynamic : !0,
  allowNullResults : !0,
  bindingType : simcity.cAgentQueryUIHandler.kBindingTypePosition,
  queries : function () {
    return {
      screenPosition : [simcity.kDataAgent, simcity.kDataScreenPosition]
    }
  }
};
simcity.AgentQueryItems.kAgentQueryShowGoToSource = {
  dynamic : !0,
  allowNullResults : !0,
  bindingType : simcity.cAgentQueryUIHandler.kBindingTypeShowGoToSource,
  queries : function () {
    return {
      showGoToSource : [simcity.kDataAgent, simcity.kDataShowGoToSource]
    }
  },
  update : function (a) {
    return a.showGoToSource
  }
};
simcity.AgentQueryItems.kAgentQueryRegionalBoxUID = {
  dynamic : !0,
  allowNullResults : !0,
  bindingType : simcity.cAgentQueryUIHandler.kBindingTypeRegionalBoxUID,
  queries : function () {
    return {
      regionalBoxUID : [simcity.kDataAgent, simcity.kDataBinAmount, simcity.kResourceRegionalBoxUniqueID]
    }
  },
  update : function (a) {
    return a.regionalBoxUID
  }
};
simcity.AgentQueryItems.kAgentQuerySimName = {
  dynamic : !1,
  bindingType : simcity.cAgentQueryUIHandler.kBindingTypeName,
  queries : function () {
    return {
      simFirstName : [simcity.kDataAgent, simcity.kDataSimFirstName],
      simLastName : [simcity.kDataAgent, simcity.kDataSimLastName]
    }
  },
  update : function (a) {
    return {
      firstName : a.simFirstName,
      lastName : a.simLastName
    }
  }
};
simcity.AgentQueryItems.kAgentQueryTransportName = {
  dynamic : !1,
  allowNullResults : !0,
  bindingType : simcity.cAgentQueryUIHandler.kBindingTypeName,
  queries : function () {
    return {
      transportName : [simcity.kDataAgent, simcity.kDataTransportName],
      regionalBoxUID : [simcity.kDataAgent, simcity.kDataBinAmount, simcity.kResourceRegionalBoxUniqueID]
    }
  },
  update : function (a) {
    if (0 < a.regionalBoxUID) {
      var b = scrui.TextFromLocaleProperty({
          tableID : "Units.json",
          stringID : "0x0e02cac1"
        });
      simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData.mCities[a.regionalBoxUID] &&
      (b = simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData.mCities[a.regionalBoxUID].name);
      return {
        vehicleName : a.transportName,
        cityName : b
      }
    }
    return {
      vehicleName : a.transportName
    }
  }
};
simcity.AgentQueryItems.kAgentQueryGender = {
  dynamic : !1,
  bindingType : simcity.cAgentQueryUIHandler.kBindingTypeGender,
  queries : function () {
    return {
      gender : [simcity.kDataAgent, simcity.kDataGender]
    }
  },
  update : function (a) {
    return a.gender
  }
};
simcity.AgentQueryItems.kAgentQueryDestination = {
  dynamic : !0,
  allowNullResults : !0,
  bindingType : simcity.cAgentQueryUIHandler.kBindingTypeDestination,
  color : null,
  queries : function () {
    return {
      destination : [simcity.kDataAgent, simcity.kDataDestination]
    }
  },
  update : function (a) {
    return a.destination
  }
};
simcity.AgentQueryItems.kAgentQuerySourceName = {
  dynamic : !0,
  allowNullResults : !0,
  bindingType : simcity.cAgentQueryUIHandler.kBindingTypeSource,
  queries : function () {
    return {
      sourceName : [simcity.kDataAgent, simcity.kDataSourceName],
      regionalBoxUID : [simcity.kDataAgent, simcity.kDataSourceUnitRegionalBoxUniqueID]
    }
  },
  update : function (a) {
    return 0 < a.regionalBoxUID && simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData.mCities[a.regionalBoxUID] ? simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData.mCities[a.regionalBoxUID].name :
    a.sourceName ? scrui.TextFromLocaleProperty(a.sourceName) : ""
  }
};
simcity.AgentQueryItems.kAgentQueryHappiness = {
  dynamic : !0,
  iconPath : "Graphics/Common/Icons/icn_pledge_demo_pro_happiness.png",
  localeString : new scrui.cLocaleString("AgentQuery.json", "0x0e3097f4", "Feeling Happy!"),
  bindingType : simcity.cAgentQueryUIHandler.kBindingTypeSimStatus,
  queries : function () {
    return {
      happiness : [simcity.kDataAgent, simcity.kDataBins, simcity.kResourceIDHappinessToken]
    }
  },
  update : function (a) {
    return 0 < a.happiness.amount ? this.localeString : null
  }
};
simcity.AgentQueryItems.kAgentQueryMoney = {
  dynamic : !0,
  iconPath : "ico_Alert_Profitability.png",
  localeStringHome : new scrui.cLocaleString("AgentQuery.json", "0x0e3097f8", "Have Simoleons."),
  localeStringWork : new scrui.cLocaleString("AgentQuery.json", "0x0e40a45d", "Just got paid."),
  bindingType : simcity.cAgentQueryUIHandler.kBindingTypeSimStatus,
  queries : function () {
    return {
      money : [simcity.kDataAgent, simcity.kDataBins, simcity.kResourceIDMoneyToken],
      sourceBuildingType : [simcity.kDataAgent, "sourceBuildingType"]
    }
  },
  update : function (a) {
    return 0 <
    a.money.amount ? "0x617c1f67" == a.sourceBuildingType || "0x1c8b3668" == a.sourceBuildingType ? this.localeStringWork : this.localeStringHome : null
  }
};
simcity.AgentQueryItems.kAgentQueryKnowledgeToken = {
  dynamic : !0,
  iconPath : "Graphics/Common/Icons/icn_category_education.png",
  localeString : new scrui.cLocaleString("AgentQuery.json", "0x0e8e6b2f", "Is smart."),
  bindingType : simcity.cAgentQueryUIHandler.kBindingTypeSimStatus,
  queries : function () {
    return {
      knowledgeToken : [simcity.kDataAgent, simcity.kDataBins, simcity.kResourceIDKnowledgeToken]
    }
  },
  update : function (a) {
    return 0 < a.knowledgeToken.amount ? this.localeString : null
  }
};
simcity.AgentQueryItems.kAgentQuerySickness = {
  dynamic : !0,
  iconPath : "Graphics/Common/Icons/icn_happiness_health_sick.png",
  localeString : new scrui.cLocaleString("AgentQuery.json", "0x0e3097fc", "Feeling sick."),
  bindingType : simcity.cAgentQueryUIHandler.kBindingTypeSimStatus,
  queries : function () {
    return {
      sicknessW1 : [simcity.kDataAgent, simcity.kDataBins, simcity.kResourceIDSickW1],
      sicknessW2 : [simcity.kDataAgent, simcity.kDataBins, simcity.kResourceIDSickW2],
      sicknessW3 : [simcity.kDataAgent, simcity.kDataBins, simcity.kResourceIDSickW2]
    }
  },
  update : function (a) {
    return 0 < a.sicknessW1.amount || 0 < a.sicknessW2.amount || 0 < a.sicknessW3.amount ? this.localeString : null
  }
};
simcity.AgentQueryItems.kAgentQueryFailedToFindSink = {
  dynamic : !0,
  allowNullResults : !0,
  bindingType : simcity.cAgentQueryUIHandler.kBindingTypeDestination,
  color : "red",
  queries : function () {
    return {
      failText : [simcity.kDataAgent, simcity.kDataFailToFindSink]
    }
  },
  update : function (a) {
    return a.failText
  }
};
simcity.AgentQueryItems.kAgentQueryStuckInTraffic = {
  dynamic : !0,
  allowNullResults : !0,
  bindingType : simcity.cAgentQueryUIHandler.kBindingTypeDestination,
  localeString : new scrui.cLocaleString("AgentQuery.json", "0x0e41f8d9", "Stuck in traffic"),
  color : "red",
  queries : function () {
    return {
      isStuckInTraffic : [simcity.kDataAgent, "stuckInTraffic"]
    }
  },
  update : function (a) {
    if (a.isStuckInTraffic) {
      var b = this,
      c;
      b.localeString.LoadString(function () {
        c = b.localeString.GetText()
      });
      return c
    }
    return ""
  }
};
simcity.AgentQueryItems.kAgentQueryCoal = {
  dynamic : !0,
  localeString : new scrui.cLocaleString("Resources.json", "0xcec5890c", "Coal"),
  bindingType : simcity.cAgentQueryUIHandler.kBindingTypeResourceBin,
  formatType : simcity.NumberFormat.Tons,
  queries : function () {
    return {
      resource : [simcity.kDataAgent, simcity.kDataBins, simcity.kResourceIDCoal]
    }
  }
};
simcity.AgentQueryItems.kAgentQueryOreRaw = {
  dynamic : !0,
  localeString : new scrui.cLocaleString("Resources.json", "0x96cf3b07", "Ore"),
  bindingType : simcity.cAgentQueryUIHandler.kBindingTypeResourceBin,
  formatType : simcity.NumberFormat.Tons,
  queries : function () {
    return {
      resource : [simcity.kDataAgent, simcity.kDataBins, simcity.kResourceIDOreRaw]
    }
  }
};
simcity.AgentQueryItems.kAgentQueryMetal = {
  dynamic : !0,
  localeString : new scrui.cLocaleString("Resources.json", "0x9375c65e", "Metal"),
  bindingType : simcity.cAgentQueryUIHandler.kBindingTypeResourceBin,
  formatType : simcity.NumberFormat.Tons,
  queries : function () {
    return {
      resource : [simcity.kDataAgent, simcity.kDataBins, simcity.kResourceIDMetal]
    }
  }
};
simcity.AgentQueryItems.kAgentQueryAlloy = {
  dynamic : !0,
  localeString : new scrui.cLocaleString("Resources.json", "0x1e16cfe6", "Alloy"),
  bindingType : simcity.cAgentQueryUIHandler.kBindingTypeResourceBin,
  formatType : simcity.NumberFormat.Tons,
  queries : function () {
    return {
      resource : [simcity.kDataAgent, simcity.kDataBins, simcity.kResourceIDAlloy]
    }
  }
};
simcity.AgentQueryItems.kAgentQueryFuel = {
  dynamic : !0,
  localeString : new scrui.cLocaleString("Resources.json", "0x9ea37dd1", "Fuel"),
  bindingType : simcity.cAgentQueryUIHandler.kBindingTypeResourceBin,
  formatType : simcity.NumberFormat.Barrels,
  queries : function () {
    return {
      resource : [simcity.kDataAgent, simcity.kDataBins, simcity.kResourceIDFuel]
    }
  }
};
simcity.AgentQueryItems.kAgentQueryPlastic = {
  dynamic : !0,
  localeString : new scrui.cLocaleString("Resources.json", "0x27638c5b", "Plastic"),
  bindingType : simcity.cAgentQueryUIHandler.kBindingTypeResourceBin,
  formatType : simcity.NumberFormat.Units,
  queries : function () {
    return {
      resource : [simcity.kDataAgent, simcity.kDataBins, simcity.kResourceIDPlastic]
    }
  }
};
simcity.AgentQueryItems.kAgentQueryElectronics = {
  dynamic : !0,
  localeString : new scrui.cLocaleString("Resources.json", "0x0dfc0e9f", "Electronics"),
  bindingType : simcity.cAgentQueryUIHandler.kBindingTypeResourceBin,
  formatType : simcity.NumberFormat.Units,
  queries : function () {
    return {
      resource : [simcity.kDataAgent, simcity.kDataBins, simcity.kResourceIDElectronics]
    }
  }
};
simcity.AgentQueryItems.kAgentQueryComputer = {
  dynamic : !0,
  localeString : new scrui.cLocaleString("Resources.json", "0x8da94c6a", "Computer"),
  bindingType : simcity.cAgentQueryUIHandler.kBindingTypeResourceBin,
  formatType : simcity.NumberFormat.Units,
  queries : function () {
    return {
      resource : [simcity.kDataAgent, simcity.kDataBins, simcity.kResourceIDComputer]
    }
  }
};
simcity.AgentQueryItems.kAgentQueryTelevision = {
  dynamic : !0,
  localeString : new scrui.cLocaleString("Resources.json", "0xb8b5dd59", "Television"),
  bindingType : simcity.cAgentQueryUIHandler.kBindingTypeResourceBin,
  formatType : simcity.NumberFormat.Units,
  queries : function () {
    return {
      resource : [simcity.kDataAgent, simcity.kDataBins, simcity.kResourceIDTelevision]
    }
  }
};
simcity.AgentQueryItems.kAgentQueryOilCrude = {
  dynamic : !0,
  localeString : new scrui.cLocaleString("Resources.json", "0xbf75dc04", "Oil"),
  bindingType : simcity.cAgentQueryUIHandler.kBindingTypeResourceBin,
  formatType : simcity.NumberFormat.Barrels,
  queries : function () {
    return {
      resource : [simcity.kDataAgent, simcity.kDataBins, simcity.kResourceIDOilCrude]
    }
  }
};
simcity.AgentQueryItems.kAgentQuerySimoleons = {
  dynamic : !0,
  localeString : new scrui.cLocaleString("Resources.json", "0x0ee2d5d8", "Simoleons"),
  bindingType : simcity.cAgentQueryUIHandler.kBindingTypeResourceBin,
  formatType : simcity.NumberFormat.Units,
  queries : function () {
    return {
      resource : [simcity.kDataAgent, simcity.kDataBins, simcity.kResourceIDSimoleons]
    }
  }
};
simcity.AgentQueryItems.kAgentQueryGarbage = {
  dynamic : !0,
  localeString : new scrui.cLocaleString("Resources.json", "0x0e30d0a2", "Garbage"),
  bindingType : simcity.cAgentQueryUIHandler.kBindingTypeResourceBin,
  formatType : simcity.NumberFormat.Tons,
  queries : function () {
    return {
      resource : [simcity.kDataAgent, simcity.kDataBins, simcity.kResourceIDGarbage]
    }
  }
};
simcity.AgentQueryItems.kAgentQueryRecycling = {
  dynamic : !0,
  localeString : new scrui.cLocaleString("Resources.json", "0x0e388ece", "Recyclables"),
  bindingType : simcity.cAgentQueryUIHandler.kBindingTypeResourceBin,
  formatType : simcity.NumberFormat.Tons,
  queries : function () {
    return {
      resource : [simcity.kDataAgent, simcity.kDataBins, simcity.kResourceIDRecyclables]
    }
  }
};
simcity.AgentQueryItems.kAgentQueryBus = {
  dynamic : !0,
  localeString : new scrui.cLocaleString("Resources.json", "0x0e62eb01", "Passengers"),
  bindingType : simcity.cAgentQueryUIHandler.kBindingTypeResourceBin,
  formatType : simcity.NumberFormat.Standard,
  queries : function () {
    return {
      resource : [simcity.kDataAgent, simcity.kDataBins, simcity.kResourceIDBusPassenger]
    }
  }
};
simcity.AgentQueryItems.kAgentQuerySchoolBus = {
  dynamic : !0,
  localeString : new scrui.cLocaleString("Resources.json", "0x0e62eb01", "Passengers"),
  bindingType : simcity.cAgentQueryUIHandler.kBindingTypeResourceBin,
  formatType : simcity.NumberFormat.Standard,
  queries : function () {
    return {
      resource : [simcity.kDataAgent, simcity.kDataBins, simcity.kResourceIDSchoolBusPassenger]
    }
  }
};
simcity.AgentQueryItems.kAgentQueryCoach = {
  dynamic : !0,
  localeString : new scrui.cLocaleString("Resources.json", "0x0e62eb01", "Passengers"),
  bindingType : simcity.cAgentQueryUIHandler.kBindingTypeResourceBin,
  formatType : simcity.NumberFormat.Standard,
  queries : function () {
    return {
      resource : [simcity.kDataAgent, simcity.kDataBins, simcity.kResourceIDCoachPassenger]
    }
  }
};
simcity.AgentQueryItems.kAgentQueryLightTrain = {
  dynamic : !0,
  localeString : new scrui.cLocaleString("Resources.json", "0x0e62eb01", "Passengers"),
  bindingType : simcity.cAgentQueryUIHandler.kBindingTypeResourceBin,
  formatType : simcity.NumberFormat.Standard,
  queries : function () {
    return {
      resource : [simcity.kDataAgent, simcity.kDataBins, simcity.kResourceIDLightTrainPassenger]
    }
  }
};
simcity.AgentQueryItems.kAgentQueryTrain = {
  dynamic : !0,
  localeString : new scrui.cLocaleString("Resources.json", "0x0e62eb01", "Passengers"),
  bindingType : simcity.cAgentQueryUIHandler.kBindingTypeResourceBin,
  formatType : simcity.NumberFormat.Standard,
  queries : function () {
    return {
      resource : [simcity.kDataAgent, simcity.kDataBins, simcity.kResourceIDTrainPassenger]
    }
  }
};
simcity.AgentQueryItems.kAgentQueryFerry = {
  dynamic : !0,
  localeString : new scrui.cLocaleString("Resources.json", "0x0e62eb01", "Passengers"),
  bindingType : simcity.cAgentQueryUIHandler.kBindingTypeResourceBin,
  formatType : simcity.NumberFormat.Standard,
  queries : function () {
    return {
      resource : [simcity.kDataAgent, simcity.kDataBins, simcity.kResourceIDFerryPassenger]
    }
  }
};
simcity.AgentQueryItems.kAgentQueryCruiseShip = {
  dynamic : !0,
  localeString : new scrui.cLocaleString("Resources.json", "0x0e62eb01", "Passengers"),
  bindingType : simcity.cAgentQueryUIHandler.kBindingTypeResourceBin,
  formatType : simcity.NumberFormat.Standard,
  queries : function () {
    return {
      resource : [simcity.kDataAgent, simcity.kDataBins, simcity.kResourceIDCruiseShipPassenger]
    }
  }
};
simcity.kSharedAgentQueryDataBindings = [simcity.AgentQueryItems.kAgentQueryScreenPosition, simcity.AgentQueryItems.kAgentQueryShowGoToSource, simcity.AgentQueryItems.kAgentQueryRegionalBoxUID];
simcity.kSharedAgentQueryTimedRefreshDataBindings = [simcity.AgentQueryItems.kAgentQueryDestination, simcity.AgentQueryItems.kAgentQuerySourceName];
simcity.AgentQueryDataBindings = {};
simcity.AgentQueryDataBindings[scrui.IDFromName("Default")] = [simcity.AgentQueryItems.kAgentQueryTransportName];
simcity.AgentQueryDataBindings[scrui.IDFromName("Sim")] = [simcity.AgentQueryItems.kAgentQueryGender, simcity.AgentQueryItems.kAgentQuerySimName, simcity.AgentQueryItems.kAgentQueryMoney, simcity.AgentQueryItems.kAgentQueryHappiness, simcity.AgentQueryItems.kAgentQuerySickness, simcity.AgentQueryItems.kAgentQueryFailedToFindSink];
simcity.AgentQueryDataBindings[scrui.IDFromName("SimCar")] = [simcity.AgentQueryItems.kAgentQueryGender, simcity.AgentQueryItems.kAgentQuerySimName, simcity.AgentQueryItems.kAgentQueryMoney, simcity.AgentQueryItems.kAgentQueryHappiness, simcity.AgentQueryItems.kAgentQuerySickness, simcity.AgentQueryItems.kAgentQueryFailedToFindSink];
simcity.AgentQueryDataBindings[scrui.IDFromName("SimNoTokens")] = [simcity.AgentQueryItems.kAgentQueryGender, simcity.AgentQueryItems.kAgentQuerySimName];
simcity.AgentQueryDataBindings[scrui.IDFromName("Kid")] = [simcity.AgentQueryItems.kAgentQueryGender, simcity.AgentQueryItems.kAgentQuerySimName, simcity.AgentQueryItems.kAgentQueryKnowledgeToken];
simcity.AgentQueryDataBindings[scrui.IDFromName("SimTruck")] = [simcity.AgentQueryItems.kAgentQueryTransportName];
simcity.AgentQueryDataBindings[scrui.IDFromName("LightTruck")] = [simcity.AgentQueryItems.kAgentQueryTransportName];
simcity.AgentQueryDataBindings[scrui.IDFromName("HeavyTruck")] = [simcity.AgentQueryItems.kAgentQueryTransportName];
simcity.AgentQueryDataBindings[scrui.IDFromName("IndustrialTruck")] = [simcity.AgentQueryItems.kAgentQueryTransportName];
simcity.AgentQueryDataBindings[scrui.IDFromName("FreightTrain")] = [simcity.AgentQueryItems.kAgentQueryTransportName];
simcity.AgentQueryDataBindings[scrui.IDFromName("CoalTruck")] = [simcity.AgentQueryItems.kAgentQueryTransportName, simcity.AgentQueryItems.kAgentQueryCoal];
simcity.AgentQueryDataBindings[scrui.IDFromName("OreTruck")] = [simcity.AgentQueryItems.kAgentQueryTransportName, simcity.AgentQueryItems.kAgentQueryOreRaw];
simcity.AgentQueryDataBindings[scrui.IDFromName("MetalTruck")] = [simcity.AgentQueryItems.kAgentQueryTransportName, simcity.AgentQueryItems.kAgentQueryMetal];
simcity.AgentQueryDataBindings[scrui.IDFromName("AlloyTruck")] = [simcity.AgentQueryItems.kAgentQueryTransportName, simcity.AgentQueryItems.kAgentQueryAlloy];
simcity.AgentQueryDataBindings[scrui.IDFromName("FuelTruck")] = [simcity.AgentQueryItems.kAgentQueryTransportName, simcity.AgentQueryItems.kAgentQueryFuel];
simcity.AgentQueryDataBindings[scrui.IDFromName("PlasticTruck")] = [simcity.AgentQueryItems.kAgentQueryTransportName, simcity.AgentQueryItems.kAgentQueryPlastic];
simcity.AgentQueryDataBindings[scrui.IDFromName("ElectronicsTruck")] = [simcity.AgentQueryItems.kAgentQueryTransportName, simcity.AgentQueryItems.kAgentQueryElectronics];
simcity.AgentQueryDataBindings[scrui.IDFromName("ComputerTruck")] = [simcity.AgentQueryItems.kAgentQueryTransportName, simcity.AgentQueryItems.kAgentQueryComputer];
simcity.AgentQueryDataBindings[scrui.IDFromName("TelevisionTruck")] = [simcity.AgentQueryItems.kAgentQueryTransportName, simcity.AgentQueryItems.kAgentQueryTelevision];
simcity.AgentQueryDataBindings[scrui.IDFromName("OilTruck")] = [simcity.AgentQueryItems.kAgentQueryTransportName, simcity.AgentQueryItems.kAgentQueryOilCrude];
simcity.AgentQueryDataBindings[scrui.IDFromName("SimoleonsTruck")] = [simcity.AgentQueryItems.kAgentQueryTransportName, simcity.AgentQueryItems.kAgentQuerySimoleons];
simcity.AgentQueryDataBindings[scrui.IDFromName("GarbageTruck")] = [simcity.AgentQueryItems.kAgentQueryTransportName, simcity.AgentQueryItems.kAgentQueryGarbage];
simcity.AgentQueryDataBindings[scrui.IDFromName("RecyclingTruck")] = [simcity.AgentQueryItems.kAgentQueryTransportName, simcity.AgentQueryItems.kAgentQueryRecycling];
simcity.AgentQueryDataBindings[scrui.IDFromName("Bus")] = [simcity.AgentQueryItems.kAgentQueryTransportName, simcity.AgentQueryItems.kAgentQueryBus];
simcity.AgentQueryDataBindings[scrui.IDFromName("SchoolBus")] = [simcity.AgentQueryItems.kAgentQueryTransportName, simcity.AgentQueryItems.kAgentQuerySchoolBus];
simcity.AgentQueryDataBindings[scrui.IDFromName("Coach")] = [simcity.AgentQueryItems.kAgentQueryTransportName, simcity.AgentQueryItems.kAgentQueryCoach];
simcity.AgentQueryDataBindings[scrui.IDFromName("LightTrain")] = [simcity.AgentQueryItems.kAgentQueryTransportName, simcity.AgentQueryItems.kAgentQueryLightTrain];
simcity.AgentQueryDataBindings[scrui.IDFromName("Train")] = [simcity.AgentQueryItems.kAgentQueryTransportName, simcity.AgentQueryItems.kAgentQueryTrain];
simcity.AgentQueryDataBindings[scrui.IDFromName("Ferry")] = [simcity.AgentQueryItems.kAgentQueryTransportName, simcity.AgentQueryItems.kAgentQueryFerry];
simcity.AgentQueryDataBindings[scrui.IDFromName("CruiseShip")] = [simcity.AgentQueryItems.kAgentQueryTransportName, simcity.AgentQueryItems.kAgentQueryCruiseShip];
simcity.AgentQueryDataBindings[scrui.IDFromName("Boat")] = [simcity.AgentQueryItems.kAgentQueryTransportName];
simcity.ActorQueryItems = {};
simcity.ActorQueryItems.kActorQueryScreenPosition = {
  dynamic : !0,
  allowNullResults : !0,
  bindingType : simcity.cAgentQueryUIHandler.kBindingTypePosition,
  queries : function () {
    return {
      screenPosition : [simcity.kDataActor, simcity.kDataScreenPosition]
    }
  }
};
simcity.ActorQueryItems.kActorQueryRegionalBoxUID = {
  dynamic : !0,
  allowNullResults : !0,
  bindingType : simcity.cAgentQueryUIHandler.kBindingTypeRegionalBoxUID,
  queries : function () {
    return {
      regionalBoxUID : [simcity.kDataAgent, simcity.kDataBinAmount, simcity.kResourceRegionalBoxUniqueID]
    }
  },
  update : function (a) {
    return a.regionalBoxUID
  }
};
simcity.ActorQueryItems.kActorQueryGender = {
  dynamic : !1,
  bindingType : simcity.cAgentQueryUIHandler.kBindingTypeGender,
  queries : function () {
    return {
      gender : [simcity.kDataActor, simcity.kDataGender]
    }
  },
  update : function (a) {
    return a.gender
  }
};
simcity.ActorQueryItems.kActorQuerySimName = {
  dynamic : !1,
  bindingType : simcity.cAgentQueryUIHandler.kBindingTypeName,
  queries : function () {
    return {
      simFirstName : [simcity.kDataActor, simcity.kDataSimFirstName],
      simLastName : [simcity.kDataActor, simcity.kDataSimLastName]
    }
  },
  update : function (a) {
    return {
      firstName : a.simFirstName,
      lastName : a.simLastName
    }
  }
};
simcity.ActorQueryItems.kActorQueryDestination = {
  dynamic : !0,
  allowNullResults : !0,
  bindingType : simcity.cAgentQueryUIHandler.kBindingTypeDestination,
  color : null,
  queries : function () {
    return {
      destination : [simcity.kDataActor, simcity.kDataDestination]
    }
  },
  update : function (a) {
    return a.destination
  }
};
simcity.ActorQueryItems.kActorQuerySourceName = {
  dynamic : !0,
  allowNullResults : !0,
  bindingType : simcity.cAgentQueryUIHandler.kBindingTypeSource,
  queries : function () {
    return {
      sourceName : [simcity.kDataActor, simcity.kDataSourceName]
    }
  },
  update : function (a) {
    return a.sourceName ? scrui.TextFromLocaleProperty(a.sourceName) : ""
  }
};
simcity.kSharedActorQueryDataBindings = [simcity.ActorQueryItems.kActorQueryScreenPosition];
simcity.kSharedActorQueryTimedRefreshDataBindings = [simcity.ActorQueryItems.kActorQueryGender, simcity.ActorQueryItems.kActorQuerySimName, simcity.ActorQueryItems.kActorQueryDestination, simcity.ActorQueryItems.kActorQuerySourceName];
simcity.EventTriggering = {};
simcity.kLowSBTestingRate = 3;
simcity.cEventTriggersManager = function () {
  this.UIHandler = scrui.cUIHandler;
  this.UIHandler();
  this.mDataBindings = [];
  this.mCategories = [];
  this.categoryIndex = 0;
  this.mUnlockCategoryMap = {};
  this.mUpdateTime = 0;
  this.mMaxTriggersToTest = simcity.kLowSBTestingRate;
  this.mEnabled = !0
};
goog.inherits(simcity.cEventTriggersManager, scrui.cUIHandler);
simcity.cEventTriggersManager.prototype.Init = function () {
  var a = simcity.gGlobalUIHandler.mIsTutorialEnabled;
  if (!a) {
    delete simcity.SpeechBalloonPolling.Tutorials;
    var b = [],
    c = [];
    this.mMaxTriggersToTest = simcity.kLowSBTestingRate;
    for (var d in simcity.SpeechBalloonPolling) {
      var e = simcity.SpeechBalloonPolling[d];
      e.hasOwnProperty("unlockBin") ? (b.push(scrui.BuildRequestQuery([simcity.kDataBinAmount, e.unlockBin])), c.push(e), e.hasOwnProperty("unlockEvent") && (this.mUnlockCategoryMap[e.unlockEvent] = e)) : a || this.mCategories.push(e);
      e = e.DataBindings;
      for (d in e) {
        var f = e[d];
        f.hasOwnProperty("test") && f.test()
      }
    }
    var g = this;
    scrui.RequestGameData(b, function (a) {
      for (var b = 0, d = a.length; b < d; ++b)
        if (0 < a[b]) {
          var e = c[b];
          g.mCategories.push(e);
          e.hasOwnProperty("unlockEvent") && delete g.mUnlockCategoryMap[e.unlockEvent]
        }
      b = 0;
      for (d = g.mCategories.length; b < d; ++b)
        e = g.mCategories[b], e.triggerIndex = 0, e.dataBindingKeys = Object.keys(e.DataBindings)
    })
  }
};
simcity.cEventTriggersManager.prototype.HandleGameEvent = function (a, b) {
  switch (a) {
  case simcity.kGameMessageUnitRuleUIEvent:
  case simcity.kGameMessageGlobalRuleUIEvent:
    var c = b.eventID;
    this.mUnlockCategoryMap.hasOwnProperty(c) && (c = this.mUnlockCategoryMap[c], c.triggerIndex = 0, c.dataBindingKeys = Object.keys(c.DataBindings), this.mCategories.push(c), delete this.mUnlockCategoryMap[c.unlockEvent])
  }
};
simcity.cEventTriggersManager.prototype.RemoveDataBinding = function (a) {
  for (var b = 0, c = this.mCategories.length; b < c; ++b) {
    var d = this.mCategories[b];
    if (d.DataBindings.hasOwnProperty(a.id)) {
      delete d.DataBindings[a.id];
      d.dataBindingKeys = Object.keys(d.DataBindings);
      a = d.dataBindingKeys.length;
      0 === a ? (this.mCategories.splice(b, 1), this.categoryIndex === this.mCategories.length && (this.categoryIndex = Math.max(0, this.categoryIndex - 1))) : d.triggerIndex === a && --d.triggerIndex;
      return
    }
  }
  scrui.Assert(a.enableInTutorial, "cEventTriggersManager failed to remove databinding " +
    a.id)
};
simcity.AddDataBindingIfNeeded = scrui.Client_ProfZone("simcity.AddDataBindingIfNeeded", function (a, b, c, d, e, f) {
    if (!a.hasOwnProperty("timeToFire") || f > a.timeToFire)
      a.timeToFire = f + Math.random() * (a.triggerTime[1] - a.triggerTime[0]) + a.triggerTime[0], simcity.TestSpeechBalloonTriggerHelper(a) && (simcity.AddSimpleQueries(c, a.queries), d[b] = a.queries, e[b] = a, ++b);
    return b
  });
simcity.cEventTriggersManager.prototype.Update = scrui.Client_ProfZone("cEventTriggersManager.Update", function () {
    if (this.mEnabled) {
      var a = simcity.gGlobalUIHandler.mGameTimeManager,
      b = a.GetElapsedGameTimeSeconds();
      this.mUpdateTime += b;
      if (1 < this.mUpdateTime && (scrui.Client_ProfBegin("cEventTriggersManager.Update>settingUp"), this.mUpdateTime = 0, 0 !== this.mCategories.length)) {
        a = a.GetTotalElapsedGameTimeSeconds();
        b = this.mCategories[this.categoryIndex];
        ++this.categoryIndex;
        this.categoryIndex === this.mCategories.length &&
        (this.categoryIndex = 0);
        for (var c = Array(this.mMaxTriggersToTest), d = [], e = Array(this.mMaxTriggersToTest), f = b.DataBindings, g = b.dataBindingKeys.length, h = b.triggerIndex, i = g - h, j = 0, k = h + Math.min(i, this.mMaxTriggersToTest), l = h; l < k; ++l) {
          var m = b.dataBindingKeys[l],
          n = f[m];
          n.id = Number(m);
          j = simcity.AddDataBindingIfNeeded(n, j, d, e, c, a)
        }
        if (0 < h && i < this.mMaxTriggersToTest) {
          k = this.mMaxTriggersToTest - i;
          for (l = 0; l < k; ++l)
            m = b.dataBindingKeys[l], n = f[m], n.id = Number(m), j = simcity.AddDataBindingIfNeeded(n, j, d, e, c, a)
        }
        b.triggerIndex =
          k === g ? 0 : k;
        scrui.Client_ProfEnd();
        0 < j && (c.length = j, e.length = j, simcity.RequestDataBindingData(d, c, e, !1, function (a) {
            for (var b = 0, d = c.length; b < d; ++b) {
              var e = c[b];
              simcity.TestSpeechBalloonTriggerWithGlobalQueries(e, a[b]) && simcity.gGlobalUIHandler.mSpeechBalloonHandler.AddSpeechBalloonWithoutUnit(e)
            }
          }))
      }
    }
  });
simcity.GameResourceIDs = {};
simcity.kResourceIDResidents = 506990972;
simcity.kResourceIDTotalResidential = 681686445;
simcity.kResourceIDResidentialShopperW1 = 2934929422;
simcity.kResourceIDResidentialShopperW2 = 2934929421;
simcity.kResourceIDResidentialShopperW3 = 2934929420;
simcity.kResourceIDHotItemsW1ProducedYesterday_Day = 3247323853;
simcity.kResourceIDHotItemsW2ProducedYesterday_Day = 4075527244;
simcity.kResourceIDHotItemsW3ProducedYesterday_Day = 3651520519;
simcity.kResourceIDHotItemsW1ProducedYesterday_Night = 392353857;
simcity.kResourceIDHotItemsW2ProducedYesterday_Night = 2856525928;
simcity.kResourceIDHotItemsW3ProducedYesterday_Night = 2758533907;
simcity.kResourceIDHotItemsW1ConsumedYesterday_Day = 595423747;
simcity.kResourceIDHotItemsW2ConsumedYesterday_Day = 618980098;
simcity.kResourceIDHotItemsW3ConsumedYesterday_Day = 1614975025;
simcity.kResourceIDHotItemsW1ConsumedYesterday_Night = 271683775;
simcity.kResourceIDHotItemsW2ConsumedYesterday_Night = 1097350438;
simcity.kResourceIDHotItemsW3ConsumedYesterday_Night = 3635814549;
simcity.kResourceIDShopWaresW1ProducedDaily = 3253410504;
simcity.kResourceIDShopWaresW2ProducedDaily = 1834082533;
simcity.kResourceIDShopWaresW3ProducedDaily = 695262962;
simcity.kResourceIDResidentialWorkerW1 = 3667251247;
simcity.kResourceIDResidentialWorkerW2 = 3667251244;
simcity.kResourceIDResidentialWorkerW3 = 3667251245;
simcity.kResourceIDTotalKids = 3478596890;
simcity.kResourceIDTotalKidsYesterday = 1061281538;
simcity.kResourceIDTotalStudents = 116259821;
simcity.kResourceIDTotalStudentsYesterday = 1453663751;
simcity.kResourceIDResidentialW1 = 3000398761;
simcity.kResourceIDResidentialW2 = 3000398762;
simcity.kResourceIDResidentialW3 = 3000398763;
simcity.kResourceIDCommercialW1 = 3635297831;
simcity.kResourceIDCommercialW2 = 3635297828;
simcity.kResourceIDCommercialW3 = 3635297829;
simcity.kResourceIDIndustrialW1 = 14091500;
simcity.kResourceIDIndustrialW2 = 14091503;
simcity.kResourceIDIndustrialW3 = 14091502;
simcity.kResourceIDLocalStudentsYesterday = 20654726;
simcity.kResourceIDDensity = 1551159691;
simcity.kResourceIDWealth = 22421794;
simcity.kResourceIDUnderConstruction = 3953979238;
simcity.kResourceIDVacant = 4050174720;
simcity.kResourceIDRegionTotalResidential = 233898165;
simcity.kResourceIDCarsOnRoad = 4263936761;
simcity.kResourceIDSimsWalking = 646593386;
simcity.kResourceIDNumberOfResidential = 107377317;
simcity.kResourceIDNumberOfCommercial = 679995175;
simcity.kResourceIDNumberOfIndustrial = 690843176;
simcity.kResourceIDNumberOfToys = 613677770;
simcity.kResourceIDRW1D1 = 422563668;
simcity.kResourceIDRW1D2 = 422563671;
simcity.kResourceIDRW1D3 = 422563670;
simcity.kResourceIDRW2D1 = 926039303;
simcity.kResourceIDRW2D2 = 926039300;
simcity.kResourceIDRW2D3 = 926039301;
simcity.kResourceIDRW3D1 = 624189254;
simcity.kResourceIDRW3D2 = 624189253;
simcity.kResourceIDRW3D3 = 624189252;
simcity.kResourceIDCW1D1 = 2133762117;
simcity.kResourceIDCW1D2 = 2133762118;
simcity.kResourceIDCW1D3 = 2133762119;
simcity.kResourceIDCW2D1 = 1899419934;
simcity.kResourceIDCW2D2 = 1899419933;
simcity.kResourceIDCW2D3 = 1899419932;
simcity.kResourceIDCW3D1 = 2201166815;
simcity.kResourceIDCW3D2 = 2201166812;
simcity.kResourceIDCW3D3 = 2201166813;
simcity.kResourceIDIW1D1 = 1027109387;
simcity.kResourceIDIW1D2 = 1027109384;
simcity.kResourceIDIW1D3 = 1027109385;
simcity.kResourceIDIW2D1 = 255191816;
simcity.kResourceIDIW2D2 = 255191819;
simcity.kResourceIDIW2D3 = 255191818;
simcity.kResourceIDIW3D1 = 691262881;
simcity.kResourceIDIW3D2 = 691262882;
simcity.kResourceIDIW3D3 = 691262883;
simcity.kResourceIDToyW1 = 1702694203;
simcity.kResourceIDToyW2 = 1702694200;
simcity.kResourceIDToyW3 = 1702694201;
simcity.kResourceIDJobs = 3577750133;
simcity.kResourceIDJobsW1 = 3550749881;
simcity.kResourceIDJobsW2 = 3550749882;
simcity.kResourceIDJobsW3 = 3550749883;
simcity.kResourceIDDayJobsW1 = 2625288509;
simcity.kResourceIDDayJobsW2 = 2625288510;
simcity.kResourceIDDayJobsW3 = 2625288511;
simcity.kResourceIDNightJobsW1 = 3574023729;
simcity.kResourceIDNightJobsW2 = 3574023730;
simcity.kResourceIDNightJobsW3 = 3574023731;
simcity.kResourceIDSimW1 = 435507402;
simcity.kResourceIDSimW2 = 435507401;
simcity.kResourceIDSimW3 = 435507400;
simcity.kResourceIDSimWorkerW1 = 3362141940;
simcity.kResourceIDSimWorkerW2 = 3362141943;
simcity.kResourceIDSimWorkerW3 = 3362141942;
simcity.kResourceIDSimShopperW1 = 1682028163;
simcity.kResourceIDSimShopperW2 = 1682028160;
simcity.kResourceIDSimShopperW3 = 1682028161;
simcity.kResourceIDResidentWorkerW1 = 3276597375;
simcity.kResourceIDResidentWorkerW2 = 3276597372;
simcity.kResourceIDResidentWorkerW3 = 3276597373;
simcity.kResourceIDResidentWorkerW1Paused = 1428753089;
simcity.kResourceIDResidentWorkerW2Paused = 3102600538;
simcity.kResourceIDResidentWorkerW3Paused = 4224432595;
simcity.kResourceIDResidentWorkerW1Locked = 1200777321;
simcity.kResourceIDResidentWorkerW2Locked = 1683595710;
simcity.kResourceIDResidentWorkerW3Locked = 4064745803;
simcity.kResourceIDTotalResidents = 70888836;
simcity.kResourceIDTotalResidentWorkersW1 = 3730101870;
simcity.kResourceIDTotalResidentWorkersW2 = 3730101869;
simcity.kResourceIDTotalResidentWorkersW3 = 3730101868;
simcity.kResourceIDResidentShopperW1 = 274066078;
simcity.kResourceIDResidentShopperW2 = 274066077;
simcity.kResourceIDResidentShopperW3 = 274066076;
simcity.kResourceIDShopperRestingW1 = 1279966668;
simcity.kResourceIDShopperRestingW2 = 1279966671;
simcity.kResourceIDShopperRestingW3 = 1279966670;
simcity.kResourceIDResidentShopperW1Paused = 771766984;
simcity.kResourceIDResidentShopperW2Paused = 3950433779;
simcity.kResourceIDResidentShopperW3Paused = 2828601722;
simcity.kResourceIDTotalResidentShoppersW1 = 2855030245;
simcity.kResourceIDTotalResidentShoppersW2 = 2855030246;
simcity.kResourceIDTotalResidentShoppersW3 = 2855030247;
simcity.kResourceIDWorkersExportedW1 = 2153200811;
simcity.kResourceIDWorkersExportedW2 = 2153200808;
simcity.kResourceIDWorkersExportedW3 = 2153200809;
simcity.kResourceIDShoppersExportedW1 = 3487690468;
simcity.kResourceIDShoppersExportedW2 = 3487690471;
simcity.kResourceIDShoppersExportedW3 = 3487690470;
simcity.kResourceIDLostResidentShopperW1 = 2388451008;
simcity.kResourceIDLostResidentShopperW2 = 2388451011;
simcity.kResourceIDLostResidentShopperW3 = 2388451010;
simcity.kResourceIDLostResidentWorkerW1 = 2019189093;
simcity.kResourceIDLostResidentWorkerW2 = 2019189094;
simcity.kResourceIDLostResidentWorkerW3 = 2019189095;
simcity.kResourceIDLostCarW1 = 3026213751;
simcity.kResourceIDLostCarW2 = 3026213748;
simcity.kResourceIDLostCarW3 = 3026213749;
simcity.kResourceIDLostKids = 1549736624;
simcity.kResourceIDTradeLostKids = 3413038648;
simcity.kResourceIDTotalWorkers = 533812918;
simcity.kResourceIDWorkerW1 = 1825323535;
simcity.kResourceIDWorkerW2 = 1825323532;
simcity.kResourceIDWorkerW3 = 1825323533;
simcity.kResourceIDExtraWorkerW1 = 1627828683;
simcity.kResourceIDExtraWorkerW2 = 1627828680;
simcity.kResourceIDExtraWorkerW3 = 1627828681;
simcity.kResourceIDExtraWorkerW1Paused = 3372671557;
simcity.kResourceIDExtraWorkerW2Paused = 2320734974;
simcity.kResourceIDExtraWorkerW3Paused = 897663655;
simcity.kResourceIDTotalJobs = 606764013;
simcity.kResourceIDWorkersNeeded = 1400428281;
simcity.kResourceIDShiftLength = 4227153767;
simcity.kResourceIDNoPrerequisite = 4209529462;
simcity.kResourceIDCanAfford = 815204315;
simcity.kResourceIDShopperW1 = 3940836846;
simcity.kResourceIDShopperW2 = 3940836845;
simcity.kResourceIDShopperW3 = 3940836844;
simcity.kResourceIDShoppersNeededW1 = 2475985746;
simcity.kResourceIDShoppersNeededW2 = 2475985745;
simcity.kResourceIDShoppersNeededW3 = 2475985744;
simcity.kResourceIDTotalShoppers = 3254086073;
simcity.kResourceIDOpenShoppers = 3463331117;
simcity.kResourceIDTouristW1 = 444274501;
simcity.kResourceIDTouristW2 = 444274502;
simcity.kResourceIDTouristW3 = 444274503;
simcity.kResourceIDTouristW1EnteredToday = 1921885289;
simcity.kResourceIDTouristW2EnteredToday = 347227866;
simcity.kResourceIDTouristW3EnteredToday = 2799711511;
simcity.kResourceIDTouristW1EnteredYesterday = 1190645214;
simcity.kResourceIDTouristW2EnteredYesterday = 3573386765;
simcity.kResourceIDTouristW3EnteredYesterday = 964913384;
simcity.kResourceIDTourists_Daily = 4044820634;
simcity.kResourceIDGuestW1 = 415469395;
simcity.kResourceIDGuestW2 = 415469392;
simcity.kResourceIDGuestW3 = 415469393;
simcity.kResourceIDPayout = 1319618451;
simcity.kResourceIDPayout_Prior = 2658851714;
simcity.kResourceIDEventCost = 3521822336;
simcity.kResourceIDOpenGuestsW1 = 1312145318;
simcity.kResourceIDOpenGuestsW2 = 1312145317;
simcity.kResourceIDOpenGuestsW3 = 1312145316;
simcity.kResourceIDTotalGuests = 335331786;
simcity.kResourceIDShoppingToken = 355482452;
simcity.kResourceIDHappinessToken = 3096611079;
simcity.kResourceIDTokensToRemove = 3239829468;
simcity.kResourceIDHappinessTokenLast = 158634211;
simcity.kResourceIDHotItemsW1 = 985114566;
simcity.kResourceIDHotItemsW2 = 985114565;
simcity.kResourceIDHotItemsW3 = 985114564;
simcity.kResourceIDSouvenirsW1 = 1793669541;
simcity.kResourceIDSouvenirsW2 = 1793669542;
simcity.kResourceIDSouvenirsW3 = 1793669543;
simcity.kResourceIDDayShopW1 = 1706472385;
simcity.kResourceIDDayShopW2 = 1706472386;
simcity.kResourceIDDayShopW3 = 1706472387;
simcity.kResourceIDNightShopW1 = 1936110997;
simcity.kResourceIDNightShopW2 = 1936110998;
simcity.kResourceIDNightShopW3 = 1936110999;
simcity.kResourceIDHappinessDisplay = 4197210794;
simcity.kResourceIDHappinessGlobals_MayorRating = 2329165682;
simcity.kResourceIDHappinessTokenW1 = 309736775;
simcity.kResourceIDHappinessTokenW2 = 309736772;
simcity.kResourceIDHappinessTokenW3 = 309736773;
simcity.kResourceIDProfitCTokenW1 = 2074335033;
simcity.kResourceIDProfitCTokenW2 = 2074335034;
simcity.kResourceIDProfitCTokenW3 = 2074335035;
simcity.kResourceIDProfitITokenW1 = 2353346555;
simcity.kResourceIDProfitITokenW2 = 2353346552;
simcity.kResourceIDProfitITokenW3 = 2353346553;
simcity.kResourceIDHappinessTokenW1_Capacity = 1578161702;
simcity.kResourceIDHappinessTokenW2_Capacity = 1897521287;
simcity.kResourceIDHappinessTokenW3_Capacity = 147115436;
simcity.kResourceIDProfitCTokenW1_Capacity = 3159940408;
simcity.kResourceIDProfitCTokenW2_Capacity = 2341862765;
simcity.kResourceIDProfitCTokenW3_Capacity = 3000392978;
simcity.kResourceIDProfitITokenW1_Capacity = 1530020818;
simcity.kResourceIDProfitITokenW2_Capacity = 1068140483;
simcity.kResourceIDProfitITokenW3_Capacity = 1958713080;
simcity.kResourceIDProfitToken = 3478285230;
simcity.kResourceIDProfitTokenLast = 4074177946;
simcity.kResourceIDProfitTokensToRemove = 1392836198;
simcity.kResourceIDFreightCapacityGlobal = 4006316439;
simcity.kResourceIDFreightConsumedToday = 3477098047;
simcity.kResourceIDFreightProducedToday = 2748560409;
simcity.kResourceIDFreightConsumedYesterday = 2922083280;
simcity.kResourceIDFreightProducedYesterday = 3768638830;
simcity.kResourceIDFreightExportedToday = 1899728130;
simcity.kResourceIDFreightExportedYesterday = 1300296021;
simcity.kResourceIDFreightImportedToday = 1252812105;
simcity.kResourceIDFreightImportedYesterday = 3077635774;
simcity.kResourceIDImportedFreightTrucks = 334092794;
simcity.kResourceIDExportedFreightTrucks = 3384332457;
simcity.kResourceIDProtester = 2731587251;
simcity.kResourceIDSadnessFromCrime = 3102995628;
simcity.kResourceIDSadnessFromCrimeAtBuilding = 2676631795;
simcity.kResourceIDSadnessFromDeath = 3014669568;
simcity.kResourceIDSadnessFromGerms = 4098878488;
simcity.kResourceIDSadnessFromInjury = 2711830447;
simcity.kResourceIDSadnessFromNotEnoughSales = 3729974311;
simcity.kResourceIDSadnessFromNoDesirability = 2933493994;
simcity.kResourceIDSadnessFromNoEducation = 265058035;
simcity.kResourceIDSadnessFromNoSkill = 3999968446;
simcity.kResourceIDSadnessFromNoRent = 3794757290;
simcity.kResourceIDSadnessFromGarbage = 1153586619;
simcity.kResourceIDSadnessFromHomelessness = 306806153;
simcity.kResourceIDSadnessFromNoPower = 300030230;
simcity.kResourceIDSadnessFromNotEnoughWorkers = 942604190;
simcity.kResourceIDSadnessFromNotOperational = 332562811;
simcity.kResourceIDSadnessFromNoWater = 2630915076;
simcity.kResourceIDSadnessFromPark = 1043343262;
simcity.kResourceIDSadnessFromPollution = 2342209900;
simcity.kResourceIDSadnessFromSewage = 1456171026;
simcity.kResourceIDSadnessFromSickness = 1012990933;
simcity.kResourceIDSadnessFromTaxes = 3463385665;
simcity.kResourceIDSadnessFromUnemployment = 3085998997;
simcity.kResourceIDHappiness_CanUpgradeTimer_D = 3312452629;
simcity.kResourceIDHappinessFromCrimeSuppression = 788152555;
simcity.kResourceIDHappinessFromCustomers = 2493376395;
simcity.kResourceIDHappinessFromStudentCustomers = 2181284564;
simcity.kResourceIDHappinessFromTouristCustomers = 1941201565;
simcity.kResourceIDHappinessFromFireInspector = 2675856823;
simcity.kResourceIDHappinessFromHealthOutreach = 1327167803;
simcity.kResourceIDHappinessFromPark = 2232061704;
simcity.kResourceIDHappinessFromPoliceOutreach = 3030062443;
simcity.kResourceIDHappinessFromShipments = 125348697;
simcity.kResourceIDHappinessFromShop = 3849002820;
simcity.kResourceIDHappinessFromTaxes = 4134653131;
simcity.kResourceIDPlague = 1131613591;
simcity.kResourceIDZombies = 1721775719;
simcity.kResourceIDNIMBY = 574418664;
simcity.kResourceIDHour = 3584069523;
simcity.kResourceIDYear = 2609628718;
simcity.kResourceIDActiveBuilding = 2048500291;
simcity.kResourceIDActiveCheat = 1415435808;
simcity.kResourceIDOpenForBusiness = 1156960108;
simcity.kResourceIDConnected = 1629494038;
simcity.kResourceIDTriggeredProtestMission = 3217593197;
simcity.kResourceIDConstructionProgress = 1451393771;
simcity.kResourceIDBuildingTaxValue = 2540684511;
simcity.kResourceIDIncome = 276811212;
simcity.kResourceIDIncomeSoFar = 3830709641;
simcity.kResourceIDExpenses = 3986250326;
simcity.kResourceIDSimoleons = 932594546;
simcity.kResourceIDMoneyToken = 1421190854;
simcity.kResourceIDExpensesFromMaintenanceCoal = 2914008682;
simcity.kResourceIDExpensesFromMaintenanceOil = 30287917;
simcity.kResourceIDExpensesFromMaintenanceOre = 3872259493;
simcity.kResourceIDExpensesFromMaintenanceTransport = 665508202;
simcity.kResourceIDExpensesFromMaintenanceAir = 4258438993;
simcity.kResourceIDExpensesFromMaintenanceBoat = 1286812053;
simcity.kResourceIDExpensesFromMaintenanceBus = 3923430943;
simcity.kResourceIDExpensesFromMaintenanceLightRail = 4049820673;
simcity.kResourceIDExpensesFromMaintenanceHeavyRail = 524076852;
simcity.kResourceIDExpensesFromMaintenancePower = 260897934;
simcity.kResourceIDExpensesFromMaintenanceWater = 1626720268;
simcity.kResourceIDExpensesFromMaintenanceSewage = 125463887;
simcity.kResourceIDExpensesFromMaintenancePolice = 857827309;
simcity.kResourceIDExpensesFromMaintenanceOrdinance = 2482326148;
simcity.kResourceIDExpensesFromMaintenanceManufacturing = 2634840555;
simcity.kResourceIDExpensesFromMaintenanceElectronics = 4150433656;
simcity.kResourceIDExpensesFromMaintenanceExtraction = 1304689492;
simcity.kResourceIDExpensesFromMaintenanceImport = 3817061456;
simcity.kResourceIDExpensesFromMaintenanceHealth = 1906560361;
simcity.kResourceIDExpensesFromMaintenanceGarbage = 3854204960;
simcity.kResourceIDExpensesFromMaintenanceFire = 4091161999;
simcity.kResourceIDExpensesFromMaintenanceEducation = 60449099;
simcity.kResourceIDExpensesFromMaintenanceEducationE2 = 1413890478;
simcity.kResourceIDExpensesFromMaintenanceEducationE3 = 1413890479;
simcity.kResourceIDExpensesFromMaintenance = 4227066323;
simcity.kResourceIDExpensesFromTransport = 982827217;
simcity.kResourceIDExpensesFromPower = 2467381325;
simcity.kResourceIDExpensesFromPolice = 1417768676;
simcity.kResourceIDExpensesFromOrdinance = 2079631891;
simcity.kResourceIDExpensesFromManufacturing = 1802501268;
simcity.kResourceIDExpensesFromImport = 2812005065;
simcity.kResourceIDExpensesFromHealth = 767913660;
simcity.kResourceIDExpensesFromGarbage = 2486869479;
simcity.kResourceIDExpensesFromFire = 2209133790;
simcity.kResourceIDExpensesFromEducation = 1143007804;
simcity.kResourceIDExpensesFromWater = 3232477083;
simcity.kResourceIDExpensesFromCultural = 877987596;
simcity.kResourceIDExpensesFromTourism = 1876932877;
simcity.kResourceIDExpensesFromMaintenanceParks = 2873285118;
simcity.kResourceIDExpensesFromMaintenanceGovernment = 3383472214;
simcity.kResourceIDExpensesFromMaintenanceCultural = 4277428933;
simcity.kResourceIDExpensesFromMaintenanceTourism = 2576841198;
simcity.kResourceIDExpensesFromMaintenanceCasinos = 3284417293;
simcity.kResourceIDIncomeFromRW1 = 1546739750;
simcity.kResourceIDIncomeFromRW2 = 1546739749;
simcity.kResourceIDIncomeFromRW3 = 1546739748;
simcity.kResourceIDIncomeFromCW1 = 1544223759;
simcity.kResourceIDIncomeFromCW2 = 1544223756;
simcity.kResourceIDIncomeFromCW3 = 1544223757;
simcity.kResourceIDIncomeFromIW1 = 1542649705;
simcity.kResourceIDIncomeFromIW2 = 1542649706;
simcity.kResourceIDIncomeFromIW3 = 1542649707;
simcity.kResourceIDIncomeFromRW1WithTaxes = 965241869;
simcity.kResourceIDIncomeFromRW2WithTaxes = 1539447596;
simcity.kResourceIDIncomeFromRW3WithTaxes = 1161846911;
simcity.kResourceIDIncomeFromCW1WithTaxes = 4129686426;
simcity.kResourceIDIncomeFromCW2WithTaxes = 621486087;
simcity.kResourceIDIncomeFromCW3WithTaxes = 1937383156;
simcity.kResourceIDIncomeFromIW1WithTaxes = 204820040;
simcity.kResourceIDIncomeFromIW2WithTaxes = 1023666361;
simcity.kResourceIDIncomeFromIW3WithTaxes = 3607063422;
simcity.kResourceIDTaxLevelRW1 = 2546641224;
simcity.kResourceIDTaxLevelRW2 = 2546641227;
simcity.kResourceIDTaxLevelRW3 = 2546641226;
simcity.kResourceIDTaxLevelCW1 = 2544228497;
simcity.kResourceIDTaxLevelCW2 = 2544228498;
simcity.kResourceIDTaxLevelCW3 = 2544228499;
simcity.kResourceIDTaxLevelIW1 = 2543242791;
simcity.kResourceIDTaxLevelIW2 = 2543242788;
simcity.kResourceIDTaxLevelIW3 = 2543242789;
simcity.kResourceIDIncomeFromCasinos = 1309954224;
simcity.kResourceIDIncomeFromCasinosTotal = 2009149070;
simcity.kResourceIDCasinoHQIsPresent = 2884292350;
simcity.kResourceIDCasinoHQUnlocked = 1792557130;
simcity.kResourceIDIncomeFromLandMarks = 1353025343;
simcity.kResourceIDIncomeFromLandMarksTotal = 3661444471;
simcity.kResourceIDAdjustedIncome = 3737293454;
simcity.kResourceIDAdjustedExpenses = 1840332184;
simcity.kResourceIDIncomeFromPower = 3878226289;
simcity.kResourceIDIncomeFromWater = 2691015803;
simcity.kResourceIDIncomeFromSewageTreatment = 1358514474;
simcity.kResourceIDEventPreparation = 3728938950;
simcity.kResourceIDTouristW1SatisfiedToday = 3641764570;
simcity.kResourceIDTouristW2SatisfiedToday = 1236293709;
simcity.kResourceIDTouristW3SatisfiedToday = 676419548;
simcity.kResourceIDTouristW1SatisfiedYesterday = 1503818253;
simcity.kResourceIDTouristW2SatisfiedYesterday = 1924322506;
simcity.kResourceIDTouristW3SatisfiedYesterday = 781280779;
simcity.kResourceIDAttractionLevel = 1425832080;
simcity.kResourceIDTouristsAllowedW1 = 2532529484;
simcity.kResourceIDTouristsAllowedW2 = 2532529487;
simcity.kResourceIDTouristsAllowedW3 = 2532529486;
simcity.kResourceIDTouristW1LeftEarlyYesterday = 3221246613;
simcity.kResourceIDTouristW2LeftEarlyYesterday = 1900087746;
simcity.kResourceIDTouristW3LeftEarlyYesterday = 604786207;
simcity.kResourceIDEventPreparation = 3728938950;
simcity.kResourceIDEventTimer = 194774318;
simcity.kResourceIDPostEventCrowd = 633137976;
simcity.kResourceIDNumberOfT1Stadiums = 732482048;
simcity.kResourceIDNumberOfT2Stadiums = 1570731423;
simcity.kResourceIDNumberOfStadiums = 3639751417;
simcity.kResourceIDCostsFromStadium = 546726786;
simcity.kResourceIDPayoutFromStadiumTotal = 684456002;
simcity.kResourceIDPayoutFromStadiumThisHour = 2225257970;
simcity.kResourceIDPayoutFromStadiumLastHour = 1803061118;
simcity.kResourceIDStadiumID = 273171581;
simcity.kResourceIDActiveEventResearch = 1542617206;
simcity.kResourceIDEventSelection = 497041679;
simcity.kResourceIDFailureDueToToggledOff = 840871793;
simcity.kResourceIDFailureDueToNoWorkers = 2572076332;
simcity.kResourceIDFailureDueToNoPower = 925687770;
simcity.kResourceIDFailureDueToNoWater = 2012641080;
simcity.kResourceIDCasinoSpecialtyIncomeDisplay = 1979876969;
simcity.kResourceIDCasinoTouristW1IncomeDisplay = 1689886443;
simcity.kResourceIDCasinoTouristW2IncomeDisplay = 494332526;
simcity.kResourceIDCasinoTouristW3IncomeDisplay = 2889578413;
simcity.kResourceIDCasinoSpecialtyExpensesDisplay = 1939037327;
simcity.kResourceIDGamblerCapacityW1 = 869266449;
simcity.kResourceIDGamblerCapacityW2 = 869266450;
simcity.kResourceIDGamblerCapacityW3 = 869266451;
simcity.kResourceIDGamblerW1Satisfied = 1316521295;
simcity.kResourceIDGamblerW2Satisfied = 758095178;
simcity.kResourceIDGamblerW3Satisfied = 2539189505;
simcity.kResourceIDGamblersSatisfiedTotal = 3771518506;
simcity.kResourceIDCasinoLodgerW1Satisfied = 203825487;
simcity.kResourceIDCasinoLodgerW2Satisfied = 3940366666;
simcity.kResourceIDCasinoLodgerW3Satisfied = 1426493697;
simcity.kResourceIDCasinoTouristW1Today = 504095377;
simcity.kResourceIDCasinoTouristW2Today = 4070004760;
simcity.kResourceIDCasinoTouristW3Today = 216746127;
simcity.kResourceIDCasinoTouristW1Yesterday = 2795188294;
simcity.kResourceIDCasinoTouristW2Yesterday = 3945522031;
simcity.kResourceIDCasinoTouristW3Yesterday = 2278629440;
simcity.kResourceIDCasinoLodgersSatisfiedTotal = 45623850;
simcity.kResourceIDCasinoLodgingDivUnlock = 2587613669;
simcity.kResourceIDCasinoEntertainmentDivUnlock = 648158039;
simcity.kResourceIDCasinoGameDivUnlock = 1070113771;
simcity.kResourceIDCasinoHQIsPresent = 2884292350;
simcity.kResourceIDCasinoHQUnlocked = 1792557130;
simcity.kResourceIDNumberOfCasinos = 4237041535;
simcity.kResourceIDNumberOfCasinoModules = 1155861783;
simcity.kResourceIDNumberOfCasinoSigns = 3589361662;
simcity.kResourceIDNumberOfCasinoGameModules = 2922732385;
simcity.kResourceIDNumberOfCasinoEntertainmentModules = 1270940893;
simcity.kResourceIDNumberOfCasinoLodgingModules = 1158865535;
simcity.kResourceIDNumberOfSciFiCasinos = 240283289;
simcity.kResourceIDNumberOfStripCasinoAs = 2216626652;
simcity.kResourceIDNumberOfStripCasinoBs = 2233404209;
simcity.kResourceIDNumberOfElegantCasinos = 2194743579;
simcity.kResourceIDNumberOfGamblingDivisions = 3767468092;
simcity.kResourceIDNumberOfEntertainmentDivisions = 2117777875;
simcity.kResourceIDNumberOfLodgingDivisions = 1149236601;
simcity.kResourceIDNumberOfGamblingHouseSigns = 1588378906;
simcity.kResourceIDNumberOfGamblingHouses = 554121707;
simcity.kResourceIDNumberOfNickelSlots = 104662282;
simcity.kResourceIDNumberOfBlackjacks = 4097330622;
simcity.kResourceIDNumberOfCrapsTables = 1279154703;
simcity.kResourceIDNumberOfPokerHouses = 3164228307;
simcity.kResourceIDNumberOfCasinoComedyClubs = 638971984;
simcity.kResourceIDNumberOfCasinoLounges = 2583948285;
simcity.kResourceIDNumberOfCasinoDiscos = 1401826977;
simcity.kResourceIDNumberOfCasinoCelebrityStages = 3890732310;
simcity.kResourceIDNumberOfCasinoRouletteRooms = 3039433788;
simcity.kResourceIDNumberOfCasinoBaccaratRooms = 496141921;
simcity.kResourceIDNumberOfCasinoExclusiveClubs = 3842034955;
simcity.kResourceIDNumberOfCasinoConcertHalls = 346073478;
simcity.kResourceIDNumberOfCasinoRoomsW1 = 1075782960;
simcity.kResourceIDNumberOfCasinoRoomsW2 = 1075782963;
simcity.kResourceIDNumberOfCasinoRoomsW3 = 1075782962;
simcity.kResourceIDUnlockToken = 928475780;
simcity.kResourceIDBuildingLevel = 2673580297;
simcity.kResourceIDLevelUpToGo = 1863618135;
simcity.kResourceIDMayorsMansionUnlocked = 1719295514;
simcity.kResourceIDMayorsHouseSmallUnlocked = 3442351785;
simcity.kResourceIDBusT1StopUnlocked = 2538792199;
simcity.kResourceIDHasBusT1Station = 3814300242;
simcity.kResourceIDUpgradeAvailable = 2714018304;
simcity.kResourceIDCoal = 3469052172;
simcity.kResourceIDMetal = 2473969246;
simcity.kResourceIDAlloy = 504811494;
simcity.kResourceIDOreRaw = 2530163463;
simcity.kResourceIDFuel = 2661514705;
simcity.kResourceIDPlastic = 660835419;
simcity.kResourceIDElectronics = 3202467646;
simcity.kResourceIDComputer = 2376682602;
simcity.kResourceIDTelevision = 3098926425;
simcity.kResourceIDOilCrude = 3212172292;
simcity.kResourceIDCoalDeliveryAllowed = 1819482372;
simcity.kResourceIDMetalDeliveryAllowed = 3189494218;
simcity.kResourceIDAlloyDeliveryAllowed = 361523138;
simcity.kResourceIDOreRawDeliveryAllowed = 4170352897;
simcity.kResourceIDFuelDeliveryAllowed = 3042375407;
simcity.kResourceIDPlasticDeliveryAllowed = 1027770069;
simcity.kResourceIDElectronicsDeliveryAllowed = 287711274;
simcity.kResourceIDComputerDeliveryAllowed = 1606318118;
simcity.kResourceIDTelevisionDeliveryAllowed = 3377021703;
simcity.kResourceIDOilCrudeDeliveryAllowed = 4083535628;
simcity.kResourceIDAlloyProducedThisHour = 3182885740;
simcity.kResourceIDAlloyProducedPerHour = 3305788701;
simcity.kResourceIDMetalProducedThisHour = 145939892;
simcity.kResourceIDMetalProducedPerHour = 3773529877;
simcity.kResourceIDPlasticProducedThisHour = 810606585;
simcity.kResourceIDPlasticProducedPerHour = 1623862798;
simcity.kResourceIDTelevisionProducedThisHour = 106430263;
simcity.kResourceIDTelevisionProducedPerHour = 2802359472;
simcity.kResourceIDElectronicsProducedThisHour = 1788159124;
simcity.kResourceIDElectronicsProducedPerHour = 3734557557;
simcity.kResourceIDComputerProducedThisHour = 3731921376;
simcity.kResourceIDComputerProducedPerHour = 2184097737;
simcity.kResourceIDFuelProducedThisHour = 2880047007;
simcity.kResourceIDFuelProducedPerHour = 3004562504;
simcity.kResourceIDTotalPlasticAssembled = 218637233;
simcity.kResourceIDTotalAlloyAssembled = 1411498114;
simcity.kResourceIDCoalProducedDisplay = 853615038;
simcity.kResourceIDAlloyProducedDisplay = 369761380;
simcity.kResourceIDMetalProducedDisplay = 1307498540;
simcity.kResourceIDOreRawProducedDisplay = 2957549491;
simcity.kResourceIDElectronicsProducedDisplay = 2332537740;
simcity.kResourceIDComputerProducedDisplay = 2410395896;
simcity.kResourceIDTelevisionProducedDisplay = 554846177;
simcity.kResourceIDFuelProducedDisplay = 2663757065;
simcity.kResourceIDOilCrudeProducedDisplay = 734054438;
simcity.kResourceIDPlasticProducedDisplay = 2470116871;
simcity.kResourceIDHeight = 1279776192;
simcity.kResourceIDHeightThreshold = 3026865825;
simcity.kResourceIDExtractorMapLow = 3905066547;
simcity.kResourceIDExtractorMapEmpty = 3800084722;
simcity.kResourceIDStuffMined = 446695464;
simcity.kResourceIDStuffMinedPerDay = 3034801001;
simcity.kResourceIDMiningResourcesSold = 3280663838;
simcity.kResourceIDCoalHarvested = 1322749812;
simcity.kResourceIDCoalHarvested_ThisPeriod = 1300853028;
simcity.kResourceIDCoalHarvested_PerPeriod = 4097110099;
simcity.kResourceIDCoalHarvestedDisplay = 147036502;
simcity.kResourceIDCoalDelivered = 415012756;
simcity.kResourceIDCoalTruckT1 = 3585818960;
simcity.kResourceIDCoalTruckT2 = 3585818963;
simcity.kResourceIDCoalMineUnlocked = 61687530;
simcity.kResourceIDCoalMinesBuilt = 1265620228;
simcity.kResourceIDCoalMinesBuilt_T1 = 3804199702;
simcity.kResourceIDCoalMineT2Unlocked = 1268484616;
simcity.kResourceIDCoalMinesBuilt_T2 = 3804199701;
simcity.kResourceIDCoalShaftsBuilt = 3190577349;
simcity.kResourceIDCoalShaftsBuilt_T1 = 174028141;
simcity.kResourceIDCoalShaftsBuilt_T2 = 174028142;
simcity.kResourceIDCoalGaragesBuilt = 803107994;
simcity.kResourceIDCoalGaragesBuilt_T1 = 3313040836;
simcity.kResourceIDCoalGaragesBuilt_T2 = 3313040839;
simcity.kResourceIDCoalMapEmpty = 1765739621;
simcity.kResourceIDCoalMapLow = 758396592;
simcity.kResourceIDCoalBuyPrice = 2205721339;
simcity.kResourceIDCoalSellPrice = 397488919;
simcity.kResourceIDGlobalMission_MSCoalCoalHQToLevel2 = 56675115;
simcity.kResourceIDGlobalMission_MSCoalCoalHQToLevel3 = 56675114;
simcity.kResourceIDGlobalMission_MSCoalCoalHQToLevel4 = 56675117;
simcity.kResourceIDCoalBurned = 1541996840;
simcity.kResourceIDCoalBurnedThisHour = 2575376022;
simcity.kResourceIDCoalBurnedPerHour = 1907231427;
simcity.kResourceIDHasCoal = 1510379398;
simcity.kResourceIDNoModules = 1359390303;
simcity.kResourceIDHasOre = 1336743113;
simcity.kResourceIDOreMinesBuilt = 1971836291;
simcity.kResourceIDOreMapEmpty = 2154953930;
simcity.kResourceIDOreMapLow = 582561355;
simcity.kResourceIDOreHarvested = 1324776669;
simcity.kResourceIDOreHarvested_ThisPeriod = 360783863;
simcity.kResourceIDOreHarvested_PerPeriod = 1999061562;
simcity.kResourceIDOreHarvestedDisplay = 1929153685;
simcity.kResourceIDHasOil = 1789738817;
simcity.kResourceIDNumberOfOilWells = 3822808170;
simcity.kResourceIDNumberOfOilPumpjacks = 1479411151;
simcity.kResourceIDOilCrudeStorage = 2515576615;
simcity.kResourceIDOilCrudePumped = 115382853;
simcity.kResourceIDOilCrudePumpedPerDay = 2680707156;
simcity.kResourceIDOilCrudePumpedDisplay = 577034589;
simcity.kResourceIDOilCrudeSold = 1495594842;
simcity.kResourceIDOilCrudePumped_ThisPeriod = 2133221439;
simcity.kResourceIDOilCrudePumped_PerPeriod = 690517714;
simcity.kResourceIDOilCrudeBurned = 2688949744;
simcity.kResourceIDOilCrudeBurnedThisHour = 1754683230;
simcity.kResourceIDOilCrudeBurnedPerHour = 3616211099;
simcity.kResourceIDNumberOfMetalManufacturingBases = 1525616142;
simcity.kResourceIDNumberOfOilManufacturingBases = 3316962459;
simcity.kResourceIDNumberOfAlloyAssemblers = 1382660551;
simcity.kResourceIDNumberOfMetalAssemblers = 1997611743;
simcity.kResourceIDNumberOfPlasticAssemblers = 297889326;
simcity.kResourceIDNumberOfFuelAssemblers = 4081186296;
simcity.kResourceIDNumberOfAlloyConsumers = 418497113;
simcity.kResourceIDNumberOfMetalConsumers = 2758454193;
simcity.kResourceIDNumberOfPlasticConsumers = 2372125902;
simcity.kResourceIDNumberOfFuelConsumers = 1822063616;
simcity.kResourceIDNumberOfOreConsumers = 2506735350;
simcity.kResourceIDNumberOfCoalConsumers = 3988714811;
simcity.kResourceIDAlloyDeliveredToday = 1526483933;
simcity.kResourceIDAlloyDeliveredPerDay = 1226479167;
simcity.kResourceIDMetalDeliveredToday = 2430483765;
simcity.kResourceIDMetalDeliveredPerDay = 2878482839;
simcity.kResourceIDPlasticDeliveredToday = 957065676;
simcity.kResourceIDPlasticDeliveredPerDay = 652536936;
simcity.kResourceIDFuelDeliveredToday = 1057307070;
simcity.kResourceIDFuelDeliveredPerDay = 1871327294;
simcity.kResourceIDElectronicsDeliveredToday = 1492395285;
simcity.kResourceIDElectronicsDeliveredPerDay = 1040815095;
simcity.kResourceIDTelevisionDeliveredToday = 76334406;
simcity.kResourceIDTelevisionDeliveredPerDay = 2367596646;
simcity.kResourceIDComputerDeliveredToday = 4152484833;
simcity.kResourceIDComputerDeliveredPerDay = 2428768675;
simcity.kResourceIDCoalDeliveredToday = 1232367775;
simcity.kResourceIDCoalDeliveredPerDay = 1093316741;
simcity.kResourceIDOilCrudeDeliveredToday = 554318647;
simcity.kResourceIDOilCrudeDeliveredPerDay = 2722928253;
simcity.kResourceIDOreRawDeliveredToday = 2722297832;
simcity.kResourceIDOreRawDeliveredPerDay = 3524034500;
simcity.kResourceIDManufacturingTruck = 1350344434;
simcity.kResourceIDHQ_Casino_Built = 3977359027;
simcity.kResourceIDHQ_Casino_IsOn = 3360911126;
simcity.kResourceIDHQ_Casino_Level = 3511379761;
simcity.kResourceIDHQ_Casino_OpenModules = 801657528;
simcity.kResourceIDHQ_Casino_Unlocked = 26304830;
simcity.kResourceIDHQ_Casino_Lodging_Module_Built = 759304535;
simcity.kResourceIDHQ_Casino_Lodging_Module_IsOn = 3281851354;
simcity.kResourceIDHQ_Casino_Entertainment_Module_Built = 2053805237;
simcity.kResourceIDHQ_Casino_Entertainment_Module_IsOn = 1204202580;
simcity.kResourceIDHQ_Casino_Games_Module_Built = 70477528;
simcity.kResourceIDHQ_Casino_Games_Module_IsOn = 1866332371;
simcity.kResourceIDHQ_Electronics_Built = 774789393;
simcity.kResourceIDHQ_Electronics_IsOn = 3482168784;
simcity.kResourceIDHQ_Electronics_Level = 1991765023;
simcity.kResourceIDHQ_Electronics_Unlocked = 1778306596;
simcity.kResourceIDHQ_Electronics_Commerce_Module_IsOn = 2888719063;
simcity.kResourceIDHQ_Electronics_Commerce_Module_Research = 1181200179;
simcity.kResourceIDHQ_Mining_Built = 807978098;
simcity.kResourceIDHQ_Mining_Engineering_Module_Built = 807139023;
simcity.kResourceIDHQ_Mining_Engineering_Module_IsOn = 1864210834;
simcity.kResourceIDHQ_Mining_IsOn = 2404523369;
simcity.kResourceIDHQ_Mining_Level = 1241938196;
simcity.kResourceIDHQ_Mining_OpenModules = 1481364521;
simcity.kResourceIDHQ_Mining_Unlocked = 2834921353;
simcity.kResourceIDHQ_Mining_RnD_Module_Built = 1769969216;
simcity.kResourceIDHQ_Mining_RnD_Module_IsOn = 270866715;
simcity.kResourceIDHQ_Mining_Commerce_Module_IsOn = 65493878;
simcity.kResourceIDHQ_Mining_Commerce_Module_Research = 2201476014;
simcity.kResourceIDHQ_Oil_Built = 1520361480;
simcity.kResourceIDHQ_Oil_IsOn = 3689231555;
simcity.kResourceIDHQ_Oil_Level = 758417306;
simcity.kResourceIDHQ_Oil_Commerce_Module_Unlocked = 1358679104;
simcity.kResourceIDHQ_Oil_Commerce_Module_Built = 48883837;
simcity.kResourceIDHQ_Oil_Commerce_Module_IsOn = 2036406780;
simcity.kResourceIDHQ_Oil_RnD_Module_Unlocked = 3166522173;
simcity.kResourceIDHQ_Oil_RnD_Module_Built = 3481692070;
simcity.kResourceIDHQ_Oil_RnD_Module_IsOn = 4080881245;
simcity.kResourceIDHQ_Oil_Unlocked = 2163490343;
simcity.kResourceIDHQ_Oil_OpenModules = 705374171;
simcity.kResourceIDHQ_ToNextLevel = 2469558203;
simcity.kResourceIDHQ_Trade_Built = 1286867258;
simcity.kResourceIDHQ_Trade_IsOn = 2741599409;
simcity.kResourceIDHQ_Trade_Level = 628386428;
simcity.kResourceIDHQ_Trade_Unlocked = 4100184705;
simcity.kResourceIDHQ_Trade_Metals_Module_Built = 117239308;
simcity.kResourceIDHQ_Trade_Electronics_Module_Built = 3463127895;
simcity.kResourceIDHQ_Trade_Petroleum_Module_Built = 3016663867;
simcity.kResourceIDHQ_University_Level = 883876420;
simcity.kResourceIDHQProgress = 3872971773;
simcity.kResourceIDNumberOfCasinoHQs = 607521748;
simcity.kResourceIDNumberOfCoalHQs = 4228689212;
simcity.kResourceIDNumberOfElectronicHQs = 2711220345;
simcity.kResourceIDNumberOfOilHQs = 1740971601;
simcity.kResourceIDNumberOfTradeHQs = 895967779;
simcity.kResourceIDTradeProfit = 213949715;
simcity.kResourceIDPetroleumSpecialtyLastMonthExpenses = 3316849439;
simcity.kResourceIDPetroleumSpecialtyLastMonthIncome = 2347321209;
simcity.kResourceIDMetalSpecialtyLastMonthExpenses = 80837591;
simcity.kResourceIDMetalSpecialtyLastMonthIncome = 356722737;
simcity.kResourceIDCasinoSpecialtyLastMonthExpenses = 2430600245;
simcity.kResourceIDCasinoSpecialtyLastMonthIncome = 3459385487;
simcity.kResourceIDTradeSpecialtyLastMonthExpenses = 1243707180;
simcity.kResourceIDTradeSpecialtyLastMonthIncome = 3013519842;
simcity.kResourceIDElectronicsSpecialtyLastMonthExpenses = 3907693495;
simcity.kResourceIDElectronicsSpecialtyLastMonthIncome = 28682513;
simcity.kResourceIDCoalCurrentMonthExpenses = 2921692E3;
simcity.kResourceIDCoalCurrentMonthIncome = 1452627382;
simcity.kResourceIDCoalLastMonthExpenses = 1681626433;
simcity.kResourceIDCoalLastMonthIncome = 4192487899;
simcity.kResourceIDAlloyCurrentMonthExpenses = 2399186110;
simcity.kResourceIDAlloyCurrentMonthIncome = 842523988;
simcity.kResourceIDAlloyLastMonthExpenses = 3638289559;
simcity.kResourceIDAlloyLastMonthIncome = 1712427249;
simcity.kResourceIDMetalCurrentMonthExpenses = 3218139750;
simcity.kResourceIDMetalCurrentMonthIncome = 454232732;
simcity.kResourceIDMetalLastMonthExpenses = 3203427855;
simcity.kResourceIDMetalLastMonthIncome = 963041001;
simcity.kResourceIDOreRawCurrentMonthExpenses = 3812552491;
simcity.kResourceIDOreRawCurrentMonthIncome = 3041755525;
simcity.kResourceIDOreRawLastMonthExpenses = 2880748248;
simcity.kResourceIDOreRawLastMonthIncome = 2182177486;
simcity.kResourceIDElectronicsCurrentMonthExpenses = 2366096966;
simcity.kResourceIDElectronicsCurrentMonthIncome = 1731900540;
simcity.kResourceIDElectronicsLastMonthExpenses = 457310063;
simcity.kResourceIDElectronicsLastMonthIncome = 4163058761;
simcity.kResourceIDComputerCurrentMonthExpenses = 582100306;
simcity.kResourceIDComputerCurrentMonthIncome = 3585213976;
simcity.kResourceIDComputerLastMonthExpenses = 3472923235;
simcity.kResourceIDComputerLastMonthIncome = 1157810269;
simcity.kResourceIDTelevisionCurrentMonthExpenses = 3506944737;
simcity.kResourceIDTelevisionCurrentMonthIncome = 2323742331;
simcity.kResourceIDTelevisionLastMonthExpenses = 948712822;
simcity.kResourceIDTelevisionLastMonthIncome = 1397635820;
simcity.kResourceIDFuelCurrentMonthExpenses = 1826395497;
simcity.kResourceIDFuelCurrentMonthIncome = 160139075;
simcity.kResourceIDFuelLastMonthExpenses = 4143470734;
simcity.kResourceIDFuelLastMonthIncome = 1634528164;
simcity.kResourceIDOilCrudeCurrentMonthExpenses = 1036181E3;
simcity.kResourceIDOilCrudeCurrentMonthIncome = 3138058174;
simcity.kResourceIDOilCrudeLastMonthExpenses = 1552819769;
simcity.kResourceIDOilCrudeLastMonthIncome = 3556726419;
simcity.kResourceIDPlasticCurrentMonthExpenses = 1009064015;
simcity.kResourceIDPlasticCurrentMonthIncome = 3015200553;
simcity.kResourceIDPlasticLastMonthExpenses = 2854376420;
simcity.kResourceIDPlasticLastMonthIncome = 906443514;
simcity.kResourceIDTotalIncomeFromTradingGlobalMarketOilCrude = 2346200051;
simcity.kResourceIDTotalIncomeFromTradingGlobalMarketFuel = 3703390122;
simcity.kResourceIDTotalIncomeFromTradingGlobalMarketPlastic = 3620347846;
simcity.kResourceIDCasinoSpecialtyCurrentMonthExpenses = 1038792412;
simcity.kResourceIDCasinoSpecialtyCurrentMonthIncome = 2780020242;
simcity.kResourceIDPetroleumSpecialtyCurrentMonthExpenses = 2744613334;
simcity.kResourceIDPetroleumSpecialtyCurrentMonthIncome = 2620260684;
simcity.kResourceIDMetalSpecialtyCurrentMonthProfit = 3689720695;
simcity.kResourceIDPetroleumSpecialtyCurrentMonthProfit = 3070779183;
simcity.kResourceIDTradeSpecialtyCurrentMonthProfit = 88035854;
simcity.kResourceIDCasinoSpecialtyCurrentMonthProfit = 3736548709;
simcity.kResourceIDElectronicsSpecialtyCurrentMonthProfit = 93660119;
simcity.kResourceIDTotalElectronicsAssembled = 754698314;
simcity.kResourceIDTotalElectronicsAssembledPerDay = 4074522583;
simcity.kResourceIDTotalComputerAssembled = 1607469238;
simcity.kResourceIDNumT1ElectronicsBase = 317920080;
simcity.kResourceIDNumT2ElectronicsBase = 3776200817;
simcity.kResourceIDGlobalMission_MSManufacturingElectronicsHQToLevel2 = 688534268;
simcity.kResourceIDGlobalMission_MSManufacturingElectronicsHQToLevel3 = 688534269;
simcity.kResourceIDNumberOfElectronicHQsConsumerElectronicsWings = 3365789182;
simcity.kResourceIDTotalIncomeFromAllElectronics = 2179650798;
simcity.kResourceIDComputerResearched = 2286945710;
simcity.kResourceIDIncomeFromGlobalMarketExport = 4021347991;
simcity.kResourceIDExpensesFromGlobalMarketImport = 1064686572;
simcity.kResourceIDIncomeHour1 = 744339083;
simcity.kResourceIDIncomeHour2 = 744339080;
simcity.kResourceIDIncomeHour3 = 744339081;
simcity.kResourceIDIncomeHour4 = 744339086;
simcity.kResourceIDIncomeHourTotal = 3714334268;
simcity.kResourceIDExpenseHour1 = 2189616222;
simcity.kResourceIDExpenseHour2 = 2189616221;
simcity.kResourceIDExpenseHour3 = 2189616220;
simcity.kResourceIDExpenseHour4 = 2189616219;
simcity.kResourceIDExpenseHourTotal = 2805098989;
simcity.kResourceIDTotalGlobalMarketExports = 729977193;
simcity.kResourceIDTotalGlobalMarketImports = 1384651186;
simcity.kResourceIDGlobalMarketImportSwitchAlloy = 4224828296;
simcity.kResourceIDGlobalMarketImportSwitchElectronics = 3434348548;
simcity.kResourceIDGlobalMarketImportSwitchComputer = 3727230280;
simcity.kResourceIDGlobalMarketImportSwitchTelevision = 1056961867;
simcity.kResourceIDGlobalMarketImportSwitchFuel = 144585119;
simcity.kResourceIDGlobalMarketImportSwitchMetal = 2471576692;
simcity.kResourceIDGlobalMarketImportSwitchPlastic = 4260496497;
simcity.kResourceIDGlobalMarketImportSwitchOilCrude = 20346938;
simcity.kResourceIDGlobalMarketImportSwitchOreRaw = 842143745;
simcity.kResourceIDGlobalMarketImportSwitchCoal = 1489698110;
simcity.kResourceIDGlobalMarketStorageSwitchAlloy = 3365791684;
simcity.kResourceIDGlobalMarketStorageSwitchElectronics = 1236727784;
simcity.kResourceIDGlobalMarketStorageSwitchComputer = 3053139836;
simcity.kResourceIDGlobalMarketStorageSwitchTelevision = 1279020655;
simcity.kResourceIDGlobalMarketStorageSwitchFuel = 3301552283;
simcity.kResourceIDGlobalMarketStorageSwitchMetal = 1057103032;
simcity.kResourceIDGlobalMarketStorageSwitchPlastic = 547860597;
simcity.kResourceIDGlobalMarketStorageSwitchOilCrude = 3332397918;
simcity.kResourceIDGlobalMarketStorageSwitchOreRaw = 1520358885;
simcity.kResourceIDGlobalMarketStorageSwitchCoal = 3010361306;
simcity.kResourceIDIncomeFromTradingGlobalMarketAlloy = 3296841271;
simcity.kResourceIDIncomeFromTradingGlobalMarketElectronics = 2815455543;
simcity.kResourceIDIncomeFromTradingGlobalMarketComputer = 4050197593;
simcity.kResourceIDIncomeFromTradingGlobalMarketTelevision = 3133188882;
simcity.kResourceIDIncomeFromTradingGlobalMarketFuel = 1601735906;
simcity.kResourceIDIncomeFromTradingGlobalMarketMetal = 1514453991;
simcity.kResourceIDIncomeFromTradingGlobalMarketPlastic = 2949038590;
simcity.kResourceIDIncomeFromTradingGlobalMarketOilCrude = 988882987;
simcity.kResourceIDIncomeFromTradingGlobalMarketOreRaw = 885886012;
simcity.kResourceIDIncomeFromTradingGlobalMarketCoal = 1217290815;
simcity.kResourceIDTotalMoneyExchangedFromTradingGlobalMarket = 1873396370;
simcity.kResourceIDCoalSold = 1289744514;
simcity.kResourceIDCoalSoldPerPeriod = 322831452;
simcity.kResourceIDCoalBought = 836545701;
simcity.kResourceIDCoalBoughtPerPeriod = 1210340541;
simcity.kResourceIDAlloySold = 2613848908;
simcity.kResourceIDAlloySoldPerPeriod = 3883725686;
simcity.kResourceIDAlloyBought = 1214303675;
simcity.kResourceIDAlloyBoughtPerPeriod = 1556699003;
simcity.kResourceIDMetalSold = 2234819268;
simcity.kResourceIDMetalSoldPerPeriod = 1344373566;
simcity.kResourceIDMetalBought = 2737937747;
simcity.kResourceIDMetalBoughtPerPeriod = 3874560195;
simcity.kResourceIDOreRawSold = 3793654149;
simcity.kResourceIDOreRawSoldPerPeriod = 3141343773;
simcity.kResourceIDOreRawBought = 3848335530;
simcity.kResourceIDOreRawBoughtPerPeriod = 2754655540;
simcity.kResourceIDElectronicsSold = 2390706852;
simcity.kResourceIDElectronicsSoldPerPeriod = 1053192094;
simcity.kResourceIDElectronicsBought = 1027977523;
simcity.kResourceIDElectronicsBoughtPerPeriod = 2773559587;
simcity.kResourceIDComputerSold = 3419353448;
simcity.kResourceIDComputerSoldPerPeriod = 3947957066;
simcity.kResourceIDComputerBought = 478960287;
simcity.kResourceIDComputerBoughtPerPeriod = 3304704087;
simcity.kResourceIDTelevisionSold = 176736575;
simcity.kResourceIDTelevisionSoldPerPeriod = 370171767;
simcity.kResourceIDTelevisionBought = 3092291664;
simcity.kResourceIDTelevisionBoughtPerPeriod = 1269655234;
simcity.kResourceIDFuelSold = 181280567;
simcity.kResourceIDFuelSoldPerPeriod = 1530185407;
simcity.kResourceIDFuelBought = 1265611144;
simcity.kResourceIDFuelBoughtPerPeriod = 3387304938;
simcity.kResourceIDOilCrudeSold = 1495594842;
simcity.kResourceIDOilCrudeSoldPerPeriod = 280688644;
simcity.kResourceIDOilCrudeBought = 441274909;
simcity.kResourceIDOilCrudeBoughtPerPeriod = 3896682533;
simcity.kResourceIDPlasticSold = 2342355633;
simcity.kResourceIDPlasticSoldPerPeriod = 3678074289;
simcity.kResourceIDPlasticBought = 636160846;
simcity.kResourceIDPlasticBoughtPerPeriod = 2192732304;
simcity.kResourceIDNumberOfGlobalMarketTruckTripsToday = 1963788054;
simcity.kResourceIDNumberOfGlobalMarketTruckTripsYesterday = 3595790465;
simcity.kResourceIDNumberOfGlobalMarketRailTripsToday = 2234775599;
simcity.kResourceIDNumberOfGlobalMarketRailTripsYesterday = 928297696;
simcity.kResourceIDNumberOfGlobalMarketBoatTripsToday = 3814481661;
simcity.kResourceIDNumberOfGlobalMarketBoatTripsYesterday = 4020012186;
simcity.kResourceIDNumImEx = 2664258250;
simcity.kResourceIDNumImExT2 = 1024576012;
simcity.kResourceIDNumImExT2Rail = 1006493788;
simcity.kResourceIDNumImExT2Boat = 1349457222;
simcity.kResourceIDNumImExElectronicsLots = 1045200723;
simcity.kResourceIDNumImExTelevisionLots = 761894654;
simcity.kResourceIDNumImExComputerLots = 1336216629;
simcity.kResourceIDNumImExCoalLots = 3317445643;
simcity.kResourceIDNumImExMetalLots = 1479508515;
simcity.kResourceIDNumImExPlasticLots = 2577842514;
simcity.kResourceIDNumImExOreRawLots = 293196472;
simcity.kResourceIDNumImExAlloyLots = 38956339;
simcity.kResourceIDNumImExFuelLots = 3312101774;
simcity.kResourceIDNumImExOilCrudeLots = 3837091327;
simcity.kResourceIDNumberOfImExModulesRail = 3281121023;
simcity.kResourceIDNumberOfImExModulesBoat = 2897963837;
simcity.kResourceIDNumberOfImExModulesGarage = 2468342864;
simcity.kResourceIDNumImExUniqueLots = 1278363743;
simcity.kResourceIDPower = 2391494160;
simcity.kResourceIDPowerToTransmit = 1970301135;
simcity.kResourceIDPowerToTransmit_Last = 3380970990;
simcity.kResourceIDPowerToSend = 3989257529;
simcity.kResourceIDPowerGlobals_NumberOfPowerPlants = 2606261736;
simcity.kResourceIDActivePowerModules = 2173889837;
simcity.kResourceIDPowerGlobals_UnpoweredBuildings = 3073328857;
simcity.kResourceIDPowerGlobals_NumberOfPowerConsumers = 2364168533;
simcity.kResourceIDPowerGlobals_TotalPowerTransmitted = 1378387405;
simcity.kResourceIDPowerGlobals_TotalPowerWasted = 1879271684;
simcity.kResourceIDPowerGlobals_TotalPowerTransmittedPerHour = 416922972;
simcity.kResourceIDPowerGlobals_TotalPowerWastedPerHour = 3629553167;
simcity.kResourceIDPowerGlobals_TotalPowerConsumedPerHour = 522916859;
simcity.kResourceIDPowerNeeded = 2285470215;
simcity.kResourceIDPowerSaved = 2314828681;
simcity.kResourcePowerProduction = 1052088121;
simcity.kResourceIDTradeImportedPowerCounter = 3167536464;
simcity.kResourceIDTradeExcessPower = 1849174591;
simcity.kResourceIDTradePowerUsedProfit = 1886172729;
simcity.kResourceIDTradePowerAvailableFromConnection = 1615260137;
simcity.kResourceIDWindSpeed = 1726592700;
simcity.kResourceIDWindDirection = 825623898;
simcity.kResourceIDEnvTemperature = 899752953;
simcity.kResourceIDEnvNumActiveRainStorm = 6230968;
simcity.kResourceIDEnvNumClouds = 3464232719;
simcity.kResourceIDEnvAirPollutionPerHour = 295846734;
simcity.kResourceIDPower_NumberOfWindFarms = 2986464513;
simcity.kResourceIDPower_NumberOfWindTurbines = 2986464513;
simcity.kResourceIDPower_NumberOfWindBatteries = 1593228548;
simcity.kResourceIDPower_NumberOfT1CoalPowerPlants = 158526204;
simcity.kResourceIDPower_NumberOfT2CoalPowerPlants = 2579340361;
simcity.kResourceIDPower_NumberOfT1OilPowerPlants = 2661237096;
simcity.kResourceIDPower_NumberOfSolarUnits = 4071541271;
simcity.kResourceIDPower_NumberOfSolarPlants = 3877125076;
simcity.kResourceIDPower_NumberOfNuclearPowerPlants = 733601808;
simcity.kResourceIDPower_SolarBatteryUnlocked = 341175594;
simcity.kResourceIDPower_NumberOfSolarBatteries = 3667278425;
simcity.kResourceIDSolarAnimBin = 3898125546;
simcity.kResourceIDPower_Nuclear_Unlocked = 3268602197;
simcity.kResourceIDPower_Nuclear_Level2_Unlocked = 3856162070;
simcity.kResourceIDPower_Nuclear_Level3_Unlocked = 3499159141;
simcity.kResourceIDGlobal_TotalCoalBurned = 4249582378;
simcity.kResourceIDGlobal_TotalCoalRemainingAtPowerStations = 717843307;
simcity.kResourceIDLowCoalLevel = 30052478;
simcity.kResourceIDOutOfCoal = 3556542897;
simcity.kResourceIDStoredPower = 390684623;
simcity.kResourceIDPowerGlobals_TotalSolarPowerPerHour = 3227733056;
simcity.kResourceIDPowerGlobals_TotalCoalPowerPerHour = 1467018548;
simcity.kResourceIDPowerGlobals_TotalOilCrudePowerPerHour = 79984296;
simcity.kResourceIDPowerGlobals_TotalWindPowerPerHour = 3668962503;
simcity.kResourceIDPowerGlobals_TotalNuclearPowerPerHour = 3403938237;
simcity.kResourceIDPeakPower = 1164171395;
simcity.kResourceIDWater_Unlocked = 977057198;
simcity.kResourceIDGerms = 2069247941;
simcity.kResourceIDGermsInPump = 2419540322;
simcity.kResourceIDGermsInPumpPossible = 2743111863;
simcity.kResourceIDHabitableBuilding = 3439906669;
simcity.kResourceIDWater = 2654748154;
simcity.kResourceIDWaterToTransmit = 2079986297;
simcity.kResourceIDWaterInMap = 1087599423;
simcity.kResourceIDTradeImportedWaterCounter = 242951582;
simcity.kResourceIDTradeWaterAvailableFromConnection = 1141470647;
simcity.kResourceIDWaterConsumer_Category = 201972339;
simcity.kResourceIDWaterGlobals_TotalWaterReverted = 2428674279;
simcity.kResourceIDWaterGlobals_TotalWaterRevertedPerHour = 746424382;
simcity.kResourceIDWaterGlobals_TotalFilteredWaterReverted = 415590524;
simcity.kResourceIDWaterGlobals_TotalFilteredWaterRevertedPerHour = 842461623;
simcity.kResourceIDWaterGlobals_TotalWaterTransmitted = 1662655973;
simcity.kResourceIDWaterGlobals_TotalWaterTransmittedPerHour = 1194734180;
simcity.kResourceIDWaterGlobals_TotalFilteredWaterTransmitted = 1920891692;
simcity.kResourceIDWaterGlobals_TotalFilteredWaterTransmittedPerHour = 4120791367;
simcity.kResourceIDWaterGlobals_TotalPollutionTransmitted = 3148278792;
simcity.kResourceIDWaterGlobals_UnwateredBuildings = 4014979477;
simcity.kResourceIDWaterGlobals_NumberOfWaterConsumers = 760220921;
simcity.kResourceIDWaterGlobals_MostGermsInOnePump = 2124847579;
simcity.kResourceIDWaterNeeded = 3460700677;
simcity.kResourceIDWaterSaved = 4146722191;
simcity.kResourceIDTradeExcessWater = 3864099713;
simcity.kResourceIDTradeWaterUsedProfit = 3174198451;
simcity.kResourceIDWaterGlobals_TotalWaterConsumed = 2761144568;
simcity.kResourceIDWaterProduction = 2869873311;
simcity.kResourceIDWaterGlobals_TotalWaterConsumedPerHour = 1447027699;
simcity.kResourceIDWaterGlobals_NumberOfWaterPlants = 2577063972;
simcity.kResourceIDWaterGlobals_NumberOfT1WaterPlants = 2696220259;
simcity.kResourceIDWaterGlobals_NumberOfT2WaterPlants = 2148514006;
simcity.kResourceIDWaterTableLow = 3951760264;
simcity.kResourceIDWaterTableDry = 4000710265;
simcity.kResourceIDWaterPolluted = 764394837;
simcity.kResourceIDWaterMin = 728390398;
simcity.kResourceIDWaterGlobals_TotalGermsTransmitted = 662584172;
simcity.kResourceIDWaterGlobals_TotalGermsTransmittedPerHour = 2236897159;
simcity.kResourceIDWaterGlobals_TotalGermsPossiblePerHour = 4031991483;
simcity.kResourceIDPumpingFromRiver = 1824026097;
simcity.kResourceIDSewage = 3441286197;
simcity.kResourceIDSewagePlants = 2844137639;
simcity.kResourceIDSewagePlants_T1 = 2401586943;
simcity.kResourceIDSewagePlants_T2 = 2401586940;
simcity.kResourceIDSewageDumped_PerHour = 3275514806;
simcity.kResourceIDSewageDumped_ThisHour = 83798609;
simcity.kResourceIDSewageProcessedDisplay = 1907491887;
simcity.kResourceIDSewageProcessed_PerHour = 3953690037;
simcity.kResourceIDSewageProcessed_ThisHour = 1636384468;
simcity.kResourceIDSewageTransmitted_PerHour = 4169697046;
simcity.kResourceIDSewageTransmitted_ThisHour = 2212327217;
simcity.kResourceIDSewageTreatedDisplay = 2661322162;
simcity.kResourceIDSewageTreated_PerHour = 3675392238;
simcity.kResourceIDSewageTreated_ThisHour = 451772505;
simcity.kResourceIDSewageMainStorage = 3138363369;
simcity.kResourceIDSewageMainStorage_ThisHour = 1283293498;
simcity.kResourceIDSewageMainStorage_Last = 1773973540;
simcity.kResourceIDSewageMainStorage_Full = 2761963643;
simcity.kResourceIDSewageTreatment_Capacity = 1152457658;
simcity.kResourceIDTradeSewageUsed = 719096374;
simcity.kResourceIDTradeExcessSewageExportAllowed = 3225371826;
simcity.kResourceIDTradeSewageExportAllowedUsed = 1401034738;
simcity.kResourceIDTradeSewageExportAllowedUsedToSendFromBefore = 1735744194;
simcity.kResourceIDSewageTreatmentImportExchangeRate = 3282197541;
simcity.kResourceIDTradeSewageExportAllowedUsedProfit = 4000070540;
simcity.kResourceIDSewageExportAllowed = 1373910137;
simcity.kResourceIDSewageExportAllowedToTransmit = 755822166;
simcity.kResourceIDTradeSewageExportAllowedAvailableFromConnection = 1795085242;
simcity.kResourceIDRoomsOccupied = 3654708327;
simcity.kResourceIDRoomsFree = 2429027557;
simcity.kResourceIDSick = 721332855;
simcity.kResourceIDSickW1 = 3416150199;
simcity.kResourceIDSickW2 = 3416150196;
simcity.kResourceIDSickW3 = 3416150197;
simcity.kResourceIDSickHouses = 2060601528;
simcity.kResourceIDInjury = 100017236;
simcity.kResourceIDInjuryW1 = 2397898272;
simcity.kResourceIDInjuryW2 = 2397898275;
simcity.kResourceIDInjuryW3 = 2397898274;
simcity.kResourceIDDeath = 779278001;
simcity.kResourceIDDeathPerDay = 4130414096;
simcity.kResourceIDDeathFromInjury = 2183338900;
simcity.kResourceIDDeathFromInjuryPerDay = 2201818245;
simcity.kResourceIDAmbulance = 3809484581;
simcity.kResourceIDAmbulanceSuccesses = 2622519670;
simcity.kResourceIDSickHealingW1 = 301986399;
simcity.kResourceIDSickHealingW2 = 301986396;
simcity.kResourceIDSickHealingW3 = 301986397;
simcity.kResourceIDSickWaiting = 3896854408;
simcity.kResourceIDSickWaitingW1 = 1586605964;
simcity.kResourceIDSickWaitingW2 = 1586605967;
simcity.kResourceIDSickWaitingW3 = 1586605966;
simcity.kResourceIDInjuryHealingW1 = 2176436982;
simcity.kResourceIDInjuryHealingW2 = 2176436981;
simcity.kResourceIDInjuryHealingW3 = 2176436980;
simcity.kResourceIDInjuryWaiting = 3825955281;
simcity.kResourceIDInjuryWaitingW1 = 1469184685;
simcity.kResourceIDInjuryWaitingW2 = 1469184686;
simcity.kResourceIDInjuryWaitingW3 = 1469184687;
simcity.kResourceIDWaitingRoom = 688112595;
simcity.kResourceIDHospitalsBuilt = 2514784742;
simcity.kResourceIDT1HospitalsBuilt = 240239751;
simcity.kResourceIDT2HospitalsBuilt = 3484217500;
simcity.kResourceIDHospitalGaragesBuilt = 1141362145;
simcity.kResourceIDWaitingRoomIsFull = 534885744;
simcity.kResourceIDWaitingRoomIsAlmostFull = 2987146474;
simcity.kResourceIDTotalSickTreated = 2194328826;
simcity.kResourceIDTotalInjuryTreated = 2712725895;
simcity.kResourceIDNeighborRoomsOccupied = 4020159333;
simcity.kResourceIDNeighborHospitalRooms = 2551666427;
simcity.kResourceIDHospitalRooms = 255679233;
simcity.kResourceIDSickHealing = 2748482431;
simcity.kResourceIDInjuryHealing = 2788082702;
simcity.kResourceIDSurgeryCenterUnlocked = 2507958630;
simcity.kResourceIDSickGlobal = 2698308234;
simcity.kResourceIDSickGlobal_PerDay = 3336377824;
simcity.kResourceIDInjuryGlobal = 1670060833;
simcity.kResourceIDInjuryGlobal_PerDay = 393869773;
simcity.kResourceIDSickHealed = 31969966;
simcity.kResourceIDSickHealedDisplay = 2487810256;
simcity.kResourceIDSickHealed_PerDay = 3547645092;
simcity.kResourceIDSickToInjured = 571110619;
simcity.kResourceIDSickToInjured_PerDay = 2403448379;
simcity.kResourceIDSickToNormal = 1409835085;
simcity.kResourceIDSickToNormal_PerDay = 3574097577;
simcity.kResourceIDInjuryHealed = 1803074941;
simcity.kResourceIDInjuryHealedDisplay = 1874156469;
simcity.kResourceIDInjuryHealed_PerDay = 581291193;
simcity.kResourceIDMeltdown_TimerImminent = 3573132440;
simcity.kResourceIDDisasterMeltdown_InProgress = 2565106093;
simcity.kResourceIDDisasterMeltdown_HadMeltdown = 1328915890;
simcity.kResourceIDDisasterMeltdown_Recent = 941446812;
simcity.kResourceIDDisasterMeltdown_TimerRecentMeltdown = 2337119395;
simcity.kResourceIDNuclearReactor_LowSkill = 1322853549;
simcity.kResourceIDNuclearReactor_MediumSkill = 1114403040;
simcity.kResourceIDSlacker = 417810726;
simcity.kResourceIDHomeless = 1134006559;
simcity.kResourceIDHomelessForaging = 2828460396;
simcity.kResourceIDHomelessPanhandling = 1884585487;
simcity.kResourceIDHomelessSleeping = 4070836136;
simcity.kResourceIDHomelessPerPeriod = 293503959;
simcity.kResourceIDHomelessThisPeriod = 1285724032;
simcity.kResourceIDHomelessDisplay = 3680114479;
simcity.kResourceIDHomelessDead = 1721735285;
simcity.kResourceIDNumberOfBuildingsBurnedDown = 3599668696;
simcity.kResourceIDNumberOfBuildingsBurnedDownPerDay = 1364884217;
simcity.kResourceIDNumberOfFiresExtinguishedDisplay = 3888681899;
simcity.kResourceIDNumberOfFiresExtinguished = 4249512003;
simcity.kResourceIDNumberOfFiresExtinguishedPerDay = 3560249318;
simcity.kResourceIDIsBurning = 2018489714;
simcity.kResourceIDIsSmoking = 1411913709;
simcity.kResourceIDNumberOfFires = 628314840;
simcity.kResourceIDNumberOfHazMatFires = 2100610503;
simcity.kResourceIDNumberOfGarages = 531821913;
simcity.kResourceIDHazMatFireTrucksAvailable = 251332573;
simcity.kResourceIDNumberOfConnectedFlagPoles = 1526740117;
simcity.kResourceIDNumberOfConnectedSigns = 1608206460;
simcity.kResourceIDNumberOfFireDispatchModules = 2710077002;
simcity.kResourceIDT2FireStationUnlocked = 145258902;
simcity.kResourceIDMissionFireCost = 3313367558;
simcity.kResourceIDFireTradeToken = 3703805660;
simcity.kResourceIDAmountOfRubble = 4182034904;
simcity.kResourceIDAmountOfAbandoned = 2117976370;
simcity.kResourceIDFireRisk = 2645400692;
simcity.kResourceIDFlammableBuilding = 392496542;
simcity.kResourceIDFirefighter = 408865432;
simcity.kResourceIDNumberOfFireStations = 3713431570;
simcity.kResourceIDNumberOfT2FireStations = 1419205672;
simcity.kResourceIDNumberOfT1FireStations = 282350843;
simcity.kResourceIDHazmatGarageUnlocked = 2403112628;
simcity.kResourceIDHeat = 3448274455;
simcity.kResourceIDFireFuel = 1881207573;
simcity.kResourceIDFireLevel = 2458181481;
simcity.kResourceIDNumberOfHazMatFiresStarted = 1311069994;
simcity.kResourceIDNumberOfHazMatFiresStartedPerDay = 3046939575;
simcity.kResourceIDNumberOfHazMatFiresExtinguishedDisplay = 4224550078;
simcity.kResourceIDNumberOfHazMatFiresExtinguished = 3125239420;
simcity.kResourceIDNumberOfHazMatFiresExtinguishedPerDay = 1349067133;
simcity.kResourceIDFireHelicopter = 237357014;
simcity.kResourceIDHazMatTruck = 1664109457;
simcity.kResourceIDKid = 1115957451;
simcity.kResourceIDKidE2 = 440145198;
simcity.kResourceIDKidE3 = 440145199;
simcity.kResourceIDStudent = 740139282;
simcity.kResourceIDEducatedAtModule = 704127089;
simcity.kResourceIDKnowledgeToken = 2286658974;
simcity.kResourceIDStudentTokenE2 = 2520886016;
simcity.kResourceIDStudentTokenE3 = 2520886017;
simcity.kResourceIDSpotsForKids = 98217382;
simcity.kResourceIDSpotsForKidsE2 = 2176723623;
simcity.kResourceIDSpotsForKidsE3 = 2176723622;
simcity.kResourceIDSpotsForKidsE2Yesterday = 3491541885;
simcity.kResourceIDSpotsForKidsE3Yesterday = 49613830;
simcity.kResourceIDOverCrowding = 346657110;
simcity.kResourceIDKnowledgeLevel = 3636108215;
simcity.kResourceIDSkillLevelE2 = 3809638447;
simcity.kResourceIDKnowledgeLevelE2 = 2402132834;
simcity.kResourceIDEducationLevel = 232759661;
simcity.kResourceIDPreviouslyEducated = 3564237080;
simcity.kResourceIDStudentE2 = 34434427;
simcity.kResourceIDTradeExcessStudentE2 = 1893297692;
simcity.kResourceIDStudentStudyingE2 = 3473635378;
simcity.kResourceIDSkillLevel = 1501738158;
simcity.kResourceIDSkillLevelE3 = 3809638446;
simcity.kResourceIDKnowledgeLevelE3 = 2402132835;
simcity.kResourceIDStudentE3 = 34434426;
simcity.kResourceIDTradeExcessStudentE3 = 1893297693;
simcity.kResourceIDStudentStudyingE3 = 3473635379;
simcity.kResourceIDStudentToLeave = 2094443002;
simcity.kResourceIDSkillTokenE2 = 3879054254;
simcity.kResourceIDSkillTokenE3 = 3879054255;
simcity.kResourceIDResearch = 3895945778;
simcity.kResourceIDResearchNeeded = 866952621;
simcity.kResourceIDChoseNotToBeACriminal = 1941242284;
simcity.kResourceIDDidntGetSick = 2902165652;
simcity.kResourceIDStudentsNeeded_00 = 1197110181;
simcity.kResourceIDStudentsNeeded_03 = 1197110182;
simcity.kResourceIDStudentsNeeded_06 = 1197110179;
simcity.kResourceIDStudentsNeeded_09 = 1197110188;
simcity.kResourceIDStudentsNeeded_12 = 1180332592;
simcity.kResourceIDStudentsNeeded_15 = 1180332599;
simcity.kResourceIDStudentsNeeded_18 = 1180332602;
simcity.kResourceIDStudentsNeeded_21 = 1163554910;
simcity.kResourceIDLowSkill = 3015282364;
simcity.kResourceIDPower_SolarAdvanced_Unlocked = 3081991888;
simcity.kResourceIDPowerGlobals_LargeTurbine_Unlocked = 3621586015;
simcity.kResourceIDPower_Coal_Level3_Unlocked = 1492467248;
simcity.kResourceIDPower_OilCrude_Level3_Unlocked = 1957988;
simcity.kResourceIDNumberOfUniversities = 1083498385;
simcity.kResourceIDNumberOfGradeSchoolBases = 3887711568;
simcity.kResourceIDNumberOfGradeSchoolClassrooms = 1268332486;
simcity.kResourceIDNumberOfGradeSchoolLots = 3270524974;
simcity.kResourceIDNumberOfGradeSchoolBusStops = 1006854443;
simcity.kResourceIDNumberOfHighSchoolBases = 917921497;
simcity.kResourceIDNumberOfHighSchoolLots = 95643033;
simcity.kResourceIDNumberOfHighSchoolWings = 3367215595;
simcity.kResourceIDNumberOfHighSchoolGyms = 1605020049;
simcity.kResourceIDNumberOfCollegeBases = 2107386330;
simcity.kResourceIDNumberOfCollegeWings = 4269697596;
simcity.kResourceIDNumberOfAthleticsWings = 3121219368;
simcity.kResourceIDNumberOfBusinessWings = 4097152405;
simcity.kResourceIDNumberOfEducationWings = 2306587915;
simcity.kResourceIDNumberOfEngineeringWings = 1380060006;
simcity.kResourceIDNumberOfLawWings = 806951873;
simcity.kResourceIDNumberOfMedicineWings = 1594127707;
simcity.kResourceIDNumberOfScienceWings = 398637047;
simcity.kResourceIDNumberOfDormWings = 704863715;
simcity.kResourceIDT1GradeSchoolLotUnlocked = 2579792801;
simcity.kResourceIDSchoolBusT1StopUnlocked = 2406422179;
simcity.kResourceIDT1CollegeBaseUnlocked = 2789753771;
simcity.kResourceIDT2HighSchoolBaseUnlocked = 100759655;
simcity.kResourceIDT2UniversityBaseUnlocked = 1375519319;
simcity.kResourceIDExamsPassedE2 = 162463022;
simcity.kResourceIDExamsPassedE3 = 162463023;
simcity.kResourceIDUniversityStudents = 2343050577;
simcity.kResourceIDExamsPassedTodayE2 = 4067506367;
simcity.kResourceIDExamsPassedTodayE3 = 4067506366;
simcity.kResourceIDExamsPassedYesterdayE2 = 699705304;
simcity.kResourceIDExamsPassedYesterdayE3 = 699705305;
simcity.kResourceIDLocalStudentsTodayE2 = 3740669344;
simcity.kResourceIDLocalStudentsTodayE3 = 3740669345;
simcity.kResourceIDLocalStudentsYesterdayE2 = 2442378631;
simcity.kResourceIDLocalStudentsYesterdayE3 = 2442378630;
simcity.kResourceIDTradeStudentW1 = 1010515150;
simcity.kResourceIDTradeStudentW2 = 1010515149;
simcity.kResourceIDTradeStudentW3 = 1010515148;
simcity.kResourceIDFromTradingConnection = 4284702440;
simcity.kResourceIDNumberOfLibraries = 946409126;
simcity.kResourceIDNumberOfParks = 3919575048;
simcity.kResourceIDNumberOfT1Parks = 1105413579;
simcity.kResourceIDNumberOfT2Parks = 3547829422;
simcity.kResourceIDNumberOfT3Parks = 3861897597;
simcity.kResourceIDParkVisitors = 3617895960;
simcity.kResourceIDParkVisitorsW1ThisPeriod = 716048171;
simcity.kResourceIDParkVisitorsW2ThisPeriod = 858020864;
simcity.kResourceIDParkVisitorsW3ThisPeriod = 1175000809;
simcity.kResourceIDParkVisitorsW1PerPeriod = 3525565542;
simcity.kResourceIDParkVisitorsW2PerPeriod = 1480752471;
simcity.kResourceIDParkVisitorsW3PerPeriod = 1520338880;
simcity.kResourceIDCulturalVisitorsW1ThisPeriod = 1011508605;
simcity.kResourceIDCulturalVisitorsW2ThisPeriod = 1102856182;
simcity.kResourceIDCulturalVisitorsW3ThisPeriod = 259679967;
simcity.kResourceIDCulturalVisitorsW1PerPeriod = 1404846524;
simcity.kResourceIDCulturalVisitorsW2PerPeriod = 1653926529;
simcity.kResourceIDCulturalVisitorsW3PerPeriod = 1998420978;
simcity.kResourceIDParkKid = 3926021311;
simcity.kResourceIDParkGlobals_TouristsDisplay = 3694149307;
simcity.kResourceIDParkGlobals_Tourists = 3732098067;
simcity.kResourceIDParkGlobals_TouristsPerDay = 3442763798;
simcity.kResourceIDParkGlobals_KidsDisplay = 2604781581;
simcity.kResourceIDParkGlobals_Kids = 1855609397;
simcity.kResourceIDParkGlobals_KidsPerDay = 943514404;
simcity.kResourceIDParkGlobals_LocalsDisplay = 3218409028;
simcity.kResourceIDParkGlobals_Locals = 2870853610;
simcity.kResourceIDParkGlobals_LocalsPerDay = 585103479;
simcity.kResourceIDParkGlobals_Homeless = 4163994496;
simcity.kResourceIDParkGlobals_HomelessPerDay = 3983377073;
simcity.kResourceIDNumberOfCultural = 2176476263;
simcity.kResourceIDCulturalVisitors = 3089971634;
simcity.kResourceIDGarbage = 2092055118;
simcity.kResourceIDGarbageToBurn = 1116260754;
simcity.kResourceIDGarbageBurnedPerHour = 2083566345;
simcity.kResourceIDGarbageDisplay = 1422559728;
simcity.kResourceIDGarbageInDump = 2001853293;
simcity.kResourceIDGarbageDumpCapacity = 2012180508;
simcity.kResourceIDNeighborGarbageInDump = 3091007075;
simcity.kResourceIDNeighborGarbageDumpCapacity = 1912199982;
simcity.kResourceIDGarbagePickedUpYesterday = 1042773031;
simcity.kResourceIDGarbageProducedYesterday = 1269705882;
simcity.kResourceIDNumberOfDumpDocks = 2474366461;
simcity.kResourceIDGarbagePickedUpToday = 900913296;
simcity.kResourceIDGarbageProducedToday = 2418247421;
simcity.kResourceIDGarbagePollutionToday = 505976303;
simcity.kResourceIDGarbagePollutionYesterday = 317495968;
simcity.kResourceIDNumIncinerators = 1483232536;
simcity.kResourceIDNumberOfGarbageProducers = 2100950799;
simcity.kResourceIDGarbageDisplayCount = 1422559728;
simcity.kResourceIDGarbagePickedUpRecord = 2235301706;
simcity.kResourceIDGarbagePickUpNeeded = 4134097061;
simcity.kResourceIDGarbageInCityPerDay = 767419539;
simcity.kResourceIDRecyclingInCityPerDay = 4139349220;
simcity.kResourceIDGarbageInCityPerDay_Last = 2546219826;
simcity.kResourceIDRecyclingInCityPerDay_Last = 1852581215;
simcity.kResourceIDRecyclablesPickUpNeeded = 3864048725;
simcity.kResourceIDGarbageTruck = 1782312919;
simcity.kResourceIDGarbageLost = 4294081512;
simcity.kResourceIDGarbageLostPerDay = 4037031209;
simcity.kResourceIDRecyclablesLost = 4024725176;
simcity.kResourceIDRecyclablesLostPerDay = 809563353;
simcity.kResourceIDRecyclables = 551108766;
simcity.kResourceIDAvailableRecyclingCenter = 627676295;
simcity.kResourceIDRecyclableDisplay = 1191146176;
simcity.kResourceIDRecyclablesCapacity = 1974714610;
simcity.kResourceIDRecyclablesPickedUpToday = 289279968;
simcity.kResourceIDRecyclablesProducedToday = 2550194061;
simcity.kResourceIDRecyclablesPickedUpYesterday = 3008408535;
simcity.kResourceIDRecyclablesProducedYesterday = 2867503114;
simcity.kResourceIDNumberOfRecyclingCenters = 4025811973;
simcity.kResourceIDNumberOfPlasticRecoverers = 1071221463;
simcity.kResourceIDNumberOfMetalRecoverers = 2280604842;
simcity.kResourceIDNumberOfAlloyRecoverers = 1116983938;
simcity.kResourceIDRecyclingLevel = 3504198833;
simcity.kResourceIDRecyclingTruck = 2161441970;
simcity.kResourceIDLandmarkSpecialtyIncomeDisplay = 436116592;
simcity.kResourceIDLandmarkSpecialtyExpensesDisplay = 787050322;
simcity.kResourceIDHasLandmark = 996218559;
simcity.kResourceIDHasLandmarkBigBen = 2638741178;
simcity.kResourceIDHasLandmarkEiffelTower = 1820676685;
simcity.kResourceIDHasLandmarkTokyoTower = 2771774834;
simcity.kResourceIDHasLandmarkBrandenburggate = 3356701108;
simcity.kResourceIDLandmarksUnlocked = 1262648471;
simcity.kResourceIDPoliceStationsBuilt = 1293645856;
simcity.kResourceIDPoliceStationsT1Built = 3195604778;
simcity.kResourceIDPoliceStationsT2Built = 3195604777;
simcity.kResourceIDNumberOfPoliceCars = 1306127202;
simcity.kResourceIDPolice = 291106007;
simcity.kResourceIDPoliceDetectiveVan = 2017795159;
simcity.kResourceIDPoliceDetectiveVan_Parking = 2772202942;
simcity.kResourceIDPoliceHelicopter = 1792517440;
simcity.kResourceIDCriminalsArrested = 3969035757;
simcity.kResourceIDCriminalsArrestedPerDay = 1304762412;
simcity.kResourceIDCriminalsArrestedDisplay = 2344037413;
simcity.kResourceIDRegionalCrimesCommitted_ThisDay = 260071832;
simcity.kResourceIDRegionalCrimesCommitted_PerDay = 802678475;
simcity.kResourceIDCriminalRobber = 3072965302;
simcity.kResourceIDCriminalMurderer = 4039250154;
simcity.kResourceIDCriminalRobberAvailable = 334606379;
simcity.kResourceIDCriminalMurdererAvailable = 549533239;
simcity.kResourceIDCriminalArsonistAvailable = 2076692708;
simcity.kResourceIDRegionalCriminalRobber_Arrested = 3500530816;
simcity.kResourceIDRegionalCriminalMurderer_Arrested = 1132834384;
simcity.kResourceIDRegionalCriminalArsonist_Arrested = 547650187;
simcity.kResourceIDRegionalCriminalEmbezzler_Arrested = 3488315592;
simcity.kResourceIDRegionalCriminalsIncarcerated = 3319542441;
simcity.kResourceIDCrimeLevel_ThisDay = 2190858014;
simcity.kResourceIDCrimeLevel_PerDay = 1408842461;
simcity.kResourceIDCriminal = 504673986;
simcity.kResourceIDCriminalShoplifter = 210128832;
simcity.kResourceIDCriminalMugger = 831598359;
simcity.kResourceIDCriminalArsonist = 489608795;
simcity.kResourceIDCriminalArsonistLight = 578176265;
simcity.kResourceIDCriminalLevel = 472412220;
simcity.kResourceIDCriminalViolence = 1667152949;
simcity.kResourceIDCriminalVandalism = 70341145;
simcity.kResourceIDCriminalTheft = 1440298021;
simcity.kResourceIDCriminalWhiteCollar = 2252979462;
simcity.kResourceIDCriminalTaxEvader = 878884418;
simcity.kResourceIDCriminalEmbezzler = 3793237216;
simcity.kResourceIDCriminalHome = 2554664627;
simcity.kResourceIDCriminalXP = 656078922;
simcity.kResourceIDArson = 1197405812;
simcity.kResourceIDNearArson = 3648115806;
simcity.kResourceIDShoplifting = 2469405894;
simcity.kResourceIDNearShoplifting = 3678368572;
simcity.kResourceIDRobbery = 3627131386;
simcity.kResourceIDNearRobbery = 3918001720;
simcity.kResourceIDMugging = 3118140107;
simcity.kResourceIDNearMugging = 677187317;
simcity.kResourceIDMurder = 3288599948;
simcity.kResourceIDNearMurder = 2800827634;
simcity.kResourceIDEmbezzling = 3771148900;
simcity.kResourceIDEmbezzlingCost = 3453697323;
simcity.kResourceIDCrimesCommitted = 3969752110;
simcity.kResourceIDCrimesCommitted_PerDay = 798709028;
simcity.kResourceIDCriminalsAtLarge = 323121511;
simcity.kResourceIDCriminalsAtLargePerDay = 2137315242;
simcity.kResourceIDArsonistsAtLarge = 449847969;
simcity.kResourceIDCriminalsIncarcerated = 3192894076;
simcity.kResourceIDCriminalsInJailPerDay = 134950725;
simcity.kResourceIDCriminalsRehabilitated = 2960242855;
simcity.kResourceIDCriminalsRehabilitatedToday = 1663983338;
simcity.kResourceIDCriminalsRehabilitatedPerDay = 1984162026;
simcity.kResourceIDCriminalsReleasedOvercrowding = 122084851;
simcity.kResourceIDCriminalsReleasedOvercrowdingToday = 3695701462;
simcity.kResourceIDCriminalsReleasedOvercrowdingPerDay = 204908534;
simcity.kResourceIDVandalismLevel = 3967031134;
simcity.kResourceIDTotalCells = 3130193432;
simcity.kResourceIDNeighborTotalCells = 2554438882;
simcity.kResourceIDOpenCells = 2801080940;
simcity.kResourceIDDetectiveWingUnlocked = 2969418732;
simcity.kResourceIDDetectiveWingsBuilt = 546841254;
simcity.kResourceIDOutreachWingsBuilt = 1015652820;
simcity.kResourceIDNumberOfConnections = 2420041124;
simcity.kResourceIDNumberOfClaimedConnections = 182553747;
simcity.kResourceIDHasMayorsMansion = 772640335;
simcity.kResourceIDHasMayorsHouseSmall = 3602055689;
simcity.kResourceIDOverDriveTimer = 2440987956;
simcity.kResourceIDOverDriveTimerForMansion = 871363660;
simcity.kResourceIDMansionUpgradeTarget = 3605773391;
simcity.kResourceIDMayorUpgradeAvailable = 273805726;
simcity.kResourceIDRating_LocalForUnlock = 532307531;
simcity.kResourceIDTutorialEnabled = 3085667686;
simcity.kResourceIDRegional_HQ_CityHall_IsOn = 2312380229;
simcity.kResourceIDHQ_CityHall_Built = 1131078174;
simcity.kResourceIDHQ_CityHall_IsOn = 3376403637;
simcity.kResourceIDHQ_CityHall_Level2_IsOn = 2304628942;
simcity.kResourceIDTotalBonds1 = 3750279930;
simcity.kResourceIDTotalBonds2 = 3750279929;
simcity.kResourceIDTotalBonds3 = 3750279928;
simcity.kResourceIDExpensesFromBonds1 = 912516801;
simcity.kResourceIDExpensesFromBonds2 = 912516802;
simcity.kResourceIDExpensesFromBonds3 = 912516803;
simcity.kResourceIDExpensesFromBondsInterest1 = 3229502908;
simcity.kResourceIDExpensesFromBondsInterest2 = 3229502911;
simcity.kResourceIDExpensesFromBondsInterest3 = 3229502910;
simcity.kResourceIDHQ_CityHall_Level = 897245280;
simcity.kResourceIDHQ_CityHall_OpenModules = 2879354421;
simcity.kResourceIDHQ_CityHall_Unlocked = 226625445;
simcity.kResourceIDHQ_CityHall_Education_Module_IsOn = 3923095905;
simcity.kResourceIDHQ_CityHall_Finance_Module_IsOn = 567687869;
simcity.kResourceIDHQ_CityHall_Safety_Module_IsOn = 215766017;
simcity.kResourceIDHQ_CityHall_Tourism_Module_IsOn = 3212839908;
simcity.kResourceIDHQ_CityHall_Transportation_Module_IsOn = 2181372253;
simcity.kResourceIDHQ_CityHall_Utilities_Module_IsOn = 2970167355;
simcity.kResourceIDHQ_CityHall_Transportation_Module_Built = 2483746982;
simcity.kResourceIDHandshakeSent = 610756730;
simcity.kResourceIDHandshakeReceived = 2190472937;
simcity.kResourceIDNorth = 4279573130;
simcity.kResourceIDSouth = 992193856;
simcity.kResourceIDEast = 529018174;
simcity.kResourceIDWest = 1723483016;
simcity.kResourceIDTradeDealMyPowerRequest = 919910727;
simcity.kResourceIDTradeDealMyPowerAgreement = 4282683288;
simcity.kResourceIDTradeDealPowerStatus = 3106217408;
simcity.kResourceIDTradeDealPowerSize = 343268165;
simcity.kResourceIDTradeDealMyWaterRequest = 2867838445;
simcity.kResourceIDTradeDealMyWaterAgreement = 4133997914;
simcity.kResourceIDTradeDealWaterStatus = 228341758;
simcity.kResourceIDTradeDealWaterSize = 2286467667;
simcity.kResourceIDTradeGiftSimoleonsSize = 2361644679;
simcity.kResourceIDNumberOfRegionalWorks = 1760472636;
simcity.kResourceIDConnected = 1629494038;
simcity.kResourceIDWorkerTruck = 1935164160;
simcity.kResourceIDClaimedBox = 3501625368;
simcity.kResourceIDTradeGiftSendingSimoleons = 3982444360;
simcity.kResourceIDTradeGiftSimoleonsSize = 2361644679;
simcity.kResourceIDTradeTrackingTotalPower = 2825663747;
simcity.kResourceIDTradeTrackingExcessPower = 2064475082;
simcity.kResourceIDTradeTrackingDeficitPower = 2070310611;
simcity.kResourceIDTradeTrackingNeededPower = 154028464;
simcity.kResourceIDTradePowerUsedToSend = 513060426;
simcity.kResourceIDTradePowerUsedToSendFromBefore = 2204609991;
simcity.kResourceIDPowerImportExchangeRate = 1899495326;
simcity.kResourceIDTradeTrackingSwitchConnectionPower = 1897010737;
simcity.kResourceIDTradeTrackingTotalWater = 205888501;
simcity.kResourceIDTradeTrackingExcessWater = 3800635496;
simcity.kResourceIDTradeTrackingDeficitWater = 2713311365;
simcity.kResourceIDTradeTrackingNeededWater = 417282202;
simcity.kResourceIDTradeWaterUsedToSend = 1924344012;
simcity.kResourceIDTradeWaterUsedToSendFromBefore = 3824472781;
simcity.kResourceIDWaterImportExchangeRate = 100106280;
simcity.kResourceIDTradeTrackingSwitchConnectionWater = 2775184975;
simcity.kResourceIDTradeTrackingTreatedSewage = 170180669;
simcity.kResourceIDTradeTrackingExcessSewage = 1375844891;
simcity.kResourceIDTradeTrackingTotalSewage = 286011656;
simcity.kResourceIDTradeSewageExportAllowedUsedToSend = 1462675935;
simcity.kResourceIDTradeTrackingSwitchConnectionSewage = 2176822418;
simcity.kResourceIDTradeTrackingTotalGarbage = 1944814113;
simcity.kResourceIDTradeTrackingGarbageDumpCapacity = 2751523129;
simcity.kResourceIDTradeTrackingGarbagePickup = 2149039580;
simcity.kResourceIDTradeTrackingGarbageRewards = 3652000609;
simcity.kResourceIDTradeTrackingGarbageTruckR1 = 1476299975;
simcity.kResourceIDTradeTrackingTotalRecycling = 997405154;
simcity.kResourceIDTradeTrackingRecyclablesCapacity = 915051315;
simcity.kResourceIDTradeTrackingRecyclingPickedUp = 1963508395;
simcity.kResourceIDTradeTrackingRecyclingRewards = 658544808;
simcity.kResourceIDTradeTrackingRecyclingTruckR2 = 497754253;
simcity.kResourceIDTradeTrackingTotalFires = 1576817527;
simcity.kResourceIDTradeTrackingUnattendedFires = 3598643151;
simcity.kResourceIDTradeTrackingFireRewards = 1647276942;
simcity.kResourceIDTradeTrackingFireTruckR1 = 2672516396;
simcity.kResourceIDTradeTrackingFireTruckR2 = 2672516399;
simcity.kResourceIDTradeTrackingHazMatTruckR2 = 1092274640;
simcity.kResourceIDTradeTrackingFireInspectorR2 = 2483763065;
simcity.kResourceIDTradeTrackingFireHelicopterR2 = 3001853005;
simcity.kResourceIDTradeTrackingTotalCrimes = 3348240957;
simcity.kResourceIDTradeTrackingCriminalsCaught = 542997796;
simcity.kResourceIDTradeTrackingTotalCells = 185119231;
simcity.kResourceIDTradeTrackingCriminalsAtLarge = 169350308;
simcity.kResourceIDTradeTrackingPoliceCarR1 = 3835374665;
simcity.kResourceIDTradeTrackingPoliceDetectiveVanR2 = 948934452;
simcity.kResourceIDTradeTrackingPoliceOutreachVanR2 = 3451440152;
simcity.kResourceIDTradeTrackingPoliceHelicopterR2 = 693966119;
simcity.kResourceIDTradeTrackingT2FireStations = 1643611927;
simcity.kResourceIDTradeTrackingT1GarbageBases = 1362349058;
simcity.kResourceIDTradeTrackingT2GarbageBases = 2837792889;
simcity.kResourceIDTradeTrackingT2Hospitals = 738599137;
simcity.kResourceIDTradeTrackingT2PoliceStations = 4236188317;
simcity.kResourceIDTradeTrackingImportedResidentWorkerW1 = 2072485076;
simcity.kResourceIDTradeTrackingImportedResidentWorkerW2 = 2072485079;
simcity.kResourceIDTradeTrackingImportedResidentWorkerW3 = 2072485078;
simcity.kResourceIDTradeTrackingExportedWorkerW1 = 3264242193;
simcity.kResourceIDTradeTrackingExportedWorkerW2 = 3264242194;
simcity.kResourceIDTradeTrackingExportedWorkerW3 = 3264242195;
simcity.kResourceIDTradeTrackingImportedJobsW1 = 334865198;
simcity.kResourceIDTradeTrackingImportedJobsW2 = 334865197;
simcity.kResourceIDTradeTrackingImportedJobsW3 = 334865196;
simcity.kResourceIDTradeTrackingImportedResidentShopperW1 = 96784483;
simcity.kResourceIDTradeTrackingImportedResidentShopperW2 = 96784480;
simcity.kResourceIDTradeTrackingImportedResidentShopperW3 = 96784481;
simcity.kResourceIDTradeTrackingImportedShoppersNeededW1 = 388378261;
simcity.kResourceIDTradeTrackingImportedShoppersNeededW2 = 388378262;
simcity.kResourceIDTradeTrackingImportedShoppersNeededW3 = 388378263;
simcity.kResourceIDTradeTrackingExportedShopperW1 = 1863409004;
simcity.kResourceIDTradeTrackingExportedShopperW2 = 1863409007;
simcity.kResourceIDTradeTrackingExportedShopperW3 = 1863409006;
simcity.kResourceIDTradeTrackingImportedKid = 4278195042;
simcity.kResourceIDTradeTrackingImportedStudentsE2 = 3971993227;
simcity.kResourceIDTradeTrackingImportedStudentsE3 = 3971993226;
simcity.kResourceIDTradeTrackingImportedFreightProducer = 1429838581;
simcity.kResourceIDTradeTrackingImportedFreightConsumerD1 = 3069218622;
simcity.kResourceIDTradeTrackingImportedFreightConsumerD2 = 3069218621;
simcity.kResourceIDTradeTrackingImportedFreightConsumerD3 = 3069218620;
simcity.kResourceIDTradeTrackingResidentialWorkerW1 = 994370214;
simcity.kResourceIDTradeTrackingResidentialWorkerW2 = 994370213;
simcity.kResourceIDTradeTrackingResidentialWorkerW3 = 994370212;
simcity.kResourceIDTradeTrackingDayJobsW1 = 2907248936;
simcity.kResourceIDTradeTrackingDayJobsW2 = 2907248939;
simcity.kResourceIDTradeTrackingDayJobsW3 = 2907248938;
simcity.kResourceIDTradeTrackingNightJobsW1 = 2209438356;
simcity.kResourceIDTradeTrackingNightJobsW2 = 2209438359;
simcity.kResourceIDTradeTrackingNightJobsW3 = 2209438358;
simcity.kResourceIDTradeTrackingResidentialShopperW1 = 2823007977;
simcity.kResourceIDTradeTrackingResidentialShopperW2 = 2823007978;
simcity.kResourceIDTradeTrackingResidentialShopperW3 = 2823007979;
simcity.kResourceIDTradeTrackingHotItemsW1ProducedYesterday_Day = 436044244;
simcity.kResourceIDTradeTrackingHotItemsW2ProducedYesterday_Day = 2567516917;
simcity.kResourceIDTradeTrackingHotItemsW3ProducedYesterday_Day = 2107391642;
simcity.kResourceIDTradeTrackingHotItemsW1ProducedYesterday_Night = 1180475536;
simcity.kResourceIDTradeTrackingHotItemsW2ProducedYesterday_Night = 4288225481;
simcity.kResourceIDTradeTrackingHotItemsW3ProducedYesterday_Night = 1460279358;
simcity.kResourceIDTradeTrackingHotItemsW1ConsumedYesterday_Day = 3301253642;
simcity.kResourceIDTradeTrackingHotItemsW2ConsumedYesterday_Day = 1454982443;
simcity.kResourceIDTradeTrackingHotItemsW3ConsumedYesterday_Day = 43830436;
simcity.kResourceIDTradeTrackingHotItemsW1ConsumedYesterday_Night = 625769006;
simcity.kResourceIDTradeTrackingHotItemsW2ConsumedYesterday_Night = 3672481127;
simcity.kResourceIDTradeTrackingHotItemsW3ConsumedYesterday_Night = 2743040480;
simcity.kResourceIDTradeTrackingFreightCapacityGlobal = 44618754;
simcity.kResourceIDTradeTrackingFreightProducer = 3958037009;
simcity.kResourceIDTradeTrackingFreightConsumedYesterday = 2201488459;
simcity.kResourceIDTradeTrackingFreightProducedYesterday = 3557538141;
simcity.kResourceIDTradeTrackingFreightExportedToday = 2710463005;
simcity.kResourceIDTradeTrackingFreightExportedYesterday = 3070536890;
simcity.kResourceIDTradeTrackingFreightImportedToday = 965101814;
simcity.kResourceIDTradeTrackingFreightImportedYesterday = 2446006113;
simcity.kResourceIDTradeTrackingTotalKids = 2036203095;
simcity.kResourceIDTradeTrackingLocalStudentsYesterday = 197785297;
simcity.kResourceIDTradeTrackingLocalStudentsYesterdayE2 = 1813541280;
simcity.kResourceIDTradeTrackingLocalStudentsYesterdayE3 = 1813541281;
simcity.kResourceIDTradeTrackingSpotsForKids = 4098104485;
simcity.kResourceIDTradeTrackingSpotsForKidsE2 = 2011204636;
simcity.kResourceIDTradeTrackingSpotsForKidsE3 = 2011204637;
simcity.kResourceIDTradeTrackingExamsPassedTodayE2 = 109533772;
simcity.kResourceIDTradeTrackingExamsPassedTodayE3 = 109533773;
simcity.kResourceIDTradeTrackingHospitalRooms = 1371452676;
simcity.kResourceIDTradeTrackingSickHealing = 3951031362;
simcity.kResourceIDTradeTrackingInjuryHealing = 1659303859;
simcity.kResourceIDTradeTrackingTotalSickAndInjured = 990442076;
simcity.kResourceIDTradeTrackingAmbulanceR1 = 339387647;
simcity.kResourceIDTradeTrackingCommunityOutreachVanR2 = 1033645175;
simcity.kResourceIDTradeTrackingBusR2PassengersToday = 455274306;
simcity.kResourceIDTradeTrackingSchoolBusR2PassengersToday = 3631226262;
simcity.kResourceIDTradeTrackingTrainT2PassengersToday = 1388385232;
simcity.kResourceIDTradeTrackingFerryT1PassengersToday = 1837932671;
simcity.kResourceIDTradeTrackingMayorRating = 4197480713;
simcity.kResourceIDTradeTrackingSimoleons = 183911047;
simcity.kResourceIDTradeTrackingTotalResidential = 758431106;
simcity.kResourceIDTradeTrackingNumImEx = 2392059991;
simcity.kResourceIDTradeTrackingNumImExT2 = 1373917985;
simcity.kResourceIDTradeTrackingNumImExT2Rail = 4219056289;
simcity.kResourceIDTradeTrackingNumImExT2Boat = 2629882187;
simcity.kResourceIDTradeTrackingCoalImported = 2272506407;
simcity.kResourceIDTradeTrackingCoalExported = 706091494;
simcity.kResourceIDTradeTrackingCoalHarvested = 3300439569;
simcity.kResourceIDTradeTrackingCoalConsumed = 2085672197;
simcity.kResourceIDTradeTrackingCoalConsumedByProducer = 4287139332;
simcity.kResourceIDTradeTrackingCoalCapacity = 2031454803;
simcity.kResourceIDTradeTrackingCoalStored = 2808200618;
simcity.kResourceIDTradeTrackingOreRawImported = 836581336;
simcity.kResourceIDTradeTrackingOreRawExported = 1484651513;
simcity.kResourceIDTradeTrackingOreRawHarvested = 217778684;
simcity.kResourceIDTradeTrackingOreRawConsumedByProducer = 1317040855;
simcity.kResourceIDTradeTrackingOreRawCapacity = 3074432104;
simcity.kResourceIDTradeTrackingOreRawStored = 603518537;
simcity.kResourceIDTradeTrackingOilCrudeImported = 1681643515;
simcity.kResourceIDTradeTrackingOilCrudeExported = 2471395642;
simcity.kResourceIDTradeTrackingOilCrudeHarvested = 1071359997;
simcity.kResourceIDTradeTrackingOilCrudeConsumed = 1423367025;
simcity.kResourceIDTradeTrackingOilCrudeConsumedByProducer = 2130772096;
simcity.kResourceIDTradeTrackingOilCrudeCapacity = 2012710871;
simcity.kResourceIDTradeTrackingOilCrudeStored = 3434951062;
simcity.kResourceIDTradeTrackingPlasticImported = 3884226602;
simcity.kResourceIDTradeTrackingPlasticExported = 3308497499;
simcity.kResourceIDTradeTrackingPlasticAssembled = 3778649082;
simcity.kResourceIDTradeTrackingPlasticConsumedByProducer = 3885730093;
simcity.kResourceIDTradeTrackingPlasticCapacity = 1016408938;
simcity.kResourceIDTradeTrackingPlasticStored = 555294567;
simcity.kResourceIDTradeTrackingFuelImported = 4173075510;
simcity.kResourceIDTradeTrackingFuelExported = 3690774791;
simcity.kResourceIDTradeTrackingFuelAssembled = 191880670;
simcity.kResourceIDTradeTrackingFuelConsumedByProducer = 4274148897;
simcity.kResourceIDTradeTrackingFuelCapacity = 410643942;
simcity.kResourceIDTradeTrackingFuelStored = 600025499;
simcity.kResourceIDTradeTrackingMetalImported = 1943226479;
simcity.kResourceIDTradeTrackingMetalExported = 3486734846;
simcity.kResourceIDTradeTrackingMetalAssembled = 1368044365;
simcity.kResourceIDTradeTrackingMetalConsumedByProducer = 3290396812;
simcity.kResourceIDTradeTrackingMetalCapacity = 230574379;
simcity.kResourceIDTradeTrackingMetalStored = 2460314418;
simcity.kResourceIDTradeTrackingAlloyImported = 211824479;
simcity.kResourceIDTradeTrackingAlloyExported = 3299664462;
simcity.kResourceIDTradeTrackingAlloyAssembled = 842595325;
simcity.kResourceIDTradeTrackingAlloyConsumedByProducer = 603949948;
simcity.kResourceIDTradeTrackingAlloyCapacity = 1063076059;
simcity.kResourceIDTradeTrackingAlloyStored = 194485282;
simcity.kResourceIDTradeTrackingElectronicsImported = 4198493631;
simcity.kResourceIDTradeTrackingElectronicsExported = 1502897070;
simcity.kResourceIDTradeTrackingElectronicsAssembled = 642627805;
simcity.kResourceIDTradeTrackingElectronicsConsumedByProducer = 1655447260;
simcity.kResourceIDTradeTrackingElectronicsCapacity = 754881083;
simcity.kResourceIDTradeTrackingElectronicsStored = 928483714;
simcity.kResourceIDTradeTrackingTelevisionImported = 3986417094;
simcity.kResourceIDTradeTrackingTelevisionExported = 1960514231;
simcity.kResourceIDTradeTrackingTelevisionAssembled = 2394888302;
simcity.kResourceIDTradeTrackingTelevisionConsumedByProducer = 3635908721;
simcity.kResourceIDTradeTrackingTelevisionCapacity = 185980726;
simcity.kResourceIDTradeTrackingTelevisionStored = 3536891307;
simcity.kResourceIDTradeTrackingComputerImported = 1549863737;
simcity.kResourceIDTradeTrackingComputerExported = 1875289888;
simcity.kResourceIDTradeTrackingComputerAssembled = 4241072751;
simcity.kResourceIDTradeTrackingComputerConsumedByProducer = 2124001594;
simcity.kResourceIDTradeTrackingComputerCapacity = 454820893;
simcity.kResourceIDTradeTrackingComputerStored = 1111156840;
simcity.kResourceIDAlloyTransport = 2094769101;
simcity.kResourceIDAlloyTransportToSend = 2211053392;
simcity.kResourceIDCoalTransport = 129362091;
simcity.kResourceIDCoalTransportToSend = 1168959818;
simcity.kResourceIDComputerTransport = 1426305929;
simcity.kResourceIDComputerTransportToSend = 2578398228;
simcity.kResourceIDElectronicsTransport = 837876277;
simcity.kResourceIDElectronicsTransportToSend = 1638454328;
simcity.kResourceIDFuelTransport = 1465669288;
simcity.kResourceIDFuelTransportToSend = 2831910513;
simcity.kResourceIDMetalTransport = 3586627541;
simcity.kResourceIDMetalTransportToSend = 2786169304;
simcity.kResourceIDOilCrudeTransport = 1939187731;
simcity.kResourceIDOilCrudeTransportToSend = 3923639794;
simcity.kResourceIDOreRawTransport = 3194563238;
simcity.kResourceIDOreRawTransportToSend = 3058520683;
simcity.kResourceIDPlasticTransport = 3157718626;
simcity.kResourceIDPlasticTransportToSend = 3698475599;
simcity.kResourceIDTelevisionTransport = 18550752;
simcity.kResourceIDTelevisionTransportToSend = 1231596297;
simcity.kResourceIDNumberOfGreatWorksAvailable = 3064543031;
simcity.kResourceIDWorkersSent = 3591689416;
simcity.kResourceIDWorkerTruck = 1935164160;
simcity.kResourceIDSimsInjuredInMission = 2069161297;
simcity.kResourceIDMissionCompleted = 1627245352;
simcity.kResourceIDMissionStarted = 419590612;
simcity.kResourceIDIsSelected = 3358518502;
simcity.kResourceIDMissionProgress = 973586624;
simcity.kResourceIDLocalMissionProgress = 4183714305;
simcity.kResourceIDGlobalMissionProgress = 3746722863;
simcity.kResourceIDMissionProgressDisplay = 4154147290;
simcity.kResourceIDPower_RegionalSolarPlant_Unlocked = 2819741462;
simcity.kResourceIDHQ_University_Science_Module_IsOn = 915861573;
simcity.kResourceIDHQ_University_Engineering_Module_IsOn = 946389442;
simcity.kResourceIDRegionSolarPlantUnlocked = 3234225566;
simcity.kResourceIDInternationalAirportUnlocked = 2383687319;
simcity.kResourceIDRegionInternationalAirportUnlocked = 175499503;
simcity.kResourceIDSpaceCenterUnlocked = 3825521097;
simcity.kResourceIDRegionSpaceCenterUnlocked = 4085370929;
simcity.kResourceIDHQ_Electronics_ConsumerElectronics_Module_IsOn = 284482545;
simcity.kResourceIDRegionCoalHQIsPresent = 3251041550;
simcity.kResourceIDArcologyUnlocked = 2057105206;
simcity.kResourceIDRegionArcologyUnlocked = 3567012286;
simcity.kResourceIDGWConstructionStage = 1485155782;
simcity.kResourceIDGWOperationalStage = 4291847016;
simcity.kResourceIDGWRegionalConstructionWorkersTotal = 2435950116;
simcity.kResourceIDGWRegionalConstructionWorkersSent = 1206299136;
simcity.kResourceIDGreatWorksSignedUpCounter = 2541729299;
simcity.kResourceIDGreatWorksOperational = 1315684666;
simcity.kResourceIDGreatWorksResourceDelivered = 3202272862;
simcity.kResourceIDGreatWorksResource1Delivered = 1136547621;
simcity.kResourceIDGreatWorksResource2Delivered = 1595600012;
simcity.kResourceIDGreatWorksResource3Delivered = 3824525519;
simcity.kResourceIDConstructionWorkersStalled = 496418028;
simcity.kResourceIDGreatWorksUnlocked = 1540571913;
simcity.kResourceIDHelicopterUnlock_IsOn = 4149371850;
simcity.kResourceIDRegionalBuildingActive = 3564852728;
simcity.kResourceIDRegionalAttractionLevelTotal = 593596809;
simcity.kResourceIDRegionalPowerOperating = 4061587982;
simcity.kResourceIDRegionalWaterOperating = 1990851096;
simcity.kResourceIDRegionalWorkersTotal = 1994308351;
simcity.kResourceIDCountedPower = 3351100072;
simcity.kResourceIDRegionalPowerTotal = 111888553;
simcity.kResourceIDRegionalWaterTotal = 3561486351;
simcity.kResourceIDTrackingPassengerAirplaneT2 = 2345532582;
simcity.kResourceIDTrackingTouristW2 = 3835689959;
simcity.kResourceIDTrackingTouristW3 = 3835689958;
simcity.kResourceIDTrackingPotentialTouristW2 = 1113374941;
simcity.kResourceIDTrackingPotentialTouristW3 = 1113374940;
simcity.kResourceIDTrackingCargoAirplaneT1 = 3798476589;
simcity.kResourceIDTrackingCargoAirplaneT2 = 3798476590;
simcity.kResourceIDHasSolarFarm = 3145586614;
simcity.kResourceIDHasInternationalAirport = 468510354;
simcity.kResourceIDHasSpaceCenter = 353164660;
simcity.kResourceIDHasArcology = 3011308239;
simcity.kResourceIDBypassOperationalCheck = 2018215597;
simcity.kResourceIDReceivingPowerFromSolarFarm = 1384663895;
simcity.kResourceIDPowerSentFromGreatWorks = 1114786261;
simcity.kResourceIDGreatWorkImportedPowerCounter = 255515766;
simcity.kResourceIDGreatWorksOperatingMissionInProgress = 2102740475;
simcity.kResourceIDActiveSatelliteLaunch = 238264067;
simcity.kResourceIDBuildingSatellite = 963782616;
simcity.kResourceIDArcologyPopulationLevel = 1062896262;
simcity.kResourceIDGreatWorksOperatingMissionInProgress = 2102740475;
simcity.kResourceIDSpaceCenterRocketOnPad = 2431448096;
simcity.kResourceIDSatelliteLaunched = 992762266;
simcity.kResourceIDSpaceCenterSkillBoostCounter = 1940872510;
simcity.kResourceIDSpaceCenterOperatingPhase = 3102749500;
simcity.kResourceIDSpaceCenterLaunchAvailable = 2873912652;
simcity.kResourceIDMissionCountdownClock = 1216012096;
simcity.kResourceIDMissionResource1 = 2630414794;
simcity.kResourceIDMissionResource2 = 2630414793;
simcity.kResourceIDMissionResource3 = 2630414792;
simcity.kResourceIDMissionResource4 = 2630414799;
simcity.kResourceIDMissionResource5 = 2630414798;
simcity.kResourceIDMissionResource6 = 2630414797;
simcity.kResourceIDMissionResource7 = 2630414796;
simcity.kResourceIDMissionResource8 = 2630414787;
simcity.kResourceIDLocalMissionResource1 = 228444021;
simcity.kResourceIDLocalMissionResource2 = 228444022;
simcity.kResourceIDLocalMissionResource3 = 228444023;
simcity.kResourceIDLocalMissionResource4 = 228444016;
simcity.kResourceIDLocalMissionResource5 = 228444017;
simcity.kResourceIDLocalMissionResource6 = 228444018;
simcity.kResourceIDLocalMissionResource7 = 228444019;
simcity.kResourceIDLocalMissionResource8 = 228444028;
simcity.kResourceIDSignedUpForAlloy = 2156529816;
simcity.kResourceIDSignedUpForCoal = 1481550350;
simcity.kResourceIDSignedUpForElectronics = 837943636;
simcity.kResourceIDSignedUpForFuel = 141660303;
simcity.kResourceIDSignedUpForMetal = 3746338052;
simcity.kResourceIDSignedUpForOilCrude = 1784084810;
simcity.kResourceIDSignedUpForOreRaw = 2035346673;
simcity.kResourceIDSignedUpForPlastic = 2801046657;
simcity.kResourceIDSignedUpForComputer = 641178008;
simcity.kResourceIDSignedUpForTelevision = 104428475;
simcity.kResourceIDSignedUpForAlloyStored = 4225686509;
simcity.kResourceIDSignedUpForCoalStored = 2878945903;
simcity.kResourceIDSignedUpForElectronicsStored = 2557484649;
simcity.kResourceIDSignedUpForFuelStored = 2405481186;
simcity.kResourceIDSignedUpForMetalStored = 3769877433;
simcity.kResourceIDSignedUpForOilCrudeStored = 2334454315;
simcity.kResourceIDSignedUpForOreRawStored = 109432152;
simcity.kResourceIDSignedUpForPlasticStored = 696591432;
simcity.kResourceIDSignedUpForComputerStored = 3180848365;
simcity.kResourceIDSignedUpForTelevisionStored = 2970679966;
simcity.kResourceRegionalBoxUniqueID = 700441987;
simcity.kResourceNumberOfBoxes = 2015828812;
simcity.kResourceNumberOfClaimedBoxes = 2137317727;
simcity.kResourceClaimedEnoughBoxesInRegion = 659947770;
simcity.kResourceIDDNorth = 4279573130;
simcity.kResourceIDDWest = 1723483016;
simcity.kResourceIDDEast = 529018174;
simcity.kResourceIDDSouth = 992193856;
simcity.kResourceIDExcessPower = 1849174591;
simcity.kResourceIDExcessWater = 3864099713;
simcity.kResourceIDRoadNearby = 3196262326;
simcity.kResourceIDFireTruckT1 = 2461985119;
simcity.kResourceIDFireTruckT2 = 2461985116;
simcity.kResourceIDFireTruckR1 = 2495540389;
simcity.kResourceIDFireTruckR2 = 2495540390;
simcity.kResourceIDHazMatTruckR2 = 3186883601;
simcity.kResourceIDFireInspector = 3944701420;
simcity.kResourceIDFireInspectorR2 = 2558046576;
simcity.kResourceIDFireHelicopterR2 = 3496374658;
simcity.kResourceIDTradeExcessFireTruckR1 = 96453850;
simcity.kResourceIDTradeExcessFireTruckR2 = 96453849;
simcity.kResourceIDTradeExcessHazMatTruckR2 = 2871591582;
simcity.kResourceIDTradeExcessFireInspectorR2 = 1582936235;
simcity.kResourceIDTradeExcessFireHelicopterR2 = 3998138123;
simcity.kResourceIDFireTruckR1ToSend = 407618920;
simcity.kResourceIDFireTruckR2ToSend = 1474626667;
simcity.kResourceIDExcessFireTruckR1 = 96453850;
simcity.kResourceIDExcessFireTruckR2 = 96453849;
simcity.kResourceIDExcessHazMatTruckR2 = 2871591582;
simcity.kResourceIDFireServiceToken = 2647607289;
simcity.kResourceIDFireServiceTokenCounter = 196028751;
simcity.kResourceIDFireServiceTokenGranted = 341534070;
simcity.kResourceIDPoliceCarR1 = 1253104808;
simcity.kResourceIDTradeExcessPoliceCarR1 = 1875029739;
simcity.kResourceIDPoliceDetectiveVanR2 = 4169623735;
simcity.kResourceIDTradeExcessPoliceDetectiveVanR2 = 2560245302;
simcity.kResourceIDPoliceOutreachVan = 2162739333;
simcity.kResourceIDPoliceOutreachVan_Parking = 280243312;
simcity.kResourceIDPoliceOutreachVanR2 = 3960689125;
simcity.kResourceIDTradeExcessPoliceOutreachVanR2 = 1931225770;
simcity.kResourceIDPoliceHelicopterR2 = 1404252420;
simcity.kResourceIDTradeExcessPoliceHelicopterR2 = 1583167837;
simcity.kResourceIDPoliceServiceToken = 864842123;
simcity.kResourceIDPoliceServiceTokenCounter = 485477509;
simcity.kResourceIDPoliceServiceTokenGranted = 3105023984;
simcity.kResourceIDGarbageTruckR1 = 2123311156;
simcity.kResourceIDTradeExcessGarbageTruckR1 = 3019757953;
simcity.kResourceIDGarbageServiceToken = 2835982466;
simcity.kResourceIDGarbageServiceTokenCounter = 2188438626;
simcity.kResourceIDGarbageServiceTokenGranted = 910807239;
simcity.kResourceIDRecyclingTruckR2 = 3408695102;
simcity.kResourceIDTradeExcessRecyclingTruckR2 = 3427430143;
simcity.kResourceIDRecyclingServiceToken = 3184416497;
simcity.kResourceIDAmbulanceR1 = 2596175366;
simcity.kResourceIDTradeExcessAmbulanceR1 = 3649714245;
simcity.kResourceIDCommunityOutreachVan = 1390367256;
simcity.kResourceIDCommunityOutreachVanR2 = 2431124988;
simcity.kResourceIDTradeExcessCommunityOutreachVanR2 = 1508816545;
simcity.kResourceIDHealthServiceToken = 3307902383;
simcity.kResourceIDHealthServiceTokenCounter = 546429865;
simcity.kResourceIDHealthServiceTokenGranted = 2254544100;
simcity.kResourceIDFireDispatchAccepted = 3987602660;
simcity.kResourceIDTradeExcessFreightProducer = 2948667523;
simcity.kResourceIDFreightProducer = 1386446216;
simcity.kResourceIDFreightConsumerD1 = 2849473655;
simcity.kResourceIDFreightConsumerD2 = 2849473652;
simcity.kResourceIDFreightConsumerD3 = 2849473653;
simcity.kResourceIDFreightToday = 3018095613;
simcity.kResourceIDTradeExcessFreightConsumerD1 = 770566680;
simcity.kResourceIDTradeExcessFreightConsumerD2 = 770566683;
simcity.kResourceIDTradeExcessFreightConsumerD3 = 770566682;
simcity.kResourceIDTradeExcessResidentWorkerW1 = 600654254;
simcity.kResourceIDTradeExcessResidentWorkerW2 = 600654253;
simcity.kResourceIDTradeExcessResidentWorkerW3 = 600654252;
simcity.kResourceIDTradeExcessResidentShopperW1 = 1734645633;
simcity.kResourceIDTradeExcessResidentShopperW2 = 1734645634;
simcity.kResourceIDTradeExcessResidentShopperW3 = 1734645635;
simcity.kResourceIDExcessKids = 3880117816;
simcity.kResourceIDExcessStudentE2 = 1893297692;
simcity.kResourceIDExcessStudentE3 = 1893297693;
simcity.kResourceIDExcessShoppersNeededW1 = 2366253995;
simcity.kResourceIDExcessShoppersNeededW2 = 2366253992;
simcity.kResourceIDExcessShoppersNeededW3 = 2366253993;
simcity.kResourceIDTradeExcessDayJobsW1 = 384855186;
simcity.kResourceIDTradeExcessDayJobsW2 = 384855185;
simcity.kResourceIDTradeExcessDayJobsW3 = 384855184;
simcity.kResourceIDTradeExcessNightJobsW1 = 2578154342;
simcity.kResourceIDTradeExcessNightJobsW2 = 2578154341;
simcity.kResourceIDTradeExcessNightJobsW3 = 2578154340;
simcity.kResourceIDImportedResidents = 4115925573;
simcity.kResourceIDImportedResidentsW1 = 1206356745;
simcity.kResourceIDImportedResidentsW2 = 1206356746;
simcity.kResourceIDImportedResidentsW3 = 1206356747;
simcity.kResourceIDImportedResidentShopperW1 = 3504366446;
simcity.kResourceIDImportedResidentShopperW2 = 3504366445;
simcity.kResourceIDImportedResidentShopperW3 = 3504366444;
simcity.kResourceIDImportedShoppersNeededW1 = 1306257730;
simcity.kResourceIDImportedShoppersNeededW2 = 1306257729;
simcity.kResourceIDImportedShoppersNeededW3 = 1306257728;
simcity.kResourceIDImportedResidentWorkerW1 = 2511648399;
simcity.kResourceIDImportedResidentWorkerW2 = 2511648396;
simcity.kResourceIDImportedResidentWorkerW3 = 2511648397;
simcity.kResourceIDImportedJobsW1 = 237552489;
simcity.kResourceIDImportedJobsW2 = 237552490;
simcity.kResourceIDImportedJobsW3 = 237552491;
simcity.kResourceIDImportedKid = 1119693563;
simcity.kResourceIDIncomingTradeCarTraffic = 3794878840;
simcity.kResourceIDIncomingTouristCarTraffic = 2153055568;
simcity.kResourceIDOutgoingTradeCarTraffic = 2892462054;
simcity.kResourceIDKidToSend = 1128019306;
simcity.kResourceIDTradeSwitchEducation = 3610436769;
simcity.kResourceIDTradeSwitchFire = 2566217525;
simcity.kResourceIDTradeSwitchJobs = 1429448921;
simcity.kResourceIDTradeSwitchKids = 3639239926;
simcity.kResourceIDTradeSwitchPower = 2471292092;
simcity.kResourceIDTradeSwitchResidents = 3610705880;
simcity.kResourceIDTradeSwitchShopping = 3115018657;
simcity.kResourceIDTradeSwitchWater = 3733951318;
simcity.kResourceIDTradeSwitchPreviousWater = 2230743323;
simcity.kResourceIDTradeSwitchSewage = 2597425153;
simcity.kResourceIDTradeSwitchConnectionEducation = 2700336689;
simcity.kResourceIDTradeSwitchConnectionFire = 43618437;
simcity.kResourceIDTradeSwitchConnectionJobs = 3749146665;
simcity.kResourceIDTradeSwitchConnectionKids = 1653627654;
simcity.kResourceIDTradeSwitchConnectionPower = 3998749676;
simcity.kResourceIDTradeSwitchConnectionResidents = 2224992936;
simcity.kResourceIDTradeSwitchConnectionShopping = 2255324145;
simcity.kResourceIDTradeSwitchConnectionWater = 627284102;
simcity.kResourceIDTradeSwitchConnectionSewage = 1045983025;
simcity.kResourceIDDemolishedByDisaster = 3880439877;
simcity.kResourceIDDisasterActive = 475159146;
simcity.kResourceIDDisasterActiveRobot = 3172786374;
simcity.kResourceIDDisasterActiveBigLizard = 2936636340;
simcity.kResourceIDDisasterActiveUFO = 1544975258;
simcity.kResourceIDDisasterActiveZombie = 3819837388;
simcity.kResourceIDDisasterActiveTornado = 4175683069;
simcity.kResourceIDDisasterActiveEarthquake = 3817279809;
simcity.kResourceIDDisasterActivePlague = 1751436168;
simcity.kResourceIDDisasterActiveMeteor = 2439014578;
simcity.kResourceIDDisasterActiveMeltdown = 54522384;
simcity.kResourceIDRadiated = 71000479;
simcity.kResourceIDZombie = 1721775719;
simcity.kResourceIDDestroyedByZombie = 3502347711;
simcity.kResourceIDMeteorShowerStage = 3527801851;
simcity.kResourceIDCarW1 = 179625953;
simcity.kResourceIDCarW2 = 179625954;
simcity.kResourceIDCarW3 = 179625955;
simcity.kResourceIDPickUp = 3978245845;
simcity.kResourceIDPickUpByBus = 1495886308;
simcity.kResourceIDPickUpByCoach = 3783750388;
simcity.kResourceIDCruiseShipPickUp = 2895034266;
simcity.kResourceIDFerryPickUp = 4106525607;
simcity.kResourceIDPickedUp = 3593755026;
simcity.kResourceIDPickedUpByBus = 4274955557;
simcity.kResourceIDPickedUpByCoach = 1982778545;
simcity.kResourceIDPickedUpByCruiseShip = 1833157294;
simcity.kResourceIDPickedUpByFerry = 651958343;
simcity.kResourceIDNotPickedUp = 2076060703;
simcity.kResourceIDNotPickedUpByBus = 1657553854;
simcity.kResourceIDNotPickedUpBySchoolBus = 1441072122;
simcity.kResourceIDNotPickedUpByCoach = 230366378;
simcity.kResourceIDNotPickedUpByLightTrain = 3607259574;
simcity.kResourceIDNotPickedUpByTrain = 1768098354;
simcity.kResourceIDNotPickedUpByFerry = 2028102968;
simcity.kResourceIDConnectedToStation = 462100759;
simcity.kResourceIDAccessToOutside = 4287126537;
simcity.kResourceIDAccessToOutsideCapacity = 3065919109;
simcity.kResourceIDLocalW1PickedUpByBusToday = 198922811;
simcity.kResourceIDLocalW2PickedUpByBusToday = 3092711620;
simcity.kResourceIDLocalW1PickedUpByBusYesterday = 1048533540;
simcity.kResourceIDLocalW2PickedUpByBusYesterday = 134664051;
simcity.kResourceIDTouristW1PickedUpByBusToday = 2863121624;
simcity.kResourceIDTouristW2PickedUpByBusToday = 613911519;
simcity.kResourceIDTouristW1PickedUpByBusYesterday = 4271583023;
simcity.kResourceIDTouristW2PickedUpByBusYesterday = 2318696560;
simcity.kResourceIDLocalW1PickedUpByLightTrainToday = 1998780939;
simcity.kResourceIDLocalW2PickedUpByLightTrainToday = 3949678414;
simcity.kResourceIDLocalW1PickedUpByLightTrainYesterday = 3501678100;
simcity.kResourceIDLocalW2PickedUpByLightTrainYesterday = 1229039673;
simcity.kResourceIDTouristW1PickedUpByLightTrainToday = 778164714;
simcity.kResourceIDTouristW2PickedUpByLightTrainToday = 3944093959;
simcity.kResourceIDTouristW1PickedUpByLightTrainYesterday = 213690493;
simcity.kResourceIDTouristW2PickedUpByLightTrainYesterday = 1485885944;
simcity.kResourceIDLocalW1PickedUpByTrainToday = 3635219655;
simcity.kResourceIDLocalW2PickedUpByTrainToday = 3885380148;
simcity.kResourceIDLocalW1PickedUpByTrainYesterday = 2545495480;
simcity.kResourceIDLocalW2PickedUpByTrainYesterday = 3177674691;
simcity.kResourceIDTouristW1PickedUpByTrainToday = 958783584;
simcity.kResourceIDTouristW2PickedUpByTrainToday = 761895475;
simcity.kResourceIDTouristW1PickedUpByTrainYesterday = 1006961751;
simcity.kResourceIDTouristW2PickedUpByTrainYesterday = 1114423292;
simcity.kResourceIDLocalW1PickedUpByBoatToday = 2147542143;
simcity.kResourceIDLocalW2PickedUpByBoatToday = 1372234094;
simcity.kResourceIDLocalW3PickedUpByBoatToday = 1258583105;
simcity.kResourceIDLocalW1PickedUpByBoatYesterday = 3874856208;
simcity.kResourceIDLocalW2PickedUpByBoatYesterday = 538797401;
simcity.kResourceIDLocalW3PickedUpByBoatYesterday = 1531949142;
simcity.kResourceIDTouristW1PickedUpByBoatToday = 2669259714;
simcity.kResourceIDTouristW2PickedUpByBoatToday = 2226544835;
simcity.kResourceIDTouristW3PickedUpByBoatToday = 2698189464;
simcity.kResourceIDTouristW1PickedUpByBoatYesterday = 3845601557;
simcity.kResourceIDTouristW2PickedUpByBoatYesterday = 158441324;
simcity.kResourceIDTouristW3PickedUpByBoatYesterday = 2684440047;
simcity.kResourceIDBusStationUnlocked = 1267367868;
simcity.kResourceIDBus = 714721605;
simcity.kResourceIDBusT1 = 3750291136;
simcity.kResourceIDBusT2 = 3750291139;
simcity.kResourceIDTransitBusStop = 2211328792;
simcity.kResourceIDBusR2Stop = 3811986621;
simcity.kResourceIDBusPassenger = 4189067127;
simcity.kResourceIDBusTripsToday = 104916694;
simcity.kResourceIDBusTripsYesterday = 2825726017;
simcity.kResourceIDNumberOfBusT1Stops = 2543327979;
simcity.kResourceIDNumberOfBusT2Stops = 101227258;
simcity.kResourceIDNumberOfBusT1Garages = 2547598790;
simcity.kResourceIDNumberOfBusT2Garages = 1495901003;
simcity.kResourceIDBusT2StopUnlocked = 318227296;
simcity.kResourceIDMinutesWaitedForBusToday = 1479788868;
simcity.kResourceIDMinutesWaitedForBusYesterday = 252647411;
simcity.kResourceIDLeftBusStopToday = 2598015915;
simcity.kResourceIDLeftBusStopYesterday = 1082208436;
simcity.kResourceIDNumberOfRoadConnections = 1819330754;
simcity.kResourceIDBusPickUp = 4267116117;
simcity.kResourceIDTradeBusPickUp = 234755401;
simcity.kResourceIDCoach = 2308599143;
simcity.kResourceIDCoachPassenger = 330729179;
simcity.kResourceIDCoachTripsToday = 2981021506;
simcity.kResourceIDCoachTripsYesterday = 2363657365;
simcity.kResourceIDMinutesWaitedForCoachToday = 1384857760;
simcity.kResourceIDMinutesWaitedForCoachYesterday = 3434080407;
simcity.kResourceIDLeftCoachStopToday = 1842660811;
simcity.kResourceIDLeftCoachStopYesterday = 1127755732;
simcity.kResourceIDCoachPickUp = 3200020585;
simcity.kResourceIDTradeCoachPickUp = 3169816669;
simcity.kResourceIDTradeExcessBusR2 = 1045956962;
simcity.kResourceIDTradeExcessBusR2Stop = 3521009370;
simcity.kResourceIDTradeExcessBusR2Station = 3878085646;
simcity.kResourceIDSchoolBus = 3826984073;
simcity.kResourceIDSchoolBusT1 = 1369282620;
simcity.kResourceIDSchoolBusT2 = 1369282623;
simcity.kResourceIDSchoolBusR2 = 1268616873;
simcity.kResourceIDSchoolBusPassenger = 1584058483;
simcity.kResourceIDSchoolBusTripsToday = 2495024458;
simcity.kResourceIDSchoolBusTripsYesterday = 3639481821;
simcity.kResourceIDTradeExcessSchoolBusR2 = 2636466174;
simcity.kResourceIDTradeExcessSchoolBusR2Stop = 533710806;
simcity.kResourceIDTradeExcessSchoolBusR2Station = 453662962;
simcity.kResourceIDLeftSchoolBusStopToday = 3782194799;
simcity.kResourceIDLeftSchoolBusStopYesterday = 564478752;
simcity.kResourceIDFerryT1Stop = 3607048138;
simcity.kResourceIDFerryPassenger = 556969825;
simcity.kResourceIDFerryTripsToday = 1860616748;
simcity.kResourceIDFerryTripsYesterday = 2808285691;
simcity.kResourceIDNumberOfFerryT1Stops = 2422694861;
simcity.kResourceIDNumberOfFerryT1Garages = 504469036;
simcity.kResourceIDNumberOfBoatConnections = 2126456866;
simcity.kResourceIDMinutesWaitedForFerryToday = 32864094;
simcity.kResourceIDMinutesWaitedForFerryYesterday = 3827135785;
simcity.kResourceIDLeftFerryStopToday = 1961108665;
simcity.kResourceIDLeftFerryStopYesterday = 995074318;
simcity.kResourceIDTradeExcessFerryT1Stop = 3103783157;
simcity.kResourceIDCruiseShipT2Stop = 3693542656;
simcity.kResourceIDCruiseShipPassenger = 688848862;
simcity.kResourceIDCruiseShipTripsToday = 4113118981;
simcity.kResourceIDCruiseShipTripsYesterday = 2920531170;
simcity.kResourceIDNumberOfCruiseShipT2Stops = 3552480691;
simcity.kResourceIDMinutesWaitedForCruiseShipToday = 4103995125;
simcity.kResourceIDMinutesWaitedForCruiseShipYesterday = 4103742130;
simcity.kResourceIDLeftCruiseShipStopToday = 3819407512;
simcity.kResourceIDLeftCruiseShipStopYesterday = 1060019183;
simcity.kResourceIDLightTrain = 169392071;
simcity.kResourceIDLightTrainT1 = 3511031570;
simcity.kResourceIDLightTrainPassenger = 2119409729;
simcity.kResourceIDLightTrainTripsToday = 1498184588;
simcity.kResourceIDLightTrainTripsYesterday = 2677794139;
simcity.kResourceIDNumberOfLightTrainT1Stops = 641465773;
simcity.kResourceIDNumberOfLightTrainT1Garages = 816272908;
simcity.kResourceIDFreight = 3183939650;
simcity.kResourceIDMinutesWaitedForLightTrainToday = 3901361358;
simcity.kResourceIDMinutesWaitedForLightTrainYesterday = 988724665;
simcity.kResourceIDLeftLightTrainStopToday = 1902644379;
simcity.kResourceIDLeftLightTrainStopYesterday = 272732548;
simcity.kResourceIDTrainT2StopUnlocked = 3680034280;
simcity.kResourceIDTrainT2 = 1338428763;
simcity.kResourceIDTrainT2Stop = 2952376667;
simcity.kResourceIDTrainPassenger = 2229367087;
simcity.kResourceIDTrainTripsToday = 3765884158;
simcity.kResourceIDTrainTripsYesterday = 735445193;
simcity.kResourceIDNumberOfTrainT2Stops = 3566814322;
simcity.kResourceIDNumberOfRailConnections = 49028268;
simcity.kResourceIDMinutesWaitedForTrainToday = 769533620;
simcity.kResourceIDMinutesWaitedForTrainYesterday = 593114179;
simcity.kResourceIDLeftTrainStopToday = 4115668327;
simcity.kResourceIDLeftTrainStopYesterday = 2675474776;
simcity.kResourceIDTradeExcessTrainT2Stop = 2952296420;
simcity.kResourceIDRunway = 3965271245;
simcity.kResourceIDNumberOfAirTouristsToday = 685919593;
simcity.kResourceIDNumberOfAirTouristsYesterday = 1143867102;
simcity.kResourceIDNumberOfAirTouristsW2ArrivingToday = 1191555184;
simcity.kResourceIDNumberOfAirTouristsW2LeavingToday = 3417631458;
simcity.kResourceIDNumberOfAirTouristsW3ArrivingToday = 4171920487;
simcity.kResourceIDNumberOfAirTouristsW3LeavingToday = 1763210535;
simcity.kResourceIDNumberOfAirTouristsW2ArrivingYesterday = 623941127;
simcity.kResourceIDNumberOfAirTouristsW2LeavingYesterday = 3588127541;
simcity.kResourceIDNumberOfAirTouristsW3ArrivingYesterday = 132204632;
simcity.kResourceIDNumberOfAirTouristsW3LeavingYesterday = 1861324824;
simcity.kResourceIDAirCargoOutToday = 1258298642;
simcity.kResourceIDAirCargoOutYesterday = 3608506245;
simcity.kResourceIDAirportLowAttractionW2 = 2471830392;
simcity.kResourceIDAirportLowAttractionW3 = 2471830393;
simcity.kResourceIDNumberOfAirports = 95801457;
simcity.kResourceIDNumberOfAirportRunways = 1441572457;
simcity.kResourceIDNumberOfAirportCargoTerminals = 2104226977;
simcity.kResourceIDNumberOfAirportPassengerTerminals = 2361483993;
simcity.kResourceIDCargoToken = 1461559886;
simcity.kResourceIDPassengerToken = 2805427830;
simcity.kResourceIDPassengerAirplaneT2 = 2548916995;
simcity.kResourceIDPassengerAirplaneT1W2 = 2928432743;
simcity.kResourceIDPassengerAirplaneT1W3 = 2928432742;
simcity.kResourceIDTourist_Leaving = 209074924;
simcity.kResourceIDMinutesWaitedForPlaneToday = 3176808940;
simcity.kResourceIDMinutesWaitedForPlaneYesterday = 2921274043;
simcity.kResourceIDSpecialization_Education = 3461677465;
simcity.kResourceIDSpecialization_Gambling = 3742950856;
simcity.kResourceIDSpecialization_Metals = 3228802589;
simcity.kResourceIDSpecialization_Petroleum = 2304903770;
simcity.kResourceIDSpecialization_Trade = 1543642725;
simcity.kResourceIDSpecialization_Electronics = 342194522;
simcity.kResourceIDSpecialization_Guided = 2128108757;
simcity.kResourceIDSpecializationNumber = 3834949841;
simcity.kResourceIDTradeTrackingSpecializationNumber = 4149866982;
simcity.kResourceIDParis = 2073910180;
simcity.kResourceIDLondon = 699808721;
simcity.kResourceIDBerlin = 1535794783;
simcity.kResourceIDHeroesAndVillains = 2321936720;
simcity.kResourceIDDLC_RomanCasino = 3372236679;
simcity.kResourceIDCurrentMissions = 4175140589;
simcity.kResourceIDMissionTimer = 1693444796;
simcity.kResourceIDTotalObjectivesComplete = 252940416;
simcity.kResourceIDTotalObjectives = 3499206737;
simcity.kResourceIDLinearObjectives = 2144919862;
simcity.kResourceIDGlobalMission_MSTutorialCreateResidentialPt2 = 3879209279;
simcity.kResourceIDGlobalMission_MSTutorialGovernment = 3701754366;
simcity.kResourceIDGlobalMission_MSTutorialClickGreatWorkSpeechBubble = 586776623;
simcity.kResourceIDGlobalMission_MSTutorialClickSewageSpeechBubble = 3446499045;
simcity.kResourceIDGlobalMission_MSTutorialClickGarbageSpeechBubble = 2434760902;
simcity.kResourceIDGlobalMission_MSCivicClickSpeechBubble = 2213868619;
simcity.kResourceIDGlobalMission_MSCivicCreateResidential = 3352395677;
simcity.kResourceIDGlobalMission_MSCivicClickSpeechBubble2 = 94147107;
simcity.kResourceIDGlobalMission_MSCivicClickSpeechBubble3 = 94147106;
simcity.kResourceIDGlobalMission_MSCivicZoneIndustrial = 3870197806;
simcity.kResourceIDGlobalMission_MSCivicTutorialCreateSchool = 2853402327;
simcity.kResourceIDGlobalMission_MSCivicZoneCommercial = 852667817;
simcity.kResourceIDGlobalMission_MSCivicPowerWantPower = 121174061;
simcity.kResourceIDGlobalMission_MSCivicClickSpeechBubble6 = 94147111;
simcity.kResourceIDGlobalMission_MSCivicTutorialModules = 476261186;
simcity.kResourceIDGlobalMission_MSCivicClickSpeechBubble7 = 94147110;
simcity.kResourceIDGlobalMission_MSCivicBuildRoad = 2507435577;
simcity.kResourceIDGlobalMission_MSCivicClickSpeechBubble5 = 94147108;
simcity.kResourceIDGlobalMission_MSCivicClickSpeechBubble4 = 94147109;
simcity.kResourceIDGlobalMission_MSCivicTutorialCreateFireStation = 1614780409;
simcity.kResourceIDGlobalMission_MSCivicBuildRoadToCityConnection = 576251903;
simcity.kResourceIDGlobalMission_MSCivicTutorialBudget = 1515569036;
simcity.kResourceIDGlobalMission_MSCivicTutorialDeselectDemolishTool = 3786618521;
simcity.kResourceIDGlobalMission_MSCivicTutorialCoalPower = 2693848181;
simcity.kResourceIDGlobalMission_MSCivicTutorialEnd = 1570715066;
simcity.kResourceIDGlobalMission_MSCivicTutorialSpeedControls = 3107480378;
simcity.kResourceIDGlobalMission_MSCrimeExpandPolice = 1079805979;
simcity.kResourceIDGlobalMission_MSCivicBalanceTheBudget = 602089599;
simcity.kResourceIDGlobalMission_MSCivicGettingStarted = 108108054;
simcity.kResourceIDGlobalMission_MSCivicBuildCityHall = 2727311327;
simcity.kResourceIDGlobalMission_MSCivicBuildMayorsHouse = 728854500;
simcity.kResourceIDGlobalMission_MSCoalTutorialStripMine = 1712335721;
simcity.kResourceIDGlobalMission_MSCoalPlaceCoalMine = 3681260405;
simcity.kResourceIDGlobalMission_MSCoalExtendCoalMine = 3321307040;
simcity.kResourceIDGlobalMission_MSCommercialNeedShops = 541297306;
simcity.kResourceIDGlobalMission_MSCrimeNeedPolice = 2801189047;
simcity.kResourceIDGlobalMission_MSFireArsonist = 3975263620;
simcity.kResourceIDGlobalMission_MSFireBuildFireStation = 3743811193;
simcity.kResourceIDGlobalMission_MSFireHeatWave = 2613467968;
simcity.kResourceIDGlobalMission_MSHealthNeedMoreAmbulances = 2720567733;
simcity.kResourceIDGlobalMission_MSJobsNeedJobs = 1634898049;
simcity.kResourceIDGlobalMission_MSPowerNeedPower = 2101463207;
simcity.kResourceIDGlobalMission_TutorialSpeechBubble = 3545973611;
simcity.kResourceIDGlobalMission_MSTutorialReclaimCity = 2755963149;
simcity.kResourceIDGlobalMission_MSTutorialClickRegionSpeechBubble = 1364388285;
simcity.kResourceIDGlobalMission_MSPowerNeedMorePowerForIndustry = 4179444541;
simcity.kResourceIDGlobalMission_MSPowerImportCoal = 2242556846;
simcity.kResourceIDGlobalMission_MSPowerAddCoalTrucks = 3714447040;
simcity.kResourceIDGlobalMission_MSResidentialMoreHouses = 14182385;
simcity.kResourceIDGlobalMission_MSResidentialIncreaseW2Housing = 3705408971;
simcity.kResourceIDGlobalMission_MSTradeConnectToNeighbour = 2653492967;
simcity.kResourceIDGlobalMission_MSTradeBuildBridge = 1281926668;
simcity.kResourceIDGlobalMission_MSWaterNeedWater = 3422757611;
simcity.kResourceIDGlobalMission_MSWaterNeedMoreWaterForIndustry = 1855077613;
simcity.kResourceIDGlobalMission_MSCoalPlaceHQ = 231824156;
simcity.kResourceIDGlobalMission_MSCoalRemoveAllCoal = 715366196;
simcity.kResourceIDGlobalMission_MSCivicProtestAboutSickness = 3355307142;
simcity.kResourceIDGlobalMission_MSCivicProtestAboutTaxes = 1164007788;
simcity.kResourceIDGlobalMission_MSCivicProtestAboutPollution = 3659154265;
simcity.kResourceIDGlobalMission_MSCivicProtestAboutNoWater = 3359132361;
simcity.kResourceIDGlobalMission_MSCivicProtestAboutNoPower = 3181212887;
simcity.kResourceIDGlobalMission_MSCivicProtestAboutGarbage = 2404482678;
simcity.kResourceIDGlobalMission_MSCivicProtestAboutNoRent = 2970058381;
simcity.kResourceIDGlobalMission_MSCivicProtestAboutNoDesirability = 3136214553;
simcity.kResourceIDGlobalMission_MSCivicProtestAboutCrime = 3015720457;
simcity.kResourceIDGlobalMission_MSCivicCreateTownHall = 3702561096;
simcity.kResourceIDGlobalMission_MSGameRockCity1 = 1729074402;
simcity.kResourceIDGlobalMission_MSEducationBackToSchool1 = 3895237884;
simcity.kResourceIDGlobalMission_MSEducationBackToSchool2 = 3895237887;
simcity.kResourceIDGlobalMission_MSEducationBackToSchool3 = 3895237886;
simcity.kResourceIDGlobalMission_MSEducationBackToSchool4 = 3895237881;
simcity.kResourceIDGlobalMission_MSEducationBackToSchool5 = 3895237880;
simcity.kResourceIDGlobalMission_MSEducationBackToSchool6 = 3895237883;
simcity.kResourceIDGlobalMission_MSEducationBackToSchool7 = 3895237882;
simcity.kResourceIDGlobalMission_MSEducationBackToSchool8 = 3895237877;
simcity.kResourceIDGlobalMission_MSEducationBackToSchool9 = 3895237876;
simcity.kResourceIDGlobalMission_MSEducationBackToSchool10 = 2050695300;
simcity.kResourceIDGlobalMission_MSGameMissionChainTest1 = 1178772435;
simcity.kResourceIDGlobalMission_MSGameMissionChainTest2 = 1178772432;
simcity.kResourceIDGlobalMission_MSBusinessGamblingBigGamble1 = 1642057161;
simcity.kResourceIDGlobalMission_MSBusinessGamblingBigGamble2 = 1642057162;
simcity.kResourceIDGlobalMission_MSBusinessGamblingBigGamble3 = 1642057163;
simcity.kResourceIDGlobalMission_MSBusinessGamblingBigGamble4 = 1642057164;
simcity.kResourceIDGlobalMission_MSBusinessGamblingBigGamble5 = 1642057165;
simcity.kResourceIDGlobalMission_MSBusinessGamblingBigGamble5_Event = 3656553728;
simcity.kResourceIDGlobalMission_MSBusinessGamblingBigGamble6 = 1642057166;
simcity.kResourceIDGlobalMission_MSBusinessGamblingBigGamble7 = 1642057167;
simcity.kResourceIDGlobalMission_MSBusinessGamblingBigGamble8 = 1642057152;
simcity.kResourceIDGlobalMission_MSBusinessGamblingBigGamble9 = 1642057153;
simcity.kResourceIDGlobalMission_MSBusinessGamblingBigGamble10 = 3696292699;
simcity.kResourceIDGlobalMission_MSBusinessGamblingBigGamble10_EventStarted = 3514025645;
simcity.kResourceIDGlobalMission_MSBusinessGamblingBigGamble11 = 3696292698;
simcity.kResourceIDGlobalMission_MSBusinessGamblingBigGamble12 = 3696292697;
simcity.kResourceIDGlobalMission_MSBusinessGamblingBigGamble13 = 3696292696;
simcity.kResourceIDGlobalMission_MSBusinessGamblingBigGamble14 = 3696292703;
simcity.kResourceIDGlobalMission_MSBusinessGamblingBigGamble15 = 3696292702;
simcity.kResourceIDGlobalMission_MSBusinessGamblingBigGamble16 = 3696292701;
simcity.kResourceIDGlobalMission_MSBusinessGamblingBigGamble17 = 3696292700;
simcity.kResourceIDGlobalMission_MSCivicHighwayConnection = 2255928586;
simcity.kResourceIDGlobalMission_MSTutorialClickPoliceSpeechBubble = 3133544067;
simcity.kResourceIDGlobalMission_MSTutorialPoliceStation = 4057625903;
simcity.kResourceIDGlobalMission_MSCivicTutorialCreateSchool = 2853402327;
simcity.kResourceIDGlobalMission_MSTutorialClickSchoolSpeechBubble = 3069258105;
simcity.kResourceIDGlobalMission_MSBusinessMetalsCoalTown1 = 995763111;
simcity.kResourceIDGlobalMission_MSBusinessMetalsCoalTown2 = 995763108;
simcity.kResourceIDGlobalMission_MSBusinessMetalsCoalTown3 = 995763109;
simcity.kResourceIDGlobalMission_MSBusinessMetalsCoalTown4 = 995763106;
simcity.kResourceIDGlobalMission_MSBusinessMetalsCoalTown5 = 995763107;
simcity.kResourceIDGlobalMission_MSBusinessMetalsCoalTown6 = 995763104;
simcity.kResourceIDGlobalMission_MSBusinessMetalsCoalTown6_EventStarted = 231060860;
simcity.kResourceIDGlobalMission_MSBusinessMetalsCoalTown7 = 995763105;
simcity.kResourceIDGlobalMission_MSBusinessMetalsCoalTown8 = 995763118;
simcity.kResourceIDGlobalMission_MSBusinessMetalsCoalTown9 = 995763119;
simcity.kResourceIDGlobalMission_MSBusinessMetalsCoalTown10 = 367402965;
simcity.kResourceIDGlobalMission_MSBusinessMetalsCoalTown11 = 367402964;
simcity.kResourceIDGlobalMission_MSBusinessMetalsCoalTown12 = 367402967;
simcity.kResourceIDGlobalMission_MSBusinessMetalsCoalTown13 = 367402966;
simcity.kResourceIDGlobalMission_MSBusinessMetalsCoalTown14 = 367402961;
simcity.kResourceIDGlobalMission_MSBusinessMetalsCoalTown15 = 367402960;
simcity.kResourceIDGlobalMission_MSBusinessMetalsCoalTown16 = 367402963;
simcity.kResourceIDGlobalMission_MSBusinessOilOilFields1 = 892324973;
simcity.kResourceIDGlobalMission_MSBusinessOilOilFields2 = 892324974;
simcity.kResourceIDGlobalMission_MSBusinessOilOilFields3 = 892324975;
simcity.kResourceIDGlobalMission_MSBusinessOilOilFields4 = 892324968;
simcity.kResourceIDGlobalMission_MSBusinessOilOilFields5 = 892324969;
simcity.kResourceIDGlobalMission_MSBusinessOilOilFields6 = 892324970;
simcity.kResourceIDGlobalMission_MSBusinessOilOilFields6_EventStarted = 1285698982;
simcity.kResourceIDGlobalMission_MSBusinessOilOilFields7 = 892324971;
simcity.kResourceIDGlobalMission_MSBusinessOilOilFields8 = 892324964;
simcity.kResourceIDGlobalMission_MSBusinessOilOilFields9 = 892324965;
simcity.kResourceIDGlobalMission_MSBusinessOilOilFields10 = 658427815;
simcity.kResourceIDGlobalMission_MSBusinessOilOilFields11 = 658427814;
simcity.kResourceIDGlobalMission_MSBusinessOilOilFields12 = 658427813;
simcity.kResourceIDGlobalMission_MSBusinessOilOilFields13 = 658427812;
simcity.kResourceIDGlobalMission_MSBusinessOilOilFields14 = 658427811;
simcity.kResourceIDGlobalMission_MSBusinessElectronicsZTronix2 = 2069738958;
simcity.kResourceIDGlobalMission_MSBusinessElectronicsZTronix4 = 2069738952;
simcity.kResourceIDGlobalMission_MSBusinessElectronicsZTronix6 = 2069738954;
simcity.kResourceIDGlobalMission_MSBusinessElectronicsZTronix7 = 2069738955;
simcity.kResourceIDGlobalMission_MSBusinessElectronicsZTronix13 = 25506180;
simcity.kResourceIDGlobalMission_MSBusinessTradeFreeMarket12 = 1271820632;
simcity.kMapIDPolice = 291106007;
simcity.kMapIDSoil = 687380132;
simcity.kMapIDSoilLayer = 1872718515;
simcity.kMapIDCoalDeposit = 3615082870;
simcity.kMapIDRadiation = 493973294;
simcity.kMapIDOreDeposit = 3612013099;
simcity.kMapIDAirPollution = 1597524951;
simcity.kMapIDGroundPollution = 4137546182;
simcity.kMapIDOilReservoir = 1993412594;
simcity.kMapIDWaterTable = 261282902;
simcity.kMapIDWind = 1537061107;
simcity.kMapIDDesirability_RW2 = 3428137420;
simcity.kMapIDDesirability_RW3 = 3428137421;
simcity.kMapIDDesirability_CW2 = 3430550245;
simcity.kMapIDDesirability_CW3 = 3430550244;
simcity.kToolIDPathSelector = 3342964767;
simcity.kToolIDRoadDraw_Path_Main_MainStreet_N = 1734870231;
simcity.kToolIDRoadDraw_Path_Main_4LaneRoad_N = 1091932133;
simcity.kToolIDRoadDraw_Path_Main_Avenue_N = 751907027;
simcity.kToolIDPlop_T_Transport_Shuttle_T1_Base_Modern_01 = 2046029075;
simcity.kToolIDPlop_T_Transport_Bus_T2_Base_01 = 1437917007;
simcity.kToolIDLotZoneResidential = 3592775070;
simcity.kToolIDLotZoneIndustrial = 3248163797;
simcity.kToolIDLotZoneCommercial = 3536316930;
simcity.kToolIDPlop_T_PowerCoal_T1_Base_01_01_N = 2427954603;
simcity.kToolIDPlop_Coal_ExcavatorGarage_T2 = 1182525564;
simcity.kToolIDPlop_Coal_RetrieverGarage_T2 = 1121316591;
simcity.kToolIDPlop_Coal_TruckGarage_T2 = 3654966590;
simcity.kToolIDPlop_T_PowerWind_PlantBase_01_01_N = 3162783387;
simcity.kToolIDPlopT_Power_CoalT1_Generator_01_01_N = 915293976;
simcity.kToolIDPlop_T_Edu_T1_GradeSchoolBase_01_01_N = 696729506;
simcity.kToolIDPlop_T_Fire_T1_Base = 1828861422;
simcity.kToolIDPlop_T_Garbage_T1_Garage = 2180458371;
simcity.kToolIDPlop_T_Water_T1_WaterTower_01_01_N = 1938059915;
simcity.kToolIDPlop_T_HQ_Casino_Commerce_01 = 3093343809;
simcity.kToolIDPlop_T_Transport_Rail_T2_Base_01 = 3900255577;
simcity.kToolIDRoadDraw_Path_Main_HeavyRail_N = 3673579640;
simcity.kToolIDPlop_T_Air_T1_AirStripBase_01_01_N = 3059032927;
simcity.kToolIDBulldozer = 2536567712;
simcity.kToolIDPlop_T_PowerWind_SmallTurbine_01_01_N = 517089645;
simcity.kToolIDPlop_T_Edu_T1_GradeSchoolClassroom_01_01_N = 2650093832;
simcity.kToolIDPlop_T_Sewage_T1_Base_01_01_N = 3197468449;
simcity.kToolIDPlop_T_ImEx_T1_StorageLot_Coal_01 = 2056252440;
simcity.kToolIDPlop_T_ImEx_T1_StorageLot_Alloy_01 = 2351148906;
simcity.kToolIDPlop_T_ImEx_T1_StorageLot_OreRaw_01 = 3020790721;
simcity.kToolIDPlop_T_ImEx_T1_StorageLot_OilCrude_01 = 4268232492;
simcity.kToolIDPlop_T_ImEx_T2_Garage_01 = 880301932;
simcity.kToolIDPlop_T_ImEx_Crate_T2_Rail_Base_01 = 2453591775;
simcity.kToolIDPlop_T_ImEx_Crate_T2_Boat_Base_01 = 877575481;
simcity.kRuleIDSCPlayerRuleToggleImportExport = 207700323;
simcity.kRuleIDSCPlayerRuleToggleOnOff = 207700320;
simcity.kRuleIDSCPlayerRuleUpgradeBuilding = 236183465;
simcity.kRuleIDSCPlayerRuleCycleDeliveries = 245353295;
simcity.kRuleIDSCPlayerRuleToggleDeliveries = 207700324;
simcity.kRuleIDSCPlayerRuleToggleGlobalTrade = 207700325;
simcity.kRuleIDSCPlayerRuleRunCheats = 218716699;
simcity.kRuleIDSCPlayerRuleCycleResearch = 227885025;
simcity.kRuleIDSCPlayerRuleCancelResearch = 227885026;
simcity.kRuleIDSCPlayerRuleStartResearch = 227885027;
simcity.kRuleIDSCPlayerRuleCheckObjectives = 227885028;
simcity.kRuleIDSCPlayerRuleOnExitBox = 2214556984;
simcity.kUnitFlagUnpowered = 0;
simcity.kUnitFlagUnwatered = 1;
simcity.kUnitFlagChance25Percent = 4;
simcity.kUnitFlagChance50Percent = 5;
simcity.kUnitFlagChance75Percent = 6;
simcity.kUnitFlagIDDeliveriesAllowed = 7;
simcity.kUnitFlagEvacuation = 8;
simcity.kUnitFlagIDImportLot = 9;
simcity.kUnitFlagIDExportLot = 10;
simcity.kUnitFlagOpenForBusiness = 19;
simcity.kUnitFlagOperational = 3;
simcity.kUnitFlagAbandoned = 11;
simcity.kUnitFlagBurning = 12;
simcity.kUnitFlagFoundation = 13;
simcity.kUnitFlagNormal = 14;
simcity.kUnitFlagRubble = 15;
simcity.kUnitFlagUnderConstruction = 16;
simcity.kUnitFlagIsOnFire = 20;
simcity.kUnitFlagVacant = 22;
simcity.kUnitFlagCrimeInProgress = 28;
simcity.kUnitFlagActiveBuilding = 29;
simcity.kUnitFlagProgressAllowed = 32;
simcity.kUnitFlagGreatWorksConstructionSite = 33;
simcity.kUnitFlagDoNotBulldoze = 38;
simcity.kUnitFlagGreatWorksOperational = 39;
simcity.kUnitFlagIDIsToy = 41;
simcity.kUnitFlagIDContinuousWorkplace = 44;
simcity.kUnitFlagIDEventSet = 47;
simcity.kUnitFlagActiveBuildingLock = 55;
simcity.kResourceIDElectronicsBaseUnlocked = 556089978;
simcity.kResourceIDGamblingHallUnlocked = 1279496530;
simcity.kResourceIDOilT1BaseUnlocked = 3752123782;
simcity.kResourceIDOreMineUnlocked = 1001527221;
simcity.kResourceIDTownHallBubbles = 2877554989;
simcity.ToyTaskPanelUI = {};
simcity.cToyTaskPanelUIHandler = function () {
  this.UIHandler = scrui.cUIHandler;
  this.UIHandler();
  this.mParentControl = this.mMouseEaterWindow = null
};
simcity.cToyTaskPanelUIHandler.kBtnClose = 236354934;
simcity.cToyTaskPanelUIHandler.kBtnDismiss = 236354919;
simcity.cToyTaskPanelUIHandler.kBtnAccept = 236354876;
simcity.cToyTaskPanelUIHandler.kBtnClickPanel = 235734144;
simcity.cToyTaskPanelUIHandler.kBtnRight = 235045474;
simcity.cToyTaskPanelUIHandler.kBtnLeft = 235045473;
simcity.cToyTaskPanelUIHandler.kRightImageWindow = 235488781;
simcity.cToyTaskPanelUIHandler.kLeftImageWindow = 235488799;
simcity.cToyTaskPanelUIHandler.kCenterImageWindow = 235488809;
simcity.cToyTaskPanelUIHandler.kPosterGroupWindow = 235043597;
simcity.cToyTaskPanelUIHandler.kDescriptionText = 235053604;
simcity.cToyTaskPanelUIHandler.kHeaderText = 235039745;
simcity.cToyTaskPanelUIHandler.kEventTitleText = 233947634;
simcity.cToyTaskPanelUIHandler.kCostText = 246543986;
simcity.cToyTaskPanelUIHandler.kProfitText = 249659556;
simcity.cToyTaskPanelUIHandler.kTipText = 235054034;
simcity.cToyTaskPanelUIHandler.kMainPosterWindow = 235557468;
simcity.cToyTaskPanelUIHandler.kProgressText = 235053592;
simcity.cToyTaskPanelUIHandler.kAnimLeft = 235045566;
simcity.cToyTaskPanelUIHandler.kAnimRight = 235043381;
simcity.cToyTaskPanelUIHandler.kLockedWindow = 239206332;
simcity.cToyTaskPanelUIHandler.kLockedDescriptionText = 239206402;
goog.inherits(simcity.cToyTaskPanelUIHandler, scrui.cUIHandler);
simcity.cToyTaskPanelUIHandler.prototype.Init = function (a) {
  this.mLayout = gUIManager.LoadAndCacheLayout("Layouts/ToyTaskPanel/ToyTaskPanel.js", a);
  this.mLayout.SetVisibility(!1);
  this.mSelectedOption = 0;
  this.mCurrentEventIndex = -1;
  this.mLeftWindow = this.mLayout.FindControlByID(simcity.cToyTaskPanelUIHandler.kLeftImageWindow);
  this.mCenterWindow = this.mLayout.FindControlByID(simcity.cToyTaskPanelUIHandler.kCenterImageWindow);
  this.mRightWindow = this.mLayout.FindControlByID(simcity.cToyTaskPanelUIHandler.kRightImageWindow);
  this.mMainPoster = this.mLayout.FindControlByID(simcity.cToyTaskPanelUIHandler.kMainPosterWindow);
  this.mDescriptionText = this.mLayout.FindControlByID(simcity.cToyTaskPanelUIHandler.kDescriptionText);
  this.mPosterGroup = this.mLayout.FindControlByID(simcity.cToyTaskPanelUIHandler.kPosterGroupWindow);
  this.mProgressText = this.mLayout.FindControlByID(simcity.cToyTaskPanelUIHandler.kProgressText);
  this.mHeaderText = this.mLayout.FindControlByID(simcity.cToyTaskPanelUIHandler.kHeaderText);
  this.mTipText = this.mLayout.FindControlByID(simcity.cToyTaskPanelUIHandler.kTipText);
  this.mEventTitleText = this.mLayout.FindControlByID(simcity.cToyTaskPanelUIHandler.kEventTitleText);
  this.mCostText = this.mLayout.FindControlByID(simcity.cToyTaskPanelUIHandler.kCostText);
  this.mProfitText = this.mLayout.FindControlByID(simcity.cToyTaskPanelUIHandler.kProfitText);
  this.mAcceptButton = this.mLayout.FindControlByID(simcity.cToyTaskPanelUIHandler.kBtnAccept);
  this.mRightButton = this.mLayout.FindControlByID(simcity.cToyTaskPanelUIHandler.kBtnRight);
  this.mLeftButton = this.mLayout.FindControlByID(simcity.cToyTaskPanelUIHandler.kBtnLeft);
  this.mLockedWindow = this.mLayout.FindControlByID(simcity.cToyTaskPanelUIHandler.kLockedWindow);
  this.mLockedDescriptionText = this.mLayout.FindControlByID(simcity.cToyTaskPanelUIHandler.kLockedDescriptionText);
  this.mToolPickerBindings = {};
  this.mUniquePickers = {};
  this.mCurrentPicker = void 0;
  this.mReasearchCostLocale = new scrui.cLocaleString("ToyTaskPanel.json", "0x0ee1a91b", "Research Cost");
  this.mReasearchProfitLocale = new scrui.cLocaleString("ToyTaskPanel.json", "0x0ee1a91c", "Research Profit");
  this.mEventCostLocale =
    new scrui.cLocaleString("ToyTaskPanel.json", "0x0ee7fcaa", "Event Cost");
  this.mEventProfitLocale = new scrui.cLocaleString("ToyTaskPanel.json", "0x0ee7fcab", "Event Profit");
  for (a = 0; a < simcity.Pickers.length; a++) {
    simcity.Pickers[a].pickerTool && (this.mUniquePickers[simcity.Pickers[a].pickerTool] = {
        picker : simcity.Pickers[a]
      });
    for (var b = 0; b < simcity.Pickers[a].tools.length; b++)
      this.mToolPickerBindings[simcity.Pickers[a].tools[b][0]] = {
        picker : simcity.Pickers[a],
        index : b
      }
  }
};
simcity.cToyTaskPanelUIHandler.prototype.Start = function (a) {
  var b = !1;
  this.IsAUniquePicker(a) && (b = !0);
  if (!0 === this.ToolHasAPicker(a) || !0 === b) {
    for (var c = [], d = this.mCurrentPicker = !0 === b ? this.mUniquePickers[a].picker : this.mToolPickerBindings[a].picker, b = [], e = 0; e < d.tools.length; ++e)
      b[e] = scrui.BuildRequestQuery(["tools", d.tools[e][0], "toolPickerInfo"]);
    scrui.RequestGameData(b, function (a) {
      for (var b = 0; b < a.length; b++) {
        var e = a[b];
        if (e) {
          var i = e.toolName,
          j = e.toolDescription,
          k = scrui.DecimalToHex(i.stringID),
          l =
            scrui.DecimalToHex(j.stringID);
          c[b] = {
            marqueeImage : scrui.PathFromResourceKey(e.marqueeImage),
            eventTitleText : new scrui.cLocaleString("Units.json", k, i.placeholder),
            textDescription : new scrui.cLocaleString("Tools.json", l, j.placeholder),
            textChooseType : d.textChooseType,
            textHeader : d.textHeader
          }
        }
      }
    });
    this.mCurrentDataBindings = c;
    this.mTotalOptions = this.mCurrentDataBindings.length;
    this.mLayout.SetVisibility(!0);
    this.mSelectedOption = this.mToolPickerBindings[a].index
  } else
    this.mCurrentPicker = void 0, this.mCurrentDataBindings =
      a, this.mTotalOptions = this.mCurrentDataBindings.length, this.mLayout.SetVisibility(!0), this.mSelectedOption = 0;
  this.RedrawPanels();
  this.mRightButton.SetVisibility(1 < this.mTotalOptions);
  this.mLeftButton.SetVisibility(1 < this.mTotalOptions)
};
simcity.cToyTaskPanelUIHandler.prototype.ToolHasAPicker = function (a) {
  return this.mToolPickerBindings.hasOwnProperty(a)
};
simcity.cToyTaskPanelUIHandler.prototype.IsAUniquePicker = function (a) {
  return this.mUniquePickers.hasOwnProperty(a)
};
simcity.cToyTaskPanelUIHandler.prototype.SetUnit = function (a) {
  var b = this;
  b.mUnitRef = a;
  b.mBaseUnitString = scrui.RequestStringFromUnitRef(a);
  a = [scrui.BuildRequestQuery(["units", b.mBaseUnitString, "bins", simcity.kResourceIDActiveEventResearch])];
  scrui.RequestGameData(a, function (a) {
    b.mCurrentEventIndex = a[0].amount
  })
};
simcity.cToyTaskPanelUIHandler.prototype.SetVisible = function (a) {
  this.mLayout.SetVisibility(a)
};
simcity.cToyTaskPanelUIHandler.prototype.RedrawPanels = function () {
  var a = this.mSelectedOption - 1,
  b = this.mSelectedOption,
  c = this.mSelectedOption + 1;
  0 > a && (a = this.mTotalOptions - 1);
  c > this.mTotalOptions - 1 && (c = 0);
  this.mLeftWindow.SetWindowImage(this.mCurrentDataBindings[a].marqueeImage);
  this.mDescriptionText.SetLocaleText(this.mCurrentDataBindings[b].textDescription);
  this.mHeaderText.SetLocaleText(this.mCurrentDataBindings[b].textHeader);
  this.mTipText.SetLocaleText(this.mCurrentDataBindings[b].textChooseType);
  this.mCenterWindow.SetWindowImage(this.mCurrentDataBindings[b].marqueeImage);
  this.mRightWindow.SetWindowImage(this.mCurrentDataBindings[c].marqueeImage);
  this.mMainPoster.SetWindowImage(this.mCurrentDataBindings[b].marqueeImage);
  this.mProgressText.SetRawText(" " + (this.mSelectedOption + 1) + "/" + this.mTotalOptions);
  this.mCurrentDataBindings[b].eventTitleText && (this.mEventTitleText.SetVisibility(!0), this.mEventTitleText.SetLocaleText(this.mCurrentDataBindings[b].eventTitleText));
  var d = !1,
  e = !1;
  if (this.mCurrentDataBindings[b].hasOwnProperty("completedGlobalBin")) {
    var f =
      this;
    scrui.RequestGameData([scrui.BuildRequestQuery(["bins", this.mCurrentDataBindings[b].completedGlobalBin])], function (a) {
      if (a[0].amount > 0)
        d = e = true
    })
  }
  !d && this.mCurrentDataBindings[b].hasOwnProperty("lockedGlobalBin") && (f = this, scrui.RequestGameData([scrui.BuildRequestQuery(["bins", this.mCurrentDataBindings[b].lockedGlobalBin])], function (a) {
      a[0].amount == 0 && (d = true)
    }));
  e ? this.mLockedDescriptionText.SetLocaleText(new scrui.cLocaleString("GlobalUI.json", "0x0f065a6d", "kResearchCompleted")) : d && this.mCurrentDataBindings[b].hasOwnProperty("lockedTextDescription") ?
  this.mLockedDescriptionText.SetLocaleText(this.mCurrentDataBindings[b].lockedTextDescription) : this.mLockedDescriptionText.SetRawText("");
  this.mLockedWindow.SetOpacity(1);
  this.mLockedWindow.SetVisibility(d);
  this.mAcceptButton.SetVisibility(!d);
  this.mCurrentDataBindings[b].hasOwnProperty("researchCost") ? (f = this, a = [scrui.BuildRequestQuery([simcity.kDataBinAmount, simcity.kResourceIDSimoleons]), scrui.BuildRequestQuery([simcity.kDataUnits, f.mBaseUnitString, simcity.kDataProperties, this.mCurrentDataBindings[b].researchCost])],
    scrui.RequestGameData(a, function (a) {
      f.mCostText.SetVisibility(true);
      f.mProfitText.SetVisibility(false);
      f.mProfitText.mParentControl.SetVisibility(false);
      f.mCostText.SetLocaleText(f.mReasearchCostLocale, {
        currency : a[1]
      });
      if (a[0] < a[1] || a[2]) {
        f.mCostText.SetTextColor("red");
        f.mAcceptButton.SetEnabled(false)
      } else {
        f.mCostText.SetTextColor("green");
        f.mAcceptButton.SetEnabled(true)
      }
    })) : this.mCurrentDataBindings[b].hasOwnProperty("eventCost") ? (f = this, a = [scrui.BuildRequestQuery([simcity.kDataBinAmount, simcity.kResourceIDSimoleons])],
    scrui.RequestGameData(a, function (a) {
      f.mCostText.SetVisibility(true);
      f.mProfitText.SetVisibility(true);
      f.mProfitText.mParentControl.SetVisibility(true);
      f.mCostText.SetLocaleText(f.mEventCostLocale, {
        currency : f.mCurrentDataBindings[b].eventCost
      });
      f.mProfitText.SetLocaleText(f.mEventProfitLocale, {
        currency : f.mCurrentDataBindings[b].eventProfit
      });
      if (a[0] < f.mCurrentDataBindings[b].eventCost || a[2]) {
        f.mCostText.SetTextColor("red");
        f.mAcceptButton.SetEnabled(false)
      } else {
        f.mCostText.SetTextColor("green");
        f.mAcceptButton.SetEnabled(true)
      }
    })) :
  (f = this, a = [scrui.BuildRequestQuery([simcity.kDataBinAmount, simcity.kResourceIDSimoleons]), scrui.BuildRequestQuery(["tools", this.mCurrentPicker.tools[this.mSelectedOption], "isLocked"])], scrui.RequestGameData(a, function (a) {
      a[1] ? f.mAcceptButton.SetEnabled(false) : f.mAcceptButton.SetEnabled(true)
    }), f.mCostText.SetVisibility(!1), f.mCostText.mParentControl.SetVisibility(!1), f.mProfitText.SetVisibility(!1), f.mProfitText.mParentControl.SetVisibility(!1))
};
simcity.cToyTaskPanelUIHandler.prototype.HandleUIMessage = function (a, b, c) {
  var d = !1,
  e = 0;
  scrui.cUIHandler.prototype.HandleUIMessage.call(this, a, b, c);
  switch (a) {
  case scrui.kMsgTypeButtonClicked:
    switch (b) {
    case simcity.cToyTaskPanelUIHandler.kBtnClose:
    case simcity.cToyTaskPanelUIHandler.kBtnDismiss:
      this.SetVisible(!1);
      break;
    case simcity.cToyTaskPanelUIHandler.kBtnAccept:
      a = 0;
      0 > this.mCurrentEventIndex ? a = this.mSelectedOption : this.mSelectedOption < this.mCurrentEventIndex ? a = this.mTotalOptions - this.mCurrentEventIndex +
        this.mSelectedOption : this.mSelectedOption > this.mCurrentEventIndex && (a = this.mSelectedOption - this.mCurrentEventIndex);
      ++a;
      for (b = 0; b < a; ++b)
        scrui.PostGameCommand(scrui.BuildCommand(["runUnitPlayerRule", this.mBaseUnitString, this.mCurrentDataBindings[this.mSelectedOption].playerRule]));
      scrui.PostGameCommand(scrui.BuildCommand(["runUnitPlayerRule", this.mBaseUnitString, this.mCurrentDataBindings[this.mSelectedOption].finalizePlayerRule]));
      void 0 !== this.mCurrentPicker && scrui.PostGameCommand(scrui.BuildCommand(["selectTool",
            this.mCurrentPicker.tools[this.mSelectedOption]]));
      this.SetVisible(!1);
      break;
    case simcity.cToyTaskPanelUIHandler.kBtnRight:
      this.mSelectedOption + 1 < this.mTotalOptions ? this.mSelectedOption++ : this.mSelectedOption = 0;
      this.mCostText.SetVisibility(!1);
      this.mProfitText.SetVisibility(!1);
      this.mEventTitleText.SetRawText("");
      this.mDescriptionText.SetRawText("");
      e = gUIManager.FindAnimationByID(simcity.cToyTaskPanelUIHandler.kAnimRight);
      d = !0;
      break;
    case simcity.cToyTaskPanelUIHandler.kBtnLeft:
      0 <= this.mSelectedOption -
      1 ? this.mSelectedOption-- : this.mSelectedOption = this.mTotalOptions - 1,
      this.mCostText.SetVisibility(!1),
      this.mProfitText.SetVisibility(!1),
      this.mEventTitleText.SetRawText(""),
      this.mDescriptionText.SetRawText(""),
      e = gUIManager.FindAnimationByID(simcity.cToyTaskPanelUIHandler.kAnimLeft),
      d = !0
    }
  }
  if (d) {
    this.mMainPoster.SetWindowImage(this.mCurrentDataBindings[this.mSelectedOption].marqueeImage);
    var f = this;
    e.RegisterEventCallback(scrui.cAnimation.kEventStopped, function () {
      f.RedrawPanels()
    })
  }
};
simcity.UIToolbox = {};
simcity.gUIToolbox = function (a, b) {
  this.mPageIDs = a;
  this.mRootLayout = b
};
simcity.gUIToolbox.LocaleString = {
  kFutureMinutes : new scrui.cLocaleString("GameEntry.json", "0x0e9d0957", "~minutes:number~ ^choose:~minutes~:minute:minutes^"),
  kFutureHours : new scrui.cLocaleString("GameEntry.json", "0x0e9d0958", "~hours:number~ ^choose:~hours~:hour:hours^"),
  kFutureDays : new scrui.cLocaleString("GameEntry.json", "0x0e9d094e", "~days:number~ ^choose:~days~:Tomorrow:days^"),
  kFutureWeeks : new scrui.cLocaleString("GameEntry.json", "0x0e9d094f", "~weeks:number~ ^choose:~weeks~:week:weeks^"),
  kPastMinutes : new scrui.cLocaleString("GameEntry.json",
    "0x0e9d0951", "~minutes:number~ ^choose:~minutes~:Just now:minutes^ ago"),
  kPastHours : new scrui.cLocaleString("GameEntry.json", "0x0e9d0952", "~hours:number~ ^choose:~hours~:hour:hours^ ago"),
  kPastDays : new scrui.cLocaleString("GameEntry.json", "0x0e9d0953", "~days:number~ ^choose:~days~:Yesterday:days^ ago"),
  kPastWeeks : new scrui.cLocaleString("GameEntry.json", "0x0e9d0954", "~weeks:number~ ^choose:~weeks~:week:weeks^ ago"),
  kTimeShorthandMinutes : new scrui.cLocaleString("GameEntry.json", "0x0f20f6bf"),
  kTimeShorthandHours : new scrui.cLocaleString("GameEntry.json",
    "0x0f20f6b8"),
  kTimeShorthandDays : new scrui.cLocaleString("GameEntry.json", "0x0f20f6b1"),
  kTimeShorthandMonths : new scrui.cLocaleString("GameEntry.json", "0x0f337533"),
  kDate : new scrui.cLocaleString("GameEntry.json", "0x0e9d0956", "~date:date~"),
  kJustNow : new scrui.cLocaleString("GameEntry.json", "0x0e9d0959", "Just now")
};
simcity.gUIToolbox.Patterns = {
  kHTMLTag : /<\S[^><]*>/g,
  kInvalidCharacters : /[\\"\<\>]/g
};
simcity.gUIToolbox.kMissingAvatar = "Graphics/Common/MissingAvatar.png";
simcity.gUIToolbox.prototype.HideByKeys = function (a) {
  if (a && a.length)
    for (var b in a)
      this.HideByKey(a[b])
};
simcity.gUIToolbox.prototype.HideByKey = function (a) {
  var b = this.mRootLayout.FindControlByID(this.mPageIDs[a]);
  b ? b.SetVisibility(!1) : this.DebugMsg("Error: Control not found " + a)
};
simcity.gUIToolbox.prototype.ShowByKey = function (a) {
  var b = this.mRootLayout.FindControlByID(this.mPageIDs[a]);
  b ? b.SetVisibility(!0) : this.DebugMsg("Error: Control not found " + a)
};
simcity.gUIToolbox.prototype.ClearViewByKey = function (a) {
  var b = this.mRootLayout.FindControlByID(this.mPageIDs[a]);
  b ? this.ClearLayoutByKey(b, a) : this.DebugMsg("container not found")
};
simcity.gUIToolbox.prototype.ClearLayoutByKey = function (a, b) {
  var c = a.FindControlByID(this.mPageIDs[b]);
  c ? c.DestroyChildren() : this.DebugMsg("ID not found: " + b)
};
simcity.gUIToolbox.prototype.AddEventListeners = function (a, b) {
  var c = this.mPageIDs;
  if (b && a)
    for (var d in b)
      c[d] && "function" == typeof b[d] ? simcity.gEventManager.AddEventListener(a, c[d], b[d]) : this.DebugMsg("AddEventListeners: invalid key for " + d)
};
simcity.gUIToolbox.prototype.RemoveEventListeners = function (a, b) {
  var c = this.mPageIDs;
  if (b && a)
    for (var d in b)
      c[d] && "function" == typeof b[d] ? simcity.gEventManager.RemoveEventListener(a, c[d], b[d]) : this.DebugMsg("RemoveEventListeners: invalid key for " + d)
};
simcity.gUIToolbox.ResetRawText = function (a, b) {
  if (a) {
    var c = a.FindControlByID(b);
    c && c.SetRawText("")
  }
};
simcity.gUIToolbox.ClearControl = function (a) {
  a && a.mChildren && a.DestroyChildren()
};
simcity.gUIToolbox.DebugMsg = function (a) {
  simcity.cLauncher3D ? simcity.cLauncher3D.DebugMsg(a) : Panel.mStateController && Panel.mStateController.DebugMsg(a)
};
simcity.gUIToolbox.PreloadImage = function (a, b, c, d) {
  if (!document.getElementById(a)) {
    var e = new Image;
    e.setAttribute("id", a);
    e.id = a;
    e.src = b;
    e.width = c;
    e.height = d;
    e.style.display = "none";
    document.body.appendChild(e)
  }
};
simcity.gUIToolbox.GetKeys = function (a) {
  var b = [],
  c;
  for (c in a)
    b.push(c);
  return b
};
simcity.gUIToolbox.FindKeyNoCase = function (a, b) {
  for (var c in a)
    if (c.trim().toLowerCase() == b.trim().toLowerCase())
      return a[c];
  return null
};
simcity.gUIToolbox.GetSortedKeysByAttribute = function (a, b) {
  var c = {},
  d;
  for (d in a) {
    var e = 0;
    a[d][b] && (e = a[d][b]);
    c[e] || (c[e] = {}, c[e].data = []);
    c[e].data.push(d)
  }
  d = simcity.gUIToolbox.GetKeys(c).sort();
  for (var e = [], f = 0, g = d.length; f < g; f++)
    e = e.concat(c[d[f]].data);
  return e
};
simcity.gUIToolbox.ParseDate = function (a) {
  a = a.match(/(\d+)/g);
  return new Date(a[0], a[1] - 1, a[2], a[3], a[4])
};
simcity.gUIToolbox.UtcMsToLocalDate = function (a) {
  var b = new Date;
  b.setTime(a);
  return b
};
simcity.gUIToolbox.PrettyDateUtcMs = function (a) {
  a = simcity.gUIToolbox.UtcMsToLocalDate(a);
  return simcity.gUIToolbox.PrettyDate(a)
};
simcity.gUIToolbox.PrettyDate = function (a) {
  var b = ((new Date).getTime() - a.getTime()) / 6E4;
  return 44640 < Math.abs(b) ? simcity.gUIToolbox.LocaleString.kDate.LoadAndGetTextSynchronous({
    date : a
  }) : 0 > b ? this.GetFutureDateString(b) : this.GetPastDateString(b)
};
simcity.gUIToolbox.GetFutureDateString = function (a) {
  var a = Math.floor(Math.abs(a)),
  b = Math.floor(a / 60),
  c = Math.floor(b / 24),
  d = Math.ceil(c / 7);
  if (1 > a)
    return simcity.gUIToolbox.LocaleString.kJustNow.LoadAndGetTextSynchronous();
  if (60 > a)
    return simcity.gUIToolbox.LocaleString.kFutureMinutes.LoadAndGetTextSynchronous({
      minutes : a
    });
  if (1440 > a)
    return simcity.gUIToolbox.LocaleString.kFutureHours.LoadAndGetTextSynchronous({
      hours : b
    });
  if (10080 > a)
    return simcity.gUIToolbox.LocaleString.kFutureDays.LoadAndGetTextSynchronous({
      days : c
    });
  if (44640 > a)
    return simcity.gUIToolbox.LocaleString.kFutureWeeks.LoadAndGetTextSynchronous({
      weeks : d
    })
};
simcity.gUIToolbox.GetPastDateString = function (a) {
  var a = Math.floor(Math.abs(a)),
  b = Math.floor(a / 60),
  c = Math.floor(b / 24),
  d = Math.ceil(c / 7);
  if (1 > a)
    return simcity.gUIToolbox.LocaleString.kJustNow.LoadAndGetTextSynchronous();
  if (60 > a)
    return simcity.gUIToolbox.LocaleString.kPastMinutes.LoadAndGetTextSynchronous({
      minutes : a
    });
  if (1440 > a)
    return simcity.gUIToolbox.LocaleString.kPastHours.LoadAndGetTextSynchronous({
      hours : b
    });
  if (10080 > a)
    return simcity.gUIToolbox.LocaleString.kPastDays.LoadAndGetTextSynchronous({
      days : c
    });
  if (44640 > a)
    return simcity.gUIToolbox.LocaleString.kPastWeeks.LoadAndGetTextSynchronous({
      weeks : d
    })
};
simcity.gUIToolbox.PrettyDateFromString = function (a) {
  return simcity.gUIToolbox.PrettyDate(simcity.gUIToolbox.ParseDate(a))
};
simcity.gUIToolbox.ElapsedTicks = function (a) {
  if (0 > a)
    return "";
  if (172800 < a) {
    var b = Math.floor(a / 172800),
    c;
    c = Math.floor((a - 172800 * b) / 7200);
    return b + "SC days " + c + " hrs"
  }
  if (7200 < a && 172800 > a)
    return c = Math.floor(a / 7200), a = Math.floor((a - 7200 * c) / 120), c = 1 < c ? c + " SC hrs " : c + " SC hr ", 0 < a && (c += a + " mins"), c;
  a = Math.floor(a / 120);
  return a + " SC mins"
};
simcity.gUIToolbox.MsToTimeString = function (a) {
  if (0 >= a)
    return "";
  var b = Math.floor(a / 864E5),
  c = Math.floor(a / 36E5 % 24),
  d = Math.floor(a / 6E4 % 60),
  a = Math.floor(a / 1E3 % 60),
  e = "";
  1 < b ? e = b + " Days " : 1 == b && (e = b + " Day ");
  return e + (10 > c ? "0" + c : c) + ":" + (10 > d ? "0" + d : d) + ":" + (10 > a ? "0" + a : a) + " Left"
};
simcity.gUIToolbox.Constants = {
  kSecondsPerMinute : 60,
  kMinutesPerHour : 60,
  kHoursPerDay : 24,
  kDaysPerMonth : 30,
  kSecondsPer : {
    SECOND : 1,
    MINUTE : 60,
    HOUR : 3600,
    DAY : 86400,
    MONTH : 2592E3
  }
};
simcity.gUIToolbox.ConvertMillisToTimeString = function (a, b) {
  var c = simcity.gUIToolbox.Constants,
  d = function (b) {
    switch (b) {
    case "M":
      return simcity.gUIToolbox.Private_ConvertMillisToTimeUnit(a, c.kSecondsPer.MONTH);
    case "MM":
      return simcity.gUIToolbox.LeftPad(simcity.gUIToolbox.Private_ConvertMillisToTimeUnit(a, c.kSecondsPer.MONTH), 0, 2);
    case "d":
      return simcity.gUIToolbox.Private_ConvertMillisToTimeUnit(a, c.kSecondsPer.DAY, c.kDaysPerMonth);
    case "dd":
      return simcity.gUIToolbox.LeftPad(simcity.gUIToolbox.Private_ConvertMillisToTimeUnit(a,
          c.kSecondsPer.DAY, c.kDaysPerMonth), 0, 2);
    case "h":
      return simcity.gUIToolbox.Private_ConvertMillisToTimeUnit(a, c.kSecondsPer.HOUR, c.kHoursPerDay);
    case "hh":
      return simcity.gUIToolbox.LeftPad(simcity.gUIToolbox.Private_ConvertMillisToTimeUnit(a, c.kSecondsPer.HOUR, c.kHoursPerDay), 0, 2);
    case "m":
      return simcity.gUIToolbox.Private_ConvertMillisToTimeUnit(a, c.kSecondsPer.MINUTE, c.kMinutesPerHour);
    case "mm":
      return simcity.gUIToolbox.LeftPad(simcity.gUIToolbox.Private_ConvertMillisToTimeUnit(a, c.kSecondsPer.MINUTE,
          c.kMinutesPerHour), 0, 2);
    case "s":
      return simcity.gUIToolbox.Private_ConvertMillisToTimeUnit(a, c.kSecondsPer.SECOND, c.kSecondsPerMinute);
    case "ss":
      return simcity.gUIToolbox.LeftPad(simcity.gUIToolbox.Private_ConvertMillisToTimeUnit(a, c.kSecondsPer.SECOND, c.kSecondsPerMinute), 0, 2)
    }
  };
  if (!a || 0 > a)
    return "";
  if (b)
    return b.split(":").map(d).join(":");
  var d = this.LeftPad(simcity.gUIToolbox.Private_ConvertMillisToTimeUnit(a, c.kSecondsPer.DAY), 0, 2),
  e = this.LeftPad(simcity.gUIToolbox.Private_ConvertMillisToTimeUnit(a,
        c.kSecondsPer.HOUR, c.kHoursPerDay), 0, 2),
  f = this.LeftPad(simcity.gUIToolbox.Private_ConvertMillisToTimeUnit(a, c.kSecondsPer.MINUTE, c.kMinutesPerHour), 0, 2),
  g = this.LeftPad(simcity.gUIToolbox.Private_ConvertMillisToTimeUnit(a, c.kSecondsPer.SECOND, c.kSecondsPerMinute), 0, 2);
  return d + ":" + e + ":" + f + ":" + g
};
simcity.gUIToolbox.Private_ConvertMillisToTimeUnit = function (a, b, c) {
  return c ? (Math.floor(a / (1E3 * b)) % c).toString() : Math.floor(a / (1E3 * b)).toString()
};
simcity.gUIToolbox.LeftPad = function (a, b, c) {
  var d = "";
  null != a && void 0 != a && (d = a.toString());
  if (!b && !c)
    return d;
  for (; d.length < c; )
    d = b + d;
  return d
};
simcity.gUIToolbox.TimeRemaining = function (a) {
  if (0 >= a)
    return "time's up";
  if (6E4 >= a)
    return "less than a minute";
  if (36E5 >= a)
    return Math.floor(a / 6E4) + " minutes";
  if (864E5 >= a)
    var b = "", c = Math.floor(a / 36E5), a = Math.floor(Math.floor(a - 36E5 * c) / 6E4);
  else {
    var b = "",
    d = Math.floor(a / 864E5),
    c = Math.floor((a - 864E5 * d) / 36E5),
    a = Math.floor((a - 36E5 * c - 864E5 * d) / 6E4);
    1 < d && (b += d + " days ")
  }
  1 < c && (b += c + " hours ");
  1 < a && (b += a + " minutes");
  return b
};
simcity.gUIToolbox.ShallowEquals = function (a, b) {
  if (a === b)
    return !0;
  if (!a || !b || Object.keys(a).length !== Object.keys(b).length)
    return !1;
  for (var c in a)
    if (a[c] !== b[c])
      return !1;
  return !0
};
simcity.gUIToolbox.IsNumber = function (a) {
  return !isNaN(parseFloat(a)) && isFinite(a)
};
simcity.gUIToolbox.NumberToString = function (a, b) {
  var c = (new String(a)).split(".");
  c[0] && (c[0] = scrui.LocalizeNumber(c[0]));
  0 == b ? c.length = 1 : c[1] && 0 < b && (c[1] = c[1].substr(0, b));
  return c.join(".")
};
simcity.gUIToolbox.ToBoolean = function (a) {
  return "string" === typeof a ? "true" === a : "boolean" === typeof a ? a : !1
};
simcity.gUIToolbox.StripHTML = function (a) {
  return a.replace(simcity.gUIToolbox.Patterns.kHTMLTag, "")
};
simcity.gUIToolbox.HasHTML = function (a) {
  return null != a.match(simcity.gUIToolbox.Patterns.kHTMLTag)
};
simcity.gUIToolbox.StripInvalidChars = function (a) {
  return a.replace(simcity.gUIToolbox.Patterns.kInvalidCharacters, " ")
};
simcity.gUIToolbox.HasInvalidChars = function (a) {
  return null != a.match(simcity.gUIToolbox.Patterns.kInvalidCharacters)
};
simcity.gUIToolbox.Sanitize = function (a) {
  return simcity.gUIToolbox.StripHTML(a.trim()).replace(simcity.gUIToolbox.Patterns.kInvalidCharacters, "")
};
simcity.gUIToolbox.Encode = function (a) {
  return a ? encodeURIComponent(a.trim()) : ""
};
simcity.gUIToolbox.SetControlAspectRatio = function (a, b) {
  var c = a.mHeight,
  d = a.mWidth;
  if (d / c >= b) {
    var e = b * c;
    d > e && a.SetPosition(a.mLeft + (d - e) / 2, 0, e, c)
  } else
    e = d / b, c > e && a.SetPosition(0, a.mTop + (c - e) / 2, d, e)
};
simcity.gUIToolbox.IsPointWithinControl = function (a, b, c) {
  a = a.GetAbsoluteBoundingBox();
  return b > a[0] && b < a[2] && c > a[1] && c < a[5]
};
simcity.gUIToolbox.SetAvatar = function (a, b, c, d) {
  if (a) {
    var e = simcity.gUIToolbox.kMissingAvatar;
    b && (e = simcity.gUIToolbox.GetAvatarUrl(b, c, d));
    a.SetWindowImage(e);
    a.mImageElement && (a.mImageElement.onerror = function () {
      a.mImageElement.src = simcity.gUIToolbox.kMissingAvatar
    })
  }
};
simcity.gUIToolbox.SetAvatarByUrl = function (a, b) {
  if (a && (b || (b = simcity.gUIToolbox.kMissingAvatar), a.SetWindowImage(b), a.mImageElement))
    a.mImageElement.onerror = function () {
      a.mImageElement.src = simcity.gUIToolbox.kMissingAvatar
    }
};
simcity.gUIToolbox.GetAvatarUrl = function (a, b, c) {
  var b = b ? b : 64,
  c = c ? c : 64,
  d = simcity.gConfigurationValues.mAvatarUrl;
  if (simcity.IsMainTutorialInProgress && simcity.IsMainTutorialInProgress() && a == simcity.TutorialFakeUserData.creator.screenName)
    return simcity.TutorialFakeUserData.creator.avatarImage;
  if (null == d)
    return scrui.GetRestPath() + "user/" + a + "/avatar?w=" + b + "&h=" + c;
  var e = Math.max(b, c),
  f = "LARGE";
  64 >= e ? f = "SMALL" : 128 >= e && (f = "MEDIUM");
  d = d.replace(/~screenName~/g, a);
  d = d.replace(/~userId~/g, a);
  d = d.replace(/~width~/g,
      b);
  d = d.replace(/~height~/g, c);
  return d = d.replace(/~size~/g, f)
};
simcity.gUIToolbox.GetAvatarFrame = function (a, b, c) {
  return !a ? simcity.cConstants.kPresenceAvatarFrames.OFFLINE : a.id == simcity.gSessionManager.mUserID ? simcity.gPresenceManager.IsOffline() ? simcity.cConstants.kPresenceAvatarFrames.OFFLINE : simcity.cConstants.kPresenceAvatarFrames.LOGGED_IN_USER : !a.isOnline || "false" == a.isOnline ? simcity.cConstants.kPresenceAvatarFrames.OFFLINE : a.inTutorial || !a.currentPlayingRegionId || a.currentPlayingRegionId != b && (c ? a.currentPlayingBoxId != c : 1) ? simcity.cConstants.kPresenceAvatarFrames.AWAY :
  simcity.cConstants.kPresenceAvatarFrames.ONLINE
};
simcity.Tokenizer = function (a, b) {
  this.tokens = a;
  this.template = b;
  this.regex = /{(\d+)}/ig
};
simcity.Tokenizer.prototype.Parse = function () {
  for (var a = this.template, b = this.template.match(this.regex), c = 0; c < b.length; c++) {
    var d = b[c].match(/\d+/)[0];
    this.tokens[d] ? (d = this.LinkWrap(this.tokens[d], "simcity.Route"), a = a.replace(b[c], d)) : a = a.replace(b[c], "#not_found:" + key + "#")
  }
  return a
};
simcity.Tokenizer.prototype.LinkWrap = function (a, b) {
  var c = a.split(/:/g);
  return "<a href='javascript:" + b + "('" + c[1] + "');'>" + c[0] + "</a>"
};
simcity.Tokenizer.prototype.Quote = function (a) {
  return a.replace(/([.?*+^$[\]\\(){}-])/g, "\\$1")
};
simcity.gUIToolbox.LabeledCheckbox = function (a) {
  this.mLayer = a.mLayer;
  this.mStateValue = a.mStateValue;
  this.mControlKey = a.mControlKey;
  this.mStatusTextKey = a.mStatusTextKey;
  this.mImageOn = a.mImageOn;
  this.mImageOff = a.mImageOff;
  this.mLocaleTextOn = a.mLocaleTextOn;
  this.mLocaleTextOff = a.mLocaleTextOff
};
simcity.gUIToolbox.LabeledCheckbox.prototype.Toggle = function () {
  this.mStateValue = !this.mStateValue;
  var a = this.mLayer.FindControlByID(this.mControlKey),
  b = this.mLayer.FindControlByID(this.mStatusTextKey);
  this.mStateValue ? (a.SetButtonImage(this.mImageOn), b.SetLocaleText(this.mLocaleTextOn)) : (a.SetButtonImage(this.mImageOff), b.SetLocaleText(this.mLocaleTextOff))
};
simcity.gUIToolbox.GetSelectedIdsFromControl = function (a, b, c) {
  var a = a.mChildren,
  d = [];
  if (!a)
    return d;
  if (a && a.length)
    for (var e = 0, f = a.length; e < f; e++) {
      var g = a[e].FindControlByID(b);
      if (g && g instanceof scrui.cWindow && g.mIsVisible || g instanceof scrui.cButton && g.mIsSelected)
        g = g.GetParentLayout()[c], d.push(g)
    }
  return d
};
simcity.gUIToolbox.ResetSelectedIdsFromScrollWindow = function (a, b, c) {
  if ((a = a.FindControlByID(b).mChildren) && a.length)
    for (var b = 0, d = a.length; b < d; b++) {
      var e = a[b].FindControlByID(c);
      e && e.SetSelected(!1)
    }
};
simcity.gUIToolbox.TimedCachedObject = function () {
  var a = function (a, c) {
    a || (a = 10);
    this.expireAtTime = new Date;
    this.expireAtTime.setMinutes(this.expireAtTime.getMinutes() + a);
    this.data = c
  };
  a.prototype.isExpired = function () {
    return (new Date).getTime() >= this.expireAtTime.getTime()
  };
  a.prototype.getData = function () {
    return this.data
  };
  a.prototype.setData = function (a) {
    this.data = a
  };
  return a
}
();
simcity.gUIToolbox.GetExponentialPopulation = function (a) {
  if (500 >= a)
    return a;
  if (40845 < a)
    return Math.floor(8.25 * a);
  a = Math.pow(a - 500, 1.2) + 500;
  return Math.round(a)
};
simcity.gUIToolbox.OpenSCHelpSiteWithAuth = function (a) {
  var b = gUIManager.mLocaleManager.mLocaleCode,
  c = simcity.gConfigurationValues.mHelpLinkUrl,
  d = /^(https?:\/\/)?help.ea.com/,
  b = simcity.gUIToolbox.StringStartsWith(c, d) ? {
    locale : b,
    returnUrl : c.replace(d, "")
  }
   : {
    communityUrl : c.replace(/#[a-zA-Z0-9]*$/, "")
  };
  a ? simcity.cOriginUtilities.OpenExternalBrowserWithAuth(simcity.cConstants.kHelpSiteSsoURL, simcity.cConstants.kHelpSiteTokenKey, b) : simcity.cOriginUtilities.OpenBrowserWithAuth(simcity.cConstants.kHelpSiteSsoURL,
    simcity.cConstants.kHelpSiteTokenKey, b)
};
simcity.gUIToolbox.OpenSCHelpSite = function (a) {
  var b = simcity.gConfigurationValues.mHelpLinkUrl;
  a ? scrui.OpenExternalBrowserWithAuth(b) : simcity.cOriginUtilities.OpenBrowserWithAuth(b)
};
simcity.gUIToolbox.OpenHelpArticleSite = function (a) {
  var b = simcity.gConfigurationValues.mWWCEArticleURL;
  a ? scrui.OpenExternalBrowser(b) : simcity.cOriginUtilities.OpenBrowserWithAuth(b)
};
simcity.gUIToolbox.OpenArticleLink = function (a) {
  var b,
  c = /^(https?:\/\/)?help.ea.com/,
  d = gUIManager.mLocaleManager.mLocaleCode;
  simcity.gUIToolbox.StringStartsWith(a, /^(https?:\/\/)?answers.ea.com/) ? b = {
    communityUrl : simcity.gUIToolbox.GetURLWithFormattedLocale(a.replace(/#[a-zA-Z0-9]*$/, ""))
  }
   : simcity.gUIToolbox.StringStartsWith(a, c) && (b = {
      locale : d,
      returnUrl : simcity.gUIToolbox.GetURLWithFormattedLocale(a.replace(c, ""))
    });
  b ? simcity.cOriginUtilities.OpenExternalBrowserWithAuth(simcity.cConstants.kHelpSiteSsoURL,
    simcity.cConstants.kHelpSiteTokenKey, b) : scrui.OpenExternalBrowser(a)
};
simcity.gUIToolbox.OpenSCGameManual = function () {
  scrui.OpenExternalBrowser(simcity.gConfigurationValues.mGameManualUrl)
};
simcity.gUIToolbox.GetURLWithFormattedLocale = function (a) {
  if (!a)
    return a;
  if (a) {
    var b = gUIManager.mLocaleManager.mLocaleCode;
    b && (b = b.split("-"), b[0] && (b[0] = b[0].toLowerCase()), b[1] && (b[1] = b[1].toUpperCase()), b = b.join("-"));
    var c = /~locale~/g,
    d = /~-locale~/g,
    e = /~lang~/g,
    f = /~country~/g;
    null !== a.match(c) && (a = a.replace(c, b.replace(/-/g, "_")));
    null !== a.match(d) && (a = a.replace(d, b));
    null !== a.match(e) && (a = a.replace(e, b.substr(0, 2)));
    null !== a.match(f) && (a = a.replace(f, b.substr(3)))
  }
  return a
};
simcity.gUIToolbox.GetLocale = function () {
  var a;
  gUIManager.mLocaleManager.mLocaleCode && (a = gUIManager.mLocaleManager.mLocaleCode.replace("-", "_"));
  return a ? a : "en_us"
};
simcity.gUIToolbox.GetDurationInShorthandFormat = function (a) {
  var a = (0 < a ? simcity.gUIToolbox.ConvertMillisToTimeString(a, "M:d:h:m") : "0:0:0:0").split(":"),
  b = "";
  "0" !== a[0] && "00" !== a[0] && (b += a[0] + simcity.gUIToolbox.LocaleString.kTimeShorthandMonths.LoadAndGetTextSynchronous(), b += " ");
  b += a[1] + simcity.gUIToolbox.LocaleString.kTimeShorthandDays.LoadAndGetTextSynchronous();
  b += " " + a[2] + simcity.gUIToolbox.LocaleString.kTimeShorthandHours.LoadAndGetTextSynchronous();
  return b += " " + a[3] + simcity.gUIToolbox.LocaleString.kTimeShorthandMinutes.LoadAndGetTextSynchronous()
};
simcity.gUIToolbox.TrimString = function (a) {
  return a.replace(/^\s+|\s+$/g, "")
};
simcity.gUIToolbox.StringStartsWith = function (a, b) {
  return b instanceof RegExp ? null !== a.match(b) : null !== a.match(RegExp("^" + b))
};
simcity.gUIToolbox.StringEndsWith = function (a, b) {
  return b instanceof RegExp ? null !== a.match(b) : null !== a.match(RegExp(b + "$"))
};
simcity.gUIToolbox.UnwrapId = function (a) {
  if (!a)
    return "";
  for (var a = window.atob(a), b = a.length, c = "", d = 0; d < b; ++d)
    var e = "20ce46kgg256254708gewr65gdd4gyy"[d % 31].charCodeAt(0), f = a[d].charCodeAt(0), c = c + String.fromCharCode(f^e);
  return c
};
simcity.gUIToolbox.kTrackingUri = "user/notifications/";
simcity.gUIToolbox.GetTrackingValue = function (a, b, c) {
  a = {
    url : scrui.GetRestPath() + simcity.gUIToolbox.kTrackingUri + a + ".json",
    onSuccess : function (a) {
      a = a.json.date_updated;
      "function" == typeof b && b(a)
    },
    onError : c,
    method : "get"
  };
  scrui.XHR.Request(a)
};
simcity.gUIToolbox.SetTrackingValue = function (a) {
  a = {
    url : scrui.GetRestPath() + simcity.gUIToolbox.kTrackingUri + a,
    method : "post"
  };
  scrui.XHR.Request(a)
};
simcity.FriendController = {};
simcity.cFriendController = function () {
  this.mFriendCache = null;
  this.mFriendPresenceSubscriptions = {};
  this.mFriendListChangedSubscribed = !1;
  this.mIsFirstUpdate = !0;
  this.mFriendRequestCache = null;
  this.mDoingServerSync = this.mUpdatingFriendRequestCache = !1;
  this.mFriendCache = null;
  this.mUpdatingFriendCache = !1;
  this.mPendingRequestCache = null;
  this.mUpdatingPendingRequestCache = !1;
  this.mServiceURLs = {
    FRIEND_REQUESTS : "user/friendRequests",
    PENDING_REQUESTS : "user/friendInvites",
    ORIGIN_SYNC : "user/friends/origin"
  }
};
simcity.cFriendController.kMaxRequestsToFetch = 100;
simcity.cFriendController.kMaxPendingRequestsToFetch = 100;
simcity.cFriendController.kRequestCacheMin = 2;
simcity.cFriendController.kFriendCacheMin = 2;
simcity.cFriendController.kMsgRequestsChanged = 246549693;
simcity.cFriendController.kMsgFriendsChanged = 247669359;
simcity.cFriendController.kMsgFriendsPresenceChanged = 40901455;
simcity.cFriendController.kUserInfoRestUrl = "user/";
simcity.cFriendController.kFriendsUri = "/friends.json";
simcity.cFriendController.kUnfriendUri = "/friends/";
simcity.cFriendController.kSocketEventGuid = 237906218;
simcity.cFriendController.kSocketPresenceMessageType = 2343608712;
simcity.cFriendController.kSocketPresenceResponseEventId = 3498425072;
simcity.cFriendController.kSocketGameEntryMessageType = 2565274370;
simcity.cFriendController.kSocketListChangedEventId = 311058824;
simcity.cFriendController.kSocketListChangedGuid = 249588249;
simcity.cFriendController.prototype.GetOnlineFriends = function () {
  for (var a = this.GetCachedFriends(), b = [], c = 0; a && a.length && c < a.length; c++)
    (!0 === a[c].isOnline || "true" === a[c].isOnline) && b.push(a[c]);
  return b
};
simcity.cFriendController.prototype.GetOfflineFriends = function () {
  for (var a = this.GetCachedFriends(), b = [], c = 0; a && a.length && c < a.length; c++)
    (!1 === a[c].isOnline || "false" === a[c].isOnline) && b.push(a[c]);
  return b
};
simcity.cFriendController.prototype.GetCachedFriendRequests = function () {
  (!this.mFriendRequestCache || this.mFriendRequestCache.isExpired()) && this.UpdateFriendRequestsFromServer();
  return this.mFriendRequestCache ? this.mFriendRequestCache.getData() : []
};
simcity.cFriendController.prototype.GetCachedFriends = function () {
  (!this.mFriendCache || this.mFriendCache.isExpired()) && this.UpdateFriendsFromServer();
  return this.mFriendCache ? this.mFriendCache.getData().friends : []
};
simcity.cFriendController.prototype.IsFriendListFirstUpdate = function () {
  return this.mIsFirstUpdate && this.mUpdatingFriendCache
};
simcity.cFriendController.prototype.UpdateFriendRequestsFromServer = function () {
  if (!this.mUpdatingFriendRequestCache) {
    this.mUpdatingFriendRequestCache = !0;
    var a = this,
    b = function () {
      a.mUpdatingFriendRequestCache = !1;
      a.mFriendRequestCache || (a.mFriendRequestCache = new simcity.gUIToolbox.TimedCachedObject(simcity.cFriendController.kRequestCacheMin, []))
    },
    c = {
      url : scrui.GetRestPath() + this.mServiceURLs.FRIEND_REQUESTS + ".json",
      params : [["start", 0], ["count", simcity.cFriendController.kMaxRequestsToFetch]],
      onSuccess : function (c) {
        c.json &&
        c.json.error ? b(c) : (a.mUpdatingFriendRequestCache = !1, c = c.json && c.json.users ? c.json.users : [], delete a.mFriendRequestCache, a.mFriendRequestCache = new simcity.gUIToolbox.TimedCachedObject(simcity.cFriendController.kRequestCacheMin, c), gUIManager.SendMessage(simcity.cFriendController.kMsgRequestsChanged))
      },
      onError : b,
      method : "get"
    };
    scrui.XHR.Request(c)
  }
};
simcity.cFriendController.prototype.GetCachedPendingRequests = function () {
  (!this.mPendingRequestCache || this.mPendingRequestCache.isExpired()) && this.UpdatePendingRequestsFromServer();
  return this.mPendingRequestCache ? this.mPendingRequestCache.getData() : []
};
simcity.cFriendController.prototype.IsRequestPending = function (a) {
  var b = this.GetCachedPendingRequests(),
  c;
  for (c in b) {
    var d = b[c];
    if (d && d.id == a)
      return !0
  }
  return !1
};
simcity.cFriendController.prototype.UpdatePendingRequestsFromServer = function () {
  if (!this.mUpdatingPendingRequestCache) {
    this.mUpdatingPendingRequestCache = !0;
    var a = this,
    b = function () {
      a.mUpdatingPendingRequestCache = !1;
      a.mPendingRequestCache || (a.mPendingRequestCache = new simcity.gUIToolbox.TimedCachedObject(simcity.cFriendController.kRequestCacheMin, []))
    },
    c = {
      url : scrui.GetRestPath() + this.mServiceURLs.PENDING_REQUESTS + ".json",
      params : [["start", 0], ["count", simcity.cFriendController.kMaxPendingRequestsToFetch]],
      onSuccess : function (c) {
        c.json && c.json.error ? b(c) : (a.mUpdatingPendingRequestCache = !1, c = c.json && c.json.users ? c.json.users : [], delete a.mPendingRequestCache, a.mPendingRequestCache = new simcity.gUIToolbox.TimedCachedObject(simcity.cFriendController.kRequestCacheMin, c), gUIManager.SendMessage(simcity.cFriendController.kMsgRequestsChanged))
      },
      onError : b,
      method : "get"
    };
    scrui.XHR.Request(c)
  }
};
simcity.cFriendController.prototype.AcceptFriendRequest = function (a, b, c) {
  var d = this;
  this.AddFriend(a, function (c) {
    d.Private_RemoveFromRequestCache(a);
    d.UpdateFriendsFromServer();
    "function" == typeof b && b(c)
  }, c)
};
simcity.cFriendController.prototype.IgnoreFriendRequest = function (a, b) {
  var c = this,
  d = {
    url : scrui.GetRestPath() + this.mServiceURLs.FRIEND_REQUESTS + "/" + a + ".json",
    onSuccess : function (d) {
      c.Private_RemoveFromRequestCache(a);
      "function" == typeof b && b(d)
    },
    method : "delete"
  };
  scrui.XHR.Request(d)
};
simcity.cFriendController.prototype.Private_RemoveFromRequestCache = function (a) {
  var b = this.mFriendRequestCache.getData();
  if (b)
    for (var c = 0; c < b.length; ++c)
      if (b[c].id == a) {
        b.splice(c, 1);
        break
      }
};
simcity.cFriendController.prototype.IsLoggedInUsersFriend = function (a) {
  return null != this.FindInFriendCache(a)
};
simcity.cFriendController.prototype.AddFriend = function (a, b, c) {
  var d = this,
  e = function (a) {
    "function" == typeof c && c(a)
  },
  f = {
    url : scrui.GetRestPath() + "user/" + this.Private_GetLoggedInUserId() + "/friends.json",
    params : [["friendIds", a]],
    onSuccess : function (c) {
      c.json && c.json.errorCode ? e(c) : (d.mPendingRequestCache || (d.mPendingRequestCache = new simcity.gUIToolbox.TimedCachedObject(simcity.cFriendController.kRequestCacheMin, [])), d.mPendingRequestCache.getData().push({
          id : a
        }), gUIManager.SendMessage(simcity.cFriendController.kMsgFriendsChanged),
        d.UpdateFriendRequestsFromServer(), d.UpdatePendingRequestsFromServer(), d.RequestPresenceSubscriptionByID(a), "function" == typeof b && b(c.json))
    },
    onError : e,
    method : "post"
  };
  scrui.XHR.Request(f)
};
simcity.cFriendController.prototype.DeleteFriend = function (a, b, c) {
  var d = this,
  e = function () {
    "function" == typeof c && c()
  },
  f = {
    url : scrui.GetRestPath() + simcity.cFriendController.kUserInfoRestUrl + this.Private_GetLoggedInUserId() + simcity.cFriendController.kUnfriendUri + a,
    params : [],
    onSuccess : function (c) {
      c.json && c.json.errorCode ? e(c) : (d.RemovePresenceSubscriptionByID(a), d.Private_RemoveFriendFromCache(a), d.UpdateFriendRequestsFromServer(), d.UpdatePendingRequestsFromServer(), "function" == typeof b && b(a))
    },
    onError : e,
    method : "delete"
  };
  scrui.XHR.Request(f)
};
simcity.cFriendController.prototype.UpdateFriendsFromServer = function () {
  if (!this.mUpdatingFriendCache) {
    this.mUpdatingFriendCache = !0;
    var a = this,
    b = function () {
      a.mUpdatingFriendCache = !1;
      a.mIsFirstUpdate && (a.mIsFirstUpdate = !1, gUIManager.SendMessage(simcity.cFriendController.kMsgFriendsChanged))
    },
    c = this.Private_GetLoggedInUserId(),
    c = {
      url : scrui.GetRestPath() + simcity.cFriendController.kUserInfoRestUrl + c + simcity.cFriendController.kFriendsUri,
      onSuccess : function (c) {
        if (c.json.error)
          b(c);
        else {
          a.mUpdatingFriendCache =
            !1;
          a.mIsFirstUpdate = !1;
          for (var e = (c = c.json.users) ? c.length : 0, f = 0; f < e; ++f)
            c[f].extraData && (c[f].nucleusId = simcity.gUIToolbox.UnwrapId(c[f].extraData));
          a.Private_SetFriendCache(c);
          for (var g in c)
            a.RequestPresenceSubscriptionByID(c[g].id);
          gUIManager.SendMessage(simcity.cFriendController.kMsgFriendsChanged)
        }
      },
      onError : b,
      method : "get"
    };
    scrui.XHR.Request(c)
  }
};
simcity.cFriendController.prototype.IsFriendOnline = function (a) {
  return (a = this.FindInFriendCache(a)) ? a.isOnline : !1
};
simcity.cFriendController.prototype.FindInFriendCache = function (a) {
  if (!this.mFriendCache)
    return null;
  var b = this.mFriendCache.getData(),
  a = b.idMap[a];
  return null === typeof a || void 0 === a ? null : b.friends[a]
};
simcity.cFriendController.prototype.UpdateFriendsPresence = function (a) {
  var b = this.FindInFriendCache(a.USER_GAME_EVENT);
  if (b) {
    for (var c in a)
      b[c] = a[c];
    gUIManager.SendMessage(simcity.cFriendController.kMsgFriendsPresenceChanged, b)
  }
};
simcity.cFriendController.FriendsPresenceCallback = function (a) {
  simcity.gFriendController.UpdateFriendsPresence(a)
};
simcity.cFriendController.FriendsListChangedCallback = function () {
  simcity.gFriendController.UpdateFriendsFromServer();
  simcity.gFriendController.UpdateFriendRequestsFromServer();
  simcity.gFriendController.UpdatePendingRequestsFromServer()
};
simcity.cFriendController.prototype.RequestPresenceSubscriptionByID = function (a) {
  if (!this.mFriendPresenceSubscriptions[a]) {
    var b = Number(simcity.cFriendController.kSocketEventGuid) + a;
    simcity.gSocketManager.AddSocketRequest("/subscriptions/user/" + a + "/messageType/" + Number(simcity.cFriendController.kSocketPresenceMessageType) + "/eventId/" + Number(simcity.cFriendController.kSocketPresenceResponseEventId), b, simcity.cFriendController.FriendsPresenceCallback, !1);
    this.mFriendPresenceSubscriptions[a] = b
  }
};
simcity.cFriendController.prototype.RemovePresenceSubscriptionByID = function (a) {
  simcity.gSocketManager.RemoveSocketRequest("/subscriptions/user/" + a + "/messageType/" + Number(simcity.cFriendController.kSocketPresenceMessageType) + "/eventId/" + Number(simcity.cFriendController.kSocketPresenceResponseEventId), Number(simcity.cFriendController.kSocketEventGuid) + a, simcity.cFriendController.FriendsPresenceCallback, !1);
  delete this.mFriendPresenceSubscriptions[a]
};
simcity.cFriendController.prototype.RequestListChangeSubscription = function () {
  if (!this.mFriendListChangedSubscribed) {
    var a = "/subscriptions/user/" + this.Private_GetLoggedInUserId() + "/messageType/" + Number(simcity.cFriendController.kSocketGameEntryMessageType) + "/eventId/" + Number(simcity.cFriendController.kSocketListChangedEventId);
    simcity.gSocketManager.AddSocketRequest(a, Number(simcity.cFriendController.kSocketListChangedGuid), simcity.cFriendController.FriendsListChangedCallback, !1);
    this.mFriendListChangedSubscribed =
      !0
  }
};
simcity.cFriendController.prototype.RemoveListChangeSubscription = function () {
  var a = "/subscriptions/user/" + this.Private_GetLoggedInUserId() + "/messageType/" + Number(simcity.cFriendController.kSocketGameEntryMessageType) + "/eventId/" + Number(simcity.cFriendController.kSocketListChangedEventId);
  simcity.gSocketManager.RemoveSocketRequest(a, Number(simcity.cFriendController.kSocketListChangedGuid), simcity.cFriendController.FriendsListChangedCallback, !1);
  this.mFriendListChangedSubscribed = !1
};
simcity.cFriendController.prototype.Private_GetLoggedInUserId = function () {
  return simcity.gSessionManager.mUserID
};
simcity.cFriendController.prototype.Private_RemoveFriendFromCache = function (a) {
  for (var b = this.GetCachedFriends(), c = 0; c < b.length; ++c)
    if (b[c].id == a) {
      b.splice(c, 1);
      this.Private_SetFriendCache(b);
      gUIManager.SendMessage(simcity.cFriendController.kMsgFriendsChanged);
      break
    }
};
simcity.cFriendController.prototype.Private_SetFriendCache = function (a) {
  var b = this.Private_BuildFriendIdMap(a);
  this.mFriendCache = new simcity.gUIToolbox.TimedCachedObject(simcity.cFriendController.kFriendCacheMin, {
      friends : a ? a : [],
      idMap : b
    })
};
simcity.cFriendController.prototype.Private_BuildFriendIdMap = function (a) {
  if (!a)
    return {};
  for (var b = {}, c = a.length, d = 0; d < c; ++d)
    b[a[d].id] = d;
  return b
};
simcity.cFriendController.prototype.UserSearch = function (a, b, c) {
  if (a && "" != a) {
    var d = this,
    e = {
      url : scrui.GetRestPath() + "users/search/" + a + ".json",
      params : [["includeachievements", "true"]],
      onSuccess : function (c) {
        c = {
          searchterm : a,
          total_achievements_count : c.json.total_achievements_count,
          users : d.FilterSearchResults(c)
        };
        b && "function" == typeof b && b(c)
      },
      onError : function (a) {
        c && "function" == typeof c && c(a)
      },
      method : "get"
    };
    scrui.XHR.Request(e)
  }
};
simcity.cFriendController.prototype.FilterSearchResults = function (a) {
  var a = a.json.users,
  b = {
    friends : null,
    strangers : null
  },
  c = this.GetCachedFriends();
  if (!c)
    return b.strangers = a, b;
  for (var d = [], e = 0; e < c.length; ++e)
    d.push(c[e].id);
  for (var c = [], f = [], e = 0; e < a.length; ++e)
    a[e].id != this.Private_GetLoggedInUserId() && (-1 === d.indexOf(a[e].id) ? f.push(a[e]) : c.push(a[e]));
  b.friends = c;
  b.strangers = f;
  return b
};
simcity.cFriendController.prototype.ProcessOriginFriendList = function (a) {
  this.Private_NeedServerSync(a) && this.DoServerOriginSync()
};
simcity.cFriendController.prototype.Private_NeedServerSync = function (a) {
  if (!this.mFriendCache)
    return !0;
  for (var a = a.slice(0), b = this.GetCachedFriends(), c = [], d = 0; d < b.length; ++d) {
    var e = a.indexOf(b[d].nucleusId);
    -1 == e ? c.push(d) : a.splice(e, 1)
  }
  if (0 < c.length) {
    for (d = c.length - 1; 0 <= d; --d)
      b.splice(c[d], 1);
    this.Private_SetFriendCache(b);
    gUIManager.SendMessage(simcity.cFriendController.kMsgFriendsChanged);
    return !0
  }
  return 0 < a.length
};
simcity.cFriendController.prototype.DoServerOriginSync = function () {
  if (!this.mDoingServerSync) {
    this.mDoingServerSync = !0;
    var a = this,
    b = {
      url : scrui.GetRestPath() + this.mServiceURLs.ORIGIN_SYNC + ".json",
      onSuccess : function () {
        a.mDoingServerSync = !1
      },
      onError : function () {
        a.mDoingServerSync = !1
      },
      method : "post"
    };
    scrui.XHR.Request(b)
  }
};
simcity.gFriendController = new simcity.cFriendController;
simcity.GameInvitesController = {};
simcity.cGameInvitesController = function () {
  this.mDialogManager = null;
  this.mPageIDs = {
    AVATAR_NAME : 238866083,
    AVATAR_IMAGE : 238864739,
    AVATAR_PRESENCE_FRAME : 238864737,
    AVATAR_TOGGLE : 238866086,
    INVITE_FRIENDS_PANEL : 239986382,
    INVITE_ONLINE_HEADER : 239982485,
    INVITE_SCROLL_WINDOW : 239982451,
    SEND_INVITES_BUTTON : 239982296,
    CANCEL_INVITES_BUTTON : 239982327,
    INVITE_MESSAGE : 240080460,
    INVITE_TITLE : 239982257,
    INVITE_OFFLINE_HEADER : 239982487,
    REGION_INVITE_BUTTON : 239986074,
    INVITE_MSG_ANIMATION : 251994376,
    WHITE_TRIANGLE : 254858258,
    IN_GAME_CONTAINER : 254857956
  }
};
simcity.cGameInvitesController.LocaleString = {
  kPleaseSelectFriends : new scrui.cLocaleString("GameEntry.json", "0x0ecf08eb"),
  kInviteSuccess : new scrui.cLocaleString("GameEntry.json", "0x7144221c"),
  kInviteFailed : new scrui.cLocaleString("GameEntry.json", "0x84e340d5"),
  kOops : new scrui.cLocaleString("GameEntry.json", "0x10354d5d"),
  kInviteTitle : new scrui.cLocaleString("GameEntry.json", "0xb42d3ccb")
};
simcity.cGameInvitesController.kPageLayout = {
  USER_TOGGLE_AVATAR : "Layouts/GameEntry/Play/JoinGame_FilterByFriends_Button.js"
};
simcity.cGameInvitesController.prototype.Initialize = function () {
  var a = simcity.gGameInvitesController.mPageIDs;
  simcity.gGlobalUIHandler && simcity.gGlobalUIHandler.mDialogManager ? (this.mDialogManager = simcity.gGlobalUIHandler.mDialogManager, gUIManager.FindControlByID(a.REGION_INVITE_BUTTON).SetVisibility(!1)) : this.mDialogManager = simcity.cLauncher3D.mDialogManager;
  simcity.gEventManager.AddEventListener(simcity.gEventTypes.CLICK, this.mPageIDs.REGION_INVITE_BUTTON, this.ToggleInvitePanel);
  simcity.gEventManager.AddEventListener(simcity.gEventTypes.CLICK,
    this.mPageIDs.SEND_INVITES_BUTTON, this.InviteUsers);
  simcity.gEventManager.AddEventListener(simcity.gEventTypes.CLICK, this.mPageIDs.CANCEL_INVITES_BUTTON, this.HideInvitePanel);
  this.mOnShowInvitePanel = function () {}

};
simcity.cGameInvitesController.prototype.ShowInvitePanel = function (a) {
  var b = simcity.gGameInvitesController.mPageIDs,
  c = a.FindControlByID(b.INVITE_FRIENDS_PANEL),
  d = c.FindControlByID(b.INVITE_ONLINE_HEADER),
  e = c.FindControlByID(b.INVITE_OFFLINE_HEADER),
  f = c.FindControlByID(b.INVITE_SCROLL_WINDOW),
  g = c.FindControlByID(b.SEND_INVITES_BUTTON),
  h = c.FindControlByID(b.CANCEL_INVITES_BUTTON),
  i = c.FindControlByID(b.INVITE_TITLE);
  simcity.gGlobalUIHandler && (gUIManager.FindControlByID(b.IN_GAME_CONTAINER).SetVisibility(!0),
    c.FindControlByID(b.WHITE_TRIANGLE).SetVisibility(!1));
  c.SetVisibility(!0);
  g.scrollWindow = f;
  g.inviteCallback = a.inviteCallback;
  h.container = a;
  a.regionData ? i.SetLocaleText(simcity.cGameInvitesController.LocaleString.kInviteTitle, {
    boxName : a.regionData.name
  }) : i.SetRawText("");
  a = simcity.gGameInvitesController.mOnShowInvitePanel;
  "function" === typeof a && a();
  f.DestroyChildren();
  this.DrawAllAvatarGrids(f, d, e, 3)
};
simcity.cGameInvitesController.prototype.HideInvitePanel = function (a) {
  var b = simcity.gGameInvitesController.mPageIDs,
  c = a;
  a.container && (c = a.container);
  c.FindControlByID(b.INVITE_FRIENDS_PANEL).SetVisibility(!1);
  c.FindControlByID(b.REGION_INVITE_BUTTON).SetSelected(!1);
  simcity.gGlobalUIHandler && gUIManager.FindControlByID(b.IN_GAME_CONTAINER).SetVisibility(!0)
};
simcity.cGameInvitesController.prototype.ToggleInvitePanel = function (a) {
  a = a.mParentControl;
  a.FindControlByID(simcity.gGameInvitesController.mPageIDs.INVITE_FRIENDS_PANEL).GetAbsoluteVisibility() ? simcity.gGameInvitesController.HideInvitePanel(a) : simcity.gGameInvitesController.ShowInvitePanel(a)
};
simcity.cGameInvitesController.prototype.InviteUsersToCity = function (a, b, c, d, e) {
  b && (a = a + "/" + b);
  b = {
    url : scrui.GetRestPath() + "/region/" + a + "/invites.json",
    params : [["invitees", c]],
    onSuccess : function (a) {
      a.json.errorCode ? e(c) : "function" === typeof d && d(c)
    },
    onError : function () {
      "function" === typeof e && e(c)
    },
    method : "post"
  };
  scrui.XHR.Request(b)
};
simcity.cGameInvitesController.prototype.InviteUsers = function (a) {
  var b = simcity.gUIToolbox.GetSelectedIdsFromControl(a.scrollWindow, simcity.gGameInvitesController.mPageIDs.AVATAR_TOGGLE, "userID");
  b && b.length && (b = b.join());
  !b || b && 0 == b.length ? simcity.gGameInvitesController.mDialogManager.ShowLocalizedModal(simcity.cGameInvitesController.LocaleString.kOops, simcity.cGameInvitesController.LocaleString.kPleaseSelectFriends) : a.inviteCallback(b)
};
simcity.cGameInvitesController.prototype.RunInviteSentAnimation = function (a) {
  var b = simcity.gGameInvitesController.mPageIDs;
  a && (a = a.FindAnimationByID(b.INVITE_MSG_ANIMATION)) && a.Restart(scrui.cAnimation.kPlayForward)
};
simcity.cGameInvitesController.prototype.DrawAllAvatarGrids = function (a, b, c, d) {
  var e = simcity.gFriendController.GetOnlineFriends(),
  f = simcity.gFriendController.GetOfflineFriends(),
  g = 20;
  e.length ? (b.SetPosition(20, g), b.SetVisibility(!0), g = this.DrawAvatarGrid(g + 20, a, e, d)) : b.SetVisibility(!1);
  f.length ? (c.SetPosition(20, g), c.SetVisibility(!0), this.DrawAvatarGrid(g + 20, a, f, d)) : c.SetVisibility(!1)
};
simcity.cGameInvitesController.prototype.DrawAvatarGrid = function (a, b, c, d) {
  var e = this.mPageIDs,
  f = 0;
  if (c && c.length) {
    for (var g = 0, h = c.length; g < h; g++) {
      var i = c[g],
      j = gUIManager.LoadLayout(simcity.cGameInvitesController.kPageLayout.USER_TOGGLE_AVATAR, b);
      simcity.gUIToolbox.PrettyDateUtcMs(i.lastLogin);
      simcity.gUIToolbox.SetAvatar(j.FindControlByID(e.AVATAR_IMAGE), i.screenName);
      j.FindControlByID(e.AVATAR_NAME).SetRawText(i.screenName);
      j.userID = i.id;
      j.SetPosition(f, a);
      j.FindControlByID(e.AVATAR_PRESENCE_FRAME).SetWindowImage(simcity.gUIToolbox.GetAvatarFrame(i));
      g + 1 >= h || 0 == (g + 1) % d ? (f = 0, a += j.mHeight) : f += j.mWidth
    }
    a += 40
  }
  return a
};
simcity.gGameInvitesController = new simcity.cGameInvitesController;
simcity.databindings.RegionalDefaultCityInfo = {};
simcity.kRegionalDefaultCityInfo = {
  CapeTrinity : {
    Enabled : 1,
    regionName : "AutomatedRegionTemplates.json!0x8e4a59b0",
    regionDescription : "AutomatedRegionTemplates.json!0xc27f9a62",
    regionLoadingImage : "CapeTrinity_LoadingBackDrop.png",
    labels : {},
    cities : {
      1026 : {
        cityName : "AutomatedRegionTemplates.json!0x6779b9d2",
        cityDescription : "AutomatedRegionTemplates.json!0x2b42d990",
        percentageBuildable : "90",
        residentialDesirability : "1",
        wind : "1",
        water : "3",
        coal : "0",
        rawOre : "0",
        crudeOil : "0",
        tornadoes : "0",
        earthquakes : "0",
        rail : "true",
        shipping : "true",
        resources : []
      },
      1027 : {
        cityName : "AutomatedRegionTemplates.json!0xfc0c91cf",
        cityDescription : "AutomatedRegionTemplates.json!0x3dc78265",
        percentageBuildable : "90",
        residentialDesirability : "2",
        wind : "1",
        water : "2",
        coal : "0",
        rawOre : "0",
        crudeOil : "0",
        tornadoes : "0",
        earthquakes : "0",
        rail : "true",
        shipping : "true",
        resources : []
      },
      1028 : {
        cityName : "AutomatedRegionTemplates.json!0xcf049f2d",
        cityDescription : "AutomatedRegionTemplates.json!0x4a7763ef",
        percentageBuildable : "80",
        residentialDesirability : "2",
        wind : "1",
        water : "2",
        coal : "2",
        rawOre : "2",
        crudeOil : "2",
        tornadoes : "0",
        earthquakes : "0",
        rail : "true",
        shipping : "false",
        resources : []
      }
    }
  },
  CliffsideVista : {
    Enabled : 1,
    regionName : "AutomatedRegionTemplates.json!0x2a6b0baa",
    regionDescription : "AutomatedRegionTemplates.json!0xac014408",
    regionLoadingImage : "CliffsideVista_LoadingBackDrop.png",
    labels : {
      RiverLabel : {
        xCoord : "100",
        yCoord : "100",
        labelText : "AutomatedRegionTemplates.json!0xf5b3bd7f",
        labelAngle : "1"
      }
    },
    cities : {
      1026 : {
        cityName : "AutomatedRegionTemplates.json!0x7a74a6c6",
        cityDescription : "AutomatedRegionTemplates.json!0xf5d3e34c",
        percentageBuildable : "100",
        residentialDesirability : "2",
        wind : "3",
        water : "2",
        coal : "2",
        rawOre : "2",
        crudeOil : "2",
        tornadoes : "1",
        earthquakes : "1",
        rail : "false",
        shipping : "false",
        resources : ["AutomatedResources.json!0xbf75dc04"]
      },
      1027 : {
        cityName : "AutomatedRegionTemplates.json!0x94966db2",
        cityDescription : "AutomatedRegionTemplates.json!0x585f8e70",
        percentageBuildable : "70",
        residentialDesirability : "3",
        wind : "1",
        water : "3",
        coal : "0",
        rawOre : "0",
        crudeOil : "0",
        tornadoes : "1",
        earthquakes : "1",
        rail : "false",
        shipping : "true",
        resources : ["AutomatedResources.json!0xcec5890c"]
      }
    }
  },
  Confluence : {
    Enabled : 1,
    regionName : "AutomatedRegionTemplates.json!0x77cb42ea",
    regionDescription : "AutomatedRegionTemplates.json!0xfbdbe448",
    regionLoadingImage : "Confluence_LoadingBackDrop.png",
    labels : {},
    cities : {
      1026 : {
        cityName : "AutomatedRegionTemplates.json!0xa79638c7",
        cityDescription : "AutomatedRegionTemplates.json!0x0b85715d",
        percentageBuildable : "95",
        residentialDesirability : "1",
        wind : "1",
        water : "2",
        coal : "2",
        rawOre : "3",
        crudeOil : "1",
        tornadoes : "1",
        earthquakes : "1",
        rail : "true",
        shipping : "true",
        resources : []
      },
      1027 : {
        cityName : "AutomatedRegionTemplates.json!0xae3b915a",
        cityDescription : "AutomatedRegionTemplates.json!0x51ae9418",
        percentageBuildable : "90",
        residentialDesirability : "1",
        wind : "1",
        water : "2",
        coal : "3",
        rawOre : "2",
        crudeOil : "0",
        tornadoes : "1",
        earthquakes : "1",
        rail : "true",
        shipping : "true",
        resources : []
      },
      1028 : {
        cityName : "AutomatedRegionTemplates.json!0x42647828",
        cityDescription : "AutomatedRegionTemplates.json!0x96f2fb1a",
        percentageBuildable : "90",
        residentialDesirability : "1",
        wind : "0",
        water : "3",
        coal : "0",
        rawOre : "0",
        crudeOil : "0",
        tornadoes : "1",
        earthquakes : "1",
        rail : "true",
        shipping : "true",
        resources : []
      },
      1029 : {
        cityName : "AutomatedRegionTemplates.json!0x4d7b89b2",
        cityDescription : "AutomatedRegionTemplates.json!0x1144aa70",
        percentageBuildable : "95",
        residentialDesirability : "1",
        wind : "0",
        water : "2",
        coal : "3",
        rawOre : "1",
        crudeOil : "3",
        tornadoes : "1",
        earthquakes : "1",
        rail : "true",
        shipping : "true",
        resources : []
      },
      1030 : {
        cityName : "AutomatedRegionTemplates.json!0xf3c76956",
        cityDescription : "AutomatedRegionTemplates.json!0x8fc315bc",
        percentageBuildable : "80",
        residentialDesirability : "1",
        wind : "0",
        water : "3",
        coal : "2",
        rawOre : "3",
        crudeOil : "2",
        tornadoes : "1",
        earthquakes : "1",
        rail : "true",
        shipping : "true",
        resources : []
      }
    }
  },
  Gallia : {
    Enabled : 1,
    regionName : "AutomatedRegionTemplates.json!0xfd4011aa",
    regionDescription : "AutomatedRegionTemplates.json!0x7ed64a08",
    regionLoadingImage : "Gallia_LoadingBackDrop.png",
    labels : {},
    cities : {
      1026 : {
        cityName : "AutomatedRegionTemplates.json!0x566cabfe",
        cityDescription : "AutomatedRegionTemplates.json!0x122237e4",
        percentageBuildable : "80",
        residentialDesirability : "2",
        wind : "1",
        water : "3",
        coal : "0",
        rawOre : "1",
        crudeOil : "3",
        tornadoes : "1",
        earthquakes : "1",
        rail : "true",
        shipping : "true",
        resources : []
      },
      1027 : {
        cityName : "AutomatedRegionTemplates.json!0xa7789ab4",
        cityDescription : "AutomatedRegionTemplates.json!0x0148cbce",
        percentageBuildable : "100",
        residentialDesirability : "1",
        wind : "1",
        water : "3",
        coal : "0",
        rawOre : "0",
        crudeOil : "2",
        tornadoes : "1",
        earthquakes : "1",
        rail : "true",
        shipping : "true",
        resources : []
      },
      1028 : {
        cityName : "AutomatedRegionTemplates.json!0x01e9fe3f",
        cityDescription : "AutomatedRegionTemplates.json!0x26be8975",
        percentageBuildable : "100",
        residentialDesirability : "1",
        wind : "1",
        water : "3",
        coal : "3",
        rawOre : "2",
        crudeOil : "0",
        tornadoes : "1",
        earthquakes : "1",
        rail : "true",
        shipping : "false",
        resources : []
      },
      1029 : {
        cityName : "AutomatedRegionTemplates.json!0x604fb050",
        cityDescription : "AutomatedRegionTemplates.json!0x920c1a02",
        percentageBuildable : "90",
        residentialDesirability : "2",
        wind : "1",
        water : "3",
        coal : "2",
        rawOre : "3",
        crudeOil : "1",
        tornadoes : "1",
        earthquakes : "1",
        rail : "false",
        shipping : "true",
        resources : []
      },
      1030 : {
        cityName : "AutomatedRegionTemplates.json!0xa0f67fb3",
        cityDescription : "AutomatedRegionTemplates.json!0xfd989731",
        percentageBuildable : "40",
        residentialDesirability : "3",
        wind : "1",
        water : "3",
        coal : "3",
        rawOre : "1",
        crudeOil : "0",
        tornadoes : "1",
        earthquakes : "1",
        rail : "true",
        shipping : "false",
        resources : []
      },
      1031 : {
        cityName : "AutomatedRegionTemplates.json!0xa52c8370",
        cityDescription : "AutomatedRegionTemplates.json!0xd6e8ed22",
        percentageBuildable : "70",
        residentialDesirability : "3",
        wind : "1",
        water : "2",
        coal : "3",
        rawOre : "2",
        crudeOil : "0",
        tornadoes : "1",
        earthquakes : "1",
        rail : "true",
        shipping : "false",
        resources : []
      },
      1032 : {
        cityName : "AutomatedRegionTemplates.json!0xcba6f916",
        cityDescription : "AutomatedRegionTemplates.json!0x67a4397c",
        percentageBuildable : "80",
        residentialDesirability : "1",
        wind : "1",
        water : "3",
        coal : "2",
        rawOre : "2",
        crudeOil : "2",
        tornadoes : "1",
        earthquakes : "1",
        rail : "false",
        shipping : "true",
        resources : []
      },
      1033 : {
        cityName : "AutomatedRegionTemplates.json!0xeb7e47b4",
        cityDescription : "AutomatedRegionTemplates.json!0x454e78ce",
        percentageBuildable : "80",
        residentialDesirability : "2",
        wind : "1",
        water : "3",
        coal : "3",
        rawOre : "2",
        crudeOil : "0",
        tornadoes : "1",
        earthquakes : "1",
        rail : "true",
        shipping : "false",
        resources : []
      },
      1034 : {
        cityName : "AutomatedRegionTemplates.json!0x690f65de",
        cityDescription : "AutomatedRegionTemplates.json!0x24c4f1c4",
        percentageBuildable : "70",
        residentialDesirability : "2",
        wind : "1",
        water : "3",
        coal : "3",
        rawOre : "0",
        crudeOil : "3",
        tornadoes : "1",
        earthquakes : "1",
        rail : "false",
        shipping : "true",
        resources : []
      },
      1035 : {
        cityName : "AutomatedRegionTemplates.json!0x65001054",
        cityDescription : "AutomatedRegionTemplates.json!0xbed0416e",
        percentageBuildable : "60",
        residentialDesirability : "2",
        wind : "1",
        water : "2",
        coal : "1",
        rawOre : "3",
        crudeOil : "0",
        tornadoes : "1",
        earthquakes : "1",
        rail : "true",
        shipping : "false",
        resources : []
      },
      1036 : {
        cityName : "AutomatedRegionTemplates.json!0xf200ca20",
        cityDescription : "AutomatedRegionTemplates.json!0x43bbd3b2",
        percentageBuildable : "90",
        residentialDesirability : "1",
        wind : "1",
        water : "3",
        coal : "2",
        rawOre : "1",
        crudeOil : "2",
        tornadoes : "1",
        earthquakes : "1",
        rail : "true",
        shipping : "true",
        resources : []
      },
      1037 : {
        cityName : "AutomatedRegionTemplates.json!0xc89ba5c2",
        cityDescription : "AutomatedRegionTemplates.json!0x6c6626e0",
        percentageBuildable : "90",
        residentialDesirability : "1",
        wind : "1",
        water : "3",
        coal : "0",
        rawOre : "0",
        crudeOil : "3",
        tornadoes : "1",
        earthquakes : "1",
        rail : "true",
        shipping : "true",
        resources : []
      },
      1038 : {
        cityName : "AutomatedRegionTemplates.json!0x7a74ab21",
        cityDescription : "AutomatedRegionTemplates.json!0x4e2a5c9b",
        percentageBuildable : "100",
        residentialDesirability : "1",
        wind : "1",
        water : "3",
        coal : "2",
        rawOre : "3",
        crudeOil : "0",
        tornadoes : "1",
        earthquakes : "1",
        rail : "false",
        shipping : "true",
        resources : []
      },
      1039 : {
        cityName : "AutomatedRegionTemplates.json!0xf518c03b",
        cityDescription : "AutomatedRegionTemplates.json!0x5161c759",
        percentageBuildable : "100",
        residentialDesirability : "1",
        wind : "1",
        water : "3",
        coal : "3",
        rawOre : "2",
        crudeOil : "0",
        tornadoes : "1",
        earthquakes : "1",
        rail : "false",
        shipping : "true",
        resources : []
      },
      1040 : {
        cityName : "AutomatedRegionTemplates.json!0x0d077dcb",
        cityDescription : "AutomatedRegionTemplates.json!0x46d77c49",
        percentageBuildable : "85",
        residentialDesirability : "2",
        wind : "1",
        water : "2",
        coal : "2",
        rawOre : "3",
        crudeOil : "0",
        tornadoes : "1",
        earthquakes : "1",
        rail : "true",
        shipping : "false",
        resources : []
      },
      1041 : {
        cityName : "AutomatedRegionTemplates.json!0x8b3ac14e",
        cityDescription : "AutomatedRegionTemplates.json!0x696ae814",
        percentageBuildable : "80",
        residentialDesirability : "2",
        wind : "1",
        water : "3",
        coal : "3",
        rawOre : "2",
        crudeOil : "0",
        tornadoes : "1",
        earthquakes : "1",
        rail : "true",
        shipping : "false",
        resources : []
      }
    }
  },
  Horizon : {
    Enabled : 1,
    regionName : "AutomatedRegionTemplates.json!0x951c174f",
    regionDescription : "AutomatedRegionTemplates.json!0xd6d707e5",
    regionLoadingImage : "Horizon_LoadingBackDrop.png",
    labels : {},
    cities : {
      1026 : {
        cityName : "AutomatedRegionTemplates.json!0xf3f7420c",
        cityDescription : "AutomatedRegionTemplates.json!0x50995986",
        percentageBuildable : "100",
        residentialDesirability : "2",
        wind : "2",
        water : "2",
        coal : "3",
        rawOre : "1",
        crudeOil : "0",
        tornadoes : "1",
        earthquakes : "1",
        rail : "true",
        shipping : "false",
        resources : []
      },
      1027 : {
        cityName : "AutomatedRegionTemplates.json!0x2f9dac8a",
        cityDescription : "AutomatedRegionTemplates.json!0xb3ae4ee8",
        percentageBuildable : "90",
        residentialDesirability : "3",
        wind : "3",
        water : "3",
        coal : "2",
        rawOre : "2",
        crudeOil : "2",
        tornadoes : "1",
        earthquakes : "1",
        rail : "true",
        shipping : "true",
        resources : []
      },
      1028 : {
        cityName : "AutomatedRegionTemplates.json!0xbd72897a",
        cityDescription : "AutomatedRegionTemplates.json!0x60e3f938",
        percentageBuildable : "70",
        residentialDesirability : "1",
        wind : "2",
        water : "2",
        coal : "2",
        rawOre : "3",
        crudeOil : "0",
        tornadoes : "1",
        earthquakes : "1",
        rail : "true",
        shipping : "true",
        resources : []
      },
      1029 : {
        cityName : "AutomatedRegionTemplates.json!0x53f41f99",
        cityDescription : "AutomatedRegionTemplates.json!0xc7f120d3",
        percentageBuildable : "80",
        residentialDesirability : "1",
        wind : "2",
        water : "2",
        coal : "3",
        rawOre : "1",
        crudeOil : "0",
        tornadoes : "1",
        earthquakes : "1",
        rail : "true",
        shipping : "true",
        resources : []
      },
      1030 : {
        cityName : "AutomatedRegionTemplates.json!0x8a28cd01",
        cityDescription : "AutomatedRegionTemplates.json!0x6058e87b",
        percentageBuildable : "95",
        residentialDesirability : "1",
        wind : "1",
        water : "3",
        coal : "0",
        rawOre : "3",
        crudeOil : "3",
        tornadoes : "1",
        earthquakes : "1",
        rail : "true",
        shipping : "true",
        resources : []
      },
      1031 : {
        cityName : "AutomatedRegionTemplates.json!0x2b0c60be",
        cityDescription : "AutomatedRegionTemplates.json!0xe93de8a4",
        percentageBuildable : "85",
        residentialDesirability : "2",
        wind : "3",
        water : "3",
        coal : "1",
        rawOre : "2",
        crudeOil : "2",
        tornadoes : "1",
        earthquakes : "1",
        rail : "true",
        shipping : "true",
        resources : []
      },
      1032 : {
        cityName : "AutomatedRegionTemplates.json!0xde257d60",
        cityDescription : "AutomatedRegionTemplates.json!0x325c82f2",
        percentageBuildable : "95",
        residentialDesirability : "2",
        wind : "2",
        water : "2",
        coal : "3",
        rawOre : "0",
        crudeOil : "0",
        tornadoes : "1",
        earthquakes : "1",
        rail : "true",
        shipping : "false",
        resources : []
      },
      1033 : {
        cityName : "AutomatedRegionTemplates.json!0x5ce34ea7",
        cityDescription : "AutomatedRegionTemplates.json!0xc0d2873d",
        percentageBuildable : "80",
        residentialDesirability : "1",
        wind : "1",
        water : "3",
        coal : "1",
        rawOre : "2",
        crudeOil : "1",
        tornadoes : "1",
        earthquakes : "1",
        rail : "true",
        shipping : "true",
        resources : []
      },
      1034 : {
        cityName : "AutomatedRegionTemplates.json!0x68564e1a",
        cityDescription : "AutomatedRegionTemplates.json!0x0bc7bed8",
        percentageBuildable : "80",
        residentialDesirability : "1",
        wind : "1",
        water : "2",
        coal : "3",
        rawOre : "0",
        crudeOil : "0",
        tornadoes : "1",
        earthquakes : "1",
        rail : "true",
        shipping : "true",
        resources : []
      },
      1035 : {
        cityName : "AutomatedRegionTemplates.json!0xe962e8b3",
        cityDescription : "AutomatedRegionTemplates.json!0x46050031",
        percentageBuildable : "75",
        residentialDesirability : "3",
        wind : "3",
        water : "2",
        coal : "3",
        rawOre : "0",
        crudeOil : "0",
        tornadoes : "1",
        earthquakes : "1",
        rail : "true",
        shipping : "false",
        resources : []
      },
      1036 : {
        cityName : "AutomatedRegionTemplates.json!0x936e88de",
        cityDescription : "AutomatedRegionTemplates.json!0x4f2414c4",
        percentageBuildable : "95",
        residentialDesirability : "1",
        wind : "2",
        water : "3",
        coal : "2",
        rawOre : "3",
        crudeOil : "0",
        tornadoes : "1",
        earthquakes : "1",
        rail : "true",
        shipping : "false",
        resources : []
      }
    }
  },
  LittleGorge : {
    Enabled : 1,
    regionName : "AutomatedRegionTemplates.json!0xd29a65a2",
    regionDescription : "AutomatedRegionTemplates.json!0x78ddbcc0",
    regionLoadingImage : "LittleGorge_LoadingBackDrop.png",
    labels : {},
    cities : {
      1026 : {
        cityName : "AutomatedRegionTemplates.json!0xc92a4a92",
        cityDescription : "AutomatedRegionTemplates.json!0x8f6f6750",
        percentageBuildable : "80",
        residentialDesirability : "2",
        wind : "1",
        water : "3",
        coal : "2",
        rawOre : "1",
        crudeOil : "1",
        tornadoes : "1",
        earthquakes : "1",
        rail : "true",
        shipping : "true",
        resources : []
      },
      1027 : {
        cityName : "AutomatedRegionTemplates.json!0x45d04896",
        cityDescription : "AutomatedRegionTemplates.json!0xe1cd88fc",
        percentageBuildable : "100",
        residentialDesirability : "1",
        wind : "1",
        water : "2",
        coal : "1",
        rawOre : "0",
        crudeOil : "3",
        tornadoes : "1",
        earthquakes : "1",
        rail : "true",
        shipping : "false",
        resources : []
      },
      1028 : {
        cityName : "AutomatedRegionTemplates.json!0xa82d086f",
        cityDescription : "AutomatedRegionTemplates.json!0xe9e98b05",
        percentageBuildable : "100",
        residentialDesirability : "1",
        wind : "1",
        water : "3",
        coal : "0",
        rawOre : "0",
        crudeOil : "3",
        tornadoes : "1",
        earthquakes : "1",
        rail : "true",
        shipping : "false",
        resources : []
      },
      1029 : {
        cityName : "AutomatedRegionTemplates.json!0x1df4a59c",
        cityDescription : "AutomatedRegionTemplates.json!0x99f78c76",
        percentageBuildable : "90",
        residentialDesirability : "2",
        wind : "1",
        water : "3",
        coal : "2",
        rawOre : "1",
        crudeOil : "1",
        tornadoes : "1",
        earthquakes : "1",
        rail : "true",
        shipping : "true",
        resources : []
      },
      1030 : {
        cityName : "AutomatedRegionTemplates.json!0x5cd9c204",
        cityDescription : "AutomatedRegionTemplates.json!0x992429be",
        percentageBuildable : "40",
        residentialDesirability : "3",
        wind : "1",
        water : "1",
        coal : "3",
        rawOre : "3",
        crudeOil : "0",
        tornadoes : "1",
        earthquakes : "1",
        rail : "false",
        shipping : "false",
        resources : []
      },
      1031 : {
        cityName : "AutomatedRegionTemplates.json!0x0961088a",
        cityDescription : "AutomatedRegionTemplates.json!0x8d71aae8",
        percentageBuildable : "70",
        residentialDesirability : "3",
        wind : "1",
        water : "3",
        coal : "2",
        rawOre : "0",
        crudeOil : "2",
        tornadoes : "1",
        earthquakes : "1",
        rail : "false",
        shipping : "true",
        resources : []
      },
      1032 : {
        cityName : "AutomatedRegionTemplates.json!0x98d006d4",
        cityDescription : "AutomatedRegionTemplates.json!0xf2a037ee",
        percentageBuildable : "80",
        residentialDesirability : "1",
        wind : "2",
        water : "3",
        coal : "1",
        rawOre : "1",
        crudeOil : "2",
        tornadoes : "1",
        earthquakes : "1",
        rail : "true",
        shipping : "false",
        resources : []
      },
      1033 : {
        cityName : "AutomatedRegionTemplates.json!0x63629951",
        cityDescription : "AutomatedRegionTemplates.json!0x171818eb",
        percentageBuildable : "80",
        residentialDesirability : "2",
        wind : "2",
        water : "1",
        coal : "1",
        rawOre : "3",
        crudeOil : "2",
        tornadoes : "1",
        earthquakes : "1",
        rail : "true",
        shipping : "true",
        resources : []
      },
      1034 : {
        cityName : "AutomatedRegionTemplates.json!0x236feb3c",
        cityDescription : "AutomatedRegionTemplates.json!0x9f72d116",
        percentageBuildable : "70",
        residentialDesirability : "2",
        wind : "2",
        water : "1",
        coal : "3",
        rawOre : "3",
        crudeOil : "0",
        tornadoes : "1",
        earthquakes : "1",
        rail : "true",
        shipping : "false",
        resources : []
      },
      1035 : {
        cityName : "AutomatedRegionTemplates.json!0xbac2a92f",
        cityDescription : "AutomatedRegionTemplates.json!0xfef802c5",
        percentageBuildable : "60",
        residentialDesirability : "2",
        wind : "2",
        water : "1",
        coal : "3",
        rawOre : "2",
        crudeOil : "0",
        tornadoes : "1",
        earthquakes : "1",
        rail : "true",
        shipping : "false",
        resources : []
      },
      1036 : {
        cityName : "AutomatedRegionTemplates.json!0x06619faf",
        cityDescription : "AutomatedRegionTemplates.json!0x4a96f945",
        percentageBuildable : "90",
        residentialDesirability : "1",
        wind : "2",
        water : "1",
        coal : "3",
        rawOre : "3",
        crudeOil : "0",
        tornadoes : "1",
        earthquakes : "1",
        rail : "true",
        shipping : "false",
        resources : []
      },
      1037 : {
        cityName : "AutomatedRegionTemplates.json!0xade0848b",
        cityDescription : "AutomatedRegionTemplates.json!0xea2aec09",
        percentageBuildable : "90",
        residentialDesirability : "1",
        wind : "2",
        water : "1",
        coal : "3",
        rawOre : "2",
        crudeOil : "0",
        tornadoes : "1",
        earthquakes : "1",
        rail : "true",
        shipping : "false",
        resources : []
      },
      1038 : {
        cityName : "AutomatedRegionTemplates.json!0x39b44a32",
        cityDescription : "AutomatedRegionTemplates.json!0xfd7d6af0",
        percentageBuildable : "100",
        residentialDesirability : "1",
        wind : "2",
        water : "1",
        coal : "2",
        rawOre : "3",
        crudeOil : "0",
        tornadoes : "1",
        earthquakes : "1",
        rail : "true",
        shipping : "false",
        resources : []
      },
      1039 : {
        cityName : "AutomatedRegionTemplates.json!0x5123b7f3",
        cityDescription : "AutomatedRegionTemplates.json!0xadc5cf71",
        percentageBuildable : "100",
        residentialDesirability : "1",
        wind : "2",
        water : "1",
        coal : "3",
        rawOre : "0",
        crudeOil : "0",
        tornadoes : "1",
        earthquakes : "1",
        rail : "true",
        shipping : "false",
        resources : []
      },
      1040 : {
        cityName : "AutomatedRegionTemplates.json!0xe7bd53be",
        cityDescription : "AutomatedRegionTemplates.json!0xa5eedba4",
        percentageBuildable : "85",
        residentialDesirability : "2",
        wind : "2",
        water : "1",
        coal : "3",
        rawOre : "2",
        crudeOil : "0",
        tornadoes : "1",
        earthquakes : "1",
        rail : "true",
        shipping : "false",
        resources : []
      },
      1041 : {
        cityName : "AutomatedRegionTemplates.json!0x0010b202",
        cityDescription : "AutomatedRegionTemplates.json!0xa6540920",
        percentageBuildable : "80",
        residentialDesirability : "2",
        wind : "2",
        water : "1",
        coal : "2",
        rawOre : "2",
        crudeOil : "0",
        tornadoes : "1",
        earthquakes : "1",
        rail : "true",
        shipping : "false",
        resources : []
      }
    }
  },
  Reflection : {
    Enabled : 1,
    regionName : "AutomatedRegionTemplates.json!0xc1822f57",
    regionDescription : "AutomatedRegionTemplates.json!0x460f6a8d",
    regionLoadingImage : "Reflection_LoadingBackDrop.png",
    labels : {},
    cities : {
      1026 : {
        cityName : "AutomatedRegionTemplates.json!0x9bd8d2a1",
        cityDescription : "AutomatedRegionTemplates.json!0x6f8e841b",
        percentageBuildable : "95",
        residentialDesirability : "1",
        wind : "1",
        water : "3",
        coal : "1",
        rawOre : "1",
        crudeOil : "1",
        tornadoes : "1",
        earthquakes : "1",
        rail : "true",
        shipping : "true",
        resources : []
      },
      1027 : {
        cityName : "AutomatedRegionTemplates.json!0x22f85786",
        cityDescription : "AutomatedRegionTemplates.json!0x9e56010c",
        percentageBuildable : "90",
        residentialDesirability : "1",
        wind : "1",
        water : "3",
        coal : "0",
        rawOre : "0",
        crudeOil : "3",
        tornadoes : "1",
        earthquakes : "1",
        rail : "true",
        shipping : "true",
        resources : []
      },
      1028 : {
        cityName : "AutomatedRegionTemplates.json!0xf0199aef",
        cityDescription : "AutomatedRegionTemplates.json!0x31d61d85",
        percentageBuildable : "90",
        residentialDesirability : "1",
        wind : "1",
        water : "2",
        coal : "3",
        rawOre : "0",
        crudeOil : "0",
        tornadoes : "1",
        earthquakes : "1",
        rail : "true",
        shipping : "true",
        resources : []
      },
      1029 : {
        cityName : "AutomatedRegionTemplates.json!0x3a4b861a",
        cityDescription : "AutomatedRegionTemplates.json!0xddbcf6d8",
        percentageBuildable : "95",
        residentialDesirability : "1",
        wind : "1",
        water : "3",
        coal : "0",
        rawOre : "0",
        crudeOil : "0",
        tornadoes : "1",
        earthquakes : "1",
        rail : "true",
        shipping : "true",
        resources : []
      },
      1030 : {
        cityName : "AutomatedRegionTemplates.json!0x4d794628",
        cityDescription : "AutomatedRegionTemplates.json!0xa207c91a",
        percentageBuildable : "80",
        residentialDesirability : "1",
        wind : "1",
        water : "3",
        coal : "0",
        rawOre : "0",
        crudeOil : "0",
        tornadoes : "1",
        earthquakes : "1",
        rail : "true",
        shipping : "true",
        resources : []
      },
      1031 : {
        cityName : "AutomatedRegionTemplates.json!0x62ce40e8",
        cityDescription : "AutomatedRegionTemplates.json!0xb75b30da",
        percentageBuildable : "80",
        residentialDesirability : "1",
        wind : "2",
        water : "3",
        coal : "0",
        rawOre : "3",
        crudeOil : "0",
        tornadoes : "1",
        earthquakes : "1",
        rail : "true",
        shipping : "true",
        resources : []
      },
      1032 : {
        cityName : "AutomatedRegionTemplates.json!0x2bb5bba8",
        cityDescription : "AutomatedRegionTemplates.json!0x80443e9a",
        percentageBuildable : "80",
        residentialDesirability : "1",
        wind : "1",
        water : "3",
        coal : "0",
        rawOre : "0",
        crudeOil : "0",
        tornadoes : "1",
        earthquakes : "1",
        rail : "true",
        shipping : "true",
        resources : []
      }
    }
  },
  Sawyer : {
    Enabled : 1,
    regionName : "AutomatedRegionTemplates.json!0x6e132f95",
    regionDescription : "AutomatedRegionTemplates.json!0x29dc43f7",
    regionLoadingImage : "Sawyer_LoadingBackDrop.png",
    labels : {},
    cities : {
      1026 : {
        cityName : "AutomatedRegionTemplates.json!0x50446fac",
        cityDescription : "AutomatedRegionTemplates.json!0xace68726",
        percentageBuildable : "75",
        residentialDesirability : "1",
        wind : "1",
        water : "3",
        coal : "1",
        rawOre : "2",
        crudeOil : "0",
        tornadoes : "1",
        earthquakes : "1",
        rail : "true",
        shipping : "true",
        resources : []
      },
      1027 : {
        cityName : "AutomatedRegionTemplates.json!0x12d985f1",
        cityDescription : "AutomatedRegionTemplates.json!0xc690978b",
        percentageBuildable : "80",
        residentialDesirability : "2",
        wind : "1",
        water : "3",
        coal : "3",
        rawOre : "3",
        crudeOil : "0",
        tornadoes : "1",
        earthquakes : "1",
        rail : "true",
        shipping : "true",
        resources : []
      },
      1028 : {
        cityName : "AutomatedRegionTemplates.json!0x262ca829",
        cityDescription : "AutomatedRegionTemplates.json!0xb98c0ac3",
        percentageBuildable : "100",
        residentialDesirability : "1",
        wind : "1",
        water : "1",
        coal : "3",
        rawOre : "0",
        crudeOil : "1",
        tornadoes : "1",
        earthquakes : "1",
        rail : "true",
        shipping : "false",
        resources : []
      },
      1029 : {
        cityName : "AutomatedRegionTemplates.json!0xe0ff08c0",
        cityDescription : "AutomatedRegionTemplates.json!0x35347b52",
        percentageBuildable : "80",
        residentialDesirability : "2",
        wind : "1",
        water : "3",
        coal : "3",
        rawOre : "1",
        crudeOil : "0",
        tornadoes : "1",
        earthquakes : "1",
        rail : "true",
        shipping : "true",
        resources : []
      },
      1030 : {
        cityName : "AutomatedRegionTemplates.json!0x2309eecd",
        cityDescription : "AutomatedRegionTemplates.json!0x9e7cb28f",
        percentageBuildable : "90",
        residentialDesirability : "2",
        wind : "1",
        water : "3",
        coal : "3",
        rawOre : "3",
        crudeOil : "0",
        tornadoes : "1",
        earthquakes : "1",
        rail : "true",
        shipping : "true",
        resources : []
      },
      1031 : {
        cityName : "AutomatedRegionTemplates.json!0x9d428e3c",
        cityDescription : "AutomatedRegionTemplates.json!0x19457416",
        percentageBuildable : "50",
        residentialDesirability : "3",
        wind : "1",
        water : "3",
        coal : "0",
        rawOre : "0",
        crudeOil : "0",
        tornadoes : "1",
        earthquakes : "1",
        rail : "true",
        shipping : "true",
        resources : []
      },
      1032 : {
        cityName : "AutomatedRegionTemplates.json!0xb79ea2d3",
        cityDescription : "AutomatedRegionTemplates.json!0x1440ba51",
        percentageBuildable : "80",
        residentialDesirability : "1",
        wind : "2",
        water : "3",
        coal : "1",
        rawOre : "0",
        crudeOil : "2",
        tornadoes : "1",
        earthquakes : "1",
        rail : "true",
        shipping : "true",
        resources : []
      },
      1033 : {
        cityName : "AutomatedRegionTemplates.json!0x04223fe4",
        cityDescription : "AutomatedRegionTemplates.json!0x3df23d9e",
        percentageBuildable : "90",
        residentialDesirability : "1",
        wind : "2",
        water : "3",
        coal : "2",
        rawOre : "3",
        crudeOil : "0",
        tornadoes : "1",
        earthquakes : "1",
        rail : "true",
        shipping : "true",
        resources : []
      },
      1034 : {
        cityName : "AutomatedRegionTemplates.json!0x48503939",
        cityDescription : "AutomatedRegionTemplates.json!0xb9d2d173",
        percentageBuildable : "90",
        residentialDesirability : "1",
        wind : "1",
        water : "3",
        coal : "2",
        rawOre : "0",
        crudeOil : "2",
        tornadoes : "1",
        earthquakes : "1",
        rail : "true",
        shipping : "false",
        resources : []
      },
      1035 : {
        cityName : "AutomatedRegionTemplates.json!0x3c1a15d1",
        cityDescription : "AutomatedRegionTemplates.json!0xefcf956b",
        percentageBuildable : "85",
        residentialDesirability : "1",
        wind : "2",
        water : "3",
        coal : "2",
        rawOre : "2",
        crudeOil : "0",
        tornadoes : "1",
        earthquakes : "1",
        rail : "true",
        shipping : "true",
        resources : []
      },
      1036 : {
        cityName : "AutomatedRegionTemplates.json!0x53c12390",
        cityDescription : "AutomatedRegionTemplates.json!0x87f7f742",
        percentageBuildable : "75",
        residentialDesirability : "2",
        wind : "2",
        water : "3",
        coal : "3",
        rawOre : "0",
        crudeOil : "1",
        tornadoes : "1",
        earthquakes : "1",
        rail : "true",
        shipping : "true",
        resources : []
      },
      1037 : {
        cityName : "AutomatedRegionTemplates.json!0x0ab3ddec",
        cityDescription : "AutomatedRegionTemplates.json!0x67546266",
        percentageBuildable : "80",
        residentialDesirability : "2",
        wind : "2",
        water : "3",
        coal : "2",
        rawOre : "3",
        crudeOil : "0",
        tornadoes : "1",
        earthquakes : "1",
        rail : "true",
        shipping : "true",
        resources : []
      },
      1038 : {
        cityName : "AutomatedRegionTemplates.json!0x4c116989",
        cityDescription : "AutomatedRegionTemplates.json!0xdf6f3923",
        percentageBuildable : "90",
        residentialDesirability : "2",
        wind : "2",
        water : "3",
        coal : "1",
        rawOre : "0",
        crudeOil : "3",
        tornadoes : "1",
        earthquakes : "1",
        rail : "true",
        shipping : "true",
        resources : []
      },
      1039 : {
        cityName : "AutomatedRegionTemplates.json!0x4aff559d",
        cityDescription : "AutomatedRegionTemplates.json!0xe7101d3f",
        percentageBuildable : "85",
        residentialDesirability : "1",
        wind : "2",
        water : "3",
        coal : "1",
        rawOre : "0",
        crudeOil : "3",
        tornadoes : "1",
        earthquakes : "1",
        rail : "false",
        shipping : "true",
        resources : []
      },
      1040 : {
        cityName : "AutomatedRegionTemplates.json!0x22d1c569",
        cityDescription : "AutomatedRegionTemplates.json!0xb62f9403",
        percentageBuildable : "85",
        residentialDesirability : "1",
        wind : "2",
        water : "3",
        coal : "2",
        rawOre : "2",
        crudeOil : "0",
        tornadoes : "1",
        earthquakes : "1",
        rail : "true",
        shipping : "true",
        resources : []
      },
      1041 : {
        cityName : "AutomatedRegionTemplates.json!0xe03a67cb",
        cityDescription : "AutomatedRegionTemplates.json!0x1a0a6649",
        percentageBuildable : "90",
        residentialDesirability : "3",
        wind : "2",
        water : "3",
        coal : "3",
        rawOre : "3",
        crudeOil : "0",
        tornadoes : "1",
        earthquakes : "1",
        rail : "true",
        shipping : "true",
        resources : []
      }
    }
  },
  Tutorial : {
    Enabled : 1,
    regionName : "AutomatedRegionTemplates.json!0xbd21955e",
    regionDescription : "AutomatedRegionTemplates.json!0x78d72144",
    regionLoadingImage : "Tutorial_LoadingBackDrop.png",
    labels : {
      RiverLabel : {
        xCoord : "100",
        yCoord : "100",
        labelText : "AutomatedRegionTemplates.json!0xf5b3bd7f",
        labelAngle : "1"
      }
    },
    cities : {
      1026 : {
        cityName : "AutomatedRegionTemplates.json!0x3ec84615",
        cityDescription : "AutomatedRegionTemplates.json!0xfa915a77",
        percentageBuildable : "85",
        residentialDesirability : "3",
        wind : "3",
        water : "3",
        coal : "0",
        rawOre : "2",
        crudeOil : "1",
        tornadoes : "1",
        earthquakes : "1",
        rail : "false",
        shipping : "true",
        resources : []
      },
      1027 : {
        cityName : "AutomatedRegionTemplates.json!0x144f287b",
        cityDescription : "AutomatedRegionTemplates.json!0x6e1f5899",
        percentageBuildable : "70",
        residentialDesirability : "2",
        wind : "2",
        water : "2",
        coal : "0",
        rawOre : "1",
        crudeOil : "2",
        tornadoes : "1",
        earthquakes : "1",
        rail : "true",
        shipping : "true",
        resources : []
      }
    }
  },
  TwinCities : {
    Enabled : 1,
    regionName : "AutomatedRegionTemplates.json!0x617c4d77",
    regionDescription : "AutomatedRegionTemplates.json!0xe60988ad",
    regionLoadingImage : "TwinCities_LoadingBackDrop.png",
    labels : {},
    cities : {
      1026 : {
        cityName : "AutomatedRegionTemplates.json!0xe3503852",
        cityDescription : "AutomatedRegionTemplates.json!0xa7195810",
        percentageBuildable : "80",
        residentialDesirability : "1",
        wind : "1",
        water : "2",
        coal : "1",
        rawOre : "2",
        crudeOil : "2",
        tornadoes : "0",
        earthquakes : "0",
        rail : "false",
        shipping : "true",
        resources : []
      },
      1027 : {
        cityName : "AutomatedRegionTemplates.json!0x82e6590f",
        cityDescription : "AutomatedRegionTemplates.json!0xc71d45a5",
        percentageBuildable : "80",
        residentialDesirability : "2",
        wind : "1",
        water : "2",
        coal : "1",
        rawOre : "2",
        crudeOil : "1",
        tornadoes : "0",
        earthquakes : "0",
        rail : "false",
        shipping : "true",
        resources : []
      }
    }
  }
};
simcity.GameDataRequestIDs = {};
simcity.kDataBins = "bins";
simcity.kDataBinAmount = "binAmount";
simcity.kDataResourceAmount = "resourceAmount";
simcity.kDataProperties = "properties";
simcity.kDataNonSimProperties = "nonSimProperties";
simcity.kDataSimProperties = "simProperties";
simcity.kDataUnitEntryIDSimProperties = "unitEntryIDSimProperties";
simcity.kDataLayers = "layers";
simcity.kDataMaps = "maps";
simcity.kDataSum = "sum";
simcity.kDataConnectedExtractorSum = "connectedExtractorSum";
simcity.kDataCategoryUnits = "categoryUnits";
simcity.kDataPeriodTimes = "periodTimes";
simcity.kDataSpeechBalloonTarget = "speechBalloonTarget";
simcity.kDataCamera = "camera";
simcity.kDataTools = "tools";
simcity.kDataEditor = "editor";
simcity.kDataURLProperty = "urlProperty";
simcity.kExitSurveyURLProperty = "urlProperty";
simcity.kDataDemo = "demo";
simcity.kDataAppProperties = "appProperties";
simcity.kDataActiveBoxId = "activeBoxId";
simcity.kDataActiveCityUID = "ActiveCityUID";
simcity.kDataRegionID = "RegionID";
simcity.kDataLastActiveCityUID = "LastActiveCityUID";
simcity.kDataCommandLine = "commandLine";
simcity.kDataMissions = "missions";
simcity.kDataUnits = "units";
simcity.kDataRegionUnits = "regionUnits";
simcity.kDataSpectator = "spectator";
simcity.kDataConnectedUnits = "connectedUnits";
simcity.kDataCachedUnits = "cachedUnits";
simcity.kDataAgent = "agent";
simcity.kDataActor = "actor";
simcity.kDataUnitUnderMouse = "unitUnderMouse";
simcity.kDataSelectedUnit = "selectedUnit";
simcity.kDataUIToolCategory = "uiToolCategory";
simcity.kDataSelectedTool = "selectedTool";
simcity.kDataResourceKeys = "resourceKeys";
simcity.kDataDoesUnitExist = "doesUnitExist";
simcity.kDataPathCongestion = "pathCongestion";
simcity.kDataGetToyOfType = "getToyOfType";
simcity.kDataCanEditUnit = "canEditUnit";
simcity.kDataCount = "count";
simcity.kDataLayerLegendKey = "layerLegendKey";
simcity.kDataName = "name";
simcity.kToolPaletteCategory = "toolPaletteCategory";
simcity.kDataToolCountUsed = "toolCountUsed";
simcity.kDataToolInfo = "toolInfo";
simcity.kDataToolID = "toolID";
simcity.kDataCursorKey = "cursorKey";
simcity.kDataToolRolloverAnchor = "toolRolloverAnchor";
simcity.kDataEnabled = "enabled";
simcity.kDataPropKey = "propKey";
simcity.kDataFlags = "flags";
simcity.kDataScreenPositionTop = "screenPositionTop";
simcity.kDataCheckFrustum = "checkFrustum";
simcity.kDataScreenPositionSpeechBalloon = "screenPositionSpeechBalloon";
simcity.kDataUnitName = "unitName";
simcity.kDataAudioID = "audioID";
simcity.kDataNonSimPropID = "nonSimPropID";
simcity.kDataUnitRef = "unitRef";
simcity.kDataRolloverAlertInfo = "rolloverAlertInfo";
simcity.kDataConnectedToHighDensityRoad = "connectedToHighDensityRoad";
simcity.kDataConnectedToMediumDensityRoad = "connectedToMediumDensityRoad";
simcity.kDataRolloverBar = "rolloverBar";
simcity.kDataRolloverArrow = "rolloverArrow";
simcity.kDataUIResourceKey = "uiResourceKey";
simcity.kDataUnitOfMeasure = "unitOfMeasure";
simcity.kDataConversionRate = "conversionRate";
simcity.kDataVisualizedDataRequestedUIKeys = "visualizedDataRequestedUIKeys";
simcity.kDataScreenPosition = "screenPosition";
simcity.kDataSimFirstName = "simFirstName";
simcity.kDataSimLastName = "simLastName";
simcity.kDataTransportName = "transportName";
simcity.kDataGender = "gender";
simcity.kDataDestination = "destination";
simcity.kDataSourceName = "sourceName";
simcity.kDataFailToFindSink = "failedToFindSink";
simcity.kDataSourceUnitRegionalBoxUniqueID = "regionalBoxUniqueID";
simcity.kDataShowGoToSource = "showGoToSource";
simcity.kCommandSetSpeechBalloonTarget = "SetSpeechBalloonTarget";
simcity.kDataDeselectUnit = "deselectUnit";
simcity.kDataSelectTool = "selectTool";
simcity.kDataDeselectTool = "deselecttool";
simcity.kDataQuit = "quit";
simcity.kDataQuitApp = "quitapp";
simcity.kDataRequestQuitApp = "requestquitapp";
simcity.kDataToolMessage = "toolMessage";
simcity.kDataExitBuildingEditor = "exitBuildingEditor";
simcity.kDataRunSelectedPlayerRule = "runSelectedUnitPlayerRule";
simcity.kCommandToggleLayer = "toggleLayer";
simcity.kCommandRoadDrawType = "RoadDrawType";
simcity.kCommandSetAppProperty = "SetAppProperty";
simcity.kCommandExitBuildingEditor = "exitBuildingEditor";
simcity.kCommandActivateVignette = "ActivateVignette";
simcity.kCommandDeactivateVignette = "DeactivateVignette";
simcity.kCommandZoomToSpeechBalloon = "zoomToSpeechBalloon";
simcity.kCommandEditBuilding = "editBuilding";
simcity.kCommandCreateUnit = "createUnit";
simcity.kCommandMoveCameraMinusOrientation = "moveCameraMinusOrientation";
simcity.kCommandActivateFollowAgentCam = "ActivateFollowAgentCam";
simcity.kCommandZoomToAgentSource = "ZoomToAgentSource";
simcity.kCommandMoveCameraNoTransition = "MoveCameraNoTransition";
simcity.kRequestNetworkConnectionState = "requestOnlineState";
simcity.globalui = {};
simcity.kWinRootWindowID = 174136993;
simcity.kWinSharedUIParent = 249564985;
simcity.kWinCityUIParent = 172239098;
simcity.kWinRegionUIParent = 203181610;
simcity.kBtnIDQuit = 158422761;
simcity.kBtnIDQuitApp = 246114684;
simcity.kBtnGameManual = 246379005;
simcity.kBtnHelpCenter = 246384586;
simcity.kBtnExposeDebugUI = 219260675;
simcity.kWinDebugToolCategories = 219237770;
simcity.kTxtFldBoxName = 169563268;
simcity.kBtnIDMaps = 158422738;
simcity.kBtnIDCategoryButton = 161711552;
simcity.kTxtIDMoney = 249592169;
simcity.kTxtIDMoneyDelta = 198586409;
simcity.kAnimIDMoney = 197135168;
simcity.kTxtIDIncome = 159532345;
simcity.kTxtIDPopulation = 158773667;
simcity.kTxtIDPopulationDelta = 198586767;
simcity.kTxtBoxName = 216742461;
simcity.kTxtIDDate = 200163084;
simcity.kTxtIDTime = 162918750;
simcity.kWinIDPaletteRoot = 231519198;
simcity.kWinIDPaletteHolder = 161444528;
simcity.kWinIDPalettePanelHolder = 183824299;
simcity.kWinIDMainMenu = 185362957;
simcity.kBtnIDMainMenuToggle = 185363042;
simcity.kBtnIDMainMenuResume = 225389358;
simcity.kBtnIDOpenSettings = 212665064;
simcity.kBtnIDOpenFeedback = 164452089;
simcity.kBtnIDOpenReportBug = 244638429;
simcity.kWinSurveyContainer = 243007821;
simcity.kWinIDMapsPanel = 158422526;
simcity.kWinPopulationContainer = 183039555;
simcity.kWinPopulationAlert = 240659521;
simcity.kWinPopulationCaution = 240659522;
simcity.kWinBudgetContainer = 183039554;
simcity.kWinBudgetAlert = 240659523;
simcity.kWinBudgetCaution = 240659524;
simcity.kBtnIDBudget = 246360712;
simcity.kBtnIDPopulation = 246360711;
simcity.kWinSpeedContainer = 182358354;
simcity.kWinLayerPaletteContainer = 158422526;
simcity.kWinToolRolloverContainer = 201366720;
simcity.kWinMissionParent = 227093279;
simcity.kWinMissionContainer = 202318592;
simcity.kWinTickerParent = 232746452;
simcity.kWinRegionWallParent = 241958979;
simcity.kWinTimeDisplayParent = 242998440;
simcity.kWinSpeechBallonContainer = 204978684;
simcity.kWinCursorAttachmentContainer = 216135210;
simcity.kWinMouseEaterID = 206646030;
simcity.kWinNewspaperContainer = 229101724;
simcity.kRegionMapContainer = 215777055;
simcity.kWinBuildingRolloverContainer = 232027444;
simcity.kWinBoundaryUIContainer = 239706708;
simcity.kModalDialogLayout = 246637496;
simcity.kErrorModalDialogLayout = 246637511;
simcity.kTextModulesUsed = 241052434;
simcity.kWinModulesFree = 240936656;
simcity.kTextModulesFree = 240936658;
simcity.kWinLetterboxRoot = 232569618;
simcity.kAgentQueryContainer = 236703637;
simcity.kCityNameContainer = 240271318;
simcity.kCityNameButton = 240317911;
simcity.kBtnIDCitySpecialization = 249753437;
simcity.kCitySpecializationContainer = 240490279;
simcity.kCitySpecializationLayout = 240500846;
simcity.kCitySpecializationButton = 240502028;
simcity.kCitySpecializationIconNorm = 240504423;
simcity.kCitySpecializationIconHL = 240504422;
simcity.kBtnIDRotateCCW = 213111754;
simcity.kBtnIDRotateCW = 213111738;
simcity.kBtnIDZoomIn = 245598587;
simcity.kBtnIDZoomOut = 245598584;
simcity.kWinRecordingFrame = 252090864;
simcity.kAnimRecordingFrameIntro = 252697226;
simcity.kAnimRecordingFrameExit = 252697228;
simcity.kFriendListContainer = 247683615;
simcity.kBtnFriendList = 247684111;
simcity.kBtnDemandBars = 252673405;
simcity.kNamingArrow = 244027633;
simcity.kNameMoment = 236779191;
simcity.kBtnNameMomentOkay = 236779190;
simcity.kBTNClosePopulation = 240419370;
simcity.kBTNCloseBudget = 240419368;
simcity.kBTNCloseSpecilization = 249136555;
simcity.kRegionWallButton = 207146365;
simcity.kRegionWallAnimation = 247606289;
simcity.kRegionWallSelector = 247597219;
simcity.kBtnRegionCamera = 218561671;
simcity.kRegionUnlockEffect = 243338962;
simcity.kIcnRegionCamera = 242744961;
simcity.kIcnReturnHome = 242744973;
simcity.kToolRegionView = 3189606171;
simcity.kRegionNameButton = 246035777;
simcity.kChallengePanelBtn = 251978275;
simcity.kAchievementPanelBtn = 251978485;
simcity.mRegionWall = {
  root : 207067491,
  regionWallLayout : 207067491,
  formContainer : 207067335,
  messagesContainer : 207067631,
  closeWindowButton : 207085666
};
simcity.mRegionWallNotifications = {
  root : 238255816,
  formContainer : 238259810,
  messagesContainer : 238257496,
  rollOffDetector : 243964989
};
simcity.kBtnIDBulldoze = 244738929;
simcity.kBtnIDToolConfirmed = 234366442;
simcity.kBtnIDToolDenied = 234366463;
simcity.kTextIDToolRequestBody = 228252804;
simcity.kTextIDToolRequestHeader = 245253398;
simcity.kConfirmationDialogIDBulldoze = 234364140;
simcity.kConfirmationDialogIDCantBulldoze = 234364141;
simcity.kTextIDGarbageDump = 4183402092;
simcity.gHistoryData = {};
simcity.kHashGiftIncome = 3914181182;
simcity.kHashGiftExpense = 2231918585;
simcity.kHashLoanIncome = 745060234;
simcity.kHashLoanExpense = 3160622333;
simcity.kHashServiceIncomeFire = 3019235535;
simcity.kHashServiceExpenseFire = 2041225562;
simcity.kHashServiceIncomePolice = 2239186733;
simcity.kHashServiceExpensePolice = 2141287992;
simcity.kHashServiceIncomeGarbage = 1781577056;
simcity.kHashServiceExpenseGarbage = 2383611955;
simcity.kHashServiceIncomeRecycling = 2641622423;
simcity.kHashServiceExpenseRecycling = 3257305088;
simcity.kHashServiceIncomeHealth = 4030353577;
simcity.kHashServiceExpenseHealth = 661513216;
simcity.kHashMarketIncomeCoal = 3712973973;
simcity.kHashMarketExpenseCoal = 3495565962;
simcity.kHashMarketIncomeOilCrude = 2656391789;
simcity.kHashMarketExpenseOilCrude = 483101070;
simcity.kHashMarketIncomeOreRaw = 1614191498;
simcity.kHashMarketExpenseOreRaw = 2539775925;
simcity.kHashMarketIncomeMetal = 3084046345;
simcity.kHashMarketExpenseMetal = 995732584;
simcity.kHashMarketIncomeAlloy = 551171597;
simcity.kHashMarketExpenseAlloy = 1076705332;
simcity.kHashMarketIncomeFuel = 623675788;
simcity.kHashMarketExpenseFuel = 560334699;
simcity.kHashMarketIncomePlastic = 4272449096;
simcity.kHashMarketExpensePlastic = 3465595429;
simcity.kHashMarketIncomeElectronics = 578111185;
simcity.kHashMarketExpenseElectronics = 3662966552;
simcity.kHashMarketIncomeComputer = 1957168923;
simcity.kHashMarketExpenseComputer = 911915180;
simcity.kHashMarketIncomeTelevision = 3772357704;
simcity.kHashMarketExpenseTelevision = 413189567;
simcity.kHashMissionIncome = 1475482796;
simcity.kHashEventIncome = 3321549554;
simcity.kHashEventExpense = 1063940693;
simcity.kHashGreatWorkIncome = 597896678;
simcity.kHashGreatWorkExpense = 463545073;
simcity.kHashResearchExpense = 4253600434;
simcity.kHashCrimeExpense = 4165801275;
simcity.kHashCheatIncome = 900665919;
simcity.kHashVuIncome = 230616923;
simcity.kHashMaxisManExpense = 1827870685;
simcity.kBudgetTypeIncome = 0;
simcity.kBudgetTypeExpense = 1;
simcity.gHistoryData[simcity.kHashGiftIncome] = {
  limit : 20,
  data : [],
  type : simcity.kBudgetTypeIncome,
  label : "0x0ebc9e4d"
};
simcity.gHistoryData[simcity.kHashGiftExpense] = {
  limit : 20,
  data : [],
  type : simcity.kBudgetTypeExpense,
  label : "0x0ebc9e4d"
};
simcity.gHistoryData[simcity.kHashLoanIncome] = {
  limit : 20,
  data : [],
  type : simcity.kBudgetTypeIncome,
  label : "0x0ebc9e4c"
};
simcity.gHistoryData[simcity.kHashLoanExpense] = {
  limit : 20,
  data : [],
  type : simcity.kBudgetTypeExpense,
  label : "0x0ebc9e4c"
};
simcity.gHistoryData[simcity.kHashServiceIncomeFire] = {
  limit : 20,
  data : [],
  type : simcity.kBudgetTypeIncome,
  label : "0x0ee966a6"
};
simcity.gHistoryData[simcity.kHashServiceExpenseFire] = {
  limit : 20,
  data : [],
  type : simcity.kBudgetTypeExpense,
  label : "0x0ee966a6"
};
simcity.gHistoryData[simcity.kHashServiceIncomePolice] = {
  limit : 20,
  data : [],
  type : simcity.kBudgetTypeIncome,
  label : "0x0ee966a7"
};
simcity.gHistoryData[simcity.kHashServiceExpensePolice] = {
  limit : 20,
  data : [],
  type : simcity.kBudgetTypeExpense,
  label : "0x0ee966a7"
};
simcity.gHistoryData[simcity.kHashServiceIncomeGarbage] = {
  limit : 20,
  data : [],
  type : simcity.kBudgetTypeIncome,
  label : "0x0ee966a8"
};
simcity.gHistoryData[simcity.kHashServiceExpenseGarbage] = {
  limit : 20,
  data : [],
  type : simcity.kBudgetTypeExpense,
  label : "0x0ee966a8"
};
simcity.gHistoryData[simcity.kHashServiceIncomeRecycling] = {
  limit : 20,
  data : [],
  type : simcity.kBudgetTypeIncome,
  label : "0x0ee966a9"
};
simcity.gHistoryData[simcity.kHashServiceExpenseRecycling] = {
  limit : 20,
  data : [],
  type : simcity.kBudgetTypeExpense,
  label : "0x0ee966a9"
};
simcity.gHistoryData[simcity.kHashServiceIncomeHealth] = {
  limit : 20,
  data : [],
  type : simcity.kBudgetTypeIncome,
  label : "0x0ee966aa"
};
simcity.gHistoryData[simcity.kHashServiceExpenseHealth] = {
  limit : 20,
  data : [],
  type : simcity.kBudgetTypeExpense,
  label : "0x0ee966aa"
};
simcity.gHistoryData[simcity.kHashMarketIncomeCoal] = {
  limit : 20,
  data : [],
  type : simcity.kBudgetTypeIncome,
  label : "0x0ed071d6"
};
simcity.gHistoryData[simcity.kHashMarketExpenseCoal] = {
  limit : 20,
  data : [],
  type : simcity.kBudgetTypeExpense,
  label : "0x0ed071d6"
};
simcity.gHistoryData[simcity.kHashMarketIncomeOilCrude] = {
  limit : 20,
  data : [],
  type : simcity.kBudgetTypeIncome,
  label : "0x0ed071d7"
};
simcity.gHistoryData[simcity.kHashMarketExpenseOilCrude] = {
  limit : 20,
  data : [],
  type : simcity.kBudgetTypeExpense,
  label : "0x0ed071d7"
};
simcity.gHistoryData[simcity.kHashMarketIncomeOreRaw] = {
  limit : 20,
  data : [],
  type : simcity.kBudgetTypeIncome,
  label : "0x0ed071d8"
};
simcity.gHistoryData[simcity.kHashMarketExpenseOreRaw] = {
  limit : 20,
  data : [],
  type : simcity.kBudgetTypeExpense,
  label : "0x0ed071d8"
};
simcity.gHistoryData[simcity.kHashMarketIncomeMetal] = {
  limit : 20,
  data : [],
  type : simcity.kBudgetTypeIncome,
  label : "0x0ed071d9"
};
simcity.gHistoryData[simcity.kHashMarketExpenseMetal] = {
  limit : 20,
  data : [],
  type : simcity.kBudgetTypeExpense,
  label : "0x0ed071d9"
};
simcity.gHistoryData[simcity.kHashMarketIncomeAlloy] = {
  limit : 20,
  data : [],
  type : simcity.kBudgetTypeIncome,
  label : "0x0ed071da"
};
simcity.gHistoryData[simcity.kHashMarketExpenseAlloy] = {
  limit : 20,
  data : [],
  type : simcity.kBudgetTypeExpense,
  label : "0x0ed071da"
};
simcity.gHistoryData[simcity.kHashMarketIncomeFuel] = {
  limit : 20,
  data : [],
  type : simcity.kBudgetTypeIncome,
  label : "0x0ed071db"
};
simcity.gHistoryData[simcity.kHashMarketExpenseFuel] = {
  limit : 20,
  data : [],
  type : simcity.kBudgetTypeExpense,
  label : "0x0ed071db"
};
simcity.gHistoryData[simcity.kHashMarketIncomePlastic] = {
  limit : 20,
  data : [],
  type : simcity.kBudgetTypeIncome,
  label : "0x0ed071dc"
};
simcity.gHistoryData[simcity.kHashMarketExpensePlastic] = {
  limit : 20,
  data : [],
  type : simcity.kBudgetTypeExpense,
  label : "0x0ed071dc"
};
simcity.gHistoryData[simcity.kHashMarketIncomeElectronics] = {
  limit : 20,
  data : [],
  type : simcity.kBudgetTypeIncome,
  label : "0x0ed071dd"
};
simcity.gHistoryData[simcity.kHashMarketExpenseElectronics] = {
  limit : 20,
  data : [],
  type : simcity.kBudgetTypeExpense,
  label : "0x0ed071dd"
};
simcity.gHistoryData[simcity.kHashMarketIncomeComputer] = {
  limit : 20,
  data : [],
  type : simcity.kBudgetTypeIncome,
  label : "0x0ed071de"
};
simcity.gHistoryData[simcity.kHashMarketExpenseComputer] = {
  limit : 20,
  data : [],
  type : simcity.kBudgetTypeExpense,
  label : "0x0ed071de"
};
simcity.gHistoryData[simcity.kHashMarketIncomeTelevision] = {
  limit : 20,
  data : [],
  type : simcity.kBudgetTypeIncome,
  label : "0x0ed071df"
};
simcity.gHistoryData[simcity.kHashMarketExpenseTelevision] = {
  limit : 20,
  data : [],
  type : simcity.kBudgetTypeExpense,
  label : "0x0ed071df"
};
simcity.gHistoryData[simcity.kHashMissionIncome] = {
  limit : 20,
  data : [],
  type : simcity.kBudgetTypeIncome,
  label : "0x0f308b6d"
};
simcity.gHistoryData[simcity.kHashEventIncome] = {
  limit : 20,
  data : [],
  type : simcity.kBudgetTypeIncome,
  label : "0x0ec1a303"
};
simcity.gHistoryData[simcity.kHashEventExpense] = {
  limit : 20,
  data : [],
  type : simcity.kBudgetTypeExpense,
  label : "0x0ec1a303"
};
simcity.gHistoryData[simcity.kHashGreatWorkIncome] = {
  limit : 20,
  data : [],
  type : simcity.kBudgetTypeIncome,
  label : "0x0ec1a4b7"
};
simcity.gHistoryData[simcity.kHashGreatWorkExpense] = {
  limit : 20,
  data : [],
  type : simcity.kBudgetTypeExpense,
  label : "0x0ec1a4b7"
};
simcity.gHistoryData[simcity.kHashResearchExpense] = {
  limit : 20,
  data : [],
  type : simcity.kBudgetTypeExpense,
  label : "0x0ebc9e4e"
};
simcity.gHistoryData[simcity.kHashCrimeExpense] = {
  limit : 20,
  data : [],
  type : simcity.kBudgetTypeExpense,
  label : "0x0ec1b1fe"
};
simcity.gHistoryData[simcity.kHashMaxisManExpense] = {
  limit : 20,
  data : [],
  type : simcity.kBudgetTypeExpense,
  label : "0x0ec1b345"
};
simcity.gHistoryData[simcity.kHashVuIncome] = {
  limit : 20,
  data : [],
  type : simcity.kBudgetTypeIncome,
  label : "0x0ec1a252"
};
simcity.gHistoryData[simcity.kHashCheatIncome] = {
  limit : 20,
  data : [],
  type : simcity.kBudgetTypeIncome,
  label : "0x0ebdb6f5"
};
simcity.kPeriodDay = 0;
simcity.kPeriodWeek = 1;
simcity.kPeriodYear = 2;
simcity.kColorIncomeRed = "#E90707";
simcity.kColorIncomeGreen = "#4fa047";
simcity.kColorIncomeWhite = "#265e94";
simcity.kColorIncomeYellow = "#cd8b00";
simcity.kLocalePlusMoney = new scrui.cLocaleString("GlobalUI.json", "0x0bd6309a");
simcity.kLocaleMinusMoney = new scrui.cLocaleString("GlobalUI.json", "0x0bd63098");
simcity.kLocalePlusPopulation = new scrui.cLocaleString("GlobalUI.json", "0x0bd63099");
simcity.kLocaleMinusPopulation = new scrui.cLocaleString("GlobalUI.json", "0x0bd63097");
simcity.kLocalePlusBudget = new scrui.cLocaleString("GlobalUI.json", "0x0bd63096");
simcity.kLocaleMinusBudget = new scrui.cLocaleString("GlobalUI.json", "0x0bd6309b");
simcity.kLocaleExitSpectatorMode = new scrui.cLocaleString("GlobalUI.json", "0x0ecca237");
simcity.kDefaultToolID = 782826392;
simcity.kRegionToolID = 3189606171;
simcity.kBulldozerToolID = 2536567712;
simcity.kCheatGreatWorksProgress = 230929509;
simcity.kCheatGreatWorksUnlockAll = 231005222;
simcity.kCheatUnlockArcology = 235560148;
simcity.kCheatToggleGreatWorksOperational = 239901155;
simcity.kKeyTrigger_ToggleRegionWall = 2368844905;
simcity.kKeyTrigger_Help = 250974895;
simcity.kKeyTrigger_PopulationPanel = 251031119;
simcity.kKeyTrigger_BudgetPanel = 251030721;
simcity.kKeyTrigger_MayorPanel = 251030734;
simcity.kKeyTrigger_RegionView = 251304918;
simcity.kKeyTrigger_Achievements = 251310872;
simcity.kKeyTrigger_Leaderboards = 251310860;
simcity.kKeyTrigger_Challenges = 251310844;
simcity.kKeyTrigger_Debug_WireArticlePrevious = 252155634;
simcity.kKeyTrigger_Debug_WireArticleNext = 252155648;
simcity.CheatUnitAbandoned = scrui.IDFromName("T_RCI_ToggleAbandoned");
simcity.CheatUnitAirPollution = scrui.IDFromName("T_RCI_ToggleAirPollution");
simcity.CheatUnitCrime = scrui.IDFromName("T_RCI_ToggleCrime");
simcity.CheatUnitFire = scrui.IDFromName("T_RCI_ToggleFire");
simcity.CheatUnitGarbage = scrui.IDFromName("T_RCI_ToggleGarbage");
simcity.CheatUnitGroundPollution = scrui.IDFromName("T_RCI_ToggleGroundPollution");
simcity.CheatUnitHealth = scrui.IDFromName("T_RCI_ToggleHealth");
simcity.CheatUnitHomeless = scrui.IDFromName("T_RCI_ToggleHomeless");
simcity.CheatUnitSewage = scrui.IDFromName("T_RCI_ToggleSewage");
simcity.CheatUnitSimoleans = scrui.IDFromName("T_RCI_SandboxAddSimoleons");
simcity.AllLayerClose = 252706424;
simcity.kLayerKeyPopulationF5 = 251310899;
simcity.kLayerKeyHappinessF6 = 251310908;
simcity.kLayerKeyDesireF7 = 251310951;
simcity.kLayerKeyImportExprtF8 = 251310959;
simcity.kLayerKeyDensityF9 = 251310971;
simcity.kLayerKeyResidentialF10 = 253720323;
simcity.kLayerKeyCommercialF11 = 253720324;
simcity.kLayerKeyIndustrialF12 = 253720325;
simcity.kLayerKeyWater4 = 253720401;
simcity.kLayerKeyCoal5 = 253720402;
simcity.kLayerKeyOre6 = 253720403;
simcity.kLayerKeyOil7 = 253720404;
simcity.kKeyTabPalettes = 253796517;
simcity.kKeyShiftTabPalettes = 253796518;
simcity.gGlobalUIHandler = null;
simcity.kEventIDTownHallBuilt = 1549837312;
simcity.gTimeInfo = {
  month : 0,
  hour : -1
};
simcity.IsDisasterInProgress = function () {
  return 0 < simcity.gGlobalUIHandler.mDisasterActive
};
simcity.GetFudgedPopulation = function (a) {
  a = "undefined" !== typeof a ? a : simcity.gGlobalUIHandler.mLastPopulation;
  if (500 >= a)
    return a;
  if (40845 < a)
    return Math.floor(8.25 * a);
  a = Math.pow(a - 500, 1.2) + 500;
  return Math.floor(a)
};
simcity.GetRoundedFudgedPopulation = function (a) {
  a = simcity.GetFudgedPopulation(a);
  return a = 25E3 < a ? 10 * Math.round(a / 10) : 5 * Math.round(a / 5)
};
simcity.cGlobalUIHandler = function () {
  this.UIHandler = scrui.cUIHandler;
  this.UIHandler();
  this.mBudgetUIContainer = this.mBoxNameTextControl = this.mLastBudgetDelta = this.mIncomeText = this.mLastPopulation = this.mPopulationDeltaText = this.mBottomToolbarControl = this.mPopulationText = this.mWinTimeDisplay = this.mWinDateDisplay = this.mLastMoney = this.mMoneyAnim = this.mMoneyDeltaText = this.mMoneyText = this.mGlobalUILayout = this.mTicker = this.mRegionUIParent = this.mCityUIParent = null;
  this.mDisasterActive = this.mLastNumberOfFires =
    0;
  this.mIsEditorActive = !1;
  this.mBudgetCrisisUI = this.mBudgetPanel = this.mMayorRating = this.mPopulationUI = this.mTutorialCallout = this.mBulldozeButton = this.mCityNameUIHandler = this.mAgentQueryUIHandler = this.mAchievementsUIHandler = this.mAvatarManagerHandler = this.mBoundaryUIHandler = this.mToyTaskPanelUIHandler = this.mNewspaperUIHandler = this.mTaxesBasicUIHandler = this.mAlertsUIHandler = this.mCursorAttachmentHandler = this.mSpeechBalloonHandler = this.mToolPaletteUIHandler = this.mLayerUIHandler = this.mSpeedUIHandler =
    this.mEventTriggersManager = this.mGameTimeManager = null;
  this.mVisibilityCounter = 1;
  this.mScreenName = "";
  this.mUserSessionId = this.mUserId = 0;
  this.mActiveBoxID = "";
  this.mMyBoxDataSet = !1;
  this.mRegionUnlockEffect = this.mRegionCameraButton = this.mRegionWallButton = this.mRegionMap = this.mChallengeUIHandler = this.mLeaderboardUIHandler = this.mReportContentUIHandler = this.mRegionWallUI = null;
  this.mBorderUnitsList = [];
  this.mTimeSinceLastUpdate = simcity.cGlobalUIHandler.kGlobalUpdateTime;
  this.mMonthlyUpdate = -1;
  this.mBuildingRolloverManager =
    null;
  this.mDemoWarning = this.mIsTimed = this.mIsDemo = this.mTutorialDemo = !1;
  this.mCommandLine = "";
  this.mIsMainTutorialEnabled = this.mIsTutorialEnabled = !1;
  this.mIsEditorEnabled = !0;
  this.mIsNameYourCityActive = !1;
  this.mRegionMessageRouter = this.mConfirmationDialog = this.mScreenshotCaptureLayout = this.mLetterboxRoot = this.mErrorLayout = this.mAchievementManager = null;
  this.mIsServerSandbox = this.mIsSpectatorMode = !1;
  this.mCitySpecializationButton = this.mReturnToCityButton = this.mReturnHomeButtonIcon = this.mRegionViewButtonIcon =
    null;
  this.mGameLoaded = !1;
  this.mDemoTimerEndingDelayTimeMS = 18E3;
  this.mDemoTimerSCWireDelayTimeMS = 8E3;
  this.mDemoTimer = 0;
  this.mDemoTimerEndingDelay = this.mDemoTimerSCWireDelay = !1;
  this.mRegionViewCommand = scrui.BuildCommand(["selectTool", simcity.kToolRegionView]);
  this.mDialogManager = null;
  this.mQuitConfirmationShown = !1;
  this.mErrorAlertsUIHandler = this.mErrorDialogManager = null;
  this.mLocaleStrings = {
    kQuitSimcityText : new scrui.cLocaleString("OptionsMenu.json", "0xf446ea05"),
    kQuitSimcityConfirmMsg : new scrui.cLocaleString("GameEntry.json",
      "0x9b675f8e"),
    kQuitText : new scrui.cLocaleString("GameEntry.json", "0xea4b2998"),
    kExitToMenuText : new scrui.cLocaleString("OptionsMenu.json", "0x0ea2130f"),
    kExitToMenuConfirmationMsg : new scrui.cLocaleString("OptionsMenu.json", "0xf9903b56"),
    kExitText : new scrui.cLocaleString("OptionsMenu.json", "0x0ea2130f"),
    kCancelText : new scrui.cLocaleString("GameEntry.json", "0x0e3b8b19")
  };
  this.mBeatCountUpdates = [];
  this.mControlsToDestroy = [];
  this.mPopulationUIContainer = null;
  this.mPopulationTimelineData = {
    population : [],
    visitors : []
  };
  this.mRecentTransactionData = {
    amount : [],
    type : [],
    date : [],
    label : []
  };
  this.mLayerButtons = [];
  this.mHeavyLayerList = [];
  this.mRotateLeft = this.mRotateRight = !1
};
goog.inherits(simcity.cGlobalUIHandler, scrui.cUIHandler);
simcity.cGlobalUIHandler.kGlobalQueries = [scrui.BuildRequestQuery([simcity.kDataBinAmount, simcity.kResourceIDSimoleons]), scrui.BuildRequestQuery([simcity.kDataBinAmount, simcity.kResourceIDNumberOfFires]), scrui.BuildRequestQuery([simcity.kDataBinAmount, simcity.kResourceIDDisasterActive])];
simcity.cGlobalUIHandler.kGlobalUpdateTime = 1E3;
simcity.cGlobalUIHandler.prototype.Update = scrui.Client_ProfZone("cGlobalUIHandler.Update", function (a) {
    this.mTimeSinceLastUpdate += a;
    for (var b = 0, c = this.mControlsToDestroy.length; b < c; ++b)
      this.mControlsToDestroy[b].DestroyControl();
    this.mControlsToDestroy.length = 0;
    simcity.IsPlayingBoxBroken() && (scrui.PostGameCommand(scrui.BuildCommand(["setspeed", simcity.kSpeedPaused])), b = simcity.gGlobalUIHandler.mRegionID, c = simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData.mPlayingBox.id, b && c && simcity.gSessionManager.SetBoxTarget(b,
        c), this.mErrorDialogManager.ShowErrorModal({
        dialogType : scrui.kErrorDialogType_ForceQuitToMenu,
        message : new scrui.cLocaleString("ErrorMessages.json", "0x0f0696c4")
      }));
    if (!this.mBoxNameTextControl.nameSet && (b = this.mAPIServerDataUIHandler.GetBoxByBoxUID(this.mRegionID) || null))
      this.mBoxNameTextControl.SetText(b.name), this.mBoxNameTextControl.nameSet = !0;
    0 <= this.mDemoTimer && (this.mDemoTimer -= a);
    0 > this.mDemoTimer && (this.mDemoTimerSCWireDelay ? (this.mDemoTimerSCWireDelay = !1, this.mDemoTimerEndingDelay = !0, this.mDemoTimer =
          this.mDemoTimerEndingDelayTimeMS, simcity.EndDemoSCWireEnd()) : this.mDemoTimerEndingDelay && (this.mDemoTimerEndingDelay = !1, simcity.EndDemoEnd()));
    if (this.mTimeSinceLastUpdate > simcity.cGlobalUIHandler.kGlobalUpdateTime) {
      this.mTimeSinceLastUpdate = 0;
      this.UpdateDataBindings(a);
      a = simcity.gTimeInfo.month;
      -1 === this.mMonthlyUpdate && -1 !== a && (this.mMonthlyUpdate = a);
      -1 !== a && this.mMonthlyUpdate !== a && (this.mMonthlyUpdate = a, simcity.UpdatePopulationTimelineData());
      this.mRegionCameraButton && !simcity.IsMainTutorialInProgress() &&
      this.mRegionCameraButton.SetVisibility(simcity.gGlobalUIHandler.mRegionViewUIHandler.IsDataLoaded());
      var d = this;
      scrui.RequestGameData(simcity.cGlobalUIHandler.kGlobalQueries, function (a) {
        if (d.mMoneyText !== null) {
          var b = a[0];
          if (b !== d.mLastMoney) {
            d.mMoneyText.UpdateLocaleText({
              money : b
            });
            b >= 1E3 ? d.mMoneyText.SetTextColor(simcity.kColorIncomeWhite) : b < 1E3 && b > 0 ? d.mMoneyText.SetTextColor(simcity.kColorIncomeYellow) : b === 0 && d.mMoneyText.SetTextColor(simcity.kColorIncomeRed)
          }
          d.mLastMoney = b
        }
        if (d.mPopulationText !==
          null) {
          b = simcity.kGlobalUIPopulationInfo.populationData.residential.data.total.value;
          if (b !== d.mLastPopulation) {
            d.mLastPopulation = b;
            d.mPopulationText.UpdateLocaleText({
              population : simcity.GetFudgedPopulation()
            })
          }
        }
        d.UpdateDisasterMusic(a[1])
      })
    }
  });
simcity.cGlobalUIHandler.prototype.InitDataBindingInfo = function () {
  for (var a = 0, b = simcity.kGlobalUIDataBindings.length; a < b; ++a) {
    var c = simcity.kGlobalUIDataBindings[a];
    c.rootControl = gUIManager.FindControlByID(c.rootControlID);
    c.hasOwnProperty("init") && c.init()
  }
};
simcity.cGlobalUIHandler.prototype.UpdateDataBindings = scrui.Client_ProfZone("cGlobalUIHandler.UpdateDataBindings", function () {
    var a = [],
    b = [];
    simcity.GenerateDataBindingQueries(simcity.kGlobalUIDataBindings, a, null, b, !1, "queries");
    simcity.RequestDataBindingData(a, simcity.kGlobalUIDataBindings, b, !1, function (a) {
      for (var b = 0, e = simcity.kGlobalUIDataBindings.length; b < e; ++b)
        simcity.kGlobalUIDataBindings[b].action(a[b])
    })
  });
simcity.SetVisibilityHelper = function (a) {
  (a = a.win) && a.SetVisibility(!0)
};
simcity.SetBeatCountVisibility = function (a) {
  simcity.gGlobalUIHandler.mBeatCountUpdates.push({
    callback : simcity.SetVisibilityHelper,
    win : a
  })
};
simcity.cGlobalUIHandler.prototype.UpdateOnBeat = function () {
  this.UpdateDate();
  for (var a = 0, b = this.mBeatCountUpdates.length; a < b; ++a) {
    var c = this.mBeatCountUpdates[a];
    c.callback(c)
  }
  this.mBeatCountUpdates = []
};
simcity.cGlobalUIHandler.prototype.RemoveFromBeatUpdate = function (a) {
  for (var b = 0; b < this.mBeatCountUpdates.length; )
    a.ContainsControl(this.mBeatCountUpdates[b].win) ? this.mBeatCountUpdates.splice(b, 1) : ++b
};
simcity.cGlobalUIHandler.kDateTimeQueries = [scrui.BuildRequestQuery([simcity.kDataPeriodTimes, simcity.kPeriodDay]), scrui.BuildRequestQuery([simcity.kDataPeriodTimes, simcity.kPeriodYear]), scrui.BuildRequestQuery([simcity.kDataResourceAmount, simcity.kResourceIDYear])];
simcity.cGlobalUIHandler.prototype.UpdateDate = function () {
  if (null !== this.mWinDateDisplay && null !== this.mWinTimeDisplay) {
    var a = this;
    scrui.RequestGameData(simcity.cGlobalUIHandler.kDateTimeQueries, function (b) {
      var c = b[0],
      d = b[2],
      b = Math.min(Math.floor(12 * b[1]), 11),
      e = Math.min(Math.floor(24 * c), 23),
      c = Math.min(60 * (24 * c - e), 59),
      f = new Date(d + 2E3, b, 1, e, c, 0, 0);
      simcity.gTimeInfo.month = b;
      simcity.gTimeInfo.hour = e;
      simcity.gTimeInfo.year = d;
      simcity.gTimeInfo.minute = c;
      d = {
        sim_dateTime : f,
        year : d + 1
      };
      a.mWinTimeDisplay.SetVisibility(!0);
      a.mWinDateDisplay.UpdateLocaleText(d);
      a.mWinTimeDisplay.UpdateLocaleText(d)
    })
  }
};
simcity.cGlobalUIHandler.prototype.UpdateDisasterMusic = function (a) {
  0 == this.mLastNumberOfFires && 0 < a ? simcity.SendSoundEvent(simcity.audio.kGlobalSoundObjectID, simcity.audio.kInstancePlayDisasterMusic) : 0 < this.mLastNumberOfFires && 0 == a && simcity.SendSoundEvent(simcity.audio.kGlobalSoundObjectID, simcity.audio.kInstanceStopDisasterMusic);
  this.mLastNumberOfFires = a
};
simcity.kToolPaletteCategoryOrder = [2886912260, 831766718, 2391494160, 2654748154, 3441286197, 1732323837, 2092055118, 2678880713, 3677180323, 291106007, 2510935805, 3418519638, 2308696688, 2608627999, 3639785352];
simcity.cGlobalUIHandler.prototype.HandleGameEvent = function (a, b) {
  switch (a) {
  case simcity.kGameMessageGameLoaded:
    this.mGameLoaded = !0;
    this.InitErrorManager();
    break;
  case simcity.kGameMessageDemoTimerEnd:
    simcity.EndDemoBegin();
    break;
  case simcity.kGameMessageDemoTimerWarning:
    this.mDemoWarning = !0;
    simcity.DemoWarning();
    break;
  case simcity.kGameMessageBeatCountChanged:
    this.UpdateOnBeat();
    break;
  case simcity.kGameMessageCinematicDisasterStart:
    simcity.gGlobalUIHandler.mDisasterActive++;
    break;
  case simcity.kGameMessageCinematicDisasterEnd:
    simcity.gGlobalUIHandler.mDisasterActive--;
    break;
  case simcity.kGameMessageHistoryUIEvent:
    if (simcity.gHistoryData.hasOwnProperty(b.historyIndex)) {
      var c = new Date(simcity.gTimeInfo.year + 2E3, simcity.gTimeInfo.month + 1, -1, simcity.gTimeInfo.hour, simcity.gTimeInfo.minute, 0, 0);
      simcity.gHistoryData[b.historyIndex].data.length > simcity.gHistoryData[b.historyIndex].limit && simcity.gHistoryData[b.historyIndex].data.pop();
      simcity.gHistoryData[b.historyIndex].data.unshift({
        amount : b.historyAmount,
        date : c
      });
      simcity.SaveRecentTransactionHistory()
    }
    break;
  case simcity.kGameMessageUnitRuleUIEvent:
    switch (b.eventID) {
    case simcity.kEventIDWireTradeServiceTokensFireServiceTokenCanGrant:
    case simcity.kEventIDWireTradeServiceTokensGarbageServiceTokenCanGrant:
    case simcity.kEventIDWireTradeServiceTokensHealthServiceTokenCanGrant:
    case simcity.kEventIDWireTradeServiceTokensPoliceServiceTokenCanGrant:
    case simcity.kEventIDWireTradeServiceTokensRecyclingServiceTokenCanGrant:
      this.mRegionCameraButton.mEnabled &&
      !simcity.IsMainTutorialInProgress() && (this.mRegionViewUIHandler.SparklePaletteButton(b.eventID), simcity.SetBeatCountVisibility(this.mRegionUnlockEffect))
    }
    if (!simcity.IsMainTutorialInProgress() && simcity.kEventIDTownHallBuilt == b.eventID) {
      if (c = gUIManager.FindControlByID(simcity.kNameMoment)) {
        this.mIsNameYourCityActive = !0;
        var d = gUIManager.LoadLayout("Layouts/CityNameMoment.js", c);
        d.SetVisibility(!0)
      }
      break
    }
    if (!simcity.IsMainTutorialInProgress())
      switch (b.eventID) {
      case simcity.kEventIDUnlock:
      case simcity.kEventIDSilentUnlock:
        var e =
          b.extraData,
        c = scrui.BuildRequestQuery([simcity.kDataTools, e, simcity.kDataName]),
        f = scrui.BuildRequestQuery([simcity.kDataTools, e, simcity.kDataProperties, simcity.kPropToolIconKey]),
        g = scrui.BuildRequestQuery([simcity.kDataTools, e, simcity.kToolPaletteCategory]);
        scrui.RequestGameData([c, f, g], function (a) {
          var c = a[0];
          scrui.Assert(c, "Tool " + scrui.DecimalToHex(e) + " has no name defined.");
          if (c) {
            var d = a[2];
            simcity.gGlobalUIHandler.mToolPaletteUIHandler.HandleUnlock(e, d.toolPaletteCategories, d.toolPaletteParentCategories);
            if (b.eventID === simcity.kEventIDUnlock) {
              var f = a[1],
              g = scrui.LocaleStringFromLocaleProperty(c);
              g.LoadString(function () {
                g.popOut = f;
                simcity.gGlobalUIHandler.mTicker.HandleUnlock(g)
              })
            }
          }
        })
      }
    break;
  case simcity.kMessageEditorActivated:
    this.mLayerUIHandler.DeactivateLayer();
    scrui.PostGameCommand(scrui.BuildCommand([simcity.kDataDeselectUnit]));
    this.mToolPaletteUIHandler.OpenEditorPanel(b.categoryID, b.subCategoryID, b.editorCategoryID, b.unitRef);
    simcity.SendSoundEvent(simcity.audio.kGlobalSoundObjectID, simcity.audio.kInstanceUIBuildingEditorActivate);
    this.mIsEditorActive = !0;
    break;
  case simcity.kMessageEditorDeactivated:
    null !== this.mToolPaletteUIHandler.mEditedBuildingRef && this.mToolPaletteUIHandler.CloseEditorPanel();
    simcity.SendSoundEvent(simcity.audio.kGlobalSoundObjectID, simcity.audio.kInstanceUIBuildingEditorDeactivate);
    this.mIsEditorActive = !1;
    break;
  case simcity.kGameMessageTickerSettingsChanged:
    this.mTicker && (this.mTicker.mSettingsChanged = !0);
    break;
  case simcity.kGameMessageHideGlobalUI:
    this.SetVisibility(!1);
    break;
  case simcity.kGameMessageShowGlobalUI:
    this.SetVisibility(!0);
    break;
  case simcity.kGameMessageShowLetterbox:
    this.mLetterboxRoot.SetVisibility(!0);
    break;
  case simcity.kGameMessageHideLetterbox:
    this.mLetterboxRoot.SetVisibility(!1);
    break;
  case simcity.kGameMessageToolConfirmation:
    this.ShowConfirmationDialog(b);
    break;
  case simcity.kGameMessageToolConfirmationHide:
    this.HideConfirmationDialog();
    break;
  case simcity.kGameMessageWebSocketReceiveUIEvent:
    simcity.gEventManager.TriggerEvent(simcity.gEventTypes.SOCKETEVENT, b.socketMessage.guid || 0, b.socketMessage.data || {});
    break;
  case simcity.kGameMessageWebSocketConnected:
    simcity.gEventManager.TriggerEvent(simcity.gEventTypes.SOCKETCONNECT, null, null);
    break;
  case simcity.kGameMessageWebSocketDisconnected:
    simcity.gEventManager.TriggerEvent(simcity.gEventTypes.SOCKETDISCONNECT, null, null);
    break;
  case simcity.kMessageKeyTrigger:
    c = 0 === this.mActiveBoxID || this.mGameLoaded;
    if (simcity.IsTutorialInProgress() || simcity.IsOptionMenuVisible() || simcity.IsMouseEatingWindowVisible() || !c)
      break;
    if (!1 == this.mRegionCameraButton.mIsSelected)
      switch (b.triggerCode) {
      case simcity.kLayerKeyPopulationF5:
        this.mLayerUIHandler.ToggleLayer(simcity.Government.kHeavyLayerPopulation);
        break;
      case simcity.kLayerKeyHappinessF6:
        this.mLayerUIHandler.ToggleLayer(simcity.Cultural.kHappiness);
        break;
      case simcity.kLayerKeyDesireF7:
        this.mLayerUIHandler.ToggleLayer(simcity.Cultural.kHeavyLayerResidentialDesirability);
        break;
      case simcity.kLayerKeyImportExprtF8:
        this.mLayerUIHandler.ToggleLayer(simcity.ImEx.kHeavyLayerImEx);
        break;
      case simcity.kLayerKeyDensityF9:
        this.mLayerUIHandler.ToggleLayer(simcity.Government.kHeavyLayerDensity);
        break;
      case simcity.kLayerKeyResidentialF10:
        this.mLayerUIHandler.ToggleLayer(simcity.Zones.kHeavyLayerResidentialSystem);
        break;
      case simcity.kLayerKeyCommercialF11:
        this.mLayerUIHandler.ToggleLayer(simcity.Zones.kHeavyLayerCommercialSystem);
        break;
      case simcity.kLayerKeyIndustrialF12:
        this.mLayerUIHandler.ToggleLayer(simcity.Zones.kHeavyLayerIndustrialSystem);
        break;
      case simcity.kLayerKeyWater4:
        this.mLayerUIHandler.ToggleLayer(simcity.Fire.kHeavyLayerWaterTable);
        break;
      case simcity.kLayerKeyCoal5:
        this.mLayerUIHandler.ToggleLayer(simcity.Mining.kHeavyLayerCoal);
        break;
      case simcity.kLayerKeyOre6:
        this.mLayerUIHandler.ToggleLayer(simcity.Mining.kHeavyLayerOre);
        break;
      case simcity.kLayerKeyOil7:
        this.mLayerUIHandler.ToggleLayer(simcity.Oil.kHeavyLayerOil);
        break;
      case simcity.kKeyTrigger_NextHeavyLayer:
        this.mToolPaletteUIHandler.mPanelLayout && this.mToolPaletteUIHandler.mPanelLayout.mIsVisible ? this.mToolPaletteUIHandler.CycleHeavyLayer() : (c = this.mLayerUIHandler.GetCurrentActiveLayer(), null == c ? this.mLayerUIHandler.ActivateLayer(this.mHeavyLayerList[0]) : (c = this.mHeavyLayerList.indexOf(c), -1 == c || c == this.mHeavyLayerList.length - 1 ? this.mLayerUIHandler.ActivateLayer(this.mHeavyLayerList[0]) :
            this.mLayerUIHandler.ActivateLayer(this.mHeavyLayerList[c + 1])))
      }
    switch (b.triggerCode) {
    case simcity.kKeyTabPalettes:
      if (!this.mIsEditorActive && this.mReturnToCityButton.mIsSelected) {
        for (c = 0; c < simcity.kToolPaletteCategoryOrder.length && simcity.kToolPaletteCategoryOrder[c] !== this.mToolPaletteUIHandler.mLastSelectedMainCategoryID; c++);
        c >= simcity.kToolPaletteCategoryOrder.length - 1 ? this.mToolPaletteUIHandler.OpenToolPanelFromID(simcity.kToolPaletteCategoryOrder[0]) : this.mToolPaletteUIHandler.OpenToolPanelFromID(simcity.kToolPaletteCategoryOrder[c +
            1])
      }
      break;
    case simcity.kKeyShiftTabPalettes:
      if (!this.mIsEditorActive && this.mReturnToCityButton.mIsSelected) {
        for (c = 0; c < simcity.kToolPaletteCategoryOrder.length && simcity.kToolPaletteCategoryOrder[c] !== this.mToolPaletteUIHandler.mLastSelectedMainCategoryID; c++);
        0 === c ? this.mToolPaletteUIHandler.OpenToolPanelFromID(simcity.kToolPaletteCategoryOrder[simcity.kToolPaletteCategoryOrder.length - 1]) : c >= simcity.kToolPaletteCategoryOrder.length - 1 ? this.mToolPaletteUIHandler.OpenToolPanelFromID(simcity.kToolPaletteCategoryOrder[simcity.kToolPaletteCategoryOrder.length -
            2]) : this.mToolPaletteUIHandler.OpenToolPanelFromID(simcity.kToolPaletteCategoryOrder[c - 1])
      }
      break;
    case simcity.kCheatGreatWorksProgress:
      simcity.DEBUG && simcity.CreateUnit("GreatWorks_CheatConstructionProgress");
      break;
    case simcity.kCheatGreatWorksUnlockAll:
      simcity.DEBUG && simcity.CreateUnit("GreatWorks_CheatUnlockAll");
      break;
    case simcity.kCheatUnlockArcology:
      simcity.DEBUG && simcity.CreateUnit("GreatWorks_CheatUnlockArcology");
      break;
    case simcity.kCheatToggleGreatWorksOperational:
      simcity.DEBUG && simcity.CreateUnit("GreatWorks_CheatToggleGreatWorksOperational");
      break;
    case simcity.kKeyTrigger_ToggleRegionWall:
      simcity.gGlobalUIHandler && (c = simcity.gGlobalUIHandler.mRegionWallUI, c.mRegionWallContainer && (f = c.mRegionWallContainer.FindControlByID(c.kControlIDs.FORM_TEXT_AREA).GetText(), simcity.gGlobalUIHandler.mRegionWallButton.mIsSelected && "" === f ? (c.ShowRegionWall(!1), simcity.gGlobalUIHandler.mRegionWallButton.SetSelected(!1), c.RevealRegionWallTextEntry(!1)) : (c.ShowRegionWall(!0), simcity.gGlobalUIHandler.mRegionWallButton.SetSelected(!0), c.RevealRegionWallTextEntry(!0))));
      break;
    case simcity.kKeyTrigger_PopulationPanel:
      c = gUIManager.FindControlByID(248200384);
      c = c.FindControlByID(simcity.kBtnIDPopulation);
      c.mIsSelected ? c.SetSelected(!1) : (c.SetSelected(!0), this.OpenPopulationPanel());
      break;
    case simcity.kKeyTrigger_BudgetPanel:
      c = gUIManager.FindControlByID(245433542);
      c = c.FindControlByID(simcity.kBtnIDBudget);
      c.mIsSelected ? c.SetSelected(!1) : (c.SetSelected(!0), this.OpenBudgetPanel());
      break;
    case simcity.kKeyTrigger_RegionView:
      if (this.mIsEditorActive) {
        this.mToolPaletteUIHandler.mWaitingCategory =
          this.mToolPaletteUIHandler.mEditorCategory;
        this.mToolPaletteUIHandler.mRegionViewCounter = -350;
        this.mToolPaletteUIHandler.CloseEditorPanel();
        break
      }
      this.mRegionViewUIHandler.IsVisible() ? (c = this.mReturnToCityButton, c.SetSelected(!0), this.mToolPaletteUIHandler.HandleUIMessage(scrui.kMsgTypeButtonClicked, simcity.kBtnReturnToCity, c)) : (this.mRegionCameraButton.SetSelected(!0), this.HandleUIMessage(scrui.kMsgTypeButtonClicked, simcity.kBtnRegionCamera, this.mRegionCameraButton));
      break;
    case simcity.kKeyTrigger_Achievements:
      this.mAchievementsUIHandler &&
      this.mAchievementsUIHandler.IsShowing() ? this.mAchievementsUIHandler.Hide() : this.mAchievementsUIHandler.Show();
      break;
    case simcity.kKeyTrigger_Leaderboards:
      this.mLeaderboardUIHandler && this.mLeaderboardUIHandler.IsShowing() ? this.mLeaderboardUIHandler.Hide() : this.mLeaderboardUIHandler.Show(null, ["LBPopulation"]);
      break;
    case simcity.kKeyTrigger_Challenges:
      this.mChallengeUIHandler && this.mChallengeUIHandler.IsShowing() ? this.mChallengeUIHandler.Hide() : this.mChallengeUIHandler.Show();
      break;
    case simcity.kKeyTrigger_Debug_WireArticlePrevious:
      simcity.gGlobalUIHandler.mTicker.DebugShowWireArticle(0);
      break;
    case simcity.kKeyTrigger_Debug_WireArticleNext:
      simcity.gGlobalUIHandler.mTicker.DebugShowWireArticle(1)
    }
    break;
  case simcity.kMessageVideoCaptureStarted:
    c = this.mSharedUIParent.FindControlByID(simcity.kWinRecordingFrame);
    f = c.FindAnimationByID(simcity.kAnimRecordingFrameExit);
    f.Stop();
    f = c.FindAnimationByID(simcity.kAnimRecordingFrameIntro);
    f.Restart(scrui.cAnimation.kPlayForward);
    break;
  case simcity.kMessageVideoCaptureFinished:
    c = this.mSharedUIParent.FindControlByID(simcity.kWinRecordingFrame);
    f =
      c.FindAnimationByID(simcity.kAnimRecordingFrameIntro);
    f.Stop();
    f = c.FindAnimationByID(simcity.kAnimRecordingFrameExit);
    f.Restart(scrui.cAnimation.kPlayForward);
    f = c.FindControlByID(252694595);
    f.UpdateLocaleText({
      Local_Directory : b
    });
    c = f.GetTextWidth() - f.mWidth;
    f = f.mParentControl;
    f.SetPosition(f.mLeft - c / 2, f.mTop, f.mWidth + c, f.mHeight);
    break;
  case simcity.kMessageScreenshotTriggered:
    this.mScreenshotCaptureLayout && this.mScreenshotCaptureLayout.SetVisibility(!1);
    break;
  case simcity.kMessageScreenshotCaptured:
    c =
      null,
    this.mScreenshotCaptureLayout || (d = gUIManager.LoadLayout("Layouts/ImageCaptureFeedback.js", this.mSharedUIParent), d.FindControlByID(252762312).UpdateLocaleText({
        Local_Directory : b
      }), c = d.FindAnimationByID(252762303), c.RegisterEventCallback(scrui.cAnimation.kEventStopped, function () {
        simcity.gGlobalUIHandler.mScreenshotCaptureLayout = null;
        simcity.gGlobalUIHandler.mControlsToDestroy.push(d)
      }), this.mScreenshotCaptureLayout = d),
    c || (c = this.mScreenshotCaptureLayout.FindAnimationByID(252762303)),
    this.mScreenshotCaptureLayout.SetVisibility(!0),
    c.Restart(scrui.cAnimation.kPlayForward)
  }
};
simcity.RotateCamera = function (a) {
  scrui.PostGameCommand(scrui.BuildCommand(["rotateCamera", a]))
};
simcity.RotateCameraStop = function (a) {
  scrui.PostGameCommand(scrui.BuildCommand(["rotateCameraStop", a]))
};
simcity.ZoomCamera = function (a) {
  scrui.PostGameCommand(scrui.BuildCommand(["zoomCamera", a]))
};
simcity.cGlobalUIHandler.prototype.EnableSpectatorMode = function () {
  this.mIsSpectatorMode = !0;
  this.mTicker.mContainer && this.mTicker.mContainer.SetVisibility(!1);
  this.mBoundaryUIHandler.mContainerControl.SetVisibility(!1);
  this.mMissionUI.mMissionContainer.SetVisibility(!1);
  this.mAchievementManager.mAchievementLayout.SetVisibility(!1);
  this.mBulldozeButton.SetVisibility(!1);
  this.mRegionViewButtonIcon.SetVisibility(!1);
  this.mReturnHomeButtonIcon.SetVisibility(!0);
  this.mRegionCameraButton.SetTooltipLocaleText(simcity.kLocaleExitSpectatorMode);
  this.mReturnToCityButton.SetTooltipLocaleText();
  var a = gUIManager.FindControlByID(simcity.kCityNameButton);
  simcity.cTutorialManager.prototype.UpdateButtonVisibilityHelper(a, !1);
  this.mSpectatorUIHandler = new simcity.cSpectatorUIHandler;
  this.mSpectatorUIHandler.Init(this.mCityUIParent);
  gUIManager.RegisterUIHandler(this.mSpectatorUIHandler);
  this.mSpectatorUIHandler.Show()
};
simcity.cGlobalUIHandler.prototype.OnGlobalUILoaded = function () {
  this.mSharedUIParent = gUIManager.FindControlByID(simcity.kWinSharedUIParent);
  this.mCityUIParent = gUIManager.FindControlByID(simcity.kWinCityUIParent);
  this.mRegionUIParent = gUIManager.FindControlByID(simcity.kWinRegionUIParent);
  this.mAPIServerDataUIHandler = new simcity.cAPIServerDataHandler;
  this.mAPIServerDataUIHandler.Init(this.mRegionID);
  gUIManager.RegisterUIHandler(this.mAPIServerDataUIHandler);
  this.mReturnToCityButton = this.mSharedUIParent.FindControlByID(simcity.kBtnReturnToCity);
  simcity.SetupCategoryButton(this.mReturnToCityButton, this.mReturnToCityButton);
  this.mCitySpecializationButton = this.mSharedUIParent.FindControlByID(simcity.kBtnIDCitySpecialization);
  simcity.SetupCategoryButton(this.mCitySpecializationButton, this.mCitySpecializationButton);
  this.mMoneyText = this.mSharedUIParent.FindControlByID(simcity.kTxtIDMoney);
  this.mMoneyDeltaText = this.mSharedUIParent.FindControlByID(simcity.kTxtIDMoneyDelta);
  this.mMoneyAnim = this.mSharedUIParent.FindAnimationByID(simcity.kAnimIDMoney);
  this.mIncomeText = this.mSharedUIParent.FindControlByID(simcity.kTxtIDIncome);
  this.mPopulationText = this.mSharedUIParent.FindControlByID(simcity.kTxtIDPopulation);
  this.mPopulationDeltaText = this.mSharedUIParent.FindControlByID(simcity.kTxtIDPopulationDelta);
  this.mWinDateDisplay = this.mSharedUIParent.FindControlByID(simcity.kTxtIDDate);
  this.mWinTimeDisplay = this.mSharedUIParent.FindControlByID(simcity.kTxtIDTime);
  this.mBottomToolbarControl = this.mSharedUIParent.FindControlByID(247960249);
  this.mBoxNameTextControl =
    this.mSharedUIParent.FindControlByID(simcity.kTxtBoxName);
  this.mBudgetUIContainer = this.mSharedUIParent.FindControlByID(simcity.kWinBudgetContainer);
  this.mPopulationUIContainer = this.mSharedUIParent.FindControlByID(simcity.kWinPopulationContainer);
  this.mTaxesBasicUIHandler = new simcity.cTaxesBasicUIHandler;
  gUIManager.RegisterUIHandler(this.mTaxesBasicUIHandler);
  var a = this;
  this.mSharedUIParent.FindAnimationByID(246121576).RegisterEventCallback(scrui.cAnimation.kEventStopped, function () {
    if (!a.mBudgetUIContainer.mIsVisible) {
      a.mBudgetUIContainer.DestroyLayout =
        !0;
      for (var b = 0; b < simcity.transactionRows.length; b++)
        simcity.transactionRows[b].DestroyChildren();
      simcity.transactionRows = []
    }
  });
  this.mSharedUIParent.FindAnimationByID(246319415).RegisterEventCallback(scrui.cAnimation.kEventStopped, function () {
    a.mPopulationUIContainer.mIsVisible || (a.mPopulationUIContainer.DestroyLayout = !0)
  });
  simcity.DEBUG && gUIManager.FindControlByID(simcity.kBtnExposeDebugUI).SetVisibility(!0);
  this.mGameTimeManager = new simcity.cGameTimeManager;
  gUIManager.RegisterUIHandler(this.mGameTimeManager);
  this.mLayerUIHandler = new simcity.cLayerUIHandler;
  this.mLayerUIHandler.Init();
  gUIManager.RegisterUIHandler(this.mLayerUIHandler);
  this.mTicker = new simcity.cTicker;
  gUIManager.RegisterUIHandler(this.mTicker);
  this.mEventTriggersManager = new simcity.cEventTriggersManager;
  this.mEventTriggersManager.Init();
  gUIManager.RegisterUIHandler(this.mEventTriggersManager);
  this.mSpeechBalloonHandler = new simcity.cSpeechBalloonHandler;
  gUIManager.RegisterUIHandler(this.mSpeechBalloonHandler);
  this.mSpeechBalloonHandler.Init();
  this.mCursorAttachmentHandler = new simcity.cCursorAttachmentHandler;
  gUIManager.RegisterUIHandler(this.mCursorAttachmentHandler);
  this.mCursorAttachmentHandler.Init(gUIManager.FindControlByID(simcity.kWinCursorAttachmentContainer));
  this.mToolPaletteUIHandler = new simcity.cToolPaletteUIHandler;
  this.mToolPaletteUIHandler.mLayerUIHandler = this.mLayerUIHandler;
  var b = new simcity.cKey;
  b.group = 161790466;
  b.instance = scrui.IDFromName("Global");
  this.mToolPaletteUIHandler.mPaletteKey = b;
  gUIManager.RegisterUIHandler(this.mToolPaletteUIHandler);
  this.mToolPaletteUIHandler.Init(this.mSharedUIParent.FindControlByID(simcity.kWinIDPaletteRoot));
  this.mTutorialCallout = new simcity.cTutorialCalloutManager;
  gUIManager.RegisterUIHandler(this.mTutorialCallout);
  this.mTutorialCallout.Init();
  this.mTutorialManager = new simcity.cTutorialManager;
  gUIManager.RegisterUIHandler(this.mTutorialManager);
  this.mTutorialManager.Init();
  this.mIsTutorialEnabled || simcity.gPresenceManager.RefreshPresenceFromServer(function () {
    simcity.cOriginUtilities.SetJoinablePresence(a.mRegionID)
  });
  this.mSpeedUIHandler = new simcity.cSpeedUIHandler;
  this.mSpeedUIHandler.Init(gUIManager.FindControlByID(simcity.kWinSpeedContainer));
  gUIManager.RegisterUIHandler(this.mSpeedUIHandler);
  this.mAlertsUIHandler = new simcity.cAlertsUI;
  this.mAlertsUIHandler.Init();
  gUIManager.RegisterUIHandler(this.mAlertsUIHandler);
  this.mRoadSelectUIHandler = new simcity.cRoadSelectUIHandler;
  this.mRoadSelectUIHandler.Init(this.mCityUIParent.FindControlByID(simcity.kWinBuildingRolloverContainer));
  gUIManager.RegisterUIHandler(this.mRoadSelectUIHandler);
  this.mAchievementsUIHandler = new simcity.cAchievementsUIHandler;
  this.mAchievementsUIHandler.Init(gUIManager.FindControlByID(simcity.kWinRootWindowID));
  gUIManager.RegisterUIHandler(this.mAchievementsUIHandler);
  simcity.InitializeBuildingRollover(this.mCityUIParent.FindControlByID(simcity.kWinBuildingRolloverContainer));
  simcity.gOneShotGameEventListener.Initialize();
  this.LoadBorderUnits();
  this.mRegionWallUI = new simcity.cRegionWallUI;
  gUIManager.RegisterUIHandler(this.mRegionWallUI);
  this.mRegionWallButton =
    this.mSharedUIParent.FindControlByID(simcity.kRegionWallButton);
  this.mRegionWallAnimation = this.mSharedUIParent.FindAnimationByID(simcity.kRegionWallAnimation);
  this.mRegionCameraButton = gUIManager.FindControlByID(simcity.kBtnRegionCamera);
  0 === this.GetBoxID() && this.mRegionCameraButton.SetEnabled(!1);
  this.mRegionUnlockEffect = gUIManager.FindControlByID(simcity.kRegionUnlockEffect);
  this.mReportContentUIHandler = new simcity.cReportContentUIHandler;
  gUIManager.RegisterUIHandler(this.mReportContentUIHandler);
  this.mReportContentUIHandler.Initialize(gUIManager.FindControlByID(245173239));
  simcity.gDeepLinkManager.InitDeepLink(simcity.gGameDeepLinkMethodInfo.jsonObj);
  this.mLeaderboardUIHandler = new simcity.cLeaderboardPanel;
  this.mLeaderboardUIHandler.Initialize();
  this.mChallengeUIHandler = new simcity.cChallengePanel;
  this.mChallengeUIHandler.Initialize();
  this.mNewspaperUIHandler = new simcity.cNewspaperUIHandler;
  gUIManager.RegisterUIHandler(this.mNewspaperUIHandler);
  this.mNewspaperUIHandler.Init(gUIManager.FindControlByID(simcity.kWinNewspaperContainer));
  this.mToyTaskPanelUIHandler = new simcity.cToyTaskPanelUIHandler;
  gUIManager.RegisterUIHandler(this.mToyTaskPanelUIHandler);
  this.mToyTaskPanelUIHandler.Init(gUIManager.FindControlByID(simcity.kWinRootWindowID));
  this.mRegionViewUIHandler = new simcity.cRegionViewUIHandler;
  this.mRegionViewUIHandler.Init(this.mRegionUIParent);
  gUIManager.RegisterUIHandler(this.mRegionViewUIHandler);
  this.mAPIServerDataUIHandler.RefreshRegionAPIData();
  this.mRegionViewUIHandler.PreloadData();
  this.mBoundaryUIHandler = new simcity.cBoundaryUIHandler;
  gUIManager.RegisterUIHandler(this.mBoundaryUIHandler);
  this.mBoundaryUIHandler.Init(gUIManager.FindControlByID(simcity.kWinBoundaryUIContainer));
  this.mAvatarManagerHandler = new simcity.cAvatarManagerHandler;
  gUIManager.RegisterUIHandler(this.mAvatarManagerHandler);
  this.mAvatarManagerHandler.Init();
  simcity.LoadPopulationHistory(this);
  this.mBudgetCrisisUI = new simcity.cBudgetCrisisUI;
  this.mBudgetCrisisUI.Init();
  gUIManager.RegisterUIHandler(this.mBudgetCrisisUI);
  this.mMayorRating = new simcity.cMayorRating;
  this.mMayorRating.Init();
  gUIManager.RegisterUIHandler(this.mMayorRating);
  this.mBudgetPanel = new simcity.cBudgetPanel;
  this.mBudgetPanel.Init();
  gUIManager.RegisterUIHandler(this.mBudgetPanel);
  this.mCategoryQueryingHandler = new simcity.cCategoryQueryingHandler;
  this.mCategoryQueryingHandler.Init();
  gUIManager.RegisterUIHandler(this.mCategoryQueryingHandler);
  this.mAchievementManager = simcity.gAchievementManager;
  this.mAchievementManager.Init(this.mSharedUIParent, this.mActiveBoxID);
  this.mAgentQueryUIHandler =
    new simcity.cAgentQueryUIHandler;
  this.mAgentQueryUIHandler.Init(gUIManager.FindControlByID(simcity.kAgentQueryContainer));
  this.mAchievementsUIHandler.SetAchievementManager(this.mAchievementManager);
  gUIManager.RegisterUIHandler(this.mAgentQueryUIHandler);
  this.mMissionUI = new simcity.cMissionUI;
  gUIManager.RegisterUIHandler(this.mMissionUI);
  this.mBulldozeButton = gUIManager.FindControlByID(simcity.kBtnIDBulldoze);
  simcity.cCitySpecializationHandler.Init();
  this.mRegionMessageRouter = new simcity.cRegionMessageRouter;
  this.mRegionMessageRouter.Init();
  gUIManager.RegisterUIHandler(this.mRegionMessageRouter);
  simcity.gFriendListUIHandler.Initialize(gUIManager.FindControlByID(simcity.kFriendListContainer));
  this.mLetterboxRoot = gUIManager.FindControlByID(simcity.kWinLetterboxRoot);
  this.mDialogManager = new simcity.gDialog(gUIManager.FindControlByID(simcity.kModalDialogLayout));
  this.mErrorDialogManager = new simcity.gErrorDialog(gUIManager.FindControlByID(simcity.kErrorModalDialogLayout));
  this.mErrorAlertsUIHandler = new simcity.cErrorAlertsUIHandler;
  simcity.gSystemMessageController.OpenSystemMessageSocket(a.OpenSystemMessageSocketCallback);
  a = this;
  simcity.gGameInvitesController.Initialize();
  simcity.gGameInvitesController.inviteCallback = function (b) {
    a.mRegionViewUIHandler.SendInvites(b)
  };
  this.mRegionViewButtonIcon = gUIManager.FindControlByID(simcity.kIcnRegionCamera);
  this.mReturnHomeButtonIcon = gUIManager.FindControlByID(simcity.kIcnReturnHome);
  this.mMissionUI.Init(gUIManager.FindControlByID(simcity.kWinMissionContainer));
  this.mIsSpectatorMode && this.EnableSpectatorMode();
  simcity.RegisterIME()
};
simcity.cGlobalUIHandler.prototype.HandleUIMessage = function (a, b, c) {
  switch (a) {
  case scrui.kMsgTypeButtonGainFocus:
    simcity.gEventManager.TriggerEvent(simcity.gEventTypes.MOUSEOVER, b.controlID, c);
    break;
  case scrui.kMsgTypeButtonLoseFocus:
    simcity.gEventManager.TriggerEvent(simcity.gEventTypes.MOUSEOUT, b.controlID, c);
    break;
  case scrui.kMsgTypeButtonUp:
    simcity.gEventManager.TriggerEvent(simcity.gEventTypes.MOUSEUP, b, c);
    break;
  case scrui.kMsgTypeButtonDown:
    simcity.gEventManager.TriggerEvent(simcity.gEventTypes.MOUSEDOWN, b,
      c);
    b == simcity.kBtnIDRotateCCW ? (this.mRotateRight = !0, simcity.RotateCamera(!0)) : b == simcity.kBtnIDRotateCW && (this.mRotateLeft = !0, simcity.RotateCamera(!1));
    break;
  case scrui.kMsgTypeButtonClicked:
    simcity.gEventManager.TriggerEvent(simcity.gEventTypes.CLICK, b, c);
    switch (b) {
    case simcity.AllLayerClose:
      (a = gUIManager.FindControlByID(248193223)) && a.SetSelected(!1);
      break;
    case simcity.kBTNCloseBudget:
      a = gUIManager.FindControlByID(245433542);
      a = a.FindControlByID(simcity.kBtnIDBudget);
      a.SetSelected(!1);
      break;
    case simcity.kBTNCloseSpecilization:
      a =
        gUIManager.FindControlByID(240502028);
      a.SetSelected(!1);
      break;
    case simcity.kBTNClosePopulation:
      a = gUIManager.FindControlByID(248200384);
      a = a.FindControlByID(simcity.kBtnIDPopulation);
      a.SetSelected(!1);
      break;
    case simcity.kRegionNameButton:
      this.mLeaderboardUIHandler.Show(null, ["LBPopulation"]);
      break;
    case simcity.kChallengePanelBtn:
      this.mChallengeUIHandler.Show();
      break;
    case simcity.kBtnNameMomentOkay:
      (a = gUIManager.FindControlByID(simcity.kNameMoment)) && a.DestroyControl();
      this.mIsNameYourCityActive = !1;
      (this.mNamingArrow = gUIManager.FindControlByID(simcity.kNamingArrow)) && this.mNamingArrow.SetVisibility(!0);
      break;
    case simcity.kBtnIDMaps:
      a = gUIManager.FindControlByID(simcity.kWinIDMapsPanel);
      a.SetVisibility(!a.mIsVisible);
      break;
    case simcity.kBtnIDQuit:
      var d = this,
      a = {
        title : this.mLocaleStrings.kExitToMenuText,
        titleParams : null,
        message : this.mLocaleStrings.kExitToMenuConfirmationMsg,
        messageParams : null,
        buttons : [{
            text : simcity.gDialog.kButtonCancelText,
            onClick : function () {
              d.OnQuitConfirmationCancel()
            }
          }, {
            text : this.mLocaleStrings.kExitText,
            onClick : function () {
              d.QuitToMainMenu()
            }
          }
        ]
      };
      this.mQuitConfirmationShown = !0;
      this.mDialogManager.ShowPrompt(a);
      break;
    case simcity.kBtnIDQuitApp:
      d = this;
      a = {
        title : this.mLocaleStrings.kQuitSimcityText,
        titleParams : null,
        message : this.mLocaleStrings.kQuitSimcityConfirmMsg,
        messageParams : null,
        buttons : [{
            text : simcity.gDialog.kButtonCancelText,
            onClick : function () {
              d.OnQuitConfirmationCancel()
            }
          }, {
            text : this.mLocaleStrings.kQuitText,
            onClick : function () {
              d.mQuitConfirmationShown = !1;
              d.mNewspaperUIHandler.Shutdown();
              d.mTicker.Shutdown();
              scrui.PostGameCommand(scrui.BuildCommand([simcity.kDataRequestQuitApp]))
            }
          }
        ]
      };
      this.mQuitConfirmationShown = !0;
      this.mDialogManager.ShowPrompt(a);
      break;
    case simcity.kBtnGameManual:
      simcity.gUIToolbox.OpenSCGameManual();
      break;
    case simcity.kBtnHelpCenter:
      simcity.gUIToolbox.OpenSCHelpSiteWithAuth();
      break;
    case simcity.kBtnExposeDebugUI:
      simcity.DEBUG && (a = gUIManager.FindControlByID(simcity.kWinDebugToolCategories), a.SetVisibility(!a.mIsVisible));
      break;
    case simcity.kRegionWallButton:
      this.mRegionWallUI.ToggleRegionWall(!0);
      this.mRegionWallUI.RevealRegionWallTextEntry(!0);
      break;
    case simcity.kBtnIDMainMenuResume:
      this.mSharedUIParent.FindControlByID(simcity.kBtnIDMainMenuToggle).SetSelected(!1);
      break;
    case simcity.kAchievementPanelBtn:
      this.mAchievementsUIHandler.Show();
      break;
    case simcity.kBtnIDOpenFeedback:
      simcity.cOriginUtilities.ShowFeedback();
      break;
    case simcity.kBtnIDOpenReportBug:
      simcity.cOriginUtilities.ShowBugReport();
      break;
    case simcity.kBtnIDOpenSettings:
      scrui.Assert(!this.mSettingsUIHandler);
      this.mSettingsUIHandler =
        new simcity.cSettingsUIHandler;
      this.mSettingsUIHandler.Init(gUIManager.FindControlByID(simcity.kWinRootWindowID), !0);
      gUIManager.RegisterUIHandler(this.mSettingsUIHandler);
      this.mSettingsUIHandler.Show();
      break;
    case simcity.kBtnIDToolConfirmed:
      this.mTutorialManager.SetModalWindow(this.mConfirmationDialog, !1);
      this.mConfirmationDialog.DestroyControl();
      this.mConfirmationDialog = null;
      scrui.PostGameCommand(scrui.BuildCommand([simcity.kDataToolMessage, scrui.IDFromName("toolConfirmed")]));
      break;
    case simcity.kBtnIDToolDenied:
      this.mTutorialManager.SetModalWindow(this.mConfirmationDialog,
        !1);
      this.mConfirmationDialog.DestroyControl();
      this.mConfirmationDialog = null;
      scrui.PostGameCommand(scrui.BuildCommand([simcity.kDataToolMessage, scrui.IDFromName("toolDenied")]));
      break;
    case simcity.kBtnIDZoomIn:
      simcity.ZoomCamera(!0);
      break;
    case simcity.kBtnIDZoomOut:
      simcity.ZoomCamera(!1);
      break;
    case simcity.kBtnFriendList:
      simcity.gFriendListUIHandler.Toggle();
      break;
    case simcity.kBtnDemandBars:
      !this.mIsEditorActive && (!simcity.IsTutorialInProgress() && !this.mRegionViewUIHandler.IsVisible()) && this.mToolPaletteUIHandler.OpenToolPanelHelper(simcity.kCategoryIDZones)
    }
    break;
  case scrui.kMsgTypeButtonSelected:
    switch (b) {
    case simcity.kBtnRegionCamera:
      this.TransitionToRegion();
      break;
    case simcity.kCityNameButton:
      this.mNamingArrow && (this.mNamingArrow.DestroyControl(), delete this.mNamingArrow);
      simcity.CreateNameYourCityDialog();
      break;
    case simcity.kBtnIDBudget:
      this.OpenBudgetPanel();
      break;
    case simcity.kBtnIDPopulation:
      this.OpenPopulationPanel();
      break;
    case simcity.kBtnIDMainMenuToggle:
      if (!simcity.gGlobalUIHandler.mIsTimed || !simcity.gGlobalUIHandler.mTutorialDemo)
        simcity.IsTutorialInProgress() ||
        (this.mRegionCameraButton.mIsSelected ? this.mRegionViewUIHandler.ClosePalette() : (simcity.gGlobalUIHandler.mToolPaletteUIHandler.mEditorLayout.mIsVisible && this.mToolPaletteUIHandler.CloseEditorPanel(), this.mToolPaletteUIHandler.CloseToolPanel())), a = gUIManager.FindControlByID(simcity.kWinIDMainMenu), scrui.PostGameCommand(scrui.BuildCommand(["optionsMenuActive", "true"])), a.SetVisibility(!0), simcity.gGlobalUIHandler.mSpeedUIHandler.GetGameSpeed() != simcity.kSpeedPaused && (simcity.gGlobalUIHandler.mSpeedUIHandler.sPreviousGameSpeed =
            simcity.gGlobalUIHandler.mSpeedUIHandler.GetGameSpeed(), scrui.PostGameCommand(scrui.BuildCommand(["setspeed", simcity.kSpeedPaused]))), simcity.IsTutorialInProgress() && simcity.gGlobalUIHandler.mTutorialCallout.SetupCallout()
    }
    break;
  case scrui.kMsgTypeButtonDeselected:
    switch (b) {
    case simcity.kBtnIDMainMenuToggle:
      a = gUIManager.FindControlByID(simcity.kWinIDMainMenu),
      a.SetVisibility(!1),
      scrui.PostGameCommand(scrui.BuildCommand(["optionsMenuActive", "false"])),
      scrui.PostGameCommand(scrui.BuildCommand(["setspeed",
            simcity.gGlobalUIHandler.mSpeedUIHandler.sPreviousGameSpeed])),
      simcity.IsTutorialInProgress() && simcity.gGlobalUIHandler.mTutorialCallout.SetupCallout()
    }
    break;
  case simcity.kMsgTypeAPIServerDataUpdated:
    this.mMyBoxDataSet || (this.mTicker.Init(), this.LoadUserInfo(), this.mMyBoxDataSet = !0),
    this.SetBoxName(b),
    "function" == typeof simcity.IsTutorialInProgress && (!simcity.IsMainTutorialInProgress() && !this.mIsSpectatorMode && !simcity.IsSandboxRegion()) && this.mAchievementManager.StartRuleProcessing()
  }
};
simcity.cGlobalUIHandler.prototype.IsNameYourCityMomentActive = function () {
  return this.mIsNameYourCityActive || this.mNamingArrow && this.mNamingArrow.mIsVisible ? !0 : !1
};
simcity.cGlobalUIHandler.prototype.PrintDebugInfo = function () {
  if (simcity.DEBUG) {
    scrui.DebugPrint("gGlobalUIHandler");
    var a = 0,
    b;
    for (b in simcity.gHistoryData)
      a += simcity.gHistoryData[b].data.length;
    scrui.DebugPrint("    gHistoryData categories = " + Object.keys(simcity.gHistoryData).length + ", total history items = " + a);
    scrui.DebugPrint("    mPopulationTimelineData population = " + this.mPopulationTimelineData.population.length + ", visitors = " + this.mPopulationTimelineData.visitors.length);
    scrui.DebugPrint("    mLayerButtons = " +
      this.mLayerButtons.length)
  }
};
simcity.cGlobalUIHandler.prototype.OpenPopulationPanel = function () {
  this.mPopulationUIContainer.mChildren || (this.mPopulationUI = new simcity.cPopulationUI, this.mPopulationUI.Init(this.mPopulationUIContainer), gUIManager.RegisterUIHandler(this.mPopulationUI));
  this.mPopulationUIContainer.DestroyLayout = !1;
  gUIManager.FindControlByID(simcity.kBtnIDBudget).SetSelected(!1)
};
simcity.cGlobalUIHandler.prototype.OpenBudgetPanel = function () {
  this.mBudgetUIContainer.mChildren || gUIManager.LoadAndCacheLayout("Layouts/BudgetUI2.js", this.mBudgetUIContainer);
  this.mBudgetUIContainer.DestroyLayout = !1;
  this.mTaxesBasicUIHandler.Init(this.mBudgetUIContainer);
  gUIManager.FindControlByID(simcity.kBtnIDPopulation).SetSelected(!1);
  this.UpdateDataBindings()
};
simcity.cGlobalUIHandler.prototype.Init = function () {
  gUIManager.CacheLayouts("BudgetItemTemplate.js GlobalUI/TaxSpinner.js 0x0b074e5a!0x7f0400ad.0x67771f5c 0x0b074e5a!0x284503fe.0x67771f5c PaletteSubCategoryButton.js PaletteLayerToggle2.js AlertTemplate.js PowerAlert.js AlertTemplateNoCountCircleBar.js FireAlert.js 0x0b074e5a!0x5c51d5be.0x67771f5c 0x0b074e5a!0x6791a44f.0x67771f5c MissionObjective.js 0x0b074e5a!0xb9f25a47.0x67771f5c WaterAlert.js 0x0b074e5a!0xaca003fb.0x67771f5c".split(" "));
  var a = [scrui.BuildRequestQuery([simcity.kDataEditor,
        simcity.kDataEnabled]), scrui.BuildRequestQuery([simcity.kDataURLProperty, simcity.kPropEcoNetRESTAPI]), scrui.BuildRequestQuery([simcity.kDataDemo]), scrui.BuildRequestQuery([simcity.kDataBinAmount, simcity.kResourceIDTutorialEnabled]), scrui.BuildRequestQuery([simcity.kDataActiveBoxId]), scrui.BuildRequestQuery([simcity.kDataCommandLine]), scrui.BuildRequestQuery([simcity.kDataSpectator]), scrui.BuildRequestQuery([simcity.kDataActiveCityUID]), scrui.BuildRequestQuery([simcity.kDataRegionID]), scrui.BuildRequestQuery([simcity.kDataLastActiveCityUID])],
  b = this;
  scrui.RequestGameData(a, function (a) {
    gUIManager.RegisterUIHandler(b);
    b.mIsEditorActive = a[0];
    a[1] && scrui.SetRestPath(a[1]);
    b.mGlobalUILayout = gUIManager.LoadLayout("Layouts/GlobalUI2.js");
    b.mGlobalUILayout.FindControlByID(simcity.kWinRootWindowID);
    var c = a[2];
    b.mIsDemo = c.demo;
    b.mIsTimed = c.demoTimed;
    b.mIsTutorialEnabled = b.CheckMainTutorialActive();
    b.mActiveBoxID = a[4] || 0;
    b.mCommandLine = a[5];
    b.mIsSpectatorMode = a[6];
    b.mActiveBoxUID = a[7] || 0;
    b.mRegionID = a[8] || 0;
    b.OnGlobalUILoaded();
    simcity.gConfigurationValues.RestoreFromLocalStorage();
    simcity.gConfigurationValues.InitFromServer()
  });
  this.InitDataBindingInfo();
  for (var c = simcity.kLayerRows.length, d = 0; d < c; d++) {
    for (var e = simcity.kLayerRows[d].length, a = Array(e), f = 0, g = e; f < g; ++f) {
      var h = 3 * f,
      i = scrui.RequestStringFromKey(new simcity.cKey(1088479232, simcity.kLayerRows[d][f], scrui.kResourceTypePropertyList));
      a[h] = scrui.BuildRequestQuery([simcity.kDataProperties, i, simcity.kPropertyLayerName]);
      a[h + 1] = scrui.BuildRequestQuery([simcity.kDataProperties, i, simcity.kPropertyLayerIconKey]);
      a[h + 2] = scrui.BuildRequestQuery([simcity.kDataProperties,
            i, simcity.kPropertyLayerDarkIconKey])
    }
    var j = gUIManager.FindControlByID(248187920 + d);
    if (!(null == j || void 0 == j)) {
      var k = d,
      l = this;
      scrui.RequestGameData(a, function (a) {
        for (var b = e - 1; 0 <= b; --b) {
          var c = 3 * b,
          d = gUIManager.LoadAndCacheLayout("Layouts/Palette/PaletteLayerToggle2.js", j);
          l.mLayerButtons.push(d);
          d.SetPosition(b * d.mWidth, 0);
          var f = Number(simcity.kLayerRows[k][b]);
          d.mUserData = f;
          d.mAllLayersButton = !0;
          for (var g = d.FindControlByID(231251442).mExposedProperties, h = 0, i = g.length; h < i; ++h) {
            var u = g[h],
            v = scrui.cProperties.GetPropertyDataByID(u.mPropertyID);
            switch (u.mPropertyLabel) {
            case "WhiteIcon":
              v.mSet(u.mControl, scrui.PathFromResourceKey(a[c + 1]));
              break;
            case "DarkIcon":
              var x = a[c + 2];
              x || (x = a[c + 1]);
              v.mSet(u.mControl, scrui.PathFromResourceKey(x));
              break;
            case "TooltipText":
              x = a[c];
              x = "/" + scrui.DecimalToHex(x.tableID) + "/" + scrui.DecimalToHex(x.stringID);
              v.mSet(u.mControl, x);
              break;
            case "UserData":
              v.mSet(u.mControl, f)
            }
          }
          l.mLayerUIHandler.RegisterLayerButton(d)
        }
      })
    }
  }
  this.mHeavyLayerList = simcity.kLayerCategory1.concat(simcity.kLayerCategory2, simcity.kLayerCategory3,
      simcity.kLayerCategory4, simcity.kLayerCategory5, simcity.kLayerCategory6, simcity.kLayerCategory7);
  simcity.LoadRecentTransactionHistory()
};
simcity.IsMainTutorialInProgress = function () {
  return simcity.gGlobalUIHandler.mIsMainTutorialEnabled
};
simcity.cGlobalUIHandler.prototype.CheckMainTutorialActive = function () {
  var a = [scrui.BuildRequestQuery([simcity.kDataBinAmount, simcity.kResourceIDTutorialEnabled])],
  b = !1;
  scrui.RequestGameData(a, function (a) {
    b = 1 == a[0]
  });
  return simcity.gGlobalUIHandler.mIsMainTutorialEnabled = b
};
simcity.cGlobalUIHandler.prototype.Shutdown = function () {
  this.mGlobalUILayout = this.mCityUIParent = null;
  gUIManager.UnregisterUIHandler(this.mAvatarManagerHandler);
  this.mAvatarManagerHandler.Shutdown();
  this.mAvatarManagerHandler = null;
  gUIManager.UnregisterUIHandler(this.mBoundaryUIHandler);
  this.mBoundaryUIHandler.Shutdown();
  this.mBoundaryUIHandler = null;
  gUIManager.UnregisterUIHandler(this.mRegionViewUIHandler);
  this.mRegionViewUIHandler.Shutdown(this.mRegionUIParent);
  this.mRegionViewUIHandler = null;
  gUIManager.UnregisterUIHandler(this.mTutorialManager);
  this.mTutorialManager.Shutdown();
  this.mTutorialManager = null;
  gUIManager.UnregisterUIHandler(this.mSpeechBalloonHandler);
  this.mSpeechBalloonHandler.Shutdown();
  this.mSpeechBalloonHandler = null;
  gUIManager.UnregisterUIHandler(this.mCursorAttachmentHandler);
  this.mCursorAttachmentHandler.Shutdown();
  this.mCursorAttachmentHandler = null;
  gUIManager.UnregisterUIHandler(this.mToolPaletteUIHandler);
  this.mToolPaletteUIHandler.Shutdown();
  this.mToolPaletteUIHandler = null;
  gUIManager.UnregisterUIHandler(this.mLayerUIHandler);
  this.mLayerUIHandler = null;
  gUIManager.UnregisterUIHandler(this.mEventTriggersManager);
  this.mEventTriggersManager = null;
  gUIManager.UnregisterUIHandler(this.mGameTimeManager);
  this.mGameTimeManager = null;
  gUIManager.UnregisterUIHandler(handler.mTaxesBasicUIHandler);
  this.mTaxesBasicUIHandler = null
};
simcity.cGlobalUIHandler.prototype.TransitionToRegion = function () {
  !this.mRegionViewUIHandler.IsVisible() && 0 !== this.GetBoxID() && (this.mLayerUIHandler.DeactivateLayer(), this.mToolPaletteUIHandler.CloseToolPanel(!0), this.mMissionUI.mMissionContainer.SetVisibility(!1), this.mRegionViewUIHandler.EnterRegionView(), this.mIsSpectatorMode && this.mRegionViewUIHandler.ZoomToAndLaunchLastCity(), this.mRegionUnlockEffect.SetVisibility(!1))
};
simcity.cGlobalUIHandler.prototype.OnKeyDown = function (a) {
  scrui.cUIHandler.prototype.OnKeyDown.call(this, a)
};
simcity.cGlobalUIHandler.prototype.OnKeyUp = function (a, b, c, d, e) {
  scrui.cUIHandler.prototype.OnKeyUp.call(this, a);
  e && !c && (a === scrui.kKeyCodeLetterF ? scrui.PostGameCommand(scrui.BuildCommand(["createUnit", simcity.CheatUnitFire])) : a === scrui.kKeyCodeLetterC ? scrui.PostGameCommand(scrui.BuildCommand(["createUnit", simcity.CheatUnitCrime])) : a === scrui.kKeyCodeLetterM ? scrui.PostGameCommand(scrui.BuildCommand(["createUnit", simcity.CheatUnitHealth])) : a === scrui.kKeyCodeLetterA ? scrui.PostGameCommand(scrui.BuildCommand(["createUnit",
          simcity.CheatUnitAirPollution])) : a === scrui.kKeyCodeLetterP ? scrui.PostGameCommand(scrui.BuildCommand(["createUnit", simcity.CheatUnitGroundPollution])) : a === scrui.kKeyCodeLetterH ? scrui.PostGameCommand(scrui.BuildCommand(["createUnit", simcity.CheatUnitHomeless])) : a === scrui.kKeyCodeLetterS ? scrui.PostGameCommand(scrui.BuildCommand(["createUnit", simcity.CheatUnitSewage])) : a === scrui.kKeyCodeLetterG ? scrui.PostGameCommand(scrui.BuildCommand(["createUnit", simcity.CheatUnitGarbage])) : a === scrui.kKeyCodeLetterW &&
    scrui.PostGameCommand(scrui.BuildCommand(["createUnit", simcity.CheatUnitSimoleans])));
  switch (a) {
  case scrui.kKeyCodeEscape:
    var b = [scrui.BuildRequestQuery(["selectedTool", "toolID"])],
    f = this;
    scrui.RequestGameData(b, function () {
      var a = f.mSharedUIParent.FindControlByID(simcity.kBtnIDMainMenuToggle),
      b = gUIManager.FindControlByID(248200384).FindControlByID(simcity.kBtnIDPopulation),
      c = gUIManager.FindControlByID(245433542).FindControlByID(simcity.kBtnIDBudget),
      d = simcity.gGlobalUIHandler.mSpeechBalloonHandler.GetExpandedSpeechBalloonInfo(),
      e = gUIManager.FindControlByID(248193223);
      if (!simcity.gGlobalUIHandler.mIsTutorialEnabled)
        if (f.mSettingsUIHandler && f.mSettingsUIHandler.InConfirmationSequence())
          f.mSettingsUIHandler.AbortConfirmationSequence();
        else if (f.mAchievementsUIHandler && f.mAchievementsUIHandler.IsShowing())
          f.mAchievementsUIHandler.Hide();
        else if (f.mChallengeUIHandler && f.mChallengeUIHandler.IsShowing())
          f.mChallengeUIHandler.Hide();
        else if (f.mLeaderboardUIHandler && f.mLeaderboardUIHandler.IsShowing())
          f.mLeaderboardUIHandler.Hide();
        else if (f.mSettingsUIHandler && f.mSettingsUIHandler.IsShowing())
          f.mSettingsUIHandler.Hide();
        else if (f.mQuitConfirmationShown)
          f.mDialogManager.OnEscapePressed();
        else if (a && !0 === a.mIsSelected)
          a.SetSelected(!1);
        else if (f.mImportExportUIHandler)
          f.mImportExportUIHandler.Shutdown();
        else if (f.mCityNameUIHandler && f.mCityNameUIHandler.IsVisible())
          f.mCityNameUIHandler.Hide();
        else if (f.mMayorRating.IsVisible())
          f.mMayorRating.CloseMayorPanel();
        else if (b.mIsSelected)
          b.SetSelected(!1);
        else if (c.mIsSelected)
          c.SetSelected(!1);
        else if (d && d.item && !d.item.mIsThoughtBubble)
          simcity.gGlobalUIHandler.mSpeechBalloonHandler.OnAskMeLater(d);
        else {
          var l = !1;
          scrui.gUIManager.mRequestManager.PostGameCommand(scrui.BuildCommand(["handleEscapeKey"]), null, function (a) {
            l = a
          });
          l || (null !== f.mLayerUIHandler.mCurrentLayerID ? f.mLayerUIHandler.DeactivateLayer() : e.mIsSelected ? e.SetSelected(!1) : f.mIsEditorActive ? scrui.PostGameCommand(scrui.BuildCommand([simcity.kDataExitBuildingEditor])) : null !== f.mToolPaletteUIHandler && null !== f.mToolPaletteUIHandler.mSelectedCategoryButton ?
            f.mToolPaletteUIHandler.CloseToolPanel() : null !== simcity.gGlobalUIHandler.mRegionViewUIHandler && simcity.gGlobalUIHandler.mRegionViewUIHandler.mIsContextPanelActive ? simcity.gGlobalUIHandler.mRegionViewUIHandler.ClosePalette() : f.mRegionWallButton.mIsSelected ? (simcity.SendSoundEvent(simcity.audio.kGlobalSoundObjectID, simcity.audio.kInstanceUIChatWindowClose), gUIManager.FindControlByID(simcity.gGlobalUIHandler.mRegionWallUI.kControlIDs.WALL_BACKGROUND).SetVisibility(!1), gUIManager.FindControlByID(simcity.gGlobalUIHandler.mRegionWallUI.kControlIDs.INPUT_CONTAINER).SetVisibility(!1),
              f.mRegionWallButton.SetSelected(!1)) : a.SetSelected(!a.mIsSelected))
        }
    })
  }
  if (simcity.DEBUG)
    switch (a) {
    case scrui.kKeyCodeDigit1:
      c && (e && !d) && scrui.RunCheat("scgameui -unlockalltools");
      break;
    case scrui.kKeyCodeLetterW:
      c && (e && !d) && simcity.CreateUnit("T_RCI_AddHourlyIncomeCheat")
    }
};
simcity.cGlobalUIHandler.prototype.OnMouseDown = function () {};
simcity.cGlobalUIHandler.prototype.OnMouseUp = function (a, b, c) {
  scrui.cUIHandler.prototype.OnMouseUp.call(this, a, b, c);
  !0 === this.mRotateRight ? (this.mRotateRight = !1, simcity.RotateCameraStop(!0)) : !0 === this.mRotateLeft && (this.mRotateLeft = !1, simcity.RotateCameraStop(!1))
};
simcity.cGlobalUIHandler.prototype.SetVisibility = function (a) {
  this.mVisibilityCounter += a ? 1 : -1;
  null !== this.mCityUIParent && this.mCityUIParent.SetVisibility(0 < this.mVisibilityCounter)
};
simcity.cGlobalUIHandler.prototype.GetVisibility = function () {
  return 0 < this.mVisibilityCounter
};
simcity.cGlobalUIHandler.prototype.BuildingRolloverLoaded = function (a) {
  this.mBuildingRolloverManager = a;
  a.mGlobalUI = this
};
simcity.cGlobalUIHandler.prototype.SetBoxName = function (a) {
  var b = this.mGlobalUILayout.FindControlByID(simcity.kTxtBoxName);
  (a = a.GetMyClaimedBox()) && b.SetText(a.name, !0)
};
simcity.cGlobalUIHandler.prototype.LoadBorderUnits = function () {
  var a = this,
  b = scrui.BuildRequestQuery(["borderUnits"]);
  scrui.RequestGameData([b], function (b) {
    for (var b = b[0], d = 0, e = b.length; d < e; ++d) {
      var f = scrui.RequestStringFromUnitRef(b[d]);
      a.mBorderUnitsList.push(f)
    }
  })
};
simcity.cGlobalUIHandler.prototype.LoadUserInfo = function () {
  if (simcity.gSessionManager.IsSessionActive())
    this.mUserSessionId = simcity.gSessionManager.mUserSessionID, this.mUserId = simcity.gSessionManager.mUserID, this.mScreenName = simcity.gSessionManager.mScreenName, this.LoadRegionWall();
  else {
    var a = this,
    b = scrui.BuildRequestQuery([simcity.kDataAppProperties, simcity.kPropNetUserID]);
    scrui.RequestGameData([b], function (b) {
      a.mUserId = b[0];
      Boolean(a.mUserId) && (b = scrui.BuildRequestQuery(["user", a.mUserId]), scrui.RequestRestData([b],
          null, scrui.XHR.requestMethods.GET, function (b) {
          b = b.json;
          null !== b && (a.mScreenName = b.screenName, a.LoadRegionWall())
        }, function (a) {
          scrui.DebugPrint("[RPC ERROR]:" + a.message)
        }, function () {}))
    })
  }
};
simcity.cGlobalUIHandler.prototype.LoadRegionWall = function () {
  gUIManager.FindControlByID(simcity.mRegionWall.root);
  var a = gUIManager.FindControlByID(simcity.mRegionWall.regionWallLayout),
  b = gUIManager.FindControlByID(simcity.mRegionWall.formContainer),
  c = gUIManager.FindControlByID(simcity.mRegionWall.messagesContainer),
  d = gUIManager.FindControlByID(simcity.mRegionWallNotifications.messagesContainer),
  e = this.mRegionID;
  0 !== e && null !== this.mRegionWallUI && this.mRegionWallUI.Init(this.mUserId, this.mUserSessionId,
    this, e, a, b.mParentControl, c.mParentControl, d.mParentControl);
  gUIManager.FindControlByID(simcity.mRegionWall.root).SetVisibility(!1)
};
simcity.cGlobalUIHandler.prototype.GetBoxID = function () {
  return 0 !== this.mActiveBoxID ? this.mActiveBoxID : this.mActiveBoxUID
};
simcity.cGlobalUIHandler.prototype.GetIsDemo = function () {
  return this.mIsDemo
};
simcity.cGlobalUIHandler.prototype.ShowConfirmationDialog = function (a) {
  var b = this;
  switch (a.dialogID) {
  case simcity.kConfirmationDialogIDBulldoze:
  case simcity.kConfirmationDialogIDCantBulldoze:
    var c = [],
    d = null,
    e = a.dialogID === simcity.kConfirmationDialogIDBulldoze;
    e || (d = (new scrui.cLocaleString("DialogMessages.json", "0x0e9e5737", "")).LoadAndGetTextSynchronous());
    for (var f in a.unitRefs) {
      var g = scrui.RequestStringFromUnitRef(a.unitRefs[f]);
      c.push(scrui.BuildRequestQuery(["units", g, "unitName"]))
    }
    scrui.RequestGameData(c,
      function (a) {
      var c = "",
      f;
      for (f in a) {
        var g = scrui.TextFromLocaleProperty(a[f]);
        if (a[f].stringID === simcity.kTextIDGarbageDump)
          var l = (new scrui.cLocaleString("GlobalUI.json", "0x0e1a16d1", "")).LoadAndGetTextSynchronous(), g = g + l;
        l = "";
        f != a.length - 1 && (l = ", ");
        c += g + l
      }
      b.LoadAndShowConfirmationDialog("Layouts/DialogBoxes/BulldozeDialog.js", c, d, e)
    })
  }
};
simcity.cGlobalUIHandler.prototype.HideConfirmationDialog = function () {
  this.mConfirmationDialog && (this.mTutorialManager.SetModalWindow(this.mConfirmationDialog, !1), this.mConfirmationDialog.DestroyControl(), this.mConfirmationDialog = null)
};
simcity.cGlobalUIHandler.prototype.LoadAndShowConfirmationDialog = function (a, b, c, d) {
  (this.mConfirmationDialog = gUIManager.LoadAndCacheLayout(a, this.mSharedUIParent)) ? (b && this.mConfirmationDialog.FindControlByID(simcity.kTextIDToolRequestBody).SetRawText(b), c && this.mConfirmationDialog.FindControlByID(simcity.kTextIDToolRequestHeader).SetRawText(c), d || this.mConfirmationDialog.FindControlByID(simcity.kBtnIDToolDenied).SetVisibility(!1)) : scrui.PostGameCommand(scrui.BuildCommand([simcity.kDataToolMessage,
        scrui.IDFromName("toolConfirmation"), !0]));
  return !1
};
simcity.ShowError = function (a) {
  simcity.gGlobalUIHandler.ShowError(a)
};
simcity.ErrorWindowClosed = function () {
  var a = simcity.gGlobalUIHandler;
  a.mErrorLayout.DestroyControl();
  a.mErrorLayout = null;
  scrui.OnErrorWindowClosed(scrui.kErrorResponse_Okay)
};
simcity.cGlobalUIHandler.prototype.InitErrorManager = function () {
  var a = this;
  gErrorManager.Init();
  gErrorManager.RegisterModalDisplayListener(function (b) {
    a.mErrorDialogManager.ShowErrorModal(b)
  });
  gErrorManager.RegisterErrorListener(function (a) {
    return simcity.gNetworkStateManager.HandleConnectionError(a)
  });
  gErrorManager.RegisterErrorListener(function (b) {
    return a.InGameErrorHandler(b)
  });
  gErrorManager.CheckForErrors();
  setTimeout(function () {
    scrui.PostGameCommand(scrui.BuildCommand([simcity.kRequestNetworkConnectionState]))
  },
    200)
};
simcity.cGlobalUIHandler.prototype.ShowError = function (a) {
  this.mErrorLayout = gUIManager.LoadLayout("Layouts/ErrorModal.js", scrui.gUIManager.GetRootWindow());
  this.mErrorLayout.FindControlByID(235662304).SetText(a.message);
  var b = "",
  c;
  for (c in a.cause)
    b += c + ":" + scrui.SerializeJSON(a.cause[c]) + "<br/>";
  this.mErrorLayout.FindControlByID(242481059).SetText(b);
  simcity.gEventManager.AddEventListener(simcity.gEventTypes.CLICK, 235661847, simcity.ErrorWindowClosed);
  simcity.gEventManager.AddEventListener(simcity.gEventTypes.CLICK, 235662300,
    simcity.ErrorWindowClosed)
};
simcity.cGlobalUIHandler.prototype.QuitToMainMenu = function () {
  this.mNewspaperUIHandler.Shutdown();
  this.mTicker.Shutdown();
  this.mQuitConfirmationShown = !1;
  scrui.PostGameCommand(scrui.BuildCommand([simcity.kDataQuit]))
};
simcity.cGlobalUIHandler.prototype.InGameErrorHandler = function (a) {
  var b = !1;
  if (a.messageType === scrui.cErrorManager.kMsgType_ErrorData) {
    if (a.dialogType === scrui.kErrorDialogType_Alert && (this.mErrorAlertsUIHandler.ShowAlertFromErrorData(a), b = !0), a.code === scrui.kErrorCode_RegionLoadFailed)
      b = !0, simcity.gLoadingScreenUIHandler.Hide(), this.QuitToMainMenu()
  } else if (a.messageType === scrui.cErrorManager.kMsgType_UserResponse)
    switch (a.errorCode) {
    case scrui.kErrorCode_ForceQuitToMainMenu:
      a.response === scrui.kErrorResponse_Quit &&
      (simcity.gNetworkStateManager.IsConnected() || this.QuitToMainMenu());
      break;
    case scrui.kErrorCode_DlcMustMigrateGame:
      gUIManager.UnregisterAllUIHandlers(),
      simcity.gLoadingScreenUIHandler.Initialize(!0),
      simcity.gLoadingScreenUIHandler.Show(),
      a = simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData,
      simcity.gLoadingScreenUIHandler.SetRegionByKey(a.mRegionTypeName),
      simcity.gLoadingScreenUIHandler.SetCityName(a.mPlayingBox.name)
    }
  return b
};
simcity.cGlobalUIHandler.prototype.OpenSystemMessageSocketCallback = function (a) {
  a && a.message && simcity.gGlobalUIHandler.mErrorAlertsUIHandler.AddAlert(a.message)
};
simcity.cGlobalUIHandler.prototype.OnQuitConfirmationCancel = function () {
  this.mQuitConfirmationShown = !1
};
simcity.IsSandboxRegion = function () {
  return simcity.gGlobalUIHandler.mIsServerSandbox
};
simcity.IsOptionMenuVisible = function () {
  var a = !1,
  b = gUIManager.FindControlByID(simcity.kWinIDMainMenu);
  b && (a = b.mIsVisible);
  return a
};
simcity.BootstrapUIHandler = function () {
  this.UIHander = scrui.cUIHandler;
  this.UIHander()
};
goog.inherits(simcity.BootstrapUIHandler, scrui.cUIHandler);
simcity.BootstrapUIHandler.prototype.Init = function () {
  gUIManager.RegisterUIHandler(this);
  var a = this;
  scrui.RequestGameData(["isLoadingFinalized"], function (b) {
    b[0] && a.InitGlobalUI()
  })
};
simcity.BootstrapUIHandler.prototype.HandleGameEvent = function (a) {
  switch (a) {
  case simcity.kGameMessageGameLoadingFinalized:
    this.InitGlobalUI()
  }
};
simcity.BootstrapUIHandler.prototype.InitGlobalUI = function () {
  simcity.gGlobalUIHandler = new simcity.cGlobalUIHandler;
  simcity.gGlobalUIHandler.Init();
  gUIManager.UnregisterUIHandler(this)
};
simcity.Initialize = function () {
  scrui.Initialize("gameconfig.json");
  simcity.InitializeTextUtilities();
  simcity.DynamicScriptLoader.LoadAllScripts(function () {
    (new simcity.BootstrapUIHandler).Init();
    gUIManager.EnableGameEventProcessing()
  })
};
simcity.SetBudgetAlertLevel = function (a) {
  var b = gUIManager.FindControlByID(simcity.kWinBudgetAlert),
  c = gUIManager.FindControlByID(simcity.kWinBudgetCaution);
  a === simcity.kAlertLevelCritical ? (b.SetVisibility(!0), c.SetVisibility(!1)) : a === simcity.kAlertLevelCaution || a === simcity.kAlertLevelAlert ? (b.SetVisibility(!1), c.SetVisibility(!0)) : (b.SetVisibility(!1), c.SetVisibility(!1))
};
simcity.SetPopulationAlertLevel = function (a) {
  var b = gUIManager.FindControlByID(simcity.kWinPopulationAlert),
  c = gUIManager.FindControlByID(simcity.kWinPopulationCaution);
  a === simcity.kAlertLevelCritical ? (b.SetVisibility(!0), c.SetVisibility(!1)) : a === simcity.kAlertLevelCaution || a === simcity.kAlertLevelAlert ? (b.SetVisibility(!1), c.SetVisibility(!0)) : (b.SetVisibility(!1), c.SetVisibility(!1))
};
simcity.ForcePuckUIState = function (a) {
  var b = gUIManager.FindControlByID(simcity.kBtnRegionCamera),
  c = simcity.gGlobalUIHandler.mReturnToCityButton;
  b && c && ("region" == a ? (b.SetSelected(!0), c.SetSelected(!1)) : (b.SetSelected(!1), c.SetSelected(!0)))
};
simcity.IsPlayingBoxBroken = function () {
  if (simcity.gGlobalUIHandler.mRegionViewUIHandler && simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData.mPlayingBox.uid) {
    var a = simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData.mBoxes[simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData.mPlayingBox.uid].status;
    return "BROKEN" === a || "CHEAT" === a
  }
  return !1
};
simcity.DebugMarkBoxBroken = function () {
  simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData.mBoxes[simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData.mPlayingBox.uid].status = "BROKEN"
};
simcity.DebugMarkBoxOffensive = function (a) {
  simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData.mBoxes[a].offensive = "true"
};
simcity.RegionViewItem = {};
simcity.kRegionTradeOutgoingTokenPanelID = 239646136;
simcity.kRegionTradeIncomingTokenPanelID = 239644807;
simcity.kViewItemRefreshTime = 6E3 - 2 * Math.floor(1E3 * Math.random());
simcity.kUnclaimedCityPanelIDs = {
  claimCityButton : 235820702,
  UNOWNED_CITY_NAME : 227712046,
  UNOWNED_CITY_DESCRIPTION : 230311473,
  UNOWNED_CITY_POPULATION : 233315180,
  UNOWNED_CITY_BACKDROP : 244634643,
  CLAIM_CITY_BUTTON : 227712054,
  INVITE_FRIENDS_BUTTON : 232122122,
  PERCENT_BUILDABLE : 244655554,
  RAIL_ICON : 244655183,
  SHIP_ICON : 244655178,
  RATE_RESIDENTIAL : 244655514,
  RATE_WIND : 244655517,
  RATE_WATER : 244655521,
  RATE_OIL : 244655524,
  RATE_ORE : 244655526,
  RATE_COAL : 244655530
};
simcity.kViewStates = {
  claimedGreatWork : 246399310,
  claimedCity : 246399325,
  unclaimedGreatWork : 246399319,
  unclaimedCity : 246399331
};
simcity.kRegionViewGWStates = {
  unselected : 241892870,
  permit : 241892867,
  constructionP1 : 241893046,
  constructionP2 : 241893049,
  operating : 241892879
};
simcity.kRegionViewItemControlIDs = {
  selectedState : 246489309,
  hoverState : 246389670,
  defaultState : 232731904,
  cityNameFieldDefault : 225802565,
  cityNameFieldHover : 246552109,
  cityNameFieldSelected : 246551998,
  cityDescField : 246391408,
  lastPlayedText : 246462054,
  alertSelectedText : 246635742,
  selectedAlertIconsContainer : 247076019,
  avatarContainerDefault : 247752254,
  avatarContainerHover : 247153112,
  hoverAlertIconsContainer : 247760085,
  alertHoverText : 247669308,
  avatarContainerSelected : 243447774,
  gwSubPanelContainer : 241992393,
  zoomButton : 250094029,
  citySpecHover : 252857463,
  citySpecSelected : 252857506,
  closeButton : 252071697,
  inviteButton : 246461213,
  unclaimedDefaultIcon : 255007960,
  unclaimedHoverIcon : 255007968,
  unclaimedSelectedIcon : 255008020
};
simcity.kRegionViewItemMouseSelectionStates = {
  unselected : 246488981,
  mouseOver : 246488993,
  selected : 246489E3
};
simcity.kRegionViewItemImagePaths = {
  REGION_WALL_ACTIVE : "GameEntry/icon-chat.png",
  REGION_WALL_INACTIVE : "GameEntry/leftnav-icon-chat.png",
  CLAIMED_USER_AVATAR_FRAME : "GameEntry/avatarFrameOn.png",
  RAIL_ON : "GameEntry/Play/CityResources-Icon-Rail-On.png",
  RAIL_OFF : "GameEntry/Play/CityResources-Icon-Rail-Off.png",
  SHIP_ON : "GameEntry/Play/CityResources-Icon-Ship-On.png",
  SHIP_OFF : "GameEntry/Play/CityResources-Icon-Ship-Off.png"
};
simcity.cRegionViewItem = function (a) {
  this.UIHandler = scrui.cUIHandler;
  this.UIHandler();
  this.mRefreshTimer = 0;
  this.mRootLayout = a.mLayout;
  this.mUnitRef = a.mUnitRef;
  this.mRegionalBoxID = a.mRegionalBoxID;
  this.mUnitID = a.mUnitID || 0;
  this.mDataBinding = simcity.RegionViewGeneric;
  this.mUnderConstruction = a.mUnderConstruction || !1;
  this.mIsSelected = a.mIsSelected || !1;
  this.mViewItemType = this.mViewUnitType = this.mMouseSelectionState = this.mCurrentState = null;
  this.mIsDataLoaded = !1;
  this.mDepthIndex = -1;
  this.mBoxApiData = {
    serverBoxID : 0,
    regionalBoxID : 0,
    boxName : "",
    creatorID : 0,
    isClaimed : !1,
    unitRef : "0,0"
  };
  this.mControlCache = {
    selectedStateLayer : null,
    hoverStateLayer : null,
    defaultStateLayer : null,
    cityNameFieldDefault : null,
    cityNameFieldHover : null,
    cityNameFieldSelected : null,
    cityDescField : null,
    lastPlayedText : null,
    alertSelectedText : null,
    selectedAlertIconsContainer : null,
    avatarContainerDefault : null,
    avatarContainerSelected : null,
    hoverAlertIconsContainer : null,
    alertHoverText : null,
    avatarContainerHover : null,
    citySpecHover : null,
    citySpecSelected : null,
    subPanelContainer : null,
    unclaimedDefaultIcon : null,
    unclaimedHoverIcon : null,
    unclaimedSelectedIcon : null
  };
  this.mCacheDirty = !0;
  this.mDataCache = {
    boxName : "",
    boxCreator : {},
    boxType : null
  };
  this.mRefLayoutsTargetControl = null;
  this.mRefLayoutsTargetControlID = 246399331;
  this.mDefaultData = this.mActiveLayout = null;
  this.mViewItemLayers = {
    unclaimedCity : "Layouts/Region/RegionBoxUnclaimedNamePlate.js",
    claimedCity : "Layouts/Region/RegionBoxNamePlate.js",
    unclaimedGW : "Layouts/Region/RegionGreatWorksUnclaimedNamePlate.js",
    claimedGW : "Layouts/Region/RegionGreatWorksClaimedNamePlate.js"
  }
};
var kAbandonedCityIcon = "Region_CityAbandoned.png";
goog.inherits(simcity.cRegionViewItem, scrui.cUIHandler);
simcity.cRegionViewItem.prototype.Init = function () {
  this.mRefLayoutsTargetControl = this.mRootLayout.FindControlByID(this.mRefLayoutsTargetControlID);
  this.PreloadData()
};
simcity.cRegionViewItem.prototype.SetMouseSelectionState = function (a) {
  null !== this.mControlCache.hoverStateLayer && (this.mControlCache.hoverStateLayer.SetVisibility(a == simcity.kRegionViewItemMouseSelectionStates.mouseOver), this.mControlCache.defaultStateLayer.SetVisibility(a == simcity.kRegionViewItemMouseSelectionStates.unselected), this.mControlCache.selectedStateLayer.SetVisibility(a == simcity.kRegionViewItemMouseSelectionStates.selected), this.mMouseSelectionState = a, this.mMouseSelectionState === simcity.kRegionViewItemMouseSelectionStates.selected ?
    (this.mIsSelected = !0, simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData.mViewingBox = simcity.gGlobalUIHandler.mAPIServerDataUIHandler.GetBoxByBoxUID(this.mRegionalBoxID)) : (this.mIsSelected = !1, simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData.mViewingBox = null))
};
simcity.cRegionViewItem.prototype.PreloadData = function () {
  function a() {
    setTimeout(function () {
      b.PreloadData()
    }, 500)
  }
  var b = this;
  if (this.mCacheDirty) {
    var c = simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData.mRegionUnitsLookup[this.mRegionalBoxID];
    if (c && this.mRegionalBoxID && simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData.mCityDefaultData)
      this.mCacheDirty = !1, this.mViewItemType = c.type, this.mDefaultData = simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData.mCityDefaultData.cities[this.mRegionalBoxID];
    else
      return a()
  }
  if ("city" == this.mViewItemType)
    if (this.mIsDataLoaded)
      this.SetAndCacheViewItemState(simcity.kRegionViewItemControlIDs.defaultState);
    else
      return this.LoadBoxAPIData(), a();
  else
    "greatwork" == this.mViewItemType && (this.mIsDataLoaded = !0, this.SetAndCacheViewItemState(simcity.kRegionViewItemControlIDs.defaultState), this.UpdateView_GreatWork())
};
simcity.cRegionViewItem.prototype.Update = scrui.Client_ProfZone("RegionViewItemUpdate", function (a) {
    var b = this;
    this.mRefreshTimer -= a;
    0 >= this.mRefreshTimer && this.mIsDataLoaded && (this.mRefreshTimer = simcity.kViewItemRefreshTime, this.mActiveLayout && (a = [scrui.BuildRequestQuery([simcity.kDataUnits, this.mUnitRef, simcity.kDataPropKey])], scrui.RequestGameData(a, function (a) {
          a[0] && a[0].instance && (b.mUnitID = a[0].instance, b.mDataBinding.update(b), "city" == b.mViewItemType ? b.UpdateView_City() : "greatwork" == b.mViewItemType &&
            b.UpdateView_GreatWork(b.mRegionalBoxID))
        })))
  });
simcity.cRegionViewItem.prototype.SetAndCacheViewItemState = function (a) {
  if (null == this.mCurrentState || a && a !== this.mCurrentState)
    this.mRefLayoutsTargetControl.DestroyChildren(), "city" == this.mViewItemType && (this.mActiveLayout = this.mBoxApiData.isClaimed ? gUIManager.LoadAndCacheLayout(this.mViewItemLayers.claimedCity, this.mRefLayoutsTargetControl) : gUIManager.LoadAndCacheLayout(this.mViewItemLayers.unclaimedCity, this.mRefLayoutsTargetControl)), "greatwork" == this.mViewItemType && (this.mActiveLayout = gUIManager.LoadAndCacheLayout(this.mViewItemLayers.unclaimedGW,
          this.mRefLayoutsTargetControl)), this.mControlCache.selectedStateLayer = this.mActiveLayout.FindControlByID(simcity.kRegionViewItemControlIDs.selectedState), this.mControlCache.hoverStateLayer = this.mActiveLayout.FindControlByID(simcity.kRegionViewItemControlIDs.hoverState), this.mControlCache.defaultStateLayer = this.mActiveLayout.FindControlByID(simcity.kRegionViewItemControlIDs.defaultState), this.mControlCache.cityNameFieldDefault = this.mActiveLayout.FindControlByID(simcity.kRegionViewItemControlIDs.cityNameFieldDefault),
    this.mControlCache.cityNameFieldSelected = this.mActiveLayout.FindControlByID(simcity.kRegionViewItemControlIDs.cityNameFieldSelected), this.mControlCache.cityNameFieldHover = this.mActiveLayout.FindControlByID(simcity.kRegionViewItemControlIDs.cityNameFieldHover), this.mControlCache.lastPlayedText = this.mActiveLayout.FindControlByID(simcity.kRegionViewItemControlIDs.lastPlayedText), this.mControlCache.alertSelectedText = this.mActiveLayout.FindControlByID(simcity.kRegionViewItemControlIDs.alertSelectedText),
    this.mControlCache.selectedAlertIconsContainer = this.mActiveLayout.FindControlByID(simcity.kRegionViewItemControlIDs.selectedAlertIconsContainer), this.mControlCache.hoverAlertIconsContainer = this.mActiveLayout.FindControlByID(simcity.kRegionViewItemControlIDs.hoverAlertIconsContainer), this.mControlCache.alertHoverText = this.mActiveLayout.FindControlByID(simcity.kRegionViewItemControlIDs.alertHoverText), this.mControlCache.avatarContainerDefault = this.mActiveLayout.FindControlByID(simcity.kRegionViewItemControlIDs.avatarContainerDefault),
    this.mControlCache.avatarContainerSelected = this.mActiveLayout.FindControlByID(simcity.kRegionViewItemControlIDs.avatarContainerSelected), this.mControlCache.avatarContainerHover = this.mActiveLayout.FindControlByID(simcity.kRegionViewItemControlIDs.avatarContainerHover), this.mControlCache.zoomButton = this.mActiveLayout.FindControlByID(simcity.kRegionViewItemControlIDs.zoomButton), this.mControlCache.closeButton = this.mActiveLayout.FindControlByID(simcity.kRegionViewItemControlIDs.closeButton), this.mControlCache.citySpecHover =
      this.mActiveLayout.FindControlByID(simcity.kRegionViewItemControlIDs.citySpecHover), this.mControlCache.citySpecSelected = this.mActiveLayout.FindControlByID(simcity.kRegionViewItemControlIDs.citySpecSelected), this.mControlCache.selectedAlertBackground = this.mActiveLayout.FindControlByID(253983693), this.mControlCache.hoverAlertBackground = this.mActiveLayout.FindControlByID(253983845), this.mControlCache.unclaimedDefaultIcon = this.mActiveLayout.FindControlByID(simcity.kRegionViewItemControlIDs.unclaimedDefaultIcon),
    this.mControlCache.unclaimedHoverIcon = this.mActiveLayout.FindControlByID(simcity.kRegionViewItemControlIDs.unclaimedHoverIcon), this.mControlCache.unclaimedSelectedIcon = this.mActiveLayout.FindControlByID(simcity.kRegionViewItemControlIDs.unclaimedSelectedIcon), "greatwork" == this.mViewItemType && (this.mControlCache.subPanelContainer = this.mActiveLayout.FindControlByID(simcity.kRegionViewItemControlIDs.gwSubPanelContainer)), this.mCurrentState = a
};
simcity.cRegionViewItem.prototype.LoadBoxAPIData = function () {
  var a = simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData.mBoxes[this.mRegionalBoxID];
  if (this.mBoxData = a)
    this.mBoxApiData = {
      serverBoxID : a.id,
      regionalBoxID : a.uid,
      boxName : a.name,
      creatorID : a.creatorId,
      isClaimed : "true" == a.isClaimed ? !0 : !1,
      unitRef : a.unitRef,
      status : a.status,
      offensive : a.offensive
    },
  this.mIsDataLoaded = !0
};
simcity.cRegionViewItem.prototype.UpdateView_City = function () {
  this.LoadBoxAPIData();
  if (this.mBoxApiData.isClaimed) {
    var a = this.mBoxApiData.boxName;
    null !== this.mControlCache.cityNameFieldDefault && (this.mControlCache.cityNameFieldDefault.SetRawText(a || " "), this.mControlCache.cityNameFieldSelected.SetRawText(a || " "), this.mControlCache.cityNameFieldHover.SetRawText(a || " "), this.mActiveLayout.FindControlByID(158166954) || (a = this.mCurrentState, this.mCurrentState = null, this.SetAndCacheViewItemState(a)), "ACTIVE" !==
      this.mBoxApiData.status ? (this.mActiveLayout.FindControlByID(252426255).SetVisibility(!0), this.mActiveLayout.FindControlByID(255199553).SetVisibility(!1)) : (this.mBoxApiData.creatorID == simcity.gGlobalUIHandler.mUserId && this.mActiveLayout.FindControlByID(246462065).SetLocaleText(new scrui.cLocaleString("RegionView.json", "0x0e9d1b75", "Load")), this.mBoxApiData.regionalBoxID == simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData.mPlayingBox.uid && this.mActiveLayout.FindControlByID(235774183).SetVisibility(!1),
        "true" == this.mBoxApiData.offensive && this.mBoxApiData.creatorID != simcity.gGlobalUIHandler.mUserId && this.mActiveLayout.FindControlByID(235774183).SetVisibility(!1)), this.mBoxApiData.regionalBoxID && (this.mActiveLayout.FindControlByID(158166954) && simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData.mCityTradeData[this.mBoxApiData.regionalBoxID].localData) && (this.mActiveLayout.FindControlByID(158166954).SetTextFromNumber(simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData.mCityTradeData[this.mBoxApiData.regionalBoxID].localData.data.budget),
        this.mActiveLayout.FindControlByID(158773667).SetTextFromNumber(simcity.GetFudgedPopulation(simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData.mCityTradeData[this.mBoxApiData.regionalBoxID].localData.data.population))), (this.mBoxApiData.creatorID || simcity.IsMainTutorialInProgress()) && (simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData.mPlayers[this.mBoxApiData.creatorID] && this.mActiveLayout.FindControlByID(230895427)) && this.mActiveLayout.FindControlByID(230895427).SetRawText(simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData.mPlayers[this.mBoxApiData.creatorID].screenName),
      (a = simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData.mBoxes[this.mBoxApiData.regionalBoxID]) ? (a = simcity.gUIToolbox.PrettyDateUtcMs(a.updated), this.mControlCache.lastPlayedText.SetRawText(a)) : this.mControlCache.lastPlayedText.SetRawText(""), this.HandleAlertTextAndIcons(), this.SetupAvatar(this.mControlCache.avatarContainerDefault, this.mBoxApiData, "default"), this.SetupAvatar(this.mControlCache.avatarContainerSelected, this.mBoxApiData, "selected"), this.SetupAvatar(this.mControlCache.avatarContainerHover,
        this.mBoxApiData, "hover"), a = simcity.gGlobalUIHandler.mBoundaryUIHandler.GetCitySpecialization(Number(this.mBoxApiData.regionalBoxID)), this.mControlCache.citySpecHover.SetWindowImage(simcity.cBoundaryUIHandler.kCitySpecializationIcons[a]), this.mControlCache.citySpecSelected.SetWindowImage(simcity.cBoundaryUIHandler.kCitySpecializationIcons[a]))
  } else if (this.mRegionalBoxID || !this.mRegionData.mCityDefaultData) {
    var b = simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData.mCityDefaultData.cities[this.mRegionalBoxID];
    b && this.mActiveLayout && (a = scrui.ParseLocaleString(b.cityName), b = scrui.ParseLocaleString(b.cityDescription), simcity.gGlobalUIHandler.mIsDemo && 1026 === this.mRegionalBoxID && this.mActiveLayout.FindControlByID(simcity.kUnclaimedCityPanelIDs.claimCityButton).SetVisibility(!1), null !== this.mControlCache.cityNameFieldDefault && (this.mControlCache.cityNameFieldDefault.SetLocaleText(a), this.mControlCache.cityNameFieldSelected.SetLocaleText(a), this.mControlCache.cityNameFieldHover.SetLocaleText(a), this.IsBoxAbandoned(this.mRegionalBoxID) &&
        (this.mControlCache.unclaimedDefaultIcon.SetWindowImage(kAbandonedCityIcon), this.mControlCache.unclaimedHoverIcon.SetWindowImage(kAbandonedCityIcon), this.mControlCache.unclaimedSelectedIcon.SetWindowImage(kAbandonedCityIcon)), (a = this.mActiveLayout.FindControlByID(241277033)) && a.SetLocaleText(b)), this.ShowRatingsOverlay())
  }
};
simcity.cRegionViewItem.prototype.UpdateView_GreatWork = function (a) {
  this.HandleGreatWorksRegionViewItemText(a)
};
simcity.cRegionViewItem.prototype.HandleAlertTextAndIcons = function () {
  this.DetermineAlertText();
  this.mBoxApiData.regionalBoxID != simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData.mPlayingBox.uid && (simcity.gGlobalUIHandler.mAvatarManagerHandler.AddAlertIcons(this.mBoxApiData.regionalBoxID, this.mControlCache.selectedAlertIconsContainer, this.mControlCache.selectedAlertBackground), simcity.gGlobalUIHandler.mAvatarManagerHandler.AddAlertIcons(this.mBoxApiData.regionalBoxID, this.mControlCache.hoverAlertIconsContainer,
      this.mControlCache.hoverAlertBackground))
};
simcity.cRegionViewItem.prototype.DetermineAlertText = function () {
  var a = this.mBoxApiData.regionalBoxID,
  b = this.mControlCache.alertSelectedText,
  c = this.mControlCache.alertHoverText;
  b.SetTextColor("rgb(0,150,0)");
  c.SetTextColor("rgb(0,150,0)");
  if (a != simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData.mPlayingBox.uid) {
    b.SetLocaleText(new scrui.cLocaleString("RegionView.json", "0x0ef414f0", "Doing O.K."));
    c.SetLocaleText(new scrui.cLocaleString("RegionView.json", "0x0ef414f0", "Doing O.K."));
    for (var d = {
        greatworkDatabinding : simcity.kRegionDataLayers.greatwork,
        utilDatabinding : simcity.kRegionDataLayers.utilities,
        servicesDatabinding : simcity.kRegionDataLayers.services,
        commuterDatabinding : simcity.kRegionDataLayers.commuters,
        giftingDatabinding : simcity.kRegionDataLayers.gifting,
        transportDatabinding : simcity.kRegionDataLayers.transport
      }, e = Object.keys(d), f = 0, g = e.length; f < g; f++)
      for (var h = d[e[f]], i = h.layers.length, j = 0; j < i; j++) {
        var k = h.layers[j];
        if ("greatworkDatabinding" != e[f] && (k = simcity.gGlobalUIHandler.mAvatarManagerHandler.GetNeedText(a,
                k.key))) {
          b.SetTextColor("rgb(200,0,0)");
          c.SetTextColor("rgb(200,0,0)");
          b.SetLocaleText(k);
          c.SetLocaleText(k);
          return
        }
      }
  } else
    b.SetLocaleText(new scrui.cLocaleString("RegionView.json", "0x0e1258ef", "Working")), c.SetLocaleText(new scrui.cLocaleString("RegionView.json", "0x0e1258ef", "Working"))
};
simcity.cRegionViewItem.prototype.SetupAvatar = function (a, b, c) {
  a = {
    playerID : b.creatorID,
    layoutInfo : a,
    isBoxClaimed : b.isClaimed,
    isMyBox : simcity.gGlobalUIHandler.mRegionViewUIHandler.IsOwnCity(b.regionalBoxID),
    isCurrentBox : !1,
    showAlerts : !1,
    group : c + "RegionViewItem" + b.regionalBoxID,
    serverBoxID : b.serverBoxID,
    boxID : b.regionalBoxID
  };
  simcity.gGlobalUIHandler.mAvatarManagerHandler.AddSubscription(a)
};
simcity.cRegionViewItem.prototype.ShowRatingsOverlay = function () {
  if (this.mActiveLayout) {
    var a = this.mActiveLayout.FindControlByID(250083618),
    b = simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData.mCityDefaultData.cities[this.mRegionalBoxID];
    simcity.gUIToolbox.ToBoolean(b.rail) ? a.FindControlByID(simcity.kUnclaimedCityPanelIDs.RAIL_ICON).SetWindowImage(simcity.kRegionViewItemImagePaths.RAIL_ON) : a.FindControlByID(simcity.kUnclaimedCityPanelIDs.RAIL_ICON).SetWindowImage(simcity.kRegionViewItemImagePaths.RAIL_OFF);
    simcity.gUIToolbox.ToBoolean(b.shipping) ? a.FindControlByID(simcity.kUnclaimedCityPanelIDs.SHIP_ICON).SetWindowImage(simcity.kRegionViewItemImagePaths.SHIP_ON) : a.FindControlByID(simcity.kUnclaimedCityPanelIDs.SHIP_ICON).SetWindowImage(simcity.kRegionViewItemImagePaths.SHIP_OFF);
    this.SetRatingsImage(b.residentialDesirability, a, "RATE_RESIDENTIAL");
    this.SetRatingsImage(b.wind, a, "RATE_WIND");
    this.SetRatingsImage(b.water, a, "RATE_WATER");
    this.SetRatingsImage(b.crudeOil, a, "RATE_OIL");
    this.SetRatingsImage(b.rawOre,
      a, "RATE_ORE");
    this.SetRatingsImage(b.coal, a, "RATE_COAL")
  }
};
simcity.cRegionViewItem.prototype.SetRatingsImage = function (a, b, c) {
  var d = null;
  if (a && b && c) {
    switch (a) {
    case "3":
      d = "Graphics/GameEntry/Play/CityResources-Rating-3.png";
      break;
    case "2":
      d = "Graphics/GameEntry/Play/CityResources-Rating-2.png";
      break;
    case "1":
      d = "Graphics/GameEntry/Play/CityResources-Rating-1.png";
      break;
    case "0":
      d = "Graphics/GameEntry/Play/CityResources-Rating-0.png";
      break;
    default:
      d = "Graphics/GameEntry/Play/CityResources-Rating-0.png"
    }
    (a = b.FindControlByID(simcity.kUnclaimedCityPanelIDs[c])) && a.SetWindowImage(d)
  }
};
simcity.cRegionViewItem.prototype.HandleGreatWorksRegionViewItemText = function (a) {
  var b = this.mControlCache.cityNameFieldHover,
  c = this.mControlCache.cityNameFieldSelected,
  d = this.mActiveLayout.FindControlByID(250357829),
  e = this.mActiveLayout.FindControlByID(250352716);
  d.SetVisibility(!0);
  e.SetVisibility(!0);
  var f = simcity.gGlobalUIHandler.mRegionViewUIHandler.GetConnectedGWID();
  if (!f || a != f)
    a != f && (d.SetVisibility(!1), e.SetVisibility(!1), b.SetLocaleText(new scrui.cLocaleString("RegionView.json", "0x0f07bfe5",
          "Great Works")), c.SetLocaleText(new scrui.cLocaleString("RegionView.json", "0x0f07bfe5", "Great Works")));
  else if (f = simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionViewItems[f].mUnitRef, a = simcity.gGlobalUIHandler.mRegionViewUIHandler.mGWLowerPanelUI.GetPhaseDetails()) {
    var g = scrui.LocaleStringFromLocaleProperty(a.name);
    b.SetLocaleText(g);
    c.SetLocaleText(g);
    e && d && (a.isSelected && 0 < a.isSelected.amount || a.greatWorksOperationalStage ? null !== a.greatWorksOperationalStage ? a.isOperating ? (e.SetLocaleText(new scrui.cLocaleString("RegionView.json",
            "0x0e9d1acf", "operating")), d.SetLocaleText(new scrui.cLocaleString("RegionView.json", "0x0e9d1acf", "operating"))) : null != a.enoughWorkers && 0 === a.enoughWorkers ? (e.SetLocaleText(new scrui.cLocaleString("RegionView.json", "0x0ef15aa6", "needs workers")), d.SetLocaleText(new scrui.cLocaleString("RegionView.json", "0x0ef15aa6", "needs workers"))) : null != a.powerOperational && 0 === a.powerOperational.amount ? (e.SetLocaleText(new scrui.cLocaleString("RegionView.json", "0x0e125921", "needs power")), d.SetLocaleText(new scrui.cLocaleString("RegionView.json",
            "0x0e125921", "needs power"))) : null != a.waterOperational && 0 === a.waterOperational.amount ? (e.SetLocaleText(new scrui.cLocaleString("RegionView.json", "0x0e212f83", "needs water")), d.SetLocaleText(new scrui.cLocaleString("RegionView.json", "0x0e212f83", "needs water"))) : null != a.closedByMission && 1 == a.closedByMission.amount && (e.SetLocaleText(new scrui.cLocaleString("RegionView.json", "0x0ed1aac3", "stalled")), d.SetLocaleText(new scrui.cLocaleString("RegionView.json", "0x0ed1aac3", "stalled"))) : a.constructionStage ?
      (b = new scrui.cLocaleString("RegionView.json", "0x0e9d184f", "Phase " + a.constructionStage.amount + " of " + a.constructionStage.capacity), c = {
          amount : a.constructionStage.amount,
          total : a.constructionStage.capacity
        }, e.SetLocaleText(b), e.UpdateLocaleText(c), d.SetLocaleText(b), d.UpdateLocaleText(c)) : (e.SetLocaleText(new scrui.cLocaleString("RegionView.json", "0x0ed1a9ab", "waiting on permit")), d.SetLocaleText(new scrui.cLocaleString("RegionView.json", "0x0ed1a9ab", "waiting on permit"))) : this.mUnitRef == f ? (e.SetLocaleText(new scrui.cLocaleString("RegionView.json",
            "0x0eb1e492", "Build a great work")), d.SetLocaleText(new scrui.cLocaleString("RegionView.json", "0x0eb1e492", "Build a great work"))) : (e.SetLocaleText(new scrui.cLocaleString("RegionView.json", "0x0f0fa650", "GW outside your cluster")), d.SetLocaleText(new scrui.cLocaleString("RegionView.json", "0x0f0fa650", "GW outside your cluster"))))
  }
};
simcity.cRegionViewItem.prototype.IsBoxAbandoned = function (a) {
  return (a = simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData.mBoxes[a]) ? "true" == a.abandoned : !1
};
simcity.RegionViewUI = {};
simcity.kBtnReturnToCity = 218562830;
simcity.kRegionView_CityNameText = 225802565;
simcity.kRegionView_UserNameText = 226095096;
simcity.kRegionView_AvatarPortrait = 226095099;
simcity.kRegionView_BoxNamePlate = 231598340;
simcity.kRegionView_UnclaimedBoxNamePlate = 232731904;
simcity.kRegionView_ViewCityButton = 250094029;
simcity.kRegionView_BtnCloseViewItem = 252071697;
simcity.kRegionView_Region2DMapContainer = 234715398;
simcity.kRegionView_DataLayerButton = 243622211;
simcity.kRegionView_DataLayerButtonOn = 243623003;
simcity.kRegionView_DataLayerButtonIconNormal = 164725874;
simcity.kRegionView_DataLayerButtonIconNormalOn = 227699592;
simcity.kRegionView_DataLayerButtonIconOpportunity = 215602420;
simcity.kRegionView_DataLayerWindowNeedExistsAnim = 245953381;
simcity.kRegionView_DataLayerButtonIconCritical = 215602425;
simcity.kRegionView_DataLayerButtonAnimTradeOpportunity = 219781060;
simcity.kRegionView_AvatarContainerWindow = 243442179;
simcity.kRegionView_AvatarContainerLowerWindow = 243447774;
simcity.kRegionView_DataLayerToggleOffButton = 231259684;
simcity.kRegionView_DataLayerWeathHideButtonAnim = 245429781;
simcity.kRegionView_RegionalBudgetText = 225479831;
simcity.kRegionView_RegionalPopulationText = 225479834;
simcity.kRegionView_GreatWorksChooserParent = 227633383;
simcity.kRegionView_GreatWorksResourcesContainer = 231802349;
simcity.kRegionView_GreatWorksChooserContainer = 227633381;
simcity.kRegionView_GreatWorksChooserCloseButton = 227641527;
simcity.kRegionView_GreatWorksChooserButton = 241884925;
simcity.kRegionView_GreatWorksResourceText = 227703106;
simcity.kRegionView_GreatWorksResourceProgressBar = 227703110;
simcity.kRegionView_GreatWorksResourceHitBox = 227968109;
simcity.kRegionView_GreatWorksUnclaimedNameplate = 231587612;
simcity.kRegionView_GreatWorksClaimedNameplate = 231606597;
simcity.kRegionview_GreatWroksUILowerContainer = 248180702;
simcity.kRegionView_BoxNameTextField = 225802565;
simcity.kRegionView_GreatWorkNameField = 231796660;
simcity.kRegionView_ConstructionStatusText = 231796651;
simcity.kRegionView_ConstructionStatusTextRed = 232538548;
simcity.kRegionView_LaunchSatelliteButton = 234650417;
simcity.kRegionView_LaunchSatelliteOKButton = 234651022;
simcity.kRegionView_BuildSatelliteButton = 241718977;
simcity.kRegionView_HomeBoxCityName = 243527088;
simcity.kRegionView_HomeBoxAvatar = 243530043;
simcity.kRegionView_HomeBoxCitySpecialization = 244132854;
simcity.kRegionView_HomeBoxBudget = 244132655;
simcity.kRegionView_HomeBoxPopulation = 244132657;
simcity.kRegionView_HomeBoxButton = 244559969;
simcity.kRegionView_LegendCloseButton = 246810102;
simcity.kRegionView_GreatWorksPrerequisiteParent = 227885861;
simcity.kRegionView_GreatWorksPrerequisiteContainer = 227886156;
simcity.kRegionView_GreatWorksPrerequisiteText = 227911178;
simcity.kRegionView_IntroductionDialogButton = 228252202;
simcity.kRegionView_LowerPanelSelfCity = 235061844;
simcity.kRegionView_LowerPanelFriendCity = 235059129;
simcity.kRegionView_LowerPanelUnclaimedCity = 235820907;
simcity.kRegionView_LowerPanelGreatWork = 235059279;
simcity.kLowerPanelStates = [simcity.kRegionView_LowerPanelSelfCity, simcity.kRegionView_LowerPanelFriendCity, simcity.kRegionView_LowerPanelUnclaimedCity, simcity.kRegionView_LowerPanelGreatWork];
simcity.kRegionView_LowerPanelCloseButton = 250601676;
simcity.kRegionView_LowerPanelIDs = {
  mCityPanels : {
    mCityNameText : 230894814,
    mCityNameDesc : 241277033,
    mCreatorNameText : 230895427,
    mAvatarWindow : 231332822,
    mImportingText : 236033545,
    mExportingText : 236033486,
    mBudgetText : 158166954,
    mPopulationText : 158773667
  }
};
simcity.kRegionView_MapToolTip_Container = 235599011;
simcity.kRegionView_MapToolTip_BoxName = 235599035;
simcity.kRegionView_MapToolTip_PlayerName = 235599038;
simcity.kRegionView_MapToolTip_Avatar = 235599032;
simcity.kRegionView_ContextPanelAnim = 236380019;
simcity.kRegionView_ContextPanelContainer = 236383413;
simcity.kGWCompleteOKButton = 231523245;
simcity.kGWPostCompleteOKButton = 232626346;
simcity.kWinLegendContainer = 235169418;
simcity.kWinTradeUI_ImportIconsContainer = 236015426;
simcity.kWinTradeUI_ExportIconsContainer = 236015423;
simcity.kWinTradeUI_VisitedTodayText = 232653395;
simcity.kWinTradeUI_LeftTodayText = 232653398;
simcity.kWinTradeUI_ImportingText = 224861873;
simcity.kWinTradeUI_ExportingText = 212592636;
simcity.kWinTradeUI_ImportingIcon = 212592634;
simcity.kWinTradeUI_ExportingIcon = 224855208;
simcity.kWinTradeUI_Tooltip = 243708346;
simcity.kWinTradeUI_IncreaseButton = 224854884;
simcity.kWinTradeUI_DecreaseButton = 224854887;
simcity.kWinTradeUI_DecreaseButton = 224854887;
simcity.kWinTradeUI_ToggleIncomingButton = 225310131;
simcity.kWinTradeUI_ToggleDebugButton = 224872493;
simcity.kWinTradeUI_CheatConnectionButton = 224958037;
simcity.kWinTradeUI_ToggleAdvancedModeButton = 225306938;
simcity.kWinTradeUI_TokenButton = 234973153;
simcity.kWinTradeUI_TokenBackground = 234973154;
simcity.kPropSpaceCenter_N = 4260807725;
simcity.kPropSpaceCenter_4U = 1040446595;
simcity.kPropSpaceCenterSatellite_U = 971803745;
simcity.kPropSpaceCenterSatellite_N = 971803770;
simcity.kPropTrading_MapHandler = 4257293625;
simcity.kTradeTypeNormal = 0;
simcity.kTradeTypePending = 1;
simcity.kTradeTypeBidirectional = 2;
simcity.kTradeTypePendingBidirectional = 3;
simcity.kMissionResources = [simcity.kResourceIDMissionResource1, simcity.kResourceIDMissionResource2, simcity.kResourceIDMissionResource3, simcity.kResourceIDMissionResource4, simcity.kResourceIDMissionResource5, simcity.kResourceIDMissionResource6, simcity.kResourceIDMissionResource7, simcity.kResourceIDMissionResource8];
simcity.kMissionLocalResources = [simcity.kResourceIDLocalMissionResource1, simcity.kResourceIDLocalMissionResource2, simcity.kResourceIDLocalMissionResource3, simcity.kResourceIDLocalMissionResource4, simcity.kResourceIDLocalMissionResource5, simcity.kResourceIDLocalMissionResource6, simcity.kResourceIDLocalMissionResource7, simcity.kResourceIDLocalMissionResource8];
simcity.kReturnToCityCommand = scrui.BuildCommand([simcity.kDataToolMessage, scrui.IDFromName("returntocity")]);
simcity.kRegionViewUpdateTimeMS = 1E3;
simcity.kRegionViewDataUpdateTimeMS = 3E3;
simcity.kRegionViewUpdateTimeInCityMS = 6E4;
simcity.RegionUnit = function (a) {
  return {
    localUnitRef : a.localUnitRef || null,
    regionalUnitRef : a.regionalUnitRef || null,
    type : a.type || null
  }
};
simcity.RegionUnitTypes = {
  CITY : "city",
  GREATWORK : "greatwork"
};
simcity.cRegionViewUIHandler = function () {
  this.UIHandler = scrui.cUIHandler;
  this.UIHandler();
  this.mTimeSinceLastDataUpdate = this.mTimeSinceLastUpdate = 0;
  this.mRegionViewItemsContainerWindow = this.mRootWindow = null;
  this.mRegionViewItems = {};
  this.mSortedItemsList = [];
  this.mSelectedUnitRef = simcity.kInvalidUnitRef;
  this.mSelectedUnitID = 0;
  this.mGWCompleteDialog = this.mIntroductionDialog = this.mHighlightedGreatWorkResource = this.mHighlightedGreatWorkOption = this.mMousedOverRegionViewItem = this.mSelectedRegionViewItem =
    null;
  this.mGWToolTipSelected = !1;
  this.mRegionMapData = this.mRegionMap = this.mLaunchDialog = this.mGWPostCompletionDialog = null;
  this.mViewingTradeUnitRefList = [];
  this.mActiveLowerPanel = this.mLowerPanelState = this.mViewingUnitRef = null;
  this.mCurrTotalPlayers = 0;
  this.allowViewCity = !0;
  this.mContextPanelDataBinding = this.mContextPanelAnim = this.mWinExportIconsContainer = this.mWinImportIconsContainer = null;
  this.mIsContextPanelActive = !1;
  this.mSelectedDataControl = this.mSelectedDataLayerID = this.mCashGiftUI = this.mTradeUI =
    this.mContextPanelObj = this.mContextPanelData = this.mContextPanelContainer = null;
  this.mInitialDataUpdate = this.mTradeUnitsLoaded = this.mGreatWorkDataLoaded = this.mServerDataChanged = this.mShouldUpdateDataLayerContextPanel = !1;
  this.mDataLayerButtonHideAnim = this.mRegionAdvisors = this.mGWLowerUIContainer = this.mRegionalPopulationText = this.mRegionalBudgetText = null;
  this.mLayerButtons = [];
  this.mIsLoadingBox = this.mIsClaimingBox = !1;
  this.mLowerPanels = {
    mPlayingCity : {
      mControl : null,
      mTextCityName : null,
      mTextCreatorName : null,
      mWindowAvatar : null,
      mTextImporting : null,
      mTextExporting : null,
      mTextBudget : null,
      mTextPopulation : null
    },
    mFriendCity : {
      mControl : null,
      mTextCityName : null,
      mTextCreatorName : null,
      mWindowAvatar : null,
      mTextImporting : null,
      mTextExporting : null,
      mTextBudget : null,
      mTextPopulation : null
    },
    mUnclaimedCity : {
      mControl : null,
      mTextCityName : null,
      mTextCityDesc : null
    },
    mGreatWorks : {
      mControl : null
    }
  };
  this.mLowerPanelStateControls = [];
  this.mRegionTradeUnitList = [];
  this.mRegionData = {
    mRegionName : "",
    mRegionTypeName : "",
    mCityDefaultData : null,
    mMapData : {},
    mBoxes : {},
    mPlayers : {},
    mCities : {},
    mPlayingBox : {},
    mViewingBox : {},
    mGreatWorksLocal : {},
    mGreatWorksRegional : {},
    mConnectedUnits : {},
    mConnectedGreatWorkUnitRef : null,
    mRegionUnitsLookup : {},
    mCityTradeData : {},
    mTotals : {
      players : 0,
      cities : 0,
      boxes : 0,
      tradeUnits : 0
    }
  };
  this.mDataLayerButtonSparkles = {};
  this.mResourceUIKeyValidationObj = null;
  this.mRequestedVisualizedDataUIKeys = {};
  this.mChangedVisualizedData = {};
  this.mRequestedTradeDataResourceUIKeys = null;
  this.mInitialTradeDataRequestCompleted = !1
};
goog.inherits(simcity.cRegionViewUIHandler, scrui.cUIHandler);
simcity.cRegionViewUIHandler.DepthSort = function (a, b) {
  return a.mLayout.mTop - b.mLayout.mTop
};
simcity.cRegionViewUIHandler.SetBoxDataFromServer = function (a, b) {
  var c = b.GetBoxByRegionID(a.mRegionalBoxID),
  d = a.mLayout.FindControlByID(simcity.kRegionView_CityNameText);
  simcity.gGlobalUIHandler.mRegionViewUIHandler.ShowRegionMap(simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData.mMapData);
  if (c) {
    var e = c.name || "";
    d.SetRawText(e, !0);
    "true" == c.isClaimed ? (a.mLayout.FindControlByID(simcity.kRegionView_BoxNamePlate).SetVisibility(!0), a.mLayout.FindControlByID(simcity.kRegionView_UnclaimedBoxNamePlate).SetVisibility(!1),
      a.mLayout.FindControlByID(233337247).SetRawText(e), d = a.mLayout.FindControlByID(simcity.kRegionView_AvatarContainerWindow), c = {
        playerID : c.creatorId,
        layoutInfo : d,
        isBoxClaimed : "true",
        isMyBox : simcity.gGlobalUIHandler.mRegionViewUIHandler.IsOwnCity(c.uid),
        isCurrentBox : !1,
        showAlerts : !1,
        group : "regionView",
        specialization : 0,
        serverBoxID : c.id,
        boxID : c.uid
      }, simcity.gGlobalUIHandler.mAvatarManagerHandler.AddSubscription(c), a.pollServer = !1) : (a.mLayout.FindControlByID(simcity.kRegionView_BoxNamePlate).SetVisibility(!1),
      a.mLayout.FindControlByID(simcity.kRegionView_UnclaimedBoxNamePlate).SetVisibility(!0), (c = simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData.mCityDefaultData) && d.SetLocaleText(scrui.ParseLocaleString(c.cities[a.mRegionalBoxID].cityName)))
  } else
    a.mLayout.FindControlByID(simcity.kRegionView_BoxNamePlate).SetVisibility(!1), a.mLayout.FindControlByID(simcity.kRegionView_UnclaimedBoxNamePlate).SetVisibility(!0), (c = simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData.mCityDefaultData) && d.SetLocaleText(scrui.ParseLocaleString(c.cities[a.mRegionalBoxID].cityName))
};
simcity.cRegionViewUIHandler.prototype.Update = scrui.Client_ProfZone("cRegionViewUIHandler.Update", function (a) {
    this.UpdateData(a);
    this.UpdateVisuals(a)
  });
simcity.cRegionViewUIHandler.prototype.UpdateData = scrui.Client_ProfZone("cRegionViewUIHandler.UpdateData", function (a) {
    this.mTimeSinceLastDataUpdate += a;
    var b = this,
    a = this.IsVisible() ? simcity.kRegionViewDataUpdateTimeMS : simcity.kRegionViewUpdateTimeInCityMS;
    if (this.mTimeSinceLastDataUpdate > a) {
      b.mTimeSinceLastDataUpdate = 0;
      this.UpdateRegionViewList();
      for (var c = [], d = simcity.gGlobalUIHandler.mBorderUnitsList.length, a = 0; a < d; ++a)
        c[a] = scrui.BuildRequestQuery(["units", simcity.gGlobalUIHandler.mBorderUnitsList[a],
              "bins", simcity.kResourceRegionalBoxUniqueID]);
      scrui.RequestGameData(c, function (a) {
        for (var c = 0; c < d; c++) {
          var e = a[c] || null;
          e && (b.mRegionData.mConnectedUnits[e.amount.toString()] = simcity.gGlobalUIHandler.mBorderUnitsList[c])
        }
      });
      c = simcity.gGlobalUIHandler.mAPIServerDataUIHandler;
      c.isGameEntry = !1;
      for (var a = 0, e = this.mRegionViewItems.length; a < e; ++a) {
        var f = this.mRegionViewItems[a];
        f.pollServer && simcity.cRegionViewUIHandler.SetBoxDataFromServer(f, c)
      }
      if (0 === b.mRegionData.mTotals.tradeUnits) {
        for (var g in this.mRegionData.mBoxes)
          scrui.RequestGameData([scrui.BuildRequestQuery(["RegionTradeUnits",
                  g])], function (a) {
            var c = !1;
            b.mRegionData.mCityTradeData.hasOwnProperty(g.toString()) || (b.mRegionData.mCityTradeData[g] = {
                connections : {}

              }, c = !0);
            for (var d = 0, e = a.length; d < e; d++)
              for (var f = a[d], m = 0, n = f.length; m < n; m++) {
                var p = f[m];
                b.mRegionData.mCityTradeData[g].connections[p.toCity] = {
                  connectionUnitRef : p.tradeUnitRef.slot + "," + p.tradeUnitRef.stamp
                };
                if (c) {
                  var q = g.toString(),
                  o = simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData;
                  o.mRegionUnitsLookup.hasOwnProperty(q) ? o.mRegionUnitsLookup[q].regionalUnitRef =
                    scrui.RequestStringFromUnitRef(p.tradeUnitRef) : o.mRegionUnitsLookup[q] = new simcity.RegionUnit({
                      regionalUnitRef : scrui.RequestStringFromUnitRef(p.tradeUnitRef),
                      type : simcity.RegionUnitTypes.CITY
                    })
                }
              }
            b.mRegionData.mTotals.tradeUnits++
          });
        this.mTradeUnitsLoaded = !0
      }
      this.UpdateGreatWorksResources();
      this.UpdateRegionResourceData();
      this.UpdateRegionGreatWorksResourceData();
      this.UpdateRegionalAlerts();
      this.UpdateHomeBox();
      this.mSelectedDataControl && this.mShouldUpdateDataLayerContextPanel && (this.UpdateDataLayerContextPanel(),
        this.mShouldUpdateDataLayerContextPanel = !1);
      this.mServerDataChanged = !1
    }
  });
simcity.cRegionViewUIHandler.prototype.UpdateVisuals = scrui.Client_ProfZone("cRegionViewUIHandler.UpdateVisuals", function (a) {
    if (this.IsVisible() && (this.DepthSortRegionViewItems(), this.mTimeSinceLastUpdate += a, this.mTimeSinceLastUpdate > simcity.kRegionViewUpdateTimeMS || this.mServerDataChanged))
      this.mTimeSinceLastUpdate = 0, this.ShowLowerPanel(), this.UpdateRegionalInfoPanel(), this.UpdateGWUnlockSparkleChecker(), this.mGWLowerPanelUI.Update()
  });
simcity.cRegionViewUIHandler.prototype.DepthSort = function (a, b) {
  var c = a[2].mIsSelected,
  d = b[2].mIsSelected;
  return c !== d ? c < d ? -1 : 1 : a[1] - b[1]
};
simcity.cRegionViewUIHandler.prototype.DepthSortRegionViewItems = function () {
  if (0 !== this.mRegionViewItems.length) {
    for (var a = Object.keys(this.mRegionViewItems), b = a.length, c = Array(a.length), d = 0, e = a.length; d < e; ++d)
      c[d] = scrui.BuildRequestQuery(["units", this.mRegionViewItems[a[d]].mUnitRef, "screenPositionTop"]);
    var f = this;
    scrui.RequestGameData(c, function (c) {
      for (var d = 0, e = 0; d < b; ++e) {
        var j = c[e],
        k = f.mRegionViewItems[a[d]],
        l = k.mRootLayout;
        if (j) {
          var m = f.mNewlyRolledOverBoxID ? f.mNewlyRolledOverBoxID : 0;
          if (m || l.mScreenPos !==
            j[0] + "x" + j[1]) {
            l.mScreenPos = j[0] + "x" + j[1];
            var n = j[0],
            p = j[1],
            q = !1;
            m && m == k.mRegionalBoxID && (m = scrui.GetClientWidth(), -20 > n ? (n = -20, q = !0) : n + l.mWidth > m && (n -= n + l.mWidth - m, q = !0), f.mNewlyRolledOverBoxID = 0);
            if (k.mActiveLayout) {
              var m = k.mActiveLayout.FindControlByID(253895354),
              o = k.mActiveLayout.FindControlByID(253895035);
              m.SetVisibility(!0);
              o.SetVisibility(!0);
              q && (m.SetVisibility(!1), o.SetVisibility(!1))
            }
            l.SetPosition(n, p, l.mWidth, l.mHeight);
            f.mSortedItemsList[d] = [j[0], j[1], k]
          }
          ++d
        } else
          f.RemoveRegionViewItemAtIndex(d),
          --b
      }
      if (f.mSortedItemsList && 1 < f.mSortedItemsList.length) {
        f.mSortedItemsList.sort(f.DepthSort);
        c = -1;
        e = !1;
        d = 0;
        for (j = f.mSortedItemsList.length; d < j; ++d) {
          k = f.mSortedItemsList[d][2];
          if (k.mDepthIndex <= c) {
            e = !0;
            break
          }
          c = k.mDepthIndex
        }
        if (e) {
          d = 0;
          for (j = f.mSortedItemsList.length; d < j; ++d)
            k = f.mSortedItemsList[d][2], k.mRootLayout.Reparent(f.mRegionViewItemsContainerWindow), k.mDepthIndex = d
        }
      }
    })
  }
};
simcity.cRegionViewUIHandler.prototype.HandleGameEvent = function (a, b) {
  switch (a) {
  case simcity.kGameMessageGreatWorksContributors:
    this.RefreshGreatWorksData(b);
    break;
  case simcity.kGameMessageRegionUpdated:
    this.mServerDataChanged = !0;
    this.UpdateRegionResourceData();
    break;
  case simcity.kGameMessageHideSiteUI:
  case simcity.kGameMessageHideRegionUI:
    this.HideRegionUI();
    break;
  case simcity.kGameMessageShowRegionUI:
    this.OnShowRegionUI(a, b);
    break;
  case simcity.kGameMessageShowSiteUI:
    this.OnShowSiteUI(a, b);
    break;
  case simcity.kGameMessageRequestTradeData:
    this.OnTradeDataRequestReceived(b);
    break;
  case simcity.kGameMessagePauseTradeDataRequest:
    this.OnTradeDataRequestPaused();
    break;
  case simcity.kGameMessageRegionUnitRolledOver:
    this.mMousedOverRegionViewItem && !this.mMousedOverRegionViewItem.mIsSelected && this.mMousedOverRegionViewItem.SetMouseSelectionState(simcity.kRegionViewItemMouseSelectionStates.unselected);
    if (this.mMousedOverRegionViewItem = this.mRegionViewItems[b.regionBoxID])
      this.mNewlyRolledOverBoxID = b.regionBoxID,
      this.mMousedOverRegionViewItem.SetMouseSelectionState(simcity.kRegionViewItemMouseSelectionStates.mouseOver);
    this.DepthSortRegionViewItems();
    break;
  case simcity.kGameMessageBarGraphRolledOff:
  case simcity.kGameMessageRegionUnitRolledOff:
    this.mMousedOverRegionViewItem && !this.mMousedOverRegionViewItem.mIsSelected && this.mMousedOverRegionViewItem.SetMouseSelectionState(simcity.kRegionViewItemMouseSelectionStates.unselected);
    this.mNewlyRolledOverBoxID = 1;
    this.DepthSortRegionViewItems();
    break;
  case simcity.kGameMessageRegionUnitSelected:
    if (simcity.IsTutorialInProgress() &&
      (simcity.gGlobalUIHandler.mTutorialCallout.mRegionBoxID && simcity.gGlobalUIHandler.mTutorialCallout.mRegionBoxID != b.regionBoxID || !this.allowViewCity))
      break;
    simcity.gEventManager.TriggerEvent(simcity.gEventTypes.GENERICEVENT, b.regionBoxID, null);
    null !== this.mSelectedRegionViewItem && this.mSelectedRegionViewItem.SetMouseSelectionState(simcity.kRegionViewItemMouseSelectionStates.unselected);
    if (this.mSelectedRegionViewItem = this.mRegionViewItems[b.regionBoxID])
      this.mSelectedRegionViewItem.SetMouseSelectionState(simcity.kRegionViewItemMouseSelectionStates.selected),
      this.HandlePossibleGWSelection();
    this.mSelectedDataControl && this.UpdateDataLayerContextPanel();
    break;
  case simcity.kGameMessageRegionUnitDeselected:
    if (this.mSelectedRegionViewItem && "greatwork" == this.mSelectedRegionViewItem.mViewUnitType)
      break;
    this.mSelectedRegionViewItem = null;
    for (var c = Object.keys(this.mRegionViewItems), d = 0, e = c.length; d < e; d++)
      this.mRegionViewItems[c[d]].SetMouseSelectionState(simcity.kRegionViewItemMouseSelectionStates.unselected);
    this.mSelectedDataControl && this.UpdateDataLayerContextPanel();
    break;
  case simcity.kGameMessageZoomToCity:
    this.ZoomToCity(b.regionBoxID || null);
    break;
  case simcity.kGameMessageRegionViewItemSelected:
    this.OnRegionViewItemClicked();
    break;
  case simcity.kGameMessageRegionViewItemMouseOver:
    this.OnRegionViewMouseOver(b);
    break;
  case simcity.kGameMessageRegionViewItemMouseOut:
    this.OnRegionViewMouseOut(b);
    break;
  case simcity.kGameMessageUnitRuleUIEvent:
    switch (b.eventID) {
    case simcity.kEventIDShowLaunchButton:
      this.ShowLaunchButton(b);
      break;
    case simcity.kEventIDSatelliteLaunched:
      this.ShowLaunchConfirm();
      break;
    case simcity.kEventIDRegionWorksCompleted:
      var c = b || {},
      f = c.unitRef ? scrui.RequestStringFromUnitRef(c.unitRef) : null,
      c = scrui.BuildRequestQuery(["units", f, "propKey"]),
      d = simcity.gGlobalUIHandler.mReturnToCityButton;
      d.SetSelected(!0);
      simcity.gGlobalUIHandler.mToolPaletteUIHandler.HandleUIMessage(scrui.kMsgTypeButtonClicked, simcity.kBtnReturnToCity, d);
      scrui.RequestGameData([c], function (a) {
        a = a[0];
        null !== f && simcity.gGlobalUIHandler.mRegionViewUIHandler.ShowGWCompletePanel(f, simcity.GreatWorksOptions[a.instance])
      });
      break;
    case simcity.kEventIDStopFlyoverCamera:
      scrui.PostGameCommand(scrui.BuildCommand([simcity.kDataToolMessage, scrui.IDFromName("EndCinematic")])),
      simcity.gGlobalUIHandler.mSharedUIParent.SetVisibility(!0),
      simcity.gGlobalUIHandler.mRegionUIParent.SetVisibility(!0),
      simcity.gGlobalUIHandler.mTutorialManager.SetModalWindow(null, !1),
      simcity.gGlobalUIHandler.HandleGameEvent(simcity.kGameMessageShowGlobalUI)
    }
    break;
  case simcity.kMessageKeyTrigger:
    this.HandleTriggerKey(b.triggerCode)
  }
};
simcity.cRegionViewUIHandler.prototype.ClosePalette = function () {
  null !== this.mSelectedDataControl && (this.mSelectedDataControl.SetSelected(!1), this.mSelectedDataLayerID = this.mSelectedDataControl = null, simcity.gGlobalUIHandler.mLayerUIHandler.DeactivateLayer(), this.HideDataLayerContextPanel())
};
simcity.cRegionViewUIHandler.prototype.HandleUIMessage = function (a, b, c) {
  switch (a) {
  case scrui.kMsgTypeButtonClicked:
    switch (b) {
    case simcity.kRegionView_DataLayerButtonOn:
    case simcity.kRegionView_DataLayerButton:
      this.mGWLowerPanelUI.HideGreatWorksLowerPanel();
      c && c.mIsSelected ? (this.CheckForClearingGWSparkle(c), this.mSelectedDataControl = c, this.mSelectedDataLayerID = c.mUserData, this.mSelectedDataLayerID == simcity.kRegionDataLayer_GreatWorks && this.ForceGWUnitSelected(), this.ShowDataLayerContextPanel()) : this.ClosePalette();
      break;
    case simcity.kRegionView_LowerPanelCloseButton:
      this.ClosePalette();
      break;
    case simcity.kRegionView_LegendCloseButton:
    case simcity.kRegionView_DataLayerToggleOffButton:
      this.IsVisible() && this.ActivateLightDataLayer();
      break;
    case simcity.kBtnRegionCamera:
      (a = gUIManager.FindControlByID(simcity.kBtnRegionCamera)) && a.SetSelected(!0);
      break;
    case simcity.kRegionView_HomeBoxButton:
      this.IsVisible() && (!this.mSelectedRegionViewItem || !this.mRegionData.mViewingBox || this.mRegionData.mViewingBox.uid != this.mRegionData.mPlayingBox.uid) &&
      this.ZoomToCity(this.mRegionData.mPlayingBox.uid);
      break;
    case simcity.kRegionView_GreatWorksChooserButton:
      this.mGWLowerPanelUI.ChooseGreatWorks(this.GetSelectedViewItem(), c);
      break;
    case simcity.kRegionView_IntroductionDialogButton:
      this.mIntroductionDialog && (this.mIntroductionDialog.DestroyControl(), this.mIntroductionDialog = null);
      simcity.gGlobalUIHandler.mTutorialManager.SetModalWindow(null, !1);
      break;
    case simcity.kGWCompleteOKButton:
      this.mGWCompleteDialog.DestroyControl();
      simcity.SendSoundEvent(simcity.audio.kGlobalSoundObjectID,
        simcity.audio.kInstancePlayGreatWorkComplete);
      this.ZoomToGreatWork(c.mUserData);
      break;
    case simcity.kGWPostCompleteOKButton:
      null !== this.mGWPostCompletionDialog && (simcity.SendSoundEvent(simcity.audio.kGlobalSoundObjectID, simcity.audio.kInstanceUIGreatWorkClose), this.mGWPostCompletionDialog.DestroyControl(), this.mGWPostCompletionDialog = null);
      break;
    case simcity.kGWLowerPanelIDs.mOperatingPanel.mPowerOnButton:
    case simcity.kGWLowerPanelIDs.mOperatingPanel.mPowerOffButton:
      this.mGWLowerPanelUI.HandlePowerButtonToggle(c);
      break;
    case simcity.kRegionView_LaunchSatelliteButton:
      this.LaunchSatellite(c);
      break;
    case simcity.kRegionView_LaunchSatelliteOKButton:
      this.mLaunchDialog.DestroyControl();
      break;
    case simcity.kUnclaimedCityPanelIDs.claimCityButton:
      var d = this;
      c.SetEnabled(!1);
      setTimeout(function () {
        c.SetEnabled(!0);
        d.mIsClaimingBox = !1
      }, 3E4);
      this.ClaimBox(c);
      break;
    case simcity.kRegionView_BuildSatelliteButton:
      this.BuildSatellite(c);
      break;
    case 235696435:
      (a = c.mUserData || null) && this.ZoomToCity(a);
      break;
    case 235774183:
      d = this;
      c.SetEnabled(!1);
      setTimeout(function () {
        c.SetEnabled(!0);
        d.mIsLoadingBox = !1
      }, 3E4);
      null !== this.mSelectedRegionViewItem && this.allowViewCity && (this.mRegionData.mPlayingBox.id === this.mSelectedRegionViewItem.mBoxApiData.serverBoxID ? this.ReturnToPlayingCity() : this.LaunchCity(this.mSelectedRegionViewItem.mBoxApiData.serverBoxID));
      break;
    case simcity.kRegionView_ViewCityButton:
      this.mSelectedRegionViewItem && this.ZoomToCity(this.mSelectedRegionViewItem.mRegionalBoxID);
      break;
    case simcity.kRegionView_BtnCloseViewItem:
      null !==
      this.mSelectedRegionViewItem && ("greatwork" == this.mSelectedRegionViewItem.mViewUnitType ? (this.mSelectedRegionViewItem.SetMouseSelectionState(simcity.kRegionViewItemMouseSelectionStates.unselected), null != this.mSelectedDataControl && this.mSelectedDataControl.SetSelected(!1), simcity.gGlobalUIHandler.mLayerUIHandler.DeactivateLayer(), this.HideDataLayerContextPanel(), this.mGWLowerPanelUI.HideGreatWorksLowerPanel(), this.mLowerPanelState = this.mViewingUnitRef = null) : this.HandleGameEvent(simcity.kGameMessageRegionUnitDeselected,
          null));
      break;
    case simcity.kGWLowerPanelIDs.mButtons.mStartContrib:
    case simcity.kGWLowerPanelIDs.mButtons.mStopContrib:
      a = this.GetConnectedGWID();
      if ((a = this.mRegionViewItems[a].mUnitRef) && c.mDatabinding)
        c.mDatabinding.onItemClicked(a);
      break;
    case simcity.kRegionViewItemControlIDs.inviteButton:
      a = gUIManager.FindControlByID(244120857),
      a.regionData = {
        name : simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData.mRegionName
      },
      a.inviteCallback = this.SendInvites,
      simcity.gGameInvitesController.ShowInvitePanel(a)
    }
    break;
  case scrui.kMsgTypeButtonGainFocus:
    switch (b.controlID) {
    case simcity.kRegionView_GreatWorksChooserButton:
      this.mHighlightedGreatWorkOption = c.mUserData;
      break;
    case simcity.kRegionView_GreatWorksResourceHitBox:
      this.mHighlightedGreatWorkResource = c.mUserData
    }
    break;
  case scrui.kMsgTypeButtonLoseFocus:
    switch (b.controlID) {
    case simcity.kRegionView_GreatWorksResourceHitBox:
      this.mHighlightedGreatWorkResource = null
    }
    break;
  case simcity.kMsgTypeAPIServerDataUpdated:
    this.PushPlayerListToClient(),
    this.mInitialDataUpdate ||
    (this.UpdateData(simcity.kRegionViewUpdateTimeInCityMS + 1), this.mInitialDataUpdate = !0, scrui.PostGameCommand(scrui.BuildCommand(["uiLoaded"])))
  }
};
simcity.cRegionViewUIHandler.prototype.Init = function (a) {
  this.mRootWindow = a;
  this.mTradeUI = new simcity.cRegionTradeUIHandler;
  gUIManager.RegisterUIHandler(this.mTradeUI);
  this.mGWLowerPanelUI = new simcity.cGreatWorksLowerPanelUI;
  this.mGWLowerPanelUI.Init(this);
  this.mRegionViewItemsContainerWindow = this.mRootWindow.FindControlByID(225802340);
  this.mWinImportIconsContainer = this.mRootWindow.FindControlByID(simcity.kWinTradeUI_ImportIconsContainer);
  this.mWinExportIconsContainer = this.mRootWindow.FindControlByID(simcity.kWinTradeUI_ExportIconsContainer);
  this.mContextPanelAnim = this.mRootWindow.FindAnimationByID(simcity.kRegionView_ContextPanelAnim);
  this.mContextPanelContainer = this.mRootWindow.FindControlByID(simcity.kRegionView_ContextPanelContainer);
  this.mGWLowerUIContainer = this.mRootWindow.FindControlByID(simcity.kRegionview_GreatWroksUILowerContainer);
  this.mRegionalBudgetText = this.mRootWindow.FindControlByID(simcity.kRegionView_RegionalBudgetText);
  this.mRegionalPopulationText = this.mRootWindow.FindControlByID(simcity.kRegionView_RegionalPopulationText);
  this.mDataLayerButtonHideAnim = this.mRootWindow.FindAnimationByID(simcity.kRegionView_DataLayerWeathHideButtonAnim);
  this.mRegionAdvisors = new simcity.cRegionAdvisors;
  this.mRegionAdvisors.Init(a);
  this.allowViewCity = !0;
  this.mDataLayerButtons = {};
  this.mResourceUIKeyValidationObj = simcity.CreateResourceKeysValidationObject();
  this.CollectRequestedVisualizedDataUIKeys()
};
simcity.cRegionViewUIHandler.prototype.PreloadData = function () {
  var a = this,
  b = [],
  c = [],
  d = scrui.BuildRequestQuery(["regionViewUnits"]);
  scrui.RequestGameData([d], function (a) {
    for (var a = a[0], d = 0, g = a.length; d < g; ++d)
      c.push(scrui.RequestStringFromUnitRef(a[d])), b.push(scrui.BuildRequestQuery([simcity.kDataUnits, c[d], simcity.kDataBins, simcity.kResourceRegionalBoxUniqueID]))
  });
  scrui.RequestGameData(b, function (b) {
    for (var d = 0, g = c.length; d < g; ++d) {
      var h = c[d];
      if (b[d]) {
        var i = b[d].amount,
        j = gUIManager.LoadAndCacheLayout("Layouts/Region/RegionViewItem.js",
            a.mRegionViewItemsContainerWindow),
        h = new simcity.cRegionViewItem({
            mLayout : j,
            mUnitRef : h,
            mRegionalBoxID : i,
            mDataBinding : simcity.RegionViewGeneric
          });
        gUIManager.RegisterUIHandler(h);
        h.Init();
        a.mRegionViewItems[i] = h
      }
    }
    a.ShowDataLayerButtons();
    a.LoadTradeIcons()
  })
};
simcity.cRegionViewUIHandler.prototype.Shutdown = function () {
  this.RunOnExitBoxRules()
};
simcity.cRegionViewUIHandler.prototype.UpdatePrerequisitesPopup = function () {
  if (this.mSelectedRegionViewItem) {
    var a = this.mSelectedRegionViewItem.mRootLayout.FindControlByID(simcity.kRegionView_GreatWorksPrerequisiteParent);
    if (null !== this.mHighlightedGreatWorkOption) {
      var b = simcity.GreatWorksUpgradeOptions[this.mSelectedUnitID][this.mHighlightedGreatWorkOption],
      c = b.hasOwnProperty("mPrerequisiteFailedList") ? b.mPrerequisiteFailedList.length : 0;
      a.SetVisibility(0 < c);
      if (0 < c) {
        var d = this.mSelectedRegionViewItem.mRootLayout.FindControlByID(simcity.kRegionView_GreatWorksPrerequisiteContainer);
        d.DestroyChildren();
        for (var e = 0, f = 0; f < c; ++f) {
          var g = gUIManager.LoadAndCacheLayout("Layouts/Region/GreatWorksPrerequisite.js", d);
          g.SetPosition(0, g.mHeight * f);
          e += g.mHeight;
          g.FindControlByID(simcity.kRegionView_GreatWorksPrerequisiteText).SetLocaleText(b.mPrerequisiteFailedList[f])
        }
        a.SetHeight(a.mHeight + e - d.mHeight)
      }
    } else
      a && a.SetVisibility(!1)
  }
};
simcity.cRegionViewUIHandler.prototype.GetCityButton = function (a, b) {
  var c = this.mRegionViewItems[b];
  if (c) {
    var d = c.mActiveLayout.FindControlByID(a);
    return d ? d : c.mActiveLayout
  }
};
simcity.cRegionViewUIHandler.prototype.HideDataLayerButtons = function (a) {
  if (this.mDataLayerButtonHideAnim)
    if (a) {
      for (var a = Object.keys(this.mDataLayerButtons), b = 0, c = a.length; b < c; b++)
        this.mDataLayerButtons[a[b]].FindControlByID(simcity.kRegionView_DataLayerButton).SetSelected(!1);
      this.mSelectedDataControl = null;
      simcity.gGlobalUIHandler.mLayerUIHandler.DeactivateLayer();
      this.HideDataLayerContextPanel();
      this.mDataLayerButtonHideAnim.Start(scrui.cAnimation.kPlayForward)
    } else
      this.mDataLayerButtonHideAnim.Start(scrui.cAnimation.kPlayReverse)
};
simcity.cRegionViewUIHandler.prototype.UpdateRegionViewList = function () {
  var a = this,
  b = [],
  c = [],
  d = scrui.BuildRequestQuery(["regionViewUnits"]);
  scrui.RequestGameData([d], function (a) {
    for (var a = a[0], d = 0, g = a.length; d < g; ++d)
      c.push(scrui.RequestStringFromUnitRef(a[d])), b.push(scrui.BuildRequestQuery([simcity.kDataUnits, c[d], simcity.kDataBins, simcity.kResourceRegionalBoxUniqueID]))
  });
  scrui.RequestGameData(b, function (b) {
    for (var d = 0, g = c.length; d < g; ++d) {
      a.mRegionData.mGreatWorksLocal = [];
      g = b;
      d = 0;
      for (g = g.length; d <
        g; ++d) {
        var h = c[d];
        if (b[d]) {
          var i = b[d].amount;
          if (null == a.mRegionViewItems[i] && !a.mRegionViewItems[i]) {
            var j = gUIManager.LoadAndCacheLayout("Layouts/Region/RegionViewItem.js", a.mRegionViewItemsContainerWindow),
            j = new simcity.cRegionViewItem({
                mLayout : j,
                mUnitRef : h,
                mRegionalBoxID : i,
                mDataBinding : simcity.RegionViewGeneric
              });
            gUIManager.RegisterUIHandler(j);
            a.mRegionViewItems[i] = j
          }
          a.mRegionViewItems[i].mUnitRef = h;
          "greatwork" == a.mRegionViewItems[i].mViewItemType && (a.mRegionData.mGreatWorksLocal[h] = {
              regionViewItem : a.mRegionViewItems[d],
              data : []
            })
        }
      }
    }
    a.UpdateRegionViewItemDatabindings();
    a.RefreshGreatWorksData()
  })
};
simcity.cRegionViewUIHandler.prototype.UpdateRegionViewItemDatabindings = function () {
  for (var a = Object.keys(this.mRegionViewItems), b = a.length, c = Array(b), d = {
      argumentLists : Array(b)
    }, e = [], f = [], g = this, h = 0; h < b; ++h) {
    var i = this.mRegionViewItems[a[h]];
    c[h] = i.mDataBinding;
    d.argumentLists[h] = [i]
  }
  simcity.GenerateDataBindingQueries(c, e, d, f, !1);
  simcity.RequestDataBindingData(e, c, f, !1, function (d) {
    for (var e = 0; e < b; ++e)
      c[e].update(g.mRegionViewItems[a[e]], d[e]);
    g.UpdateGreatWorksResourcePopup()
  })
};
simcity.cRegionViewUIHandler.prototype.UpdateRegionResourcePositions = function (a, b) {
  var c = this.mRootWindow.FindControlByID(a);
  if (c.mChildren)
    for (var d = 0, e = 0, f = c.mChildren.length; d < f; ++d) {
      var g = c.mChildren[d];
      g.mIsVisible && (b ? g.SetPosition(g.mWidth * e, g.mTop) : g.SetPosition(c.mWidth - g.mWidth * (e + 1), g.mTop), ++e)
    }
};
simcity.cRegionViewUIHandler.prototype.UpdateRegionResourceData = function () {
  var a = this,
  b = simcity.kRegionalCitiesResourceRegionTotals;
  b.clear();
  for (var c = Object.keys(this.mRegionData.mCityTradeData), d = 0, e = c.length; d < e; d++) {
    var f = c[d];
    if (f)
      for (var g = this.mRegionData.mCityTradeData[f].connections, h = Object.keys(g), i = 0, j = h.length; i < j; i++) {
        var k = h[i],
        l = g[k],
        m = [],
        n = [],
        p = {
          argumentList : [l.connectionUnitRef, k == this.mRegionData.mPlayingBox.uid, this.mRegionData.mConnectedUnits[f], f == this.mRegionData.mPlayingBox.uid,
            this.mRegionData.mConnectedUnits[k]]
        },
        q = this.mRegionData.mCityTradeData[k];
        q && (q.localData || (q.localData = new simcity.kRegionalCitiesLocalData), simcity.GenerateDataBindingQueries([q.localData], m, p, n, !1), simcity.RequestDataBindingData(m, [q.localData], n, !1, function (a) {
            q.localData.update(a[0])
          }), m = [], n = [], q.giftableResources || (q.giftableResources = new simcity.kRegionalCitiesGiftableResources), simcity.GenerateDataBindingQueries([q.giftableResources], m, p, n, !1), simcity.RequestDataBindingData(m, [q.giftableResources],
            n, !1, function (b) {
            q.giftableResources.update(b[0]);
            a.CollectChangedVisualizedDataResources(k, q.giftableResources)
          }));
        for (var o = 0, r = simcity.kRegionalCitiesResourceDataBindings.length; o < r; ++o) {
          m = [];
          n = [];
          l.connectionData || (l.connectionData = {});
          var s = simcity.kRegionalCitiesResourceDataBindings[o],
          s = "function" == typeof s ? new s : s;
          l.connectionData.hasOwnProperty(s.type) || (l.connectionData[s.type] = "function" == typeof s ? new s : s);
          l.connectionData[s.type].queries && (simcity.GenerateDataBindingQueries([l.connectionData[s.type]],
              m, p, n, !1), simcity.RequestDataBindingData(m, [l.connectionData[s.type]], n, !1, function (c) {
              l.connectionData[s.type].update(c[0]);
              b.update(l.connectionData[s.type]);
              a.CollectChangedVisualizedDataResources(k, l.connectionData[s.type])
            }))
        }
      }
  }
  0 < Object.keys(this.mChangedVisualizedData).length && scrui.PostGameCommand(scrui.BuildCommand(["UpdateVisualizedData"]));
  this.mRequestedTradeDataResourceUIKeys && this.UpdateVisualizedTradeData();
  if (simcity.IsMainTutorialInProgress()) {
    if (c = this.mRegionData.mCityTradeData[simcity.TutorialMaxisBurgBoxID])
      if (c =
          c.connections[simcity.TutorialLuckyShoresBoxID])
        c.connectionData.garbage.data.dumpCapacity = 400, c.connectionData.garbage.data.garbagePickedUp = 50, c.connectionData.garbage.data.totalGarbageAndRecyclingTruckTokensAssigned = 1, c.connectionData.garbage.data.totalGarbageAndRecyclingTruckTokensAvailable = 0;
    if ((c = this.mRegionData.mCityTradeData[simcity.TutorialLuckyShoresBoxID]) && c.localData)
      c.localData.data.population = 4734, c.localData.data.budget = 505600
  }
};
simcity.cRegionViewUIHandler.prototype.CollectChangedVisualizedDataResources = function (a, b) {
  if (b.hasOwnProperty("visualizedData"))
    for (var c = b.visualizedData, d = Object.keys(c), e = 0, f = d.length; e < f; e++) {
      var g = c[d[e]];
      this.mRequestedVisualizedDataUIKeys[g.uiKey] && g.changed && (this.mChangedVisualizedData[a] || (this.mChangedVisualizedData[a] = {}), this.mChangedVisualizedData[a][d[e]] || (simcity.DEBUG && scrui.Assert(this.mResourceUIKeyValidationObj[g.uiKey], "Visualized Data ResourceUIKey in databinding does not exists: " +
            scrui.DecimalToHex(g.uiKey)), this.mChangedVisualizedData[a][d[e]] = {
            uiKey : g.uiKey,
            amount : g.amount
          }), g.changed = !1)
    }
};
simcity.cRegionViewUIHandler.prototype.CollectRequestedVisualizedDataUIKeys = function () {
  var a = this,
  b = [scrui.BuildRequestQuery([simcity.kDataVisualizedDataRequestedUIKeys])];
  scrui.RequestGameData(b, function (b) {
    a.mRequestedVisualizedDataUIKeys = {};
    for (var b = b[0].uiKeys, d = 0, e = b.length; d < e; ++d)
      simcity.DEBUG && scrui.Assert(a.mResourceUIKeyValidationObj[b[d]], "Requested Visualized Data ResourceUIKey does not exists: " + scrui.DecimalToHex(b[d])), a.mRequestedVisualizedDataUIKeys[b[d]] = 1
  })
};
simcity.cRegionViewUIHandler.prototype.OnTradeDataRequestReceived = function (a) {
  a = a.uiKeys;
  this.mRequestedTradeDataResourceUIKeys = {};
  for (var b = 0, c = a.length; b < c; ++b)
    simcity.DEBUG && scrui.Assert(this.mResourceUIKeyValidationObj[a[b]], "Requested Visualized Trade Data ResourceUIKey does not exists: " + scrui.DecimalToHex(a[b])), this.mRequestedTradeDataResourceUIKeys[a[b]] = 1;
  this.mInitialTradeDataRequestCompleted = !1;
  this.UpdateVisualizedTradeData()
};
simcity.cRegionViewUIHandler.prototype.UpdateVisualizedTradeData = function () {
  scrui.PostGameCommand(scrui.BuildCommand(["UpdateVisualizedTradeData"]))
};
simcity.cRegionViewUIHandler.prototype.OnTradeDataRequestPaused = function () {
  this.mRequestedTradeDataResourceUIKeys = null
};
simcity.GetRequestedTradeData = function () {
  if (simcity.gGlobalUIHandler && simcity.gGlobalUIHandler.mRegionViewUIHandler)
    return simcity.gGlobalUIHandler.mRegionViewUIHandler.GetRequestedTradeData()
};
simcity.cRegionViewUIHandler.prototype.GetRequestedTradeData = function () {
  var a = [];
  simcity.IsMainTutorialInProgress() && (simcity.gGlobalUIHandler.mTutorialManager.mTutorialData.hasOwnProperty("showTradeArrows"), this.mSelectedDataLayerID == simcity.kRegionDataLayer_Workers && simcity.gGlobalUIHandler.mLayerUIHandler.mCurrentLayerID == simcity.kRegionDataLayer_Workers ? a.push({
      uiKey : Number(simcity.kResourceUIKeys.TradeCommutingWorkersOut),
      box1 : Number(simcity.TutorialMaxisBurgBoxID),
      box2 : Number(simcity.TutorialLuckyShoresBoxID),
      amount : 1E3,
      type : simcity.kTradeTypeNormal
    }) : this.mSelectedDataLayerID == simcity.kRegionDataLayer_Workers && simcity.gGlobalUIHandler.mLayerUIHandler.mCurrentLayerID == simcity.kRegionDataLayer_WorkerLevels[0] && a.push({
      uiKey : Number(simcity.kResourceUIKeys.CommutingWorkersW1),
      box1 : Number(simcity.TutorialMaxisBurgBoxID),
      box2 : Number(simcity.TutorialLuckyShoresBoxID),
      amount : 1E3,
      type : simcity.kTradeTypeNormal
    }));
  this.mRequestedTradeDataResourceUIKeys && (this.mSelectedDataLayerID == simcity.kRegionDataLayer_GreatWorks ?
    this.CollectGreatWorksTradeData(a) : this.CollectCityTradeData(a), this.mInitialTradeDataRequestCompleted = !0);
  return a
};
simcity.cRegionViewUIHandler.prototype.CollectGreatWorksTradeData = function (a) {
  if (this.mSelectedRegionViewItem && "greatwork" == this.mSelectedRegionViewItem.mViewItemType && this.mGWLowerPanelUI.mActiveRequirements && simcity.gGlobalUIHandler.mAPIServerDataUIHandler.mServerDataSet) {
    for (var b = this.mRegionData.mGreatWorksRegional[this.mSelectedRegionViewItem.mRegionalBoxID], c = [], d = this.mGWLowerPanelUI.mActiveRequirements.length, e = 0; e < d; e++) {
      var f = this.mGWLowerPanelUI.mActiveRequirements[e];
      f.hasOwnProperty("resourceUIKey") &&
      c.push(f)
    }
    var d = c.length,
    g;
    for (g in b.cities) {
      var h = b.cities[g];
      if (this.mGWLowerPanelUI.mGWData.underConstruction)
        if (h.UID != this.mRegionData.mPlayingBox.uid) {
          if (simcity.GetOnlineStatus(h.UID) == simcity.kOnlineStatusOnlineYourRegion)
            for (var i = scrui.RequestStringFromUnitRef(h.slotRef), e = 0; e < d; e++) {
              var j = h.resources[e],
              k = c[e],
              f = [scrui.BuildRequestQuery([simcity.kDataRegionUnits, i, simcity.kDataBinAmount, k.signupBinResource])];
              scrui.RequestGameData(f, function (c) {
                if (c[0]) {
                  var d = 0;
                  0 < c[0] && (d = j.amount, 0 ==
                    d && (d = 1));
                  a.push({
                    uiKey : Number(k.resourceUIKey),
                    box1 : Number(h.UID),
                    box2 : Number(b.UID),
                    amount : d,
                    type : simcity.kTradeTypeNormal
                  })
                }
              })
            }
        } else {
          i = {
            argumentList : [this.mSelectedRegionViewItem.mUnitRef]
          };
          for (e = 0; e < d; e++) {
            var j = h.resources[e],
            k = c[e],
            l = [k.dataBindingSignup],
            f = [],
            m = [];
            simcity.GenerateDataBindingQueries(l, f, i, m, !1);
            simcity.RequestDataBindingData(f, l, m, !1, function (c) {
              if (c[0].signup) {
                var d = 0;
                if (c[0].signup.amount > 0) {
                  d = j.amount;
                  d == 0 && (d = 1)
                }
                a.push({
                  uiKey : Number(k.resourceUIKey),
                  box1 : Number(h.UID),
                  box2 : Number(b.UID),
                  amount : d,
                  type : simcity.kTradeTypeNormal
                })
              }
            })
          }
        }
    }
  }
};
simcity.cRegionViewUIHandler.prototype.CollectCityTradeData = function (a) {
  for (var b = {}, c = this.mRegionData.mCityTradeData, d = Object.keys(c), e = 0, f = d.length; e < f; e++) {
    var g = d[e];
    b[g] || (b[g] = {});
    for (var h = Object.keys(c[g].connections), i = 0, j = h.length; i < j; i++) {
      var k = h[i];
      this.mRegionData.mCities[k] && !b[g][k] && (b[g][k] = 1, b[k] || (b[k] = {}), b[k][g] = 1, this.AppendVisualizedTradeDataResources(g, k, a, this.mInitialTradeDataRequestCompleted))
    }
  }
};
simcity.cRegionViewUIHandler.prototype.AppendVisualizedTradeDataResources = function (a, b, c, d) {
  for (var e = this.GetDirectionalCityTradeData(a, b), f = this.GetDirectionalCityTradeData(b, a), g = Object.keys(e), h = 0, i = g.length; h < i; h++) {
    var j = g[h],
    k = e[j].visualizedTradeData,
    j = f[j].visualizedTradeData;
    if (k && j)
      for (var l = Object.keys(k), m = 0, n = l.length; m < n; m++) {
        var p = l[m],
        q = k[p],
        o = j[p];
        if (!d || q.changed || o.changed)
          "tradeCombine" == p ? this.AppendCombinedVisualizedTradeData(a, b, q, o, c) : this.AppendVisualizedTradeData(a, b, c,
            q.uiKey, q.amount, o.amount, q) && (q.changed = !1, o.changed = !1)
      }
  }
};
simcity.cRegionViewUIHandler.prototype.AppendCombinedVisualizedTradeData = function (a, b, c, d, e) {
  this.AppendVisualizedTradeData(a, b, e, c.uiKeyIn, c.outAmount, d.inAmount, c) && (c.changed = !1, d.changed = !1);
  this.AppendVisualizedTradeData(a, b, e, c.uiKeyOut, c.inAmount, d.outAmount, c) && (c.changed = !1, d.changed = !1)
};
simcity.cRegionViewUIHandler.prototype.AppendVisualizedTradeData = function (a, b, c, d, e, f, g) {
  simcity.DEBUG && scrui.Assert(this.mResourceUIKeyValidationObj[d], "Visualized Trade Data ResourceUIKey in databinding does not exists: " + scrui.DecimalToHex(d));
  return this.mRequestedTradeDataResourceUIKeys[d] && (e = this.DetermineTradeData(e, f), null != e) ? (f = !0, 0 != e.amount && (f = this.DetermineTradeStatus(a, b, 0 < e.amount, g)), f || (e.amount = 0), c.push({
      uiKey : Number(d),
      box1 : Number(a),
      box2 : Number(b),
      amount : e.amount,
      type : e.type
    }),
    !0) : !1
};
simcity.cRegionViewUIHandler.prototype.DetermineTradeStatus = function (a, b, c, d) {
  if (!d.localExportTradeSwitchID && !d.localExportTradeSwitchID && !d.regionTradeSwitchID)
    return !0;
  var e = null,
  f = null,
  g = !1;
  a == this.mRegionData.mPlayingBox.uid ? (e = this.mRegionData.mConnectedUnits[b], f = c ? d.localExportTradeSwitchID : d.localImportTradeSwitchID, g = !0) : b == this.mRegionData.mPlayingBox.uid ? (e = this.mRegionData.mConnectedUnits[a], f = c ? d.localImportTradeSwitchID : d.localExportTradeSwitchID, g = !0) : (e = c ? this.mRegionData.mCityTradeData[a].connections[b].connectionUnitRef : this.mRegionData.mCityTradeData[b].connections[a].connectionUnitRef,
    f = d.regionTradeSwitchID);
  if (e && f) {
    var a = null,
    a = g ? [scrui.BuildRequestQuery([simcity.kDataUnits, e, simcity.kDataBinAmount, f])] : [scrui.BuildRequestQuery([simcity.kDataRegionUnits, e, simcity.kDataBinAmount, f])],
    h = 0;
    a && scrui.RequestGameData(a, function (a) {
      h = a[0] % 2
    });
    return 0 != h
  }
  return !0
};
simcity.cRegionViewUIHandler.prototype.DetermineTradeData = function (a, b) {
  var c = {
    amount : 0,
    type : simcity.kTradeTypeNormal
  };
  a == b && 0 < b && 0 < a ? (c.amount = a, c.type = simcity.kTradeTypeBidirectional) : b > a && 0 == a ? (c.amount = b, c.type = simcity.kTradeTypeNormal) : a > b && 0 == b && (c.amount = -a, c.type = simcity.kTradeTypeNormal);
  return c
};
simcity.GetChangedVisualizedDataFromRegion = function () {
  if (simcity.gGlobalUIHandler && simcity.gGlobalUIHandler.mRegionViewUIHandler)
    return simcity.gGlobalUIHandler.mRegionViewUIHandler.GetChangedVisualizedData();
  scrui.Assert(!1, "simcity.GetChangedVisualizedDataFromRegion called without initialized region view UI");
  return []
};
simcity.cRegionViewUIHandler.prototype.GetChangedVisualizedData = function () {
  var a = [];
  if (this.mChangedVisualizedData)
    for (var b = Object.keys(this.mChangedVisualizedData), c = 0, d = b.length; c < d; c++) {
      var e = b[c],
      f = this.mChangedVisualizedData[e];
      if (f)
        for (var g = Object.keys(f), h = 0, i = g.length; h < i; h++) {
          var j = f[g[h]];
          a.push({
            regionBoxID : Number(e),
            uiKey : Number(j.uiKey),
            amount : j.amount
          })
        }
    }
  this.mChangedVisualizedData = {};
  return a
};
simcity.cRegionViewUIHandler.prototype.UpdateRegionGreatWorksResourceData = function () {
  var a = simcity.kRegionalCitiesResourceRegionTotals,
  b = simcity.FindConnectedGreatWork();
  a.clear();
  for (var c in this.mRegionData.mGreatWorksLocal)
    if (c)
      for (var a = 0, d = simcity.kRegionalCitiesResourceGreatWorksDataBindings.length; a < d; ++a) {
        var e = [],
        f = [],
        g = {
          argumentList : [c]
        },
        h = simcity.kRegionalCitiesResourceGreatWorksDataBindings[a],
        i = "function" == typeof h ? new h : h;
        simcity.GenerateDataBindingQueries([i], e, g, f, !1);
        simcity.RequestDataBindingData(e,
          [i], f, !1, function (a) {
          i.update(a[0]);
          if (b && a[0].regionalBoxUniqueID.amount == b[0]) {
            simcity.kRegionalAlertsGreatWorks.connectionData = a[0];
            simcity.kRegionalAlertsGreatWorks.update(b[0])
          }
        })
      }
};
simcity.cRegionViewUIHandler.prototype.TotalUnclaimedBoxes = function () {
  var a = 0;
  if (this.mRegionData && this.mRegionData.mBoxes)
    for (var b = Object.keys(this.mRegionData.mBoxes), c = 0, d = b.length; c < d; c++)
      "false" == this.mRegionData.mBoxes[b[c]].isClaimed && a++;
  return a
};
simcity.cRegionViewUIHandler.prototype.TotalActiveNeighbors = function () {
  var a = 0;
  if (this.mRegionData && this.mRegionData.mBoxes && this.mRegionData.mCityTradeData) {
    var b = this.mRegionData.mCityTradeData[this.mRegionData.mPlayingBox.uid];
    if (b)
      for (var b = Object.keys(b.connections), c = 0, d = b.length; c < d; c++) {
        var e = this.mRegionData.mBoxes[b[c]];
        e && "true" == e.isClaimed && a++
      }
  }
  return a
};
simcity.cRegionViewUIHandler.prototype.IsVisible = function () {
  return this.mRootWindow.mIsVisible
};
simcity.cRegionViewUIHandler.prototype.ResetRegionViewItem = function (a) {
  var b = [simcity.kRegionView_GreatWorksPrerequisiteParent, simcity.kRegionView_GreatWorksChooserParent, simcity.kRegionView_GreatWorksUnclaimedNameplate, simcity.kRegionView_GreatWorksClaimedNameplate];
  if (a.mLayout)
    for (var c in b)
      a.mLayout.FindControlByID(b[c]).SetVisibility(!1)
};
simcity.cRegionViewUIHandler.prototype.RemoveRegionViewItemAtIndex = function (a) {
  if (a < this.mRegionViewItems.length) {
    var b = this.mRegionViewItems[a];
    b === this.mSelectedRegionViewItem && (this.mSelectedRegionViewItem = null, this.mSelectedUnitID = simcity.kInvalidUnitRef, this.mHighlightedGreatWorkResource = this.mHighlightedGreatWorkOption = null);
    b.mLayout.DestroyControl();
    this.mRegionViewItems.splice(a, 1)
  }
};
simcity.cRegionViewUIHandler.prototype.HidePopups = function () {
  this.mSelectedRegionViewItem = null;
  this.mSelectedUnitID = simcity.kInvalidUnitRef;
  this.mHighlightedGreatWorkResource = this.mHighlightedGreatWorkOption = null;
  for (var a = 0, b = this.mRegionViewItems.length; a < b; ++a)
    this.ResetRegionViewItem(this.mRegionViewItems[a]);
  this.HideBuildSatelliteButton()
};
simcity.cRegionViewUIHandler.prototype.HideRegionUI = function () {
  this.HidePopups();
  null !== this.mMousedOverRegionViewItem && !this.mMousedOverRegionViewItem.mIsSelected && this.mMousedOverRegionViewItem.SetMouseSelectionState(simcity.kRegionViewItemMouseSelectionStates.unselected);
  this.mSelectedRegionViewItem = null;
  for (var a = Object.keys(this.mRegionViewItems), b = 0, c = a.length; b < c; b++)
    this.mRegionViewItems[a[b]].SetMouseSelectionState(simcity.kRegionViewItemMouseSelectionStates.unselected);
  this.mRootWindow.SetVisibility(!1)
};
simcity.cRegionViewUIHandler.prototype.UpdateGreatWorksResources = function () {
  if (this.mSelectedRegionViewItem && (this.mSelectedUnitRef = this.mViewingUnitRef = this.LookupUnitRef(this.mSelectedRegionViewItem.mRegionalBoxID, "local"), this.mSelectedUnitID = this.mSelectedRegionViewItem.mUnitID, null !== this.mSelectedUnitID && null !== this.mSelectedUnitRef)) {
    var a = simcity.GreatWorksRequirements[this.mSelectedUnitID];
    if (a) {
      for (var b = a.length, c = Array(b), d = {
          argumentLists : Array(b)
        }, e = 0, f = 0; e < b; ++e) {
        var g = a[e].dataBinding;
        c[e] = g;
        var h = [this.mSelectedUnitRef];
        2 === g.queries.length && h.push(f++);
        d.argumentLists[e] = h
      }
      var a = [],
      b = [],
      i = this;
      simcity.GenerateDataBindingQueries(c, a, d, b, !1);
      simcity.RequestDataBindingData(a, c, b, !1, function (a) {
        c[0].update(i.mSelectedRegionViewItem.mRootLayout, a[0]);
        i.mSelectedRegionViewItem.mRootLayout.FindControlByID(simcity.kRegionView_GreatWorksResourcesContainer);
        for (var a = c.length, b = 1; b < a; b++);
      })
    }
  }
};
simcity.cRegionViewUIHandler.prototype.UpdateGreatWorksResourcePopup = function () {
  if (null !== this.mHighlightedGreatWorkResource) {
    var a = simcity.GreatWorksRequirements[this.mSelectedUnitID][this.mHighlightedGreatWorkResource];
    if (a.hasOwnProperty("resource")) {
      var b = a.resource,
      c = null;
      b.mExportLayout.mIsVisible ? c = b.mExportLayout : b.mImportLayout.mIsVisible && (c = b.mImportLayout);
      if (c) {
        var d = c.FindControlByID(simcity.kRegionView_ResourceContributionParent);
        d.SetVisibility(!0);
        var e = [a.dataBindingLocalContribution],
        b = [],
        c = [this.mSelectedUnitRef];
        a.hasOwnProperty("resourceIndex") && c.push(a.resourceIndex);
        a = [];
        simcity.GenerateDataBindingQueries(e, b, {
          argumentList : c
        }, a, !1);
        simcity.RequestDataBindingData(b, e, a, !1, function (a) {
          e[0].update(d, a[0])
        })
      }
    }
  }
};
simcity.cRegionViewUIHandler.prototype.OnShowSiteUI = function () {
  this.mRootWindow.SetVisibility(!0);
  null !== this.mRegionData.mViewingBox ? this.mRegionData.mViewingBox && "true" === this.mRegionData.mViewingBox.isClaimed ? this.SetLowerPanelState(simcity.kRegionView_LowerPanelFriendCity) : this.SetLowerPanelState(simcity.kRegionView_LowerPanelUnclaimedCity) : this.SetLowerPanelState(simcity.kRegionView_LowerPanelGreatWork)
};
simcity.cRegionViewUIHandler.prototype.OnShowRegionUI = function () {
  simcity.gFriendController.UpdateFriendsFromServer();
  this.mRegionData.mViewingBox = this.mRegionData.mPlayingBox;
  this.mSelectedRegionViewItem || (this.mSelectedRegionViewItem = this.mRegionViewItems[this.mRegionData.mPlayingBox.uid]);
  if (this.mSelectedRegionViewItem) {
    this.UpdateRegionViewList();
    this.mViewingUnitRef = this.mSelectedRegionViewItem.mUnitRef;
    scrui.PostGameCommand(scrui.BuildCommand(["showCityRegionData", this.mRegionData.mPlayingBox.uid]));
    this.mRootWindow.FindControlByID(248382578).SetRawText(this.mRegionData.mRegionName);
    if (simcity.IsMainTutorialInProgress()) {
      var a = scrui.ParseLocaleString(this.mRegionData.mCityDefaultData.regionName);
      this.mRootWindow.FindControlByID(248382578).SetLocaleText(a)
    }
    this.mTimeSinceLastUpdate = simcity.kRegionViewUpdateTimeMS;
    this.mRootWindow.SetVisibility(!0);
    this.SetLowerPanelState(simcity.kRegionView_LowerPanelSelfCity);
    a = [scrui.BuildRequestQuery(["doesUnitExist", simcity.kPropSpaceCenter_N]), scrui.BuildRequestQuery(["doesUnitExist",
          simcity.kPropSpaceCenter_4U]), scrui.BuildRequestQuery(["doesUnitExist", simcity.kPropSpaceCenterSatellite_U]), scrui.BuildRequestQuery(["doesUnitExist", simcity.kPropSpaceCenterSatellite_N])];
    scrui.RequestGameData(a, function () {})
  } else
    simcity.gGlobalUIHandler.mAPIServerDataUIHandler.RefreshRegionAPIData()
};
simcity.cRegionViewUIHandler.prototype.ShowLowerPanel = function () {
  switch (this.mLowerPanelState) {
  case simcity.kRegionView_LowerPanelGreatWork:
    this.mGWLowerPanelUI.ShowGreatWorksLowerPanel();
    simcity.gGlobalUIHandler.mLayerUIHandler.DeactivateLayer();
    this.HideDataLayerContextPanel();
    break;
  case simcity.kRegionView_LowerPanelSelfCity:
    var a = this.mRegionData.mCityTradeData[this.mRegionData.mPlayingBox.uid];
    if (a && a.localData) {
      var b = a.localData.data.budget,
      a = simcity.GetFudgedPopulation(a.localData.data.population);
      this.mLowerPanels.mPlayingCity.mTextBudget.SetTextFromNumber(b);
      this.mLowerPanels.mPlayingCity.mTextPopulation.SetTextFromNumber(a)
    }
    break;
  case simcity.kRegionView_LowerPanelFriendCity:
    if (b = this.mRegionData.mConnectedUnits[this.mRegionData.mViewingBox.uid] || null, a = this.mViewingTradeUnitRefList[0] || null, b || a) {
      var a = [],
      c = [],
      d = {
        argumentList : [b]
      };
      b && (simcity.GenerateDataBindingQueries(simcity.kConnectedCitiesDataBindings, a, d, c, !1), simcity.RequestDataBindingData(a, simcity.kConnectedCitiesDataBindings, c,
          !1, function (a) {
          for (var b = 0, c = simcity.kConnectedCitiesDataBindings.length; b < c; ++b)
            simcity.kConnectedCitiesDataBindings[b].update(a[b])
        }));
      this.UpdateTradeIcons();
      a = this.mRegionData.mCityTradeData[this.mSelectedRegionViewItem.mRegionalBoxID];
      a.localData && (b = a.localData.data.budget, a = simcity.GetFudgedPopulation(a.localData.data.population), this.mLowerPanels.mFriendCity.mTextBudget.SetTextFromNumber(b), this.mLowerPanels.mFriendCity.mTextPopulation.SetTextFromNumber(a))
    } else
      this.mLowerPanels.mFriendCity.mTextPopulation.SetTextFromNumber(0),
      this.mLowerPanels.mFriendCity.mTextBudget.SetTextFromNumber(0)
  }
};
simcity.cRegionViewUIHandler.prototype.SetLowerPanelState = function () {};
simcity.cRegionViewUIHandler.prototype.GetRegionViewItem = function (a) {
  for (var b = 0, c = this.mRegionViewItems.length; b < c; ++b) {
    var d = this.mRegionViewItems[b];
    if (d.mUnitRef === a)
      return d
  }
  return null
};
simcity.cRegionViewUIHandler.prototype.GetGreatWorkData = function () {
  for (var a = simcity.kInvalidUnitRef, b = 0, c = 0, d = this.mRegionViewItems.length; c < d; ++c) {
    var e = this.mRegionViewItems[c];
    if (3939731971 !== e.mUnitID) {
      a = simcity.RequestUnitRefFromString(e.mUnitRef);
      b = e.mUnitID;
      break
    }
  }
  return {
    unitRef : a,
    unitID : b
  }
};
simcity.cRegionViewUIHandler.prototype.OnRegionViewItemClicked = function () {
  if (this.mSelectedRegionViewItem && (this.mSelectedUnitRef = this.LookupUnitRef(this.mSelectedRegionViewItem.mRegionalBoxID, "local")) && this.mRegionData.mGreatWorksLocal[this.mSelectedUnitRef] && this.mRegionData.mGreatWorksLocal[this.mSelectedUnitRef].regionViewItem)
    this.mSelectedUnitID = this.mRegionData.mGreatWorksLocal[this.mSelectedUnitRef].regionViewItem.mUnitID || null
};
simcity.cRegionViewUIHandler.prototype.OnRegionViewMouseOver = function (a) {
  this.mSelectedUnitRef = scrui.RequestStringFromUnitRef(a.unitRef);
  this.mSelectedUnitID = a.unitID
};
simcity.cRegionViewUIHandler.prototype.OnRegionViewMouseOut = function () {};
simcity.cRegionViewUIHandler.prototype.GetSelectedViewItem = function () {
  return this.mSelectedRegionViewItem
};
simcity.cRegionViewUIHandler.prototype.ShowGWCompletePanel = function (a, b) {
  b = b[0];
  this.mGWCompleteDialog = gUIManager.LoadAndCacheLayout("Layouts/Region/GreatWorksCompletion.js", gUIManager.GetRootWindow());
  this.mGWCompleteDialog.FindControlByID(simcity.kGWCompleteOKButton).mUserData = a;
  this.mGWCompleteDialog.FindControlByID(228252799).SetLocaleText(b.text);
  this.mGWCompleteDialog.FindControlByID(228252804).SetLocaleText(b.completionText);
  this.mGWCompleteDialog.FindControlByID(233843597).SetWindowImage(b.completionImage);
  this.mGWCompleteDialog.FindControlByID(248970878).SetWindowImage(b.headerIcon);
  this.mGWCompleteDialog.FindControlByID(250094611).SetLocaleText(b.descriptionText);
  var c = b.benefitsArray,
  d = [248958889, 248958886, 248958890];
  2 == c.length && (d = [248958886, 248958890, 248958889]);
  for (var e = 0, f = d.length; e < f; e++) {
    var g = this.mGWCompleteDialog.FindControlByID(d[e]);
    c[e] ? (g.FindControlByID(234460646).SetLocaleText(c[e].localeString), g.FindControlByID(234461784).SetWindowImage(c[e].altIcon)) : g.SetVisibility(!1)
  }
  this.mGWCompleteDialog.FindControlByID(250093099).SetVisibility(!0);
  simcity.SendSoundEvent(simcity.audio.kGlobalSoundObjectID, simcity.audio.kInstanceUIGreatWorkComplete);
  simcity.gGlobalUIHandler.mTutorialManager.SetModalWindow(this.mGWCompleteDialog, !0)
};
simcity.cRegionViewUIHandler.prototype.ZoomToGreatWork = function (a) {
  this.mTimeSinceLastUpdate = simcity.kRegionViewUpdateTimeMS;
  var b = gUIManager.FindControlByID(simcity.kBtnRegionCamera);
  if (b && !1 == b.mIsSelected) {
    var c = b.GetAbsolutePosition();
    b.Private_OnClick(c[0], c[1])
  }
  gUIManager.FindControlByID(simcity.kWinMouseEaterID).SetVisibility(!1);
  simcity.gGlobalUIHandler.mRegionViewUIHandler.OnShowRegionUI();
  scrui.PostGameCommand(scrui.BuildCommand([simcity.kDataToolMessage, scrui.IDFromName("lookAtUnit"), simcity.kDataUnitRef,
        this.mViewingUnitRef]));
  scrui.PostGameCommand(scrui.BuildCommand([simcity.kDataToolMessage, 2545779150, simcity.kDataUnitRef, a]));
  scrui.PostGameCommand(scrui.BuildCommand([simcity.kDataToolMessage, scrui.IDFromName("StartCinematic")]));
  simcity.gGlobalUIHandler.mRegionViewUIHandler.mViewingUnitRef = a;
  simcity.gGlobalUIHandler.mSharedUIParent.SetVisibility(!1);
  simcity.gGlobalUIHandler.mCityUIParent.SetVisibility(!1);
  simcity.gGlobalUIHandler.mRegionUIParent.SetVisibility(!1);
  this.UpdateRegionViewList()
};
simcity.cRegionViewUIHandler.prototype.ZoomToCity = function (a) {
  this.mTimeSinceLastUpdate = simcity.kRegionViewUpdateTimeMS;
  if (a) {
    gUIManager.FindControlByID(simcity.kWinMouseEaterID).SetVisibility(!1);
    this.UpdateRegionViewList();
    var b = this.LookupUnitRef(a, "local"),
    c = this.GetRegionalBoxType(a);
    if (!("greatwork" == c && simcity.IsTutorialInProgress())) {
      this.mViewingUnitRef = b;
      "greatwork" == c ? (this.mRegionData.mViewingBox = null, scrui.PostGameCommand(scrui.BuildCommand([simcity.kDataToolMessage, scrui.IDFromName("lookAtUnit"),
              simcity.kDataUnitRef, this.mViewingUnitRef])), scrui.PostGameCommand(scrui.BuildCommand([simcity.kDataToolMessage, 2545779150, simcity.kDataUnitRef, this.mViewingUnitRef]))) : (this.mRegionData.mViewingBox = this.mRegionData.mBoxes[a], this.RefreshRegionTradeUnitList(), this.UpdateRegionResourceData(), null === this.mViewingUnitRef ? (scrui.PostGameCommand(scrui.BuildCommand(["camera", "immediate", !1, "move", "[0, 0, 0]"])), simcity.gGlobalUIHandler.mRegionViewUIHandler.OnShowRegionUI()) : (scrui.PostGameCommand(scrui.BuildCommand([simcity.kDataToolMessage,
                scrui.IDFromName("lookAtUnit"), simcity.kDataUnitRef, this.mViewingUnitRef])), scrui.PostGameCommand(scrui.BuildCommand([simcity.kDataToolMessage, 2545779150, simcity.kDataUnitRef, this.mViewingUnitRef])), this.mRegionData.mCityDefaultData && simcity.gGlobalUIHandler.mRegionViewUIHandler.OnShowSiteUI()), this.mIsContextPanelActive && this.UpdateDataLayerContextPanel());
      scrui.PostGameCommand(scrui.BuildCommand(["showCityRegionData", a]));
      scrui.PostGameCommand(scrui.BuildCommand([simcity.kDataToolMessage, scrui.IDFromName("setSelectedRegionUnit"),
            simcity.kDataSourceUnitRegionalBoxUniqueID, a]));
      for (var d in this.mRegionViewItems)
        (a = this.mRegionViewItems[d]) && (a.mControlCache && a.mControlCache.zoomButton) && (a != this.mSelectedRegionViewItem ? a.mControlCache.zoomButton.SetEnabled(!0) : a.mControlCache.zoomButton.SetEnabled(!1))
    }
  }
};
simcity.cRegionViewUIHandler.prototype.SetStartingRegionPanel = function (a) {
  switch (a) {
  case simcity.kCategoryIDZones:
  case simcity.kCategoryIDRCI:
    this.mSelectedDataLayerID = simcity.kRegionDataLayer_Workers;
    break;
  case simcity.kCategoryIDEducation:
    this.mSelectedDataLayerID = simcity.kRegionDataLayer_Students;
    break;
  case simcity.kCategoryIDTransport:
  case simcity.kCategoryIDMassTransit:
  case simcity.kCategoryIDBusStation:
  case simcity.kCategoryIDBusStop:
    this.mSelectedDataLayerID = simcity.kRegionDataLayer_Transport;
    break;
  case simcity.kCategoryIDPower:
    this.mSelectedDataLayerID = simcity.kRegionDataLayer_Power;
    break;
  case simcity.kCategoryIDWater:
    this.mSelectedDataLayerID = simcity.kRegionDataLayer_Water;
    break;
  case simcity.kCategoryIDSewage:
    this.mSelectedDataLayerID = simcity.kRegionDataLayer_Sewage;
    break;
  case simcity.kCategoryIDGarbage:
    this.mSelectedDataLayerID = simcity.kRegionDataLayer_Garbage;
    break;
  case simcity.kCategoryIDFire:
    this.mSelectedDataLayerID = simcity.kRegionDataLayer_Fire;
    break;
  case simcity.kCategoryIDPolice:
    this.mSelectedDataLayerID =
      simcity.kRegionDataLayer_Police;
    break;
  case simcity.kCategoryIDHealth:
    this.mSelectedDataLayerID = simcity.kRegionDataLayer_Health;
    break;
  case simcity.kCategoryIDManufacturing:
    this.mSelectedDataLayerID = simcity.kRegionDataLayer_ResourceGifting;
    break;
  default:
    this.mSelectedDataLayerID = null
  }
};
simcity.cRegionViewUIHandler.prototype.ShowStartingRegionPanel = function () {
  if (this.mSelectedDataLayerID) {
    var a = this.mDataLayerButtons[scrui.DecimalToHex(this.mSelectedDataLayerID)];
    if (a) {
      if (null !== this.mSelectedDataControl && (this.mSelectedDataControl.SetSelected(!1), this.mSelectedDataLayerID = this.mSelectedDataControl = null, simcity.gGlobalUIHandler.mLayerUIHandler.DeactivateLayer(), this.HideDataLayerContextPanel()), a = a.FindControlByID(simcity.kRegionView_DataLayerButton))
        a.SetSelected(!0), this.mSelectedDataControl =
          a, this.mSelectedDataLayerID = a.mUserData, this.ShowDataLayerContextPanel()
    } else
      this.mSelectedDataLayerID = null
  }
};
simcity.cRegionViewUIHandler.prototype.ShowStartingCityPanel = function () {
  var a = simcity.kRegionDataLayers_ContextPanels[this.mSelectedDataLayerID],
  b = simcity.gGlobalUIHandler.mToolPaletteUIHandler;
  b.mLastSelectedMainCategoryID = 0;
  a && a.cityToolPanelID && (b.mLastSelectedMainCategoryID = a.cityToolPanelID)
};
simcity.cRegionViewUIHandler.prototype.EnterRegionView = function () {
  scrui.PostGameCommand(simcity.gGlobalUIHandler.mRegionViewCommand);
  simcity.gGlobalUIHandler.mSpeedUIHandler.GetGameSpeed() != simcity.kSpeedPaused && (simcity.gGlobalUIHandler.mSpeedUIHandler.sPreviousGameSpeed = simcity.gGlobalUIHandler.mSpeedUIHandler.GetGameSpeed(), scrui.PostGameCommand(scrui.BuildCommand(["setspeed", simcity.kSpeedTurtle])));
  simcity.gGlobalUIHandler.mToyTaskPanelUIHandler.SetVisible(!1);
  this.ShowStartingRegionPanel();
  var a = gUIManager.FindControlByID(248193223);
  a && a.SetSelected(!1)
};
simcity.cRegionViewUIHandler.prototype.OnReturnToCityButtonClicked = function () {
  this.mSelectedRegionViewItem = null;
  return this.ReturnToPlayingCity()
};
simcity.cRegionViewUIHandler.prototype.ReturnToPlayingCity = function () {
  var a = !1;
  simcity.gGlobalUIHandler.mRegionViewUIHandler.IsVisible() && (null != this.mSelectedDataControl && this.mSelectedDataControl.SetSelected(!1), simcity.gGlobalUIHandler.mLayerUIHandler.DeactivateLayer(), simcity.gGlobalUIHandler.mMissionUI.mMissionContainer.SetVisibility(!0), this.HideDataLayerContextPanel(), this.mGWLowerPanelUI.HideGreatWorksLowerPanel(), this.mLowerPanelState = this.mViewingUnitRef = null, scrui.PostGameCommand(simcity.kReturnToCityCommand),
    0 <= simcity.gGlobalUIHandler.mSpeedUIHandler.sPreviousGameSpeed && scrui.PostGameCommand(scrui.BuildCommand(["setspeed", simcity.gGlobalUIHandler.mSpeedUIHandler.sPreviousGameSpeed])), this.ShowStartingCityPanel(), a = !0);
  return a
};
simcity.cRegionViewUIHandler.prototype.ShowIntroductionPanel = function (a) {
  this.mIntroductionDialog = gUIManager.LoadAndCacheLayout("Layouts/Region/GreatWorkIntroduction.js", this.mRootWindow);
  this.mIntroductionDialog.FindControlByID(228252799).SetLocaleText(a.text);
  this.mIntroductionDialog.FindControlByID(228252804).SetLocaleText(a.overviewText);
  if (a.hasOwnProperty("resources") && (a = simcity.GreatWorksRequirements[a.resources]))
    for (var b = 0, c = a.length; b < c; ++b) {
      var d = this.mIntroductionDialog.FindControlByID(228252992 +
          b);
      d && d.SetWindowImage(a[b].icon)
    }
  simcity.gGlobalUIHandler.mTutorialManager.SetModalWindow(this.mIntroductionDialog, !0)
};
simcity.cRegionViewUIHandler.prototype.ShowLaunchButton = function (a) {
  var b = this.mRootWindow.mIsVisible;
  b.mIsVisible || (b = simcity.gGlobalUIHandler.mSharedUIParent);
  this.mLaunchDialog = gUIManager.LoadAndCacheLayout("Layouts/Region/LaunchSatelliteButton.js", b);
  this.mLaunchDialog.FindControlByID(234650414).SetVisibility(!0);
  this.mLaunchDialog.FindControlByID(234650669).SetVisibility(!1);
  a = a && a.unitRef ? scrui.RequestStringFromUnitRef(a.unitRef) : null;
  this.mLaunchDialog.FindControlByID(234650417).mUserData =
    a
};
simcity.cRegionViewUIHandler.prototype.LaunchSatellite = function (a) {
  this.mLaunchDialog.DestroyControl();
  simcity.CreateUnit("GreatWorks_Button_LaunchSatellite", a.mUserData || null)
};
simcity.cRegionViewUIHandler.prototype.ShowLaunchConfirm = function () {
  var a = this.mRootWindow;
  a.mIsVisible || (a = simcity.gGlobalUIHandler.mSharedUIParent);
  this.mLaunchDialog = gUIManager.LoadAndCacheLayout("Layouts/Region/LaunchSatelliteButton.js", a);
  this.mLaunchDialog.FindControlByID(234650414).SetVisibility(!1);
  this.mLaunchDialog.FindControlByID(234650669).SetVisibility(!0)
};
simcity.cRegionViewUIHandler.prototype.RunOnExitBoxRules = function () {
  var a = simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData;
  if (a && a.mPlayingBox && !simcity.IsMainTutorialInProgress()) {
    var b = a.mCityTradeData[a.mPlayingBox.uid];
    if (b && b.connections && (b = Object.keys(b.connections)))
      for (var c = 0, d = b.length; c < d; c++) {
        var e = a.mBoxes[b[c]];
        e && (e = parseInt(e.uid), scrui.PostGameCommand(scrui.BuildCommand(["runUnitPlayerRule", a.mConnectedUnits[e], simcity.kRuleIDSCPlayerRuleOnExitBox])))
      }
    a = [scrui.BuildRequestQuery([simcity.kDataCachedUnits,
          simcity.kPropTrading_MapHandler])];
    scrui.RequestGameData(a, function (a) {
      (a = a[0]) && a[0] && scrui.PostGameCommand(scrui.BuildCommand(["runUnitPlayerRule", scrui.RequestStringFromUnitRef(a[0]), simcity.kRuleIDSCPlayerRuleOnExitBox]))
    })
  }
};
simcity.cRegionViewUIHandler.prototype.LaunchCity = function (a) {
  if (!this.mIsLoadingBox) {
    this.mIsLoadingBox = !0;
    this.RunOnExitBoxRules();
    gUIManager.UnregisterAllUIHandlers();
    simcity.gLoadingScreenUIHandler.Initialize(!0);
    simcity.gLoadingScreenUIHandler.Show();
    simcity.gLoadingScreenUIHandler.SetRegionByKey(this.mRegionData.mRegionTypeName);
    for (var b = "", c = "", d = Object.keys(this.mRegionData.mBoxes), e = 0, f = d.length; e < f; e++) {
      var g = d[e];
      if (this.mRegionData.mBoxes[g].id == a) {
        b = this.mRegionData.mBoxes[g].name;
        c =
          this.mRegionData.mCityDefaultData.cities[g].cityName;
        break
      }
    }
    "" == b && (b = scrui.ParseLocaleString(c).LoadAndGetTextSynchronous());
    simcity.gLoadingScreenUIHandler.SetCityName(b);
    scrui.PostGameCommand(scrui.BuildCommand(["loadGame", a, !1]))
  }
};
simcity.cRegionViewUIHandler.prototype.LaunchLastCity = function () {
  var a = [scrui.BuildRequestQuery(["lastPlayedBox", "boxID"])],
  b = this;
  scrui.RequestGameData(a, function (a) {
    a && 0 < a[0] && b.LaunchCity(a[0])
  })
};
simcity.cRegionViewUIHandler.prototype.ZoomToAndLaunchLastCity = function () {
  var a = [scrui.BuildRequestQuery(["lastPlayedBox", "regionalBoxUID"]), scrui.BuildRequestQuery(["lastPlayedBox", "boxID"])],
  b = this,
  c = simcity.gGlobalUIHandler;
  scrui.RequestGameData(a, function (a) {
    a && (0 < a[0] && 0 < a[1] ? (b.ZoomToCity(a[0]), b.LaunchCity(a[1])) : (c.mNewspaperUIHandler.Shutdown(), c.mTicker.Shutdown(), scrui.PostGameCommand(scrui.BuildCommand([simcity.kDataQuit]))))
  })
};
simcity.cRegionViewUIHandler.prototype.PrompLeavingSpectatorCity = function (a) {
  var b = simcity.gGlobalUIHandler,
  c = this;
  b.mDialogManager.ShowPrompt({
    title : b.mLocaleStrings.kExitToMenuText,
    titleParams : null,
    message : b.mLocaleStrings.kExitToMenuConfirmationMsg,
    messageParams : null,
    buttons : [{
        text : b.mLocaleStrings.kCancelText,
        onClick : function () {
          c.ReturnToPlayingCity()
        }
      }, {
        text : b.mLocaleStrings.kExitText,
        onClick : function () {
          a && 0 < a ? c.LaunchCity(a) : (b.mNewspaperUIHandler.Shutdown(), b.mTicker.Shutdown(), scrui.PostGameCommand(scrui.BuildCommand([simcity.kDataQuit])))
        }
      }
    ]
  })
};
simcity.cRegionViewUIHandler.prototype.ShowBuildSatelliteButton = function (a) {
  var b = this.mRootWindow;
  b.mIsVisible || (b = simcity.gGlobalUIHandler.mSharedUIParent);
  this.mBuildSatelliteDialog = gUIManager.LoadAndCacheLayout("Layouts/Region/BuildSatelliteButton.js", b);
  this.mBuildSatelliteDialog.SetVisibility(!0);
  a = a && a.unitRef ? scrui.RequestStringFromUnitRef(a.unitRef) : null;
  this.mBuildSatelliteDialog.FindControlByID(simcity.kRegionView_BuildSatelliteButton).mUserData = a
};
simcity.cRegionViewUIHandler.prototype.BuildSatellite = function () {
  this.mBuildSatelliteDialog.DestroyControl();
  var a = [scrui.BuildRequestQuery(["getToyOfType", simcity.kPropSpaceCenter_N]), scrui.BuildRequestQuery(["getToyOfType", simcity.kPropSpaceCenter_4U])];
  scrui.RequestGameData(a, function (a) {
    var c = a[0],
    a = a[1];
    if (c || a)
      simcity.CreateUnit("GreatWorks_SpaceCenterSatellite_01_01_U", null != c ? c : a)
  })
};
simcity.cRegionViewUIHandler.prototype.HideBuildSatelliteButton = function () {
  this.mBuildSatelliteDialog && this.mBuildSatelliteDialog.DestroyControl()
};
simcity.cRegionViewUIHandler.prototype.GetDataLayerButton = function (a) {
  return this.mDataLayerButtons[scrui.DecimalToHex(a)].FindControlByID(simcity.kRegionView_DataLayerButton)
};
simcity.cRegionViewUIHandler.prototype.ShowDataLayerButtons = function () {
  for (var a = {
      greatworkDatabinding : simcity.kRegionDataLayers.greatwork,
      commuterDatabinding : simcity.kRegionDataLayers.commuters,
      servicesDatabinding : simcity.kRegionDataLayers.services,
      utilDatabinding : simcity.kRegionDataLayers.utilities,
      giftingDatabinding : simcity.kRegionDataLayers.gifting,
      transportDatabinding : simcity.kRegionDataLayers.transport
    }, b = Object.keys(a), c = 0, d = b.length; c < d; c++) {
    var e = a[b[c]],
    f = this.mRootWindow.FindControlByID(e.targetControl);
    f.DestroyChildren();
    for (var g = e.layers.length, h = 0; h < g; h++) {
      var i = e.layers[h],
      j = gUIManager.LoadAndCacheLayout("Layouts/Region/DataLayerbutton2.js", f);
      j.FindControlByID(simcity.kRegionView_DataLayerButtonIconNormal).SetWindowImage(simcity.kRegionDataLayers_IconPath + i.icon);
      j.FindControlByID(simcity.kRegionView_DataLayerButtonIconNormalOn).SetWindowImage(simcity.kRegionDataLayers_IconPath + i.iconWhite);
      j.FindControlByID(simcity.kRegionView_DataLayerButtonIconCritical).SetWindowImage(simcity.kRegionDataLayers_IconPath +
        i.iconRed);
      j.FindControlByID(simcity.kRegionView_DataLayerButton).mUserData = i.key;
      this.mDataLayerButtons[scrui.DecimalToHex(i.key)] = j;
      j.SetPosition(h * j.mWidth, 5);
      simcity.SetTooltipHelper(j, i.label);
      this.mDataLayerButtonSparkles[i.key] = j.FindControlByID(simcity.kRegionView_DataLayerButtonAnimTradeOpportunity)
    }
  }
};
simcity.cRegionViewUIHandler.prototype.ClaimBox = function (a) {
  if (!this.mIsClaimingBox) {
    this.mIsClaimingBox = !0;
    var b = this.mSelectedRegionViewItem.mBoxApiData.serverBoxID;
    if (b)
      var c = scrui.ParseLocaleString(this.mRegionData.mCityDefaultData.cities[this.mSelectedRegionViewItem.mBoxApiData.regionalBoxID].cityName).LoadAndGetTextSynchronous(), d = simcity.gGlobalUIHandler.mRegionID, e = this, c = {
        url : scrui.GetRestPath() + "/region/" + d + "/boxes/" + b + "/owner.json",
        params : [["boxName", c], ["boxDescription", ""]],
        onSuccess : function () {
          e.mIsClaimingBox =
            !1;
          e.LaunchCity(b)
        },
        onError : function () {
          a && a.SetEnabled(!0);
          e.mIsClaimingBox = !1
        },
        method : "post"
      };
    scrui.XHR.Request(c)
  }
};
simcity.cRegionViewUIHandler.prototype.ShowDataLayerContextPanel = function () {
  if (simcity.gGlobalUIHandler.mRegionCameraButton.mIsSelected) {
    var a = simcity.kRegionDataLayers_ContextPanels[this.mSelectedDataLayerID] || simcity.kRegionDataLayers_ContextPanels[simcity.kRegionDataLayer_GreatWorks];
    this.mContextPanelDataBinding = a || null;
    this.mSelectedRegionViewItem && ("greatwork" == this.mSelectedRegionViewItem.mViewUnitType && "greatworks" != this.mContextPanelDataBinding.tradeType) && (this.mSelectedRegionViewItem = null);
    this.ClearHeavyLayerButtons();
    this.ActivateLightDataLayer();
    this.mRegionAdvisors.ShowAdvisor(this.mSelectedDataLayerID);
    var b = this.mRootWindow.FindControlByID(253387885);
    b.mParentControl.SetVisibility(!1);
    if (this.mContextPanelDataBinding && this.mContextPanelDataBinding.layout) {
      this.mContextPanelContainer.DestroyChildren();
      var c = null;
      if (c = (c = "greatworks" == this.mContextPanelDataBinding.tradeType ? null : null !== this.mSelectedRegionViewItem ? this.GetRegionalConnectedCities(this.mSelectedRegionViewItem.mRegionalBoxID) :
            this.GetRegionalConnectedCities(this.mRegionData.mPlayingBox.uid)) ? c[0] : null) {
        var d = c[1],
        e = [],
        f;
        for (f in d)
          for (var g = 0, c = a.connectionData.length; g < c; g++)
            d[f].type == a.connectionData[g].type && e.unshift(d[f]);
        0 < e.length && (a.connectionData = e);
        this.mContextPanelData = a.connectionData;
        this.mContextPanelObj = gUIManager.LoadAndCacheLayout(this.mContextPanelDataBinding.layout, this.mContextPanelContainer);
        if (a.heavyLayers) {
          b.mParentControl.SetVisibility(!0);
          var h = this,
          i = a.heavyLayers.length;
          f = Array(i);
          d = 0;
          for (c =
              i; d < c; ++d)
            e = 3 * d, g = scrui.RequestStringFromKey(new simcity.cKey(1088479232, a.heavyLayers[d], scrui.kResourceTypePropertyList)), f[e] = scrui.BuildRequestQuery([simcity.kDataProperties, g, simcity.kPropertyLayerName]), f[e + 1] = scrui.BuildRequestQuery([simcity.kDataProperties, g, simcity.kPropertyLayerIconKey]), f[e + 2] = scrui.BuildRequestQuery([simcity.kDataProperties, g, simcity.kPropertyLayerDarkIconKey]);
          scrui.RequestGameData(f, function (c) {
            for (var d = i - 1; d >= 0; --d) {
              var e = d * 3,
              f = gUIManager.LoadAndCacheLayout("Layouts/Palette/PaletteLayerToggle2.js",
                  b);
              f.SetPosition(0, d * f.mHeight);
              var g = Number(a.heavyLayers[d]);
              f.mUserData = g;
              f.mAllLayersButton = true;
              for (var p = f.FindControlByID(231251442).mExposedProperties, q = 0, o = p.length; q < o; ++q) {
                var r = p[q],
                s = scrui.cProperties.GetPropertyDataByID(r.mPropertyID);
                switch (r.mPropertyLabel) {
                case "WhiteIcon":
                  s.mSet(r.mControl, scrui.PathFromResourceKey(c[e + 1]));
                  break;
                case "DarkIcon":
                  var t = c[e + 2];
                  t || (t = c[e + 1]);
                  s.mSet(r.mControl, scrui.PathFromResourceKey(t));
                  break;
                case "TooltipText":
                  if (t = c[e]) {
                    t = "/" + scrui.DecimalToHex(t.tableID) +
                      "/" + scrui.DecimalToHex(t.stringID);
                    s.mSet(r.mControl, t)
                  }
                  break;
                case "UserData":
                  s.mSet(r.mControl, g)
                }
              }
              h.mLayerButtons.push(f);
              simcity.gGlobalUIHandler.mLayerUIHandler.RegisterLayerButton(f)
            }
          })
        }
        this.mIsContextPanelActive = !0;
        this.mContextPanelAnim.Start(scrui.cAnimation.kPlayForward);
        this.UpdateDataLayerContextPanel()
      } else
        this.mGWLowerPanelUI.ShowGreatWorksLowerPanel(this.mSelectedRegionViewItem), this.mContextPanelContainer.DestroyChildren(), this.mContextPanelObj = gUIManager.LoadAndCacheLayout(simcity.kRegionDataLayers_ContextPanels[simcity.kRegionDataLayer_GreatWorks].layout,
            this.mContextPanelContainer), this.mContextPanelAnim.Start(scrui.cAnimation.kPlayForward)
    }
  }
};
simcity.cRegionViewUIHandler.prototype.ForceGWUnitSelected = function () {
  var a = this.GetConnectedGWID();
  a && (simcity.gEventManager.TriggerEvent(simcity.gEventTypes.GENERICEVENT, a, null), null !== this.mSelectedRegionViewItem && this.mSelectedRegionViewItem.SetMouseSelectionState(simcity.kRegionViewItemMouseSelectionStates.unselected), (this.mSelectedRegionViewItem = this.mRegionViewItems[a]) && this.mSelectedRegionViewItem.SetMouseSelectionState(simcity.kRegionViewItemMouseSelectionStates.selected), this.ZoomToCity(a))
};
simcity.cRegionViewUIHandler.prototype.GetConnectedGWID = function () {
  for (var a = Object.keys(this.mRegionData.mConnectedUnits), b = Object.keys(this.mRegionData.mGreatWorksRegional), c = 0; c < a.length; c++)
    for (var d = 0; d < b.length; d++) {
      var e = b[d];
      if (a[c] == e)
        return e
    }
  return null
};
simcity.cRegionViewUIHandler.prototype.ActivateLightDataLayer = function () {
  simcity.gGlobalUIHandler.mLayerUIHandler.ActivateLayer(this.mSelectedDataLayerID)
};
simcity.cRegionViewUIHandler.prototype.ClearHeavyLayerButtons = function () {
  for (var a = this.mLayerButtons.length - 1; 0 <= a; a--)
    simcity.gGlobalUIHandler.mLayerUIHandler.UnregisterLayerButton(this.mLayerButtons[a]), this.mLayerButtons[a].DestroyControl();
  this.mLayerButtons = []
};
simcity.cRegionViewUIHandler.prototype.UpdateDataLayerContextPanel = function () {
  if (this.mContextPanelDataBinding && this.mContextPanelDataBinding.tradeType && this.mContextPanelContainer.mChildren && (this.mContextPanelDataBinding.tokenType || this.mContextPanelDataBinding.tradeType || this.mContextPanelDataBinding.giftingType || this.mContextPanelDataBinding.greatWorksType))
    switch (this.mContextPanelDataBinding.tradeType) {
    case "token":
      this.mTradeUI.ShowTokenUI(this.mContextPanelDataBinding.tokenType);
      break;
    case "trade":
      this.mTradeUI.ShowTradeUI(this.mContextPanelDataBinding.utilityType);
      break;
    case "gifting":
      this.mTradeUI.ShowGiftingUI(this.mContextPanelDataBinding.giftingType);
      break;
    case "greatworks":
      this.ShowDataLayerContextPanel()
    }
};
simcity.cRegionViewUIHandler.prototype.HideDataLayerContextPanel = function () {
  this.ClearHeavyLayerButtons();
  this.mContextPanelContainer.DestroyChildren();
  this.mIsContextPanelActive = !1;
  this.mGWLowerPanelUI.HideGreatWorksLowerPanel();
  this.mContextPanelAnim.Start(scrui.cAnimation.kPlayReverse)
};
simcity.cRegionViewUIHandler.prototype.LoadTradeIcons = function () {};
simcity.cRegionViewUIHandler.prototype.UpdateTradeIcons = function () {};
simcity.cRegionViewUIHandler.prototype.RefreshRegionTradeUnitList = function () {
  if (this.mSelectedRegionViewItem) {
    var a = this;
    scrui.RequestGameData([scrui.BuildRequestQuery(["RegionTradeUnits", this.mSelectedRegionViewItem.mRegionalBoxID])], function (b) {
      a.mViewingTradeUnitRefList = b
    })
  }
};
simcity.UpdateIconForResource = function (a, b, c, d) {
  c = 0 !== c;
  a.exportingIcon.SetVisibility(c);
  c ? a.importingIcon.SetVisibility(!1) : a.importingIcon.SetVisibility(0 !== b);
  a.toggleIncomingButton && a.toggleIncomingButton.SetSelected(d)
};
simcity.cRegionViewUIHandler.prototype.GetClaimedCities = function () {
  return this.mRegionData.mCities
};
simcity.cRegionViewUIHandler.prototype.GetRegionalConnectedCities = function (a) {
  var b = [],
  c;
  for (c in this.mRegionData.mCityTradeData) {
    var d = this.mRegionData.mCityTradeData[c];
    d && d.connections && (d = d.connections[a]) && d.hasOwnProperty("connectionData") && b.push([this.mRegionData.mBoxes[c], d.connectionData])
  }
  return b
};
simcity.cRegionViewUIHandler.prototype.GetDirectionalCityTradeData = function (a, b) {
  var c = this.mRegionData.mCityTradeData[a].connections[b];
  return c && c.hasOwnProperty("connectionData") ? c.connectionData : null
};
simcity.cRegionViewUIHandler.prototype.GetCityTradeData = function (a) {
  for (var b = {
      outgoing : [],
      incoming : []
    }, c = this.GetRegionalConnectedCities(a), d = 0, e = c.length; d < e; d++) {
    var f = c[d],
    g = f[0],
    f = f[1];
    b.outgoing.push({
      cityData : g,
      tradeData : {
        fireToken : 1 === f.tradeTokens.data.fireToken ? !0 : !1,
        garbageToken : 1 === f.tradeTokens.data.garbageToken ? !0 : !1,
        policeToken : 1 === f.tradeTokens.data.policeToken ? !0 : !1,
        healthToken : 1 === f.tradeTokens.data.healthToken ? !0 : !1,
        fireTokenPending : f.tradeTokens.data.fireTokenPending,
        garbageTokenPending : f.tradeTokens.data.garbageTokenPending,
        policeTokenPending : f.tradeTokens.data.policeTokenPending,
        healthTokenPending : f.tradeTokens.data.healthTokenPending,
        tradingPower : f.power.data.tradePower,
        tradingWater : f.water.data.tradingWater
      }
    });
    for (var f = this.GetRegionalConnectedCities(g.uid), h = 0, i = f.length; h < i; h++) {
      var j = f[h];
      j[0].uid == a && (j = j[1], b.incoming.push({
          cityData : g,
          tradeData : {
            fireToken : 1 === j.tradeTokens.data.fireToken ? !0 : !1,
            garbageToken : 1 === j.tradeTokens.data.garbageToken ? !0 : !1,
            policeToken : 1 === j.tradeTokens.data.policeToken ? !0 : !1,
            healthToken : 1 ===
            j.tradeTokens.data.healthToken ? !0 : !1,
            fireTokenPending : j.tradeTokens.data.fireTokenPending,
            garbageTokenPending : j.tradeTokens.data.garbageTokenPending,
            policeTokenPending : j.tradeTokens.data.policeTokenPending,
            healthTokenPending : j.tradeTokens.data.healthTokenPending,
            tradingPower : j.power.data.tradePower,
            tradingWater : j.water.data.tradingWater
          }
        }))
    }
  }
  return b
};
simcity.cRegionViewUIHandler.prototype.IsConnectedCity = function (a) {
  return this.mRegionData.mConnectedUnits[a] ? !0 : !1
};
simcity.cRegionViewUIHandler.prototype.IsClaimedCity = function (a) {
  return this.mRegionData.mCities[a] ? !0 : !1
};
simcity.cRegionViewUIHandler.prototype.IsPlayingCity = function (a) {
  return this.mRegionData.mPlayingBox.uid == a ? !0 : !1
};
simcity.cRegionViewUIHandler.prototype.IsOwnCity = function (a) {
  return this.IsClaimedCity(a) && this.mRegionData.mCities[a].creator.screenName === simcity.gGlobalUIHandler.mScreenName ? !0 : !1
};
simcity.cRegionViewUIHandler.prototype.PushPlayerListToClient = function () {
  var a = '{"ids":[',
  b = 0,
  c;
  for (c in this.mRegionData.mCities) {
    var d = this.mRegionData.mCities[c];
    0 !== b && (a += ",");
    a += '{"city":' + c + ',"user":' + d.creatorId + "}";
    b++
  }
  scrui.PostGameCommand(scrui.BuildCommand(["RegionPlayers", a + "]}"]))
};
simcity.cRegionViewUIHandler.prototype.RefreshGreatWorksData = function (a) {
  if (a)
    for (var b = 0, c = a.greatworks.length; b < c; b++) {
      var d = a.greatworks[b];
      this.mRegionData.mGreatWorksRegional[d.UID] = d;
      this.mRegionData.mRegionUnitsLookup[d.UID] && (this.mRegionData.mRegionUnitsLookup[d.UID].regionalUnitRef = scrui.RequestStringFromUnitRef(d.unitRef), this.mGreatWorkDataLoaded = !0)
    }
  else
    scrui.PostGameCommand(scrui.BuildCommand(["RequestGreatWorksContributors"]))
};
simcity.cRegionViewUIHandler.prototype.IsDataLoaded = function () {
  return 0 == simcity.gGlobalUIHandler.mRegionID || this.mRegionData.mTotals.boxes ? !0 : Object.keys(this.mRegionData.mRegionUnitsLookup).length ? !0 : !1
};
simcity.cRegionViewUIHandler.prototype.LookupUnitRef = function (a, b) {
  var c = this.mRegionData.mRegionUnitsLookup;
  if (c.hasOwnProperty(a))
    switch (c = c[a], b) {
    case "local":
      return c.localUnitRef;
    default:
      return c.regionalUnitRef
    }
  return null
};
simcity.cRegionViewUIHandler.prototype.GetRegionalBoxType = function (a) {
  return this.mRegionData.mRegionUnitsLookup[a] ? this.mRegionData.mRegionUnitsLookup[a].type || null : null
};
simcity.cRegionViewUIHandler.prototype.UpdateRegionalAlerts = function () {
  for (var a = this.mRegionData.mTotals.cities, b = Object.keys(this.mRegionData.mCities), c = 0, d = simcity.kRegionalAlerts.length; c < d; c++)
    for (var e = simcity.kRegionalAlerts[c], f = 0; f < a; f++) {
      var g = this.mRegionData.mCities[b[f]].uid,
      h = this.GetRegionalConnectedCities(g)[0];
      if (h) {
        for (var h = h[1], i = Object.keys(h), j = Object.keys(e.connectionData), k = [], l = 0, m = i.length; l < m; l++)
          for (var n = 0, p = j.length; n < p; n++)
            h[i[l]].type == e.connectionData[j[n]].type &&
            k.unshift(h[i[l]]);
        0 < k.length && (e.connectionData = k)
      }
      e.update(g)
    }
};
simcity.cRegionViewUIHandler.prototype.UpdateRegionalInfoPanel = function () {
  var a = 0,
  b = 0,
  c = 0,
  d = [scrui.BuildRequestQuery(["bins", simcity.kResourceIDTotalResidential])];
  scrui.RequestGameData(d, function (a) {
    c = a[0].amount
  });
  var d = simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData.mPlayingBox.uid,
  e;
  for (e in this.mRegionData.mCityTradeData) {
    var f = this.mRegionData.mCityTradeData[e];
    f.localData && (a += f.localData.data.budget, b = e != d ? b + simcity.GetFudgedPopulation(f.localData.data.population) : b + simcity.GetFudgedPopulation(c))
  }
  this.mRegionalBudgetText.SetTextFromNumber(a);
  this.mRegionalPopulationText.SetTextFromNumber(b)
};
simcity.cRegionViewUIHandler.prototype.SparklePaletteButton = function (a) {
  var b = null;
  switch (a) {
  case simcity.kEventIDWireTradeServiceTokensFireServiceTokenCanGrant:
    b = simcity.kRegionDataLayer_Fire;
    break;
  case simcity.kEventIDWireTradeServiceTokensGarbageServiceTokenCanGrant:
  case simcity.kEventIDWireTradeServiceTokensRecyclingServiceTokenCanGrant:
    b = simcity.kRegionDataLayer_Garbage;
    break;
  case simcity.kEventIDWireTradeServiceTokensHealthServiceTokenCanGrant:
    b = simcity.kRegionDataLayer_Health;
    break;
  case simcity.kEventIDWireTradeServiceTokensPoliceServiceTokenCanGrant:
    b =
      simcity.kRegionDataLayer_Police
  }
  b && (a = this.mDataLayerButtonSparkles[b]) && a.SetVisibility(!0)
};
simcity.cRegionViewUIHandler.prototype.UpdateHomeBox = function () {
  if (this.mRegionData.mPlayingBox.creatorId && this.mRegionData.mPlayers[this.mRegionData.mPlayingBox.creatorId]) {
    var a = this.mRegionData.mPlayers[this.mRegionData.mPlayingBox.creatorId].screenName;
    if (this.mRegionData.mPlayingBox.name && a && !this.homeBoxAvatarSet) {
      this.homeBoxAvatarSet = !0;
      var b = simcity.gGlobalUIHandler.mSharedUIParent.FindControlByID(simcity.kRegionView_HomeBoxAvatar);
      simcity.gUIToolbox.SetAvatar(b, a)
    }
  }
};
simcity.cRegionViewUIHandler.prototype.SetGWUnlocked = function (a, b) {
  a ? (this.mGWRecentlyUnlocked = a, this.mGWUnlockedID = b) : this.mGWRecentlyUnlocked = null
};
simcity.cRegionViewUIHandler.prototype.GetGWUnlocked = function () {
  return this.hasOwnProperty("mGWRecentlyUnlocked") && !0 == this.mGWRecentlyUnlocked ? this.mGWUnlockedID : !1
};
simcity.cRegionViewUIHandler.prototype.UpdateGWUnlockSparkleChecker = function () {
  var a = this.mDataLayerButtonSparkles[simcity.kRegionDataLayer_GreatWorks];
  a && (!a.mIsVisible && this.GetGWUnlocked()) && a.SetVisibility(!0)
};
simcity.cRegionViewUIHandler.prototype.CheckForClearingGWSparkle = function () {
  this.SetGWUnlocked(!1)
};
simcity.cRegionViewUIHandler.prototype.HandlePossibleGWSelection = function () {
  if ("greatwork" == this.mSelectedRegionViewItem.mViewUnitType)
    if (simcity.IsTutorialInProgress())
      this.mSelectedRegionViewItem = null;
    else {
      var a = this.GetConnectedGWID();
      if (this.mSelectedRegionViewItem.mRegionalBoxID == a) {
        if (a = this.mDataLayerButtons[scrui.DecimalToHex(simcity.kRegionDataLayer_GreatWorks)])
          a = a.FindControlByID(simcity.kRegionView_DataLayerButton), a.SetSelected(!0), this.mSelectedDataControl = a, this.mSelectedDataLayerID =
            a.mUserData;
        this.ForceGWUnitSelected();
        this.ShowDataLayerContextPanel()
      } else
        this.ClosePalette()
    }
  else
    this.mSelectedDataLayerID == simcity.kRegionDataLayer_GreatWorks && this.ClosePalette()
};
simcity.FindConnectedGreatWork = function () {
  for (var a = simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData.mRegionUnitsLookup, b = Object.keys(simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData.mConnectedUnits), c = 0, d = b.length; c < d; c++)
    if (a[b[c]] && "greatwork" === a[b[c]].type)
      return [b[c], a[b[c]]];
  return null
};
simcity.cRegionViewUIHandler.prototype.HandleTriggerKey = function (a) {
  if (simcity.gGlobalUIHandler.mRegionViewUIHandler.IsVisible() && !simcity.IsTutorialInProgress())
    switch (a) {
    case simcity.kKeyTrigger_NextHeavyLayer:
      this.RegionViewCycleHeavyLayer()
    }
};
simcity.cRegionViewUIHandler.prototype.RegionViewCycleHeavyLayer = function () {
  var a = null;
  switch (this.mSelectedDataLayerID) {
  case simcity.kRegionDataLayer_Workers:
    a = simcity.kRegionDataLayer_WorkerLevels;
    break;
  case simcity.kRegionDataLayer_Shoppers:
    a = simcity.kRegionDataLayer_ShopperLevels;
    break;
  case simcity.kRegionDataLayer_Freight:
    a = simcity.kRegionDataLayer_FreightLevels;
    break;
  case simcity.kRegionDataLayer_Students:
    a = simcity.kRegionDataLayer_StudentLevels;
    break;
  case simcity.kRegionDataLayer_Power:
    a = simcity.kRegionDataLayer_PowerLevels;
    break;
  case simcity.kRegionDataLayer_Water:
    a = simcity.kRegionDataLayer_WaterLevels;
    break;
  case simcity.kRegionDataLayer_Sewage:
    a = simcity.kRegionDataLayer_SewageLevels;
    break;
  case simcity.kRegionDataLayer_Fire:
    a = simcity.kRegionDataLayer_FireLevels;
    break;
  case simcity.kRegionDataLayer_Police:
    a = simcity.kRegionDataLayer_PoliceLevels;
    break;
  case simcity.kRegionDataLayer_Health:
    a = simcity.kRegionDataLayer_HealthLevels;
    break;
  case simcity.kRegionDataLayer_Garbage:
    a = simcity.kRegionDataLayer_GarbageLevels;
    break;
  case simcity.kRegionDataLayer_Transport:
    a =
      simcity.kRegionDataLayer_TransportLevels
  }
  if (a)
    for (var b = simcity.gGlobalUIHandler.mLayerUIHandler.GetCurrentActiveLayer(), c = a.length, d = 0, d = 0; d < c; d++)
      if (b == a[d]) {
        d = d + 1 < c ? d + 1 : 0;
        simcity.gGlobalUIHandler.mLayerUIHandler.ActivateLayer(a[d]);
        break
      }
};
simcity.cRegionViewUIHandler.prototype.SendInvites = function (a) {
  var b = simcity.gGlobalUIHandler.mRegionID,
  c = simcity.gGlobalUIHandler.mRegionViewUIHandler.mSelectedRegionViewItem.mBoxData.id,
  d = {
    tabName : "IN_GAME"
  };
  simcity.gGameInvitesController.HideInvitePanel(gUIManager.FindControlByID(244120857));
  simcity.gGameInvitesController.InviteUsersToCity(b, c, a, function () {
    simcity.AddTelemetry("SC_UI_INVITE_SUCCESS", 12, d);
    var b = a.split(",") || "0";
    simcity.gGameInvitesController.mDialogManager.ShowLocalizedModal(simcity.cGameInvitesController.LocaleString.kInviteTitle,
      simcity.cGameInvitesController.LocaleString.kInviteSuccess, null, {
      boxName : simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData.mRegionName
    }, {
      inviteCount : b.length
    })
  }, function () {
    simcity.AddTelemetry("SC_UI_INVITE_FAILURE", 12, d);
    simcity.gGameInvitesController.mDialogManager.ShowLocalizedModal(simcity.cGameInvitesController.LocaleString.kInviteTitle, simcity.cGameInvitesController.LocaleString.kInviteFailed, null, {
      boxName : simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData.mRegionName
    })
  })
};
simcity.ListBox = {};
simcity.cListBox = function () {
  scrui.cToolbox.call(this);
  this.SetDimensionsFromConfigData();
  this.mData = this.mSelection = null
};
goog.inherits(simcity.cListBox, scrui.cToolbox);
simcity.cListBox.kItemHeight = 20;
simcity.cListBox.kItemPadding = 5;
simcity.cListBox.kItemColor = "white";
simcity.cListBox.kSelectedItemColor = "#FFD700";
simcity.cListBox.kHighlightItemColor = "#FF8C00";
simcity.cListBox.prototype.SetContent = function (a) {
  this.GetContainerElement();
  this.mData = a;
  this.Populate(this.mData, 0)
};
simcity.cListBox.prototype.SetDimensionsFromConfigData = function () {
  this.mPinBottom = this.mPinRight = this.mPinTop = this.mPinLeft = !1;
  this.mWidth = 300;
  this.mHeight = 500;
  this.mLeft = 25;
  this.mTop = 150
};
simcity.cListBox.prototype.Show = function () {
  this.Hide();
  this.CreateDrawable("Speech Balloons");
  this.mRootElement.onmousedown = simcity.cListBox.Private_RootMouseDown;
  this.CreateCloseButton()
};
simcity.cListBox.prototype.Hide = function () {
  this.IsVisible() && scrui.cToolbox.prototype.Hide.call(this)
};
simcity.cListBox.prototype.Populate = function (a, b) {
  for (var c = this.GetContainerElement(), d = 0, e = this.mData.length; d < e; ++d) {
    var f = this.mData[d],
    g = b,
    h = c,
    i = document.createElement("div");
    h.appendChild(i);
    i.style.position = "absolute";
    i.style.top = g + "px";
    i.style.left = "10px";
    i.style.width = "300px";
    i.style.height = simcity.cListBox.kItemHeight + "px";
    i.mTop = g;
    h = document.createElement("span");
    i.appendChild(h);
    h.style.position = "absolute";
    h.style.top = "0px";
    h.style.left = "0px";
    h.style.width = "300px";
    h.style.height = simcity.cListBox.kItemHeight +
      "px";
    h.style.color = simcity.cListBox.kItemColor;
    h.style.cursor = "default";
    h.innerHTML = f;
    var j = document.createElement("div");
    i.appendChild(j);
    j.style.position = "absolute";
    j.style.top = "0px";
    j.style.left = "0px";
    j.style.width = "100%";
    j.style.height = "100%";
    j.onmousedown = simcity.cListBox.Private_ItemMouseDown;
    j.onmouseover = simcity.cListBox.Private_ItemGainFocus;
    j.onmouseout = simcity.cListBox.Private_ItemLoseFocus;
    j.id = "coverElement";
    j.mTop = g;
    j.mToolbox = this;
    j.mOriginalText = f;
    j.mTextElement = h;
    b = g += simcity.cListBox.kItemHeight
  }
  return b
};
simcity.cListBox.prototype.ClearItems = function () {
  for (var a = this.GetContainerElement(); 0 < a.childNodes.length; )
    a.removeChild(a.firstChild)
};
simcity.cListBox.prototype.SetSelection = function (a) {
  for (var b = this.GetContainerElement(), c = b.childNodes.length, d = 0; d < c; ++d) {
    var e = b.childNodes[d].firstChild;
    e.style.color = e === a ? simcity.cListBox.kSelectedItemColor : simcity.cListBox.kItemColor
  }
  this.mSelection = a ? a.innerHTML : null
};
simcity.cListBox.Private_RootMouseDown = function () {
  scrui.gUIManager.SetInputHandled(!0)
};
simcity.cListBox.Private_ItemGainFocus = function (a) {
  a = scrui.GetEventTarget(a);
  a.mTextElement && a.mTextElement.innerHTML !== a.mToolbox.mSelection && (a.mTextElement.style.color = simcity.cListBox.kHighlightItemColor);
  scrui.gUIManager.mElementUnderMouse = a
};
simcity.cListBox.Private_ItemLoseFocus = function (a) {
  a = scrui.GetEventTarget(a);
  a.mTextElement && a.mTextElement.innerHTML !== a.mToolbox.mSelection && (a.mTextElement.style.color = simcity.cListBox.kItemColor);
  scrui.gUIManager.mElementUnderMouse = null
};
simcity.cListBox.Private_ItemMouseDown = function (a) {
  a = scrui.GetEventTarget(a);
  a.mToolbox.SetSelection(a.mTextElement);
  scrui.gUIManager.SetInputHandled(!0)
};
simcity.TutorialCalloutUI = {};
simcity.kKeyTrigger_SkipTutorial = 253189869;
simcity.cTutorialCalloutManager = function () {
  this.UIHandler = scrui.cUIHandler;
  this.UIHandler();
  this.mDataBinding = null;
  this.mCallout = new simcity.cTutorialCalloutUI;
  this.mCallout.Init();
  this.optionsMenu = this.mRegionBoxID = this.mTransportType = this.mBuildingPointerLayout = this.mUnitString = null
};
goog.inherits(simcity.cTutorialCalloutManager, scrui.cUIHandler);
simcity.cTutorialCalloutManager.prototype.PointToBuilding = function (a) {
  this.mDataBinding = a;
  var a = [scrui.BuildRequestQuery(["getToyOfType", this.mDataBinding.targetToy])],
  b = this;
  scrui.RequestGameData(a, function (a) {
    if (a = a[0])
      b.mUnitString = scrui.RequestStringFromUnitRef(a)
  })
};
simcity.cTutorialCalloutManager.prototype.PointToTransport = function (a) {
  this.mDataBinding = a;
  this.mTransportType = this.mDataBinding.targetTransport
};
simcity.cTutorialCalloutManager.prototype.PointToRegionBox = function (a) {
  this.mDataBinding = a;
  this.mRegionBoxID = this.mDataBinding.targetRegionBox
};
simcity.cTutorialCalloutManager.prototype.ShowCallout = function (a) {
  scrui.Assert(a, "a callout data binding must be specified!");
  this.mDataBinding = a;
  this.mCallout.SetDialogLayout(a.dialogLayoutPath, a.dialogInRegion);
  if (this.mCallout.mDialogLayout) {
    var b = this.mCallout.mDialogLayout.FindControlByID(simcity.cTutorialCalloutUI.kTxtIDDialogText);
    if (b) {
      var c = a.dialogString,
      d = void 0,
      c = new scrui.cLocaleString(c.tableID, c.stringID, c.placeholder);
      a.hasOwnProperty("dialogStringTokens") && (d = a.dialogStringTokens());
      b.SetLocaleText(c, d)
    }
    if ((b = this.mCallout.mDialogLayout.FindControlByID(simcity.cTutorialCalloutUI.kTxtIDHeaderText)) && a.headerString)
      c = a.headerString, c = new scrui.cLocaleString(c.tableID, c.stringID, c.placeholder), b.SetLocaleText(c);
    if (b = this.mCallout.mDialogLayout.FindControlByID(simcity.cTutorialCalloutUI.kTxtIDStepNumberText))
      a.stepNumberString ? (c = a.stepNumberString, c = new scrui.cLocaleString(c.tableID, c.stringID, c.placeholder), b.SetLocaleText(c)) : b.SetRawText("")
  }
  this.mDataBinding.hasOwnProperty("targetControl") &&
  (c = this.mDataBinding.allowNullTargetControl, this.mCallout.ShowOnControl(this.mDataBinding.targetControl(), c));
  this.SetupCallout();
  a.lockUIWithCamera && (simcity.gGlobalUIHandler.mTutorialManager.SetModalWindow(null, !1), simcity.gGlobalUIHandler.mTutorialManager.mMouseEaterWindow.SetIgnoreMouse(!0), gUIManager.mBlockMouseClick = !0);
  a.init && a.init();
  return this.mCallout
};
simcity.cTutorialCalloutManager.prototype.SetupCallout = function () {
  simcity.gGlobalUIHandler.mTutorialManager.SetModalWindow(null, !1);
  var a = gUIManager.FindControlByID(simcity.kWinIDMainMenu);
  if (a.mIsVisible)
    simcity.gGlobalUIHandler.mTutorialManager.SetModalWindow(simcity.GetOptionsMenuButton(), !0), simcity.gGlobalUIHandler.mTutorialManager.SetModalWindow(gUIManager.FindControlByID(simcity.kWinIDMainMenu), !0);
  else if (this.mDataBinding && this.mDataBinding.hasOwnProperty("targetControl")) {
    var b = this.mDataBinding.targetControl();
    this.mCallout.mTargetInfo.mPosition = null;
    this.mCallout.UpdateCallout(b, a.mIsVisible);
    simcity.gGlobalUIHandler.mTutorialManager.mMouseEaterWindow.GetControlID() == simcity.kWinMouseEaterID && simcity.gGlobalUIHandler.mTutorialManager.SetModalWindow(simcity.GetOptionsMenuButton(), !0);
    a = this.mCallout.mDialogLayout.FindControlByID(simcity.cTutorialCalloutUI.kBtnIDOkay);
    this.mDataBinding && (this.mCallout.mDialogLayout && a && a.mIsVisible) && simcity.gGlobalUIHandler.mTutorialManager.SetModalWindow(this.mCallout.mDialogLayout,
      !0);
    this.ShowBlueInfoButtons()
  } else
    this.mCallout.mDialogLayout && (this.mDataBinding && this.mDataBinding.hasOwnProperty("lockUI") && !0 == this.mDataBinding.lockUI) && (simcity.gGlobalUIHandler.mTutorialManager.SetModalWindow(this.mCallout.mDialogLayout, !0), simcity.gGlobalUIHandler.mTutorialManager.mMouseEaterWindow.GetControlID() == simcity.kWinMouseEaterID && simcity.gGlobalUIHandler.mTutorialManager.SetModalWindow(simcity.GetOptionsMenuButton(), !0), this.ShowBlueInfoButtons());
  gUIManager.UpdateControlUnderMouse()
};
simcity.cTutorialCalloutManager.prototype.ShowBlueInfoButtons = function () {
  gUIManager.WalkChildren(function (a) {
    (247237927 == a.GetControlID() || 253033863 == a.GetControlID() && (simcity.gGlobalUIHandler.mRegionViewUIHandler.IsVisible() || simcity.gGlobalUIHandler.mToolPaletteUIHandler.mToolPanelOpen)) && a.mIsVisible && simcity.gGlobalUIHandler.mTutorialManager.SetModalWindow(a, !0, !0)
  })
};
simcity.cTutorialCalloutManager.prototype.HideCallout = function () {
  if (this.mCallout.IsVisible()) {
    this.mCallout.Hide();
    var a = this.mDataBinding;
    this.mDataBinding = null;
    simcity.gGlobalUIHandler.mTutorialManager.TutorialStateOnCompletion(a)
  }
  this.mBuildingPointerLayout.SetVisibility(!1);
  this.mRegionBoxID = this.mTransportType = this.mUnitString = null
};
simcity.cTutorialCalloutManager.prototype.EnableCallout = function () {
  this.mCallout.IsVisible() && this.mCallout.Enable()
};
simcity.cTutorialCalloutManager.prototype.Init = function () {
  this.mBuildingPointerLayout = gUIManager.LoadLayout("Layouts/Tutorial/BuildingPointer.js", gUIManager.GetRootWindow());
  this.mBuildingPointerLayout.SetVisibility(!1);
  this.optionsMenu = gUIManager.FindControlByID(simcity.kWinIDMainMenu)
};
simcity.cTutorialCalloutManager.prototype.Update = scrui.Client_ProfZone("cTutorialCalloutManager.Update", function () {
    this.mDataBinding && (this.mDataBinding.hasOwnProperty("completionTest") && this.mDataBinding.completionTest()) && this.HideCallout();
    this.mDataBinding && this.mDataBinding.lockUIWithCamera && (gUIManager.mControlUnderMouse && gUIManager.mControlUnderMouse.GetControlID() != simcity.cTutorialCalloutUI.kBtnIDOkay ? (gUIManager.mBlockMouseClick = !0, gUIManager.SetCaptureControl(null), gUIManager.SetControlUnderMouse(null)) :
      gUIManager.mBlockMouseClick = !1);
    var a = this.optionsMenu.mIsVisible;
    this.mCallout.IsVisible() && this.mDataBinding.hasOwnProperty("targetControl") && this.mCallout.UpdateCallout(this.mDataBinding.targetControl(), a);
    if (this.mTransportType) {
      var b = [scrui.BuildRequestQuery(["agent", "findnearestagent", "screenPosition"])],
      c = this;
      scrui.RequestGameData(b, function (b) {
        (b = b[0]) && c.mBuildingPointerLayout.SetPosition(b[0], b[1]);
        c.mBuildingPointerLayout.SetVisibility(b !== null && !a)
      })
    }
    if (this.mRegionBoxID) {
      var c = this,
      b = simcity.gGlobalUIHandler.mRegionViewUIHandler.GetCityButton(246461222, this.mRegionBoxID),
      d = null;
      b && (d = b.GetAbsolutePosition());
      d && c.mBuildingPointerLayout.SetPosition(d[0], d[1]);
      c.mBuildingPointerLayout.SetVisibility(null !== d && !a)
    }
    this.mUnitString && (b = [scrui.BuildRequestQuery(["units", this.mUnitString, "screenPositionTop"])], c = this, scrui.RequestGameData(b, function (b) {
        (b = b[0]) ? c.mBuildingPointerLayout.SetPosition(b[0], b[1]) : c.mUnitString = null;
        c.mBuildingPointerLayout.SetVisibility(b !== null && !a)
      }))
  });
simcity.cTutorialCalloutManager.prototype.HandleGameEvent = function (a, b) {
  switch (a) {
  case simcity.kMessageCinematicFinishedPlaying:
    if (this.mDataBinding && this.mDataBinding.hasOwnProperty("onCinematicEnd"))
      this.mDataBinding.onCinematicEnd();
    break;
  case simcity.kMessageKeyTrigger:
    switch (b.triggerCode) {
    case simcity.kKeyTrigger_SkipTutorial:
      simcity.gGlobalUIHandler && simcity.IsTutorialInProgress() && simcity.SkipTutorial()
    }
  }
};
simcity.cTutorialCalloutManager.prototype.HandleUIMessage = function (a, b) {
  switch (a) {
  case scrui.kMsgTypeButtonClicked:
    switch (b) {
    case simcity.cTutorialCalloutUI.kBtnIDOkay:
    case simcity.cTutorialCalloutUI.kBtnIDQuit:
    case simcity.cTutorialCalloutUI.kBtnKeepPlaying:
      this.mCallout.Hide();
      simcity.gGlobalUIHandler.mTutorialManager.TutorialStateOnCompletion(this.mDataBinding);
      break;
    case simcity.cTutorialCalloutUI.kBtnIDCancel:
      this.mCallout.Hide();
      this.mDataBinding && this.mDataBinding.hasOwnProperty("onCancelled") &&
      (this.mDataBinding.onCancelled(), simcity.gGlobalUIHandler.mTutorialManager.mTutorialState = simcity.cTutorialManager.kTutorialStateCompleted);
      break;
    case simcity.cTutorialCalloutUI.kBtnIDNext:
      this.mCallout.Hide();
      if (this.mDataBinding && this.mDataBinding.hasOwnProperty("onNext"))
        this.mDataBinding.onNext();
      break;
    case simcity.cTutorialCalloutUI.kBtnIDQuitApp:
      scrui.PostGameCommand(scrui.BuildCommand(["quitapp"]));
      break;
    case simcity.cTutorialCalloutUI.kBtnIDSkip:
      simcity.SkipTutorial()
    }
  }
};
simcity.cTutorialCalloutUI = function () {
  this.mTutorialParentWin = this.mDLCLayout = this.mOpeningLayout = this.mDialogLayout = this.mPointerLayout = null;
  this.mFirstUpdate = 1;
  this.mOriginalTop = 0;
  this.mTargetInfo = {
    mControl : null,
    mPosition : null,
    mDimensions : null
  }
};
simcity.cTutorialCalloutUI.kWinIDArrowNW = 205421882;
simcity.cTutorialCalloutUI.kWinIDArrowNE = 205421884;
simcity.cTutorialCalloutUI.kWinIDArrowSE = 205421886;
simcity.cTutorialCalloutUI.kWinIDArrowSW = 205421888;
simcity.cTutorialCalloutUI.kTxtIDDialogText = 205599166;
simcity.cTutorialCalloutUI.kTxtIDHeaderText = 238505461;
simcity.cTutorialCalloutUI.kTxtIDStepNumberText = 238505767;
simcity.cTutorialCalloutUI.kBtnIDOkay = 206727489;
simcity.cTutorialCalloutUI.kBtnIDQuitApp = 3307640046;
simcity.cTutorialCalloutUI.kBtnIDCancel = 207064027;
simcity.cTutorialCalloutUI.kBtnIDNext = 234298221;
simcity.cTutorialCalloutUI.kBtnIDQuit = 238848936;
simcity.cTutorialCalloutUI.kBtnKeepPlaying = 238848937;
simcity.cTutorialCalloutUI.kBtnIDSkip = 249487164;
simcity.cTutorialCalloutUI.kWinIDNextButtonDialogContainer = 234294679;
simcity.cTutorialCalloutUI.kWinIDNextButtonDialogCenteredContainer = 238853793;
simcity.cTutorialCalloutUI.prototype.Init = function () {
  this.mPointerLayout = gUIManager.LoadLayout("Layouts/Tutorial/PointerContainer.js", gUIManager.GetRootWindow());
  this.mOpeningLayout = gUIManager.LoadLayout("Layouts/Tutorial/OpeningScreen.js", gUIManager.GetRootWindow());
  this.mDLCLayout = gUIManager.LoadLayout("Layouts/Tutorial/DlcDialog.js", gUIManager.GetRootWindow());
  this.mPointerLayout.SetVisibility(!1);
  this.mOpeningLayout.SetVisibility(!1);
  this.mDLCLayout.SetVisibility(!1);
  this.mTutorialParentWin = gUIManager.FindControlByID(248363637)
};
simcity.cTutorialCalloutUI.prototype.IsNextButtonDialog = function () {
  return this.mDialogLayout && this.mDialogLayout.FindControlByID(simcity.cTutorialCalloutUI.kWinIDNextButtonDialogContainer)
};
simcity.cTutorialCalloutUI.prototype.Enable = function () {
  if (this.mDialogLayout) {
    var a = this.mDialogLayout.FindControlByID(simcity.cTutorialCalloutUI.kBtnIDNext);
    a && (a.SetEnabled(!0), a.SetVisibility(!0))
  }
};
simcity.cTutorialCalloutUI.prototype.SetDialogLayout = function (a) {
  this.ClearDialogLayout();
  switch (a) {
  case simcity.kDialogOpeningScreen:
    this.mDialogLayout = this.mOpeningLayout;
    var b = this.mDialogLayout.FindControlByID(simcity.kWinIDOpening),
    c = this.mDialogLayout.FindControlByID(simcity.kWinIDClosing);
    b.SetVisibility(!0);
    c.SetVisibility(!1);
    break;
  case simcity.kDialogDemoEndScreen:
    this.mDialogLayout = this.mOpeningLayout;
    b = this.mDialogLayout.FindControlByID(simcity.kWinIDOpening);
    c = this.mDialogLayout.FindControlByID(simcity.kWinIDClosing);
    b.SetVisibility(!1);
    c.SetVisibility(!0);
    break;
  case simcity.kDialogCenteredDLC:
    this.mDialogLayout = this.mDLCLayout;
  case simcity.kDialogTutorialEnd:
  case simcity.kDialogTutorialCentered:
    this.mDialogLayout = this.mTutorialParentWin.FindControlByID(simcity.cTutorialCalloutUI.kWinIDNextButtonDialogCenteredContainer);
    break;
  default:
    this.mDialogLayout = this.mTutorialParentWin.FindControlByID(simcity.cTutorialCalloutUI.kWinIDNextButtonDialogContainer),
    1 === this.mFirstUpdate && (this.mFirstUpdate = 0, this.mOriginalTop =
        this.mDialogLayout.mTop),
    this.mDialogLayout.SetPosition(this.mDialogLayout.mLeft, this.mOriginalTop, this.mDialogLayout.mWidth, this.mDialogLayout.mHeight)
  }
  var b = this.mDialogLayout.FindControlByID(simcity.cTutorialCalloutUI.kBtnIDOkay),
  c = this.mDialogLayout.FindControlByID(simcity.cTutorialCalloutUI.kBtnIDCancel),
  d = this.mDialogLayout.FindControlByID(simcity.cTutorialCalloutUI.kBtnIDNext),
  e = this.mDialogLayout.FindControlByID(simcity.cTutorialCalloutUI.kBtnIDQuit),
  f = this.mDialogLayout.FindControlByID(simcity.cTutorialCalloutUI.kBtnKeepPlaying);
  b && b.SetVisibility(!1);
  c && c.SetVisibility(!1);
  d && d.SetVisibility(!1);
  e && e.SetVisibility(!1);
  f && f.SetVisibility(!1);
  switch (a) {
  case simcity.kDialogOkay:
  case simcity.kDialogOpeningScreen:
  case simcity.kDialogCenteredDLC:
    b.SetVisibility(!0);
    break;
  case simcity.kDialogOkayCancel:
    b.SetVisibility(!0);
    c.SetVisibility(!0);
    break;
  case simcity.kDialogTextOnlyLow:
    a = Math.min(this.mOriginalTop + 150, scrui.GetClientHeight() - this.mDialogLayout.mHeight);
    this.mDialogLayout.SetPosition(this.mDialogLayout.mLeft, a, this.mDialogLayout.mWidth,
      this.mDialogLayout.mHeight);
    break;
  case simcity.kDialogTextOnlyLiftUp:
    a = Math.min(this.mOriginalTop - 230, scrui.GetClientHeight() - this.mDialogLayout.mHeight);
    this.mDialogLayout.SetPosition(this.mDialogLayout.mLeft, a, this.mDialogLayout.mWidth, this.mDialogLayout.mHeight);
    break;
  case simcity.kDialogTextOnlyLiftMid:
    a = Math.min(this.mOriginalTop - 120, scrui.GetClientHeight() - this.mDialogLayout.mHeight);
    this.mDialogLayout.SetPosition(this.mDialogLayout.mLeft, a, this.mDialogLayout.mWidth, this.mDialogLayout.mHeight);
    break;
  case simcity.kDialogTextOnlyMidLow:
    a = Math.min(this.mOriginalTop + 100, scrui.GetClientHeight() - this.mDialogLayout.mHeight);
    this.mDialogLayout.SetPosition(this.mDialogLayout.mLeft, a, this.mDialogLayout.mWidth, this.mDialogLayout.mHeight);
    break;
  case simcity.kDialogOkayLow:
    b.SetVisibility(!0);
    a = Math.min(this.mOriginalTop + 120, scrui.GetClientHeight() - this.mDialogLayout.mHeight - 30);
    this.mDialogLayout.SetPosition(this.mDialogLayout.mLeft, a, this.mDialogLayout.mWidth, this.mDialogLayout.mHeight);
    break;
  case simcity.kDialogOkayLiftUp:
    b.SetVisibility(!0);
    a = Math.min(this.mOriginalTop - 230, scrui.GetClientHeight() - this.mDialogLayout.mHeight - 30);
    this.mDialogLayout.SetPosition(this.mDialogLayout.mLeft, a, this.mDialogLayout.mWidth, this.mDialogLayout.mHeight);
    break;
  case simcity.kDialogOkayLiftMid:
    b.SetVisibility(!0);
    a = Math.min(this.mOriginalTop - 120, scrui.GetClientHeight() - this.mDialogLayout.mHeight - 30);
    this.mDialogLayout.SetPosition(this.mDialogLayout.mLeft, a, this.mDialogLayout.mWidth, this.mDialogLayout.mHeight);
    break;
  case simcity.kDialogTutorialEnd:
    simcity.gGlobalUIHandler.mIsTimed &&
    simcity.gGlobalUIHandler.mTutorialDemo ? f.SetVisibility(!0) : e.SetVisibility(!0);
    break;
  case simcity.kDialogTutorialCentered:
    f.SetVisibility(!0)
  }
  this.mDialogLayout.SetVisibility(!0)
};
simcity.cTutorialCalloutUI.prototype.ClearDialogLayout = function () {
  if (this.mDialogLayout) {
    if (this.IsNextButtonDialog()) {
      var a = gUIManager.FindControlByID(simcity.cTutorialCalloutUI.kWinIDNextButtonDialogContainer);
      a.SetVisibility(!1);
      a.FindControlByID(simcity.cTutorialCalloutUI.kBtnIDNext).SetEnabled(!1)
    } else
      this.mDialogLayout.SetVisibility(!1);
    this.mDialogLayout = null
  }
};
simcity.cTutorialCalloutUI.prototype.UpdateCallout = function (a, b) {
  if (a) {
    this.mTargetInfo.mControl = a;
    var c = a.GetAbsolutePosition(),
    c = [c[0] + a.mWidth / 2, c[1] + a.mHeight / 2];
    if (null == this.mTargetInfo.mPosition || c[0] !== this.mTargetInfo.mPosition[0] || c[1] !== this.mTargetInfo.mPosition[1])
      this.mTargetInfo.mPosition = c, this.mTargetInfo.mDimensions = [a.mWidth, a.mHeight], this.ShowHelper(), simcity.gGlobalUIHandler.mTutorialManager.SetModalWindow(a, null), this.mDialogLayout && simcity.gGlobalUIHandler.mTutorialManager.SetModalWindow(this.mDialogLayout,
        !0), simcity.gGlobalUIHandler.mTutorialManager.SetModalWindow(a, !0), simcity.gGlobalUIHandler.mTutorialManager.SetModalWindow(simcity.GetOptionsMenuButton(), !0), simcity.gGlobalUIHandler.mTutorialCallout.ShowBlueInfoButtons();
    this.mPointerLayout.SetVisibility(!b);
    a.SetVisibility(!0)
  }
};
simcity.cTutorialCalloutUI.prototype.ShowOnControl = function (a, b) {
  if (a) {
    var c = function () {
      simcity.gEventManager.RemoveEventListener(simcity.gEventTypes.CLICK, a.GetControlID(), c);
      gUIManager.mBlockMouseClick = !0
    };
    simcity.gEventManager.AddEventListener(simcity.gEventTypes.CLICK, a.GetControlID(), c)
  } else
    b || scrui.Assert(a, "no control specified as target for showing tutorial callout")
};
simcity.cTutorialCalloutUI.prototype.SyncPositionWithTarget = function () {
  if (this.mTargetInfo.mControl) {
    var a = this.mTargetInfo.mControl,
    b = a.GetAbsolutePosition(),
    b = [b[0] + a.mWidth / 2, b[1] + a.mHeight / 2];
    if (b[0] !== this.mTargetInfo.mPosition[0] || b[1] !== this.mTargetInfo.mPosition[1])
      this.mTargetInfo.mPosition = b, this.mTargetInfo.mDimensions = [a.mWidth, a.mHeight], this.ShowHelper()
  }
};
simcity.cTutorialCalloutUI.prototype.ShowAtPosition = function (a, b) {
  this.mTargetInfo.mControl = null;
  this.mTargetInfo.mPosition = a.slice(0);
  this.mTargetInfo.mCornerOffset = [2 * b, 2 * b];
  this.ShowHelper()
};
simcity.cTutorialCalloutUI.prototype.ShowHelper = function () {
  var a = scrui.GetClientWidth(),
  b = scrui.GetClientHeight(),
  c = this.mTargetInfo.mPosition,
  d = this.mTargetInfo.mDimensions,
  e = null;
  simcity.gGlobalUIHandler.mTutorialCallout && (simcity.gGlobalUIHandler.mTutorialCallout.mDataBinding && simcity.gGlobalUIHandler.mTutorialCallout.mDataBinding.hasOwnProperty("calloutArrow")) && (e = simcity.gGlobalUIHandler.mTutorialCallout.mDataBinding.calloutArrow);
  var f = [this.mPointerLayout.mWidth / 2, this.mPointerLayout.mHeight /
    2];
  (e && e == simcity.cTutorialCalloutUI.kWinIDArrowSW || !e) && c[0] + d[0] / 2 + f[0] < a && 0 < c[1] - this.mPointerLayout.mHeight ? (this.SetArrowVisible(simcity.cTutorialCalloutUI.kWinIDArrowSW), this.mPointerLayout.SetPosition(c[0] + d[0] / 2, c[1] - d[1] / 2 - 2 * f[1], this.mPointerLayout.mWidth, this.mPointerLayout.mHeight)) : (e && e == simcity.cTutorialCalloutUI.kWinIDArrowNW || !e) && c[0] + d[0] / 2 + f[0] < a && c[1] + d[1] / 2 + f[1] < b ? (this.SetArrowVisible(simcity.cTutorialCalloutUI.kWinIDArrowNW), this.mPointerLayout.SetPosition(c[0] + d[0] / 2, c[1] +
      d[1] / 2, this.mPointerLayout.mWidth, this.mPointerLayout.mHeight)) : (e && e == simcity.cTutorialCalloutUI.kWinIDArrowSE || !e) && 0 < c[0] - d[0] / 2 - f[0] && 0 < c[1] - this.mPointerLayout.mHeight - f[1] ? (this.SetArrowVisible(simcity.cTutorialCalloutUI.kWinIDArrowSE), this.mPointerLayout.SetPosition(c[0] - d[0] / 2 - 2 * f[0], c[1] - d[1] / 2 - 2 * f[1], this.mPointerLayout.mWidth, this.mPointerLayout.mHeight)) : (this.SetArrowVisible(simcity.cTutorialCalloutUI.kWinIDArrowNE), this.mPointerLayout.SetPosition(c[0] - d[0] / 2 - 2 * f[0], c[1] + d[1] / 2, this.mPointerLayout.mWidth,
      this.mPointerLayout.mHeight));
  this.mPointerLayout.SetVisibility(!0);
  this.mDialogLayout && this.mDialogLayout.SetVisibility(!0)
};
simcity.cTutorialCalloutUI.prototype.SetArrowVisible = function (a) {
  for (var b = [simcity.cTutorialCalloutUI.kWinIDArrowNW, simcity.cTutorialCalloutUI.kWinIDArrowNE, simcity.cTutorialCalloutUI.kWinIDArrowSE, simcity.cTutorialCalloutUI.kWinIDArrowSW], c = 0; c < b.length; ++c) {
    var d = b[c],
    e = this.mPointerLayout.FindControlByID(d);
    e.SetVisibility(!1);
    e.SetVisibility(d === a)
  }
};
simcity.cTutorialCalloutUI.prototype.Hide = function () {
  simcity.gGlobalUIHandler.mTutorialManager.SetModalWindow(null, !1);
  this.mTargetInfo.mControl = null;
  this.mTargetInfo.mPosition = null;
  this.mTargetInfo.mDimensions = null;
  this.mDialogLayout && this.mDialogLayout.SetVisibility(!1);
  this.mPointerLayout.SetVisibility(!1)
};
simcity.cTutorialCalloutUI.prototype.IsVisible = function () {
  return this.mDialogLayout && this.mDialogLayout.mIsVisible
};
simcity.GameAudio = {};
simcity.audio = {};
simcity.audio.kGlobalSoundObjectID = 100;
simcity.audio.kInstanceUIPause = 2792155208;
simcity.audio.kInstanceUIPlay1x = 3001632316;
simcity.audio.kInstanceUIPlay4x = 2951299571;
simcity.audio.kInstanceUIPlay8x = 2884188999;
simcity.audio.kInstanceUICategorySwitch = 1080246573;
simcity.audio.kInstanceUIUnlockReward = 3089277192;
simcity.audio.kInstanceUITaskAppear = 2745460279;
simcity.audio.kInstanceUIAlertStart = 3215452160;
simcity.audio.kInstanceUIAlert = 2343992537;
simcity.audio.kInstanceUIRolloverOn = 1470519903;
simcity.audio.kInstanceUIRolloverOff = 1373648531;
simcity.audio.kInstanceUIBuildingEditorActivate = 1397656934;
simcity.audio.kInstanceUIBuildingEditorDeactivate = 3499636039;
simcity.audio.kInstancePlayDisasterMusic = 1213927059;
simcity.audio.kInstanceStopDisasterMusic = 2334929265;
simcity.audio.kInstanceUICompleteObjective = 1408650347;
simcity.audio.kInstanceUICompleteMission = 2777328896;
simcity.audio.kInstanceUIMissionAppear = 1092403476;
simcity.audio.kInstanceUIMissionLock = 876512206;
simcity.audio.kInstanceUIMissionUnlock = 1327670751;
simcity.audio.kInstanceUIMissionRollLocked = 933088973;
simcity.audio.kInstanceUIMissionOpenDetails = 971251224;
simcity.audio.kInstanceUIMissionCloseDetails = 4082846110;
simcity.audio.kInstanceUIMissionCompleteClose = 2776357879;
simcity.audio.kInstanceUIChatReceive = 3996313678;
simcity.audio.kInstanceUIChatWindowOpen = 596385706;
simcity.audio.kInstanceUIChatWindowClose = 2396721518;
simcity.audio.kInstanceUIChatStatusOnline = 3670511699;
simcity.audio.kInstanceUIChatStatusOffline = 3453773015;
simcity.audio.kInstanceAlertAppear = 76864608;
simcity.audio.kInstanceAlertClick = 647012730;
simcity.audio.kInstanceSpeechBalloonClick = 2438320052;
simcity.audio.kInstanceSpeechBalloonPopUp = 3449133739;
simcity.audio.kInstanceAccept = 1432550301;
simcity.audio.kInstanceDecline = 1831299441;
simcity.audio.kAudioThoughtGainFocus = 3765868508;
simcity.audio.kAudioThoughtLoseFocus = 783352538;
simcity.audio.kAudioBubbleCoalTest = 210351335;
simcity.audio.kInstanceBubbleFireStation = 3183038514;
simcity.audio.kInstanceBubblePoliceStation = 3945375176;
simcity.audio.KInstanceBubbleAmbulance = 891172503;
simcity.audio.kInstanceBubbleConnection = 1354944053;
simcity.audio.kInstanceBubbleCasinoRequest = 2457579103;
simcity.audio.kInstanceBubbleCasinoReject = 176252149;
simcity.audio.kInstanceBubbleCoalRequest = 1795015962;
simcity.audio.kInstanceBubbleCoalAccept = 692392639;
simcity.audio.kInstanceBubblePower = 3529653194;
simcity.audio.kInstanceBubbleWater = 970846312;
simcity.audio.kInstanceBubbleAddToCoalMine = 2878794795;
simcity.audio.kInstanceBubbleStripMineTutorial = 2474336761;
simcity.audio.kInstanceBubbleWantCoal = 2509683276;
simcity.audio.kInstanceBubbleArsonistMission = 3993606830;
simcity.audio.kInstanceThoughtSigh = 1365754275;
simcity.audio.kInstanceThoughtHappy = 3441347292;
simcity.audio.kInstanceThoughtSick = 1432864892;
simcity.audio.kInstanceImportSwitch = 1433716310;
simcity.audio.kInstanceExportSwitch = 2214362571;
simcity.audio.kInstanceOnSwitch = 2287207141;
simcity.audio.kInstanceOffSwitch = 2302712689;
simcity.audio.kInstanceAcceptCoalOn = 3763762083;
simcity.audio.kInstanceAcceptCoalOff = 3541571159;
simcity.audio.kInstance_vo_spbub_coal_offer = 3155881122;
simcity.audio.kInstance_vo_spbub_arsonist = 103702237;
simcity.audio.kInstance_vo_spbub_coal_full = 2628826007;
simcity.audio.kInstance_vo_spbub_connect = 2730182098;
simcity.audio.kInstance_vo_spbub_stripmine = 3245962263;
simcity.audio.kInstance_vo_spbub_ambulance = 1563245886;
simcity.audio.kInstance_vo_spbub_power = 3570798307;
simcity.audio.kInstance_vo_spbub_multichat = 3404061849;
simcity.audio.kInstance_vo_spbub_build_firestation = 1497233469;
simcity.audio.kInstance_vo_spbub_emergency_build_firestation = 3102427647;
simcity.audio.kInstance_vo_spbub_firechief_welcome = 3524139946;
simcity.audio.kInstance_vo_spbub_firechief_nocasualties = 1303665573;
simcity.audio.kInstance_vo_spbub_firechief_casualties = 2697855320;
simcity.audio.kInstance_vo_spbub_firechief_upgrade = 422210854;
simcity.audio.kInstance_vo_spbub_water = 951022805;
simcity.audio.kInstance_vo_spbub_jobs = 3995575968;
simcity.audio.kInstance_vo_spbub_housing = 3437558957;
simcity.audio.kInstance_vo_spbub_school = 952842116;
simcity.audio.kInstance_vo_spbub_police = 1407935922;
simcity.audio.kInstance_vo_spbub_budget = 2097774171;
simcity.audio.kInstance_vo_spbub_shopping = 3800798508;
simcity.audio.kInstance_vo_spbub_levelup = 2305612601;
simcity.audio.kInstanceUIWireClick = 3755280172;
simcity.audio.kInstanceUIWireWinOpen = 1134944347;
simcity.audio.kInstanceUIWireWinClose = 3566946441;
simcity.audio.kInstanceUIWireMessageAppear = 119786511;
simcity.audio.kInstanceUISelectClick = 3694329007;
simcity.audio.kInstanceUIGreatWorkComplete = 1984804212;
simcity.audio.kInstanceUIGreatWorkClose = 1718662359;
simcity.audio.kInstanceUIAchievementUnlocked = 4004853950;
simcity.audio.kInstanceUIAchievementClose = 1782621006;
simcity.audio.kInstancePlayGreatWorkComplete = 2503220764;
simcity.audio.kQueryOverride_UnPowered = 557776375;
simcity.audio.kQueryOverride_UnWatered = 2925516809;
simcity.audio.kQueryOverride_IsBurning = 2986081577;
simcity.audio.kQueryOverride_ZombieTarget = 973669882;
simcity.audio.kQueryOverride_Plague = 2123319754;
simcity.audio.kQueryOverride_Vacant = 857862240;
simcity.audio.kQueryOverride_ClosedToShoppers = 4114980673;
simcity.audio.kQueryOverride_Crime = 1344867940;
simcity.audio.kQueryOverride_Sickness = 1397674046;
simcity.audio.kQueryOverride_Sewage = 2608390080;
simcity.audio.kQueryOverride_Garbage = 4244034606;
simcity.audio.kQueryOverride_Pollution = 2610609233;
simcity.audio.kQueryOverride_Death = 2062244753;
simcity.audio.kQueryOverride_Injury = 1244248500;
simcity.audio.kQueryOverride_Homeless = 3497009279;
simcity.audio.kQueryOverride_Abandoned = 3537765551;
simcity.audio.kQueryOverride_Rubble = 1389315223;
simcity.audio.mLastQueryOverrideID = 0;
simcity.audio.mQueueQuerySoundEvent = 0;
simcity.audio.queryMsg = {};
simcity.audio.queryMsg.mObjectID = 0;
simcity.audio.queryMsg.mEventID = 0;
simcity.audio.queryMsg.mSlot = -1;
simcity.SendSoundEvent = function (a, b) {
  scrui.PostGameCommand(scrui.BuildCommand(["sendsoundevent", a, b]))
};
simcity.PlayUnitQueryEvent = function (a, b, c) {
  scrui.PostGameCommand(scrui.BuildCommand(["PlayUnitQueryEvent", a, b, c]))
};
simcity.StopUnitQueryEvent = function (a, b, c) {
  scrui.PostGameCommand(scrui.BuildCommand(["StopUnitQueryEvent", a, b, c]))
};
simcity.SetAudioQueryOverridedID = function (a) {
  0 != a && a != simcity.audio.mLastQueryOverrideID && (scrui.PostGameCommand(scrui.BuildCommand(["SetAudioQueryOverridedID", a])), simcity.audio.mLastQueryOverrideID = a)
};
simcity.QueueAudioQueryEvent = function (a, b, c) {
  simcity.SetAudioQueryOverridedID(0);
  simcity.audio.mQueueQuerySoundEvent = 1;
  simcity.audio.queryMsg.mObjectID = a;
  simcity.audio.queryMsg.mEventID = b;
  simcity.audio.queryMsg.mSlot = c
};
simcity.ClearQueuedAudioQueryEvent = function () {
  simcity.audio.mQueueQuerySoundEvent = 0;
  simcity.audio.queryMsg.mObjectID = 0;
  simcity.audio.queryMsg.mEventID = 0;
  simcity.audio.queryMsg.mSlot = -1
};
simcity.SpeechBalloon = {};
simcity.SpeechBalloonLayouts = {
  kSpeechBalloonMultiPageAcceptDismiss : "Layouts/SpeechBalloonMultiPageAcceptDismiss.js",
  kThoughtBalloon_Happiness1_AcceptOnlyTemplate : "Layouts/ThoughtBalloon_Happiness1_AcceptOnlyTemplate.js",
  kThoughtBalloon_Happiness2_AcceptOnlyTemplate : "Layouts/ThoughtBalloon_Happiness2_AcceptOnlyTemplate.js",
  kThoughtBalloon_Happiness3_AcceptOnlyTemplate : "Layouts/ThoughtBalloon_Happiness3_AcceptOnlyTemplate.js",
  kThoughtBalloon_Happiness4_AcceptOnlyTemplate : "Layouts/ThoughtBalloon_Happiness4_AcceptOnlyTemplate.js",
  kThoughtBalloon_Happiness5_AcceptOnlyTemplate : "Layouts/ThoughtBalloon_Happiness5_AcceptOnlyTemplate.js"
};
simcity.SpeechBalloonButtonConfigs = {
  kDoItAskLaterNoThanks : 1,
  kOkay : 2,
  kEditNoThanks : 3
};
simcity.kSpeechBalloonLocaleTable = 2113026203;
simcity.kVignetteID = 657478559;
simcity.cSpeechBalloonItem = function (a, b, c) {
  this.mDisplayUnitRef = b;
  this.mSourceUnitRef = c ? c : b;
  this.mDataBinding = a;
  this.mIsThoughtBubble = a.hasOwnProperty("isThoughtBubble") && a.isThoughtBubble;
  this.mLayout = this.mLocaleTokens = null;
  this.mbShouldBeVisible = !0;
  this.mValidated = this.mbButtonEnabled = !1;
  this.mButtonConfig = this.mTextBubbleWindow = this.mDetailedInfoWindow = this.mIconParent = this.mOpenButton = null;
  this.mDepthIndex = this.mExpirationTime = -1
};
simcity.cSpeechBalloonItem.prototype.Init = function (a, b) {
  var c = this.mDataBinding.layoutPath;
  switch (c) {
  case "Layouts/SpeechBalloons/SpeechBalloonAcceptOnlyTemplate.js":
  case "Layouts/SpeechBalloons/SpeechBalloonMultiPageAcceptOnly.js":
  case "Layouts/SpeechBalloons/SpeechBalloonMultiAcceptSpecialization.js":
  case "Layouts/SpeechBalloons/SpeechBalloonRegion.js":
  case "Layouts/SpeechBalloons/SpeechBalloonMultiAcceptArrow.js":
  case "Layouts/SpeechBalloons/SpeechBalloonAcceptDismissArrow.js":
    this.mButtonConfig =
      simcity.SpeechBalloonButtonConfigs.kOkay;
    break;
  case "Layouts/SpeechBalloons/SpeechBalloonMultiPageAcceptDismiss.js":
  case "Layouts/SpeechBalloons/SpeechBalloonAcceptDismissTemplate.js":
    this.mButtonConfig = simcity.SpeechBalloonButtonConfigs.kDoItAskLaterNoThanks;
    break;
  case "Layouts/SpeechBalloons/SpeechBalloonEditor.js":
    this.mButtonConfig = simcity.SpeechBalloonButtonConfigs.kEditNoThanks
  }
  var d = !1,
  e = !1;
  switch (c) {
  case "Layouts/SpeechBalloons/SpeechBalloonMultiAcceptArrow.js":
  case "Layouts/SpeechBalloons/SpeechBalloonAcceptDismissArrow.js":
    e =
      !0;
  case "Layouts/SpeechBalloons/SpeechBalloonMultiAcceptSpecialization.js":
    d = !0
  }
  this.mButtonConfig && (c = simcity.SpeechBalloonLayouts.kSpeechBalloonMultiPageAcceptDismiss);
  this.mLayout = gUIManager.LoadAndCacheLayout(c, a.mContainerWindow);
  this.mOpenButton = this.mLayout.FindControlByID(simcity.cSpeechBalloonHandler.kBtnOpen);
  this.mIconParent = this.mLayout.FindControlByID(simcity.cSpeechBalloonHandler.kWinIconParent);
  this.mDetailedInfoWindow = this.mLayout.FindControlByID(simcity.cSpeechBalloonHandler.kWinDetailedInfo);
  this.mTextBubbleWindow = this.mLayout.FindControlByID(248200241);
  switch (this.mButtonConfig) {
  case simcity.SpeechBalloonButtonConfigs.kDoItAskLaterNoThanks:
    c = this.mDetailedInfoWindow.FindControlByID(248270154);
    c.SetVisibility(!0);
    break;
  case simcity.SpeechBalloonButtonConfigs.kOkay:
    c = this.mDetailedInfoWindow.FindControlByID(248270156);
    c.SetVisibility(!0);
    break;
  case simcity.SpeechBalloonButtonConfigs.kEditNoThanks:
    this.mDetailedInfoWindow.FindControlByID(248298087).SetVisibility(!0)
  }
  this.mButtonConfig ===
  simcity.SpeechBalloonButtonConfigs.kOkay && (c = this.mDetailedInfoWindow.FindControlByID(248270156), c.SetVisibility(!0), c = this.mDetailedInfoWindow.FindControlByID(248270154), c.SetVisibility(!1));
  var f = this.mLayout.FindControlByID(simcity.cSpeechBalloonHandler.kWinIcon);
  f && (this.mDataBinding.hasOwnProperty("iconPath") ? (c = this.mDataBinding.iconPath, "number" === typeof c && (c = scrui.DecimalToHex(c) + ".png"), f.SetWindowImage(c)) : f.SetVisibility(!1));
  if ((f = this.mLayout.FindControlByID(242489423)) && this.mDataBinding.hasOwnProperty("portrait"))
    c =
      this.mDataBinding.portrait, "number" === typeof c && (c = scrui.DecimalToHex(c) + ".png"), f.SetWindowImage(c);
  this.mDataBinding.hasOwnProperty("expirationTime") && (this.mExpirationTime = Math.random() * (this.mDataBinding.expirationTime[1] - this.mDataBinding.expirationTime[0]) + this.mDataBinding.expirationTime[0]);
  c = simcity.gGlobalUIHandler.mGameTimeManager.GetTotalElapsedGameTimeSeconds();
  this.mDataBinding.lastExecuted = c;
  var g = this.mDetailedInfoWindow;
  if ((c = this.mLayout.FindAnimationByID(210268304)) && !this.mDataBinding.isThoughtBubble)
    a =
      this, c.RegisterEventCallback(scrui.cAnimation.kEventStopped, function () {
      g.mIsVisible && a.PlaySpeech()
    });
  this.LoadMissionInfo();
  var h = simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData,
  c = h.mPlayingBox,
  f = c.creatorId;
  this.mLocaleTokens = {
    local_city_name : c.name || "[localCity]",
    local_player_name : f ? h.mPlayers[f].screenName : "[localPlayer]",
    region_name : h.mRegionName || "[regionName]"
  };
  if (this.mDataBinding.isRegional) {
    var c = [scrui.BuildRequestQuery([simcity.kDataUnits, scrui.RequestStringFromUnitRef(this.mSourceUnitRef),
          simcity.kDataBinAmount, simcity.kResourceRegionalBoxUniqueID])],
    i = this;
    scrui.RequestGameData(c, function (a) {
      if (a = a[0])
        if (a = h.mBoxes[a]) {
          i.mLocaleTokens.friend_city_name = a.name || "[neighborCity]";
          (a = a.creatorId) && (i.mLocaleTokens.friend_player_name = h.mPlayers[a].screenName || "[neighborPlayer]")
        }
    })
  }
  if (this.mDataBinding.hasOwnProperty("localeTokenQueries")) {
    var f = [this.mDataBinding],
    c = [],
    j = [],
    k = {
      argumentList : [scrui.RequestStringFromUnitRef(a.mDisplayUnitRef)]
    };
    simcity.GenerateDataBindingQueries(f, c, k, j,
      !1, "localeTokenQueries");
    var l = this;
    simcity.RequestDataBindingData(c, f, j, !1, function (a) {
      var a = l.mDataBinding.getLocaleTokens(a[0], b),
      c;
      for (c in a)
        l.mLocaleTokens[c] = a[c];
      l.UpdateText(false)
    })
  } else
    this.UpdateText(!1);
  this.mIconParent.SetVisibility(!1);
  this.mIconParent.SetVisibility(!0);
  this.mDataBinding.enableInTutorial ? (this.mValidated = !0, this.mLayout.SetVisibility(!1), this.mLayout.SetVisibility(!0)) : this.mLayout.SetVisibility(!1);
  d && (this.mLayout.FindAnimationByID(248284603).Start(scrui.cAnimation.kPlayForward),
    e && this.mLayout.FindControlByID(238097675).SetVisibility(!0))
};
simcity.cSpeechBalloonItem.prototype.LoadMissionInfo = function () {
  if (this.mDataBinding.hasOwnProperty("missionUnitID") && !this.mDataBinding.enableInTutorial) {
    var a = this.mLayout.FindControlByID(247089461);
    if (a) {
      var b = this.mLayout.FindControlByID(247055005);
      a.SetVisibility(!0);
      this.mDetailedInfoWindow.SetHeight(this.mDetailedInfoWindow.mHeight + a.mHeight);
      var a = [scrui.BuildRequestQuery([simcity.kDataUnitEntryIDSimProperties, this.mDataBinding.missionUnitID, simcity.LoadMissionInfo.kPropMissionTitle]), scrui.BuildRequestQuery([simcity.kDataUnitEntryIDSimProperties,
            this.mDataBinding.missionUnitID, simcity.LoadMissionInfo.kPropMissionRewardAmount])],
      c = this;
      scrui.RequestGameData(a, function (a) {
        var e = scrui.LocaleStringFromLocaleProperty(a[0]),
        f = b.mHeight;
        b.SetLocaleText(e);
        c.mDetailedInfoWindow.SetHeight(c.mDetailedInfoWindow.mHeight + (b.GetTextHeight() - f));
        0 < a[1] && (e = c.mLayout.FindControlByID(217355105), e.SetVisibility(!0), c.mLayout.FindControlByID(217355107).UpdateLocaleText({
            rewardAmount : a[1]
          }), c.mDetailedInfoWindow.SetHeight(c.mDetailedInfoWindow.mHeight + e.mHeight))
      })
    }
  }
};
simcity.cSpeechBalloonItem.prototype.Expand = function () {
  this.mIconParent.SetVisibility(!1);
  this.mDetailedInfoWindow.SetVisibility(!0);
  this.SetupFirstPage();
  this.mIsThoughtBubble ? this.PlaySpeech() : simcity.gGlobalUIHandler.mTutorialManager.SetModalWindow(this.mDetailedInfoWindow, !0)
};
simcity.cSpeechBalloonItem.prototype.Collapse = function () {
  this.mIconParent.SetVisibility(!0);
  this.mDetailedInfoWindow && this.mDetailedInfoWindow.SetVisibility(!1);
  this.mIsThoughtBubble || (simcity.gGlobalUIHandler.mTutorialManager.SetModalWindow(null, !1), 0 !== this.mDataBinding.textIndex && this.MovePage(-this.mDataBinding.textIndex))
};
simcity.cSpeechBalloonItem.prototype.IsExpanded = function () {
  return this.mDetailedInfoWindow && this.mDetailedInfoWindow.mIsVisible
};
simcity.cSpeechBalloonItem.prototype.UpdateText = function (a) {
  a && simcity.gGlobalUIHandler.mTutorialManager.SetModalWindow(null, !1);
  this.mDataBinding.hasOwnProperty("textIndex") || (this.mDataBinding.textIndex = 0);
  var b = this.mDataBinding.messages[this.mDataBinding.textIndex];
  this.mDataBinding.isThoughtBubble && (++this.mDataBinding.textIndex, this.mDataBinding.textIndex === this.mDataBinding.messages.length && (this.mDataBinding.textIndex = 0));
  var c = this,
  d = this.mDetailedInfoWindow,
  e = this.mLayout.FindControlByID(simcity.cSpeechBalloonHandler.kTxtSummary),
  b = new scrui.cLocaleString(scrui.DecimalToHex(b[0]), scrui.DecimalToHex(b[1]));
  e.SetLocaleText(b, this.mLocaleTokens, function () {
    var b = e.mHeight;
    d.SetVisibility(true);
    var g = e.GetTextHeight();
    g === 0 && (g = 90);
    b = g - b;
    a || d.SetVisibility(false);
    if (c.mIsThoughtBubble) {
      b = d.mHeight + b;
      g = c.mLayout.FindControlByID(simcity.cSpeechBalloonHandler.kWinThoughtBubbleBacking);
      g = d.mHeight - g.mHeight;
      b = g + Math.ceil((b - g) / 32) * 32;
      d.SetPosition(d.mLeft, d.mTop - (b - d.mHeight), d.mWidth, b)
    } else
      c.mTextBubbleWindow && c.mTextBubbleWindow.SetPosition(c.mTextBubbleWindow.mLeft,
        c.mTextBubbleWindow.mTop - b, c.mTextBubbleWindow.mWidth, c.mTextBubbleWindow.mHeight + b);
    a && simcity.gGlobalUIHandler.mTutorialManager.SetModalWindow(d, true)
  })
};
simcity.cSpeechBalloonItem.prototype.SetupFirstPage = function () {
  var a = this.mDataBinding.textIndex === this.mDataBinding.messages.length - 1;
  if (0 === this.mDataBinding.textIndex) {
    var b = this.mLayout.FindControlByID(simcity.cSpeechBalloonHandler.kBtnAccept),
    c = this.mLayout.FindControlByID(simcity.cSpeechBalloonHandler.kBtnDismissForever),
    d = this.mLayout.FindControlByID(simcity.cSpeechBalloonHandler.kBtnDismiss);
    b && b.SetVisibility(a);
    switch (this.mButtonConfig) {
    case simcity.SpeechBalloonButtonConfigs.kDoItAskLaterNoThanks:
    case simcity.SpeechBalloonButtonConfigs.kEditNoThanks:
      d &&
      d.SetVisibility(1 != this.mDataBinding.displayCountLimit && a),
      c && c.SetVisibility(a)
    }
    (b = this.mLayout.FindControlByID(simcity.cSpeechBalloonHandler.kBtnNext)) && b.SetVisibility(!a)
  }
};
simcity.cSpeechBalloonItem.prototype.MovePage = function (a, b) {
  this.mDataBinding.textIndex += a;
  var c = this.mDataBinding.textIndex === this.mDataBinding.messages.length - 1,
  d = this.mLayout.FindControlByID(simcity.cSpeechBalloonHandler.kBtnAccept),
  e = this.mLayout.FindControlByID(simcity.cSpeechBalloonHandler.kBtnDismissForever),
  f = this.mLayout.FindControlByID(simcity.cSpeechBalloonHandler.kBtnDismiss);
  d && d.SetVisibility(c);
  switch (this.mButtonConfig) {
  case simcity.SpeechBalloonButtonConfigs.kDoItAskLaterNoThanks:
  case simcity.SpeechBalloonButtonConfigs.kEditNoThanks:
    f &&
    f.SetVisibility(1 != this.mDataBinding.displayCountLimit && c),
    e && e.SetVisibility(c)
  }
  (d = this.mLayout.FindControlByID(simcity.cSpeechBalloonHandler.kBtnNext)) && d.SetVisibility(!c);
  this.UpdateText(b)
};
simcity.cSpeechBalloonItem.prototype.PlaySpeech = function () {
  scrui.Play2DSound(this.mDataBinding.messages[this.mDataBinding.textIndex][2])
};
simcity.cSpeechBalloonHandler = function () {
  this.UIHandler = scrui.cUIHandler;
  this.UIHandler();
  this.mDataBindings = null;
  this.mSpeechBalloons = [];
  this.mVisibilityCounter = 1;
  this.mNumVisibleThoughtBubbles = this.mNumVisibleSpeechBalloons = 0;
  this.mSpeechBalloonQueue = [];
  this.mThoughtBubbleQueue = [];
  this.mUpdateTimer = this.mSpeechBalloonQueueUpdateTimer = 0;
  this.mCurrentOpenBalloon = this.mListBox = this.mPreviousCameraState = this.mContainerWindow = null;
  this.mHideThoughtBubbles = this.mHideSpeechBubbles = !1
};
goog.inherits(simcity.cSpeechBalloonHandler, scrui.cUIHandler);
simcity.cSpeechBalloonHandler.kLayoutIDSpeechBalloon = 207072196;
simcity.cSpeechBalloonHandler.kBtnOpen = 204914388;
simcity.cSpeechBalloonHandler.kBtnNext = 213369346;
simcity.cSpeechBalloonHandler.kBtnAccept = 205495732;
simcity.cSpeechBalloonHandler.kBtnDismiss = 205495728;
simcity.cSpeechBalloonHandler.kBtnDismissForever = 247054153;
simcity.cSpeechBalloonHandler.kWinDetailedInfo = 204914593;
simcity.cSpeechBalloonHandler.kTxtSummary = 205505356;
simcity.cSpeechBalloonHandler.kWinIconParent = 208347290;
simcity.cSpeechBalloonHandler.kWinIcon = 208536371;
simcity.cSpeechBalloonHandler.kWinThoughtBubbleBacking = 209653274;
simcity.cSpeechBalloonHandler.kTimeBetweenSpeechBalloons = 6;
simcity.cSpeechBalloonHandler.kMaxVisibleSpeechBalloons = 30;
simcity.cSpeechBalloonHandler.prototype.Init = function () {
  this.mContainerWindow = gUIManager.FindControlByID(simcity.kWinSpeechBallonContainer);
  this.mHideSpeechBubbles = 0 !== simcity.CheckOption(simcity.OptionItems.kGameplayTab.kHideSpeechBubbles.optionID);
  this.mHideThoughtBubbles = 0 !== simcity.CheckOption(simcity.OptionItems.kGameplayTab.kHideThoughtBubbles.optionID);
  this.OptionsUpdated()
};
simcity.cSpeechBalloonHandler.prototype.OptionsUpdated = function () {
  this.mHideSpeechBubbles && this.RemoveSpeechBalloonsOfType(!1);
  this.mHideThoughtBubbles && this.RemoveSpeechBalloonsOfType(!0);
  simcity.gGlobalUIHandler.mEventTriggersManager.mEnabled = !(this.mHideSpeechBubbles && this.mHideThoughtBubbles)
};
simcity.cSpeechBalloonHandler.prototype.CacheLayouts = function () {
  for (var a in simcity.SpeechBalloonLayouts) {
    var b = gUIManager.LoadAndCacheLayout(simcity.SpeechBalloonLayouts[a], this.mContainerWindow);
    b && b.DestroyControl()
  }
};
simcity.cSpeechBalloonHandler.prototype.GetExpandedSpeechBalloon = function () {
  for (var a = 0; a < this.mSpeechBalloons.length; a++)
    if (this.mSpeechBalloons[a].IsExpanded())
      return this.mSpeechBalloons[a];
  return null
};
simcity.cSpeechBalloonHandler.prototype.GetExpandedSpeechBalloonInfo = function () {
  for (var a = 0; a < this.mSpeechBalloons.length; a++)
    if (this.mSpeechBalloons[a].IsExpanded())
      return {
        item : this.mSpeechBalloons[a],
        index : a
      };
  return null
};
simcity.cSpeechBalloonHandler.prototype.Shutdown = function () {
  this.mContainerWindow && (this.mContainerWindow.DestroyAllChildren(), this.mContainerWindow = null);
  this.mSpeechBalloons = [];
  this.mDataBindings = null
};
simcity.cSpeechBalloonHandler.prototype.ShowSpeechBalloons = function (a) {
  a ? ++this.mVisibilityCounter : --this.mVisibilityCounter;
  this.mContainerWindow.SetVisibility(0 < this.mVisibilityCounter)
};
simcity.cSpeechBalloonHandler.prototype.SpeechBallonsVisible = function () {
  return 0 < this.mVisibilityCounter
};
simcity.cSpeechBalloonHandler.prototype.GetSpeechBalloonCount = function () {
  return this.mNumVisibleSpeechBalloons + this.mNumVisibleThoughtBubbles
};
simcity.cSpeechBalloonHandler.prototype.RestoreCamera = function () {
  scrui.PostGameCommand(scrui.BuildCommand([simcity.kCommandMoveCameraMinusOrientation, this.mPreviousCameraState.distance, this.mPreviousCameraState.targetPitch]))
};
simcity.cSpeechBalloonHandler.prototype.RestorCameraMinusTransition = function () {
  scrui.PostGameCommand(scrui.BuildCommand([simcity.kCommandMoveCameraNoTransition, this.mPreviousCameraState.distance, this.mPreviousCameraState.targetPitch]))
};
simcity.cSpeechBalloonHandler.prototype.AddDebugSpeechBalloon = function (a, b) {
  var a = Number(a),
  c = null;
  if (simcity.SpeechBalloonEvents.DataBindings.hasOwnProperty(a))
    c = simcity.SpeechBalloonEvents.DataBindings[a];
  else
    for (var d in simcity.SpeechBalloonPolling)
      if (simcity.SpeechBalloonPolling[d].DataBindings.hasOwnProperty(a)) {
        c = simcity.SpeechBalloonPolling[d].DataBindings[a];
        break
      }
  scrui.Assert(c, "Undefined dataBinding " + a);
  this.mDebugSpeechBalloonItem && (this.mDebugSpeechBalloonItem.mDebugName === a && (c.textIndex =
        this.mDebugSpeechBalloonItem.mDataBinding.textIndex), this.mDebugSpeechBalloonItem.mLayout.DestroyControl());
  this.mDebugSpeechBalloonItem = new simcity.cSpeechBalloonItem(c, b);
  this.mDebugSpeechBalloonItem.Init(this);
  this.mDebugSpeechBalloonItem.mbShouldBeVisible = !0;
  this.mDebugSpeechBalloonItem.mDebugName = a
};
simcity.cSpeechBalloonHandler.prototype.IsDebugSpeechBalloon = function (a) {
  var b = !1;
  if (this.mDebugSpeechBalloonItem) {
    for (a = a.GetParentLayout(); a && a.GetControlID() !== simcity.cSpeechBalloonHandler.kLayoutIDSpeechBalloon; )
      a = a.GetParentLayout();
    b = a === this.mDebugSpeechBalloonItem.mLayout
  }
  return b
};
simcity.cSpeechBalloonHandler.prototype.AddSpeechBalloonToQueue = function (a, b, c, d) {
  if (!simcity.gGlobalUIHandler.mIsSpectatorMode || a.isThoughtBubble) {
    for (var e = a.isThoughtBubble ? this.mThoughtBubbleQueue : this.mSpeechBalloonQueue, f = 0, g = e.length; f < g; ++f) {
      var h = e[f];
      if (a === h.mDataBinding) {
        scrui.PostGameCommand(scrui.BuildCommand([simcity.kCommandSetSpeechBalloonTarget, scrui.RequestStringFromUnitRef(h.mDisplayUnitRef), 0]));
        h.mDisplayUnitRef = b;
        scrui.PostGameCommand(scrui.BuildCommand([simcity.kCommandSetSpeechBalloonTarget,
              scrui.RequestStringFromUnitRef(h.mDisplayUnitRef), a.importance]));
        return
      }
      if (a.importance > h.mDataBinding.importance) {
        e.splice(f, 0, {
          mDataBinding : a,
          mDisplayUnitRef : b,
          mSourceUnitRef : c,
          mExtraData : d
        });
        return
      }
    }
    e.push({
      mDataBinding : a,
      mDisplayUnitRef : b,
      mSourceUnitRef : c,
      mExtraData : d
    })
  }
};
simcity.cSpeechBalloonHandler.prototype.UpdateQueue = scrui.Client_ProfZone("cSpeechBalloonHandler.UpdateQueue", function (a) {
    0 < this.mSpeechBalloonQueueUpdateTimer && (this.mSpeechBalloonQueueUpdateTimer -= a);
    if (0 >= this.mSpeechBalloonQueueUpdateTimer && (this.mSpeechBalloonQueueUpdateTimer = 0, 0 !== this.mSpeechBalloonQueue.length && this.mNumVisibleSpeechBalloons < simcity.cSpeechBalloonHandler.kMaxVisibleSpeechBalloons && (a = this.mSpeechBalloonQueue.shift(), this.AddSpeechBalloon(a.mDataBinding, a.mDisplayUnitRef, a.mSourceUnitRef,
            a.mExtraData)), 0 !== this.mThoughtBubbleQueue.length && this.mNumVisibleThoughtBubbles < simcity.cSpeechBalloonHandler.kMaxVisibleSpeechBalloons))
      a = this.mThoughtBubbleQueue.shift(), this.AddSpeechBalloon(a.mDataBinding, a.mDisplayUnitRef, a.mSourceUnitRef, a.mExtraData)
  });
simcity.cSpeechBalloonHandler.prototype.AddSpeechBalloon = function (a, b, c, d) {
  for (var e = !1, f = 0, g = this.mSpeechBalloons.length; f < g; ++f) {
    var h = this.mSpeechBalloons[f];
    if (simcity.CompareUnitRefs(h.mDisplayUnitRef, b)) {
      if (h.mIsThoughtBubble)
        if (a.importance > h.mDataBinding.importance)
          this.RemoveSpeechBalloonAtIndex(f);
        else
          return null;
      else {
        if (a.importance > h.mDataBinding.importance) {
          if (h.IsExpanded())
            return null;
          h.mbShouldBeVisible = !1
        } else
          e = !0;
        --this.mNumVisibleSpeechBalloons
      }
      break
    }
  }
  c = new simcity.cSpeechBalloonItem(a,
      b, c);
  c.Init(this, d);
  a.isThoughtBubble ? (++this.mNumVisibleThoughtBubbles, this.DecrementDisplayCountLimit(a)) : ++this.mNumVisibleSpeechBalloons;
  e ? c.mbShouldBeVisible = !1 : scrui.PostGameCommand(scrui.BuildCommand([simcity.kCommandSetSpeechBalloonTarget, scrui.RequestStringFromUnitRef(b), a.importance]));
  this.mSpeechBalloonQueueUpdateTimer = simcity.cSpeechBalloonHandler.kTimeBetweenSpeechBalloons;
  f = 0;
  for (g = this.mSpeechBalloons.length; f < g; ++f)
    if (h = this.mSpeechBalloons[f], a.importance > h.mDataBinding.importance)
      return this.mSpeechBalloons.splice(f,
        0, c), c;
  this.mSpeechBalloons.push(c);
  return c
};
simcity.cSpeechBalloonHandler.prototype.RemoveAllSpeechBalloons = function () {
  for (var a = 0, b = this.mSpeechBalloons.length; a < b; ++a) {
    var c = this.mSpeechBalloons[a];
    c.IsExpanded() && !c.mIsThoughtBubble && (simcity.gGlobalUIHandler.mTutorialManager.SetModalWindow(null, !1), this.RestoreCamera());
    this.RemoveSpeechBalloonAtIndex(0)
  }
};
simcity.cSpeechBalloonHandler.prototype.RemoveSpeechBalloonsOfType = function (a) {
  for (var b = 0; b < this.mSpeechBalloons.length; ) {
    var c = this.mSpeechBalloons[b];
    c.mIsThoughtBubble == a ? (c.IsExpanded() && !c.mIsThoughtBubble && (simcity.gGlobalUIHandler.mTutorialManager.SetModalWindow(null, !1), this.RestoreCamera()), this.RemoveSpeechBalloonAtIndex(b)) : ++b
  }
  a = a ? this.mThoughtBubbleQueue : this.mSpeechBalloonQueue;
  for (b = 0; b < a.length; ++b)
    scrui.PostGameCommand(scrui.BuildCommand([simcity.kCommandSetSpeechBalloonTarget, scrui.RequestStringFromUnitRef(a[b].mDisplayUnitRef),
          0]));
  a.length = 0
};
simcity.cSpeechBalloonHandler.prototype.RemoveSpeechBalloonItem = function (a) {
  0 <= a.index ? this.RemoveSpeechBalloonAtIndex(a.index) : a.item === this.mDebugSpeechBalloonItem && (a = a.item, a.IsExpanded() && !a.mIsThoughtBubble && simcity.gGlobalUIHandler.mTutorialManager.SetModalWindow(null, !1), a.mLayout.DestroyControl(), this.mDebugSpeechBalloonItem = null)
};
simcity.cSpeechBalloonHandler.prototype.RemoveSpeechBalloonAtIndex = function (a) {
  for (var b = this.mSpeechBalloons[a], c = 0, d = 0, e = this.mSpeechBalloons.length; d < e; ++d) {
    var f = this.mSpeechBalloons[d];
    if (b !== f && simcity.CompareUnitRefs(f.mDisplayUnitRef, b.mDisplayUnitRef)) {
      f.mbShouldBeVisible = !0;
      ++this.mNumVisibleSpeechBalloons;
      c = f.mDataBinding.importance;
      break
    }
  }
  scrui.PostGameCommand(scrui.BuildCommand([simcity.kCommandSetSpeechBalloonTarget, scrui.RequestStringFromUnitRef(b.mDisplayUnitRef), c]));
  b.mIsThoughtBubble ?
  --this.mNumVisibleThoughtBubbles : (--this.mNumVisibleSpeechBalloons, b.mDataBinding.textIndex = 0, b.IsExpanded() && simcity.gGlobalUIHandler.mTutorialManager.SetModalWindow(null, !1));
  b.mLayout.DestroyControl();
  this.mSpeechBalloons.splice(a, 1)
};
simcity.cSpeechBalloonHandler.prototype.RemoveSpeechBalloonDataBinding = function (a) {
  simcity.SpeechBalloonEvents.DataBindings.hasOwnProperty(a.id) ? delete simcity.SpeechBalloonEvents.DataBindings[a.id] : simcity.gGlobalUIHandler.mEventTriggersManager.RemoveDataBinding(a)
};
simcity.cSpeechBalloonHandler.prototype.AddSpeechBalloonWithoutUnit = scrui.Client_ProfZone("cSpeechBalloonHandler.AddSpeechBalloonWithoutUnit", function (a, b, c, d) {
    var e = !0;
    if (!0 !== a.isThoughtBubble)
      for (var f = 0, g = this.mSpeechBalloons.length; f < g; ++f)
        if (this.mSpeechBalloons[f].mDataBinding === a) {
          e = !1;
          break
        }
    if (e) {
      var h = this,
      e = simcity.GetSpeechBalloonTarget(a);
      0 !== e && (e = scrui.BuildRequestQuery([simcity.kDataSpeechBalloonTarget, e, a.importance]), scrui.RequestGameData([e], function (e) {
          e = e[0];
          simcity.IsUnitRefValid(e) &&
          (b ? (e = h.AddSpeechBalloon(a, e, c, d)) && h.HandleSpeechBalloonClick(e) : h.AddSpeechBalloonToQueue(a, e, c, d))
        }))
    }
  });
simcity.cSpeechBalloonHandler.prototype.AddSpeechBalloonFromTrigger = function (a, b) {
  if (a.hasOwnProperty("triggerTime")) {
    var c = simcity.gGlobalUIHandler.mGameTimeManager.GetTotalElapsedGameTimeSeconds();
    if (!a.hasOwnProperty("timeToFire") || c > a.timeToFire)
      a.timeToFire = c + Math.random() * (a.triggerTime[1] - a.triggerTime[0]) + a.triggerTime[0];
    else
      return
  }
  var d = b.unitRef,
  e = b.extraData,
  f = a.hasOwnProperty("speechBalloonTarget") || a.hasOwnProperty("unitID");
  if (a.hasOwnProperty("queries")) {
    scrui.RequestStringFromUnitRef(d);
    c = [];
    simcity.AddSimpleQueries(c, a.queries);
    var g = [Object.keys(a.queries)],
    h = this;
    simcity.RequestDataBindingDataSimple(c, g, function (b) {
      if (!a.hasOwnProperty("test") || a.test(b[0]))
        f ? h.AddSpeechBalloonWithoutUnit(a, !1, d, e) : h.AddSpeechBalloonToQueue(a, d, d, e)
    })
  } else
    f ? this.AddSpeechBalloonWithoutUnit(a, !1, d, e) : this.AddSpeechBalloonToQueue(a, d, d, e)
};
simcity.cSpeechBalloonHandler.prototype.DecrementDisplayCountLimit = function (a) {
  a.hasOwnProperty("displayCountLimit") && (a.displayCountLimit--, 0 >= a.displayCountLimit && this.RemoveSpeechBalloonDataBinding(a))
};
simcity.cSpeechBalloonHandler.prototype.OpenSpeechBalloon = function (a) {
  for (var b = 0, c = this.mSpeechBalloons.length; b < c; ++b) {
    var d = this.mSpeechBalloons[b];
    if (d.mDataBinding.id == a) {
      this.HandleSpeechBalloonClick(d);
      return
    }
  }
  b = 0;
  for (c = this.mSpeechBalloonQueue.length; b < c; ++b)
    if (d = this.mSpeechBalloonQueue[b], d.mDataBinding.id == a) {
      this.AddSpeechBalloon(d.mDataBinding, d.mDisplayUnitRef);
      this.mSpeechBalloonQueue.splice(b, 1);
      return
    }
  for (var e in simcity.SpeechBalloonDataBindings)
    if (b = simcity.SpeechBalloonDataBindings[e],
      b.id == a) {
      this.AddSpeechBalloonWithoutUnit(b, !0);
      break
    }
};
simcity.cSpeechBalloonHandler.prototype.HandleGameEvent = scrui.Client_ProfZone("cSpeechBalloonHandler.HandleGameEvent", function (a, b) {
    switch (a) {
    case simcity.kGameMessageUnitRuleUIEvent:
    case simcity.kGameMessageGlobalRuleUIEvent:
      var c = b.eventID,
      d = simcity.SpeechBalloonEvents.DataBindings;
      if (d.hasOwnProperty(c)) {
        d = d[c];
        if (!d.isThoughtBubble && this.mHideSpeechBubbles || d.isThoughtBubble && this.mHideThoughtBubbles)
          break;
        var e = !0;
        if (!d.isThoughtBubble)
          for (var f = 0, g = this.mSpeechBalloons.length; f < g; ++f)
            if (this.mSpeechBalloons[f].mDataBinding ===
              d) {
              e = !1;
              break
            }
        e && (d.id = Number(c), simcity.TestSpeechBalloonTriggerHelper(d) && this.AddSpeechBalloonFromTrigger(d, b))
      }
      break;
    case simcity.kGameMessageBuildingSelected:
      simcity.DEBUG && (this.mListBox && this.mListBox.IsVisible() && this.mListBox.mSelection) && (this.AddDebugSpeechBalloon(this.mListBox.mSelection, b.unitRef), this.mListBox.SetSelection(null));
      break;
    case simcity.kGameMessageToolSelected:
    case simcity.kGameMessageShowRegionUI:
    case simcity.kMessageEditorActivated:
    case simcity.kGameMessageHeavyDataLayerToggledOn:
      this.ShowSpeechBalloons(!1);
      break;
    case simcity.kGameMessageToolDeselected:
    case simcity.kGameMessageHideRegionUI:
    case simcity.kMessageEditorDeactivated:
    case simcity.kGameMessageHeavyDataLayerToggledOff:
      this.ShowSpeechBalloons(!0)
    }
  });
simcity.cSpeechBalloonHandler.prototype.HandleSpeechBalloonClick = function (a) {
  a.Expand();
  this.mCurrentOpenBalloon = a;
  if (!a.mIsThoughtBubble) {
    var b = this,
    c = [scrui.BuildRequestQuery([simcity.kDataCamera])];
    scrui.RequestGameData(c, function (c) {
      b.mPreviousCameraState = c[0];
      var c = a.mDataBinding,
      e = scrui.RequestStringFromUnitRef(a.mDisplayUnitRef);
      c.isThoughtBubble || (simcity.gGlobalUIHandler.mSpeedUIHandler.GetGameSpeed() != simcity.kSpeedPaused && (simcity.gGlobalUIHandler.mSpeedUIHandler.sPreviousGameSpeed = simcity.gGlobalUIHandler.mSpeedUIHandler.GetGameSpeed(),
          scrui.PostGameCommand(scrui.BuildCommand(["setspeed", simcity.kSpeedTurtle]))), c.vignetteActorPalette ? scrui.PostGameCommand(scrui.BuildCommand([simcity.kCommandActivateVignette, e, simcity.kVignetteID, c.vignetteActorPalette])) : scrui.PostGameCommand(scrui.BuildCommand([simcity.kCommandActivateVignette, e, simcity.kVignetteID])), scrui.PostGameCommand(scrui.BuildCommand([simcity.kCommandZoomToSpeechBalloon, e])), scrui.PostGameCommand(scrui.BuildCommand([simcity.kDataToolMessage, scrui.IDFromName("DeselectAll")])));
      simcity.SendSoundEvent(simcity.audio.kGlobalSoundObjectID, simcity.audio.kInstanceSpeechBalloonClick)
    })
  }
};
simcity.cSpeechBalloonHandler.prototype.HandleUIMessage = function (a, b, c) {
  switch (a) {
  case scrui.kMsgTypeButtonClicked:
    switch (b) {
    case simcity.cSpeechBalloonHandler.kBtnOpen:
      a = this.GetSpeechBalloonItemInfo(c);
      (a = a.item) && this.HandleSpeechBalloonClick(a);
      break;
    case simcity.cSpeechBalloonHandler.kBtnNext:
      a = this.GetSpeechBalloonItemInfo(c);
      if (a = a.item)
        a.MovePage(1, !0), a.PlaySpeech();
      break;
    case simcity.cSpeechBalloonHandler.kBtnAccept:
      a = this.GetSpeechBalloonItemInfo(c);
      this.ExitSpeechBalloon(a, !0, !1);
      break;
    case simcity.cSpeechBalloonHandler.kBtnDismiss:
      a = this.GetSpeechBalloonItemInfo(c);
      this.OnAskMeLater(a);
      break;
    case simcity.cSpeechBalloonHandler.kBtnDismissForever:
      a = this.GetSpeechBalloonItemInfo(c),
      this.ExitSpeechBalloon(a, !1, !1)
    }
    break;
  case scrui.kMsgTypeButtonGainFocus:
    switch (b.controlID) {
    case simcity.cSpeechBalloonHandler.kBtnOpen:
      if (a = this.GetSpeechBalloonItemInfo(c), (a = a.item) && a.mIsThoughtBubble)
        simcity.SendSoundEvent(simcity.audio.kGlobalSoundObjectID, simcity.audio.kAudioThoughtGainFocus), a.Expand()
    }
    break;
  case scrui.kMsgTypeButtonLoseFocus:
    switch (b.controlID) {
    case simcity.cSpeechBalloonHandler.kWinDetailedInfo:
      a = this.GetSpeechBalloonItemInfo(c);
      if ((a = a.item) && a.mIsThoughtBubble)
        if (c = a.mLayout, !b.newFocus || b.newFocus.GetParentLayout() !== c)
          simcity.SendSoundEvent(simcity.audio.kGlobalSoundObjectID, simcity.audio.kAudioThoughtLoseFocus), a.Collapse();
      break;
    case simcity.cSpeechBalloonHandler.kBtnOpen:
      if (!b.newFocus || b.newFocus.GetControlID() !== simcity.cSpeechBalloonHandler.kWinDetailedInfo)
        a = this.GetSpeechBalloonItemInfo(c),
        (a = a.item) && a.mIsThoughtBubble && a.Collapse()
    }
    break;
  case scrui.cLocaleManager.kLocaleSet:
    this.CacheLayouts();
    break;
  case simcity.cSettingsUIHandler.kMessageOptionUpdated:
    switch (b.itemData.optionID) {
    case simcity.OptionItems.kGameplayTab.kHideSpeechBubbles.optionID:
      this.mHideSpeechBubbles = 0 !== b.value;
      this.OptionsUpdated();
      break;
    case simcity.OptionItems.kGameplayTab.kHideThoughtBubbles.optionID:
      this.mHideThoughtBubbles = 0 !== b.value,
      this.OptionsUpdated()
    }
  }
};
simcity.cSpeechBalloonHandler.prototype.PrintDebugInfo = function () {
  if (simcity.DEBUG) {
    var a = Object.keys(simcity.SpeechBalloonEvents).length,
    b;
    for (b in simcity.SpeechBalloonPolling)
      a += Object.keys(simcity.SpeechBalloonPolling[b].DataBindings).length;
    scrui.DebugPrint("cSpeechBalloonHandler mSpeechBalloons = " + this.mSpeechBalloons.length + ", mSpeechBalloonQueue = " + this.mSpeechBalloonQueue.length + ", mThoughtBubbleQueue = " + this.mThoughtBubbleQueue.length + ", dataBindings = " + a);
    a = 0;
    for (b = this.mSpeechBalloons.length; a <
      b; ++a)
      scrui.DebugPrint("    active: " + scrui.DecimalToHex(this.mSpeechBalloons[a].mDataBinding.id));
    a = 0;
    for (b = this.mSpeechBalloonQueue.length; a < b; ++a)
      scrui.DebugPrint("    SB queue: " + scrui.DecimalToHex(this.mSpeechBalloonQueue[a].mDataBinding.id));
    a = 0;
    for (b = this.mThoughtBubbleQueue.length; a < b; ++a)
      scrui.DebugPrint("    TB queue: " + scrui.DecimalToHex(this.mThoughtBubbleQueue[a].mDataBinding.id))
  }
};
simcity.cSpeechBalloonHandler.prototype.OnAskMeLater = function (a) {
  this.ExitSpeechBalloon(a, !1, !0)
};
simcity.cSpeechBalloonHandler.prototype.ExitSpeechBalloon = function (a, b, c) {
  var d = null;
  if (null == a)
    if (this.mCurrentOpenBalloon) {
      for (var d = this.mCurrentOpenBalloon, e = -1, f = 0, a = this.mSpeechBalloons.length; f < a; ++f)
        if (d === this.mSpeechBalloons[f]) {
          e = f;
          break
        }
      this.mCurrentOpenBalloon = null;
      if (0 <= e)
        a = {
          item : d,
          index : e
        };
      else
        return
    } else
      return;
  else
    d = a.item;
  d && (e = d.mDataBinding, e.textIndex = 0, f = d === this.mDebugSpeechBalloonItem, this.RemoveSpeechBalloonItem(a), a = b && d.mButtonConfig === simcity.SpeechBalloonButtonConfigs.kEditNoThanks,
    a || (b ? (e.hasOwnProperty("missionUnitID") && scrui.PostGameCommand(scrui.BuildCommand([simcity.kCommandCreateUnit, e.missionUnitID, simcity.kDataUnitRef, scrui.RequestStringFromUnitRef(d.mSourceUnitRef)])), simcity.SendSoundEvent(simcity.audio.kGlobalSoundObjectID, simcity.audio.kInstanceAccept)) : simcity.SendSoundEvent(simcity.audio.kGlobalSoundObjectID, simcity.audio.kInstanceDecline)), f || (c ? this.DecrementDisplayCountLimit(e) : this.RemoveSpeechBalloonDataBinding(e)), 0 < simcity.gGlobalUIHandler.mSpeedUIHandler.sPreviousGameSpeed &&
    scrui.PostGameCommand(scrui.BuildCommand(["setspeed", simcity.gGlobalUIHandler.mSpeedUIHandler.sPreviousGameSpeed])), d.mDataBinding.bNoTransitionOut ? this.RestorCameraMinusTransition() : this.RestoreCamera(), scrui.PostGameCommand(scrui.BuildCommand([simcity.kCommandDeactivateVignette, scrui.RequestStringFromUnitRef(d.mDisplayUnitRef), simcity.kVignetteID])), a && scrui.PostGameCommand(scrui.BuildCommand([simcity.kCommandEditBuilding, scrui.RequestStringFromUnitRef(d.mDisplayUnitRef)])))
};
simcity.cSpeechBalloonHandler.prototype.GetSpeechBalloonItemInfo = function (a) {
  for (var b = a.GetParentLayout(); b && b.GetControlID() !== simcity.cSpeechBalloonHandler.kLayoutIDSpeechBalloon; )
    b = b.GetParentLayout();
  scrui.Assert(b, "Failed to find a speech bubble container layout!");
  for (var c = 0, d = this.mSpeechBalloons.length; c < d; ++c) {
    var e = this.mSpeechBalloons[c];
    if (e.mLayout === b)
      return {
        item : e,
        index : c
      }
  }
  if (this.mDebugSpeechBalloonItem) {
    for (b = a.GetParentLayout(); b && b.GetControlID() !== simcity.cSpeechBalloonHandler.kLayoutIDSpeechBalloon; )
      b =
        b.GetParentLayout();
    if (b === this.mDebugSpeechBalloonItem.mLayout)
      return {
        item : this.mDebugSpeechBalloonItem,
        index : -1
      }
  }
  return {
    item : null,
    index : -1
  }
};
simcity.cSpeechBalloonHandler.prototype.DepthSort = function (a, b) {
  var c = a.IsExpanded(),
  d = b.IsExpanded();
  return c !== d ? c < d ? -1 : 1 : a.mLayout.mTop - b.mLayout.mTop
};
simcity.TestSpeechBalloonTriggerHelper = scrui.Client_ProfZone("simcity.TestSpeechBalloonTriggerHelper", function (a) {
    var b = simcity.gGlobalUIHandler.mSpeechBalloonHandler;
    return (a.enableInTutorial || !simcity.IsTutorialInProgress()) && (a.enableInDisaster || !simcity.IsDisasterInProgress()) && (!a.missionUnitID || a.enableWithMaxMissions || 3 > simcity.GetMissionCount()) && (a.isThoughtBubble && !b.mHideThoughtBubbles || !a.isThoughtBubble && !b.mHideSpeechBubbles)
  });
simcity.TestSpeechBalloonTriggerWithGlobalQueries = function (a, b) {
  return simcity.TestSpeechBalloonTriggerHelper(a) && !b.isMissionActive && (!a.hasOwnProperty("test") || a.test(b))
};
simcity.TestSpeechBalloonItemHelper = function (a, b) {
  var c = a.mDataBinding;
  return a.IsExpanded() || b.isNormal && b.isOpenedForBusiness && !b.isEvacuated && (!b.isBurning || c.enableWhileBurning) && (!c.unitBin || 0 < b.unitBin) && simcity.TestSpeechBalloonTriggerWithGlobalQueries(c, b)
};
simcity.GetSpeechBalloonTarget = function (a) {
  var b = 0;
  return b = a.hasOwnProperty("unitID") ? a.unitID : a.hasOwnProperty("speechBalloonTarget") ? a.speechBalloonTarget : 3403061518
};
simcity.cSpeechBalloonHandler.prototype.Update = scrui.Client_ProfZone("cSpeechBalloonHandler.Update", function () {
    if (0 < this.mVisibilityCounter) {
      var a = simcity.gGlobalUIHandler.mGameTimeManager.GetElapsedGameTimeSeconds();
      this.UpdateQueue(a);
      if (0 !== this.mSpeechBalloons.length) {
        for (var b = Array(2 * this.mSpeechBalloons.length), c = !1, d = 0, e = this.mSpeechBalloons.length; d < e; ++d) {
          var f = this.mSpeechBalloons[d];
          7 > f.mDataBinding.importance && (c = !0);
          f = scrui.RequestStringFromUnitRef(f.mDisplayUnitRef);
          b[2 * d] = scrui.BuildRequestQuery([simcity.kDataUnits,
                f, simcity.kDataScreenPositionTop, simcity.kDataCheckFrustum]);
          b[2 * d + 1] = scrui.BuildRequestQuery([simcity.kDataUnits, f, simcity.kDataScreenPositionSpeechBalloon])
        }
        c && b.push(scrui.BuildRequestQuery([simcity.kDataCamera]));
        var g = this;
        scrui.RequestGameData(b, function (b) {
          for (var d = scrui.GetClientWidth(), e = scrui.GetClientHeight(), f = c ? b[b.length - 1] : null, l = 0, m = 0, n = g.mSpeechBalloons.length; l < n; ++l) {
            var p = b[2 * l],
            q = g.mSpeechBalloons[m];
            if (p) {
              var o = b[2 * l + 1],
              o = !q.IsExpanded() || q.mIsThoughtBubble ? p : o,
              r = q.mValidated &&
                q.mbShouldBeVisible && o && 0 <= o[0] && o[0] < d && 0 <= o[1] && o[1] < e,
              s = q.mLayout,
              p = q.mDataBinding;
              r && (c && 8 > p.importance) && (r = f.distance < 300 * p.importance);
              s.SetVisibility(r);
              r && s.SetPosition(o[0], o[1], s.mWidth, s.mHeight);
              ++m
            } else !q.mIsThoughtBubble && q.IsExpanded() && g.RestoreCamera(), g.RemoveSpeechBalloonAtIndex(m)
          }
          if (1 < g.mSpeechBalloons.length) {
            g.mSpeechBalloons.sort(g.DepthSort);
            p = -1;
            b = !1;
            l = 0;
            for (n = g.mSpeechBalloons.length; l < n; ++l) {
              q = g.mSpeechBalloons[l];
              if (q.mDepthIndex <= p) {
                b = !0;
                break
              }
              p = q.mDepthIndex
            }
            if (b) {
              l =
                0;
              for (n = g.mSpeechBalloons.length; l < n; ++l)
                q = g.mSpeechBalloons[l], q.mLayout.Reparent(g.mContainerWindow), q.mDepthIndex = l
            }
          }
          g.mUpdateTimer += a;
          if (1 < g.mUpdateTimer) {
            n = g.mUpdateTimer;
            g.mUpdateTimer = 0;
            for (var t = g.mSpeechBalloons.length, l = 0; l < t; )
              p = !1, q = g.mSpeechBalloons[l], -1 !== q.mExpirationTime && (q.mExpirationTime -= n, 0 >= q.mExpirationTime && !q.IsExpanded() && (g.RemoveSpeechBalloonAtIndex(l), --t, p = !0)), p || ++l;
            if (0 !== t) {
              n = [];
              b = Array(t);
              for (l = 0; l < t; ++l)
                if (q = g.mSpeechBalloons[l], p = q.mDataBinding, p.hasOwnProperty("queries") ?
                  (simcity.AddSimpleQueries(n, p.queries), b[l] = Object.keys(p.queries)) : b[l] = [], q = scrui.RequestStringFromUnitRef(q.mDisplayUnitRef), n.push(scrui.BuildRequestQuery([simcity.kDataUnits, q, simcity.kDataFlags, simcity.kUnitFlagNormal])), b[l].push("isNormal"), n.push(scrui.BuildRequestQuery([simcity.kDataUnits, q, simcity.kDataFlags, simcity.kUnitFlagOpenForBusiness])), b[l].push("isOpenedForBusiness"), n.push(scrui.BuildRequestQuery([simcity.kDataUnits, q, simcity.kDataFlags, simcity.kUnitFlagEvacuation])), b[l].push("isEvacuated"),
                  p.enableWhileBurning || (n.push(scrui.BuildRequestQuery([simcity.kDataUnits, q, simcity.kDataFlags, simcity.kUnitFlagIsOnFire])), b[l].push("isBurning")), p.unitBin)
                  n.push(scrui.BuildRequestQuery([simcity.kDataUnits, q, simcity.kDataBinAmount, p.unitBin])), b[l].push("unitBin");
              simcity.RequestDataBindingDataSimple(n, b, function (a) {
                for (var b = 0, c = 0; b < t; ++b) {
                  var d = g.mSpeechBalloons[c];
                  simcity.TestSpeechBalloonItemHelper(d, a[b]) ? (d.mValidated = !0, ++c) : g.RemoveSpeechBalloonAtIndex(c)
                }
              })
            }
          }
        })
      }
      simcity.DEBUG && this.mDebugSpeechBalloonItem &&
      (b = scrui.RequestStringFromUnitRef(this.mDebugSpeechBalloonItem.mDisplayUnitRef), b = [scrui.BuildRequestQuery([simcity.kDataUnits, b, simcity.kDataScreenPositionTop, simcity.kDataCheckFrustum]), scrui.BuildRequestQuery([simcity.kDataUnits, b, simcity.kDataScreenPositionSpeechBalloon])], g = this, scrui.RequestGameData(b, function (a) {
          if (a[0]) {
            var b = scrui.GetClientWidth(),
            c = scrui.GetClientHeight(),
            d = a[0],
            a = a[1],
            d = !g.mDebugSpeechBalloonItem.IsExpanded() || g.mDebugSpeechBalloonItem.mIsThoughtBubble ? d : a,
            b = g.mDebugSpeechBalloonItem.mbShouldBeVisible &&
              d && 0 <= d[0] && d[0] < b && 0 <= d[1] && d[1] < c,
            c = g.mDebugSpeechBalloonItem.mLayout;
            c.SetVisibility(b);
            b && c.SetPosition(d[0], d[1], c.mWidth, c.mHeight)
          } else
            g.mDebugSpeechBalloonItem.mLayout.DestroyControl(), g.mDebugSpeechBalloonItem = null
        }))
    }
  });
simcity.cSpeechBalloonHandler.prototype.OnKeyDown = function (a, b, c, d, e) {
  if (simcity.DEBUG && a === scrui.kKeyCodeLetterB && c && !d && !e)
    if (this.mListBox || (this.mListBox = new simcity.cListBox), this.mListBox.IsVisible())
      this.mListBox.Hide();
    else {
      var a = [],
      f;
      for (f in simcity.SpeechBalloonPolling)
        for (var g in simcity.SpeechBalloonPolling[f].DataBindings)
          a.push(scrui.DecimalToHex(Number(g)));
      for (g in simcity.SpeechBalloonEvents.DataBindings)
        a.push(scrui.DecimalToHex(Number(g)));
      this.mListBox.Show();
      this.mListBox.SetContent(a)
    }
};
simcity.LoadMissionInfo = {
  kPropMissionRewardAmount : 213280849,
  kPropMissionTitle : 213281542
};
simcity.GamePropertyIDs = {};
simcity.kPropertySCUnitProductionInput = 164390534;
simcity.kPropertySCUnitProductionOutput = 164390535;
simcity.kPropertyUnitPopupItemIDs = 215278748;
simcity.kPropertyUnitShowOnOffToggle = 212148229;
simcity.kPropertyUnitShowImportExportToggle = 212148215;
simcity.kPropertyUnitShowGlobalTradeToggle = 212148216;
simcity.kPropertyUnitShowDeliveriesToggle = 212148225;
simcity.kPropertySCUnitCategory = 184428465;
simcity.kPropertySCUnitEditorCategory = 184428490;
simcity.kPropertySCUnitIsModule = 184430571;
simcity.kPropSCUnitAbandoned = 162404819;
simcity.kPropSCUnitName = 167475403;
simcity.kPropSCUnitBuildingType = 162404824;
simcity.kPropSCUnitLocalizationFile = 228496751;
simcity.kPropertyLayerName = 162992579;
simcity.kPropertyLayerIconKey = 162992581;
simcity.kPropertyLayerLegend = 234967577;
simcity.kPropertyLayerDarkIconKey = 231328322;
simcity.kPropEcoGameToolCategoryGroup = 161791652;
simcity.kPropEcoGameToolGroup = 150302909;
simcity.kPropToolCategoryPaletteLayout = 203617502;
simcity.kPropToolCategoryToolList = 184264845;
simcity.kPropToolCategoryGroupID = 203785649;
simcity.kPropToolCategoryOrder = 3452891567;
simcity.kPropertyDescription = 11717834;
simcity.kPropToolPaletteToolCategoryIDs = 161783844;
simcity.kPropToolPaletteCategoryOffsets = 210097221;
simcity.kPropToolPaletteCategoryIsDebug = 219240790;
simcity.kPropToolCategoryName = 204207203;
simcity.kPropToolCategoryIconKeys = 179881228;
simcity.kPropSCUnitConstructionCost = 176832986;
simcity.kPropSCUnitMaintenanceCost = 162404823;
simcity.kPropSCUnitIsModule = 184430571;
simcity.kPropTaxesBuildingTaxValue = 175708100;
simcity.kPropEcoUnitResourceBins = 132164899;
simcity.kPropEcoUnitResourceBinCapacities = 132164900;
simcity.kPropEcoUnitLeaderboardID = 246722129;
simcity.kPropToolDemoLocked = 253368349;
simcity.kPropStadium_MaxAttendance = 232631573;
simcity.kPropSCUnitIconKey = 184863207;
simcity.kPropSCToolCategoryInfoLayout = 185028011;
simcity.kPropSCToolCategoryContextualInfoLayout = 215861361;
simcity.kPropToolCategoryLayerKey = 183208612;
simcity.kPropEcoAlertIcon = 169304569;
simcity.kPropEcoUnitDirectionalTrade = 182461265;
simcity.kPropSCUnitRolloverTextFile = 224007796;
simcity.kPropSkillConsumer_SkillThresholdE2 = 205848713;
simcity.kPropSkillConsumer_SkillThresholdE3 = 205848714;
simcity.kPropHappiness_HappinessTokensThresholdForDensityUpgrade = 240412562;
simcity.kPropHappiness_DefaultHappinessTokens = 240412560;
simcity.kPropRCI_TotalPopulation = 175708107;
simcity.kPropProfit_ProfitTokensThresholdForDensityUpgrade = 240412647;
simcity.kPropProfit_DefaultProfitTokens = 179930538;
simcity.kPropTaxes_ToyIncomePerResource = 229427166;
simcity.kPropTaxes_ToyIncomePerResourceW1 = 249734413;
simcity.kPropTaxes_ToyIncomePerResourceW2 = 249734414;
simcity.kPropTaxes_ToyIncomePerResourceW3 = 249734415;
simcity.kPropWork_MinimumWorkersForProduction = 175708104;
simcity.kPropWork_JobsW1 = 175708101;
simcity.kPropWork_JobsW2 = 175708102;
simcity.kPropWork_JobsW3 = 175708103;
simcity.kPropWork_TotalJobs = 175708099;
simcity.kPropShopping_TotalShoppers = 181839653;
simcity.kPropPowerProducer_Amount = 184260737;
simcity.kPropPowerProducer_Rate = 184260739;
simcity.kPropPowerProducer_ResourceInputAmount = 196859290;
simcity.kPropPowerConsumer_Amount = 193499214;
simcity.kPropPowerConsumer_Rate = 184260738;
simcity.kPropPowerConsumer_Capacity = 201972384;
simcity.kPropAirPollutionTransmitter_Amount = 202579140;
simcity.kPropAirPollutionTransmitter_Rate = 202579145;
simcity.kPropGroundPollutionTransmitter_Amount = 202579196;
simcity.kPropGroundPollutionTransmitter_Rate = 202579201;
simcity.kPropAirPollutionProduced = 2384844795;
simcity.kPropAirPollutionPerHour = 295846734;
simcity.kPropGroundPollutionProduced = 3460390506;
simcity.kPropGroundPollutionPerHour = 4093723865;
simcity.kPropExtractor_GroundPollutionAmount = 234972321;
simcity.kPropExtractor_AirPollutionAmount = 234972327;
simcity.kPropExtractor_Rate = 234972325;
simcity.kPropWaterProducer_Rate = 201972355;
simcity.kPropWaterProducer_Amount_Minimum = 215598739;
simcity.kPropWaterProducer_Amount_OneOverSteps = 215598740;
simcity.kPropWaterProducer_Amount_PerStep = 215598741;
simcity.kPropWaterConsumer_Amount = 201972325;
simcity.kPropWaterConsumer_Rate = 201972330;
simcity.kPropWaterConsumer_Capacity = 201972314;
simcity.kPropGarbageProducer_GarbageOnlyAmount = 203515234;
simcity.kPropStorage_AlloyCapacity = 230118656;
simcity.kPropStorage_FuelCapacity = 230118657;
simcity.kPropStorage_MetalCapacity = 230118658;
simcity.kPropStorage_OilCrudeCapacity = 230118659;
simcity.kPropStorage_OreRawCapacity = 230118660;
simcity.kPropStorage_PlasticCapacity = 230118661;
simcity.kPropStorage_CoalCapacity = 230118662;
simcity.kPropSewageConsumer_Amount = 198000208;
simcity.kPropSewageConsumer_Rate = 198000222;
simcity.kPropFlammable_SelfIgniteThreshold_High = 225896677;
simcity.kPropMissionThreshold = 204206796;
simcity.kPropSelectSolarFarmCost = 240656657;
simcity.kPropSelectAirportCost = 240656673;
simcity.kPropSelectSpaceCenterCost = 240656689;
simcity.kPropSelectArcologyCost = 245092989;
simcity.kPropUpgradeSolarFarmCost = 240722193;
simcity.kPropUpgradeAirportCost = 240722209;
simcity.kPropUpgradeCoalMineCost = 240722225;
simcity.kPropJoinSolarFarmCost = 240726289;
simcity.kPropJoinAirportCost = 240726305;
simcity.kPropJoinCoalMineCost = 240726321;
simcity.kPropNetUserID = 150330521;
simcity.kPropToolRolloverLayout = 200496699;
simcity.kPropToolLockedRolloverLayout = 200656636;
simcity.kPropUnlock_Bin = 200659683;
simcity.kPropUnlock_BinAmount = 200659684;
simcity.kPropUnlock_Bin2 = 200659667;
simcity.kPropUnlock_BinAmount2 = 200659668;
simcity.kPropUnlock_Bin3 = 200659699;
simcity.kPropUnlock_BinAmount3 = 200659700;
simcity.kPropToolUnlockMissionStringID = 202401640;
simcity.kPropToolUnlockMissionLayout = 202402855;
simcity.kPropToolIconKey = 158837391;
simcity.kPropModule_UnlockTokenCost = 214482518;
simcity.kPropToolMarqueeImage = 232713814;
simcity.kPropBorderUIGreatWorksIcon = 241963153;
simcity.kPropToolUnlockBin = 233328073;
simcity.kPropToolUnlockTargetAmount = 233328083;
simcity.kPropToolUnlockString = 233328092;
simcity.kPropToolUnlockImage = 249666093;
simcity.kPropToolUpgradeString = 249664254;
simcity.kPropToolUnlockConversionType = 248907074;
simcity.kPropscToolUpgradeConversionType = 248958669;
simcity.kPropUILayoutSize = 237392575;
simcity.kPropWallMessageRequiredOnPlop = 245926208;
simcity.kPropCoalHarvester_HarvestRate = 203163684;
simcity.kPropCoalHarvester_HarvestAmount = 203163685;
simcity.kPropCoalHarvester_HarvestAmountSoil = 205944737;
simcity.kPropCoalDelivery_MaxCoalLoad = 204296255;
simcity.kPropCoal_ProductionUpdateRate = 207825329;
simcity.kPropCoalMiningHQ_CoalSoldForLevel1 = 208433081;
simcity.kPropCoalMiningHQ_CoalSoldForLevel2 = 208433082;
simcity.kPropCoalMiningHQ_CoalSoldForLevel3 = 208433083;
simcity.kPropscCoalBuyPrice = 234955856;
simcity.kPropscCoalSellPrice = 234955857;
simcity.kPropTradeGlobalMarket_CoalBuyRate = 204116265;
simcity.kPropTradeGlobalMarket_CoalSellRate = 204203786;
simcity.kPropHQ_ProgressAmount_Level2 = 230741050;
simcity.kPropHQ_ProgressAmount_Level3 = 230741051;
simcity.kPropHQ_ProgressAmount_Level4 = 230741052;
simcity.kPropscPlasticBuyPrice = 234955858;
simcity.kPropscPlasticSellPrice = 234955859;
simcity.kPropscAlloyBuyPrice = 234955860;
simcity.kPropscAlloySellPrice = 234955861;
simcity.kPropscElectronicsBuyPrice = 234955862;
simcity.kPropscElectronicsSellPrice = 234955863;
simcity.kPropscComputerBuyPrice = 234974850;
simcity.kPropscComputerSellPrice = 234974856;
simcity.kPropscTelevisionBuyPrice = 234974880;
simcity.kPropscTelevisionSellPrice = 234974881;
simcity.kPropscOilCrudeBuyPrice = 234955864;
simcity.kPropscOilCrudeSellPrice = 234955865;
simcity.kPropscOreRawBuyPrice = 234955866;
simcity.kPropscOreRawSellPrice = 234955867;
simcity.kPropscMetalBuyPrice = 234955868;
simcity.kPropscMetalSellPrice = 234955869;
simcity.kPropscFuelBuyPrice = 234955870;
simcity.kPropscFuelSellPrice = 234955871;
simcity.kPropscscGlobalMarketTransferAmount = 241528555;
simcity.kPropResearch_Project1_ResearchCost = 227803142;
simcity.kPropResearch_Project2_ResearchCost = 227803158;
simcity.kPropResearch_Project3_ResearchCost = 227803174;
simcity.kPropResearch_Project4_ResearchCost = 227803190;
simcity.kPropResearch_Project5_ResearchCost = 227803206;
simcity.kPropResearch_Project6_ResearchCost = 227803222;
simcity.kPropResearch_Project7_ResearchCost = 227803238;
simcity.kPropResearch_Project8_ResearchCost = 227803254;
simcity.kPropResearch_Project9_ResearchCost = 227803270;
simcity.kPropResearch_Project10_ResearchCost = 227803286;
simcity.kPropResearch_Project11_ResearchCost = 227803302;
simcity.kPropResearch_Project12_ResearchCost = 227803318;
simcity.kPropResearch_Project13_ResearchCost = 227803334;
simcity.kPropResearch_Project14_ResearchCost = 227803350;
simcity.kPropResearch_Project15_ResearchCost = 227803366;
simcity.kPropResearch_Project16_ResearchCost = 227803382;
simcity.kPropResearch_Project17_ResearchCost = 227803398;
simcity.kPropResearch_Project18_ResearchCost = 227803414;
simcity.kPropResearch_Project19_ResearchCost = 227803430;
simcity.kPropResearch_Project20_ResearchCost = 227803446;
simcity.kPropMissionTitle = 213281542;
simcity.kPropMissionTip = 2776865048;
simcity.kPropMissionLayout = 213280685;
simcity.kPropMissionBadgeGraphics = 213281827;
simcity.kPropMissionObjectiveResources = 213280652;
simcity.kPropMissionObjectiveResourcesFromNeighbors = 223125386;
simcity.kPropMissionObjectiveStrings = 213280659;
simcity.kPropMissionObjectiveType = 214390666;
simcity.kPropMissionObjectiveLayout = 222886474;
simcity.kPropMissionObjectiveIsGlobal = 241891091;
simcity.kPropMissionRewardResource = 213280845;
simcity.kPropMissionRewardAmount = 213280849;
simcity.kPropMissionIsTutorial = 768128695;
simcity.kPropMissionPortrait = 218719241;
simcity.kPropMissionIcon = 218719254;
simcity.kPropMission_Linear = 239782996;
simcity.kPropMissionCanClose = 255809596;
simcity.kPropMission_Objective1_Goal = 213889488;
simcity.kPropMission_Objective2_Goal = 213889521;
simcity.kPropMission_Objective3_Goal = 214667092;
simcity.kPropMission_Objective4_Goal = 214667109;
simcity.kPropMission_Objective5_Goal = 214310239;
simcity.kPropMission_Objective6_Goal = 214667172;
simcity.kPropMission_Objective7_Goal = 214667184;
simcity.kPropMission_Objective8_Goal = 214667192;
simcity.kPropMission_Objective1_Ignore = 223492306;
simcity.kPropMission_Objective2_Ignore = 223488211;
simcity.kPropMission_Objective3_Ignore = 223492308;
simcity.kPropMission_Objective4_Ignore = 223492309;
simcity.kPropMission_Objective5_Ignore = 223951068;
simcity.kPropMission_Objective6_Ignore = 223951071;
simcity.kPropMission_Objective7_Ignore = 207441881;
simcity.kPropMission_Objective8_Ignore = 207441626;
simcity.kPropEcoAlertIcon = 169304569;
simcity.kPropEcoNetRESTAPI = 150330524;
simcity.kPropNetServiceNews = 170244787;
simcity.kPropQuitGameSurveyURL = 253103863;
simcity.kPropEnableTutorial = 225478632;
simcity.kPropEnableNewUI = 188100158;
simcity.kPropEnableOriginLogin = 231936915;
simcity.kPropOriginAddOnStore = 4263713262;
simcity.kPropAdWebServer = 242821410;
simcity.kShowStore = 242912640;
simcity.kSkipIntroMovie = 4220525218;
simcity.kBetaFlow = 2002965982;
simcity.databindings.DataBindingsRegionWallMessages = {};
simcity.cUnitRefDummy = function () {
  this.slot = -1;
  this.stamp = 4294967295
};
simcity.kInvalidUnitRef = new simcity.cUnitRefDummy;
simcity.RegionMessageEvents = {
  2970307211 : {
    stringID : 3177370982,
    isLocal : !1,
    triggerTime : [100, 100],
    priority : 3
  },
  3551534130 : {
    stringID : 967122675,
    isLocal : !1,
    triggerTime : [100, 140],
    priority : 3
  },
  4050545318 : {
    stringID : 664914800,
    isLocal : !1,
    queries : {
      CriminalsAtLarge : [simcity.kDataResourceAmount, simcity.kResourceIDCriminalsAtLarge]
    },
    test : function (a) {
      return 0 < a.CriminalsAtLarge
    },
    triggerTime : [60, 120],
    priority : 3
  },
  1869765365 : {
    stringID : 3452127560,
    isLocal : !1,
    triggerTime : [20, 20],
    priority : 3
  },
  2946006796 : {
    stringID : 2454109659,
    isLocal : !1,
    triggerTime : [20, 20],
    priority : 3
  },
  692471217 : {
    stringID : 1980527812,
    isLocal : !1,
    triggerTime : [20, 20],
    priority : 3
  },
  4106396754 : {
    stringID : 356131754,
    isLocal : !1,
    triggerTime : [20, 20],
    priority : 3
  },
  2129960862 : {
    stringID : 2670027139,
    isLocal : !1,
    triggerTime : [20, 20],
    priority : 3
  },
  3650755860 : {
    stringID : 2117497028,
    isLocal : !1,
    triggerTime : [100, 100],
    priority : 3
  },
  3316408922 : {
    stringID : 4129470338,
    isLocal : !0,
    triggerTime : [100, 140],
    isRegional : !0,
    priority : 3
  },
  560208010 : {
    stringID : 793760923,
    isLocal : !1,
    triggerTime : [100, 140],
    priority : 3
  },
  784034921 : {
    stringID : 1099531607,
    isLocal : !0,
    triggerTime : [100, 140],
    isRegional : !0,
    priority : 3
  },
  3279936225 : {
    stringID : 2759714656,
    isLocal : !1,
    triggerTime : [300, 500],
    priority : 3
  },
  4492462 : {
    stringID : 4196671358,
    isLocal : !1,
    triggerTime : [10, 10],
    priority : 3
  },
  4492461 : {
    stringID : 2196025111,
    isLocal : !1,
    triggerTime : [10, 10],
    priority : 3
  },
  4492460 : {
    stringID : 3066998032,
    isLocal : !1,
    triggerTime : [10, 10],
    priority : 3
  },
  4492459 : {
    stringID : 332265001,
    isLocal : !1,
    triggerTime : [10, 10],
    priority : 3
  },
  4492458 : {
    stringID : 2358472010,
    isLocal : !1,
    triggerTime : [10,
      10],
    priority : 3
  },
  4492457 : {
    stringID : 2233964595,
    isLocal : !1,
    triggerTime : [10, 10],
    priority : 3
  },
  85485812 : {
    stringID : 3819634570,
    isLocal : !1,
    triggerTime : [100, 100],
    unitName : !0,
    priority : 3
  },
  85485813 : {
    stringID : 3819634570,
    isLocal : !1,
    triggerTime : [100, 100],
    unitName : !0,
    priority : 3
  },
  85485810 : {
    stringID : 3819634570,
    isLocal : !1,
    triggerTime : [100, 100],
    unitName : !0,
    priority : 3
  },
  4030411196 : {
    stringID : 941407708,
    isLocal : !1,
    triggerTime : [100, 100],
    unitName : !0,
    priority : 3
  },
  4030411197 : {
    stringID : 941407708,
    isLocal : !1,
    triggerTime : [100, 100],
    unitName : !0,
    priority : 3
  },
  4030411194 : {
    stringID : 941407708,
    isLocal : !1,
    triggerTime : [100, 100],
    unitName : !0,
    priority : 3
  },
  604702533 : {
    stringID : 93373763,
    isLocal : !1,
    triggerTime : [100, 100],
    unitName : !0,
    priority : 3
  },
  604702532 : {
    stringID : 93373763,
    isLocal : !1,
    triggerTime : [100, 100],
    unitName : !0,
    priority : 3
  },
  604702531 : {
    stringID : 93373763,
    isLocal : !1,
    triggerTime : [100, 100],
    unitName : !0,
    priority : 3
  },
  2507953789 : {
    stringID : 3427503266,
    isLocal : !1,
    triggerTime : [100, 100],
    unitName : !0,
    priority : 3
  },
  2507953788 : {
    stringID : 3427503266,
    isLocal : !1,
    triggerTime : [100, 100],
    unitName : !0,
    priority : 3
  },
  2507953787 : {
    stringID : 3427503266,
    isLocal : !1,
    triggerTime : [100, 100],
    unitName : !0,
    priority : 3
  },
  336192205 : {
    stringID : 1947141656,
    isLocal : !1,
    triggerTime : [100, 100],
    unitName : !0,
    priority : 3
  },
  213897803 : {
    stringID : 786324363,
    isLocal : !1,
    triggerTime : [100, 100],
    unitName : !0,
    priority : 3
  },
  213897802 : {
    stringID : 786324363,
    isLocal : !1,
    triggerTime : [100, 100],
    unitName : !0,
    priority : 3
  },
  213897805 : {
    stringID : 786324363,
    isLocal : !1,
    triggerTime : [100, 100],
    unitName : !0,
    priority : 3
  },
  1352364268 : {
    stringID : 1642056741,
    isLocal : !1,
    triggerTime : [100, 100],
    priority : 3
  },
  1085112231 : {
    stringID : 748028166,
    isLocal : !1,
    triggerTime : [100, 110],
    priority : 3
  },
  273246572 : {
    stringID : 1082443687,
    isLocal : !1,
    triggerTime : [100, 100],
    priority : 3
  },
  2086471872 : {
    stringID : 1077886423,
    isLocal : !1,
    triggerTime : [100, 100],
    priority : 3
  },
  547493367 : {
    stringID : 2746897420,
    isLocal : !1,
    triggerTime : [100, 100],
    priority : 3
  },
  3434896602 : {
    stringID : 1407186544,
    isLocal : !1,
    triggerTime : [100, 100],
    priority : 3
  },
  3394549971 : {
    stringID : 1167198253,
    isLocal : !1,
    triggerTime : [100, 100],
    priority : 3
  },
  2191451156 : {
    stringID : 1062646558,
    isLocal : !1,
    triggerTime : [100, 100],
    unitName : !0,
    priority : 3
  },
  2151991692 : {
    stringID : 623086870,
    isLocal : !1,
    triggerTime : [100, 100],
    unitName : !0,
    priority : 3
  },
  240614315 : {
    stringID : 1702137092,
    isLocal : !1,
    triggerTime : [100, 100],
    priority : 3
  },
  1056682224 : {
    stringID : 3528894317,
    isLocal : !1,
    triggerTime : [100, 110],
    priority : 3
  },
  3404809973 : {
    stringID : 2784019700,
    isLocal : !1,
    triggerTime : [100, 100],
    priority : 3
  },
  1237310193 : {
    stringID : 2773304644,
    isLocal : !1,
    triggerTime : [100, 100],
    priority : 3
  },
  613821749 : {
    stringID : 824008538,
    isLocal : !1,
    triggerTime : [100, 100],
    priority : 3
  },
  2527348735 : {
    stringID : 3978288325,
    isLocal : !1,
    triggerTime : [100, 100],
    priority : 3
  },
  1457920863 : {
    stringID : 1084542248,
    isLocal : !1,
    triggerTime : [100, 100],
    priority : 3
  },
  315552047 : {
    stringID : 2431079350,
    isLocal : !1,
    triggerTime : [100, 100],
    priority : 3
  },
  3649530926 : {
    stringID : 336694083,
    isLocal : !1,
    triggerTime : [100, 110],
    priority : 3
  },
  305275097 : {
    stringID : 3981011126,
    isLocal : !1,
    triggerTime : [100, 100],
    priority : 3
  },
  1008546581 : {
    stringID : 3049739914,
    isLocal : !1,
    triggerTime : [100, 100],
    priority : 3
  },
  1403598348 : {
    stringID : 313028661,
    isLocal : !1,
    triggerTime : [100, 100],
    priority : 3
  },
  1857207937 : {
    stringID : 4189369887,
    isLocal : !1,
    triggerTime : [100, 100],
    priority : 3
  },
  1978875843 : {
    stringID : 2428539334,
    isLocal : !1,
    triggerTime : [100, 100],
    priority : 3
  },
  953251713 : {
    stringID : 3271851124,
    isLocal : !1,
    triggerTime : [100, 100],
    priority : 3
  },
  1996490892 : {
    stringID : 1676148221,
    isLocal : !1,
    triggerTime : [100, 110],
    priority : 3
  },
  784057384 : {
    stringID : 2047222683,
    isLocal : !1,
    triggerTime : [100, 100],
    priority : 3
  },
  3327882344 : {
    stringID : 387971453,
    isLocal : !1,
    triggerTime : [100, 100],
    priority : 3
  },
  518487999 : {
    stringID : 2034335728,
    isLocal : !1,
    triggerTime : [100, 100],
    priority : 3
  },
  1777076971 : {
    stringID : 1730229604,
    isLocal : !1,
    triggerTime : [100, 100],
    priority : 3
  },
  984231477 : {
    stringID : 2574005888,
    isLocal : !1,
    triggerTime : [100, 100],
    priority : 3
  },
  3928368755 : {
    stringID : 3475060852,
    isLocal : !1,
    triggerTime : [100, 100],
    priority : 3
  },
  3427807351 : {
    stringID : 822635594,
    isLocal : !1,
    triggerTime : [100, 100],
    priority : 3
  },
  1712294531 : {
    stringID : 300016405,
    isLocal : !1,
    triggerTime : [100, 100],
    priority : 3
  },
  1260164361 : {
    stringID : 3758833016,
    isLocal : !1,
    triggerTime : [100, 100],
    priority : 3
  },
  3829571872 : {
    stringID : 1954274090,
    isLocal : !1,
    triggerTime : [10, 10],
    priority : 3
  },
  2135241320 : {
    stringID : 1170243501,
    isLocal : !1,
    queries : {
      shoppersCommuting : [simcity.kDataUnits, simcity.kInvalidUnitRef, simcity.kDataBins, simcity.kResourceIDTotalShoppers]
    },
    test : function (a) {
      return 5E3 < a.shoppersCommuting.amount && 1E4 > a.shoppersCommuting.amount
    },
    triggerTime : [10, 10],
    isRegional : !0,
    priority : 3
  },
  4147164626 : {
    stringID : 2970835738,
    isLocal : !1,
    queries : {
      freightD1 : [simcity.kDataBinAmount,
        simcity.kResourceIDTradeExcessFreightConsumerD1],
      freightD2 : [simcity.kDataBinAmount, simcity.kResourceIDTradeExcessFreightConsumerD2],
      freightD3 : [simcity.kDataBinAmount, simcity.kResourceIDTradeExcessFreightConsumerD3]
    },
    test : function (a) {
      return 500 < a.freightD1 + a.freightD2 + a.freightD3
    },
    triggerTime : [12E3, 14400],
    priority : 3
  },
  1043389051 : {
    stringID : 802776009,
    isLocal : !1,
    queries : {
      studentsE2 : [simcity.kDataBinAmount, simcity.kResourceIDExcessStudentE2],
      studentsE3 : [simcity.kDataBinAmount, simcity.kResourceIDExcessStudentE3]
    },
    test : function (a) {
      return 200 < a.studentsE2 + a.studentsE3
    },
    triggerTime : [12E3, 14400],
    priority : 3
  },
  3973798850 : {
    stringID : 3768062206,
    isLocal : !1,
    queries : {
      shopperW1 : [simcity.kDataResourceAmount, simcity.kResourceIDExcessShoppersNeededW1],
      shopperW2 : [simcity.kDataResourceAmount, simcity.kResourceIDExcessShoppersNeededW2],
      shopperW3 : [simcity.kDataResourceAmount, simcity.kResourceIDExcessShoppersNeededW3]
    },
    test : function (a) {
      return 500 < a.shopperW1 + a.shopperW2 + a.shopperW3
    },
    triggerTime : [12E3, 14400],
    priority : 3
  },
  1936017881 : {
    stringID : 712468257,
    isLocal : !1,
    queries : {
      dayJobsW1 : [simcity.kDataResourceAmount, simcity.kResourceIDTradeExcessDayJobsW1],
      dayJobsW2 : [simcity.kDataResourceAmount, simcity.kResourceIDTradeExcessDayJobsW2],
      dayJobsW3 : [simcity.kDataResourceAmount, simcity.kResourceIDTradeExcessDayJobsW3],
      nightJobsW1 : [simcity.kDataResourceAmount, simcity.kResourceIDTradeExcessNightJobsW1],
      nightJobsW2 : [simcity.kDataResourceAmount, simcity.kResourceIDTradeExcessNightJobsW2],
      nightJobsW3 : [simcity.kDataResourceAmount, simcity.kResourceIDTradeExcessNightJobsW3]
    },
    test : function (a) {
      return 500 < a.dayJobsW1 + a.dayJobsW2 + a.dayJobsW3 + a.nightJobsW1 + a.nightJobsW2 + a.nightJobsW3
    },
    triggerTime : [12E3, 14400],
    priority : 3
  },
  1581786865 : {
    stringID : 422554281,
    isLocal : !1,
    triggerTime : [100, 140],
    priority : 3
  },
  3553151980 : {
    stringID : 4035345238,
    isLocal : !1,
    triggerTime : [100, 140],
    priority : 3
  },
  2698180085 : {
    stringID : 1121250989,
    isLocal : !1,
    triggerTime : [100, 140],
    priority : 3
  },
  3172414392 : {
    stringID : 2778337362,
    isLocal : !1,
    triggerTime : [100, 140],
    priority : 3
  },
  1587092137 : {
    stringID : 1514516641,
    isLocal : !1,
    triggerTime : [100,
      140],
    priority : 3
  },
  2908384248 : {
    stringID : 1710717970,
    isLocal : !1,
    triggerTime : [100, 140],
    priority : 3
  },
  1574501649 : {
    stringID : 1778853833,
    isLocal : !1,
    triggerTime : [100, 140],
    priority : 3
  },
  1814056736 : {
    stringID : 4071459514,
    isLocal : !1,
    triggerTime : [100, 140],
    priority : 3
  },
  1240223 : {
    stringID : 2822698367,
    isLocal : !1,
    triggerTime : [100, 140],
    priority : 3
  },
  2276394404 : {
    stringID : 1713629742,
    isLocal : !1,
    triggerTime : [100, 140],
    priority : 3
  },
  3093946627 : {
    stringID : 2117497028,
    isLocal : !1,
    triggerTime : [100, 140],
    priority : 3
  },
  173036551 : {
    stringID : 2898957654,
    isLocal : !1,
    triggerTime : [100, 140],
    priority : 3
  },
  2536123487 : {
    stringID : 2591661151,
    isLocal : !1,
    triggerTime : [100, 140],
    priority : 3
  },
  2234708352 : {
    stringID : 872116442,
    isLocal : !1,
    triggerTime : [100, 140],
    priority : 3
  },
  1204312109 : {
    stringID : 1326826885,
    isLocal : !1,
    triggerTime : [100, 140],
    priority : 3
  },
  603282453 : {
    stringID : 1240312237,
    isLocal : !1,
    triggerTime : [100, 140],
    priority : 3
  },
  3949915358 : {
    stringID : 307661544,
    isLocal : !1,
    triggerTime : [100, 140],
    priority : 3
  },
  2748655574 : {
    stringID : 2284692441,
    isLocal : !1,
    triggerTime : [100, 100],
    isRegional : !0,
    priority : 3
  },
  1563948172 : {
    stringID : 1413570719,
    isLocal : !1,
    triggerTime : [100, 100],
    isRegional : !0,
    priority : 3
  },
  4252978561 : {
    stringID : 1221922650,
    isLocal : !1,
    triggerTime : [100, 100],
    isRegional : !0,
    priority : 3
  },
  1906924031 : {
    stringID : 4103272604,
    isLocal : !1,
    triggerTime : [100, 100],
    isRegional : !0,
    priority : 3
  },
  2472555140 : {
    stringID : 2973558083,
    isLocal : !1,
    triggerTime : [100, 100],
    isRegional : !0,
    priority : 3
  },
  3348893750 : {
    stringID : 2539580621,
    isLocal : !1,
    triggerTime : [100, 100],
    isRegional : !0,
    priority : 3
  },
  1469982804 : {
    stringID : 3951761431,
    isLocal : !1,
    triggerTime : [100, 100],
    isRegional : !0,
    priority : 3
  },
  931115782 : {
    stringID : 190247489,
    isLocal : !1,
    triggerTime : [100, 100],
    isRegional : !0,
    priority : 3
  },
  3950694920 : {
    stringID : 3117442942,
    isLocal : !1,
    triggerTime : [300, 300],
    isRegional : !0,
    priority : 3
  },
  599006482 : {
    stringID : 1916897296,
    isLocal : !1,
    triggerTime : [300, 300],
    isRegional : !0,
    priority : 3
  },
  2169095412 : {
    stringID : 4069536574,
    isLocal : !1,
    triggerTime : [100, 100],
    isRegional : !0,
    priority : 3
  },
  3256678384 : {
    stringID : 1026147784,
    isLocal : !1,
    triggerTime : [100, 140],
    isRegional : !0,
    priority : 3
  },
  1267120863 : {
    stringID : 1002677135,
    isLocal : !1,
    queries : {
      fireServiceExported : [simcity.kDataResourceAmount, simcity.kResourceIDProtestNoWater],
      simoleonsFromFireService : [simcity.kDataBinAmount, simcity.kResourceIDGlobalMission_MSCivicProtestAboutNoWater]
    },
    test : function (a) {
      return 0 !== a.fireServiceExported
    },
    triggerTime : [100, 140],
    priority : 3
  },
  4009418537 : {
    stringID : 205711322,
    isLocal : !1,
    triggerTime : [100, 140],
    isRegional : !0,
    priority : 3
  },
  2758405397 : {
    stringID : 2052436420,
    isLocal : !1,
    triggerTime : [100, 140],
    isRegional : !0,
    priority : 3
  },
  2685183399 : {
    stringID : 4244328430,
    isLocal : !1,
    triggerTime : [100, 140],
    isRegional : !0,
    priority : 3
  },
  2515094167 : {
    stringID : 1330715536,
    isLocal : !1,
    triggerTime : [100, 140],
    isRegional : !0,
    priority : 3
  },
  3641364886 : {
    stringID : 3762122959,
    isLocal : !1,
    triggerTime : [100, 140],
    isRegional : !0,
    priority : 3
  },
  3641364885 : {
    stringID : 1017361590,
    isLocal : !1,
    triggerTime : [100, 140],
    isRegional : !0,
    priority : 3
  },
  1088504669 : {
    stringID : 4101518932,
    isLocal : !1,
    triggerTime : [100, 140],
    isRegional : !0,
    priority : 3
  },
  3989997002 : {
    stringID : 3814398643,
    isLocal : !1,
    triggerTime : [100, 140],
    isRegional : !0,
    priority : 3
  },
  422466847 : {
    stringID : 2074705640,
    isLocal : !1,
    triggerTime : [100, 140],
    isRegional : !0,
    priority : 3
  },
  218485210 : {
    stringID : 1293270685,
    isLocal : !1,
    triggerTime : [100, 140],
    isRegional : !0,
    priority : 3
  },
  54497777 : {
    stringID : 2253475904,
    isLocal : !1,
    triggerTime : [100, 140],
    isRegional : !0,
    priority : 3
  },
  3866011022 : {
    stringID : 423665131,
    isLocal : !1,
    triggerTime : [100, 140],
    isRegional : !0,
    priority : 3
  },
  756866224 : {
    stringID : 2225839005,
    isLocal : !1,
    triggerTime : [100, 140],
    isRegional : !0,
    priority : 3
  },
  4180706698 : {
    stringID : 1026896249,
    isLocal : !1,
    triggerTime : [100, 140],
    isRegional : !0,
    priority : 3
  },
  3022707775 : {
    stringID : 3387670628,
    isLocal : !1,
    triggerTime : [100, 140],
    isRegional : !0,
    priority : 3
  },
  3022707772 : {
    stringID : 776339729,
    isLocal : !1,
    triggerTime : [100, 140],
    isRegional : !0,
    priority : 3
  },
  177105306 : {
    stringID : 2856055673,
    isLocal : !1,
    triggerTime : [100, 140],
    isRegional : !0,
    priority : 3
  },
  3924901731 : {
    stringID : 3015018040,
    isLocal : !1,
    triggerTime : [100, 140],
    isRegional : !0,
    priority : 3
  },
  1623329854 : {
    stringID : 950650955,
    isLocal : !1,
    triggerTime : [100, 140],
    isRegional : !0,
    priority : 3
  },
  302924469 : {
    stringID : 1121030768,
    isLocal : !1,
    triggerTime : [100, 140],
    isRegional : !0,
    priority : 3
  },
  1864216859 : {
    stringID : 243842452,
    isLocal : !1,
    triggerTime : [100, 140],
    isRegional : !0,
    priority : 3
  },
  3518522253 : {
    stringID : 2289449385,
    isLocal : !1,
    triggerTime : [300, 300],
    isRegional : !0,
    priority : 3
  },
  1673692569 : {
    stringID : 2221901229,
    isLocal : !1,
    triggerTime : [300, 300],
    isRegional : !0,
    priority : 3
  },
  2671259898 : {
    stringID : 127752192,
    isLocal : !1,
    triggerTime : [300, 300],
    isRegional : !0,
    priority : 3
  },
  148571676 : {
    stringID : 911839530,
    isLocal : !1,
    triggerTime : [300, 300],
    isRegional : !0,
    priority : 3
  }
};
simcity.Ticker = {};
simcity.cMessage = function (a, b, c) {
  var d = this;
  this.mDataBinding = a;
  this.mText = b;
  this.mInterrupt = a.hasOwnProperty("interrupt") ? a.interrupt : !1;
  this.mInterruptBasic = a.hasOwnProperty("interruptBasic") ? a.interruptBasic : !1;
  b = a.category;
  this.mColor = a.hasOwnProperty("color") ? a.color : b.color;
  this.mBlink = a.hasOwnProperty("blink") ? a.blink : b.blink;
  this.mImportance = a.hasOwnProperty("importance") ? a.importance : 1;
  scrui.Assert(1 <= this.mImportance);
  this.mRepeats = 1;
  var e = null;
  a.hasOwnProperty("popOut") ? e = a.popOut : b && (e =
        b.popOut);
  if ("number" === typeof e) {
    var f = a.extension || b && b.extension,
    f = f ? scrui.DecimalToHex(f) : "png";
    this.mPopout = scrui.DecimalToHex(e) + "." + f
  } else
    this.mPopout = e;
  e = null;
  a.hasOwnProperty("popoutsound") ? e = a.popoutsound : b && (e = b.popousound);
  this.mPopoutSound = e;
  this.mPopoutText = null;
  if (a.hasOwnProperty("localizedPopOutText")) {
    var b = a.hasOwnProperty("tableID") ? scrui.DecimalToHex(a.tableID) : "AutomatedTicker",
    g = new scrui.cLocaleString(b, scrui.DecimalToHex(a.localizedPopOutText));
    g.LoadString(function () {
      d.mPopoutText =
        simcity.cTicker.debuggingWireArticles ? g.mStringID + " " + g.GetText(c) : g.GetText(c);
      if (!d.mDataBinding.hasOwnProperty("stringID")) {
        d.mText = d.mPopoutText;
        d.mColor = "rgba(0,0,0,0.0)"
      }
    })
  }
  this.mHyperLink = a.hasOwnProperty("hyperlink") ? a.hyperlink : null;
  this.mUnitRef = a.hasOwnProperty("unitRef") ? a.unitRef : null;
  this.mRolloverCategoryImage = a.hasOwnProperty("rolloverCategory") ? a.rolloverCategory : null;
  this.mFriendCreatorID = a.hasOwnProperty("friendCreatorID") ? a.friendCreatorID : null;
  this.mNewsData = [];
  this.mNewsData.hash =
    a.hash;
  this.mNewsData.rolloverCategoryImage = this.mRolloverCategoryImage;
  this.mNewsData.category = a.hasOwnProperty("newsCategory") ? a.newsCategory : null;
  this.mNewsData.popoutThumbnail = this.mPopout;
  this.mNewsData.popoutText = this.mPopoutText;
  this.mNewsData.hyperlink = this.mHyperLink;
  this.mNewsData.speechBalloon = a.hasOwnProperty("speechBalloon") ? a.speechBalloon : null;
  this.mNewsData.bodyText = a.hasOwnProperty("newsBodyText") ? a.newsBodyText : null;
  if (a.hasOwnProperty("localizedNewsBodyText")) {
    var h = this.mNewsData;
    a.localizedNewsBodyText.LoadString(function () {
      h.bodyText = a.localizedNewsBodyText.GetText(c)
    })
  }
  this.mDetokenizers = a.detokenizers;
  this.mTimeInQueue = this.mCount = 0;
  this.mMaxTimeInQueue = 360
};
simcity.cTicker = function () {
  this.UIHandler = scrui.cUIHandler;
  this.UIHandler();
  this.mRoot = this.mContainer = null;
  this.mMessageQueue = [];
  this.mSpeed = 0.25;
  this.mMode = simcity.cTicker.kModeScrollVertical;
  this.mNextMode = this.mCurMode = simcity.cTicker.kModeNone;
  this.mSubMode = simcity.cTicker.kSubModeVertToHoriz;
  this.mBlink = !0;
  this.mWritingDirection = simcity.cTicker.kLeftToRight;
  this.mTimeBetweenMessages = 0;
  this.mCurrentMessage = null;
  this.mDisasterOverride = this.mDataBindingsModsLoaded = !1;
  this.mGreatWorkUnlocks = Array(10);
  this.mDebugNewsCounter = this.mDebugTimeSinceLastNewsArticle = 0;
  this.mDebugNewsArticlesLimitInMinute = 60
};
goog.inherits(simcity.cTicker, scrui.cUIHandler);
simcity.cTicker.kWinIDTickerContainer = 183745325;
simcity.cTicker.kWinIDTickerRoot = 171649983;
simcity.cTicker.kPropUITickerSpeed = 3401832362;
simcity.cTicker.kPropUITickerMode = 1297872964;
simcity.cTicker.kPropUITickerBlink = 3687662925;
simcity.cTicker.kPropUITickerIgnore = 3214831283;
simcity.cTicker.kWinTickerBackground = 232464831;
simcity.cTicker.kModeNone = 0;
simcity.cTicker.kModeScrollHorizontal = 1;
simcity.cTicker.kModeScrollVertical = 2;
simcity.cTicker.kSubModeVertToHoriz = 6;
simcity.cTicker.kBlinkTime = 1.5;
simcity.cTicker.kTickerMinTime = 800;
simcity.cTicker.kMinImportance = 1;
simcity.cTicker.kMaxImportance = 10;
simcity.cTicker.kLeftToRight = 0;
simcity.cTicker.kRightToLeft = 1;
simcity.cTicker.kSpaceBetweenTapeParts = 5;
simcity.cTicker.kHyperlinkNews = 1;
simcity.cTicker.kHyperlinkUnit = 2;
simcity.cTicker.kHyperlinkPaletteTool = 3;
simcity.cTicker.kHyperlinkDisaster = 4;
simcity.cTicker.kHyperlinkRegionView = 5;
simcity.cTicker.kPopoutCategoryWorld = 1;
simcity.cTicker.kPopoutCategoryLocal = 2;
simcity.cTicker.kPopoutCategoryMisc = 3;
simcity.cTicker.kPopoutCategoryTraffic = 4;
simcity.cTicker.kPopoutCategoryFire = 5;
simcity.cTicker.kPopoutCategoryEarthquake = 6;
simcity.cTicker.kPopoutCount = 6;
simcity.cTicker.kTimeBetweenMessages = 2E3;
simcity.cTicker.kVerticalScrollSpeed = 0.33;
simcity.cTicker.kHorizontalScrollSpeedSlow = 0.05;
simcity.cTicker.kHorizontalScrollSpeedFast = 0.5;
simcity.cTicker.kTimeToHoldLongMessageAtEdge = 3E3;
simcity.cTicker.kSmallTextWidth = 100;
simcity.cTicker.kSmallTextHoldTime = 6E3;
simcity.cTicker.kMediumTextWidth = 500;
simcity.cTicker.kMediumTextHoldTime = 8E3;
simcity.cTicker.kLongTextHoldTime = 1E4;
simcity.cTicker.prototype.Init = function () {
  scrui.Assert(!Boolean(this.mRoot), "cTicker.prototype.Init: already ran when mRoot is set");
  for (var a in simcity.TickerMessageEvents)
    simcity.TickerMessageEvents[a].hash = Number(a);
  this.mBoxID = simcity.gGlobalUIHandler.GetBoxID();
  this.mDataBindingsModsLoaded = !1;
  this.LoadTickerDataBindingMods();
  this.mContainer = gUIManager.FindControlByID(simcity.cTicker.kWinIDTickerContainer);
  this.mRoot = this.mContainer.FindControlByID(simcity.cTicker.kWinIDTickerRoot);
  scrui.Assert(Boolean(this.mRoot),
    "cTicker.prototype.Init: missing ticker text mRoot")
};
simcity.cTicker.prototype.AddTickerMessageHelper = function (a, b, c) {
  var d = simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData,
  e = !1,
  f = !1,
  g = "[]",
  h = "[]",
  i = null,
  j = d.mPlayingBox,
  k = j.hasOwnProperty("creatorId") ? j.creatorId : null,
  l = null !== k ? d.mPlayers[j.creatorId].screenName : "[]",
  j = j.hasOwnProperty("name") ? j.name : "[]",
  m = d.mRegionName;
  if (!simcity.IsTutorialInProgress() && simcity.gGlobalUIHandler.mAPIServerDataUIHandler.mServerDataSet) {
    if (b && b.regionalBoxUniqueID)
      if (e = !0, d.mRegionUnitsLookup[b.regionalBoxUniqueID] &&
        "greatwork" == d.mRegionUnitsLookup[b.regionalBoxUniqueID].type)
        f = !0;
      else {
        var n = d.mBoxes[b.regionalBoxUniqueID];
        if (n && (g = n.name, i = n.creatorId))
          h = d.mPlayers[i].screenName, f = !0
      }
    if (!e || f) {
      d = a.hasOwnProperty("tableID") ? scrui.DecimalToHex(a.tableID) : "AutomatedTicker";
      g = {
        localeString : new scrui.cLocaleString(d, scrui.DecimalToHex(a.stringID ? a.stringID : a.localizedPopOutText)),
        friendCreatorID : i,
        localCreatorID : k,
        detokenizers : {
          friend_city_name : g,
          friend_player_name : h,
          local_city_name : j,
          local_player_name : l,
          region_name : m,
          unit_name : b && b.unitName ? scrui.TextFromLocaleProperty(b.unitName) : ""
        }
      };
      if (a.hasOwnProperty("getLocaleTokens")) {
        var b = a.getLocaleTokens(b),
        p;
        for (p in b)
          g.detokenizers[p] = b[p]
      }
      simcity.gGlobalUIHandler.mTicker.AddMessage(g, a, c)
    }
  }
};
simcity.cTicker.prototype.HandleGameEvent = function (a, b) {
  switch (a) {
  case simcity.kGameMessageUnitRuleUIEvent:
  case simcity.kGameMessageGlobalRuleUIEvent:
    if (simcity.TickerMessageEvents.hasOwnProperty(b.eventID)) {
      var c = simcity.TickerMessageEvents[b.eventID];
      if (!c.hasOwnProperty("displayCountLimit") || 0 < c.displayCountLimit) {
        var d = simcity.gGlobalUIHandler.mGameTimeManager.GetTotalElapsedGameTimeSeconds();
        if (!c.hasOwnProperty("timeToFire") || d > c.timeToFire) {
          var e = c.triggerTime ? Math.random() * (c.triggerTime[1] -
              c.triggerTime[0]) + c.triggerTime[0] : 0;
          c.timeToFire = d + e;
          d = b.unitRef ? scrui.RequestStringFromUnitRef(b.unitRef) : null;
          e = [];
          simcity.AddSimpleQueriesWithUnitRefReplacement(e, c.queries, d);
          var f = c.queries ? [Object.keys(c.queries)] : [[]];
          if (d && (c.isRegional && (e.push(scrui.BuildRequestQuery([simcity.kDataUnits, d, simcity.kDataBinAmount, simcity.kResourceRegionalBoxUniqueID])), f[0].push("regionalBoxUniqueID")), c.unitName))
            e.push(scrui.BuildRequestQuery([simcity.kDataUnits, d, simcity.kDataUnitName])), f[0].push("unitName");
          var g = this;
          simcity.RequestDataBindingDataSimple(e, f, function (a) {
            a = a[0];
            (!c.hasOwnProperty("test") || c.test(a)) && g.AddTickerMessageHelper(c, a, b.unitRef)
          })
        }
      }
    }
    switch (b.eventID) {
    case 2957722673:
      this.CreateTemporaryInterruptMessage("BreakingNewsEarthquake.js", new scrui.cLocaleString("Ticker.json", "0x0ea0f40e"), b.unitRef);
      break;
    case 3494952824:
      this.CreateTemporaryInterruptMessage("BreakingNewsPlague.js", new scrui.cLocaleString("Ticker.json", "0x0ea0f40f"), b.unitRef);
      break;
    case 2937931224:
      this.CreateTemporaryInterruptMessage("BreakingNewsMeteor.js",
        new scrui.cLocaleString("Ticker.json", "0x0ea0f410"), b.unitRef);
      break;
    case 2379974111:
      this.CreateTemporaryInterruptMessage("BreakingNewsUFO.js", new scrui.cLocaleString("Ticker.json", "0x0ea0f411"), b.unitRef);
      break;
    case 3552569805:
      this.CreateTemporaryInterruptMessage("BreakingNewsTornado.js", new scrui.cLocaleString("Ticker.json", "0x0ea0f412"), b.unitRef);
      break;
    case 3749223463:
      this.CreateTemporaryInterruptMessage("BreakingNewsZombies.js", new scrui.cLocaleString("Ticker.json", "0x0ea0f413"), b.unitRef);
      break;
    case 862871991:
      this.CreateTemporaryInterruptMessage("BreakingNewsRoboTank.js", new scrui.cLocaleString("Ticker.json", "0x0ea0f414"), b.unitRef);
      break;
    case 4106396754:
      this.CreateTemporaryInterruptMessage("BreakingNewsNuclearMeltdown.js", new scrui.cLocaleString("Ticker.json", "0x0ea0f415"), b.unitRef);
      break;
    case 1687307652:
      this.CreateTemporaryInterruptMessage("BreakingNewsBigLizard.js", new scrui.cLocaleString("Ticker.json", "0x0ea0f416"), b.unitRef);
      break;
    case simcity.kEventIDSpaceCenterUnlockedLocal:
    case simcity.kEventIDArcologyUnlockedLocal:
    case simcity.kEventIDInternationalAirportUnlockedLocal:
    case simcity.kEventIDSolarFarmUnlockedLocal:
      this.HandleGreatWorkUnlock(b.eventID)
    }
  }
};
simcity.cTicker.prototype.HandleGreatWorkUnlock = function (a) {
  switch (a) {
  case simcity.kEventIDSpaceCenterUnlockedLocal:
    if (this.mGreatWorkUnlocks[0])
      return;
    this.mGreatWorkUnlocks[0] = !0;
    break;
  case simcity.kEventIDArcologyUnlockedLocal:
    if (this.mGreatWorkUnlocks[1])
      return;
    this.mGreatWorkUnlocks[1] = !0;
    break;
  case simcity.kEventIDInternationalAirportUnlockedLocal:
    if (this.mGreatWorkUnlocks[2])
      return;
    this.mGreatWorkUnlocks[2] = !0;
    break;
  case simcity.kEventIDSolarFarmUnlockedLocal:
    if (this.mGreatWorkUnlocks[3])
      return;
    this.mGreatWorkUnlocks[3] = !0
  }
  simcity.gGlobalUIHandler.mRegionUnlockEffect.SetVisibility(!0);
  simcity.gGlobalUIHandler.mRegionViewUIHandler.SetGWUnlocked(!0, a)
};
simcity.DummyDataBindingUnlockData = {
  importance : 2,
  displayCountLimit : 100,
  color : "rgba(0,0,0,0.0)",
  blink : !1
};
simcity.cTicker.prototype.HandleUnlock = function (a) {
  var b = {
    localeString : new scrui.cLocaleString("Ticker.json", "0x0bf75f17", "Ticker message missing: ?Unlocked ~tool_name~!"),
    detokenizers : {
      tool_name : a.GetText()
    }
  };
  a.popOut ? simcity.DummyDataBindingUnlockData.popOut = scrui.StringFromResourceKey(a.popOut) : delete simcity.DummyDataBindingUnlockData.popOut;
  simcity.DummyDataBindingUnlockData.hyperlink = a.hyperlink;
  simcity.DummyDataBindingUnlockData.rolloverCategory = a.rolloverCategory;
  this.AddMessage(b, simcity.DummyDataBindingUnlockData)
};
simcity.DummyDataBindingTestTickerData = {
  importance : 10,
  interrupt : 0,
  displayCountLimit : 100,
  color : "#265e94",
  popOut : "cat2.png",
  hyperlink : null,
  blink : !1
};
simcity.DummyDataBindingTestTickerDataInterrupt = {
  importance : 10,
  interrupt : "BreakingNewsEarthquake.js",
  displayCountLimit : 100,
  color : "#265e94",
  popOut : "cat2.png",
  hyperlink : 2,
  blink : !1
};
simcity.DummyDataBindingTestTickerNewsArticle = {
  importance : 11,
  displayCountLimit : 2,
  color : "#265e94",
  newsCategory : 1,
  hyperlink : null,
  blink : !1,
  popOut : "cat2.png",
  popOutText : "Mayor Pledges Power",
  rolloverCategory : "rollover1.png",
  newsBodyText : "Test news body text text.",
  newsLargeImage : "Graphics/NewsHub/roadconnectiondone.png"
};
simcity.TemporaryInterruptMessage = {
  importance : 10,
  interrupt : "BreakingNewsEarthquake.js",
  displayCountLimit : 100,
  color : "#265e94",
  popOut : "cat2.png",
  hyperlink : null,
  blink : !1
};
simcity.cTicker.prototype.CreateDummyMessage = function (a) {
  var b = {
    localeString : new scrui.cLocaleString("Ticker.json", 0 == a ? "0x0bf75f1b" : "0x0bfefca1", "Ticker message missing: ?A Bridge Has Been Built!")
  };
  this.mTimeBetweenMessages = 0;
  0 == a ? this.AddMessage(b, simcity.DummyDataBindingTestTickerDataInterrupt) : 1 == a ? this.AddMessage(b, simcity.DummyDataBindingTestTickerData) : this.AddMessage(b, simcity.DummyDataBindingTestTickerNewsArticle)
};
simcity.cTicker.prototype.CreateTemporaryInterruptMessage = function (a, b, c) {
  b = {
    localeString : b
  };
  simcity.TemporaryInterruptMessage.interrupt = a;
  simcity.TemporaryInterruptMessage.unitRef = c;
  simcity.TemporaryInterruptMessage.hyperlink = simcity.cTicker.kHyperlinkDisaster;
  this.mDisasterOverride = !0;
  this.AddMessage(b, simcity.TemporaryInterruptMessage)
};
simcity.cTicker.prototype.AddMessage = function (a, b, c) {
  if (simcity.IsTutorialInProgress())
    return null;
  var d = this;
  a.hasOwnProperty("friendCreatorID") ? b.friendCreatorID = a.friendCreatorID : delete b.friendCreatorID;
  a.localeString.LoadString(function () {
    var e;
    e = simcity.cTicker.debuggingWireArticles ? a.localeString.mStringID + " " + a.localeString.GetText(a.detokenizers) : a.localeString.GetText(a.detokenizers);
    e = new simcity.cMessage(b, e, a.detokenizers);
    null == e.mUnitRef && (e.mUnitRef = c);
    var f = !1;
    if (e.mInterrupt || e.mInterruptBasic ||
      b.debugInterrupt)
      f = !0;
    else if (10 <= e.mImportance && (null == d.mCurrentMessage || e.mImportance > d.mCurrentMessage.mImportance))
      f = !0;
    f ? d.HandleInterrupt(e) : d.mMessageQueue.push(e)
  })
};
simcity.cTicker.prototype.RemoveAllCurrentMessages = function () {
  for (var a = this.mMessageQueue.length; 0 < a; a--)
    this.mMessageQueue.pop();
  this.mRoot.mChildren && this.mRoot.mChildren[0] && this.mRoot.mChildren[0].DestroyControl()
};
simcity.cTicker.prototype.RemoveCurrentMessage = function () {
  this.mRoot && (this.mRoot.mChildren && this.mRoot.mChildren[0]) && this.mRoot.mChildren[0].DestroyControl()
};
simcity.cTicker.prototype.HandleInterrupt = function (a) {
  this.RemoveCurrentMessage();
  this.mTimeBetweenMessages = 0;
  this.mMessageQueue.unshift(a)
};
simcity.cTicker.prototype.UpdateMessageQueue = function (a) {
  var b,
  c;
  for (b = 0; b < this.mMessageQueue.length; b++)
    c = this.mMessageQueue[b], c.mTimeInQueue += a, scrui.Assert(0 < c.mMaxTimeInQueue, "cTicker.prototype.UpdateMessageQueue: mMaxTimeInQueue must be larger than zero");
  this.mMessageQueue.sort(function (a, b) {
    return b.mImportance - 0.0010 * b.mTimeInQueue / b.mMaxTimeInQueue - (a.mImportance - 0.0010 * a.mTimeInQueue / a.mMaxTimeInQueue)
  });
  for (b = this.mMessageQueue.length; 0 < b; b--)
    c = this.mMessageQueue[b - 1], 0 > c.mImportance -
    0.0010 * c.mTimeInQueue / c.mMaxTimeInQueue && (void 0 !== c.mDataBinding.callback && c.mDataBinding.callback(0), this.mMessageQueue.pop())
};
simcity.cTicker.prototype.GetMessage = function () {
  var a = this.mMessageQueue.shift();
  Boolean(a) && a.mCount < a.mRepeats - 1 && (a.mCount++, this.mMessageQueue.unshift(a));
  if (a && a.mDataBinding && a.mDataBinding.hasOwnProperty("displayCountLimit")) {
    if (0 > a.mDataBinding.displayCountLimit - 1)
      return !1;
    a.mDataBinding.displayCountLimit--
  }
  return a
};
simcity.cTicker.prototype.IsTapeReadyForMessage = function (a) {
  var b = !1;
  if (simcity.IsDisasterInProgress() && !this.mDisasterOverride)
    return !1;
  this.mDisasterOverride = !1;
  this.mNextMode === simcity.cTicker.kModeNone && (this.mNextMode = this.mMode);
  this.mRoot.mChildren || (1 > this.mTimeBetweenMessages ? (this.mCurMode = this.mNextMode, this.mNextMode = simcity.cTicker.kModeNone, b = !0, this.mTimeBetweenMessages = simcity.cTicker.kTimeBetweenMessages) : this.mTimeBetweenMessages -= a);
  return b
};
simcity.cTicker.prototype.GetMessageTextWidth = function (a, b) {
  var c = b.mChildren[0],
  d = c.GetText();
  c.SetRawText(a);
  var e = c.GetTextWidth();
  c.SetRawText(d);
  return e
};
simcity.cTicker.prototype.GetMessagePart = function (a) {
  var b;
  b = a.mText;
  a.mText = "";
  return b
};
simcity.cTicker.prototype.AddMessagePartToTape = function (a, b, c, d) {
  c = c.mChildren[0];
  c.SetRawText(b);
  c.SetTextColor(a.mColor);
  c.SetPosition(d, (this.mRoot.mHeight - b.mHeight) / 2, c.GetTextWidth(), c.mHeight);
  c.mTickerBlink = c.mTickerBlink || a.mBlink;
  this.mSubMode == simcity.cTicker.kSubModeVertToHoriz && 0 != d && (c.mTickerBlink = !1)
};
simcity.cTicker.prototype.SetupPopoutAndRollover = function (a) {
  if (this.mDebugNewsCounter < this.mDebugNewsArticlesLimitInMinute) {
    var b = simcity.gGlobalUIHandler.mNewspaperUIHandler;
    a.mInterrupt ? b.ShowInterrupt(a.mPopoutText, a.mInterrupt) : null != a.mPopout && (null !== a.mPopoutText ? b.ShowPopOutPicture(a.mPopoutText, a.mPopout, a.mFriendCreatorID) : b.ShowPopOutPicture(a.mText, a.mPopout, a.mFriendCreatorID), null !== a.mPopoutSound && simcity.SendSoundEvent(simcity.audio.kGlobalSoundObjectID, a.mPopoutSound), simcity.SendSoundEvent(simcity.audio.kGlobalSoundObjectID,
        simcity.audio.kInstanceUIWireMessageAppear));
    null != a.mRolloverCategoryImage && b.SetRolloverCategoryImage(a.mRolloverCategoryImage);
    a.mNewsData && a.mNewsData.category && b.AddNewsStory(a.mNewsData, a.mDetokenizers);
    this.mDebugNewsCounter++
  }
};
simcity.cTicker.prototype.AddMessageToTape = function (a) {
  this.SetupPopoutAndRollover(a);
  this.mCurrentMessage = a;
  for (this.mSpeed = simcity.cTicker.kVerticalScrollSpeed; Boolean(a) && Boolean(a.mText) && 0 < a.mText.length; ) {
    var b = gUIManager.LoadAndCacheLayout("Layouts/TickerTape.js", this.mRoot);
    scrui.Assert(null !== b, "cTicker.prototype.AddMessagePartToTape: load of Layouts/Tickertape.js failed");
    var c = this.GetMessagePart(a, b);
    this.AddMessagePartToTape(a, c, b, 0)
  }
  this.SetTickerBackgroundVisibility(!0)
};
simcity.cTicker.prototype.SetTickerBackgroundVisibility = function (a) {
  gUIManager.FindControlByID(simcity.cTicker.kWinTickerBackground).SetVisibility(a)
};
simcity.cTicker.prototype.IsBlinking = function (a) {
  var b = a.GetTextWidth();
  return !0 === this.mBlink && !0 === a.mTickerBlink && a.mLeft <= 0.5 * (this.mRoot.mWidth - b) && 0 < a.mTickerTime ? !0 : !1
};
simcity.cTicker.prototype.CalcBlink = function (a) {
  var b = a.GetTextWidth();
  a.SetPosition(a.mLeft, a.mTop, b, a.mHeight);
  var b = a.mTickerTime / simcity.cTicker.kBlinkTime,
  c = Math.cos(3 * Math.PI * b);
  return 0.2 < b && 0.8 > b ? c * c : c * c * a.mTickerOpacity
};
simcity.cTicker.prototype.TapeScrollHorizontal = function (a) {
  var b,
  c = !1;
  if (this.mRoot.mChildren) {
    b = this.mRoot.mChildren[0].mChildren[0];
    b.mTickerTime = b.mTickerTime || simcity.cTicker.kBlinkTime;
    b.mTickerOpacity = b.mTickerOpacity || b.mOpacity;
    this.IsBlinking(b) && (c = !0);
    var d = b.GetTextWidth();
    c ? this.IsBlinking(b) && (d = this.CalcBlink(b), b.SetOpacity(d), b.mTickerTime -= 0.0010 * a) : d > this.mRoot.mWidth ? (this.mCurrentMessage.hasOwnProperty("animating") || (this.mCurrentMessage.animating = !0, this.mRoot.mChildren[0].mRootElement.className =
          "animatedSlow translateLeftSlow"), c = this.GetAnimatedDivPos(), d + c < this.mRoot.mWidth && !this.mLongMessagePauseHandled) ? (this.mRoot.mChildren[0].mRootElement.className = "", b.SetPosition(c, b.mTop, b.mWidth, b.mHeight), b.mLongMessagePauseTimer = simcity.cTicker.kTimeToHoldLongMessageAtEdge) : b.mLongMessagePauseTimer && (b.mLongMessagePauseTimer -= a, 0 >= b.mLongMessagePauseTimer && (this.mLongMessagePauseHandled = !0, this.mRoot.mChildren[0].mRootElement.className = "animatedFast translateLeftFast")) : this.mCurrentMessage.hasOwnProperty("animating") ||
    (this.mCurrentMessage.animating = !0, this.mRoot.mChildren[0].mRootElement.className = "animatedFast translateLeftFast")
  }
};
simcity.cTicker.prototype.TapeScrollVertical = function (a) {
  if (this.mRoot.mChildren && 0 < this.mRoot.mChildren.length) {
    var b = this.mRoot.mChildren[0].mChildren[0],
    c = b.GetTextWidth(),
    d = 0,
    d = c < simcity.cTicker.kSmallTextWidth ? simcity.cTicker.kSmallTextHoldTime : c < simcity.cTicker.kMediumTextWidth ? simcity.cTicker.kMediumTextHoldTime : simcity.cTicker.kLongTextHoldTime;
    b.mInit || (b.mInit = !0, b.mTickerDisplayTime = d);
    var d = b.mTickerDisplayTime / d,
    e;
    0.9 < d ? (e = Math.sin(2.5 * Math.PI * (d - 0.9)), e *= b.mHeight * e) : e = 0;
    this.mSubMode ==
    simcity.cTicker.kSubModeVertToHoriz && 0.01 >= d ? (this.mCurMode = simcity.cTicker.kModeScrollHorizontal, this.mNextMode = simcity.cTicker.kModeNone, c > this.mRoot.mWidth && (this.mLongMessagePauseHandled = !1)) : (b.SetPosition(0, e, c, b.mHeight), b.mTickerTime = b.mTickerTime || simcity.cTicker.kBlinkTime, b.mTickerOpacity = b.mTickerOpacity || b.mOpacity, c = b.mTickerOpacity, 0.8 > d && (0.2 < d && this.IsBlinking(b)) && (c = this.CalcBlink(b), b.mTickerTime -= 0.0010 * a), b.SetOpacity(c), b.mTickerDisplayTime -= a)
  }
};
simcity.cTicker.prototype.GetAnimatedDivPos = function () {
  var a = 0;
  if (this.mRoot.mChildren && 0 < this.mRoot.mChildren.length) {
    var b = window.getComputedStyle(this.mRoot.mChildren[0].mRootElement, null).getPropertyValue("-webkit-transform");
    if (!b.split("(")[1])
      return a;
    a = b.split("(")[1].split(")")[0].split(",");
    a = parseInt(a[4])
  }
  return a
};
simcity.cTicker.prototype.TapeCleanupByPosition = function () {
  if (this.mRoot.mChildren && 0 < this.mRoot.mChildren.length) {
    var a = this.mRoot.mChildren[0].mChildren[0].GetTextWidth();
    0 > this.GetAnimatedDivPos() + a && (this.mRoot.mChildren[0].DestroyControl(), this.SetTickerBackgroundVisibility(!1))
  }
};
simcity.cTicker.prototype.UpdateTape = function (a) {
  switch (this.mCurMode) {
  case simcity.cTicker.kModeScrollVertical:
    this.TapeScrollVertical(a);
    break;
  default:
  case simcity.cTicker.kModeScrollHorizontal:
    this.TapeScrollHorizontal(a),
    this.TapeCleanupByPosition()
  }
};
simcity.cTicker.kBtnIDPopOut = 223048948;
simcity.cTicker.kBtnIDTickerPopOut = 223052350;
simcity.cTicker.prototype.HandleUIMessage = function (a, b, c) {
  scrui.cUIHandler.prototype.HandleUIMessage.call(this, a, b, c);
  switch (a) {
  case scrui.kMsgTypeButtonClicked:
    switch (b) {
    case simcity.cTicker.kBtnIDPopOut:
    case simcity.cTicker.kBtnIDTickerPopOut:
      if (a = simcity.gGlobalUIHandler.mNewspaperUIHandler, a.IsPopoutVisible())
        if (null != this.mCurrentMessage.mHyperLink)
          switch (this.mCurrentMessage.mHyperLink) {
          case simcity.cTicker.kHyperlinkNews:
            a.Show();
            break;
          case simcity.cTicker.kHyperlinkUnit:
            this.mCurrentMessage.mUnitRef &&
            scrui.PostGameCommand(scrui.BuildCommand(["zoomToUnit", scrui.RequestStringFromUnitRef(this.mCurrentMessage.mUnitRef)]));
            break;
          case simcity.cTicker.kHyperlinkPaletteTool:
            alert("hyperlink TOOL PALETTE");
            break;
          case simcity.cTicker.kHyperlinkDisaster:
            null != this.mCurrentMessage.mUnitRef && scrui.PostGameCommand(scrui.BuildCommand(["zoomToDisaster", scrui.RequestStringFromUnitRef(this.mCurrentMessage.mUnitRef)]))
          }
        else
          this.mCurrentMessage.mUnitRef && (gUIManager.FindControlByID(simcity.kBtnRegionCamera).mIsSelected ?
            (a = gUIManager.FindControlByID(simcity.kBtnReturnToCity), b = a.GetAbsolutePosition(), a.Private_OnClick(b[0], b[1])) : scrui.PostGameCommand(scrui.BuildCommand(["zoomToUnit", scrui.RequestStringFromUnitRef(this.mCurrentMessage.mUnitRef)])))
    }
  }
};
simcity.cTicker.prototype.Update = scrui.Client_ProfZone("cTicker.Update", function (a) {
    var b = this.mRoot && this.mRoot.GetAbsoluteVisibility();
    simcity.gGlobalUIHandler.mGameTimeManager.GetElapsedGameTimeSeconds();
    var c = simcity.gGlobalUIHandler.mNewspaperUIHandler;
    if (b && (b = this.mDataBindingsModsLoaded && c.IsReady(), this.UpdateMessageQueue(a), this.IsTapeReadyForMessage(a) && b && (b = this.GetMessage(), Boolean(b) && (void 0 !== b.mDataBinding.callback && b.mDataBinding.callback(1), this.AddMessageToTape(b))), this.UpdateTape(a),
        this.mDebugTimeSinceLastNewsArticle += a, 6E4 < this.mDebugTimeSinceLastNewsArticle))
      this.mDebugNewsCounter = this.mDebugTimeSinceLastNewsArticle = 0
  });
simcity.cTicker.prototype.PrintDebugInfo = function () {
  if (simcity.DEBUG) {
    scrui.DebugPrint("cTicker mMessageQueue = " + this.mMessageQueue.length + ", dataBinding categories = " + Object.keys(simcity.TickerCategories).length + ", dataBinding events = " + Object.keys(simcity.TickerMessageEvents).length);
    for (var a = 0; a < this.mMessageQueue.length; ++a) {
      var b = this.mMessageQueue[a].mDataBinding,
      c = b.hash ? b.hash : b.localizedPopOutText;
      c || (c = b.stringID);
      scrui.DebugPrint("    " + scrui.DecimalToHex(c))
    }
  }
};
simcity.cTicker.prototype.SaveTickerDataBindingMods = function () {
  if (0 != this.mBoxID) {
    scrui.PostGameCommand(scrui.BuildCommand(["tickerMod", "start"]));
    for (var a in simcity.TickerMessageEvents) {
      var b = simcity.TickerMessageEvents[a];
      b.hash = Number(a);
      b.hasOwnProperty("hash") && b.hasOwnProperty("displayCountLimit") && scrui.PostGameCommand(scrui.BuildCommand(["tickerMod", b.hash, b.displayCountLimit]))
    }
    scrui.PostGameCommand(scrui.BuildCommand(["tickerMod", "end"]))
  }
};
simcity.cTicker.prototype.LoadTickerDataBindingMods = function () {
  var a = this;
  if (0 == a.mBoxID)
    a.mDataBindingsModsLoaded = !0;
  else {
    var b = scrui.BuildRequestQuery(["box", this.mBoxID, "metadata", "tickerMod"]);
    scrui.RequestRestData([b], [], "get", function (b) {
      a.mDataBindingsModsLoaded = !0;
      if (null != b && (b = scrui.ParseJSON(b.contentText)) && !b.hasOwnProperty("errorCode"))
        for (var b = b.values, d = 0; d < b.length; d++) {
          var e = b[d][0],
          f = b[d][1],
          g = simcity.TickerMessageEvents[e];
          g && g.hasOwnProperty("hash") && g.hash == e && (g.displayCountLimit =
              f)
        }
    })
  }
};
simcity.cTicker.prototype.Shutdown = function () {
  this.SaveTickerDataBindingMods()
};
simcity.cTicker.currentDebugWireArticle = 0;
simcity.cTicker.debuggingWireArticles = !1;
simcity.cTicker.prototype.DebugShowWireArticle = function (a) {
  if (simcity.DEBUG) {
    simcity.cTicker.debuggingWireArticles = !0;
    var b = Object.keys(simcity.TickerMessageEvents);
    0 == a ? 0 <= simcity.cTicker.currentDebugWireArticle - 1 && simcity.cTicker.currentDebugWireArticle-- : 1 == a && simcity.cTicker.currentDebugWireArticle + 1 < b.length && simcity.cTicker.currentDebugWireArticle++;
    a = simcity.TickerMessageEvents[b[simcity.cTicker.currentDebugWireArticle]];
    this.mTimeBetweenMessages = a.displayCountLimit = 100;
    a.hasOwnProperty("getLocaleTokens") &&
    delete a.getLocaleTokens;
    a.debugInterrupt = !0;
    this.AddTickerMessageHelper(a, null)
  }
};
simcity.cTicker.prototype.PopoutAnimDone = function () {};
simcity.ToolPaletteUI = {};
simcity.cToolPaletteUIHandler = function () {
  this.UIHandler = scrui.cUIHandler;
  this.UIHandler();
  this.mToolKeys = this.mRolloverButton = this.mRolloverLayout = this.mLayerUIHandler = this.mInfoLayout = this.mNewAlertItemsContainer = this.mAlertsContainer = this.mContextualInfoBodyTextWin = this.mContextualInfoHeaderTextWin = this.mNewContextualInfoContainer = this.mCategoryName = this.mSubCategoryBtnsContainer = this.mHelpText = this.mSimIconWindow = this.mInfoContainer = this.mPagingSystemContainer = this.mRevealAnim = this.mPanelContainer =
    this.mCitySpecializationContainer = this.mCategoryContainer = null;
  this.mNeedsUpdated = !1;
  this.mSelectedToolCursorKey = this.mSelectedToolButton = this.mSelectedCategoryButton = null;
  this.mOverridingCursor = !1;
  this.mSelectedSubCategoryLayer = this.mSelectedSubCategoryButton = null;
  this.mModeSwap = !1;
  this.mCategoryToOpen = 0;
  this.mCitySpecializationModeActive = !1;
  this.mLastSelectedCitySpecializationID = this.mLastSelectedMainCategoryID = 0;
  this.mCategoryGroupID = 161790467;
  this.mSubCategoryGroupID = 0;
  this.mIsSubPanel = this.mIsLegendShifted =
    this.mIsPaletteLoaded = !1;
  this.mPanelLayoutKey = this.mPanelLayout = null;
  this.mCategoryData = {};
  this.mCategoryButtonsMap = {};
  this.mRootCategoryAlerts = {};
  this.mCitySpecializationCategoryAlerts = {};
  this.mToolButtons = [];
  this.mToolUnlockInfoArray = {};
  this.mNewlyUnlocked = {};
  this.mNumTotalPages = this.mNumItemsPerPage = this.mPageIndex = 0;
  this.mKeyShortcutIx = -1;
  this.mEditorCategory = this.mEditorLayout = this.mEditorKeyString = this.mEditedBuildingRefString = null;
  this.mInfoPanelTimeSinceUpdate = 0;
  this.mPreviousAlertLevel = {};
  this.mEditorIsOpen = this.mToolPanelOpen = !1;
  this.mCurrentLightLayer = this.mBeatCount = 0;
  this.mLayerButtons = [];
  this.mGuideMeWarningDialog = null;
  this.mHasLockedTool = this.mHasProgressBarTool = this.mHasRoadTool = !1;
  this.mWaitingCategory = null;
  this.mRegionViewCounter = 0
};
goog.inherits(simcity.cToolPaletteUIHandler, scrui.cUIHandler);
simcity.cToolPaletteUIHandler.kBtnIDCategoryButton = 161711552;
simcity.cToolPaletteUIHandler.kBtnIDCategoryButtonOn = 228930836;
simcity.cToolPaletteUIHandler.kWinIDCategoryIconNormal = 164725874;
simcity.cToolPaletteUIHandler.kWinIDCategoryIconNormalOn = 227699592;
simcity.cToolPaletteUIHandler.kWinIDCategoryIconCaution = 215602420;
simcity.cToolPaletteUIHandler.kWinIDCategoryIconCritical = 215602425;
simcity.cToolPaletteUIHandler.kTxtCategoryTextOn = 230397837;
simcity.cToolPaletteUIHandler.kTxtCategoryTextOff = 230397836;
simcity.cToolPaletteUIHandler.kWinIDPalettePanel = 161793066;
simcity.cToolPaletteUIHandler.kWinIDToolIcon = 158840632;
simcity.cToolPaletteUIHandler.kBtnIDSelectTool = 158753137;
simcity.cToolPaletteUIHandler.kTxtPaletteRolloverName = 173289992;
simcity.cToolPaletteUIHandler.kTxtPaletteRolloverDescription = 173349051;
simcity.cToolPaletteUIHandler.kWinContainerRolloverDescription = 238865488;
simcity.cToolPaletteUIHandler.kWinContainerRolloverRegionalBenefitDescription = 243440736;
simcity.cToolPaletteUIHandler.kTxtIDRolloverRegionalBenefitDescription = 243442873;
simcity.cToolPaletteUIHandler.kWinPaletteRolloverLockedBackground = 230914691;
simcity.cToolPaletteUIHandler.kWinPaletteRolloverLockedIcon = 232453066;
simcity.cToolPaletteUIHandler.kWinPaletteRolloverLockedText = 232453067;
simcity.cToolPaletteUIHandler.kWinPaletteRolloverPlacedText = 250188623;
simcity.cToolPaletteUIHandler.kTxtPaletteRolloverCost = 173348034;
simcity.cToolPaletteUIHandler.kTxtPaletteRolloverUpkeep = 173348037;
simcity.cToolPaletteUIHandler.kWinPaletteRolloverMarqueeImage = 232538146;
simcity.cToolPaletteUIHandler.kWinPaletteRolloverMoreInfoContainer = 245866218;
simcity.cToolPaletteUIHandler.kBtnExitEditor = 210351623;
simcity.cToolPaletteUIHandler.kBtnEditBuilding = 184860118;
simcity.cToolPaletteUIHandler.kWinIDBuildingIcon = 184860120;
simcity.cToolPaletteUIHandler.kWinInfoContainer = 185017193;
simcity.cToolPaletteUIHandler.kWinSimIconWindow = 247683512;
simcity.cToolPaletteUIHandler.kTxtHelpInfo = 244903423;
simcity.cToolPaletteUIHandler.kTxtCategoryName = 250208043;
simcity.cToolPaletteUIHandler.kWinNewContextualInfoContainer = 230828025;
simcity.cToolPaletteUIHandler.kWinAlertItemsContainer = 213800222;
simcity.cToolPaletteUIHandler.kWinCategoryButtonAlert = 213716619;
simcity.cToolPaletteUIHandler.kWinIDPagingSystemContainer = 213112837;
simcity.cToolPaletteUIHandler.kBtnIDPageLeft = 185281788;
simcity.cToolPaletteUIHandler.kBtnIDPageRight = 185281790;
simcity.cToolPaletteUIHandler.kWinIDLayerToggleContainer = 186757736;
simcity.cToolPaletteUIHandler.kAnimIDCategoryButtonWarning = 199534789;
simcity.cToolPaletteUIHandler.kBtnSubCategory = 204051110;
simcity.cToolPaletteUIHandler.kWinSubCategoryBtnsContainer = 204052135;
simcity.cToolPaletteUIHandler.kWinUnlockContainer = 219781060;
simcity.cToolPaletteUIHandler.kBtnIDToggleContextualInfo = 230919578;
simcity.cToolPaletteUIHandler.kWinLegendShift = 236788010;
simcity.cToolPaletteUIHandler.kAnimIDPanelRevealUp = 250100054;
simcity.cToolPaletteUIHandler.kWinIDNonRoadToolContainer = 250344887;
simcity.cToolPaletteUIHandler.kWinIDRoadToolContainer = 250344888;
simcity.cToolPaletteUIHandler.kWinIDRoadToolButtonContainer = 250345119;
simcity.cToolPaletteUIHandler.kBtnIDRoadToolPageRight = 250344947;
simcity.cToolPaletteUIHandler.kBtnIDRoadToolPageLeft = 250344948;
simcity.cToolPaletteUIHandler.kWinUpgradeApproved = 246633369;
simcity.cToolPaletteUIHandler.kWinUpgradeText = 249663410;
simcity.cToolPaletteUIHandler.kWinUpgradeImage = 246529001;
simcity.cToolPaletteUIHandler.kWinUpgradeProgress = 246633368;
simcity.cToolPaletteUIHandler.kWinUpgradeProgressGroup = 246486429;
simcity.cToolPaletteUIHandler.kWinUpgradeProgressBar = 246485544;
simcity.cToolPaletteUIHandler.kWinUpgradeSubtitle = 246632530;
simcity.cToolPaletteUIHandler.kWinUpgradeMaxedGroup = 251405092;
simcity.cToolPaletteUIHandler.kWinSubCategoryIcon = 204053071;
simcity.cToolPaletteUIHandler.kWinToolLockIcon = 200667583;
simcity.cToolPaletteUIHandler.kWinToolBetaLockIcon = 253379202;
simcity.cToolPaletteUIHandler.kUpgradeSlotTypeUsed = 0;
simcity.cToolPaletteUIHandler.kUpgradeSlotTypeAvailable = 1;
simcity.cToolPaletteUIHandler.kUpgradeSlotTypeLocked = 2;
simcity.cToolPaletteUIHandler.kKeyTriggerClosePanel = 4253027725;
simcity.cToolPaletteUIHandler.kKeyTriggerBigBusinessPanel = 251043506;
simcity.cToolPaletteUIHandler.kKeyTriggerZoneResidential = 251030847;
simcity.cToolPaletteUIHandler.kKeyTriggerZoneCommercial = 251030854;
simcity.cToolPaletteUIHandler.kKeyTriggerZoneIndustrial = 251030860;
simcity.cToolPaletteUIHandler.kKeyTriggerZoneUnzone = 251030866;
simcity.cToolPaletteUIHandler.kKeyTriggerDrawStraight = 252768402;
simcity.cToolPaletteUIHandler.kKeyTriggerDrawCircle = 252768403;
simcity.cToolPaletteUIHandler.kKeyTriggerDrawCurvy = 252768404;
simcity.cToolPaletteUIHandler.kKeyTriggerDrawRectangle = 252768405;
simcity.cToolPaletteUIHandler.kKeyTriggerDrawArc = 252768406;
simcity.cToolPaletteUIHandler.kKeyTriggerRoadUpgrade = 253721349;
simcity.cToolPaletteUIHandler.kKeyTriggerEditorDemolish = 251030870;
simcity.kKeyTrigger_NextHeavyLayer = 251319898;
simcity.cToolPaletteUIHandler.kBtnDrawStraight = 238502129;
simcity.cToolPaletteUIHandler.kBtnDrawCurvy = 238502130;
simcity.cToolPaletteUIHandler.kBtnDrawGrid = 238502131;
simcity.cToolPaletteUIHandler.kBtnDrawArc = 238502132;
simcity.cToolPaletteUIHandler.kBtnDrawCircle = 238502133;
simcity.cToolPaletteUIHandler.kBtnRoadSelector = 251495679;
simcity.cToolPaletteUIHandler.kBtnBulldozer = 241884167;
simcity.cToolPaletteUIHandler.kBtnToggleGuides = 244663392;
simcity.cToolPaletteUIHandler.kOptionIDRoadGuides = 244650932;
simcity.cToolPaletteUIHandler.kWinRoadButtonContainer = 239814192;
simcity.cToolPaletteUIHandler.kBtnGuideMe = 247924453;
simcity.cToolPaletteUIHandler.kBtnGoToRegion = 250010473;
simcity.cToolPaletteUIHandler.kBtnClose = 240419369;
simcity.cToolPaletteUIHandler.kGuideMeDescription = 245253398;
simcity.cToolPaletteUIHandler.kGuideMeTitle = 250070465;
simcity.cToolPaletteUIHandler.kGuideMeCurrentText = 250070466;
simcity.cToolPaletteUIHandler.kGuideMeTextWindow = 250073221;
simcity.cToolPaletteUIHandler.kWinRightBracket = 250184322;
simcity.cToolPaletteUIHandler.kWinLeftBracket = 250184323;
simcity.cToolPaletteUIHandler.kWinCenterBracket = 250184321;
simcity.cToolPaletteUIHandler.kWinMoreRightBracket = 250184325;
simcity.cToolPaletteUIHandler.kWinMoreLeftBracket = 250184324;
simcity.cToolPaletteUIHandler.kWinModuleCount = 250184320;
simcity.cToolPaletteUIHandler.kTxtModulesUsed = 250184326;
simcity.cToolPaletteUIHandler.kTxtModuleLimit = 250184327;
simcity.cToolPaletteUIHandler.kToolIDBulldozer = 2536567712;
simcity.cToolPaletteUIHandler.kToolIDPathSelector = 3342964767;
simcity.cToolPaletteUIHandler.kRoadTypeCurvy = 0;
simcity.cToolPaletteUIHandler.kRoadTypeStraight = 1;
simcity.cToolPaletteUIHandler.kRoadTypeGrid = 2;
simcity.cToolPaletteUIHandler.kRoadTypeArc = 3;
simcity.cToolPaletteUIHandler.kRoadTypeCircle = 4;
simcity.kLayerCategory1 = [3469784512, 3437286480, 1551159691];
simcity.kLayerCategory2 = [2664615274, 1454310548, 3251691267, 3334161007, 3334161012];
simcity.kLayerCategory3 = [3250089732, 261282902, 3441286197];
simcity.kLayerCategory4 = [2092055118, 2678880713, 244026082, 2680278561, 2510935805];
simcity.kLayerCategory5 = [2069247941, 1350102368, 1044908733, 1537061107, 493973294];
simcity.kLayerCategory6 = [714721605, 2789071991, 1260877650, 1795056175];
simcity.kLayerCategory7 = [3469052172, 2905154932, 2678778480, 1981100101, 2735439586];
simcity.kLayerRows = [simcity.kLayerCategory1, simcity.kLayerCategory2, simcity.kLayerCategory3, simcity.kLayerCategory4, simcity.kLayerCategory5, simcity.kLayerCategory6, simcity.kLayerCategory7];
simcity.cToolPaletteUIHandler.prototype.Init = function (a) {
  this.mRootParent = a;
  this.mCategoryContainer = a.FindControlByID(simcity.kWinIDPaletteHolder);
  this.mCitySpecializationContainer = a.FindControlByID(249751677);
  this.mPanelContainer = a.FindControlByID(simcity.kWinIDPalettePanelHolder);
  this.mRevealAnim = a.FindAnimationByID(233068662);
  scrui.Assert(null !== this.mPanelContainer && null !== this.mCategoryContainer && null !== this.mLayerUIHandler, "must specify a parent control and the layer UI handler at activation!");
  gUIManager.CacheLayout("Layouts/Palette/BuildingItemUI.js");
  gUIManager.CacheLayout("Layouts/Palette/CategoryButtonWithIcon2.js");
  this.mEditorLayout = gUIManager.LoadLayout("Layouts/Palette/PalettePanelEditor3.js", a.FindControlByID(231606740));
  this.mEditorLayout.SetVisibility(!1);
  this.mEditorIsOpen = this.mToolPanelOpen = !1;
  this.mLastEditorUsedRoadControlID = this.mLastUsedRoadControlID = 0;
  scrui.PostGameCommand(scrui.BuildCommand([simcity.kCommandRoadDrawType, simcity.cToolPaletteUIHandler.kRoadTypeStraight]));
  a = gUIManager.FindControlByID(simcity.kWinToolRolloverContainer);
  this.mRolloverLayout = gUIManager.LoadAndCacheLayout("Layouts/PaletteRolloverPreview.js", a);
  this.mRolloverLayout.SetVisibility(!1);
  this.mHasRoadTool = !1;
  this.LoadPalette()
};
simcity.cToolPaletteUIHandler.prototype.Shutdown = function () {
  null !== this.mRolloverLayout && this.mRolloverLayout.DestroyControl();
  this.mLayerUIHandler = this.mInfoContainer = this.mPanelContainer = this.mCategoryContainer = this.mRolloverButton = this.mRolloverLayout = null;
  null !== this.mPanelLayout && this.mPanelLayout.DestroyControl();
  this.mRootParent = this.mPreviousAlertLevel = this.mPanelLayout = null
};
simcity.cToolPaletteUIHandler.prototype.Update = scrui.Client_ProfZone("cToolPaletteUIHandler.Update", function (a) {
    this.mWaitingCategory && 0 <= this.mRegionViewCounter ? (simcity.gGlobalUIHandler.mRegionViewUIHandler.SetStartingRegionPanel(this.mWaitingCategory), simcity.gGlobalUIHandler.mRegionCameraButton.SetSelected(!0), this.mWaitingCategory = null, this.mRegionViewCounter = 1) : 0 > this.mRegionViewCounter && (this.mRegionViewCounter += a);
    0 !== this.mCategoryToOpen && (this.OpenToolPanelFromID(this.mCategoryToOpen), this.mCategoryToOpen =
        0);
    this.mRolloverButton && this.UpdateRollover(!0);
    this.UpdateToolCursor();
    this.mInfoPanelTimeSinceUpdate += a;
    1E3 < this.mInfoPanelTimeSinceUpdate && (this.mInfoPanelTimeSinceUpdate = 0, this.UpdateContextualInfo())
  });
simcity.cToolPaletteUIHandler.prototype.UpdateToolCursor = function () {
  this.mSelectedToolCursorKey && (!gUIManager.IsMouseInUI() && !this.mOverridingCursor) && (scrui.CursorManager.SetCursor(this.mSelectedToolCursorKey), this.mOverridingCursor = !0, simcity.gGlobalUIHandler.mBuildingRolloverManager && (simcity.gGlobalUIHandler.mBuildingRolloverManager.mRolloverUI.mRolloverCursorKey = null));
  gUIManager.IsMouseInUI() && this.mOverridingCursor && (scrui.CursorManager.SetCursor(null), this.mOverridingCursor = !1)
};
simcity.cToolPaletteUIHandler.prototype.GetParentAndSubCategoryIDs = function () {
  var a = this.mEditorCategory,
  b = null;
  !a && this.mSelectedCategoryButton && (a = this.mSelectedCategoryButton.mUserData, b = this.mSelectedSubCategoryButton ? this.mSelectedSubCategoryButton.mUserData : null);
  return [a, b]
};
simcity.cToolPaletteUIHandler.prototype.UpdateContextualInfo = function () {
  var a = !1,
  b = this.mNewContextualInfoContainer;
  if (this.mSelectedCategoryButton && b && !simcity.gGlobalUIHandler.mIsSpectatorMode) {
    var c = this.GetParentAndSubCategoryIDs(),
    d = c[0],
    e = simcity.gGlobalUIHandler.mCategoryQueryingHandler,
    f = e.mContextualInfo[d];
    f || (f = e.mContextualInfo[c[1]]);
    if (f && (a = f.showInfo && e.mShouldDisplayContextualInfo))
      this.mContextualInfoHeaderTextWin.textID !== f.headerTextID && (this.mContextualInfoHeaderTextWin.SetLocaleText(new scrui.cLocaleString(f.tableID,
            f.headerTextID), !0), this.mContextualInfoHeaderTextWin.textID = f.headerTextID), this.mContextualInfoBodyTextWin.textID !== f.bodyTextID && (f.hasOwnProperty("bodyTableID") ? this.mContextualInfoBodyTextWin.SetLocaleText(new scrui.cLocaleString(f.bodyTableID, f.bodyTextID), !0) : this.mContextualInfoBodyTextWin.SetLocaleText(new scrui.cLocaleString(f.tableID, f.bodyTextID), !0), this.mContextualInfoBodyTextWin.textID = f.bodyTextID), simcity.gGlobalUIHandler.mAlertsUIHandler.UpdateAlertItems(d, this.mNewAlertItemsContainer,
        !0)
  }
  b && b.SetVisibility(a)
};
simcity.SetCategoryButtonAlertLevelHelper = function (a) {
  var b = a.win,
  a = a.alertLevel;
  if (b && b.alertLevel !== a) {
    var c = simcity.gGlobalUIHandler.mToolPaletteUIHandler.mSelectedCategoryButton;
    if (a == simcity.kAlertLevelUnlock) {
      var d = b.mParentControl.FindControlByID(simcity.cToolPaletteUIHandler.kWinUnlockContainer);
      d && (d.SetVisibility(!0), a = simcity.kAlertLevelNormal)
    }
    b.buttonIconNormal && b.buttonIconNormal.SetVisibility(c !== b && a === simcity.kAlertLevelNormal);
    b.buttonIconNormalOn && b.buttonIconNormalOn.SetVisibility(c === b &&
      a === simcity.kAlertLevelNormal);
    b.buttonIconCaution && b.buttonIconCaution.SetVisibility(a === simcity.kAlertLevelCaution || a === simcity.kAlertLevelAlert);
    b.buttonIconCritical.SetVisibility(a === simcity.kAlertLevelCritical);
    if (b.buttonTextOn && b.buttonTextOff) {
      c = null;
      switch (a) {
      case simcity.kAlertLevelCaution:
      case simcity.kAlertLevelAlert:
        c = "rgb(222, 152, 0)";
        break;
      case simcity.kAlertLevelCritical:
        c = "rgb(207, 21, 21)"
      }
      b.buttonTextOn.SetTextColor(a === simcity.kAlertLevelNormal ? "white" : c);
      b.buttonTextOff.SetTextColor(a ===
        simcity.kAlertLevelNormal ? "rgb(38, 94, 148)" : c)
    }
    b.alertLevel = a
  }
};
simcity.cToolPaletteUIHandler.prototype.SetCategoryButtonAlertLevel = function (a, b) {
  a.alertLevel != b && simcity.gGlobalUIHandler.mBeatCountUpdates.push({
    callback : simcity.SetCategoryButtonAlertLevelHelper,
    win : a,
    alertLevel : b
  })
};
simcity.cToolPaletteUIHandler.prototype.UpdateAlert = function (a, b, c) {
  this.mPreviousAlertLevel.hasOwnProperty(a) || (this.mPreviousAlertLevel[a] = simcity.kAlertLevelNormal);
  this.mPreviousAlertLevel[a] !== b && (this.mPreviousAlertLevel[a] = b, simcity.AddTelemetry("SC_UI_CATEGORY_ALERT", 92, {
      category : a,
      level : b
    }));
  if (c) {
    if (this.mPanelLayout && this.mPanelLayout.mIsVisible && this.mSubCategoryBtnsContainer && this.mSubCategoryBtnsContainer.mChildren)
      for (var d = 0, c = this.mSubCategoryBtnsContainer.mChildren.length; d < c; ++d) {
        var e =
          this.mSubCategoryBtnsContainer.mChildren[d].button;
        if (e.mUserData === a) {
          this.SetCategoryButtonAlertLevel(e, b);
          break
        }
      }
  } else if (this.mCategoryButtonsMap.hasOwnProperty(a) && this.SetCategoryButtonAlertLevel(this.mCategoryButtonsMap[a], b), c = (e = this.mCategoryData.hasOwnProperty(a) && !this.mCategoryData[a].citySpecialization) ? this.mRootCategoryAlerts : this.mCitySpecializationCategoryAlerts, e = e ? simcity.gGlobalUIHandler.mReturnToCityButton : simcity.gGlobalUIHandler.mCitySpecializationButton, c[a] = b, a = b === simcity.kAlertLevelUnlock ?
      simcity.kAlertLevelNormal : b, a < simcity.kAlertLevelCritical) {
    for (d in c)
      if (b = c[d], b !== simcity.kAlertLevelUnlock && (a = Math.max(b, a), a === simcity.kAlertLevelCritical))
        break;
    this.SetCategoryButtonAlertLevel(e, a)
  }
};
simcity.cToolPaletteUIHandler.prototype.UnlockTool = function (a) {
  for (var b = 0, c = this.mToolButtons.length; b < c; ++b) {
    var d = this.mToolButtons[b];
    if (d.mUserData === a) {
      b = this.mToolUnlockInfoArray[a];
      scrui.Assert(b, "Didn't find unlock info for toolID " + a);
      this.SetToolButtonLockState(d, a, b, !1);
      simcity.SetBeatCountVisibility(d.mUnlockWindowContainer);
      break
    }
  }
};
simcity.cToolPaletteUIHandler.prototype.SetToolButtonLockStateHelper = function (a, b, c, d) {
  b.isLocked = c || d;
  var e = a.FindControlByID(simcity.cToolPaletteUIHandler.kWinToolLockIcon),
  f = a.FindControlByID(simcity.cToolPaletteUIHandler.kWinToolBetaLockIcon);
  a.SetIgnoreMouse(!1);
  c || d ? (a.SetOpacity(1), a.SetEnabled(!1), this.mHasLockedTool = !0) : (a.SetOpacity(1), a.SetEnabled(!0));
  var g = a.FindControlByID(247609107);
  g && g.SetVisibility(!1);
  (g = a.FindControlByID(246486429)) && g.SetVisibility(!1);
  if (void 0 != b.amountTowardsUpgrade &&
    void 0 != b.amountForUpgrade && -1 != b.amountTowardsUpgrade && -1 != b.amountForUpgrade)
    if (e && e.SetVisibility(!1), -1 == b.upgradeAvailable)
      (g = a.FindControlByID(247609107)) && g.SetVisibility(!1), (g = a.FindControlByID(246486429)) && g.SetVisibility(!1);
    else if (b.upgradeAvailable || b.amountTowardsUpgrade >= b.amountForUpgrade)
      (g = a.FindControlByID(247609107)) && g.SetVisibility(!0);
    else {
      if (b.amountTowardsUpgrade < b.amountForUpgrade && (g = a.FindControlByID(246486429))) {
        g.SetVisibility(!0);
        var h = a.FindControlByID(246485544);
        h.SetPosition(h.mLeft, h.mTop, g.mWidth * (b.amountTowardsUpgrade / b.amountForUpgrade), h.mHeight);
        this.mHasProgressBarTool = !0
      }
    }
  else
    e && e.SetVisibility(c);
  f && (e && d && e.SetVisibility(!1), f.SetVisibility(d));
  !0 === simcity.gGlobalUIHandler.mToyTaskPanelUIHandler.ToolHasAPicker(a.mUserData) && (c ? a.mUnlockWindowContainer.SetVisibility(!1) : simcity.SetBeatCountVisibility(a.mUnlockWindowContainer))
};
simcity.cToolPaletteUIHandler.prototype.SetToolButtonLockState = function (a, b, c, d) {
  if (simcity.gGlobalUIHandler.mIsDemo) {
    var e = this,
    b = scrui.BuildRequestQuery([simcity.kDataTools, b, simcity.kDataProperties, simcity.kPropToolDemoLocked]);
    scrui.RequestGameData([b], function (b) {
      e.SetToolButtonLockStateHelper(a, c, d, b[0] ? !0 : !1)
    })
  } else
    this.SetToolButtonLockStateHelper(a, c, d, !1)
};
simcity.cToolPaletteUIHandler.prototype.GetButtonFromToolID = function (a) {
  for (var b = this.mToolButtons.length, c = 0; c < b; ++c) {
    var d = this.mToolButtons[c];
    if (d.mUserData === a)
      return d
  }
  return null
};
simcity.cToolPaletteUIHandler.prototype.HandleGameEvent = function (a, b) {
  switch (a) {
  case simcity.kGameMessageToolSelected:
    this.mSelectedToolCursorKey = b.cursorKey.instance ? b.cursorKey : null;
    var c = this.GetButtonFromToolID(b.toolID);
    if (b.toolID === simcity.cToolPaletteUIHandler.kToolIDBulldozer && this.mEditorLayout.mIsVisible) {
      var d = this.mEditorLayout.FindControlByID(simcity.cToolPaletteUIHandler.kBtnBulldozer);
      d && (c = d)
    } else
      b.toolID === simcity.cToolPaletteUIHandler.kToolIDPathSelector && (d = this.mPanelLayout.FindControlByID(simcity.cToolPaletteUIHandler.kBtnRoadSelector)) &&
      (c = d);
    c && this.SetActiveToolButton(c);
    break;
  case simcity.kGameMessageToolDeselected:
    c = b.toolID;
    scrui.Assert(null === this.mSelectedToolButton || this.mSelectedToolButton.mUserData === c, "expecting a current button that matches the deselected tool!");
    this.mOverridingCursor && (scrui.CursorManager.SetCursor(null), this.mOverridingCursor = !1);
    this.SetActiveToolButton(null);
    this.mSelectedToolCursorKey = null;
    !this.mEditorIsOpen && (c === simcity.cToolPaletteUIHandler.kToolIDBulldozer && (!this.mSelectedCategoryButton ||
        this.mSelectedCategoryButton.mUserData === simcity.kCategoryIDDemolish)) && this.CloseToolPanel(!1, !0);
    break;
  case simcity.kGameMessageBeatCountChanged:
    if (2 <= this.mBeatCount && !1 == this.mHasProgressBarTool && !0 == this.mNeedsUpdated)
      this.mNeedsUpdated = !1, this.mBeatCount = 0;
    else if (!0 === this.mNeedsUpdated && !simcity.IsMainTutorialInProgress()) {
      this.mBeatCount += 1;
      var e = this.mToolButtons.length,
      f = this.mToolButtons;
      if (0 < e) {
        for (var d = Array(2 * e), g = 0, h = 0; g < e; ++g)
          c = f[g], c = c.mUserData, d[h++] = scrui.BuildRequestQuery([simcity.kDataTools,
                c, simcity.kDataToolCountUsed]), d[h++] = scrui.BuildRequestQuery([simcity.kDataTools, c, simcity.kDataToolInfo]);
        var i = this,
        j = [];
        scrui.RequestGameData(d, function (a) {
          for (var b = 0, c = 0; b < e; ++b, ++c)
            if (null != a[b]) {
              var d = f[b],
              g = a[c++],
              h = g.toolCountUsed,
              o = g.toolCountLimit,
              r = g.toolCountShared;
              if (g.toolModuleLimitIndex)
                if (0 === j.length) {
                  var s = {
                    moduleLimitIndex : g.toolModuleLimitIndex,
                    tools : [b],
                    currentCount : h,
                    limit : o
                  };
                  j.push(s)
                } else {
                  for (var s = !1, t = 0; t < j.length; t++)
                    if (j[t].moduleLimitIndex == g.toolModuleLimitIndex) {
                      j[t].tools.push(b);
                      j[t].currentCount += h;
                      s = !0;
                      break
                    }
                  s || (s = {
                      moduleLimitIndex : g.toolModuleLimitIndex,
                      tools : [b],
                      currentCount : h,
                      limit : o
                    }, j.push(s))
                }
              t = a[c];
              s = i.IsToolLockedByAchievement(t.achievementLock);
              r = t.isLocked || s || 0 < o && r >= o;
              o = d.mUserData;
              0 <= t.amountForUpgrade && (i.mToolUnlockInfoArray[o].amountForUpgrade = t.amountForUpgrade);
              0 <= t.amountTowardsUpgrade && (i.mToolUnlockInfoArray[o].amountTowardsUpgrade = t.amountTowardsUpgrade);
              i.mToolUnlockInfoArray[o].upgradeAvailable = t.upgradeAvailable;
              i.SetToolButtonLockState(d, o, i.mToolUnlockInfoArray[o],
                r);
              0 < h && h == g.toolIndividualLimit ? (h = d.FindControlByID(simcity.cToolPaletteUIHandler.kWinPaletteRolloverPlacedText), g = d.FindControlByID(simcity.cToolPaletteUIHandler.kWinPaletteRolloverLockedText), h && h.SetVisibility(!0), g && g.SetVisibility(!1), d.SetOpacity(0.5), d.SetEnabled(!1)) : ((h = d.FindControlByID(simcity.cToolPaletteUIHandler.kWinPaletteRolloverPlacedText)) && h.SetVisibility(!1), d.SetOpacity(1), r || d.SetEnabled(!0));
              i.mToolUnlockInfoArray[o].isLockedByAchievement = s
            }
          for (b = 0; b < j.length; b++)
            if (c = j[b],
              1 === c.tools.length) {
              if (h = 2 * c.tools[0], 1 != a[h].toolIsHQReliant && (d = f[c.tools[0]], 0 < c.limit && c.currentCount == c.limit && (h = d.FindControlByID(simcity.cToolPaletteUIHandler.kWinPaletteRolloverPlacedText), h.SetVisibility(!0), d.SetOpacity(0.5), d.SetEnabled(!1)), 1 !== c.limit))
                h = d.mParentControl.FindControlByID(simcity.cToolPaletteUIHandler.kWinModuleCount), h.SetVisibility(!0), t = d.mParentControl.FindControlByID(simcity.cToolPaletteUIHandler.kTxtModulesUsed), t.SetRawText(c.currentCount), t = d.mParentControl.FindControlByID(simcity.cToolPaletteUIHandler.kTxtModuleLimit),
                t.SetRawText(c.limit), h.SetPosition(22, h.mTop)
            } else
              for (g = 0; g < c.tools.length; g++) {
                d = f[c.tools[g]];
                0 < c.limit && c.currentCount == c.limit && (h = 2 * c.tools[g] + 1, !1 == a[h].isLocked && (h = d.FindControlByID(simcity.cToolPaletteUIHandler.kWinPaletteRolloverPlacedText), h.SetVisibility(!0), d.SetOpacity(0.5), d.SetEnabled(!1)));
                s = d.mParentControl.FindControlByID(simcity.cToolPaletteUIHandler.kWinLeftBracket);
                o = d.mParentControl.FindControlByID(simcity.cToolPaletteUIHandler.kWinRightBracket);
                r = d.mParentControl.FindControlByID(simcity.cToolPaletteUIHandler.kWinCenterBracket);
                h = d.mParentControl.FindControlByID(simcity.cToolPaletteUIHandler.kWinModuleCount);
                s.SetVisibility(!1);
                o.SetVisibility(!1);
                r.SetVisibility(!1);
                h.SetVisibility(!1);
                if (0 === g || 0 === c.tools[g] % i.mNumItemsPerPage)
                  t = d.mParentControl.FindControlByID(simcity.cToolPaletteUIHandler.kTxtModulesUsed), t.SetRawText(c.currentCount), t = d.mParentControl.FindControlByID(simcity.cToolPaletteUIHandler.kTxtModuleLimit), t.SetRawText(c.limit), h.SetVisibility(!0), h.SetPosition(35, h.mTop), d.mParentControl.FindControlByID(253646749).SetVisibility(!0);
                0 === g ? s.SetVisibility(!0) : g === c.tools.length - 1 ? o.SetVisibility(!0) : r.SetVisibility(!0)
              }
        })
      }
    } else
      this.mHasLockedTool && (this.mBeatCount += 1, 30 < this.mBeatCount && (this.mBeatCount = -2, this.mNeedsUpdated = !0));
    break;
  case simcity.kGameMessageUnitRuleUIEvent:
    if (b.eventID === simcity.kToyPlopped || b.eventID === simcity.kToyDestroyed)
      this.mNeedsUpdated = !0, this.mBeatCount = -2;
    break;
  case simcity.kMessageKeyTrigger:
    this.HandleTriggerKey(b.triggerCode)
  }
};
simcity.cToolPaletteUIHandler.prototype.SetCurrentRoadDrawType = function () {
  if (this.mLastUsedRoadControlID) {
    var a = this.mPanelLayout.FindControlByID(this.mLastUsedRoadControlID);
    a && a.SetSelected(!0)
  }
};
simcity.cToolPaletteUIHandler.prototype.HandleUIMessage = function (a, b, c) {
  switch (a) {
  case scrui.kMsgTypeButtonClicked:
    switch (b) {
    case simcity.cToolPaletteUIHandler.kBtnDrawCurvy:
      this.mEditorLayout.mIsVisible ? this.mLastEditorUsedRoadControlID = b : this.mLastUsedRoadControlID = b;
      c.SetSelected(!0);
      scrui.PostGameCommand(scrui.BuildCommand([simcity.kCommandRoadDrawType, simcity.cToolPaletteUIHandler.kRoadTypeCurvy]));
      break;
    case 248042660:
      0 != this.mCurrentLightLayer ? scrui.PostGameCommand(scrui.BuildCommand(["GotoNextEcoSetItem",
            this.mCurrentLightLayer, 200])) : this.mSelectedSubCategoryLayer && 0 != this.mSelectedSubCategoryLayer && scrui.PostGameCommand(scrui.BuildCommand(["GotoNextEcoSetItem", this.mSelectedSubCategoryLayer, 200]));
      break;
    case simcity.cToolPaletteUIHandler.kBtnDrawStraight:
      this.mEditorLayout.mIsVisible ? this.mLastEditorUsedRoadControlID = b : this.mLastUsedRoadControlID = b;
      c.SetSelected(!0);
      scrui.PostGameCommand(scrui.BuildCommand([simcity.kCommandRoadDrawType, simcity.cToolPaletteUIHandler.kRoadTypeStraight]));
      break;
    case simcity.cToolPaletteUIHandler.kBtnDrawGrid:
      this.mEditorLayout.mIsVisible ?
      this.mLastEditorUsedRoadControlID = b : this.mLastUsedRoadControlID = b;
      c.SetSelected(!0);
      scrui.PostGameCommand(scrui.BuildCommand([simcity.kCommandRoadDrawType, simcity.cToolPaletteUIHandler.kRoadTypeGrid]));
      break;
    case simcity.cToolPaletteUIHandler.kBtnDrawArc:
      this.mEditorLayout.mIsVisible ? this.mLastEditorUsedRoadControlID = b : this.mLastUsedRoadControlID = b;
      c.SetSelected(!0);
      scrui.PostGameCommand(scrui.BuildCommand([simcity.kCommandRoadDrawType, simcity.cToolPaletteUIHandler.kRoadTypeArc]));
      break;
    case simcity.cToolPaletteUIHandler.kBtnDrawCircle:
      this.mEditorLayout.mIsVisible ?
      this.mLastEditorUsedRoadControlID = b : this.mLastUsedRoadControlID = b;
      c.SetSelected(!0);
      scrui.PostGameCommand(scrui.BuildCommand([simcity.kCommandRoadDrawType, simcity.cToolPaletteUIHandler.kRoadTypeCircle]));
      break;
    case simcity.cToolPaletteUIHandler.kBtnToggleGuides:
      scrui.PostGameCommand(scrui.BuildCommand([simcity.kCommandSetAppProperty, simcity.cToolPaletteUIHandler.kOptionIDRoadGuides, c.mIsSelected ? 1 : 0]));
      break;
    case simcity.cToolPaletteUIHandler.kBtnRoadSelector:
      this.mSelectedToolButton === c ? (c.SetSelected(!1),
        scrui.PostGameCommand(scrui.BuildCommand([simcity.kDataDeselectTool]))) : (c.SetSelected(!0), scrui.PostGameCommand(scrui.BuildCommand([simcity.kDataSelectTool, simcity.cToolPaletteUIHandler.kToolIDPathSelector])));
      break;
    case simcity.cToolPaletteUIHandler.kBtnBulldozer:
      this.mSelectedToolButton === c ? scrui.PostGameCommand(scrui.BuildCommand([simcity.kDataDeselectTool])) : scrui.PostGameCommand(scrui.BuildCommand([simcity.kDataSelectTool, simcity.cToolPaletteUIHandler.kToolIDBulldozer]));
      break;
    case simcity.cToolPaletteUIHandler.kBtnClose:
      this.CloseToolPanel();
      break;
    case simcity.cToolPaletteUIHandler.kBtnGoToRegion:
      !simcity.IsTutorialInProgress() && 0 !== simcity.gGlobalUIHandler.GetBoxID() && (this.mEditorLayout.mIsVisible ? (this.mWaitingCategory = this.mEditorCategory, this.mRegionViewCounter = -350, this.CloseEditorPanel()) : simcity.gGlobalUIHandler.mRegionCameraButton.SetSelected(!0));
      break;
    case simcity.cToolPaletteUIHandler.kBtnGuideMe:
      this.mGuideMeWarningDialog && this.mGuideMeWarningDialog.DestroyControl();
      if (this.mSelectedCategoryButton && (b = this.mSelectedCategoryButton.mUserData,
          this.mSelectedSubCategoryButton && (b = this.mSelectedSubCategoryButton.mUserData), a = simcity.GetCitySpecializationDatabindingFromCategoryID(b)))
        if (a.specializationID == simcity.cCitySpecializationHandler.guidedSpecialization)
          simcity.cCitySpecializationHandler.SelectNewCitySpecializationGuide(simcity.Specializations.UnGuided);
        else if (this.mGuideMeWarningDialog = gUIManager.LoadAndCacheLayout("Layouts/DialogBoxes/GuideMeDialog.js", gUIManager.FindControlByID(simcity.kWinCityUIParent)))
          this.mGuideMeWarningDialog.SetVisibility(!0),
          c = this.mGuideMeWarningDialog.FindControlByID(simcity.cToolPaletteUIHandler.kGuideMeDescription), b = this.mGuideMeWarningDialog.FindControlByID(simcity.cToolPaletteUIHandler.kGuideMeTitle), a.nameString.LoadString(), a.descriptionString.LoadString(), b.UpdateLocaleText({
            Specialization_Title : a.nameString.mRawString
          }), c.SetLocaleText(a.descriptionString), a = c.GetTextHeight(), c = simcity.cCitySpecializationHandler.guidedSpecialization, c != simcity.Specializations.UnGuided ? (c = simcity.kSpecializationDataBindings[c],
            c.nameString.LoadString(), b = this.mGuideMeWarningDialog.FindControlByID(simcity.cToolPaletteUIHandler.kGuideMeCurrentText), b.SetVisibility(!0), b.UpdateLocaleText({
              Specialization_Title : c.nameString.mRawString
            }), a += 25, b.SetPosition(b.mLeft, a), a += b.GetTextHeight()) : (b = this.mGuideMeWarningDialog.FindControlByID(simcity.cToolPaletteUIHandler.kGuideMeCurrentText), b.SetVisibility(!1)), c = this.mGuideMeWarningDialog.FindControlByID(simcity.cToolPaletteUIHandler.kGuideMeTextWindow), c.SetPosition(c.mLeft, c.mTop,
            c.mWidth, a);
      break;
    case 250014817:
      this.mGuideMeWarningDialog.DestroyControl();
      (c = this.mPanelLayout.FindControlByID(simcity.cToolPaletteUIHandler.kBtnGuideMe)) && c.SetSelected(!1);
      break;
    case 250014816:
      this.mSelectedCategoryButton && (b = this.mSelectedCategoryButton.mUserData, this.mSelectedSubCategoryButton && (b = this.mSelectedSubCategoryButton.mUserData), a = simcity.GetCitySpecializationDatabindingFromCategoryID(b), c = this.mPanelLayout.FindControlByID(simcity.cToolPaletteUIHandler.kBtnGuideMe), a && c && c.mIsSelected ?
        simcity.cCitySpecializationHandler.SelectNewCitySpecializationGuide(a.specializationID) : simcity.cCitySpecializationHandler.SelectNewCitySpecializationGuide(simcity.Specializations.UnGuided), this.mGuideMeWarningDialog.DestroyControl());
      break;
    case simcity.kBtnIDCitySpecialization:
    case simcity.kBtnReturnToCity:
      if (c.mIsSelected) {
        a = simcity.gGlobalUIHandler.mRegionViewUIHandler.OnReturnToCityButtonClicked();
        c = this.mToolPanelOpen;
        this.mModeSwap = !0;
        this.CloseToolPanel();
        if (this.mCitySpecializationModeActive =
            b === simcity.kBtnIDCitySpecialization)
          this.LoadCitySpecialization();
        else if (this.mSelectedCategoryButton = null, this.mCitySpecializationContainer.mChildren) {
          simcity.gGlobalUIHandler.RemoveFromBeatUpdate(this.mCitySpecializationContainer);
          for (var d = 0, e = this.mCitySpecializationContainer.mChildren.length; d < e; ++d)
            b = this.mCitySpecializationContainer.mChildren[d].FindControlByID(simcity.cToolPaletteUIHandler.kBtnIDCategoryButton).mUserData, delete this.mCategoryButtonsMap[b];
          this.mCitySpecializationContainer.DestroyChildren()
        }
        (a ||
          !c || !a && 0 !== this.mCategoryToOpen) && this.SetCategoryToOpen();
        a && 0 === this.mCategoryToOpen && this.mPanelLayout && (this.mPanelLayout.SetVisibility(!1), (a = this.mPanelLayout.FindAnimationByID(simcity.cToolPaletteUIHandler.kAnimIDPanelRevealUp)) && a.Reset())
      } else
        c.SetSelected(!0)
    }
  }
};
simcity.cToolPaletteUIHandler.prototype.PrintDebugInfo = function () {
  simcity.DEBUG && (scrui.DebugPrint("cToolPaletteUIHandler"), scrui.DebugPrint("    mCategoryData = " + Object.keys(this.mCategoryData).length + ", mCategoryButtonsMap = " + Object.keys(this.mCategoryButtonsMap).length), scrui.DebugPrint("    mToolButtons = " + this.mToolButtons.length + ", mToolUnlockInfoArray = " + Object.keys(this.mToolUnlockInfoArray).length + ", mNewlyUnlocked = " + Object.keys(this.mNewlyUnlocked).length), scrui.DebugPrint("    mPreviousAlertLevel = " +
      (this.mPreviousAlertLevel ? Object.keys(this.mPreviousAlertLevel).length : 0)), scrui.DebugPrint("    mLayerButtons = " + this.mLayerButtons.length))
};
simcity.cToolPaletteUIHandler.prototype.HandleUnlock = function (a, b, c) {
  this.mNewlyUnlocked[a] = !0;
  for (var d = 0, e = b.length; d < e; ++d) {
    var f = this.GetButtonFromCategory(0 === c[d] ? b[d] : c[d]);
    f && (f = f.GetParentLayout().FindControlByID(simcity.cToolPaletteUIHandler.kWinUnlockContainer), simcity.SetBeatCountVisibility(f))
  }
  this.UnlockTool(a)
};
simcity.cToolPaletteUIHandler.prototype.UpdateRollover = function (a) {
  if (!this.mRolloverLayout.mIsVisible) {
    var b = this.mRolloverLayout.mParentControl,
    c = this.mRolloverButton.mUserData;
    this.mRolloverLayout.DestroyControl();
    this.mRolloverLayout = gUIManager.LoadAndCacheLayout("Layouts/PaletteRolloverPreview.js", b);
    a = !1;
    this.mRolloverLayout.SetVisibility(!1);
    this.mRolloverLayout.SetVisibility(!0);
    var d = this,
    e = simcity.kPaletteRolloverDataBindings,
    b = [],
    f = [];
    simcity.GenerateDataBindingQueries(e, b, {
      argumentList : [c]
    },
      f, a);
    if (0 < b.length) {
      var g = this;
      g.mRolloverLayout && simcity.RequestDataBindingData(b, e, f, a, function (b) {
        simcity.HandleDataBindingResults(b, g.mRolloverLayout, e, a);
        (b = g.mToolUnlockInfoArray[c]) && d.UpdateRolloverWindow(b.isLocked, b.isLockedByAchievement)
      })
    }
  }
};
simcity.cToolPaletteUIHandler.prototype.UpdateRolloverWindow = function (a, b) {
  var c = this.mRolloverLayout.FindControlByID(simcity.cToolPaletteUIHandler.kWinPaletteRolloverMarqueeImage),
  d = this.mRolloverLayout.FindControlByID(simcity.cToolPaletteUIHandler.kWinPaletteRolloverLockedBackground),
  e = this.mRolloverLayout.FindControlByID(simcity.cToolPaletteUIHandler.kWinPaletteRolloverMoreInfoContainer);
  b && (e.SetVisibility(!1), c.SetVisibility(!1));
  e.mIsVisible && (c.SetHeight(c.mHeight - e.mHeight), this.mRolloverLayout.SetHeight(this.mRolloverLayout.mHeight +
      e.mHeight), e.SetPosition(e.mLeft, d.mTop - e.mHeight));
  var e = this.mRolloverLayout.FindControlByID(simcity.cToolPaletteUIHandler.kTxtPaletteRolloverDescription),
  f = this.mRolloverLayout.FindControlByID(simcity.cToolPaletteUIHandler.kWinContainerRolloverDescription),
  g = this.mRolloverLayout.FindControlByID(simcity.cToolPaletteUIHandler.kWinPaletteRolloverLockedIcon),
  h = e.GetTextHeight(),
  i = d.mHeight;
  c.SetHeight(c.mHeight - i);
  e.SetHeight(h);
  f.SetHeight(h);
  g.SetVisibility(a);
  c = this.mRolloverLayout.mHeight + i;
  if (b)
    if (0 !=
      d.mHeight)
      c = d.mHeight + 30;
    else {
      this.mRolloverLayout.SetVisibility(!1);
      return
    }
  d = this.mRolloverButton.GetAbsolutePosition();
  e = this.mRolloverLayout.mWidth;
  f = d[0];
  g = scrui.GetClientWidth();
  f + e > g && (f -= f + e - g, (h = this.mRolloverLayout.FindControlByID(231594633)) && f && h.SetPosition(h.mLeft + (d[0] + e - g), h.mTop));
  this.mRolloverLayout.SetPosition(f, d[1] - c - 5, this.mRolloverLayout.mWidth, c)
};
simcity.cToolPaletteUIHandler.prototype.ClearPanel = function () {
  if (this.mPanelLayout) {
    var a = void 0;
    this.mHasRoadTool && (a = this.mPanelLayout.FindControlByID(simcity.cToolPaletteUIHandler.kWinIDRoadToolButtonContainer));
    if (!1 === this.mHasRoadTool || null == a | void 0 == a)
      a = this.mPanelLayout.FindControlByID(simcity.cToolPaletteUIHandler.kWinIDPalettePanel);
    a && (simcity.gGlobalUIHandler.RemoveFromBeatUpdate(a), a.DestroyChildren());
    this.mToolButtons = [];
    this.mToolUnlockInfoArray = {};
    this.mSelectedToolButton = null;
    this.mAlertsContainer &&
    this.mAlertsContainer.SetVisibility(!1)
  }
};
simcity.cToolPaletteUIHandler.prototype.LoadRootToolPanel = function (a) {
  var b = this;
  if (a.instance == simcity.kCategoryIDZones) {
    var c = scrui.BuildRequestQuery([simcity.kDataSelectedTool, simcity.kDataToolID]);
    scrui.RequestGameData([c], function (c) {
      b.LoadPaletteZones(a, c[0]);
      b.LoadInfoPanel(a)
    });
    -1 !== b.mKeyShortcutIx && b.mPanelLayout.FindAnimationByID(simcity.cToolPaletteUIHandler.kAnimIDPanelRevealUp).RegisterEventCallback(scrui.cAnimation.kEventStopped, simcity.ForceRCIActive);
    simcity.gGlobalUIHandler.mIsSpectatorMode &&
    (b.mPanelLayout.FindControlByID(238522843).SetVisibility(!1), b.mPanelLayout.FindControlByID(238001564).SetVisibility(!1), b.mPanelLayout.FindControlByID(238001568).SetVisibility(!1), b.mPanelLayout.FindControlByID(238001572).SetVisibility(!1))
  } else {
    c = scrui.RequestStringFromKey(a);
    c = scrui.BuildRequestQuery([simcity.kDataProperties, c, simcity.kPropToolCategoryGroupID]);
    scrui.RequestGameData([c], function (c) {
      c = c[0];
      null === c ? (b.mSubCategoryGroupID = 0, b.LoadToolPanel(a, function () {
          b.LoadInfoPanel(a)
        })) : (b.mSubCategoryGroupID =
          c, b.LoadSubCategoriesToolPanel(a, c, b.mCategoryData[b.mSelectedCategoryButton.mUserData].lastSubCategorySelected));
      scrui.PostGameCommand(scrui.BuildCommand([simcity.kDataDeselectTool]));
      simcity.gGlobalUIHandler.mIsSpectatorMode && (b.mPanelLayout.FindControlByID(simcity.cToolPaletteUIHandler.kWinIDPagingSystemContainer) && b.mPanelLayout.FindControlByID(simcity.cToolPaletteUIHandler.kWinIDPagingSystemContainer).SetVisibility(!1), b.mPanelLayout.FindControlByID(239887022) && b.mPanelLayout.FindControlByID(239887022).SetVisibility(!1),
        b.mPanelLayout.FindControlByID(simcity.cToolPaletteUIHandler.kWinRoadButtonContainer) && b.mPanelLayout.FindControlByID(simcity.cToolPaletteUIHandler.kWinRoadButtonContainer).SetVisibility(!1), b.mPanelLayout.FindControlByID(simcity.cToolPaletteUIHandler.kBtnToggleGuides) && b.mPanelLayout.FindControlByID(simcity.cToolPaletteUIHandler.kBtnToggleGuides).SetVisibility(!1));
      b.SetCurrentRoadDrawType();
      (c = b.mPanelLayout.FindControlByID(simcity.cToolPaletteUIHandler.kBtnRoadSelector)) && c.SetSelected(!1)
    });
    var d =
      b.mPanelLayout.FindControlByID(simcity.cToolPaletteUIHandler.kBtnToggleGuides);
    d && (c = [scrui.BuildRequestQuery([simcity.kDataAppProperties, simcity.cToolPaletteUIHandler.kOptionIDRoadGuides])], scrui.RequestGameData(c, function (a) {
        d.SetSelected(a[0])
      }));
    this.mNeedsUpdated = !0;
    this.mBeatCount = -5;
    this.mHasLockedTool = this.mHasProgressBarTool = !1
  }
};
simcity.cToolPaletteUIHandler.prototype.LoadSubCategoriesToolPanel = function (a, b, c) {
  var d = gUIManager.FindAnimationByID(simcity.cToolPaletteUIHandler.kWinLegendShift);
  d && d.Start(scrui.cAnimation.kPlayForward);
  this.mIsLegendShifted = !0;
  var e = this,
  a = scrui.RequestStringFromKey(a),
  a = scrui.BuildRequestQuery([simcity.kDataProperties, a, simcity.kPropToolCategoryPaletteLayout]),
  b = scrui.BuildRequestQuery([simcity.kDataResourceKeys, scrui.kResourceTypePropertyList, b]);
  scrui.RequestGameData([a, b], function (a) {
    var b =
      a[1],
    d = b.length;
    e.LoadPalettePanelHelper(a[0]);
    e.ClearPanel();
    var i = new simcity.cKey;
    i.group = e.mSubCategoryGroupID;
    i.instance = c;
    var j = e.mSubCategoryBtnsContainer.mParentControl;
    if (e.mSubCategoryBtnsContainer.mChildren)
      e.LoadTools(i, !1);
    else {
      for (var a = Array(2 * d), k = 0; k < d; ++k) {
        var l = scrui.RequestStringFromKey(b[k]);
        a[2 * k] = scrui.BuildRequestQuery([simcity.kDataProperties, l, simcity.kPropToolCategoryName]);
        a[2 * k + 1] = scrui.BuildRequestQuery([simcity.kDataProperties, l, simcity.kPropToolCategoryOrder])
      }
      scrui.RequestGameData(a,
        function (a) {
        for (var f = 0; f < d; ++f) {
          var l = a[2 * f],
          k = a[2 * f + 1] || f,
          o = b[f].instance,
          r = gUIManager.LoadAndCacheLayout("Layouts/Palette/PaletteSubCategoryButton.js", e.mSubCategoryBtnsContainer),
          s = r.mWidth * d - 2;
          j.mWidth !== j && j.SetWidth(s);
          r.SetPosition((k - 1) * r.mWidth, 0, r.mWidth, r.mHeight);
          s = r.FindControlByID(simcity.cToolPaletteUIHandler.kBtnSubCategory);
          s.mUserData = o;
          r.button = s;
          0 === c && 1 === k && (c = o, e.mCategoryData[e.mSelectedCategoryButton.mUserData].lastSubCategorySelected = o, i.instance = c);
          c === o && (s.SetSelected(!0),
            e.mSelectedSubCategoryButton = s);
          l = scrui.LocaleStringFromLocaleProperty(l);
          s.buttonTextOn = r.FindControlByID(simcity.cToolPaletteUIHandler.kTxtCategoryTextOn);
          s.buttonTextOff = r.FindControlByID(simcity.cToolPaletteUIHandler.kTxtCategoryTextOff);
          s.buttonTextOn.SetLocaleText(l);
          s.buttonTextOff.SetLocaleText(l);
          s.buttonIconCritical = r.FindControlByID(simcity.cToolPaletteUIHandler.kWinIDCategoryIconCritical);
          s.alertLevel = simcity.kAlertLevelNormal
        }
        e.LoadTools(i, !1)
      })
    }
  });
  this.mNeedsUpdated = !0;
  this.mBeatCount =
    -2
};
simcity.OnToolPanelClosed = function (a) {
  var b = simcity.gGlobalUIHandler.mToolPaletteUIHandler;
  b.mModeSwap && a.animation.mPlayDirection === scrui.cAnimation.kPlayReverse && b.SetCategoryToOpen()
};
simcity.cToolPaletteUIHandler.prototype.SetCategoryToOpen = function () {
  this.mCategoryToOpen = this.mCitySpecializationModeActive ? this.mLastSelectedCitySpecializationID : this.mLastSelectedMainCategoryID
};
simcity.cToolPaletteUIHandler.prototype.LoadPalettePanelHelper = function (a) {
  if (!simcity.CompareKeys(a, this.mPanelLayoutKey)) {
    this.mPanelLayout && (this.ClearInfoPanel(), simcity.gGlobalUIHandler.RemoveFromBeatUpdate(this.mPanelLayout), this.mPanelLayout.DestroyControl());
    this.mPanelLayout = gUIManager.LoadAndCacheLayout(scrui.PathFromResourceKey(a), this.mPanelContainer);
    this.mPanelLayout.SetVisibility(!1);
    this.mInfoContainer = this.mPanelLayout.FindControlByID(simcity.cToolPaletteUIHandler.kWinInfoContainer);
    this.mSimIconWindow = this.mPanelLayout.FindControlByID(simcity.cToolPaletteUIHandler.kWinSimIconWindow);
    this.mHelpText = this.mPanelLayout.FindControlByID(simcity.cToolPaletteUIHandler.kTxtHelpInfo);
    this.mSubCategoryBtnsContainer = this.mPanelLayout.FindControlByID(simcity.cToolPaletteUIHandler.kWinSubCategoryBtnsContainer);
    var b = this.mPanelLayout.FindAnimationByID(simcity.cToolPaletteUIHandler.kAnimIDPanelRevealUp);
    b && b.RegisterEventCallback(scrui.cAnimation.kEventStopped, simcity.OnToolPanelClosed);
    this.mPagingSystemContainer =
      this.mPanelLayout.FindControlByID(simcity.cToolPaletteUIHandler.kWinIDPagingSystemContainer);
    this.mPanelLayoutKey = a
  }
  this.mPanelLayout.SetVisibility(!0);
  this.mSelectedCategoryButton.mUserData === simcity.kCategoryIDDemolish && (a = this.mPanelLayout.FindControlByID(250601161), simcity.AutoSizeHelpText(a));
  (a = this.mPanelLayout.FindControlByID(215780043)) && a.SetVisibility(0 !== this.mSubCategoryGroupID)
};
simcity.kCitySpecializationGroupID = 204049373;
simcity.kGetCitySpecialziationCategories = [scrui.BuildRequestQuery([simcity.kDataResourceKeys, scrui.kResourceTypePropertyList, simcity.kCitySpecializationGroupID])];
simcity.cToolPaletteUIHandler.prototype.LoadCitySpecialization = function () {
  if (this.mCitySpecializationContainer && !this.mCitySpecializationContainer.mChildren) {
    var a = this;
    scrui.RequestGameData(simcity.kGetCitySpecialziationCategories, function (b) {
      for (var c = b[0], d = c.length, b = Array(4 * d), e = 0; e < d; ++e) {
        var f = c[e];
        f.group = simcity.kCitySpecializationGroupID;
        f = scrui.RequestStringFromKey(f);
        b[4 * e] = scrui.BuildRequestQuery([simcity.kDataProperties, f, simcity.kPropToolCategoryName]);
        b[4 * e + 1] = scrui.BuildRequestQuery([simcity.kDataProperties,
              f, simcity.kPropToolCategoryIconKeys]);
        b[4 * e + 2] = scrui.BuildRequestQuery([simcity.kDataProperties, f, simcity.kPropToolCategoryLayerKey]);
        b[4 * e + 3] = scrui.BuildRequestQuery([simcity.kDataProperties, f, simcity.kPropToolCategoryOrder])
      }
      scrui.RequestGameData(b, function (b) {
        for (var e = [], f = 0; f < d; ++f) {
          for (var j = b[4 * f + 3], k = !1, l = 0, m = e.length; l < m; ++l)
            if (j < e[l]) {
              e.splice(l, 0, j);
              k = !0;
              break
            }
          k || e.push(j)
        }
        for (f = 0; f < d; ++f) {
          var n = gUIManager.LoadAndCacheLayout("Layouts/Palette/CategoryButtonWithIcon2.js", a.mCitySpecializationContainer),
          k = n.FindControlByID(simcity.cToolPaletteUIHandler.kBtnIDCategoryButton),
          l = c[f].instance,
          p = b[4 * f],
          q = b[4 * f + 1],
          m = b[4 * f + 2],
          j = b[4 * f + 3];
          n.SetPosition(e.indexOf(j) * n.mWidth, 0);
          k.mUserData = l;
          k.mCitySpecialization = !0;
          simcity.SetTooltipHelper(n, p);
          simcity.SetupCategoryButton(k, n);
          null !== q && (k.buttonIconNormal.SetWindowImage(scrui.PathFromResourceKey(q[0])), k.buttonIconCaution.SetWindowImage(scrui.PathFromResourceKey(q[1])), k.buttonIconCritical.SetWindowImage(scrui.PathFromResourceKey(q[3])), j = q[4] ? scrui.PathFromResourceKey(q[4]) :
              scrui.PathFromResourceKey(q[0]), k.buttonIconNormalOn.SetWindowImage(j));
          a.mCategoryData[l] = {
            layer : m,
            lastSubCategorySelected : 0,
            citySpecialization : !0
          };
          a.mCategoryButtonsMap[l] = k;
          a.mCitySpecializationCategoryAlerts.hasOwnProperty(l) && simcity.SetCategoryButtonAlertLevelHelper({
            win : k,
            alertLevel : a.mCitySpecializationCategoryAlerts[l]
          })
        }
      })
    })
  }
};
simcity.cToolPaletteUIHandler.prototype.GetPanelLayout = function () {
  return this.mEditorLayout.mIsVisible ? this.mEditorLayout : this.mPanelLayout
};
simcity.cToolPaletteUIHandler.prototype.IsToolLockedByAchievement = function (a) {
  return a ? !simcity.gGlobalUIHandler.mAchievementManager.IsUnlocked(a.instance) : !1
};
simcity.cToolPaletteUIHandler.prototype.GuideMeHelper = function () {
  if (this.mPanelLayout) {
    var a = this.mPanelLayout.FindControlByID(247924457);
    a && a.SetVisibility(!1);
    if (this.mSelectedCategoryButton) {
      var b = this.mSelectedCategoryButton.mUserData;
      this.mSelectedSubCategoryButton && (b = this.mSelectedSubCategoryButton.mUserData);
      if ((b = simcity.GetCitySpecializationDatabindingFromCategoryID(b)) && simcity.ResourcesExistForSpecialization(b.specializationID) && a) {
        a.SetVisibility(!0);
        var c = a.FindControlByID(simcity.cToolPaletteUIHandler.kBtnGuideMe);
        c && (b.specializationID == simcity.cCitySpecializationHandler.guidedSpecialization ? (c.SetSelected(!0), a.SetVisibility(!0)) : c.SetSelected(!1))
      }
    }
  }
};
simcity.cToolPaletteUIHandler.prototype.LoadToolsHelper = function (a, b) {
  var c = this;
  c.GuideMeHelper();
  for (var d = b.length, e = Array(d), f = 0; f < d; ++f)
    e[f] = scrui.BuildRequestQuery([simcity.kDataTools, b[f].instance, simcity.kDataToolInfo]);
  c.ClearPanel();
  var g = c.GetPanelLayout();
  if (0 < e.length) {
    var h = g.FindControlByID(simcity.cToolPaletteUIHandler.kWinIDPalettePanel);
    simcity.gGlobalUIHandler.RemoveFromBeatUpdate(h);
    h.DestroyChildren();
    var i = h.mParentControl;
    scrui.RequestGameData(e, function (e) {
      c.mToolButtons = Array(d);
      c.mToolUnlockInfoArray = {};
      var f = 0;
      c.mHasRoadTool = !1;
      for (var j = 0; j < d; ++j) {
        var k = e[j];
        !1 == c.mHasRoadTool && (c.mHasRoadTool = k.isRoadTool)
      }
      j = g.FindControlByID(simcity.cToolPaletteUIHandler.kWinIDNonRoadToolContainer);
      if (void 0 == j || null == j)
        j = g.FindControlByID(simcity.cToolPaletteUIHandler.kWinIDPagingSystemContainer);
      if (j)
        if (c.mHasRoadTool) {
          if (k = g.FindControlByID(simcity.cToolPaletteUIHandler.kWinIDRoadToolButtonContainer))
            h = k, h.DestroyChildren(), i = h.mParentControl, j.SetVisibility(!1), (k = g.FindControlByID(simcity.cToolPaletteUIHandler.kWinIDRoadToolContainer)) &&
            k.SetVisibility(!0)
        } else (k = g.FindControlByID(simcity.cToolPaletteUIHandler.kWinIDRoadToolButtonContainer)) && k.DestroyChildren(), j.SetVisibility(!0), (j = g.FindControlByID(simcity.cToolPaletteUIHandler.kWinIDRoadToolContainer)) && j.SetVisibility(!1);
      (j = g.FindControlByID(simcity.cToolPaletteUIHandler.kWinRoadButtonContainer)) && (!0 == c.mHasRoadTool && !1 == j.mIsVisible ? j.SetVisibility(!0) : !1 == c.mHasRoadTool && !0 == j.mIsVisible && j.SetVisibility(!1));
      for (var q = j = 0; j < d; ++j) {
        var k = e[j],
        o = b[j].instance;
        c.mToolUnlockInfoArray[o] = {
          isLocked : k ? k.isLocked : !0,
          achievementLock : k ? k.achievementLock : null
        };
        if (k && k.shouldDisplay) {
          var f = gUIManager.LoadAndCacheLayout("Layouts/Palette/BuildingItemUI.js", h),
          r = Math.floor(i.mWidth / f.mWidth);
          c.mNumItemsPerPage = r;
          var s = Math.floor(q / r);
          f.SetPosition(q % r * f.mWidth + s * i.mWidth, h.mHeight - f.mHeight, f.mWidth, f.mHeight);
          f.SetVisibility(q < r);
          r = f.FindControlByID(simcity.cToolPaletteUIHandler.kBtnIDSelectTool);
          r.mUserData = o;
          f.FindControlByID(247609078).mUserData = o;
          var t = r.FindControlByID(simcity.cToolPaletteUIHandler.kWinIDToolIcon);
          t.SetWindowImage(scrui.PathFromResourceKey(k.iconKey));
          r.mUnlockWindowContainer = f.FindControlByID(simcity.cToolPaletteUIHandler.kWinUnlockContainer);
          r.mMouseOverAnim = f.FindAnimationByID(245429366);
          c.mToolButtons[q] = r;
          o === a && (r.SetSelected(!0), c.mSelectedToolButton = r);
          f = s + 1;
          (s = c.IsToolLockedByAchievement(k.achievementLock)) && t.SetWindowImage(scrui.PathFromResourceKey(k.lockedIconKey));
          c.SetToolButtonLockState(r, o, c.mToolUnlockInfoArray[o], k.isLocked || s);
          c.mToolUnlockInfoArray[o].isLockedByAchievement =
            s;
          void 0 != k.amountForUpgrade && (c.mToolUnlockInfoArray[o].amountForUpgrade = k.amountForUpgrade);
          void 0 != k.amountTowardsUpgrade && (c.mToolUnlockInfoArray[o].amountTowardsUpgrade = k.amountTowardsUpgrade);
          c.mNewlyUnlocked.hasOwnProperty(o) && simcity.SetBeatCountVisibility(r.mUnlockWindowContainer);
          ++q
        }
      }
      c.mToolButtons.length = q;
      c.mPageIndex = 0;
      c.mNumTotalPages = f;
      h.SetPosition(0, 0, i.mWidth * f, h.mHeight);
      c.UpdateScrollButtons()
    })
  }
  if ((e = g.FindControlByID(239814192)) && e.GetAbsoluteVisibility())
    for (var j = 0, j = this.mEditorLayout.mIsVisible ?
        this.mLastEditorUsedRoadControlID : this.mLastUsedRoadControlID, f = 0; 6 > f; f++) {
      var k = e.FindControlByID(238502129 + f);
      k && (0 == j || j == 238502129 + f ? (j = k.GetAbsolutePosition(), k.Private_OnClick(j[0], j[1]), j = 1) : k.SetSelected(!1))
    }
};
simcity.cToolPaletteUIHandler.prototype.LoadPaletteZones = function (a, b) {
  var c = scrui.RequestStringFromKey(a),
  c = scrui.BuildRequestQuery([simcity.kDataProperties, c, simcity.kPropToolCategoryPaletteLayout]),
  d = this;
  scrui.RequestGameData([c], function (a) {
    a = a[0];
    if (!simcity.CompareKeys(a, d.mPanelLayoutKey)) {
      d.mPanelLayout && (d.ClearInfoPanel(), simcity.gGlobalUIHandler.RemoveFromBeatUpdate(d.mPanelLayout), d.mPanelLayout.DestroyControl());
      d.mPanelLayout = gUIManager.LoadAndCacheLayout(scrui.PathFromResourceKey(a),
          d.mPanelContainer);
      d.mPanelLayout.SetVisibility(!1);
      d.mInfoContainer = d.mPanelLayout.FindControlByID(simcity.cToolPaletteUIHandler.kWinInfoContainer);
      d.mSimIconWindow = d.mPanelLayout.FindControlByID(simcity.cToolPaletteUIHandler.kWinSimIconWindow);
      d.mHelpText = d.mPanelLayout.FindControlByID(simcity.cToolPaletteUIHandler.kTxtHelpInfo);
      d.mSubCategoryBtnsContainer = null;
      var c = d.mPanelLayout.FindAnimationByID(simcity.cToolPaletteUIHandler.kAnimIDPanelRevealUp);
      c && c.RegisterEventCallback(scrui.cAnimation.kEventStopped,
        simcity.OnToolPanelClosed);
      d.mPagingSystemContainer = d.mPanelLayout.FindControlByID(simcity.cToolPaletteUIHandler.kWinIDPagingSystemContainer);
      d.mPanelLayoutKey = a
    }
    d.mPanelLayout.SetVisibility(!0);
    a = [250601161, 250601183, 250602352];
    for (c = 0; c < a.length; c++) {
      var g = d.mPanelLayout.FindControlByID(a[c]);
      simcity.AutoSizeHelpText(g)
    }
    d.ClearPanel();
    for (var a = Array(h), c = [238522843, 238264762, 238265268, 238265630], h = c.length, g = 0; g < h; g++) {
      var i = d.mPanelLayout.FindControlByID(c[g]),
      j = i.FindControlByID(simcity.cToolPaletteUIHandler.kBtnIDSelectTool);
      d.mToolButtons[g] = j;
      d.mToolButtons[g].mUnlockWindowContainer = i.FindControlByID(simcity.cToolPaletteUIHandler.kWinUnlockContainer);
      a[g] = scrui.BuildRequestQuery([simcity.kDataTools, j.mUserData, simcity.kDataToolInfo])
    }
    scrui.RequestGameData(a, function (a) {
      d.mToolUnlockInfoArray = {};
      for (var c = 0; c < h; ++c) {
        var e = d.mToolButtons[c],
        f = e.mUserData,
        g = a[c];
        d.mToolUnlockInfoArray[f] = {
          isLocked : g ? g.isLocked : !0
        };
        g && g.shouldDisplay && (f === b && (e.SetSelected(!0), d.mSelectedToolButton = e), d.SetToolButtonLockState(e, f, d.mToolUnlockInfoArray[f],
            g.isLocked), d.mNewlyUnlocked.hasOwnProperty(f) && simcity.SetBeatCountVisibility(e.mUnlockWindowContainer))
      }
      scrui.PostGameCommand(scrui.BuildCommand([simcity.kDataDeselectTool]))
    })
  })
};
simcity.cToolPaletteUIHandler.prototype.SetBuildingItemVisibilityForCurrentPage = function (a) {
  var b = this.GetPanelLayout(),
  c = void 0;
  this.mHasRoadTool && (c = b.FindControlByID(simcity.cToolPaletteUIHandler.kWinIDRoadToolButtonContainer));
  if (!1 === this.mHasRoadTool || null == c | void 0 == c)
    c = b.FindControlByID(simcity.cToolPaletteUIHandler.kWinIDPalettePanel);
  if (c.mChildren)
    for (var b = this.mPageIndex * this.mNumItemsPerPage, d = Math.min(c.mChildren.length, (this.mPageIndex + 1) * this.mNumItemsPerPage); b < d; ++b)
      c.mChildren[b].SetVisibility(a)
};
simcity.cToolPaletteUIHandler.prototype.UpdateScrollButtons = function () {
  var a = this.GetPanelLayout(),
  b = a.FindControlByID(simcity.cToolPaletteUIHandler.kBtnIDPageLeft),
  c = a.FindControlByID(simcity.cToolPaletteUIHandler.kBtnIDPageRight),
  d = a.FindControlByID(simcity.cToolPaletteUIHandler.kBtnIDRoadToolPageLeft),
  a = a.FindControlByID(simcity.cToolPaletteUIHandler.kBtnIDRoadToolPageRight);
  b.SetVisibility(0 < this.mPageIndex);
  c.SetVisibility(this.mPageIndex + 1 < this.mNumTotalPages);
  d && a && (d.SetVisibility(0 < this.mPageIndex),
    a.SetVisibility(this.mPageIndex + 1 < this.mNumTotalPages))
};
simcity.cToolPaletteUIHandler.prototype.HandleToolSelection = function (a) {
  var b = a.mUserData,
  c = this.mToolUnlockInfoArray[b];
  a.mIsSelected && c.isLocked ? a.SetSelected(!1) : !0 === a.mIsSelected ? scrui.PostGameCommand(scrui.BuildCommand([simcity.kDataSelectTool, b])) : scrui.PostGameCommand(scrui.BuildCommand([simcity.kDataDeselectTool]))
};
simcity.cToolPaletteUIHandler.prototype.LoadToolPanel = function (a, b) {
  this.mIsSubPanel = !1;
  var c = scrui.RequestStringFromKey(a),
  d = scrui.BuildRequestQuery([simcity.kDataSelectedTool, simcity.kDataToolID]),
  c = scrui.BuildRequestQuery([simcity.kDataProperties, c, simcity.kPropToolCategoryPaletteLayout]),
  e = scrui.BuildRequestQuery([simcity.kDataUIToolCategory, a.instance, simcity.kPropToolCategoryToolList]),
  f = scrui.BuildRequestQuery([simcity.kDataSelectedTool, simcity.kDataCursorKey]),
  g = this;
  scrui.RequestGameData([d,
      c, f, e], function (a) {
    var c = a[0],
    d = a[1];
    g.mSelectedToolCursorKey = a[2] && a[2].instance ? a[2] : null;
    a = a[3] ? a[3] : [];
    0 < a.length && (g.mToolKeys = a);
    g.LoadPalettePanelHelper(d);
    g.LoadToolsHelper(c, a);
    b && b()
  })
};
simcity.cToolPaletteUIHandler.prototype.LoadTools = function (a) {
  this.mIsSubPanel = !0;
  var b = this,
  c = scrui.RequestStringFromKey(a),
  d = scrui.BuildRequestQuery([simcity.kDataSelectedTool, simcity.kDataToolID]),
  c = scrui.BuildRequestQuery([simcity.kDataProperties, c, simcity.kPropToolCategoryLayerKey]),
  e = scrui.BuildRequestQuery([simcity.kDataUIToolCategory, a.instance, simcity.kPropToolCategoryToolList]);
  scrui.RequestGameData([d, c, e], function (c) {
    if (null !== b.mSelectedSubCategoryLayer)
      scrui.PostGameCommand(scrui.BuildCommand([simcity.kCommandToggleLayer,
            b.mSelectedSubCategoryLayer, !1]));
    else {
      var d = b.mCategoryData[b.mSelectedCategoryButton.mUserData].layer;
      null !== d && scrui.PostGameCommand(scrui.BuildCommand([simcity.kCommandToggleLayer, d.instance, !1]))
    }
    d = c[0];
    b.mSelectedSubCategoryLayer = c[1] ? c[1].instance : null;
    c = c[2] ? c[2] : [];
    null !== b.mSelectedSubCategoryLayer && scrui.PostGameCommand(scrui.BuildCommand([simcity.kCommandToggleLayer, b.mSelectedSubCategoryLayer, !0]));
    b.LoadToolsHelper(d, c);
    b.LoadInfoPanel(a);
    b.mNeedsUpdated = !0;
    b.mBeatCount = -2
  });
  this.mNeedsUpdated =
    !0;
  this.mBeatCount = -2
};
simcity.cToolPaletteUIHandler.prototype.ClearInfoPanel = function () {
  if (this.mInfoLayout) {
    var a = this.mInfoLayout.FindControlByID(simcity.cToolPaletteUIHandler.kWinIDLayerToggleContainer);
    if (a && a.mChildren)
      for (var b = a.mChildren.length, c = 0; c < b; ++c) {
        var d = a.mChildren[c].FindControlByID(simcity.cLayerUIHandler.kBtnLayerToggleID);
        d || a.mChildren[c].FindControlByID(186685937);
        scrui.Assert(null !== d, "Invalid control structure found in layer buttons!");
        null !== d && this.mLayerUIHandler.UnregisterLayerButton(d)
      }
    this.mInfoLayout.DestroyControl()
  }
  this.mInfoLayout = null;
  this.mNewAlertItemsContainer && (this.mNewAlertItemsContainer.DestroyChildren(), this.mNewAlertItemsContainer = null);
  this.mContextualInfoBodyTextWin = this.mContextualInfoHeaderTextWin = this.mNewContextualInfoContainer = null;
  for (a = this.mLayerButtons.length - 1; 0 <= a; a--)
    this.mLayerUIHandler.UnregisterLayerButton(this.mLayerButtons[a]), this.mLayerButtons[a].DestroyControl();
  this.mLayerButtons = []
};
simcity.cToolPaletteUIHandler.prototype.LoadInfoPanel = function (a) {
  this.ClearInfoPanel();
  var b = this,
  c = this.mEditorLayout.mIsVisible,
  d = simcity.GetCategoryInfo(c ? a.instance : this.mSelectedCategoryButton.mUserData, c ? null : a.instance);
  if (d) {
    var e = c ? this.mEditorLayout.FindControlByID(simcity.cToolPaletteUIHandler.kWinInfoContainer) : this.mInfoContainer.FindControlByID(247767080);
    this.mInfoLayout = gUIManager.LoadAndCacheLayout(d.categoryInfoLayout, e);
    if (c)
      this.mCategoryName = this.mEditorLayout.FindControlByID(simcity.cToolPaletteUIHandler.kTxtCategoryName),
      simcity.ForceUpdateCategory(a.instance, c);
    else {
      this.mCategoryName = this.mPanelLayout.FindControlByID(simcity.cToolPaletteUIHandler.kTxtCategoryName);
      simcity.ForceUpdateCategory(a.instance, !0);
      this.mSimIconWindow && (e = d.hasOwnProperty("simIcon"), this.mSimIconWindow.SetVisibility(e), e && this.mSimIconWindow.SetWindowImage(scrui.DecimalToHex(d.simIcon) + ".png"));
      this.mHelpText && d.hasOwnProperty("helpText") && (this.mHelpText.SetLocaleText(new scrui.cLocaleString("PaletteInfoPanel", scrui.DecimalToHex(d.helpText))),
        e = this.mHelpText.GetTextHeight(!1), e += 35, this.mHelpText.mParentControl.SetPosition(this.mHelpText.mParentControl.mLeft, -1 * e, this.mHelpText.mParentControl.mWidth, e));
      (e = this.mInfoContainer.FindControlByID(247770860)) && e.SetSelected(!0);
      this.mNewContextualInfoContainer = this.mInfoContainer.mParentControl.FindControlByID(simcity.cToolPaletteUIHandler.kWinNewContextualInfoContainer);
      this.mNewContextualInfoContainer || (this.mNewContextualInfoContainer = gUIManager.FindControlByID(249888433));
      this.mNewContextualInfoContainer &&
      (this.mNewContextualInfoContainer.SetVisibility(!1), this.mNewAlertItemsContainer = this.mNewContextualInfoContainer.FindControlByID(simcity.cToolPaletteUIHandler.kWinAlertItemsContainer), this.mContextualInfoHeaderTextWin = this.mNewContextualInfoContainer.FindControlByID(229170960), this.mContextualInfoBodyTextWin = this.mNewContextualInfoContainer.FindControlByID(229170956), (e = this.mNewContextualInfoContainer.FindAnimationByID(230923108)) && e.Reset());
      for (var f = d.heavyLayers.length, e = Array(f), g = 0; g < f; ++g) {
        var h =
          3 * g,
        i = scrui.RequestStringFromKey(new simcity.cKey(1088479232, d.heavyLayers[g], scrui.kResourceTypePropertyList));
        e[h] = scrui.BuildRequestQuery([simcity.kDataProperties, i, simcity.kPropertyLayerName]);
        e[h + 1] = scrui.BuildRequestQuery([simcity.kDataProperties, i, simcity.kPropertyLayerIconKey]);
        e[h + 2] = scrui.BuildRequestQuery([simcity.kDataProperties, i, simcity.kPropertyLayerDarkIconKey])
      }
      var j = this.mInfoContainer.FindControlByID(simcity.cToolPaletteUIHandler.kWinIDLayerToggleContainer),
      k = 0,
      l = 0,
      m = 0;
      scrui.RequestGameData(e,
        function (e) {
        for (var g = f - 1; g >= 0; --g) {
          var h = g * 3,
          i = gUIManager.LoadAndCacheLayout("Layouts/Palette/PaletteLayerToggle2.js", j),
          r = Math.floor(j.mWidth / i.mWidth);
          b.mLayerButtons.push(i);
          k = k + i.mWidth;
          i.SetPosition(m * i.mWidth, l * i.mHeight);
          ++m;
          if (m === r) {
            ++l;
            m = 0
          }
          r = Number(d.heavyLayers[g]);
          i.mUserData = r;
          for (var s = i.FindControlByID(231251442).mExposedProperties, t = 0, u = s.length; t < u; ++t) {
            var v = s[t],
            x = scrui.cProperties.GetPropertyDataByID(v.mPropertyID);
            switch (v.mPropertyLabel) {
            case "WhiteIcon":
              x.mSet(v.mControl, scrui.PathFromResourceKey(e[h +
                    1]));
              break;
            case "DarkIcon":
              var w = e[h + 2];
              w || (w = e[h + 1]);
              x.mSet(v.mControl, scrui.PathFromResourceKey(w));
              break;
            case "TooltipText":
              w = e[h];
              w = "/" + scrui.DecimalToHex(w.tableID) + "/" + scrui.DecimalToHex(w.stringID);
              x.mSet(v.mControl, w);
              break;
            case "UserData":
              x.mSet(v.mControl, r)
            }
          }
          b.mLayerUIHandler.RegisterLayerButton(i)
        }
        j && j.mParentControl.SetWidth(j.mParentControl.mWidth + k - j.mWidth);
        simcity.ForceUpdateCategory(b.mSelectedCategoryButton ? b.mSelectedCategoryButton.mUserData : a.instance, c)
      })
    }
    if (d.hasOwnProperty("categoryName")) {
      if (this.mCategoryName =
          c ? this.mEditorLayout.FindControlByID(simcity.cToolPaletteUIHandler.kTxtCategoryName) : this.mPanelLayout.FindControlByID(simcity.cToolPaletteUIHandler.kTxtCategoryName))
        e = "ToolCategories", d.categoryText && (e = d.categoryText), this.mCategoryName.SetLocaleText(new scrui.cLocaleString(e, scrui.DecimalToHex(d.categoryName))), this.mCategoryName.SetVisibility(!0)
    } else (this.mCategoryName = this.mEditorLayout.FindControlByID(simcity.cToolPaletteUIHandler.kTxtCategoryName)) && this.mCategoryName.SetVisibility(!1)
  } else (this.mCategoryName =
        gUIManager.FindControlByID(simcity.cToolPaletteUIHandler.kTxtCategoryName)) && this.mCategoryName.SetVisibility(!1)
};
simcity.SetTooltipHelper = function (a, b) {
  if (a && b)
    for (var c = a.mExposedProperties, d = 0, e = c.length; d < e; ++d) {
      var f = c[d],
      g = scrui.cProperties.GetPropertyDataByID(f.mPropertyID);
      if (g)
        switch (f.mPropertyLabel) {
        case "TooltipText":
          if (4294967295 !== b.tableID) {
            var h = "/" + scrui.DecimalToHex(b.tableID) + "/" + scrui.DecimalToHex(b.stringID);
            g.mSet(f.mControl, h)
          }
          break;
        case "TooltipRawText":
          simcity.DEBUG && g.mSet(f.mControl, scrui.TextFromLocaleProperty(b))
        }
    }
};
simcity.SetupCategoryButton = function (a, b) {
  a.buttonIconNormal = b.FindControlByID(simcity.cToolPaletteUIHandler.kWinIDCategoryIconNormal);
  a.buttonIconNormalOn = b.FindControlByID(simcity.cToolPaletteUIHandler.kWinIDCategoryIconNormalOn);
  a.buttonIconCaution = b.FindControlByID(simcity.cToolPaletteUIHandler.kWinIDCategoryIconCaution);
  a.buttonIconCritical = b.FindControlByID(simcity.cToolPaletteUIHandler.kWinIDCategoryIconCritical);
  a.alertLevel = simcity.kAlertLevelNormal
};
simcity.cToolPaletteUIHandler.prototype.LoadPalette = function (a) {
  scrui.Assert(null !== this.mPanelContainer && null !== this.mCategoryContainer, "Expecting a parent control");
  scrui.Client_ProfBegin("LoadPalette");
  var b = gUIManager.FindControlByID(simcity.kWinDebugToolCategories),
  c = this;
  simcity.gEventManager.AddEventListener(simcity.gEventTypes.CLICK, simcity.cToolPaletteUIHandler.kBtnIDCategoryButton, function (a) {
    if (simcity.gGlobalUIHandler.mRegionCameraButton.mIsSelected)
      a.SetSelected(!1);
    else if (c.mSelectedCategoryButton !==
      a) {
      var b = a.GetParentLayout().FindControlByID(simcity.cToolPaletteUIHandler.kBtnIDCategoryButtonOn);
      b && b.SetVisibility(!0);
      a.SetVisibility(!1);
      c.OpenToolPanelFromID(a.mUserData)
    } else
      a.SetSelected(!0)
  });
  simcity.gEventManager.AddEventListener(simcity.gEventTypes.MOUSEOVER, simcity.cToolPaletteUIHandler.kBtnIDCategoryButton, function (a) {
    a = a.GetParentLayout();
    a.Reparent(a.mParentControl)
  });
  simcity.gEventManager.AddEventListener(simcity.gEventTypes.CLICK, simcity.cToolPaletteUIHandler.kBtnIDCategoryButtonOn,
    function (a) {
    c.mToolPanelOpen && (a.SetVisibility(!1), (a = a.GetParentLayout().FindControlByID(simcity.cToolPaletteUIHandler.kBtnIDCategoryButton)) && a.SetVisibility(!0), c.CloseToolPanel())
  });
  simcity.gEventManager.AddEventListener(simcity.gEventTypes.MOUSEOVER, simcity.cToolPaletteUIHandler.kBtnIDSelectTool, function (a) {
    if (c.mToolPanelOpen) {
      c.mRolloverButton = a;
      c.UpdateRollover(!1);
      var a = a.mUserData,
      b = c.mRolloverButton.mMouseOverAnim;
      b && !c.mToolUnlockInfoArray[a].isLocked && b.Start(scrui.cAnimation.kPlayForward);
      c.mRolloverButton.mUnlockWindowContainer.SetVisibility(!1);
      delete c.mNewlyUnlocked[a]
    }
  });
  simcity.gEventManager.AddEventListener(simcity.gEventTypes.MOUSEOUT, simcity.cToolPaletteUIHandler.kBtnIDSelectTool, function (a) {
    if (c.mToolPanelOpen) {
      c.mRolloverButton = a;
      var a = c.mRolloverButton.mUserData,
      b = c.mRolloverButton.mMouseOverAnim;
      b && (!c.mToolUnlockInfoArray[a] || !c.mToolUnlockInfoArray[a].isLocked) && b.Start(scrui.cAnimation.kPlayReverse);
      c.mRolloverButton = null;
      c.mRolloverLayout.SetVisibility(!1)
    }
  });
  simcity.gEventManager.AddEventListener(simcity.gEventTypes.CLICK,
    simcity.cToolPaletteUIHandler.kBtnSubCategory, function (a) {
    if (c.mToolPanelOpen && a.mIsSelected) {
      var b = new simcity.cKey;
      b.group = c.mSubCategoryGroupID;
      b.instance = a.mUserData;
      scrui.PostGameCommand(scrui.BuildCommand([simcity.kDataDeselectTool]));
      c.mSelectedSubCategoryButton = a;
      c.mCategoryData[c.mSelectedCategoryButton.mUserData].lastSubCategorySelected = b.instance;
      c.LoadTools(b)
    }
  });
  simcity.gEventManager.AddEventListener(simcity.gEventTypes.CLICK, 247609078, function (a) {
    if (c.mToolPanelOpen && (a = a.mUserData))
      scrui.PostGameCommand(scrui.BuildCommand(["UpgradeTool",
            a, simcity.kRuleIDSCPlayerRuleUpgradeBuilding])), c.mBeatCount = -5, c.mNeedsUpdated = !0
  });
  simcity.gEventManager.AddEventListener(simcity.gEventTypes.CLICK, simcity.cToolPaletteUIHandler.kBtnIDSelectTool, function (a) {
    c.SelectTool(a)
  });
  simcity.gEventManager.AddEventListener(simcity.gEventTypes.CLICK, simcity.cToolPaletteUIHandler.kBtnExitEditor, function () {
    c.CloseEditorPanel()
  });
  var a = new simcity.cKey(161790466, 1465331116),
  d = scrui.RequestStringFromKey(a),
  a = [scrui.BuildRequestQuery([simcity.kDataProperties, d,
        simcity.kPropToolPaletteToolCategoryIDs]), scrui.BuildRequestQuery([simcity.kDataProperties, d, simcity.kPropToolPaletteCategoryOffsets]), scrui.BuildRequestQuery([simcity.kDataProperties, d, simcity.kPropToolPaletteCategoryIsDebug])];
  scrui.RequestGameData(a, function (a) {
    var f = a[0],
    g = a[1],
    h = a[2];
    scrui.Assert(f, "categoryIDs not loaded properly from prop: " + d);
    for (var i = f.length, a = Array(3 * i), j = 0; j < i; ++j) {
      var k = f[j];
      k.group = c.mCategoryGroupID;
      k = scrui.RequestStringFromKey(k);
      a[3 * j] = scrui.BuildRequestQuery([simcity.kDataProperties,
            k, simcity.kPropToolCategoryName]);
      a[3 * j + 1] = scrui.BuildRequestQuery([simcity.kDataProperties, k, simcity.kPropToolCategoryIconKeys]);
      a[3 * j + 2] = scrui.BuildRequestQuery([simcity.kDataProperties, k, simcity.kPropToolCategoryLayerKey])
    }
    simcity.gEventManager.AddEventListener(simcity.gEventTypes.CLICK, simcity.cToolPaletteUIHandler.kBtnIDRoadToolPageRight, function () {
      var a = c.GetPanelLayout().FindControlByID(simcity.cToolPaletteUIHandler.kWinIDRoadToolButtonContainer),
      b = a.mParentControl.mWidth;
      a.mLeft + a.mWidth >
      a.mParentControl.mWidth && (c.SetBuildingItemVisibilityForCurrentPage(!1), ++c.mPageIndex, c.SetBuildingItemVisibilityForCurrentPage(!0), c.UpdateScrollButtons(), a.SetPosition(a.mLeft - b, a.mTop, a.mWidth, a.mHeight))
    });
    simcity.gEventManager.AddEventListener(simcity.gEventTypes.CLICK, simcity.cToolPaletteUIHandler.kBtnIDRoadToolPageLeft, function () {
      var a = c.GetPanelLayout().FindControlByID(simcity.cToolPaletteUIHandler.kWinIDRoadToolButtonContainer),
      b = a.mParentControl.mWidth;
      0 > a.mLeft && (c.SetBuildingItemVisibilityForCurrentPage(!1),
        --c.mPageIndex, c.SetBuildingItemVisibilityForCurrentPage(!0), c.UpdateScrollButtons(), a.SetPosition(a.mLeft + b, a.mTop, a.mWidth, a.mHeight))
    });
    simcity.gEventManager.AddEventListener(simcity.gEventTypes.CLICK, simcity.cToolPaletteUIHandler.kBtnIDPageRight, function () {
      var a = c.GetPanelLayout().FindControlByID(simcity.cToolPaletteUIHandler.kWinIDPalettePanel),
      b = a.mParentControl.mWidth;
      a.mLeft + a.mWidth > a.mParentControl.mWidth && (c.SetBuildingItemVisibilityForCurrentPage(!1), ++c.mPageIndex, c.SetBuildingItemVisibilityForCurrentPage(!0),
        c.UpdateScrollButtons(), a.SetPosition(a.mLeft - b, a.mTop, a.mWidth, a.mHeight))
    });
    simcity.gEventManager.AddEventListener(simcity.gEventTypes.CLICK, simcity.cToolPaletteUIHandler.kBtnIDPageLeft, function () {
      var a = c.GetPanelLayout().FindControlByID(simcity.cToolPaletteUIHandler.kWinIDPalettePanel),
      b = a.mParentControl.mWidth;
      0 > a.mLeft && (c.SetBuildingItemVisibilityForCurrentPage(!1), --c.mPageIndex, c.SetBuildingItemVisibilityForCurrentPage(!0), c.UpdateScrollButtons(), a.SetPosition(a.mLeft + b, a.mTop, a.mWidth, a.mHeight))
    });
    scrui.RequestGameData(a, function (a) {
      for (var d = 0, e = 0, j = !1, k = 0; k < i; ++k) {
        var o = f[k],
        r = a[3 * k],
        s = a[3 * k + 1],
        t = a[3 * k + 2],
        u = h[k];
        if (!simcity.DEBUG && u)
          break;
        if (r) {
          var v = null;
          o.instance === simcity.kCategoryIDDemolish ? v = gUIManager.FindControlByID(244738929) : (v = gUIManager.LoadAndCacheLayout(u ? "Layouts/CategoryButtonDebug.js" : "Layouts/Palette/CategoryButtonWithIcon2.js", u ? b : c.mCategoryContainer), simcity.SetTooltipHelper(v, r));
          var r = v.FindControlByID(simcity.cToolPaletteUIHandler.kBtnIDCategoryButton),
          x = v.mHeight,
          w = v.mWidth,
          w = u ? 0 : k * w + d,
          u = u ? e++ * x : 0;
          v.SetPosition(w, u, v.mWidth, v.mHeight);
          r.mUserData = o.instance;
          simcity.SetupCategoryButton(r, v);
          null !== s && (r.buttonIconNormal.SetWindowImage(scrui.PathFromResourceKey(s[0])), r.buttonIconCaution.SetWindowImage(scrui.PathFromResourceKey(s[1])), r.buttonIconCritical.SetWindowImage(scrui.PathFromResourceKey(s[3])), s = s[4] ? scrui.PathFromResourceKey(s[4]) : scrui.PathFromResourceKey(s[0]), r.buttonIconNormalOn.SetWindowImage(s));
          c.mCategoryData[o.instance] = {
            layer : t,
            lastSubCategorySelected : 0
          };
          c.mCategoryButtonsMap[o.instance] = r;
          j && ((j = v.FindControlByID(244289442)) && j.SetVisibility(!0), j = !1);
          t = g[k];
          0 < t && (j = !0);
          d += t;
          simcity.gGlobalUIHandler.mIsSpectatorMode && o.instance == simcity.kCategoryIDDisasters && v.SetVisibility(!1)
        }
      }
      c.mIsPaletteLoaded = !0
    })
  });
  scrui.Client_ProfEnd()
};
simcity.cToolPaletteUIHandler.prototype.SelectTool = function (a) {
  if (this.mToolPanelOpen) {
    var b = a.mUserData,
    c = this.mToolUnlockInfoArray[b];
    a.mIsSelected && c.isLocked ? a.SetSelected(!1) : simcity.gGlobalUIHandler.mToyTaskPanelUIHandler.ToolHasAPicker(b) ? (simcity.gGlobalUIHandler.mToyTaskPanelUIHandler.Start(b), a.SetSelected(!1)) : !0 === a.mIsSelected ? scrui.PostGameCommand(scrui.BuildCommand([simcity.kDataSelectTool, b])) : scrui.PostGameCommand(scrui.BuildCommand([simcity.kDataDeselectTool]))
  }
};
simcity.cToolPaletteUIHandler.prototype.GetButtonFromCategory = function (a) {
  return this.mCategoryButtonsMap[a]
};
simcity.cToolPaletteUIHandler.prototype.GetSubCategoryButton = function (a) {
  if (this.mSubCategoryBtnsContainer && this.mSubCategoryBtnsContainer.mChildren)
    for (var b = 0, c = this.mSubCategoryBtnsContainer.mChildren.length; b < c; ++b) {
      var d = this.mSubCategoryBtnsContainer.mChildren[b].button;
      if (d.mUserData === a)
        return d
    }
  return null
};
simcity.cToolPaletteUIHandler.prototype.GetLayerToggleButton = function (a, b) {
  for (var c = 0; c < this.mLayerUIHandler.mLayerButtons.length; c++) {
    var d = this.mLayerUIHandler.mLayerButtons[c];
    if (d.mUserData == a && !d.mAllLayersButton)
      return d.FindControlByID(b)
  }
  return null
};
simcity.cToolPaletteUIHandler.prototype.CloseEditorPanel = function () {
  this.mEditorLayout.SetVisibility(!1);
  this.mEditorCategory = null;
  this.mEditorIsOpen = this.mToolPanelOpen = !1;
  this.mToolKeys = null;
  this.mNeedsUpdated = !1;
  null !== this.mEditedBuildingRefString && (this.mEditedBuildingRefString = null, scrui.PostGameCommand(scrui.BuildCommand([simcity.kCommandExitBuildingEditor])), gUIManager.FindAnimationByID(210343216).Start(scrui.cAnimation.kPlayReverse));
  this.SetCategoryToOpen();
  simcity.gGlobalUIHandler.mBoundaryUIHandler.SetVisibility(!0);
  this.mRolloverLayout.SetVisibility(!1);
  this.mRolloverButton = null
};
simcity.cToolPaletteUIHandler.prototype.OpenEditorPanel = function (a, b, c, d) {
  this.mEditorCategory = a;
  this.CloseToolPanel(!0);
  simcity.gGlobalUIHandler.mToyTaskPanelUIHandler.SetVisible(!1);
  simcity.gGlobalUIHandler.mBoundaryUIHandler.SetVisibility(!1);
  this.mEditedBuildingRefString = scrui.RequestStringFromUnitRef(d);
  b = new simcity.cKey;
  b.group = this.mCategoryGroupID;
  b.instance = c;
  this.mEditorKeyString = scrui.RequestStringFromKey(b);
  var b = scrui.BuildRequestQuery([simcity.kDataUnits, this.mEditedBuildingRefString,
        simcity.kDataUnitName]),
  c = scrui.BuildRequestQuery([simcity.kDataUIToolCategory, c, simcity.kPropToolCategoryToolList]),
  e = this;
  scrui.RequestGameData([b, c], function (b) {
    e.mEditorLayout.SetVisibility(!0);
    var c = e.mEditorLayout.FindControlByID(231511931);
    b[0] && c.SetLocaleText(scrui.LocaleStringFromLocaleProperty(b[0]));
    c = b[1];
    e.mToolKeys = b[1];
    e.LoadToolsHelper(null, c);
    b = new simcity.cKey;
    b.group = e.mCategoryGroupID;
    b.instance = a;
    e.LoadInfoPanel(b);
    e.mNeedsUpdated = !0;
    e.mBeatCount = -2
  });
  this.mNeedsUpdated = this.mEditorIsOpen =
    this.mToolPanelOpen = !0;
  this.mBeatCount = -2;
  gUIManager.FindAnimationByID(210343216).Start(scrui.cAnimation.kPlayForward)
};
simcity.cToolPaletteUIHandler.prototype.OpenToolPanelHelper = function (a) {
  this.mCitySpecializationModeActive ? (this.mLastSelectedMainCategoryID = a, a = simcity.gGlobalUIHandler.mReturnToCityButton, a.SetSelected(!0), this.HandleUIMessage(scrui.kMsgTypeButtonClicked, simcity.kBtnReturnToCity, a)) : this.OpenToolPanelFromID(a)
};
simcity.cToolPaletteUIHandler.prototype.OpenToolPanelFromID = function (a) {
  this.mCitySpecializationModeActive ? this.mLastSelectedCitySpecializationID = a === simcity.kCategoryIDDemolish ? 0 : a : this.mLastSelectedMainCategoryID = a === simcity.kCategoryIDDemolish ? 0 : a;
  this.mModeSwap = !1;
  (a = this.mCategoryButtonsMap[a]) && this.OpenToolPanel(a)
};
simcity.AutoSizeHelpText = function (a) {
  if (a) {
    var b = a.mIsVisible;
    a.SetVisibility(!0);
    var c = a.GetTextHeight(!1),
    c = c + 30;
    a.mParentControl.SetPosition(a.mParentControl.mLeft, -1 * c, a.mParentControl.mWidth, c);
    a.SetVisibility(b)
  }
};
simcity.cToolPaletteUIHandler.prototype.OpenToolPanel = function (a) {
  this.SetCategoryButtonsState(a);
  var b = a.mUserData,
  c = new simcity.cKey;
  c.group = a.mCitySpecialization ? simcity.kCitySpecializationGroupID : this.mCategoryGroupID;
  c.instance = b;
  this.LoadRootToolPanel(c);
  this.mRevealAnim.Start(scrui.cAnimation.kPlayForward);
  !0 === this.mIsSubPanel && ((a = gUIManager.FindAnimationByID(simcity.cToolPaletteUIHandler.kWinLegendShift)) && a.Start(scrui.cAnimation.kPlayForward), this.mIsLegendShifted = !0);
  this.mNeedsUpdated =
    this.mToolPanelOpen = !0;
  simcity.gGlobalUIHandler.mRegionViewUIHandler.SetStartingRegionPanel(b);
  this.mBeatCount = -2;
  b === simcity.kCategoryIDDemolish && scrui.PostGameCommand(scrui.BuildCommand([simcity.kDataSelectTool, simcity.cToolPaletteUIHandler.kToolIDBulldozer]))
};
simcity.cToolPaletteUIHandler.prototype.CloseToolPanel = function (a, b) {
  !this.mModeSwap && !a && (this.mCitySpecializationModeActive ? this.mLastSelectedCitySpecializationID = 0 : this.mLastSelectedMainCategoryID = 0);
  this.mToolPanelOpen = this.mHasLockedTool = this.mHasProgressBarTool = !1;
  this.ClearPanel();
  this.SetCategoryButtonsState(null);
  this.mRevealAnim.Start(scrui.cAnimation.kPlayReverse);
  this.mToolKeys = null;
  this.mNeedsUpdated = !1;
  if (!0 === this.mIsLegendShifted) {
    var c = gUIManager.FindAnimationByID(simcity.cToolPaletteUIHandler.kWinLegendShift);
    c && c.Start(scrui.cAnimation.kPlayReverse);
    this.mIsLegendShifted = !1
  }
  this.mRolloverButton = null;
  this.mRolloverLayout.SetVisibility(!1);
  a || simcity.gGlobalUIHandler.mRegionViewUIHandler.SetStartingRegionPanel(null);
  b || scrui.PostGameCommand(scrui.BuildCommand([simcity.kDataDeselectTool]))
};
simcity.cToolPaletteUIHandler.prototype.SetCategoryButtonsState = function (a) {
  this.mSelectedSubCategoryButton = null;
  if (a !== this.mSelectedCategoryButton) {
    if (null !== this.mSelectedCategoryButton) {
      if (null !== this.mSelectedSubCategoryLayer)
        scrui.PostGameCommand(scrui.BuildCommand([simcity.kCommandToggleLayer, this.mSelectedSubCategoryLayer, !1])), this.mSelectedSubCategoryLayer = null;
      else {
        var b = this.mCategoryData[this.mSelectedCategoryButton.mUserData].layer;
        null !== b && (this.mCurrentLightLayer = 0, scrui.PostGameCommand(scrui.BuildCommand([simcity.kCommandToggleLayer,
                b.instance, !1])))
      }
      this.mPanelLayout && this.mPanelLayout.SetVisibility(!1);
      this.mSelectedCategoryButton.SetSelected(!1);
      this.mSelectedCategoryButton = null;
      !0 === this.mIsLegendShifted && ((b = gUIManager.FindAnimationByID(simcity.cToolPaletteUIHandler.kWinLegendShift)) && b.Start(scrui.cAnimation.kPlayReverse), this.mIsLegendShifted = !1)
    }
    if (null !== a && (b = this.mCategoryData[a.mUserData].layer, null !== b && (scrui.PostGameCommand(scrui.BuildCommand([simcity.kCommandToggleLayer, b.instance, !0])), this.mCurrentLightLayer =
            b.instance), simcity.SendSoundEvent(simcity.audio.kGlobalSoundObjectID, simcity.audio.kInstanceUICategorySwitch), this.mSelectedCategoryButton = a, this.mSelectedCategoryButton.SetSelected(!0), this.mPanelLayout && this.mSubCategoryBtnsContainer))
      simcity.gGlobalUIHandler.RemoveFromBeatUpdate(this.mSubCategoryBtnsContainer), this.mSubCategoryBtnsContainer.DestroyChildren()
  } else
    this.mSelectedCategoryButton && !this.mSelectedCategoryButton.mIsSelected && this.mSelectedCategoryButton.SetSelected(!0)
};
simcity.cToolPaletteUIHandler.prototype.SetActiveToolButton = function (a) {
  null !== this.mSelectedToolButton && this.mSelectedToolButton.SetSelected(!1);
  (this.mSelectedToolButton = a) && this.mSelectedToolButton.SetSelected(!0)
};
simcity.cToolPaletteUIHandler.prototype.GetBulldozerButton = function () {
  return this.mCategoryButtonsMap[simcity.kCategoryIDDemolish]
};
simcity.cToolPaletteUIHandler.prototype.HandleTriggerKey = function (a) {
  if (!simcity.gGlobalUIHandler.mRegionViewUIHandler.IsVisible() && !simcity.IsTutorialInProgress() && !simcity.IsOptionMenuVisible() && !simcity.IsMouseEatingWindowVisible()) {
    switch (a) {
    case simcity.cToolPaletteUIHandler.kKeyTriggerDrawStraight:
      this.HandleKeyRoadDraw(simcity.cToolPaletteUIHandler.kBtnDrawStraight, simcity.cToolPaletteUIHandler.kRoadTypeStraight);
      break;
    case simcity.cToolPaletteUIHandler.kKeyTriggerDrawCircle:
      this.HandleKeyRoadDraw(simcity.cToolPaletteUIHandler.kBtnDrawCircle,
        simcity.cToolPaletteUIHandler.kRoadTypeCircle);
      break;
    case simcity.cToolPaletteUIHandler.kKeyTriggerDrawCurvy:
      this.HandleKeyRoadDraw(simcity.cToolPaletteUIHandler.kBtnDrawCurvy, simcity.cToolPaletteUIHandler.kRoadTypeCurvy);
      break;
    case simcity.cToolPaletteUIHandler.kKeyTriggerDrawRectangle:
      this.HandleKeyRoadDraw(simcity.cToolPaletteUIHandler.kBtnDrawGrid, simcity.cToolPaletteUIHandler.kRoadTypeGrid);
      break;
    case simcity.cToolPaletteUIHandler.kKeyTriggerDrawArc:
      this.HandleKeyRoadDraw(simcity.cToolPaletteUIHandler.kBtnDrawArc,
        simcity.cToolPaletteUIHandler.kRoadTypeArc);
      break;
    case simcity.cToolPaletteUIHandler.kKeyTriggerRoadUpgrade:
      this.HandleKeyRoadSelector();
      break;
    case simcity.cToolPaletteUIHandler.kKeyTriggerEditorDemolish:
      if (this.mEditorIsOpen) {
        var b = this.mEditorLayout.FindControlByID(241884167);
        if (b) {
          var c = b.GetAbsolutePosition();
          b.Private_OnClick(c[0], c[1])
        }
      }
    }
    if (!this.mEditorIsOpen)
      if (b = {
          251030870 : simcity.kCategoryIDDemolish,
          251030874 : simcity.kCategoryIDTransport,
          251030879 : simcity.kCategoryIDPower,
          251030884 : simcity.kCategoryIDWater,
          251030889 : simcity.kCategoryIDSewage,
          251030893 : simcity.kCategoryIDGarbage,
          251030898 : simcity.kCategoryIDCivic,
          251043418 : simcity.kCategoryIDFire,
          251043423 : simcity.kCategoryIDHealth,
          251043427 : simcity.kCategoryIDPolice,
          251043431 : simcity.kCategoryIDEducation,
          251043435 : simcity.kCategoryIDMassTransit,
          251043439 : simcity.kCategoryIDTourism,
          252069935 : simcity.kCategoryIDDisasters
        }, b.hasOwnProperty(a))
        a = b[a], this.mSelectedCategoryButton && this.mSelectedCategoryButton.mUserData == a ? this.CloseToolPanel() : this.OpenToolPanelHelper(a);
      else
        switch (a) {
        case simcity.cToolPaletteUIHandler.kKeyTriggerBigBusinessPanel:
          a = simcity.gGlobalUIHandler.mCitySpecializationButton;
          a.SetSelected(!0);
          this.HandleUIMessage(scrui.kMsgTypeButtonClicked, simcity.kBtnIDCitySpecialization, a);
          break;
        case simcity.cToolPaletteUIHandler.kKeyTriggerZoneResidential:
          this.HandleKeyShortCut(1);
          break;
        case simcity.cToolPaletteUIHandler.kKeyTriggerZoneCommercial:
          this.HandleKeyShortCut(2);
          break;
        case simcity.cToolPaletteUIHandler.kKeyTriggerZoneIndustrial:
          this.HandleKeyShortCut(3);
          break;
        case simcity.cToolPaletteUIHandler.kKeyTriggerZoneUnzone:
          this.HandleKeyShortCut(0)
        }
  }
};
simcity.cToolPaletteUIHandler.prototype.HandleKeyShortCut = function (a) {
  this.mSelectedCategoryButton && this.mSelectedCategoryButton.mUserData === simcity.kCategoryIDZones ? (this.mToolButtons[a].SetSelected(!0), this.SelectTool(this.mToolButtons[a])) : (this.mKeyShortcutIx = a, this.OpenToolPanelHelper(simcity.kCategoryIDZones))
};
simcity.cToolPaletteUIHandler.prototype.HandleKeyRoadDraw = function (a, b) {
  if (this.GetPanelLayout()) {
    var c = this.GetPanelLayout().FindControlByID(239814192);
    if (c && c.GetAbsoluteVisibility()) {
      var d = 0,
      d = this.mEditorLayout.mIsVisible ? this.mLastEditorUsedRoadControlID : this.mLastUsedRoadControlID;
      d != a && ((d = c.FindControlByID(d)) && d.SetSelected(!1), c = c.FindControlByID(a), this.mEditorLayout.mIsVisible ? this.mLastEditorUsedRoadControlID = a : this.mLastUsedRoadControlID = a, scrui.PostGameCommand(scrui.BuildCommand([simcity.kCommandRoadDrawType,
              b])), c.SetSelected(!0))
    }
  }
};
simcity.cToolPaletteUIHandler.prototype.HandleKeyRoadSelector = function () {
  if (this.GetPanelLayout()) {
    var a = this.GetPanelLayout().FindControlByID(239814192);
    if (a && a.GetAbsoluteVisibility() && (a = a.FindControlByID(simcity.cToolPaletteUIHandler.kBtnRoadSelector)) && a.GetAbsoluteVisibility() && this.mSelectedToolButton !== a)
      a.SetSelected(!0), scrui.PostGameCommand(scrui.BuildCommand([simcity.kDataSelectTool, simcity.cToolPaletteUIHandler.kToolIDPathSelector]))
  }
};
simcity.ForceRCIActive = function (a) {
  var b = simcity.gGlobalUIHandler.mToolPaletteUIHandler;
  -1 !== b.mKeyShortcutIx && a.animation.mPlayDirection === scrui.cAnimation.kPlayForward && (b.mToolButtons[b.mKeyShortcutIx].SetSelected(!0), b.SelectTool(b.mToolButtons[b.mKeyShortcutIx]), b.mKeyShortcutIx = -1)
};
simcity.cToolPaletteUIHandler.prototype.CycleHeavyLayer = function () {
  if (this.mToolPanelOpen && 0 !== this.mLayerButtons.length) {
    var a = this.mLayerUIHandler.GetCurrentActiveLayer();
    if (a)
      for (var b = 0; b < this.mLayerButtons.length; b++)
        if (this.mLayerButtons[b].mUserData == a) {
          b + 1 < this.mLayerButtons.length ? this.mLayerUIHandler.ActivateLayer(this.mLayerButtons[b + 1].mUserData) : this.mLayerUIHandler.ActivateLayer(this.mLayerButtons[0].mUserData);
          return
        }
    this.mLayerUIHandler.ActivateLayer(this.mLayerButtons[0].mUserData)
  }
};
simcity.databindings.DataBindingsPaletteRollover = {};
simcity.PaletteRolloverName = {
  dynamic : !1,
  controlID : simcity.cToolPaletteUIHandler.kTxtPaletteRolloverName,
  queries : function (a) {
    return {
      name : [simcity.kDataTools, a, simcity.kDataName]
    }
  },
  action : function (a, b, c) {
    b.SetLocaleText(scrui.LocaleStringFromLocaleProperty(c.name))
  }
};
simcity.PaletteRolloverDescription = {
  dynamic : !1,
  controlID : simcity.cToolPaletteUIHandler.kTxtPaletteRolloverDescription,
  allowNullResults : !0,
  queries : function (a) {
    return {
      description : [simcity.kDataTools, a, "description"],
      lockedDescription : [simcity.kDataTools, a, "lockedDescription"]
    }
  },
  action : function (a, b, c) {
    null != c.lockedDescription && 4294967295 != c.lockedDescription.stringID ? b.SetLocaleText(scrui.LocaleStringFromLocaleProperty(c.lockedDescription)) : b.SetLocaleText(scrui.LocaleStringFromLocaleProperty(c.description))
  }
};
simcity.PaletteRolloverMoreInfo = {
  dynamic : !1,
  controlID : simcity.cToolPaletteUIHandler.kWinPaletteRolloverMoreInfoContainer,
  allowNullResults : !0,
  queries : function (a) {
    return {
      moreInfoStrings : [simcity.kDataTools, a, "toolMoreInfo"]
    }
  },
  action : function (a, b, c) {
    var d = c.moreInfoStrings ? c.moreInfoStrings.length : 0;
    b.SetVisibility(0 < d);
    if (0 < d) {
      b.SetHeight(b.mHeight * d);
      for (var e = 0, f = b.mChildren.length; e < f; ++e) {
        var g = b.FindControlByID(246544E3 + e);
        g.SetVisibility(e < d);
        if (e < d) {
          var h = g.FindControlByID(246546704 + e);
          if (h) {
            var g =
              c.moreInfoStrings[e],
            i = scrui.LocaleStringFromLocaleProperty(g.text),
            j = g.type;
            simcity.IsFormattableType(j) ? (j = simcity.FormatLargeNumberByType(g.token, j), h.SetLocaleText(i, {
                amount : j.number,
                exponent : j.exponent
              })) : h.SetLocaleText(i, {
              amount : g.token
            });
            switch (g.text.stringID) {
            case 241717119:
            case 241717103:
            case 241717087:
              h = a.FindControlByID(253033008),
              h.SetVisibility(!0),
              h.FindAnimationByID(253138655).PlayToKeyFrame(g.text.stringID)
            }
          }
        }
      }
    }
  }
};
simcity.PaletteRolloverRegionalBenefits = {
  dynamic : !1,
  controlID : simcity.cToolPaletteUIHandler.kWinContainerRolloverRegionalBenefitDescription,
  allowNullResults : !0,
  queries : function (a) {
    return {
      regionalBenefitDescription : [simcity.kDataTools, a, "regionalBenefitDescription"],
      isLocked : [simcity.kDataTools, a, "isLocked"]
    }
  },
  action : function (a, b, c) {
    null != c.regionalBenefitDescription && 4294967295 != c.regionalBenefitDescription.stringID ? (b.SetVisibility(!0), a = b.FindControlByID(simcity.cToolPaletteUIHandler.kTxtIDRolloverRegionalBenefitDescription),
      a.SetLocaleText(scrui.LocaleStringFromLocaleProperty(c.regionalBenefitDescription)), a.mParentControl.SetWidth(a.GetTextWidth() + 10)) : b.SetVisibility(!1)
  }
};
simcity.kUpgradePopulationFudgingIDs = [2186398481];
simcity.kUnitAttachedUITypeIDMansion = 2154380328;
simcity.PaletteRolloverLockedCriteria = {
  dynamic : !0,
  controlID : simcity.cToolPaletteUIHandler.kWinPaletteRolloverLockedBackground,
  allowNullResults : !0,
  mLocalToolID : 0,
  queries : function (a) {
    this.mLocalToolID = a;
    return {
      unlockBinCurrentValues : [simcity.kDataTools, a, "toolBinValues"],
      unlockTargetAmount : [simcity.kDataTools, a, simcity.kDataProperties, simcity.kPropToolUnlockTargetAmount],
      unlockString : [simcity.kDataTools, a, simcity.kDataProperties, simcity.kPropToolUnlockString],
      unlockConversionType : [simcity.kDataTools,
        a, simcity.kDataProperties, simcity.kPropToolUnlockConversionType],
      isLockedByAchievement : [simcity.kDataTools, a, "isLockedByAchievement"],
      upgradeDescription : [simcity.kDataTools, a, "upgradeDescription"],
      upgradeConversionType : [simcity.kDataTools, a, simcity.kDataProperties, simcity.kPropscToolUpgradeConversionType],
      upgradeString : [simcity.kDataTools, a, simcity.kDataProperties, simcity.kPropToolUpgradeString],
      upgradeImage : [simcity.kDataTools, a, simcity.kDataProperties, simcity.kPropToolUnlockImage],
      mansionTarget : [simcity.kDataCachedUnits,
        simcity.kUnitAttachedUITypeIDMansion, simcity.kDataBinAmount, simcity.kResourceIDMansionUpgradeTarget],
      toolInfo : [simcity.kDataTools, a, simcity.kDataToolInfo]
    }
  },
  action : function (a, b, c) {
    var d = simcity.gGlobalUIHandler.mToolPaletteUIHandler,
    e = d.GetButtonFromToolID(this.mLocalToolID);
    this.mContainerWindow = a.FindControlByID(simcity.cToolPaletteUIHandler.kWinPaletteRolloverLockedBackground);
    this.mContainerWindow.mHeight = 0;
    var f = a.FindControlByID(246655021);
    f && (c.toolInfo.isRoadTool ? f.SetVisibility(!0) : f.SetVisibility(!1));
    if (-1 != c.toolInfo.amountForUpgrade && -1 != c.toolInfo.amountTowardsUpgrade) {
      this.mUnlockLayouts = [];
      this.mUnlockLayouts[0] = gUIManager.LoadAndCacheLayout("Layouts/Palette/PaletteRolloverUpgradeItem.js", this.mContainerWindow);
      this.mContainerWindow.mHeight = this.mUnlockLayouts[0].mHeight;
      d = this.mUnlockLayouts[0];
      c.upgradeImage && d.FindControlByID(simcity.cToolPaletteUIHandler.kWinUpgradeImage).SetWindowImage(scrui.PathFromResourceKey(c.upgradeImage));
      var b = d.FindControlByID(simcity.cToolPaletteUIHandler.kWinUpgradeApproved),
      g = d.FindControlByID(simcity.cToolPaletteUIHandler.kWinUpgradeProgress),
      e = d.FindControlByID(simcity.cToolPaletteUIHandler.kWinUpgradeMaxedGroup);
      if (-1 == c.toolInfo.upgradeAvailable)
        b.SetVisibility(!1), g.SetVisibility(!1), e.SetVisibility(!0);
      else if (c.toolInfo.upgradeAvailable || c.toolInfo.amountTowardsUpgrade >= c.toolInfo.amountForUpgrade)
        d.FindControlByID(simcity.cToolPaletteUIHandler.kWinUpgradeText).SetLocaleText(scrui.LocaleStringFromLocaleProperty(c.upgradeString)), b.SetVisibility(!0), g.SetVisibility(!1),
        e.SetVisibility(!1);
      else if (c.toolInfo.amountTowardsUpgrade < c.toolInfo.amountForUpgrade) {
        g.SetVisibility(!0);
        b.SetVisibility(!1);
        e.SetVisibility(!1);
        b = d.FindControlByID(simcity.cToolPaletteUIHandler.kWinUpgradeProgressGroup);
        f = d.FindControlByID(simcity.cToolPaletteUIHandler.kWinUpgradeProgressBar);
        f.SetPosition(f.mLeft, f.mTop, b.mWidth * (c.toolInfo.amountTowardsUpgrade / c.toolInfo.amountForUpgrade), f.mHeight);
        d = d.FindControlByID(simcity.cToolPaletteUIHandler.kWinUpgradeSubtitle);
        e = c.toolInfo.amountTowardsUpgrade;
        b = c.toolInfo.amountForUpgrade;
        -1 != simcity.kUpgradePopulationFudgingIDs.indexOf(this.mLocalToolID) && (e = simcity.GetFudgedPopulation(e), b = simcity.GetRoundedFudgedPopulation(b));
        var h = "";
        c.upgradeConversionType && simcity.IsFormattableType(c.upgradeConversionType.instance) && (e = simcity.FormatLargeNumberByType(e, c.upgradeConversionType.instance), g = simcity.FormatLargeNumberByType(b, c.upgradeConversionType.instance), e = e.number, b = g.number, h = g.exponent);
        c.mansionTarget ? d.SetLocaleText(scrui.LocaleStringFromLocaleProperty(c.upgradeDescription), {
          amount : e,
          capacity : b,
          target : c.mansionTarget
        }) : d.SetLocaleText(scrui.LocaleStringFromLocaleProperty(c.upgradeDescription), {
          amount : e,
          capacity : b
        })
      }
      a.FindControlByID(simcity.cToolPaletteUIHandler.kWinPaletteRolloverLockedText).SetVisibility(!1)
    } else if (e && e.mUnlockWindowContainer && (e = e.mUnlockWindowContainer, g = !1, e && (g = e.mIsVisible, e.SetVisibility(!1))), d = d.IsToolLockedByAchievement(c.toolInfo.achievementLock), (g || c.toolInfo.isLocked || d) && null != c.unlockTargetAmount && null != c.unlockBinCurrentValues) {
      var i =
        "defaultLockedDescription";
      this.mUnlockLayouts = [];
      for (e = g = b = this.mUnlockCount = 0; e < c.unlockString.length; e++) {
        this.mUnlockLayouts[this.mUnlockCount] = gUIManager.LoadAndCacheLayout("Layouts/Palette/ToolProgressBar.js", this.mContainerWindow);
        var f = scrui.LocaleStringFromLocaleProperty(c.unlockString[e]),
        j = new scrui.cLocaleString(f.mTableID, f.mStringID),
        f = this.mUnlockLayouts[this.mUnlockCount].FindControlByID(simcity.cMissionUI.kWinProgressBarObjective),
        k = this.mUnlockLayouts[this.mUnlockCount].FindControlByID(202394872),
        l = c.unlockBinCurrentValues[e].amount < c.unlockTargetAmount[e] ? c.unlockBinCurrentValues[e].amount : c.unlockTargetAmount[e],
        m = c.unlockTargetAmount[e],
        h = "";
        if (c.unlockConversionType)
          if (3469784512 === c.unlockConversionType[e].instance)
            l = simcity.GetFudgedPopulation(l), m = simcity.GetRoundedFudgedPopulation(m);
          else
            var l = simcity.FormatLargeNumberByType(l, c.unlockConversionType[e].instance).number, n = simcity.FormatLargeNumberByType(m, c.unlockConversionType[e].instance), m = n.number, h = n.exponent;
        j.LoadString(function () {
          i =
            j.GetText({
              unlockValue : m,
              currentValue : l,
              exponent : h
            })
        });
        n = l / m;
        1 <= n && !d && (n = 1, k.SetVisibility(!0));
        f.mParentControl.SetVisibility(3 <= c.unlockTargetAmount[e] && !d);
        f && (f.mParentControl.SetWidth(1.42 * a.mWidth), scrui.SetProgressBarWidth(f, n));
        f = this.mUnlockLayouts[this.mUnlockCount].FindControlByID(simcity.cMissionUI.kTextObjective);
        f.SetRawText(i);
        k = f.GetTextHeight() + 5;
        f.mParentControl.SetPosition(f.mParentControl.mLeft, f.mParentControl.mTop, f.mParentControl.mWidth, k);
        this.mUnlockLayouts[this.mUnlockCount].SetPosition(0,
          this.mUnlockCount * b);
        b = this.mUnlockLayouts[this.mUnlockCount].mHeight;
        g += b;
        this.mUnlockCount++
      }
      this.mContainerWindow.mHeight = g
    } else
      b.SetVisibility(!1)
  }
};
simcity.PaletteRolloverCost = {
  dynamic : !1,
  controlID : simcity.cToolPaletteUIHandler.kTxtPaletteRolloverCost,
  queries : function (a) {
    return {
      cost : [simcity.kDataTools, a, "paletterollovercost"],
      editorActive : [simcity.kDataEditor, simcity.kDataEnabled],
      simoleons : [simcity.kDataBins, simcity.kResourceIDSimoleons]
    }
  },
  action : function (a, b, c) {
    a = c.cost ? c.cost : 0;
    0 < a ? (b.UpdateLocaleText({
        cost : a
      }), c.cost >= c.simoleons.amount ? b.SetTextColor("red") : b.SetTextColor("#265e94")) : 0 === a ? b.SetLocaleText(new scrui.cLocaleString("PaletteToolRollovers.json",
        "0x0d96b40b", "PLACEHOLDER TEXT")) : -1 === a && b.SetLocaleText(new scrui.cLocaleString("PaletteToolRollovers.json", "0x0eb1f03b", "PLACEHOLDER TEXT"))
  }
};
simcity.PaletteRolloverMaintenanceCost = {
  dynamic : !1,
  controlID : simcity.cToolPaletteUIHandler.kTxtPaletteRolloverUpkeep,
  allowNullResults : !0,
  queries : function (a) {
    return {
      income : [simcity.kDataBins, simcity.kResourceIDIncome],
      expenses : [simcity.kDataBins, simcity.kResourceIDExpenses],
      maintenance : [simcity.kDataTools, a, "secondaryUnitProperties", simcity.kPropSCUnitMaintenanceCost]
    }
  },
  action : function (a, b, c) {
    a = a.FindControlByID(238175217);
    null !== c.maintenance ? 0 === c.maintenance ? b.SetLocaleText(new scrui.cLocaleString("PaletteToolRollovers.json",
        "0x0d96b40c", "PLACEHOLDER TEXT")) : (b.SetVisibility(!0), b.mParentControl.SetVisibility(!0), b.UpdateLocaleText({
        maintenance : c.maintenance
      })) : (b.SetVisibility(!1), b.mParentControl.SetVisibility(!1), a.SetVisibility(!1))
  }
};
simcity.PaletteRolloverMarqueeImage = {
  dynamic : !0,
  controlID : simcity.cToolPaletteUIHandler.kWinPaletteRolloverMarqueeImage,
  allowNullResults : !0,
  queries : function (a) {
    return {
      image : [simcity.kDataTools, a, simcity.kDataProperties, simcity.kPropToolMarqueeImage],
      toolCount : [simcity.kDataTools, a, "toolCountUsed"],
      isLocked : [simcity.kDataTools, a, "isLocked"],
      toolInfo : [simcity.kDataTools, a, simcity.kDataToolInfo]
    }
  },
  action : function (a, b, c) {
    var d = simcity.gGlobalUIHandler.mToolPaletteUIHandler.IsToolLockedByAchievement(c.toolInfo.achievementLock);
    c.image && (d ? b.SetWindowImage("KillBug.png") : b.SetWindowImage(scrui.PathFromResourceKey(c.image)));
    b = c.toolCount.toolCountLimit;
    d = c.toolCount.toolCountShared;
    c.toolCount.toolIsHQReliant && (b = c.toolCount.toolIndividualLimit, d = c.toolCount.toolCountUsed);
    if (0 != b && d <= b) {
      var e = a.FindControlByID(simcity.kWinModulesFree),
      a = a.FindControlByID(simcity.kTextModulesFree);
      e && a && (e.SetVisibility(!c.isLocked), a.SetRawText(b - d))
    } else
      a.FindControlByID(simcity.kWinModulesFree).SetVisibility(!1)
  }
};
var kKeySmallLayout = 1846755610, kKeyMediumLayout = 2849147824, kKeyLargeLayout = 4284352190;
simcity.PaletteRolloverLayoutSize = {
  dynamic : !1,
  allowNullResults : !0,
  queries : function (a) {
    return {
      isLocked : [simcity.kDataTools, a, "isLocked"]
    }
  },
  action : function (a) {
    a.SetWidth(1.5 * a.mWidth);
    a.SetHeight(1.5 * a.mHeight)
  }
};
simcity.kPaletteRolloverDataBindings = [simcity.PaletteRolloverName, simcity.PaletteRolloverDescription, simcity.PaletteRolloverMoreInfo, simcity.PaletteRolloverRegionalBenefits, simcity.PaletteRolloverLockedCriteria, simcity.PaletteRolloverCost, simcity.PaletteRolloverMaintenanceCost, simcity.PaletteRolloverMarqueeImage, simcity.PaletteRolloverLayoutSize];
simcity.databindings.DataBindingsTicker = {};
simcity.TickerCategories = {
  kGeneric0 : {
    popOut : 3826500308,
    popoutsound : 711277662,
    color : "#be7000",
    blink : !0
  },
  kGeneric1 : {
    popOut : 608491202,
    popoutsound : 432147147,
    color : "#265e94",
    blink : !1
  },
  kGeneric2 : {
    popOut : 2520413864,
    popoutsound : 432147147,
    color : "#265e94",
    blink : !1
  },
  kGeneric3 : {
    popOut : 2637923960,
    popoutsound : 432147147,
    color : "#265e94",
    blink : !1
  },
  kGeneric4 : {
    popOut : 3156693456,
    popoutsound : 432147147,
    color : "#265e94",
    blink : !1
  },
  kGeneric5 : {
    popOut : 597541823,
    popoutsound : 432147147,
    color : "#265e94",
    blink : !1
  },
  kGeneric6 : {
    color : "#265e94",
    blink : !1
  },
  kGeneric7 : {
    color : "#ba2616",
    blink : !1
  },
  kGeneric8 : {
    popOut : 2637923960,
    color : "#265e94",
    blink : !1
  },
  kGeneric9 : {
    popOut : 2637923960,
    color : "#ba2616",
    blink : !0
  },
  kGeneric10 : {
    popOut : 3156693456,
    color : "#265e94",
    blink : !1
  },
  kGeneric11 : {
    popOut : 4088429864,
    popoutsound : 2920163307,
    color : "#265e94",
    blink : !1
  },
  kGeneric12 : {
    popOut : 4088429865,
    popoutsound : 2920163307,
    color : "#00a700",
    blink : !0
  },
  kGeneric13 : {
    popOut : 995543781,
    color : "#be7000",
    blink : !1
  },
  kGeneric14 : {
    popOut : 995543781,
    popoutsound : 711277662,
    color : "#265e94",
    blink : !1
  },
  kGeneric15 : {
    popOut : 3247900340,
    popoutsound : 711277662,
    color : "#265e94",
    blink : !1
  },
  kGeneric16 : {
    popOut : 3051065891,
    popoutsound : 2988507092,
    color : "#be7000",
    blink : !1
  },
  kGeneric17 : {
    popOut : 3051065891,
    popoutsound : 711277662,
    color : "#265e94",
    blink : !1
  },
  kGeneric18 : {
    popOut : 505280647,
    popoutsound : 711277662,
    color : "#265e94",
    blink : !1
  },
  kGeneric19 : {
    popOut : 505280647,
    popoutsound : 2497209459,
    color : "#be7000",
    blink : !1
  },
  kGeneric20 : {
    popOut : 3167787360,
    popoutsound : 2497209459,
    extension : 445441141,
    color : "#265e94",
    blink : !0
  },
  kGeneric21 : {
    popOut : 4079394120,
    popoutsound : 2497209459,
    color : "#265e94",
    blink : !0
  },
  kGeneric22 : {
    popOut : 1565890522,
    popoutsound : 2497209459,
    color : "#265e94",
    blink : !0
  },
  kGeneric23 : {
    popOut : 4155948883,
    color : "#ba2616",
    blink : !0
  },
  kGeneric24 : {
    popOut : 283783434,
    popoutsound : 2497209459,
    extension : 445441141,
    color : "#265e94",
    blink : !0
  },
  kGeneric25 : {
    popOut : 2806233011,
    popoutsound : 2497209459,
    extension : 445441141,
    color : "#265e94",
    blink : !0
  },
  kGeneric26 : {
    popOut : 2229669014,
    popoutsound : 2497209459,
    extension : 445441141,
    color : "#265e94",
    blink : !0
  },
  kGeneric27 : {
    popOut : 568671253,
    popoutsound : 2497209459,
    extension : 445441141,
    color : "#265e94",
    blink : !0
  },
  kGeneric28 : {
    popOut : 702837965,
    popoutsound : 2497209459,
    extension : 445441141,
    color : "#265e94",
    blink : !0
  },
  kGeneric29 : {
    popOut : 4088429868,
    popoutsound : 2920163307,
    color : "#0000ff",
    blink : !1
  },
  kGeneric30 : {
    popOut : 4088429870,
    popoutsound : 2920163307,
    color : "#0000ff",
    blink : !1
  },
  kGeneric31 : {
    popOut : 4088429866,
    popoutsound : 2920163307,
    color : "#0000ff",
    blink : !1
  },
  kGeneric32 : {
    popOut : 4088429869,
    popoutsound : 2920163307,
    color : "#0000ff",
    blink : !1
  },
  kGeneric33 : {
    popOut : 4088429865,
    popoutsound : 2920163307,
    color : "#0000ff",
    blink : !1
  },
  kGeneric34 : {
    popOut : 746870563,
    popoutsound : 711277662,
    color : "#be7000",
    blink : !1
  },
  kGeneric35 : {
    popOut : 4211742235,
    popoutsound : 2920163307,
    color : "#00a700",
    blink : !1
  },
  kGeneric36 : {
    popOut : 4211742235,
    popoutsound : 711277662,
    color : "#be7000",
    blink : !1
  },
  kGeneric37 : {
    popOut : 4211742235,
    popoutsound : 2920163307,
    color : "#265e94",
    blink : !1
  },
  kGeneric38 : {
    popOut : 4211742235,
    popoutsound : 2920163307,
    color : "#265e94",
    blink : !0
  },
  kGeneric39 : {
    popOut : 3279112622,
    popoutsound : 711277662,
    color : "#be7000",
    blink : !1
  },
  kGeneric40 : {
    popOut : 3228915691,
    popoutsound : 541125585,
    color : "#00a700",
    blink : !1
  },
  kGeneric41 : {
    popOut : 3228915691,
    popoutsound : 711277662,
    color : "#265e94",
    blink : !1
  },
  kGeneric42 : {
    popOut : 3228915691,
    popoutsound : 2920163307,
    color : "#265e94",
    blink : !1
  },
  kGeneric43 : {
    popOut : 3228915691,
    color : "#be7000",
    blink : !1
  },
  kGeneric44 : {
    popOut : 3228915691,
    color : "#265e94",
    blink : !1
  },
  kGeneric45 : {
    popOut : 2237876459,
    popoutsound : 711277662,
    color : "#be7000",
    blink : !1
  },
  kGeneric46 : {
    popOut : 90951737,
    popoutsound : 711277662,
    color : "#be7000",
    blink : !1
  },
  kGeneric47 : {
    popOut : 4006569959,
    popoutsound : 711277662,
    color : "#be7000",
    blink : !1
  },
  kGeneric48 : {
    popOut : 2989660663,
    popoutsound : 711277662,
    color : "#be7000",
    blink : !1
  },
  kGeneric49 : {
    popOut : 1935439822,
    popoutsound : 711277662,
    color : "#be7000",
    blink : !1
  },
  kGeneric50 : {
    popOut : 3119349554,
    popoutsound : 711277662,
    color : "#be7000",
    blink : !1
  },
  kGeneric51 : {
    popOut : 1976039930,
    color : "#00a700",
    blink : !1
  },
  kGeneric52 : {
    popOut : 1976039930,
    popoutsound : 711277662,
    color : "#be7000",
    blink : !1
  },
  kGeneric53 : {
    popOut : 1976039930,
    popoutsound : 711277662,
    color : "#265e94",
    blink : !1
  },
  kGeneric54 : {
    popOut : 1976039930,
    color : "#265e94",
    blink : !1
  },
  kGeneric55 : {
    popOut : 2799331856,
    popoutsound : 2920163307,
    color : "#00a700",
    blink : !1
  },
  kGeneric56 : {
    popOut : 2799331856,
    popoutsound : 711277662,
    color : "#be7000",
    blink : !1
  },
  kGeneric57 : {
    popOut : 2799331856,
    popoutsound : 432147147,
    color : "#00a700",
    blink : !1
  },
  kGeneric58 : {
    popOut : 2799331856,
    popoutsound : 711277662,
    color : "#265e94",
    blink : !1
  },
  kGeneric59 : {
    popOut : 2799331856,
    popoutsound : 2920163307,
    color : "#265e94",
    blink : !1
  },
  kGeneric60 : {
    popOut : 2799331856,
    color : "#265e94",
    blink : !1
  },
  kGeneric61 : {
    popOut : 2485824774,
    color : "#be7000",
    blink : !0
  },
  kGeneric62 : {
    popOut : 1343341559,
    popoutsound : 432147147,
    color : "#00a700",
    blink : !1
  },
  kGeneric63 : {
    popOut : 2051197110,
    popoutsound : 432147147,
    color : "#00a700",
    blink : !1
  },
  kGeneric64 : {
    popOut : 3193605517,
    popoutsound : 432147147,
    color : "#00a700",
    blink : !1
  },
  kGeneric65 : {
    popOut : 2186895585,
    popoutsound : 711277662,
    color : "#00a700",
    blink : !1
  },
  kGeneric66 : {
    popOut : 2186895585,
    popoutsound : 432147147,
    color : "#00a700",
    blink : !1
  },
  kGeneric67 : {
    popOut : 1117831206,
    popoutsound : 432147147,
    color : "#00a700",
    blink : !1
  },
  kGeneric68 : {
    popOut : 1528591452,
    popoutsound : 432147147,
    color : "#00a700",
    blink : !0
  },
  kGeneric69 : {
    popOut : 898156440,
    popoutsound : 432147147,
    color : "#00a700",
    blink : !0
  },
  kGeneric70 : {
    popOut : 608491202,
    popoutsound : 432147147,
    color : "#00a700",
    blink : !0
  },
  kGeneric71 : {
    popOut : 2328119309,
    popoutsound : 432147147,
    color : "#00a700",
    blink : !0
  },
  kGeneric72 : {
    popOut : 780439254,
    popoutsound : 432147147,
    color : "#00a700",
    blink : !0
  },
  kGeneric73 : {
    popOut : 2916625810,
    popoutsound : 432147147,
    color : "#00a700",
    blink : !0
  },
  kGeneric74 : {
    popOut : 2324210422,
    popoutsound : 432147147,
    color : "#00a700",
    blink : !0
  },
  kGeneric75 : {
    popOut : 634315867,
    popoutsound : 432147147,
    color : "#00a700",
    blink : !0
  },
  kGeneric76 : {
    popOut : 507449055,
    popoutsound : 432147147,
    color : "#00a700",
    blink : !0
  },
  kGeneric77 : {
    popOut : 1077852763,
    popoutsound : 432147147,
    color : "#00a700",
    blink : !0
  },
  kGeneric78 : {
    popOut : 1935439822,
    popoutsound : 432147147,
    color : "#00a700",
    blink : !0
  },
  kGeneric79 : {
    popOut : 2520413864,
    popoutsound : 432147147,
    color : "#00a700",
    blink : !0
  },
  kGeneric80 : {
    popOut : 2637923960,
    popoutsound : 432147147,
    color : "#00a700",
    blink : !0
  },
  kGeneric81 : {
    popOut : 3156693456,
    popoutsound : 432147147,
    color : "#00a700",
    blink : !0
  },
  kGeneric82 : {
    popOut : 2989660663,
    popoutsound : 432147147,
    color : "#00a700",
    blink : !1
  },
  kGeneric83 : {
    popOut : 2186895585,
    popoutsound : 432147147,
    color : "#00a700",
    blink : !0
  },
  kGeneric84 : {
    popOut : 750415515,
    popoutsound : 432147147,
    color : "#00a700",
    blink : !0
  },
  kGeneric85 : {
    popOut : 3319890007,
    popoutsound : 432147147,
    color : "#00a700",
    blink : !0
  },
  kGeneric86 : {
    popOut : 2072411743,
    popoutsound : 432147147,
    color : "#00a700",
    blink : !0
  },
  kGeneric87 : {
    popOut : 1662723423,
    popoutsound : 2920163307,
    color : "#00a700",
    blink : !1
  },
  kGeneric88 : {
    popOut : 1662723423,
    popoutsound : 2497209459,
    color : "#00a700",
    blink : !1
  },
  kGeneric89 : {
    popOut : 1662723423,
    popoutsound : 2497209459,
    color : "#00a700",
    blink : !0
  },
  kGeneric90 : {
    popOut : 1080312848,
    popoutsound : 2497209459,
    color : "#be7000",
    blink : !1
  },
  kGeneric91 : {
    popOut : 1080312848,
    popoutsound : 2920163307,
    color : "#00a700",
    blink : !0
  },
  kGeneric92 : {
    popOut : 1080312848,
    popoutsound : 2920163307,
    color : "#00a700",
    blink : !1
  },
  kGeneric93 : {
    popOut : 1080312848,
    popoutsound : 2497209459,
    color : "#00a700",
    blink : !0
  },
  kGeneric94 : {
    popOut : 1080312848,
    popoutsound : 2497209459,
    color : "#00a700",
    blink : !1
  },
  kGeneric95 : {
    popOut : 2514012217,
    popoutsound : 2497209459,
    color : "#be7000",
    blink : !1
  },
  kGeneric96 : {
    popOut : 2514012217,
    popoutsound : 2988507092,
    color : "#00a700",
    blink : !1
  },
  kGeneric97 : {
    popOut : 138339017,
    popoutsound : 2920163307,
    color : "#00a700",
    blink : !1
  },
  kGeneric98 : {
    popOut : 2514012217,
    popoutsound : 2920163307,
    color : "#00a700",
    blink : !1
  },
  kGeneric99 : {
    popOut : 4068651255,
    popoutsound : 2988507092,
    color : "#00a700",
    blink : !1
  },
  kGeneric100 : {
    popOut : 4068651255,
    popoutsound : 2920163307,
    color : "#00a700",
    blink : !1
  },
  kGeneric101 : {
    popOut : 4088429864,
    popoutsound : 711277662,
    color : "#00a700",
    blink : !1
  },
  kGeneric102 : {
    popOut : 1978225469,
    popoutsound : 2497209459,
    color : "#be7000",
    blink : !1
  },
  kGeneric103 : {
    popOut : 1978225469,
    popoutsound : 2920163307,
    color : "#00a700",
    blink : !1
  },
  kGeneric104 : {
    popOut : 2686844891,
    popoutsound : 2920163307,
    color : "#00a700",
    blink : !1
  },
  kGeneric105 : {
    popOut : 1978225469,
    popoutsound : 2497209459,
    color : "#00a700",
    blink : !1
  },
  kGeneric106 : {
    popOut : 2686844891,
    popoutsound : 2497209459,
    color : "#00a700",
    blink : !1
  },
  kGeneric107 : {
    popOut : 4145716298,
    popoutsound : 432147147,
    color : "#00a700",
    blink : !1
  },
  kGeneric108 : {
    popOut : 287114150,
    popoutsound : 432147147,
    color : "#00a700",
    blink : !1
  },
  kGeneric109 : {
    popOut : 90951737,
    popoutsound : 432147147,
    color : "#00a700",
    blink : !1
  },
  kGeneric110 : {
    popOut : 4145716298,
    popoutsound : 432147147,
    color : "#00a700",
    blink : !0
  },
  kGeneric111 : {
    popOut : 287114150,
    popoutsound : 432147147,
    color : "#00a700",
    blink : !0
  },
  kGeneric112 : {
    popOut : 90951737,
    popoutsound : 432147147,
    color : "#00a700",
    blink : !0
  },
  kGeneric113 : {
    popOut : 2766989671,
    popoutsound : 2497209459,
    color : "#00a700",
    blink : !1
  },
  kGeneric114 : {
    popOut : 2766989671,
    popoutsound : 2920163307,
    color : "#00a700",
    blink : !1
  },
  kGeneric115 : {
    popOut : 2766989671,
    popoutsound : 3820351317,
    color : "#00a700",
    blink : !1
  },
  kGeneric116 : {
    popOut : 4150508453,
    popoutsound : 432147147,
    color : "#00a700",
    blink : !1
  },
  kGeneric117 : {
    popOut : 1753425282,
    popoutsound : 2577172899,
    color : "#00a700",
    blink : !0
  },
  kGeneric118 : {
    popOut : 1753425282,
    popoutsound : 3274445481,
    color : "#00a700",
    blink : !1
  },
  kGeneric119 : {
    popOut : 746870563,
    popoutsound : 2988507092,
    color : "#be7000",
    blink : !0
  },
  kGeneric120 : {
    popOut : 1767794936,
    popoutsound : 2577172899,
    color : "#00a700",
    blink : !0
  },
  kGeneric121 : {
    popOut : 1767794936,
    popoutsound : 3274445481,
    color : "#00a700",
    blink : !1
  },
  kGeneric122 : {
    popOut : 634315867,
    popoutsound : 2988507092,
    color : "#be7000",
    blink : !0
  },
  kGeneric123 : {
    popOut : 138339017,
    popoutsound : 2577172899,
    color : "#00a700",
    blink : !0
  },
  kGeneric124 : {
    popOut : 138339017,
    popoutsound : 3274445481,
    color : "#00a700",
    blink : !1
  },
  kGeneric125 : {
    popOut : 2740467664,
    popoutsound : 2988507092,
    color : "#be7000",
    blink : !0
  },
  kGeneric126 : {
    popOut : 780439254,
    popoutsound : 2577172899,
    color : "#00a700",
    blink : !0
  },
  kGeneric127 : {
    popOut : 780439254,
    popoutsound : 3274445481,
    color : "#00a700",
    blink : !1
  },
  kGeneric128 : {
    popOut : 4270790685,
    popoutsound : 2988507092,
    color : "#be7000",
    blink : !0
  },
  kGeneric129 : {
    popOut : 2328119309,
    popoutsound : 2577172899,
    color : "#00a700",
    blink : !0
  },
  kGeneric130 : {
    popOut : 2328119309,
    popoutsound : 3274445481,
    color : "#00a700",
    blink : !1
  },
  kGeneric131 : {
    popOut : 1576074270,
    popoutsound : 2988507092,
    color : "#be7000",
    blink : !0
  },
  kGeneric132 : {
    popOut : 2916625810,
    popoutsound : 2577172899,
    color : "#00a700",
    blink : !0
  },
  kGeneric133 : {
    popOut : 2916625810,
    popoutsound : 3274445481,
    color : "#00a700",
    blink : !1
  },
  kGeneric134 : {
    popOut : 2237876459,
    popoutsound : 2988507092,
    color : "#be7000",
    blink : !0
  },
  kGeneric135 : {
    popOut : 1935439822,
    popoutsound : 2577172899,
    color : "#00a700",
    blink : !0
  },
  kGeneric136 : {
    popOut : 1935439822,
    popoutsound : 3274445481,
    color : "#00a700",
    blink : !1
  },
  kGeneric137 : {
    popOut : 1935439822,
    popoutsound : 2988507092,
    color : "#be7000",
    blink : !0
  },
  kGeneric138 : {
    popOut : 1228851207,
    popoutsound : 2577172899,
    color : "#00a700",
    blink : !0
  },
  kGeneric139 : {
    popOut : 1228851207,
    popoutsound : 3274445481,
    color : "#00a700",
    blink : !1
  },
  kGeneric140 : {
    popOut : 1784441106,
    popoutsound : 2988507092,
    color : "#be7000",
    blink : !0
  },
  kGeneric141 : {
    popOut : 3148804527,
    popoutsound : 2577172899,
    color : "#00a700",
    blink : !0
  },
  kGeneric142 : {
    popOut : 3148804527,
    popoutsound : 3274445481,
    color : "#00a700",
    blink : !1
  },
  kGeneric143 : {
    popOut : 3119349554,
    popoutsound : 2988507092,
    color : "#be7000",
    blink : !0
  },
  kGeneric144 : {
    popOut : 3558728339,
    popoutsound : 432147147,
    color : "#00a700",
    blink : !1
  },
  kGeneric145 : {
    popOut : 3558728339,
    popoutsound : 711277662,
    color : "#00a700",
    blink : !1
  },
  kGeneric146 : {
    popOut : 3558728339,
    popoutsound : 2988507092,
    color : "#be7000",
    blink : !0
  },
  kGeneric147 : {
    popOut : 1687865527,
    popoutsound : 2577172899,
    color : "#00a700",
    blink : !0
  },
  kGeneric148 : {
    popOut : 1687865527,
    popoutsound : 3274445481,
    color : "#00a700",
    blink : !1
  },
  kGeneric149 : {
    popOut : 1687865527,
    popoutsound : 2988507092,
    color : "#be7000",
    blink : !0
  },
  kGeneric150 : {
    popOut : 3833589313,
    popoutsound : 432147147,
    color : "#00a700",
    blink : !0
  },
  kGeneric151 : {
    popOut : 618893759,
    popoutsound : 432147147,
    color : "#00a700",
    blink : !1
  },
  kGeneric152 : {
    popOut : 2437035926,
    popoutsound : 432147147,
    color : "#00a700",
    blink : !1
  },
  kGeneric153 : {
    popOut : 4006569959,
    popoutsound : 432147147,
    color : "#00a700",
    blink : !1
  }
};
simcity.TickerMessageEvents = {
  2862522295 : {
    stringID : 406060696,
    localizedPopOutText : 4225465767,
    queries : {
      adjustedExpenses : [simcity.kDataBinAmount, simcity.kResourceIDAdjustedExpenses],
      simoleons : [simcity.kDataBinAmount, simcity.kResourceIDSimoleons]
    },
    test : function (a) {
      return a.simoleons / 24 < a.adjustedExpenses && 0 < a.simoleons
    },
    getLocaleTokens : function (a) {
      return {
        calc1 : Math.floor(a.simoleons / a.adjustedExpenses) + 1
      }
    },
    importance : 10,
    triggerTime : [0, 0],
    displayCountLimit : 10,
    category : simcity.TickerCategories.kGeneric0
  },
  2216564935 : {
    stringID : 117522932,
    localizedPopOutText : 2106191243,
    queries : {
      income : [simcity.kDataBinAmount, simcity.kResourceIDCasinoSpecialtyLastMonthIncome],
      expenses : [simcity.kDataBinAmount, simcity.kResourceIDCasinoSpecialtyLastMonthExpenses],
      HQ : [simcity.kDataBinAmount, simcity.kResourceIDHQ_Casino_IsOn]
    },
    test : function (a) {
      return 0 < a.HQ
    },
    getLocaleTokens : function (a) {
      return {
        calc1 : a.income - a.expenses
      }
    },
    importance : 5,
    triggerTime : [100, 140],
    category : simcity.TickerCategories.kGeneric1
  },
  2190777279 : {
    stringID : 1057882443,
    localizedPopOutText : 1297307354,
    queries : {
      income : [simcity.kDataBinAmount, simcity.kResourceIDElectronicsSpecialtyLastMonthIncome],
      expenses : [simcity.kDataBinAmount, simcity.kResourceIDElectronicsSpecialtyLastMonthExpenses],
      HQ : [simcity.kDataBinAmount, simcity.kResourceIDHQ_Electronics_IsOn]
    },
    test : function (a) {
      return 0 < a.HQ
    },
    getLocaleTokens : function (a) {
      return {
        calc1 : a.income - a.expenses
      }
    },
    importance : 5,
    triggerTime : [100, 140],
    category : simcity.TickerCategories.kGeneric2
  },
  4056021231 : {
    stringID : 1458643196,
    localizedPopOutText : 3099287075,
    queries : {
      income : [simcity.kDataBinAmount, simcity.kResourceIDMetalSpecialtyLastMonthIncome],
      expenses : [simcity.kDataBinAmount, simcity.kResourceIDMetalSpecialtyLastMonthExpenses],
      HQ : [simcity.kDataBinAmount, simcity.kResourceIDHQ_Mining_IsOn]
    },
    test : function (a) {
      return 0 < a.HQ
    },
    getLocaleTokens : function (a) {
      return {
        calc1 : a.income - a.expenses
      }
    },
    importance : 5,
    triggerTime : [100, 140],
    category : simcity.TickerCategories.kGeneric3
  },
  3806113539 : {
    stringID : 901384120,
    localizedPopOutText : 3856130631,
    queries : {
      oilIncome : [simcity.kDataBinAmount,
        simcity.kResourceIDPetroleumSpecialtyLastMonthIncome],
      oilExpenses : [simcity.kDataBinAmount, simcity.kResourceIDPetroleumSpecialtyLastMonthExpenses],
      oilHQ : [simcity.kDataBinAmount, simcity.kResourceIDHQ_Oil_IsOn]
    },
    test : function (a) {
      return 0 < a.oilHQ
    },
    getLocaleTokens : function (a) {
      return {
        calc1 : a.oilIncome - a.oilExpenses
      }
    },
    importance : 5,
    triggerTime : [100, 140],
    category : simcity.TickerCategories.kGeneric4
  },
  1053008090 : {
    stringID : 324203730,
    localizedPopOutText : 3419798537,
    queries : {
      income : [simcity.kDataBinAmount, simcity.kResourceIDTradeSpecialtyLastMonthIncome],
      expenses : [simcity.kDataBinAmount, simcity.kResourceIDTradeSpecialtyLastMonthExpenses],
      HQ : [simcity.kDataBinAmount, simcity.kResourceIDHQ_Trade_IsOn]
    },
    test : function (a) {
      return 0 < a.HQ
    },
    getLocaleTokens : function (a) {
      return {
        calc1 : a.income - a.expenses
      }
    },
    importance : 5,
    triggerTime : [100, 140],
    category : simcity.TickerCategories.kGeneric5
  },
  3491343762 : {
    stringID : 2141884545,
    localizedPopOutText : 1695229200,
    importance : 10,
    triggerTime : [0, 0],
    displayCountLimit : 10,
    category : simcity.TickerCategories.kGeneric0
  },
  3485381822 : {
    stringID : 2960973370,
    queries : {
      guided : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Guided],
      HQ : [simcity.kDataResourceAmount, simcity.kResourceIDHQ_Electronics_Built]
    },
    test : function (a) {
      return 0 === a.guided && 0 === a.HQ
    },
    importance : 5,
    triggerTime : [300, 900],
    displayCountLimit : 1,
    category : simcity.TickerCategories.kGeneric6
  },
  555604848 : {
    stringID : 479587983,
    queries : {
      electronics_specialized : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Electronics]
    },
    test : function (a) {
      return 1 === a.electronics_specialized
    },
    importance : 8,
    triggerTime : [300, 500],
    displayCountLimit : 1,
    category : simcity.TickerCategories.kGeneric6
  },
  2417386553 : {
    stringID : 4205128247,
    queries : {
      electronics_specialized : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Electronics],
      T1 : [simcity.kDataResourceAmount, simcity.kResourceIDNumT1ElectronicsBase]
    },
    test : function (a) {
      return 1 === a.electronics_specialized && 1 <= a.T1
    },
    importance : 8,
    triggerTime : [300, 500],
    displayCountLimit : 1,
    category : simcity.TickerCategories.kGeneric6
  },
  2237690367 : {
    stringID : 1875333833,
    queries : {
      electronics_specialized : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Electronics],
      ElectronicHQ : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfElectronicHQs]
    },
    test : function (a) {
      return 1 === a.electronics_specialized && 1 <= a.ElectronicHQ
    },
    importance : 8,
    triggerTime : [300, 500],
    displayCountLimit : 1,
    category : simcity.TickerCategories.kGeneric6
  },
  4014134237 : {
    stringID : 4201490899,
    queries : {
      electronics_specialized : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Electronics],
      electronicsFactoryT2 : [simcity.kDataBinAmount, simcity.kResourceIDNumT2ElectronicsBase]
    },
    test : function (a) {
      return 1 === a.electronics_specialized && 1 <= a.electronicsFactoryT2
    },
    importance : 8,
    triggerTime : [300, 500],
    displayCountLimit : 1,
    category : simcity.TickerCategories.kGeneric6
  },
  592687806 : {
    stringID : 244303228,
    queries : {
      electronics_specialized : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Electronics],
      computers : [simcity.kDataResourceAmount, simcity.kResourceIDTotalComputerAssembled]
    },
    test : function (a) {
      return 1 ===
      a.electronics_specialized && 1 <= a.computers
    },
    importance : 8,
    triggerTime : [300, 500],
    displayCountLimit : 1,
    category : simcity.TickerCategories.kGeneric6
  },
  1595331192 : {
    stringID : 3249197276,
    queries : {
      gambling_specialized : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Gambling],
      casinos : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfCasinos]
    },
    test : function (a) {
      return 1 === a.gambling_specialized && 1 <= a.casinos
    },
    importance : 5,
    triggerTime : [300, 500],
    displayCountLimit : 1,
    category : simcity.TickerCategories.kGeneric6
  },
  1121631731 : {
    stringID : 968862560,
    queries : {
      gambling_specialized : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Gambling],
      BigGamble10 : [simcity.kDataBinAmount, simcity.kResourceIDGlobalMission_MSBusinessGamblingBigGamble10]
    },
    test : function (a) {
      return 1 === a.gambling_specialized && 1 === a.BigGamble10
    },
    importance : 5,
    triggerTime : [300, 500],
    displayCountLimit : 1,
    category : simcity.TickerCategories.kGeneric7
  },
  1816067128 : {
    stringID : 347808313,
    queries : {
      gambling_specialized : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Gambling]
    },
    test : function (a) {
      return 1 === a.gambling_specialized
    },
    importance : 5,
    triggerTime : [300, 500],
    displayCountLimit : 1,
    category : simcity.TickerCategories.kGeneric6
  },
  1119856555 : {
    stringID : 2490494359,
    queries : {
      gambling_specialized : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Gambling],
      CasinoHQ : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfCasinoHQs]
    },
    test : function (a) {
      return 1 === a.gambling_specialized && 1 <= a.CasinoHQ
    },
    importance : 5,
    triggerTime : [300, 500],
    displayCountLimit : 1,
    category : simcity.TickerCategories.kGeneric6
  },
  3990571085 : {
    stringID : 3361467280,
    queries : {
      gambling_specialized : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Gambling],
      BigGamble5 : [simcity.kDataBinAmount, simcity.kResourceIDGlobalMission_MSBusinessGamblingBigGamble5]
    },
    test : function (a) {
      return 1 === a.gambling_specialized && 1 === a.BigGamble5
    },
    importance : 5,
    triggerTime : [300, 500],
    displayCountLimit : 1,
    category : simcity.TickerCategories.kGeneric7
  },
  3289957511 : {
    stringID : 1223690171,
    queries : {
      gambling_specialized : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Gambling],
      HQ_CityHall_Transportation_Module_IsOn : [simcity.kDataResourceAmount, simcity.kResourceIDHQ_CityHall_Transportation_Module_IsOn]
    },
    test : function (a) {
      return 1 === a.gambling_specialized && 1 === a.HQ_CityHall_Transportation_Module_IsOn
    },
    importance : 5,
    triggerTime : [300, 500],
    displayCountLimit : 1,
    category : simcity.TickerCategories.kGeneric6
  },
  2126793774 : {
    stringID : 2961672730,
    queries : {
      guided : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Guided],
      casinoHQs : [simcity.kDataBinAmount, simcity.kResourceIDHQ_Casino_Built]
    },
    test : function (a) {
      return 0 === a.guided && 0 === a.casinoHQs
    },
    importance : 5,
    triggerTime : [300, 900],
    displayCountLimit : 1,
    category : simcity.TickerCategories.kGeneric6
  },
  3241423309 : {
    stringID : 995028134,
    queries : {
      guided : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Guided],
      HQ : [simcity.kDataResourceAmount, simcity.kResourceIDHQ_Trade_Built],
      rail_in_box : [simcity.kDataResourceAmount, simcity.kResourceIDNumberOfRailConnections],
      waterinbox : [simcity.kDataResourceAmount, simcity.kResourceIDNumberOfBoatConnections]
    },
    test : function (a) {
      return 0 === a.guided && 0 === a.HQ && (1 <= a.rail_in_box || 1 <= a.waterinbox)
    },
    importance : 5,
    triggerTime : [300, 900],
    displayCountLimit : 1,
    category : simcity.TickerCategories.kGeneric6
  },
  344128374 : {
    stringID : 1442247270,
    queries : {
      guided : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Guided],
      HQ : [simcity.kDataResourceAmount, simcity.kResourceIDHQ_Mining_Built]
    },
    test : function (a) {
      return 0 === a.guided && 0 === a.HQ
    },
    importance : 5,
    triggerTime : [300, 900],
    displayCountLimit : 5,
    category : simcity.TickerCategories.kGeneric6
  },
  389610818 : {
    stringID : 3188548680,
    queries : {
      metals_specialized : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Metals],
      coalmines_built : [simcity.kDataBinAmount, simcity.kResourceIDCoalMinesBuilt_T1]
    },
    test : function (a) {
      return 1 === a.metals_specialized && 1 <= a.coalmines_built
    },
    importance : 8,
    triggerTime : [300, 500],
    displayCountLimit : 1,
    category : simcity.TickerCategories.kGeneric6
  },
  611741879 : {
    stringID : 3059208004,
    localizedPopOutText : 3727184955,
    queries : {
      metals_specialized : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Metals]
    },
    test : function (a) {
      return 1 === a.metals_specialized
    },
    importance : 8,
    triggerTime : [300, 500],
    displayCountLimit : 1,
    category : simcity.TickerCategories.kGeneric8
  },
  3057508149 : {
    stringID : 2319390571,
    queries : {
      metals_specialized : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Metals],
      mining_HQ_built : [simcity.kDataResourceAmount, simcity.kResourceIDHQ_Mining_Built]
    },
    test : function (a) {
      return 1 === a.metals_specialized && 1 <= a.mining_HQ_built
    },
    importance : 8,
    triggerTime : [300, 500],
    displayCountLimit : 1,
    category : simcity.TickerCategories.kGeneric6
  },
  3529811841 : {
    stringID : 1825163777,
    localizedPopOutText : 852657552,
    queries : {
      metals_specialized : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Metals]
    },
    test : function (a) {
      return 1 === a.metals_specialized
    },
    importance : 8,
    triggerTime : [300, 500],
    displayCountLimit : 1,
    category : simcity.TickerCategories.kGeneric9
  },
  2213573849 : {
    stringID : 2931078471,
    queries : {
      metals_specialized : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Metals],
      coalT2 : [simcity.kDataResourceAmount, simcity.kResourceIDCoalMinesBuilt_T2]
    },
    test : function (a) {
      return 1 === a.metals_specialized && 1 <= a.coalT2
    },
    importance : 8,
    triggerTime : [300, 500],
    displayCountLimit : 1,
    category : simcity.TickerCategories.kGeneric6
  },
  2199591307 : {
    stringID : 3067011501,
    queries : {
      guided : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Guided],
      HQ : [simcity.kDataResourceAmount, simcity.kResourceIDHQ_Mining_Built]
    },
    test : function (a) {
      return 0 === a.guided && 0 === a.HQ
    },
    importance : 5,
    triggerTime : [300, 900],
    displayCountLimit : 1,
    category : simcity.TickerCategories.kGeneric6
  },
  355747780 : {
    stringID : 723760258,
    queries : {
      petroleum_specialized : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Petroleum],
      oilwells_built : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfOilWells]
    },
    test : function (a) {
      return 1 === a.petroleum_specialized && 1 <= a.oilwells_built
    },
    importance : 5,
    triggerTime : [300, 500],
    displayCountLimit : 1,
    category : simcity.TickerCategories.kGeneric6
  },
  4069684218 : {
    stringID : 4088610612,
    queries : {
      petroleum_specialized : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Petroleum],
      oilHQs_built : [simcity.kDataBinAmount,
        simcity.kResourceIDHQ_Oil_Built]
    },
    test : function (a) {
      return 1 === a.petroleum_specialized && 1 === a.oilHQs_built
    },
    importance : 5,
    triggerTime : [300, 500],
    displayCountLimit : 1,
    category : simcity.TickerCategories.kGeneric6
  },
  980995476 : {
    stringID : 3203030671,
    localizedPopOutText : 2022709318,
    queries : {
      petroleum_specialized : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Petroleum]
    },
    test : function (a) {
      return 1 === a.petroleum_specialized
    },
    importance : 5,
    triggerTime : [300, 500],
    displayCountLimit : 1,
    category : simcity.TickerCategories.kGeneric10
  },
  4075518179 : {
    stringID : 2273955257,
    queries : {
      petroleum_specialized : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Petroleum],
      oil_refineries : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfOilManufacturingBases]
    },
    test : function (a) {
      return 1 === a.petroleum_specialized && 1 <= a.oil_refineries
    },
    importance : 5,
    triggerTime : [300, 500],
    displayCountLimit : 1,
    category : simcity.TickerCategories.kGeneric6
  },
  1822446140 : {
    stringID : 2467812122,
    queries : {
      petroleum_specialized : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Petroleum],
      plasticAssemblers : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfPlasticAssemblers]
    },
    test : function (a) {
      return 1 === a.petroleum_specialized && 1 <= a.plasticAssemblers
    },
    importance : 5,
    triggerTime : [300, 500],
    displayCountLimit : 1,
    category : simcity.TickerCategories.kGeneric6
  },
  4233742703 : {
    stringID : 350876893,
    queries : {
      guided : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Guided],
      oilHQ : [simcity.kDataBinAmount, simcity.kResourceIDHQ_Oil_Built]
    },
    test : function (a) {
      return 0 === a.guided && 0 === a.oilHQ
    },
    importance : 5,
    triggerTime : [300, 900],
    displayCountLimit : 1,
    category : simcity.TickerCategories.kGeneric6
  },
  2798332768 : {
    stringID : 3501867033,
    localizedPopOutText : 2561456216,
    importance : 5,
    triggerTime : [100, 140],
    displayCountLimit : 1,
    category : simcity.TickerCategories.kGeneric11
  },
  1271082866 : {
    stringID : 3159633222,
    localizedPopOutText : 1314488965,
    importance : 8,
    triggerTime : [100, 140],
    displayCountLimit : 1,
    category : simcity.TickerCategories.kGeneric12
  },
  2261483553 : {
    stringID : 3705579627,
    localizedPopOutText : 235553658,
    importance : 10,
    triggerTime : [300,
      500],
    displayCountLimit : 10,
    category : simcity.TickerCategories.kGeneric13
  },
  1637247490 : {
    stringID : 464337342,
    localizedPopOutText : 2993317709,
    importance : 10,
    triggerTime : [300, 500],
    displayCountLimit : 10,
    isRegional : !0,
    category : simcity.TickerCategories.kGeneric14
  },
  2494240695 : {
    stringID : 742114689,
    localizedPopOutText : 1601575952,
    importance : 10,
    triggerTime : [300, 500],
    displayCountLimit : 10,
    isRegional : !0,
    category : simcity.TickerCategories.kGeneric15
  },
  3904912538 : {
    stringID : 2028961269,
    localizedPopOutText : 1622856684,
    importance : 10,
    triggerTime : [300, 500],
    displayCountLimit : 10,
    category : simcity.TickerCategories.kGeneric16
  },
  3174134949 : {
    stringID : 3391099183,
    localizedPopOutText : 2706197350,
    importance : 10,
    triggerTime : [300, 500],
    displayCountLimit : 10,
    isRegional : !0,
    category : simcity.TickerCategories.kGeneric17
  },
  4059387345 : {
    stringID : 4060750571,
    localizedPopOutText : 472997626,
    importance : 10,
    triggerTime : [300, 500],
    displayCountLimit : 10,
    isRegional : !0,
    category : simcity.TickerCategories.kGeneric18
  },
  1800060862 : {
    stringID : 3511082065,
    localizedPopOutText : 1947549056,
    importance : 10,
    triggerTime : [300, 500],
    displayCountLimit : 10,
    category : simcity.TickerCategories.kGeneric19
  },
  1323680520 : {
    stringID : 1050341333,
    localizedPopOutText : 2394128972,
    queries : {
      died : [simcity.kDataBinAmount, simcity.kResourceIDDeathPerDay]
    },
    test : function (a) {
      return 0 < a.died
    },
    getLocaleTokens : function (a) {
      return {
        calc1 : a.died
      }
    },
    importance : 10,
    triggerTime : [20, 20],
    displayCountLimit : 40,
    category : simcity.TickerCategories.kGeneric20
  },
  1606613579 : {
    stringID : 3705562746,
    localizedPopOutText : 1034499937,
    queries : {
      died : [simcity.kDataBinAmount,
        simcity.kResourceIDDeathPerDay]
    },
    test : function (a) {
      return 0 < a.died
    },
    getLocaleTokens : function (a) {
      return {
        calc1 : a.died
      }
    },
    importance : 10,
    triggerTime : [20, 20],
    displayCountLimit : 40,
    category : simcity.TickerCategories.kGeneric21
  },
  849218788 : {
    stringID : 1087229135,
    localizedPopOutText : 557046534,
    queries : {
      died : [simcity.kDataBinAmount, simcity.kResourceIDDeathPerDay]
    },
    test : function (a) {
      return 0 < a.died
    },
    getLocaleTokens : function (a) {
      return {
        calc1 : a.died
      }
    },
    importance : 10,
    triggerTime : [20, 20],
    displayCountLimit : 40,
    category : simcity.TickerCategories.kGeneric22
  },
  706007498 : {
    stringID : 989294323,
    localizedPopOutText : 394017554,
    queries : {
      Meltdown : [simcity.kDataResourceAmount, simcity.kResourceIDDisasterActiveMeltdown]
    },
    importance : 10,
    triggerTime : [20, 20],
    displayCountLimit : 40,
    category : simcity.TickerCategories.kGeneric23
  },
  158623644 : {
    stringID : 123681553,
    localizedPopOutText : 3652456640,
    queries : {
      died : [simcity.kDataBinAmount, simcity.kResourceIDDeathPerDay]
    },
    test : function (a) {
      return 0 < a.died
    },
    getLocaleTokens : function (a) {
      return {
        calc1 : a.died
      }
    },
    importance : 10,
    triggerTime : [20, 20],
    displayCountLimit : 40,
    category : simcity.TickerCategories.kGeneric24
  },
  1678288329 : {
    stringID : 1774760283,
    localizedPopOutText : 2803718986,
    queries : {
      died : [simcity.kDataBinAmount, simcity.kResourceIDDeathPerDay]
    },
    test : function (a) {
      return 0 < a.died
    },
    getLocaleTokens : function (a) {
      return {
        calc1 : a.died
      }
    },
    importance : 10,
    triggerTime : [20, 20],
    displayCountLimit : 40,
    category : simcity.TickerCategories.kGeneric25
  },
  2497225335 : {
    stringID : 2718027768,
    localizedPopOutText : 3662821639,
    queries : {
      died : [simcity.kDataBinAmount, simcity.kResourceIDDeathPerDay]
    },
    test : function (a) {
      return 0 < a.died
    },
    getLocaleTokens : function (a) {
      return {
        calc1 : a.died
      }
    },
    importance : 10,
    triggerTime : [20, 20],
    displayCountLimit : 40,
    category : simcity.TickerCategories.kGeneric26
  },
  3218687294 : {
    stringID : 2195188595,
    localizedPopOutText : 2480163986,
    importance : 10,
    triggerTime : [20, 20],
    displayCountLimit : 40,
    category : simcity.TickerCategories.kGeneric27
  },
  3410603091 : {
    stringID : 1397116883,
    localizedPopOutText : 3004681842,
    queries : {
      died : [simcity.kDataBinAmount, simcity.kResourceIDDeathPerDay]
    },
    test : function (a) {
      return 0 <
      a.died
    },
    getLocaleTokens : function (a) {
      return {
        calc1 : a.died
      }
    },
    importance : 10,
    triggerTime : [20, 20],
    displayCountLimit : 40,
    category : simcity.TickerCategories.kGeneric28
  },
  1352952059 : {
    stringID : 273388231,
    queries : {
      education_specialized : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Education],
      NumGradeSchoolBases : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfGradeSchoolBases]
    },
    test : function (a) {
      return 1 === a.education_specialized && 1 <= a.NumGradeSchoolBases
    },
    importance : 5,
    triggerTime : [300, 500],
    displayCountLimit : 1,
    category : simcity.TickerCategories.kGeneric6
  },
  3912979267 : {
    stringID : 3625358573,
    queries : {
      education_specialized : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Education],
      nuke : [simcity.kDataBinAmount, simcity.kResourceIDPower_NumberOfNuclearPowerPlants]
    },
    test : function (a) {
      return 1 === a.education_specialized && 1 <= a.nuke
    },
    importance : 5,
    triggerTime : [300, 500],
    displayCountLimit : 1,
    category : simcity.TickerCategories.kGeneric6
  },
  1086865800 : {
    stringID : 1148522316,
    queries : {
      education_specialized : [simcity.kDataResourceAmount,
        simcity.kResourceIDSpecialization_Education],
      deptOfEdu : [simcity.kDataBinAmount, simcity.kResourceIDHQ_CityHall_Education_Module_IsOn]
    },
    test : function (a) {
      return 1 === a.education_specialized && 1 === a.deptOfEdu
    },
    importance : 5,
    triggerTime : [300, 500],
    displayCountLimit : 1,
    category : simcity.TickerCategories.kGeneric6
  },
  3755975519 : {
    stringID : 1049121891,
    queries : {
      education_specialized : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Education],
      NumberOfHighSchoolBases : [simcity.kDataResourceAmount, simcity.kResourceIDNumberOfHighSchoolBases]
    },
    test : function (a) {
      return 1 === a.education_specialized && 1 <= a.NumberOfHighSchoolBases
    },
    importance : 5,
    triggerTime : [300, 500],
    displayCountLimit : 1,
    category : simcity.TickerCategories.kGeneric6
  },
  650782 : {
    stringID : 425389498,
    queries : {
      education_specialized : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Education],
      numberOfHighSchoolGyms : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfHighSchoolGyms],
      libraries : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfLibraries]
    },
    test : function (a) {
      return 1 ===
      a.education_specialized && 1 <= a.numberOfHighSchoolGyms && 1 <= a.libraries
    },
    importance : 5,
    triggerTime : [300, 500],
    displayCountLimit : 1,
    category : simcity.TickerCategories.kGeneric6
  },
  2679869757 : {
    stringID : 3359711705,
    queries : {
      education_specialized : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Education],
      NumberOfCollegeBases : [simcity.kDataResourceAmount, simcity.kResourceIDNumberOfCollegeBases]
    },
    test : function (a) {
      return 1 === a.education_specialized && 1 <= a.NumberOfCollegeBases
    },
    importance : 5,
    triggerTime : [300,
      500],
    displayCountLimit : 1,
    category : simcity.TickerCategories.kGeneric6
  },
  3560657356 : {
    stringID : 530858440,
    queries : {
      education_specialized : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Education],
      university : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfUniversities]
    },
    test : function (a) {
      return 1 === a.education_specialized && 1 <= a.university
    },
    importance : 5,
    triggerTime : [300, 500],
    displayCountLimit : 1,
    category : simcity.TickerCategories.kGeneric6
  },
  3162950861 : {
    stringID : 1593087349,
    queries : {
      guided : [simcity.kDataResourceAmount,
        simcity.kResourceIDSpecialization_Guided],
      NumberOfUniversities : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfUniversities]
    },
    test : function (a) {
      return 0 === a.guided && 0 === a.NumberOfUniversities
    },
    importance : 5,
    triggerTime : [300, 900],
    displayCountLimit : 1,
    category : simcity.TickerCategories.kGeneric6
  },
  3172445582 : {
    stringID : 876056814,
    localizedPopOutText : 1982624413,
    importance : 8,
    triggerTime : [100, 140],
    displayCountLimit : 10,
    category : simcity.TickerCategories.kGeneric29
  },
  3024572645 : {
    stringID : 2634763815,
    localizedPopOutText : 212948302,
    importance : 8,
    triggerTime : [100, 140],
    displayCountLimit : 10,
    category : simcity.TickerCategories.kGeneric30
  },
  1664877296 : {
    stringID : 3669431012,
    localizedPopOutText : 422114907,
    importance : 8,
    triggerTime : [100, 140],
    displayCountLimit : 10,
    category : simcity.TickerCategories.kGeneric29
  },
  813626371 : {
    stringID : 1527300745,
    localizedPopOutText : 49775144,
    importance : 8,
    triggerTime : [100, 140],
    displayCountLimit : 10,
    category : simcity.TickerCategories.kGeneric30
  },
  3045040548 : {
    stringID : 24630284,
    localizedPopOutText : 1292337171,
    importance : 8,
    triggerTime : [100, 140],
    displayCountLimit : 10,
    category : simcity.TickerCategories.kGeneric29
  },
  452126727 : {
    stringID : 3014904449,
    localizedPopOutText : 4243522320,
    importance : 8,
    triggerTime : [100, 140],
    displayCountLimit : 10,
    category : simcity.TickerCategories.kGeneric31
  },
  3102886986 : {
    stringID : 3388288302,
    localizedPopOutText : 3801519197,
    importance : 8,
    triggerTime : [100, 140],
    displayCountLimit : 10,
    category : simcity.TickerCategories.kGeneric29
  },
  938476001 : {
    stringID : 2292289639,
    localizedPopOutText : 2148043534,
    importance : 8,
    triggerTime : [100,
      140],
    displayCountLimit : 10,
    category : simcity.TickerCategories.kGeneric31
  },
  3451080315 : {
    stringID : 1344395625,
    localizedPopOutText : 3878867464,
    importance : 8,
    triggerTime : [100, 140],
    displayCountLimit : 10,
    category : simcity.TickerCategories.kGeneric29
  },
  793375054 : {
    stringID : 3846303986,
    localizedPopOutText : 3222211497,
    importance : 8,
    triggerTime : [100, 140],
    displayCountLimit : 10,
    category : simcity.TickerCategories.kGeneric32
  },
  4146082347 : {
    stringID : 942439677,
    localizedPopOutText : 1178884644,
    importance : 8,
    triggerTime : [100, 140],
    displayCountLimit : 10,
    category : simcity.TickerCategories.kGeneric29
  },
  2500531390 : {
    stringID : 3686868934,
    localizedPopOutText : 1958288901,
    importance : 8,
    triggerTime : [100, 140],
    displayCountLimit : 10,
    category : simcity.TickerCategories.kGeneric32
  },
  108845600 : {
    stringID : 2319509428,
    localizedPopOutText : 959405515,
    importance : 8,
    triggerTime : [100, 140],
    displayCountLimit : 10,
    category : simcity.TickerCategories.kGeneric29
  },
  1040548979 : {
    stringID : 3864037529,
    localizedPopOutText : 3616787928,
    importance : 8,
    triggerTime : [100, 140],
    displayCountLimit : 10,
    category : simcity.TickerCategories.kGeneric32
  },
  2931558408 : {
    stringID : 2618617088,
    localizedPopOutText : 954748447,
    importance : 8,
    triggerTime : [100, 140],
    displayCountLimit : 10,
    category : simcity.TickerCategories.kGeneric29
  },
  3044592107 : {
    stringID : 3541338789,
    localizedPopOutText : 1932239932,
    importance : 8,
    triggerTime : [100, 140],
    displayCountLimit : 10,
    category : simcity.TickerCategories.kGeneric33
  },
  3738875514 : {
    stringID : 577705306,
    localizedPopOutText : 1993022913,
    importance : 8,
    triggerTime : [100, 140],
    displayCountLimit : 10,
    category : simcity.TickerCategories.kGeneric29
  },
  2683538385 : {
    stringID : 1140007571,
    localizedPopOutText : 4044169138,
    importance : 8,
    triggerTime : [100, 140],
    displayCountLimit : 10,
    category : simcity.TickerCategories.kGeneric30
  },
  1706339152 : {
    stringID : 1707896182,
    queries : {
      RCIType : [simcity.kDataBinAmount, simcity.kResourceIDCW1D2]
    },
    test : function (a) {
      return 0 < a.RCIType
    },
    importance : 5,
    triggerTime : [10, 10],
    displayCountLimit : 1,
    category : simcity.TickerCategories.kGeneric6
  },
  1706339153 : {
    stringID : 3671422021,
    queries : {
      RCIType : [simcity.kDataBinAmount, simcity.kResourceIDCW1D3]
    },
    test : function (a) {
      return 0 < a.RCIType
    },
    importance : 5,
    triggerTime : [10, 10],
    displayCountLimit : 1,
    category : simcity.TickerCategories.kGeneric6
  },
  2008189200 : {
    stringID : 1012703494,
    queries : {
      RCIType : [simcity.kDataBinAmount, simcity.kResourceIDCW2D1]
    },
    test : function (a) {
      return 0 < a.RCIType
    },
    importance : 5,
    triggerTime : [10, 10],
    displayCountLimit : 1,
    category : simcity.TickerCategories.kGeneric6
  },
  2008189203 : {
    stringID : 2815110751,
    queries : {
      RCIType : [simcity.kDataBinAmount, simcity.kResourceIDCW2D2]
    },
    test : function (a) {
      return 0 < a.RCIType
    },
    importance : 5,
    triggerTime : [10, 10],
    displayCountLimit : 1,
    category : simcity.TickerCategories.kGeneric6
  },
  2008189202 : {
    stringID : 82586552,
    queries : {
      RCIType : [simcity.kDataBinAmount, simcity.kResourceIDCW2D3]
    },
    test : function (a) {
      return 0 < a.RCIType
    },
    importance : 5,
    triggerTime : [10, 10],
    displayCountLimit : 1,
    category : simcity.TickerCategories.kGeneric6
  },
  1370492553 : {
    stringID : 3862896077,
    queries : {
      RCIType : [simcity.kDataBinAmount, simcity.kResourceIDCW3D1]
    },
    test : function (a) {
      return 0 < a.RCIType
    },
    importance : 5,
    triggerTime : [10, 10],
    displayCountLimit : 1,
    category : simcity.TickerCategories.kGeneric6
  },
  1370492554 : {
    stringID : 190797840,
    queries : {
      RCIType : [simcity.kDataBinAmount, simcity.kResourceIDCW3D2]
    },
    test : function (a) {
      return 0 < a.RCIType
    },
    importance : 5,
    triggerTime : [10, 10],
    displayCountLimit : 1,
    category : simcity.TickerCategories.kGeneric6
  },
  1370492555 : {
    stringID : 3614792215,
    queries : {
      RCIType : [simcity.kDataBinAmount, simcity.kResourceIDCW3D3]
    },
    test : function (a) {
      return 0 < a.RCIType
    },
    importance : 5,
    triggerTime : [10, 10],
    displayCountLimit : 1,
    category : simcity.TickerCategories.kGeneric6
  },
  4269770864 : {
    stringID : 2357287060,
    queries : {
      RCIType : [simcity.kDataBinAmount, simcity.kResourceIDIW1D2]
    },
    test : function (a) {
      return 0 < a.RCIType
    },
    importance : 5,
    triggerTime : [10, 10],
    displayCountLimit : 1,
    category : simcity.TickerCategories.kGeneric6
  },
  4269770865 : {
    stringID : 863291179,
    queries : {
      RCIType : [simcity.kDataBinAmount, simcity.kResourceIDIW1D3]
    },
    test : function (a) {
      return 0 < a.RCIType
    },
    importance : 5,
    triggerTime : [10, 10],
    displayCountLimit : 1,
    category : simcity.TickerCategories.kGeneric6
  },
  276550448 : {
    stringID : 1737986764,
    queries : {
      RCIType : [simcity.kDataBinAmount,
        simcity.kResourceIDIW2D1]
    },
    test : function (a) {
      return 0 < a.RCIType
    },
    importance : 5,
    triggerTime : [10, 10],
    displayCountLimit : 1,
    category : simcity.TickerCategories.kGeneric6
  },
  276550451 : {
    stringID : 3949176153,
    queries : {
      RCIType : [simcity.kDataBinAmount, simcity.kResourceIDIW2D2]
    },
    test : function (a) {
      return 0 < a.RCIType
    },
    importance : 5,
    triggerTime : [10, 10],
    displayCountLimit : 1,
    category : simcity.TickerCategories.kGeneric6
  },
  276550450 : {
    stringID : 1014853946,
    queries : {
      RCIType : [simcity.kDataBinAmount, simcity.kResourceIDIW2D3]
    },
    test : function (a) {
      return 0 <
      a.RCIType
    },
    importance : 5,
    triggerTime : [10, 10],
    displayCountLimit : 1,
    category : simcity.TickerCategories.kGeneric6
  },
  3933821097 : {
    stringID : 1684496179,
    queries : {
      RCIType : [simcity.kDataBinAmount, simcity.kResourceIDIW3D1]
    },
    test : function (a) {
      return 0 < a.RCIType
    },
    importance : 5,
    triggerTime : [10, 10],
    displayCountLimit : 1,
    category : simcity.TickerCategories.kGeneric6
  },
  3933821098 : {
    stringID : 1809003594,
    queries : {
      RCIType : [simcity.kDataBinAmount, simcity.kResourceIDIW3D2]
    },
    test : function (a) {
      return 0 < a.RCIType
    },
    importance : 5,
    triggerTime : [10,
      10],
    displayCountLimit : 1,
    category : simcity.TickerCategories.kGeneric6
  },
  3933821099 : {
    stringID : 4077763881,
    queries : {
      RCIType : [simcity.kDataBinAmount, simcity.kResourceIDIW3D3]
    },
    test : function (a) {
      return 0 < a.RCIType
    },
    importance : 5,
    triggerTime : [10, 10],
    displayCountLimit : 1,
    category : simcity.TickerCategories.kGeneric6
  },
  3886424745 : {
    stringID : 2913326493,
    queries : {
      RCIType : [simcity.kDataBinAmount, simcity.kResourceIDRW1D2]
    },
    test : function (a) {
      return 0 < a.RCIType
    },
    importance : 5,
    triggerTime : [10, 10],
    displayCountLimit : 1,
    category : simcity.TickerCategories.kGeneric6
  },
  3886424744 : {
    stringID : 2843964366,
    queries : {
      RCIType : [simcity.kDataBinAmount, simcity.kResourceIDRW1D3]
    },
    test : function (a) {
      return 0 < a.RCIType
    },
    importance : 5,
    triggerTime : [10, 10],
    displayCountLimit : 1,
    category : simcity.TickerCategories.kGeneric6
  },
  3047102481 : {
    stringID : 831439109,
    queries : {
      RCIType : [simcity.kDataBinAmount, simcity.kResourceIDRW2D1]
    },
    test : function (a) {
      return 0 < a.RCIType
    },
    importance : 5,
    triggerTime : [10, 10],
    displayCountLimit : 1,
    category : simcity.TickerCategories.kGeneric6
  },
  3047102482 : {
    stringID : 2657220968,
    queries : {
      RCIType : [simcity.kDataBinAmount, simcity.kResourceIDRW2D2]
    },
    test : function (a) {
      return 0 < a.RCIType
    },
    importance : 5,
    triggerTime : [10, 10],
    displayCountLimit : 1,
    category : simcity.TickerCategories.kGeneric6
  },
  3047102483 : {
    stringID : 2078708815,
    queries : {
      RCIType : [simcity.kDataBinAmount, simcity.kResourceIDRW2D3]
    },
    test : function (a) {
      return 0 < a.RCIType
    },
    importance : 5,
    triggerTime : [10, 10],
    displayCountLimit : 1,
    category : simcity.TickerCategories.kGeneric6
  },
  3684799160 : {
    stringID : 2499816542,
    queries : {
      RCIType : [simcity.kDataBinAmount,
        simcity.kResourceIDRW3D1]
    },
    test : function (a) {
      return 0 < a.RCIType
    },
    importance : 5,
    triggerTime : [10, 10],
    displayCountLimit : 1,
    category : simcity.TickerCategories.kGeneric6
  },
  3684799163 : {
    stringID : 457696887,
    queries : {
      RCIType : [simcity.kDataBinAmount, simcity.kResourceIDRW3D2]
    },
    test : function (a) {
      return 0 < a.RCIType
    },
    importance : 5,
    triggerTime : [10, 10],
    displayCountLimit : 1,
    category : simcity.TickerCategories.kGeneric6
  },
  3684799162 : {
    stringID : 945685872,
    queries : {
      RCIType : [simcity.kDataBinAmount, simcity.kResourceIDRW3D3]
    },
    test : function (a) {
      return 0 <
      a.RCIType
    },
    importance : 5,
    triggerTime : [10, 10],
    displayCountLimit : 1,
    category : simcity.TickerCategories.kGeneric6
  },
  386334239 : {
    stringID : 9054379,
    localizedPopOutText : 4026105914,
    importance : 8,
    triggerTime : [300, 900],
    unitName : !0,
    category : simcity.TickerCategories.kGeneric34
  },
  3704729337 : {
    stringID : 1400879162,
    localizedPopOutText : 3989938081,
    importance : 10,
    triggerTime : [10, 10],
    displayCountLimit : 1,
    category : simcity.TickerCategories.kGeneric35
  },
  4256661998 : {
    stringID : 3927947641,
    localizedPopOutText : 195449016,
    importance : 10,
    triggerTime : [300,
      500],
    category : simcity.TickerCategories.kGeneric36
  },
  2057105206 : {
    stringID : 1907472020,
    localizedPopOutText : 4231417643,
    importance : 10,
    triggerTime : [10, 10],
    displayCountLimit : 1,
    category : simcity.TickerCategories.kGeneric37
  },
  553803811 : {
    stringID : 1907472020,
    localizedPopOutText : 3140607406,
    importance : 10,
    triggerTime : [10, 10],
    displayCountLimit : 1,
    category : simcity.TickerCategories.kGeneric38
  },
  2552163895 : {
    stringID : 271753890,
    localizedPopOutText : 1112660537,
    importance : 8,
    triggerTime : [300, 900],
    unitName : !0,
    category : simcity.TickerCategories.kGeneric39
  },
  1394842079 : {
    stringID : 837702387,
    localizedPopOutText : 2843592466,
    importance : 8,
    triggerTime : [300, 900],
    category : simcity.TickerCategories.kGeneric39
  },
  2287756871 : {
    stringID : 1897402331,
    localizedPopOutText : 3093627594,
    importance : 8,
    triggerTime : [300, 900],
    unitName : !0,
    category : simcity.TickerCategories.kGeneric39
  },
  2851900225 : {
    stringID : 2834654E3,
    localizedPopOutText : 4136285103,
    importance : 8,
    triggerTime : [300, 900],
    unitName : !0,
    category : simcity.TickerCategories.kGeneric39
  },
  1645829750 : {
    stringID : 3730349535,
    localizedPopOutText : 780289782,
    importance : 10,
    triggerTime : [10, 10],
    displayCountLimit : 1,
    category : simcity.TickerCategories.kGeneric40
  },
  3288367759 : {
    stringID : 1905302148,
    localizedPopOutText : 85932283,
    importance : 10,
    triggerTime : [300, 500],
    displayCountLimit : 5,
    category : simcity.TickerCategories.kGeneric41
  },
  165457269 : {
    stringID : 2609999572,
    localizedPopOutText : 358693355,
    importance : 10,
    triggerTime : [300, 500],
    displayCountLimit : 5,
    category : simcity.TickerCategories.kGeneric41
  },
  1607336928 : {
    stringID : 3650737555,
    localizedPopOutText : 85932283,
    importance : 10,
    triggerTime : [300, 500],
    displayCountLimit : 5,
    category : simcity.TickerCategories.kGeneric42
  },
  4120749035 : {
    stringID : 751599288,
    localizedPopOutText : 1253478215,
    importance : 10,
    triggerTime : [300, 500],
    displayCountLimit : 3,
    category : simcity.TickerCategories.kGeneric43
  },
  2383687319 : {
    stringID : 2412897707,
    localizedPopOutText : 4097560378,
    importance : 10,
    triggerTime : [10, 10],
    displayCountLimit : 1,
    category : simcity.TickerCategories.kGeneric44
  },
  4147007240 : {
    stringID : 2412897707,
    localizedPopOutText : 3109685205,
    importance : 10,
    triggerTime : [10,
      10],
    displayCountLimit : 1,
    category : simcity.TickerCategories.kGeneric44
  },
  4247238887 : {
    stringID : 3517482139,
    localizedPopOutText : 2186984970,
    importance : 8,
    triggerTime : [300, 900],
    unitName : !0,
    category : simcity.TickerCategories.kGeneric45
  },
  3171144225 : {
    localizedPopOutText : 672061682,
    importance : 10,
    triggerTime : [300, 500],
    displayCountLimit : 10,
    unitName : !0,
    category : simcity.TickerCategories.kGeneric46
  },
  2062849511 : {
    localizedPopOutText : 696129156,
    importance : 10,
    triggerTime : [300, 500],
    displayCountLimit : 10,
    unitName : !0,
    category : simcity.TickerCategories.kGeneric47
  },
  2776390503 : {
    localizedPopOutText : 3474927084,
    importance : 10,
    triggerTime : [300, 500],
    displayCountLimit : 10,
    unitName : !0,
    category : simcity.TickerCategories.kGeneric48
  },
  2676572717 : {
    localizedPopOutText : 2564614568,
    importance : 8,
    triggerTime : [300, 900],
    unitName : !0,
    category : simcity.TickerCategories.kGeneric49
  },
  741629676 : {
    stringID : 2806754922,
    localizedPopOutText : 4194870065,
    importance : 8,
    triggerTime : [300, 900],
    unitName : !0,
    category : simcity.TickerCategories.kGeneric50
  },
  766203056 : {
    stringID : 3479226875,
    localizedPopOutText : 4106438762,
    importance : 10,
    triggerTime : [300, 500],
    displayCountLimit : 1,
    category : simcity.TickerCategories.kGeneric51
  },
  4046738029 : {
    localizedPopOutText : 3956459487,
    importance : 10,
    triggerTime : [300, 500],
    displayCountLimit : 10,
    category : simcity.TickerCategories.kGeneric52
  },
  3213653837 : {
    localizedPopOutText : 2971304887,
    importance : 10,
    triggerTime : [300, 500],
    displayCountLimit : 5,
    category : simcity.TickerCategories.kGeneric53
  },
  1386102563 : {
    localizedPopOutText : 896968703,
    importance : 10,
    triggerTime : [300, 500],
    displayCountLimit : 5,
    category : simcity.TickerCategories.kGeneric53
  },
  1067401634 : {
    localizedPopOutText : 683142406,
    importance : 10,
    triggerTime : [300, 500],
    displayCountLimit : 5,
    category : simcity.TickerCategories.kGeneric53
  },
  2252877243 : {
    stringID : 2273535175,
    localizedPopOutText : 1313618414,
    importance : 10,
    triggerTime : [10, 10],
    displayCountLimit : 1,
    category : simcity.TickerCategories.kGeneric54
  },
  1866320540 : {
    stringID : 2273535175,
    localizedPopOutText : 3757386057,
    importance : 10,
    triggerTime : [10, 10],
    displayCountLimit : 1,
    category : simcity.TickerCategories.kGeneric54
  },
  2888378838 : {
    stringID : 2779864589,
    localizedPopOutText : 2422030420,
    importance : 10,
    triggerTime : [300, 500],
    displayCountLimit : 1,
    category : simcity.TickerCategories.kGeneric55
  },
  3009035561 : {
    stringID : 4275254696,
    localizedPopOutText : 2368444183,
    importance : 8,
    triggerTime : [300, 900],
    unitName : !0,
    category : simcity.TickerCategories.kGeneric56
  },
  812747997 : {
    localizedPopOutText : 1581182191,
    importance : 10,
    triggerTime : [10, 10],
    displayCountLimit : 10,
    category : simcity.TickerCategories.kGeneric57
  },
  3810487919 : {
    stringID : 1689287254,
    localizedPopOutText : 4023163637,
    importance : 10,
    triggerTime : [300, 500],
    displayCountLimit : 5,
    category : simcity.TickerCategories.kGeneric58
  },
  3926157269 : {
    localizedPopOutText : 1764469997,
    importance : 10,
    triggerTime : [300, 500],
    displayCountLimit : 5,
    category : simcity.TickerCategories.kGeneric58
  },
  2738122816 : {
    localizedPopOutText : 1541244744,
    importance : 10,
    triggerTime : [300, 500],
    displayCountLimit : 5,
    category : simcity.TickerCategories.kGeneric59
  },
  2609853804 : {
    localizedPopOutText : 1297165622,
    importance : 10,
    triggerTime : [10, 10],
    displayCountLimit : 10,
    category : simcity.TickerCategories.kGeneric55
  },
  3825521097 : {
    stringID : 217096821,
    localizedPopOutText : 91725164,
    importance : 10,
    triggerTime : [10, 10],
    displayCountLimit : 1,
    category : simcity.TickerCategories.kGeneric60
  },
  3462689662 : {
    stringID : 217096821,
    localizedPopOutText : 3349371251,
    importance : 10,
    triggerTime : [10, 10],
    displayCountLimit : 1,
    category : simcity.TickerCategories.kGeneric60
  },
  2937274104 : {
    stringID : 2370396834,
    localizedPopOutText : 3567262265,
    importance : 2,
    triggerTime : [300, 500],
    displayCountLimit : 3,
    category : simcity.TickerCategories.kGeneric61
  },
  1205305622 : {
    stringID : 705173484,
    localizedPopOutText : 3450174963,
    importance : 1,
    triggerTime : [3300, 3300],
    displayCountLimit : 1,
    isRegional : !0,
    category : simcity.TickerCategories.kGeneric62
  },
  2344654164 : {
    stringID : 2673657973,
    localizedPopOutText : 287891308,
    importance : 1,
    triggerTime : [3300, 3300],
    displayCountLimit : 1,
    isRegional : !0,
    category : simcity.TickerCategories.kGeneric62
  },
  567903298 : {
    stringID : 584444512,
    localizedPopOutText : 71201663,
    importance : 1,
    triggerTime : [3300, 3300],
    displayCountLimit : 1,
    isRegional : !0,
    category : simcity.TickerCategories.kGeneric63
  },
  2825610023 : {
    stringID : 2440143603,
    localizedPopOutText : 268252946,
    importance : 1,
    triggerTime : [3300, 3300],
    displayCountLimit : 1,
    isRegional : !0,
    category : simcity.TickerCategories.kGeneric62
  },
  2473304163 : {
    stringID : 3373452564,
    localizedPopOutText : 83713707,
    importance : 1,
    triggerTime : [3300, 3300],
    displayCountLimit : 1,
    isRegional : !0,
    category : simcity.TickerCategories.kGeneric62
  },
  2389244847 : {
    stringID : 1826186679,
    localizedPopOutText : 860866558,
    importance : 1,
    triggerTime : [3300, 3300],
    displayCountLimit : 1,
    isRegional : !0,
    category : simcity.TickerCategories.kGeneric63
  },
  736740220 : {
    stringID : 3635404267,
    localizedPopOutText : 3873683450,
    queries : {
      examsPassedTodayE2 : [simcity.kDataBinAmount, simcity.kResourceIDExamsPassedTodayE2],
      examsPassedTodayE3 : [simcity.kDataBinAmount, simcity.kResourceIDExamsPassedTodayE3],
      localStudents : [simcity.kDataBinAmount, simcity.kResourceIDLocalStudentsYesterday]
    },
    test : function (a) {
      return 100 < a.examsPassedTodayE2 + a.examsPassedTodayE3 - a.localStudents
    },
    importance : 1,
    triggerTime : [3300, 3300],
    displayCountLimit : 1,
    isRegional : !0,
    category : simcity.TickerCategories.kGeneric64
  },
  837100762 : {
    stringID : 3105526924,
    localizedPopOutText : 3242737043,
    queries : {
      examsPassedTodayE2 : [simcity.kDataBinAmount, simcity.kResourceIDExamsPassedTodayE2],
      examsPassedTodayE3 : [simcity.kDataBinAmount, simcity.kResourceIDExamsPassedTodayE3],
      localStudents : [simcity.kDataBinAmount, simcity.kResourceIDLocalStudentsYesterday]
    },
    test : function (a) {
      return 1E3 < a.examsPassedTodayE2 + a.examsPassedTodayE3 - a.localStudents
    },
    importance : 1,
    triggerTime : [3300, 3300],
    displayCountLimit : 1,
    isRegional : !0,
    category : simcity.TickerCategories.kGeneric64
  },
  1374436624 : {
    stringID : 972974575,
    localizedPopOutText : 2039787430,
    queries : {
      examsPassedTodayE2 : [simcity.kDataBinAmount, simcity.kResourceIDExamsPassedTodayE2],
      examsPassedTodayE3 : [simcity.kDataBinAmount, simcity.kResourceIDExamsPassedTodayE3],
      localStudents : [simcity.kDataBinAmount, simcity.kResourceIDLocalStudentsYesterday]
    },
    test : function (a) {
      return 500 < a.examsPassedTodayE2 + a.examsPassedTodayE3 - a.localStudents
    },
    importance : 1,
    triggerTime : [3300, 3300],
    displayCountLimit : 1,
    isRegional : !0,
    category : simcity.TickerCategories.kGeneric65
  },
  835848277 : {
    stringID : 2825869252,
    localizedPopOutText : 46737851,
    importance : 1,
    triggerTime : [3300, 3300],
    displayCountLimit : 1,
    isRegional : !0,
    category : simcity.TickerCategories.kGeneric64
  },
  1727318385 : {
    stringID : 1590540845,
    localizedPopOutText : 1752109556,
    importance : 1,
    triggerTime : [3300, 3300],
    displayCountLimit : 1,
    isRegional : !0,
    category : simcity.TickerCategories.kGeneric64
  },
  198151645 : {
    stringID : 3124374968,
    localizedPopOutText : 2066031687,
    importance : 1,
    triggerTime : [3300, 3300],
    displayCountLimit : 1,
    isRegional : !0,
    category : simcity.TickerCategories.kGeneric66
  },
  3022974907 : {
    stringID : 2448475180,
    localizedPopOutText : 2950717363,
    importance : 1,
    triggerTime : [3300, 3300],
    displayCountLimit : 1,
    isRegional : !0,
    category : simcity.TickerCategories.kGeneric67
  },
  635281231 : {
    stringID : 607720885,
    localizedPopOutText : 230501164,
    importance : 1,
    triggerTime : [3300, 3300],
    displayCountLimit : 1,
    isRegional : !0,
    category : simcity.TickerCategories.kGeneric67
  },
  3660377443 : {
    stringID : 2752100512,
    localizedPopOutText : 2508716607,
    importance : 1,
    triggerTime : [3300, 3300],
    displayCountLimit : 1,
    isRegional : !0,
    category : simcity.TickerCategories.kGeneric67
  },
  3305824498 : {
    stringID : 381103667,
    localizedPopOutText : 1139684306,
    importance : 1,
    triggerTime : [3300, 3300],
    displayCountLimit : 1,
    isRegional : !0,
    category : simcity.TickerCategories.kGeneric67
  },
  3339688296 : {
    stringID : 1970440788,
    localizedPopOutText : 3162058859,
    importance : 1,
    triggerTime : [3300, 3300],
    displayCountLimit : 1,
    isRegional : !0,
    category : simcity.TickerCategories.kGeneric67
  },
  4010631518 : {
    stringID : 4020537335,
    localizedPopOutText : 3647398846,
    importance : 1,
    triggerTime : [3300, 3300],
    displayCountLimit : 1,
    isRegional : !0,
    category : simcity.TickerCategories.kGeneric67
  },
  2167306996 : {
    stringID : 2436818621,
    localizedPopOutText : 1788551268,
    importance : 5,
    triggerTime : [30, 50],
    category : simcity.TickerCategories.kGeneric68
  },
  296702791 : {
    stringID : 600731664,
    localizedPopOutText : 873617679,
    importance : 5,
    triggerTime : [30, 50],
    category : simcity.TickerCategories.kGeneric68
  },
  1013991476 : {
    stringID : 3624614369,
    localizedPopOutText : 1390475376,
    importance : 5,
    triggerTime : [30, 50],
    category : simcity.TickerCategories.kGeneric68
  },
  788503175 : {
    stringID : 3643125508,
    localizedPopOutText : 4129837691,
    importance : 5,
    triggerTime : [30,
      50],
    category : simcity.TickerCategories.kGeneric68
  },
  902874420 : {
    stringID : 2577544845,
    localizedPopOutText : 768574932,
    importance : 5,
    triggerTime : [30, 50],
    category : simcity.TickerCategories.kGeneric68
  },
  3114420103 : {
    stringID : 3347313952,
    localizedPopOutText : 1654606783,
    importance : 5,
    triggerTime : [30, 50],
    category : simcity.TickerCategories.kGeneric68
  },
  256022521 : {
    stringID : 3463507354,
    localizedPopOutText : 1637650817,
    importance : 5,
    triggerTime : [30, 50],
    category : simcity.TickerCategories.kGeneric68
  },
  3485815114 : {
    stringID : 1325988547,
    localizedPopOutText : 4255315778,
    importance : 5,
    triggerTime : [30, 50],
    category : simcity.TickerCategories.kGeneric68
  },
  836684252 : {
    stringID : 1140620561,
    localizedPopOutText : 3046885056,
    importance : 5,
    triggerTime : [30, 50],
    category : simcity.TickerCategories.kGeneric68
  },
  2865422159 : {
    stringID : 3496764276,
    localizedPopOutText : 2568865291,
    importance : 5,
    triggerTime : [30, 50],
    category : simcity.TickerCategories.kGeneric68
  },
  2326840166 : {
    stringID : 2287718827,
    localizedPopOutText : 2420519738,
    importance : 5,
    triggerTime : [30, 50],
    category : simcity.TickerCategories.kGeneric68
  },
  4039290501 : {
    stringID : 1488657618,
    localizedPopOutText : 2404725769,
    importance : 5,
    triggerTime : [30, 50],
    category : simcity.TickerCategories.kGeneric68
  },
  3229982503 : {
    stringID : 3433814529,
    localizedPopOutText : 3275240848,
    importance : 5,
    triggerTime : [30, 50],
    category : simcity.TickerCategories.kGeneric69
  },
  293762772 : {
    stringID : 3672745380,
    localizedPopOutText : 814151323,
    importance : 5,
    triggerTime : [30, 50],
    category : simcity.TickerCategories.kGeneric70
  },
  3471514620 : {
    stringID : 487338200,
    localizedPopOutText : 2501341543,
    importance : 5,
    triggerTime : [30,
      50],
    category : simcity.TickerCategories.kGeneric69
  },
  3293942639 : {
    stringID : 892415189,
    localizedPopOutText : 2465026380,
    importance : 5,
    triggerTime : [30, 50],
    category : simcity.TickerCategories.kGeneric70
  },
  3139374469 : {
    stringID : 1328313483,
    localizedPopOutText : 1137726106,
    importance : 5,
    triggerTime : [30, 50],
    category : simcity.TickerCategories.kGeneric69
  },
  42789526 : {
    stringID : 2527873586,
    localizedPopOutText : 320450665,
    importance : 5,
    triggerTime : [30, 50],
    category : simcity.TickerCategories.kGeneric70
  },
  223162703 : {
    stringID : 2962875303,
    localizedPopOutText : 448260558,
    importance : 5,
    triggerTime : [30, 50],
    category : simcity.TickerCategories.kGeneric69
  },
  2058662332 : {
    stringID : 4288864126,
    localizedPopOutText : 2598005645,
    importance : 5,
    triggerTime : [30, 50],
    category : simcity.TickerCategories.kGeneric70
  },
  488998310 : {
    stringID : 1215787526,
    localizedPopOutText : 236736453,
    importance : 5,
    triggerTime : [30, 50],
    category : simcity.TickerCategories.kGeneric71
  },
  1000001221 : {
    stringID : 1521939279,
    localizedPopOutText : 455252614,
    importance : 5,
    triggerTime : [30, 50],
    category : simcity.TickerCategories.kGeneric71
  },
  3339309328 : {
    stringID : 2450799170,
    localizedPopOutText : 3359241689,
    importance : 5,
    triggerTime : [30, 50],
    category : simcity.TickerCategories.kGeneric72
  },
  569481875 : {
    stringID : 3662933611,
    localizedPopOutText : 4079871354,
    importance : 5,
    triggerTime : [30, 50],
    category : simcity.TickerCategories.kGeneric72
  },
  214014959 : {
    stringID : 296127787,
    localizedPopOutText : 1231948218,
    importance : 5,
    triggerTime : [30, 50],
    category : simcity.TickerCategories.kGeneric73
  },
  2673439836 : {
    stringID : 474554450,
    localizedPopOutText : 2119475849,
    importance : 5,
    triggerTime : [30,
      50],
    category : simcity.TickerCategories.kGeneric74
  },
  3065292143 : {
    stringID : 750532553,
    localizedPopOutText : 1174824936,
    importance : 5,
    triggerTime : [30, 50],
    category : simcity.TickerCategories.kGeneric75
  },
  898033116 : {
    stringID : 2332760268,
    localizedPopOutText : 1062586963,
    importance : 5,
    triggerTime : [30, 50],
    category : simcity.TickerCategories.kGeneric75
  },
  4119722366 : {
    stringID : 3673719986,
    localizedPopOutText : 3680308201,
    importance : 5,
    triggerTime : [30, 50],
    category : simcity.TickerCategories.kGeneric76
  },
  2994741597 : {
    stringID : 2653189403,
    localizedPopOutText : 1691192202,
    importance : 5,
    triggerTime : [30, 50],
    category : simcity.TickerCategories.kGeneric76
  },
  3991231920 : {
    stringID : 745239968,
    localizedPopOutText : 776489279,
    importance : 5,
    triggerTime : [30, 50],
    category : simcity.TickerCategories.kGeneric77
  },
  3344725265 : {
    stringID : 2457611813,
    localizedPopOutText : 2785735356,
    importance : 5,
    triggerTime : [30, 50],
    category : simcity.TickerCategories.kGeneric78
  },
  3236061377 : {
    stringID : 3883253965,
    localizedPopOutText : 1119965076,
    importance : 5,
    triggerTime : [30, 50],
    category : simcity.TickerCategories.kGeneric72
  },
  3685232210 : {
    stringID : 3980214368,
    localizedPopOutText : 678937983,
    importance : 5,
    triggerTime : [30, 50],
    category : simcity.TickerCategories.kGeneric79
  },
  1705678572 : {
    stringID : 1570575720,
    localizedPopOutText : 1050282071,
    importance : 5,
    triggerTime : [30, 50],
    category : simcity.TickerCategories.kGeneric73
  },
  3463571167 : {
    stringID : 1130127845,
    localizedPopOutText : 635143164,
    importance : 5,
    triggerTime : [30, 50],
    category : simcity.TickerCategories.kGeneric80
  },
  2542308469 : {
    stringID : 1782316973,
    localizedPopOutText : 1376204404,
    importance : 5,
    triggerTime : [30,
      50],
    category : simcity.TickerCategories.kGeneric77
  },
  612522118 : {
    stringID : 2763789504,
    localizedPopOutText : 1700330079,
    importance : 5,
    triggerTime : [30, 50],
    category : simcity.TickerCategories.kGeneric81
  },
  1018356190 : {
    localizedPopOutText : 3916215464,
    importance : 1,
    triggerTime : [3300, 3300],
    displayCountLimit : 1,
    isRegional : !0,
    category : simcity.TickerCategories.kGeneric82
  },
  3337463196 : {
    localizedPopOutText : 513949377,
    importance : 1,
    triggerTime : [3300, 3300],
    displayCountLimit : 1,
    isRegional : !0,
    category : simcity.TickerCategories.kGeneric82
  },
  2474060671 : {
    localizedPopOutText : 1285834481,
    importance : 1,
    triggerTime : [3300, 3300],
    displayCountLimit : 1,
    isRegional : !0,
    category : simcity.TickerCategories.kGeneric82
  },
  3467124283 : {
    localizedPopOutText : 1934039370,
    importance : 1,
    triggerTime : [3300, 3300],
    displayCountLimit : 1,
    isRegional : !0,
    category : simcity.TickerCategories.kGeneric82
  },
  3118116995 : {
    stringID : 2594565110,
    localizedPopOutText : 1112740885,
    importance : 5,
    triggerTime : [30, 50],
    category : simcity.TickerCategories.kGeneric83
  },
  1818965712 : {
    stringID : 2384376703,
    localizedPopOutText : 4048637206,
    importance : 5,
    triggerTime : [30, 50],
    category : simcity.TickerCategories.kGeneric84
  },
  117525694 : {
    stringID : 689798823,
    localizedPopOutText : 108323534,
    importance : 5,
    triggerTime : [30, 50],
    category : simcity.TickerCategories.kGeneric83
  },
  1948498333 : {
    stringID : 3729967742,
    localizedPopOutText : 818533517,
    importance : 5,
    triggerTime : [30, 50],
    category : simcity.TickerCategories.kGeneric85
  },
  1919923391 : {
    stringID : 1374009136,
    localizedPopOutText : 3697086383,
    importance : 5,
    triggerTime : [30, 50],
    category : simcity.TickerCategories.kGeneric83
  },
  2146326444 : {
    stringID : 3833598477,
    localizedPopOutText : 834124884,
    importance : 5,
    triggerTime : [30, 50],
    category : simcity.TickerCategories.kGeneric85
  },
  104362725 : {
    stringID : 773845013,
    localizedPopOutText : 3476464652,
    importance : 5,
    triggerTime : [30, 50],
    category : simcity.TickerCategories.kGeneric83
  },
  2754023926 : {
    stringID : 2615391208,
    localizedPopOutText : 1330474967,
    importance : 5,
    triggerTime : [30, 50],
    category : simcity.TickerCategories.kGeneric85
  },
  3563247378 : {
    stringID : 3386357701,
    localizedPopOutText : 307867996,
    importance : 5,
    triggerTime : [30,
      50],
    category : simcity.TickerCategories.kGeneric86
  },
  3986736353 : {
    stringID : 1203807576,
    localizedPopOutText : 4234390247,
    importance : 5,
    triggerTime : [30, 50],
    category : simcity.TickerCategories.kGeneric85
  },
  3372460267 : {
    stringID : 1131787822,
    localizedPopOutText : 2983782237,
    importance : 5,
    triggerTime : [30, 50],
    category : simcity.TickerCategories.kGeneric86
  },
  196003928 : {
    stringID : 2748274967,
    localizedPopOutText : 455346398,
    importance : 5,
    triggerTime : [30, 50],
    category : simcity.TickerCategories.kGeneric85
  },
  2251708498 : {
    stringID : 3380529585,
    localizedPopOutText : 164609760,
    importance : 5,
    triggerTime : [30, 50],
    category : simcity.TickerCategories.kGeneric86
  },
  4027037473 : {
    stringID : 597883796,
    localizedPopOutText : 294712875,
    importance : 5,
    triggerTime : [30, 50],
    category : simcity.TickerCategories.kGeneric86
  },
  664726691 : {
    stringID : 1113798592,
    localizedPopOutText : 2815183711,
    importance : 5,
    triggerTime : [30, 50],
    category : simcity.TickerCategories.kGeneric85
  },
  4086896624 : {
    stringID : 2564447645,
    localizedPopOutText : 741388740,
    importance : 5,
    triggerTime : [30, 50],
    category : simcity.TickerCategories.kGeneric85
  },
  1302522794 : {
    stringID : 2611181279,
    localizedPopOutText : 3118533110,
    importance : 5,
    triggerTime : [30, 50],
    category : simcity.TickerCategories.kGeneric85
  },
  3788916089 : {
    stringID : 2582388022,
    localizedPopOutText : 1756861653,
    importance : 5,
    triggerTime : [30, 50],
    category : simcity.TickerCategories.kGeneric85
  },
  712475373 : {
    stringID : 2302673100,
    localizedPopOutText : 2291483219,
    importance : 5,
    triggerTime : [30, 50],
    category : simcity.TickerCategories.kGeneric85
  },
  1496290846 : {
    stringID : 1152130345,
    localizedPopOutText : 3263912776,
    importance : 5,
    triggerTime : [30, 50],
    category : simcity.TickerCategories.kGeneric85
  },
  865181461 : {
    stringID : 714148598,
    localizedPopOutText : 670988565,
    importance : 5,
    triggerTime : [30, 50],
    category : simcity.TickerCategories.kGeneric85
  },
  2648227878 : {
    stringID : 2533745279,
    localizedPopOutText : 1541431830,
    importance : 5,
    triggerTime : [30, 50],
    category : simcity.TickerCategories.kGeneric85
  },
  3263289223 : {
    stringID : 1367275914,
    localizedPopOutText : 3562329425,
    importance : 5,
    triggerTime : [30, 50],
    category : simcity.TickerCategories.kGeneric85
  },
  360068916 : {
    stringID : 4132054131,
    localizedPopOutText : 3192795026,
    importance : 5,
    triggerTime : [30, 50],
    category : simcity.TickerCategories.kGeneric85
  },
  489908703 : {
    stringID : 907780724,
    localizedPopOutText : 831818507,
    importance : 5,
    triggerTime : [30, 50],
    category : simcity.TickerCategories.kGeneric85
  },
  2087733452 : {
    stringID : 2086482609,
    localizedPopOutText : 882684384,
    importance : 5,
    triggerTime : [30, 50],
    category : simcity.TickerCategories.kGeneric85
  },
  4100655093 : {
    localizedPopOutText : 169922733,
    importance : 5,
    triggerTime : [100, 100],
    isRegional : !0,
    category : simcity.TickerCategories.kGeneric87
  },
  3819042126 : {
    localizedPopOutText : 3247291188,
    importance : 5,
    triggerTime : [100, 100],
    isRegional : !0,
    category : simcity.TickerCategories.kGeneric87
  },
  2359443595 : {
    localizedPopOutText : 1793873937,
    importance : 5,
    triggerTime : [30, 50],
    category : simcity.TickerCategories.kGeneric87
  },
  3191875928 : {
    localizedPopOutText : 2607133870,
    importance : 5,
    triggerTime : [30, 50],
    isRegional : !0,
    category : simcity.TickerCategories.kGeneric87
  },
  1849816363 : {
    localizedPopOutText : 240889393,
    importance : 5,
    triggerTime : [1E4, 1E4],
    displayCountLimit : 3,
    isRegional : !0,
    category : simcity.TickerCategories.kGeneric88
  },
  2179209047 : {
    localizedPopOutText : 2155780581,
    importance : 5,
    triggerTime : [1E4, 1E4],
    displayCountLimit : 3,
    isRegional : !0,
    category : simcity.TickerCategories.kGeneric89
  },
  1019633164 : {
    localizedPopOutText : 2289302572,
    importance : 5,
    triggerTime : [1E4, 1E4],
    displayCountLimit : 3,
    isRegional : !0,
    category : simcity.TickerCategories.kGeneric89
  },
  1615137518 : {
    localizedPopOutText : 1652053912,
    importance : 5,
    triggerTime : [240, 240],
    isRegional : !0,
    category : simcity.TickerCategories.kGeneric90
  },
  1385030164 : {
    localizedPopOutText : 1850651310,
    importance : 5,
    triggerTime : [100, 100],
    isRegional : !0,
    category : simcity.TickerCategories.kGeneric91
  },
  489091125 : {
    localizedPopOutText : 1109717637,
    importance : 5,
    triggerTime : [100, 100],
    isRegional : !0,
    category : simcity.TickerCategories.kGeneric91
  },
  1174652592 : {
    localizedPopOutText : 1644865992,
    importance : 5,
    triggerTime : [30, 50],
    category : simcity.TickerCategories.kGeneric92
  },
  714915676 : {
    localizedPopOutText : 82595180,
    importance : 5,
    triggerTime : [1E4, 1E4],
    displayCountLimit : 3,
    isRegional : !0,
    category : simcity.TickerCategories.kGeneric93
  },
  2241911229 : {
    localizedPopOutText : 3031806319,
    importance : 5,
    triggerTime : [1E4, 1E4],
    displayCountLimit : 3,
    isRegional : !0,
    category : simcity.TickerCategories.kGeneric94
  },
  3900350469 : {
    localizedPopOutText : 235556425,
    importance : 5,
    triggerTime : [240, 240],
    category : simcity.TickerCategories.kGeneric95
  },
  3477466969 : {
    localizedPopOutText : 646014787,
    importance : 5,
    triggerTime : [300, 900],
    isRegional : !0,
    category : simcity.TickerCategories.kGeneric96
  },
  527284971 : {
    localizedPopOutText : 4247226783,
    importance : 5,
    triggerTime : [30, 50],
    isRegional : !0,
    category : simcity.TickerCategories.kGeneric97
  },
  1091383536 : {
    localizedPopOutText : 4020389466,
    importance : 5,
    triggerTime : [30, 50],
    isRegional : !0,
    category : simcity.TickerCategories.kGeneric98
  },
  2317981561 : {
    localizedPopOutText : 2667027173,
    importance : 5,
    triggerTime : [300, 900],
    isRegional : !0,
    category : simcity.TickerCategories.kGeneric99
  },
  754895330 : {
    localizedPopOutText : 2163248940,
    importance : 5,
    triggerTime : [300, 900],
    isRegional : !0,
    category : simcity.TickerCategories.kGeneric96
  },
  185554269 : {
    localizedPopOutText : 739387759,
    importance : 5,
    triggerTime : [30, 50],
    category : simcity.TickerCategories.kGeneric100
  },
  642788878 : {
    localizedPopOutText : 2667027173,
    importance : 5,
    triggerTime : [1E4, 1E4],
    displayCountLimit : 3,
    isRegional : !0,
    category : simcity.TickerCategories.kGeneric99
  },
  2971140367 : {
    stringID : 4223250222,
    localizedPopOutText : 1996098141,
    importance : 10,
    triggerTime : [100, 110],
    displayCountLimit : 1,
    category : simcity.TickerCategories.kGeneric37
  },
  3314618110 : {
    stringID : 4061670708,
    localizedPopOutText : 2042266187,
    importance : 5,
    triggerTime : [30, 50],
    displayCountLimit : 5,
    isRegional : !0,
    category : simcity.TickerCategories.kGeneric101
  },
  2249387993 : {
    localizedPopOutText : 2792725529,
    importance : 5,
    triggerTime : [240, 240],
    isRegional : !0,
    category : simcity.TickerCategories.kGeneric102
  },
  1066921807 : {
    localizedPopOutText : 956870575,
    importance : 5,
    triggerTime : [100, 100],
    isRegional : !0,
    category : simcity.TickerCategories.kGeneric103
  },
  2097013508 : {
    localizedPopOutText : 2240768906,
    importance : 5,
    triggerTime : [100, 100],
    isRegional : !0,
    category : simcity.TickerCategories.kGeneric104
  },
  2455529609 : {
    localizedPopOutText : 2442905343,
    importance : 5,
    triggerTime : [30, 50],
    category : simcity.TickerCategories.kGeneric104
  },
  2019190184 : {
    localizedPopOutText : 3679794512,
    importance : 5,
    triggerTime : [1E4, 1E4],
    displayCountLimit : 3,
    isRegional : !0,
    category : simcity.TickerCategories.kGeneric105
  },
  142759929 : {
    localizedPopOutText : 942332319,
    importance : 5,
    triggerTime : [1E4, 1E4],
    displayCountLimit : 3,
    isRegional : !0,
    category : simcity.TickerCategories.kGeneric105
  },
  2418364149 : {
    localizedPopOutText : 1242946507,
    importance : 5,
    triggerTime : [1E4, 1E4],
    displayCountLimit : 3,
    isRegional : !0,
    category : simcity.TickerCategories.kGeneric106
  },
  165657166 : {
    localizedPopOutText : 1347684166,
    importance : 5,
    triggerTime : [1E4, 1E4],
    displayCountLimit : 3,
    isRegional : !0,
    category : simcity.TickerCategories.kGeneric106
  },
  1380747748 : {
    localizedPopOutText : 824517450,
    importance : 5,
    triggerTime : [1E4, 1E4],
    displayCountLimit : 3,
    isRegional : !0,
    category : simcity.TickerCategories.kGeneric106
  },
  272039023 : {
    localizedPopOutText : 3451752818,
    importance : 5,
    triggerTime : [300, 500],
    displayCountLimit : 5,
    isRegional : !0,
    category : simcity.TickerCategories.kGeneric107
  },
  1299557211 : {
    localizedPopOutText : 3329806142,
    importance : 5,
    triggerTime : [300, 500],
    displayCountLimit : 5,
    isRegional : !0,
    category : simcity.TickerCategories.kGeneric108
  },
  1564911794 : {
    localizedPopOutText : 2412481167,
    importance : 5,
    triggerTime : [300, 500],
    displayCountLimit : 5,
    isRegional : !0,
    category : simcity.TickerCategories.kGeneric109
  },
  2763154245 : {
    localizedPopOutText : 751219008,
    importance : 5,
    triggerTime : [300, 500],
    displayCountLimit : 5,
    isRegional : !0,
    category : simcity.TickerCategories.kGeneric108
  },
  2945415290 : {
    localizedPopOutText : 3932664359,
    importance : 5,
    triggerTime : [300, 500],
    displayCountLimit : 5,
    isRegional : !0,
    category : simcity.TickerCategories.kGeneric107
  },
  744427913 : {
    localizedPopOutText : 4219038316,
    importance : 5,
    triggerTime : [300, 500],
    displayCountLimit : 5,
    isRegional : !0,
    category : simcity.TickerCategories.kGeneric110
  },
  2523044269 : {
    localizedPopOutText : 1988095216,
    importance : 5,
    triggerTime : [300, 500],
    displayCountLimit : 5,
    isRegional : !0,
    category : simcity.TickerCategories.kGeneric111
  },
  3419546264 : {
    localizedPopOutText : 818528645,
    importance : 5,
    triggerTime : [300,
      500],
    displayCountLimit : 5,
    isRegional : !0,
    category : simcity.TickerCategories.kGeneric112
  },
  2874050975 : {
    localizedPopOutText : 3549539474,
    importance : 5,
    triggerTime : [300, 500],
    displayCountLimit : 5,
    isRegional : !0,
    category : simcity.TickerCategories.kGeneric111
  },
  4157819788 : {
    localizedPopOutText : 3223547841,
    importance : 5,
    triggerTime : [300, 500],
    displayCountLimit : 5,
    isRegional : !0,
    category : simcity.TickerCategories.kGeneric107
  },
  2234484777 : {
    localizedPopOutText : 2514089620,
    importance : 5,
    triggerTime : [300, 500],
    displayCountLimit : 5,
    isRegional : !0,
    category : simcity.TickerCategories.kGeneric112
  },
  2591371939 : {
    localizedPopOutText : 1882331710,
    importance : 5,
    triggerTime : [1E4, 1E4],
    displayCountLimit : 1,
    isRegional : !0,
    category : simcity.TickerCategories.kGeneric113
  },
  2585087251 : {
    localizedPopOutText : 213849823,
    importance : 5,
    triggerTime : [30, 50],
    category : simcity.TickerCategories.kGeneric114
  },
  686752831 : {
    localizedPopOutText : 1924559527,
    importance : 5,
    triggerTime : [1E4, 1E4],
    displayCountLimit : 1,
    isRegional : !0,
    category : simcity.TickerCategories.kGeneric115
  },
  4215758728 : {
    stringID : 513026910,
    localizedPopOutText : 3475128813,
    importance : 5,
    triggerTime : [900, 1800],
    displayCountLimit : 5,
    category : simcity.TickerCategories.kGeneric116
  },
  3014702446 : {
    localizedPopOutText : 3544364539,
    importance : 5,
    triggerTime : [30, 50],
    isRegional : !0,
    category : simcity.TickerCategories.kGeneric117
  },
  1236193741 : {
    localizedPopOutText : 3231545360,
    importance : 5,
    triggerTime : [120, 120],
    isRegional : !0,
    category : simcity.TickerCategories.kGeneric118
  },
  1576530832 : {
    localizedPopOutText : 4059281301,
    importance : 5,
    triggerTime : [120, 120],
    isRegional : !0,
    category : simcity.TickerCategories.kGeneric119
  },
  3507257078 : {
    localizedPopOutText : 1992563027,
    importance : 5,
    triggerTime : [30, 50],
    isRegional : !0,
    category : simcity.TickerCategories.kGeneric120
  },
  2665834581 : {
    localizedPopOutText : 3832201800,
    importance : 5,
    triggerTime : [120, 120],
    isRegional : !0,
    category : simcity.TickerCategories.kGeneric121
  },
  3427069192 : {
    localizedPopOutText : 2866863517,
    importance : 5,
    triggerTime : [120, 120],
    isRegional : !0,
    category : simcity.TickerCategories.kGeneric122
  },
  2525503284 : {
    localizedPopOutText : 3222186729,
    importance : 5,
    triggerTime : [30, 50],
    isRegional : !0,
    category : simcity.TickerCategories.kGeneric123
  },
  3761766791 : {
    localizedPopOutText : 2870164106,
    importance : 5,
    triggerTime : [120, 120],
    isRegional : !0,
    category : simcity.TickerCategories.kGeneric124
  },
  938214978 : {
    localizedPopOutText : 1241466655,
    importance : 5,
    triggerTime : [120, 120],
    isRegional : !0,
    category : simcity.TickerCategories.kGeneric125
  },
  2150332046 : {
    localizedPopOutText : 2252669235,
    importance : 5,
    triggerTime : [30, 50],
    isRegional : !0,
    category : simcity.TickerCategories.kGeneric126
  },
  3479607021 : {
    localizedPopOutText : 1617543720,
    importance : 5,
    triggerTime : [120, 120],
    isRegional : !0,
    category : simcity.TickerCategories.kGeneric127
  },
  1238396208 : {
    localizedPopOutText : 1667006205,
    importance : 5,
    triggerTime : [120, 120],
    isRegional : !0,
    category : simcity.TickerCategories.kGeneric128
  },
  3315280111 : {
    localizedPopOutText : 1930292442,
    importance : 5,
    triggerTime : [30, 50],
    isRegional : !0,
    category : simcity.TickerCategories.kGeneric129
  },
  4244910428 : {
    localizedPopOutText : 2004425385,
    importance : 5,
    triggerTime : [120, 120],
    isRegional : !0,
    category : simcity.TickerCategories.kGeneric130
  },
  2540088839 : {
    localizedPopOutText : 838471106,
    importance : 5,
    triggerTime : [120, 120],
    isRegional : !0,
    category : simcity.TickerCategories.kGeneric131
  },
  1070364894 : {
    localizedPopOutText : 670308931,
    importance : 5,
    triggerTime : [30, 50],
    isRegional : !0,
    category : simcity.TickerCategories.kGeneric132
  },
  571912381 : {
    localizedPopOutText : 1231624888,
    importance : 5,
    triggerTime : [120, 120],
    isRegional : !0,
    category : simcity.TickerCategories.kGeneric133
  },
  2862773152 : {
    localizedPopOutText : 1719922413,
    importance : 5,
    triggerTime : [120, 120],
    isRegional : !0,
    category : simcity.TickerCategories.kGeneric134
  },
  2246151690 : {
    localizedPopOutText : 3647679367,
    importance : 5,
    triggerTime : [30, 50],
    isRegional : !0,
    category : simcity.TickerCategories.kGeneric135
  },
  1357377753 : {
    localizedPopOutText : 2167352172,
    importance : 5,
    triggerTime : [120, 120],
    isRegional : !0,
    category : simcity.TickerCategories.kGeneric136
  },
  1591856956 : {
    localizedPopOutText : 646311617,
    importance : 5,
    triggerTime : [120, 120],
    isRegional : !0,
    category : simcity.TickerCategories.kGeneric137
  },
  1731593861 : {
    localizedPopOutText : 4024194368,
    importance : 5,
    triggerTime : [30, 50],
    isRegional : !0,
    category : simcity.TickerCategories.kGeneric138
  },
  2805355414 : {
    localizedPopOutText : 278555787,
    importance : 5,
    triggerTime : [120, 120],
    isRegional : !0,
    category : simcity.TickerCategories.kGeneric139
  },
  2344190529 : {
    localizedPopOutText : 364085764,
    importance : 5,
    triggerTime : [120, 120],
    isRegional : !0,
    category : simcity.TickerCategories.kGeneric140
  },
  749303235 : {
    localizedPopOutText : 777980846,
    importance : 5,
    triggerTime : [30, 50],
    isRegional : !0,
    category : simcity.TickerCategories.kGeneric141
  },
  1352231952 : {
    localizedPopOutText : 2886818413,
    importance : 5,
    triggerTime : [120, 120],
    isRegional : !0,
    category : simcity.TickerCategories.kGeneric142
  },
  2916830987 : {
    localizedPopOutText : 3357258342,
    importance : 5,
    triggerTime : [120, 120],
    isRegional : !0,
    category : simcity.TickerCategories.kGeneric143
  },
  2134550134 : {
    localizedPopOutText : 2749148075,
    importance : 5,
    triggerTime : [30, 50],
    displayCountLimit : 5,
    isRegional : !0,
    category : simcity.TickerCategories.kGeneric144
  },
  2169095412 : {
    localizedPopOutText : 875552640,
    importance : 5,
    triggerTime : [30, 50],
    displayCountLimit : 5,
    isRegional : !0,
    category : simcity.TickerCategories.kGeneric145
  },
  972812271 : {
    localizedPopOutText : 225652453,
    importance : 5,
    triggerTime : [120, 120],
    isRegional : !0,
    category : simcity.TickerCategories.kGeneric146
  },
  2430323423 : {
    localizedPopOutText : 1436863154,
    importance : 5,
    triggerTime : [30, 50],
    isRegional : !0,
    category : simcity.TickerCategories.kGeneric147
  },
  1558485452 : {
    localizedPopOutText : 3593133473,
    importance : 5,
    triggerTime : [120, 120],
    isRegional : !0,
    category : simcity.TickerCategories.kGeneric148
  },
  2867964951 : {
    localizedPopOutText : 3567986378,
    importance : 5,
    triggerTime : [120, 120],
    isRegional : !0,
    category : simcity.TickerCategories.kGeneric149
  },
  3492598502 : {
    localizedPopOutText : 3528029561,
    importance : 5,
    triggerTime : [300, 500],
    displayCountLimit : 5,
    isRegional : !0,
    category : simcity.TickerCategories.kGeneric150
  },
  3248744848 : {
    localizedPopOutText : 2127174083,
    importance : 5,
    triggerTime : [300, 500],
    displayCountLimit : 5,
    isRegional : !0,
    category : simcity.TickerCategories.kGeneric150
  },
  2544231940 : {
    localizedPopOutText : 821588519,
    importance : 5,
    triggerTime : [300, 500],
    displayCountLimit : 5,
    isRegional : !0,
    category : simcity.TickerCategories.kGeneric150
  },
  436794662 : {
    localizedPopOutText : 1554329881,
    importance : 5,
    triggerTime : [300, 500],
    displayCountLimit : 5,
    isRegional : !0,
    category : simcity.TickerCategories.kGeneric150
  },
  2597422333 : {
    localizedPopOutText : 3481791134,
    importance : 5,
    triggerTime : [300, 500],
    displayCountLimit : 5,
    isRegional : !0,
    category : simcity.TickerCategories.kGeneric150
  },
  1915414808 : {
    localizedPopOutText : 1411514923,
    importance : 5,
    triggerTime : [300, 500],
    displayCountLimit : 5,
    isRegional : !0,
    category : simcity.TickerCategories.kGeneric151
  },
  338868450 : {
    localizedPopOutText : 3864748693,
    importance : 5,
    triggerTime : [300, 500],
    displayCountLimit : 5,
    isRegional : !0,
    category : simcity.TickerCategories.kGeneric151
  },
  4264875246 : {
    localizedPopOutText : 1903064225,
    importance : 5,
    triggerTime : [300, 500],
    displayCountLimit : 5,
    isRegional : !0,
    category : simcity.TickerCategories.kGeneric151
  },
  4205117752 : {
    localizedPopOutText : 4184348283,
    importance : 5,
    triggerTime : [300, 500],
    displayCountLimit : 5,
    isRegional : !0,
    category : simcity.TickerCategories.kGeneric151
  },
  2346385127 : {
    localizedPopOutText : 594173416,
    importance : 5,
    triggerTime : [300, 500],
    displayCountLimit : 5,
    isRegional : !0,
    category : simcity.TickerCategories.kGeneric151
  },
  2737418649 : {
    localizedPopOutText : 759571228,
    importance : 5,
    triggerTime : [300, 500],
    displayCountLimit : 5,
    isRegional : !0,
    category : simcity.TickerCategories.kGeneric152
  },
  794046589 : {
    localizedPopOutText : 1935915552,
    importance : 5,
    triggerTime : [300, 500],
    displayCountLimit : 5,
    isRegional : !0,
    category : simcity.TickerCategories.kGeneric152
  },
  2834101256 : {
    localizedPopOutText : 2286471253,
    importance : 5,
    triggerTime : [300, 500],
    displayCountLimit : 5,
    isRegional : !0,
    category : simcity.TickerCategories.kGeneric152
  },
  3119121743 : {
    localizedPopOutText : 2880055138,
    importance : 5,
    triggerTime : [300, 500],
    displayCountLimit : 5,
    isRegional : !0,
    category : simcity.TickerCategories.kGeneric152
  },
  3857351228 : {
    localizedPopOutText : 205314193,
    importance : 5,
    triggerTime : [300, 500],
    displayCountLimit : 5,
    isRegional : !0,
    category : simcity.TickerCategories.kGeneric152
  },
  3629485403 : {
    localizedPopOutText : 884167910,
    importance : 5,
    triggerTime : [300,
      500],
    displayCountLimit : 5,
    isRegional : !0,
    category : simcity.TickerCategories.kGeneric153
  },
  1902955551 : {
    localizedPopOutText : 542822730,
    importance : 5,
    triggerTime : [300, 500],
    displayCountLimit : 5,
    isRegional : !0,
    category : simcity.TickerCategories.kGeneric153
  },
  2323216350 : {
    localizedPopOutText : 1686127075,
    importance : 5,
    triggerTime : [300, 500],
    displayCountLimit : 5,
    isRegional : !0,
    category : simcity.TickerCategories.kGeneric153
  },
  2064983649 : {
    localizedPopOutText : 2223125092,
    importance : 5,
    triggerTime : [300, 500],
    displayCountLimit : 5,
    isRegional : !0,
    category : simcity.TickerCategories.kGeneric153
  },
  2800738454 : {
    localizedPopOutText : 3585208379,
    importance : 5,
    triggerTime : [300, 500],
    displayCountLimit : 5,
    isRegional : !0,
    category : simcity.TickerCategories.kGeneric153
  },
  1532002531 : {
    localizedPopOutText : 3375705862,
    importance : 5,
    triggerTime : [300, 500],
    displayCountLimit : 5,
    isRegional : !0,
    category : simcity.TickerCategories.kGeneric152
  }
};
simcity.CitySpecializationGuideUI = {};
simcity.cCitySpecializationHandler = {
  selectedSpecialization : 0,
  guidedSpecialization : 0
};
simcity.cCitySpecializationHandler.Init = function () {
  this.selectedSpecialization = simcity.Specializations.Gambling;
  this.guidedSpecialization = simcity.Specializations.UnGuided;
  this.CheckSpecializationBins()
};
simcity.cCitySpecializationHandler.CheckSpecializationBins = function () {
  var a = [scrui.BuildRequestQuery([simcity.kDataBinAmount, simcity.kResourceIDSpecialization_Guided]), scrui.BuildRequestQuery([simcity.kDataBinAmount, simcity.kResourceIDSpecialization_Education]), scrui.BuildRequestQuery([simcity.kDataBinAmount, simcity.kResourceIDSpecialization_Gambling]), scrui.BuildRequestQuery([simcity.kDataBinAmount, simcity.kResourceIDSpecialization_Metals]), scrui.BuildRequestQuery([simcity.kDataBinAmount, simcity.kResourceIDSpecialization_Petroleum]),
    scrui.BuildRequestQuery([simcity.kDataBinAmount, simcity.kResourceIDSpecialization_Trade]), scrui.BuildRequestQuery([simcity.kDataBinAmount, simcity.kResourceIDSpecialization_Electronics])],
  b = this;
  scrui.RequestGameData(a, function (a) {
    a[0] ? 0 < a[1] ? b.guidedSpecialization = simcity.Specializations.Education : 0 < a[2] ? b.guidedSpecialization = simcity.Specializations.Gambling : 0 < a[3] ? b.guidedSpecialization = simcity.Specializations.Metals : 0 < a[4] ? b.guidedSpecialization = simcity.Specializations.Petroleum : 0 < a[5] ? b.guidedSpecialization =
      simcity.Specializations.Trade : 0 < a[6] && (b.guidedSpecialization = simcity.Specializations.Electronics) : b.guidedSpecialization = simcity.Specializations.UnGuided
  })
};
simcity.cCitySpecializationHandler.SelectNewCitySpecializationGuide = function (a) {
  a = (a = simcity.kSpecializationDataBindings[a]) && a.hasOwnProperty("selectionUnit") ? a.selectionUnit : 90013432;
  scrui.PostGameCommand(scrui.BuildCommand([simcity.kCommandCreateUnit, a]));
  this.CheckSpecializationBins()
};
simcity.cCitySpecializationHandler.GetCurrentSpecialization = function () {
  return this.guidedSpecialization
};
simcity.QuickTextField = {};
var QuickTextField = function (a) {
  this.mTargetDivID = a.targetDivID || null;
  this.mTargetDivObj = null;
  this.mEditIconClass = a.editIconClass || "pencilIcon";
  this.mTextFieldClassName = a.textFieldClass || "inputInnerShadow roundCorners5px";
  this.mEditableClassName = "editableField";
  this.mNewFieldValue = this.mDefaultFieldValue = "";
  this.mInEditMode = !1;
  this.mFormAction = null;
  this.mFormMethod = "post";
  this.mEventListeners = [];
  this.mInputFieldObj = null;
  this.mOnSave = a.onSave || new Function;
  this.mEventListeners = [];
  this.mTargetDivID &&
  (this.mTargetDivObj = document.getElementById(this.mTargetDivID), null !== this.mTargetDivObj && (this.mDefaultFieldValue = this.mTargetDivObj.innerHTML, this.SetListenerState("default"), this.mTargetDivObj.innerHTML += "<span class='pencilIcon'></span>", this.mTargetDivObj.className = this.mTargetDivObj.className + " " + this.mEditableClassName))
};
QuickTextField.prototype.OnKeyDown = function (a, b) {
  27 == a.keyCode && b.ToggleEditMode();
  13 == a.keyCode && b.SubmitForm()
};
QuickTextField.prototype.OnClick = function (a, b) {
  b.ToggleEditMode()
};
QuickTextField.prototype.ToggleEditMode = function () {
  if (this.mInEditMode)
    this.mTargetDivObj.style.color = "#fffffd", this.mTargetDivObj.innerHTML = "", this.mTargetDivObj.innerHTML = this.mDefaultFieldValue + "<span class='pencilIcon'></span>", this.mInEditMode = !1, this.SetListenerState("default");
  else {
    this.mTargetDivObj.style.color = "#2e5c71";
    var a = document.createElement("div");
    a.className = this.mTextFieldClassName;
    var b = document.createElement("input");
    b.type = "text";
    b.value = this.mDefaultFieldValue;
    a.appendChild(b);
    this.mInputFieldObj = b;
    this.mTargetDivObj.innerHTML = "";
    this.mTargetDivObj.appendChild(a);
    b.focus();
    this.mInEditMode = !0;
    this.SetListenerState("edit")
  }
};
QuickTextField.prototype.SubmitForm = function () {
  this.mDefaultFieldValue !== this.mInputFieldObj.value && (this.mDefaultFieldValue = this.mInputFieldObj.value, this.mOnSave(this.mInputFieldObj.value));
  this.ToggleEditMode()
};
QuickTextField.prototype.RemoveAllListeners = function () {
  for (; 0 < this.mEventListeners.length; ) {
    var a = this.mEventListeners.pop();
    a[0].removeEventListener ? a[0].removeEventListener(a[1], a[2], !1) : a[0].detachEvent(a[1], a[2])
  }
};
QuickTextField.prototype.SetListenerState = function (a) {
  this.RemoveAllListeners();
  var b = this;
  "default" === a ? (a = function (a) {
    b.OnClick(a, b)
  }, b.mTargetDivObj.addEventListener ? (b.mTargetDivObj.addEventListener("click", a, !1), b.mEventListeners.push([b.mTargetDivObj, "click", a])) : (b.mTargetDivObj.attachEvent("onclick", a), b.mEventListeners.push([b.mTargetDivObj, "onclick", a]))) : (a = function (a) {
    b.SubmitForm(a, b)
  }, b.mInputFieldObj.addEventListener ? (b.mInputFieldObj.addEventListener("blur", a, !1), b.mEventListeners.push([b.mInputFieldObj,
          "blur", a])) : (b.mInputFieldObj.attachEvent("onblur", a), b.mEventListeners.push([b.mInputFieldObj, "onblur", a])), a = function (a) {
    b.OnKeyDown(a, b)
  }, b.mInputFieldObj.addEventListener) ? (b.mInputFieldObj.addEventListener("keydown", a, !1), b.mEventListeners.push([b.mInputFieldObj, "keydown", a])) : (b.mInputFieldObj.attachEvent("onkeydown", a), b.mEventListeners.push([b.mInputFieldObj, "onkeydown", a]))
};
simcity.databindings.DataBindingsPopupMenu = {};
simcity.kWinPopupIconID = 181820561;
simcity.kPropBuildingInfo = 236183466;
simcity.SetPopupItemIcon = function (a, b) {
  if (b) {
    var c = a.FindControlByID(simcity.kWinPopupIconID);
    null !== c && c.SetWindowImage(b)
  }
};
simcity.PopupItems = {};
simcity.PopupItems.kToggleLayer = {
  layoutPath : "Layouts/PopupMenu/PopupMenuItemToggle.js",
  tooltipString : {
    tableID : "GlobalUI.json",
    stringID : "0x0b287e59",
    placeholder : "kPopupItemToggleLayer"
  },
  closeMenu : !1,
  allowNullResults : !0,
  initQueries : function () {
    return {
      layerKey : ["selectedUnit", "categoryProperties", simcity.kPropToolCategoryLayerKey],
      layerIconKeys : ["selectedUnit", "categoryProperties", simcity.kPropToolCategoryIconKeys]
    }
  },
  initTest : function (a) {
    return a.layerKey && a.layerIconKeys ? !0 : !1
  },
  init : function (a, b) {
    simcity.SetPopupItemIcon(a.layout,
      scrui.PathFromResourceKey(b.layerIconKeys[0]));
    a.layerID = b.layerKey ? b.layerKey.instance : 0;
    var c = simcity.gRolloverManager.mGlobalUI.mLayerUIHandler;
    a.layout.FindControlByID(scrui.cPopupMenu.kButtonID).SetSelected(c.IsLayerActive(a.layerID))
  },
  onItemClicked : function (a) {
    var b = simcity.gRolloverManager.mGlobalUI.mLayerUIHandler;
    b.IsLayerActive(a.layerID) ? b.DeactivateLayer() : b.ActivateLayer(a.layerID)
  }
};
simcity.PopupItems.kEditBuilding = {
  layoutPath : "Layouts/PopupMenu/PopupMenuItem.js",
  iconPath : "Graphics/Common/Icons/icn-edit.png",
  tooltipString : {
    tableID : "GlobalUI.json",
    stringID : "0x0b287e72",
    placeholder : "kPopupItemEditBuilding"
  },
  closeMenu : !0,
  allowNullResults : !0,
  initQueries : function () {
    return {
      canEdit : ["selectedUnit", simcity.kDataCanEditUnit]
    }
  },
  initTest : function (a) {
    return a.canEdit && simcity.gGlobalUIHandler.mIsEditorEnabled ? !0 : !1
  },
  onItemClicked : function () {
    simcity.gGlobalUIHandler.mIsEditorEnabled && scrui.PostGameCommand(scrui.BuildCommand(["editselectedbuilding"]))
  }
};
simcity.PopupItems.kUpgradeBuilding = {
  layoutPath : "Layouts/PopupMenu/PopupMenuItem-upgrade.js",
  tooltipString : {
    tableID : "GlobalUI.json",
    stringID : "0x0ca551fc",
    placeholder : "kPopupItemEditBuilding"
  },
  closeMenu : !0,
  allowNullResults : !0,
  initQueries : function () {
    return {
      upgradeable : ["selectedUnit", "bins", simcity.kResourceIDUpgradeAvailable]
    }
  },
  initTest : function (a) {
    return 0 < a.upgradeable.amount ? !0 : !1
  },
  onItemClicked : function () {
    scrui.PostGameCommand(scrui.BuildCommand(["runSelectedUnitAndAttachedPlayerRule", simcity.kRuleIDSCPlayerRuleUpgradeBuilding]));
    scrui.PostGameCommand(scrui.BuildCommand(["zoomToUnit", "selected"]))
  }
};
simcity.PopupItems.kBuildingInfo = {
  layoutPath : "Layouts/PopupMenu/PopupMenuItemInfo.js",
  tooltipString : {
    tableID : "GlobalUI.json",
    stringID : "0x0e600fb4",
    placeholder : "kPopupItemEditBuilding"
  },
  closeMenu : !0,
  allowNullResults : !0,
  initQueries : function () {
    return {
      buildingInfo : ["selectedUnit", "properties", simcity.kPropBuildingInfo]
    }
  },
  initTest : function (a) {
    return a.buildingInfo ? !0 : !1
  },
  init : function (a, b) {
    a.budgetID = b.buildingInfo;
    a.layout.FindControlByID(181820548).SetEnabled(!0)
  },
  onItemClicked : function (a) {
    if (a = simcity.SpeechBalloonEvents.DataBindings[a.budgetID[0].instance])
      simcity.gGlobalUIHandler.mLayerUIHandler.DeactivateLayer(),
      a = simcity.gGlobalUIHandler.mSpeechBalloonHandler.AddSpeechBalloon(a, simcity.gRolloverManager.mRolloverUI.mSelectedUnitRef, simcity.gRolloverManager.mRolloverUI.mSelectedUnitRef, void 0), a.mExpirationTime = -1, simcity.gGlobalUIHandler.mSpeechBalloonHandler.HandleSpeechBalloonClick(a)
  }
};
simcity.PopupItems.kOnOffToggle = {
  layoutPath : "Layouts/PopupMenu/PopupMenuItemToggle-onOff.js",
  tooltipString : {
    tableID : "GlobalUI.json",
    stringID : "0x0ca550ec",
    placeholder : "kPopupItemOnOffToggle"
  },
  onAudio : simcity.audio.kInstanceOnSwitch,
  offAudio : simcity.audio.kInstanceOffSwitch,
  closeMenu : !1,
  allowNullResults : !0,
  initQueries : function () {
    return {
      normalFlag : ["selectedUnit", "flags", simcity.kUnitFlagNormal],
      hasToggle : ["selectedUnit", "nonSimProperties", simcity.kPropertyUnitShowOnOffToggle],
      onFlag : ["selectedUnit",
        "flags", simcity.kUnitFlagOpenForBusiness]
    }
  },
  initTest : function (a) {
    return a.hasToggle && a.normalFlag
  },
  init : function (a, b) {
    a.layout.FindControlByID(scrui.cPopupMenu.kButtonID).SetSelected(b.onFlag)
  },
  onItemClicked : function () {
    scrui.PostGameCommand(scrui.BuildCommand(["runSelectedUnitAndAttachedPlayerRule", simcity.kRuleIDSCPlayerRuleToggleOnOff]))
  }
};
simcity.PopupItems.kTradeDealPowerToggle = {
  layoutPath : "Layouts/PopupMenu/PopupMenuItemToggle-onOff.js",
  onAudio : simcity.audio.kInstanceOnSwitch,
  offAudio : simcity.audio.kInstanceOffSwitch,
  closeMenu : !1,
  allowNullResults : !0,
  initQueries : function () {
    return {
      hasToggle : ["selectedUnit", "nonSimProperties", simcity.kPropertyUnitShowOnOffToggle],
      myRequest : ["selectedUnit", "bins", simcity.kResourceIDTradeDealMyPowerRequest],
      myAgreement : ["selectedUnit", "bins", simcity.kResourceIDTradeDealMyPowerAgreement]
    }
  },
  initTest : function (a) {
    return a.hasToggle
  },
  init : function (a, b) {
    var c = a.layout.FindControlByID(scrui.cPopupMenu.kButtonID);
    1 === b.myRequest.amount || 1 === b.myAgreement.amount ? (c.SetSelected(!1), c.SetSelected(!0)) : (c.SetSelected(!0), c.SetSelected(!1))
  },
  onItemClicked : function () {
    scrui.PostGameCommand(scrui.BuildCommand(["runSelectedUnitAndAttachedPlayerRule", simcity.kRuleIDSCPlayerRuleToggleOnOff]))
  }
};
simcity.PopupItems.kTradeDealWaterToggle = {
  layoutPath : "Layouts/PopupMenu/PopupMenuItemToggle-onOff.js",
  onAudio : simcity.audio.kInstanceOnSwitch,
  offAudio : simcity.audio.kInstanceOffSwitch,
  closeMenu : !1,
  allowNullResults : !0,
  initQueries : function () {
    return {
      hasToggle : ["selectedUnit", "nonSimProperties", simcity.kPropertyUnitShowOnOffToggle],
      myRequest : ["selectedUnit", "bins", simcity.kResourceIDTradeDealMyWaterRequest],
      myAgreement : ["selectedUnit", "bins", simcity.kResourceIDTradeDealMyWaterAgreement]
    }
  },
  initTest : function (a) {
    return a.hasToggle
  },
  init : function (a, b) {
    var c = a.layout.FindControlByID(scrui.cPopupMenu.kButtonID);
    1 === b.myRequest.amount || 1 === b.myAgreement.amount ? (c.SetSelected(!1), c.SetSelected(!0)) : (c.SetSelected(!0), c.SetSelected(!1))
  },
  onItemClicked : function () {
    scrui.PostGameCommand(scrui.BuildCommand(["runSelectedUnitAndAttachedPlayerRule", simcity.kRuleIDSCPlayerRuleToggleOnOff]))
  }
};
simcity.PopupItems.kSendSimoleonGift = {
  layoutPath : "Layouts/PopupMenu/PopupMenuItem.js",
  iconPath : "Graphics/ToolIcons/gift_send.png",
  onAudio : simcity.audio.kInstanceOnSwitch,
  offAudio : simcity.audio.kInstanceOffSwitch,
  closeMenu : !0,
  allowNullResults : !0,
  initQueries : function () {
    return {
      hasToggle : ["selectedUnit", "nonSimProperties", simcity.kPropertyUnitShowOnOffToggle],
      HQ_CityHall_Level : ["bins", simcity.kResourceIDHQ_CityHall_Level],
      hasMayorsHouse : ["bins", simcity.kResourceIDHasMayorsHouseSmall],
      giftInTransit : ["selectedUnit",
        "bins", simcity.kResourceIDTradeGiftSendingSimoleons]
    }
  },
  initTest : function (a) {
    return a.hasToggle && 0 == a.giftInTransit.amount && (1 < a.HQ_CityHall_Level.amount || 1 == a.hasMayorsHouse.amount)
  },
  onItemClicked : function (a) {
    a.layout.FindControlByID(scrui.cPopupMenu.kButtonID).SetSelected(!1);
    scrui.PostGameCommand(scrui.BuildCommand(["runSelectedUnitAndAttachedPlayerRule", simcity.kRuleIDSCPlayerRuleToggleOnOff]))
  }
};
simcity.PopupItems.kGreatWorksAlloySignup = {
  layoutPath : "Layouts/PopupMenu/PopupMenuItemToggle-onOff.js",
  tooltipString : {
    tableID : "GlobalUI.json",
    stringID : "0x0e4b89a3",
    placeholder : "kPopupItemGreatWorksAlloySignup"
  },
  onAudio : simcity.audio.kInstanceOnSwitch,
  offAudio : simcity.audio.kInstanceOffSwitch,
  closeMenu : !1,
  allowNullResults : !0,
  initQueries : function () {
    return {
      hasToggle : ["selectedUnit", "nonSimProperties", simcity.kPropertyUnitShowOnOffToggle],
      alloySignup : ["selectedUnit", "bins", simcity.kResourceIDSignedUpForAlloy]
    }
  },
  initTest : function (a) {
    return a.hasToggle
  },
  init : function (a, b) {
    var c = a.layout.FindControlByID(scrui.cPopupMenu.kButtonID);
    1 === b.alloySignup.amount ? (c.SetSelected(!1), c.SetSelected(!0)) : (c.SetSelected(!0), c.SetSelected(!1))
  },
  onItemClicked : function () {
    simcity.CreateUnitCloseby("GreatWorks_ToggleAlloySignup", scrui.RequestStringFromUnitRef(simcity.gRolloverManager.mRolloverUI.mSelectedUnitRef))
  }
};
simcity.PopupItems.kGreatWorksCoalSignup = {
  layoutPath : "Layouts/PopupMenu/PopupMenuItemToggle-onOff.js",
  tooltipString : {
    tableID : "GlobalUI.json",
    stringID : "0x0e4b89fa",
    placeholder : "kPopupItemGreatWorksCoalSignup"
  },
  onAudio : simcity.audio.kInstanceOnSwitch,
  offAudio : simcity.audio.kInstanceOffSwitch,
  closeMenu : !1,
  allowNullResults : !0,
  initQueries : function () {
    return {
      hasToggle : ["selectedUnit", "nonSimProperties", simcity.kPropertyUnitShowOnOffToggle],
      coalSignup : ["selectedUnit", "bins", simcity.kResourceIDSignedUpForCoal]
    }
  },
  initTest : function (a) {
    return a.hasToggle
  },
  init : function (a, b) {
    var c = a.layout.FindControlByID(scrui.cPopupMenu.kButtonID);
    1 === b.coalSignup.amount ? (c.SetSelected(!1), c.SetSelected(!0)) : (c.SetSelected(!0), c.SetSelected(!1))
  },
  onItemClicked : function () {
    simcity.CreateUnitCloseby("GreatWorks_ToggleCoalSignup", scrui.RequestStringFromUnitRef(simcity.gRolloverManager.mRolloverUI.mSelectedUnitRef))
  }
};
simcity.PopupItems.kGreatWorksElectronicsSignup = {
  layoutPath : "Layouts/PopupMenu/PopupMenuItemToggle-onOff.js",
  tooltipString : {
    tableID : "GlobalUI.json",
    stringID : "0x0e4b8a11",
    placeholder : "kPopupItemGreatWorksElectronicsSignup"
  },
  onAudio : simcity.audio.kInstanceOnSwitch,
  offAudio : simcity.audio.kInstanceOffSwitch,
  closeMenu : !1,
  allowNullResults : !0,
  initQueries : function () {
    return {
      hasToggle : ["selectedUnit", "nonSimProperties", simcity.kPropertyUnitShowOnOffToggle],
      electronicsSignup : ["selectedUnit", "bins", simcity.kResourceIDSignedUpForElectronics]
    }
  },
  initTest : function (a) {
    return a.hasToggle
  },
  init : function (a, b) {
    var c = a.layout.FindControlByID(scrui.cPopupMenu.kButtonID);
    1 === b.electronicsSignup.amount ? (c.SetSelected(!1), c.SetSelected(!0)) : (c.SetSelected(!0), c.SetSelected(!1))
  },
  onItemClicked : function () {
    simcity.CreateUnitCloseby("GreatWorks_ToggleElectronicsSignup", scrui.RequestStringFromUnitRef(simcity.gRolloverManager.mRolloverUI.mSelectedUnitRef))
  }
};
simcity.PopupItems.kGreatWorksFuelSignup = {
  layoutPath : "Layouts/PopupMenu/PopupMenuItemToggle-onOff.js",
  tooltipString : {
    tableID : "GlobalUI.json",
    stringID : "0x0e4b8a23",
    placeholder : "kPopupItemGreatWorksFuelSignup"
  },
  onAudio : simcity.audio.kInstanceOnSwitch,
  offAudio : simcity.audio.kInstanceOffSwitch,
  closeMenu : !1,
  allowNullResults : !0,
  initQueries : function () {
    return {
      hasToggle : ["selectedUnit", "nonSimProperties", simcity.kPropertyUnitShowOnOffToggle],
      fuelSignup : ["selectedUnit", "bins", simcity.kResourceIDSignedUpForFuel]
    }
  },
  initTest : function (a) {
    return a.hasToggle
  },
  init : function (a, b) {
    var c = a.layout.FindControlByID(scrui.cPopupMenu.kButtonID);
    1 === b.fuelSignup.amount ? (c.SetSelected(!1), c.SetSelected(!0)) : (c.SetSelected(!0), c.SetSelected(!1))
  },
  onItemClicked : function () {
    simcity.CreateUnitCloseby("GreatWorks_ToggleFuelSignup", scrui.RequestStringFromUnitRef(simcity.gRolloverManager.mRolloverUI.mSelectedUnitRef))
  }
};
simcity.PopupItems.kGreatWorksMetalSignup = {
  layoutPath : "Layouts/PopupMenu/PopupMenuItemToggle-onOff.js",
  tooltipString : {
    tableID : "GlobalUI.json",
    stringID : "0x0e4b8a34",
    placeholder : "kPopupItemGreatWorksMetalSignup"
  },
  onAudio : simcity.audio.kInstanceOnSwitch,
  offAudio : simcity.audio.kInstanceOffSwitch,
  closeMenu : !1,
  allowNullResults : !0,
  initQueries : function () {
    return {
      hasToggle : ["selectedUnit", "nonSimProperties", simcity.kPropertyUnitShowOnOffToggle],
      metalSignup : ["selectedUnit", "bins", simcity.kResourceIDSignedUpForMetal]
    }
  },
  initTest : function (a) {
    return a.hasToggle
  },
  init : function (a, b) {
    var c = a.layout.FindControlByID(scrui.cPopupMenu.kButtonID);
    1 === b.metalSignup.amount ? (c.SetSelected(!1), c.SetSelected(!0)) : (c.SetSelected(!0), c.SetSelected(!1))
  },
  onItemClicked : function () {
    simcity.CreateUnitCloseby("GreatWorks_ToggleMetalSignup", scrui.RequestStringFromUnitRef(simcity.gRolloverManager.mRolloverUI.mSelectedUnitRef))
  }
};
simcity.PopupItems.kGreatWorksOilCrudeSignup = {
  layoutPath : "Layouts/PopupMenu/PopupMenuItemToggle-onOff.js",
  tooltipString : {
    tableID : "GlobalUI.json",
    stringID : "0x0e4b8a42",
    placeholder : "kPopupItemGreatWorksOilCrudeSignup"
  },
  onAudio : simcity.audio.kInstanceOnSwitch,
  offAudio : simcity.audio.kInstanceOffSwitch,
  closeMenu : !1,
  allowNullResults : !0,
  initQueries : function () {
    return {
      hasToggle : ["selectedUnit", "nonSimProperties", simcity.kPropertyUnitShowOnOffToggle],
      oilCrudeSignup : ["selectedUnit", "bins", simcity.kResourceIDSignedUpForOilCrude]
    }
  },
  initTest : function (a) {
    return a.hasToggle
  },
  init : function (a, b) {
    var c = a.layout.FindControlByID(scrui.cPopupMenu.kButtonID);
    1 === b.oilCrudeSignup.amount ? (c.SetSelected(!1), c.SetSelected(!0)) : (c.SetSelected(!0), c.SetSelected(!1))
  },
  onItemClicked : function () {
    simcity.CreateUnitCloseby("GreatWorks_ToggleOilCrudeSignup", scrui.RequestStringFromUnitRef(simcity.gRolloverManager.mRolloverUI.mSelectedUnitRef))
  }
};
simcity.PopupItems.kGreatWorksOreRawSignup = {
  layoutPath : "Layouts/PopupMenu/PopupMenuItemToggle-onOff.js",
  tooltipString : {
    tableID : "GlobalUI.json",
    stringID : "0x0e4b8a50",
    placeholder : "kPopupItemGreatWorksOreRawSignup"
  },
  onAudio : simcity.audio.kInstanceOnSwitch,
  offAudio : simcity.audio.kInstanceOffSwitch,
  closeMenu : !1,
  allowNullResults : !0,
  initQueries : function () {
    return {
      hasToggle : ["selectedUnit", "nonSimProperties", simcity.kPropertyUnitShowOnOffToggle],
      oreRawSignup : ["selectedUnit", "bins", simcity.kResourceIDSignedUpForOreRaw]
    }
  },
  initTest : function (a) {
    return a.hasToggle
  },
  init : function (a, b) {
    var c = a.layout.FindControlByID(scrui.cPopupMenu.kButtonID);
    1 === b.oreRawSignup.amount ? (c.SetSelected(!1), c.SetSelected(!0)) : (c.SetSelected(!0), c.SetSelected(!1))
  },
  onItemClicked : function () {
    simcity.CreateUnitCloseby("GreatWorks_ToggleOreRawSignup", scrui.RequestStringFromUnitRef(simcity.gRolloverManager.mRolloverUI.mSelectedUnitRef))
  }
};
simcity.PopupItems.kGreatWorksPlasticSignup = {
  layoutPath : "Layouts/PopupMenu/PopupMenuItemToggle-onOff.js",
  tooltipString : {
    tableID : "GlobalUI.json",
    stringID : "0x0e4b8a5e",
    placeholder : "kPopupItemGreatWorksPlasticSignup"
  },
  onAudio : simcity.audio.kInstanceOnSwitch,
  offAudio : simcity.audio.kInstanceOffSwitch,
  closeMenu : !1,
  allowNullResults : !0,
  initQueries : function () {
    return {
      hasToggle : ["selectedUnit", "nonSimProperties", simcity.kPropertyUnitShowOnOffToggle],
      plasticSignup : ["selectedUnit", "bins", simcity.kResourceIDSignedUpForPlastic]
    }
  },
  initTest : function (a) {
    return a.hasToggle
  },
  init : function (a, b) {
    var c = a.layout.FindControlByID(scrui.cPopupMenu.kButtonID);
    1 === b.plasticSignup.amount ? (c.SetSelected(!1), c.SetSelected(!0)) : (c.SetSelected(!0), c.SetSelected(!1))
  },
  onItemClicked : function () {
    simcity.CreateUnitCloseby("GreatWorks_TogglePlasticSignup", scrui.RequestStringFromUnitRef(simcity.gRolloverManager.mRolloverUI.mSelectedUnitRef))
  }
};
simcity.PopupItems.kGreatWorksComputerSignup = {
  layoutPath : "Layouts/PopupMenu/PopupMenuItemToggle-onOff.js",
  tooltipString : {
    tableID : "GlobalUI.json",
    stringID : "0x0e77bbd7",
    placeholder : "kPopupItemGreatWorksComputerSignup"
  },
  onAudio : simcity.audio.kInstanceOnSwitch,
  offAudio : simcity.audio.kInstanceOffSwitch,
  closeMenu : !1,
  allowNullResults : !0,
  initQueries : function () {
    return {
      hasToggle : ["selectedUnit", "nonSimProperties", simcity.kPropertyUnitShowOnOffToggle],
      computerSignup : ["selectedUnit", "bins", simcity.kResourceIDSignedUpForComputer]
    }
  },
  initTest : function (a) {
    return a.hasToggle
  },
  init : function (a, b) {
    var c = a.layout.FindControlByID(scrui.cPopupMenu.kButtonID);
    1 === b.computerSignup.amount ? (c.SetSelected(!1), c.SetSelected(!0)) : (c.SetSelected(!0), c.SetSelected(!1))
  },
  onItemClicked : function () {
    simcity.CreateUnitCloseby("GreatWorks_ToggleComputerSignup", scrui.RequestStringFromUnitRef(simcity.gRolloverManager.mRolloverUI.mSelectedUnitRef))
  }
};
simcity.PopupItems.kGreatWorksSolarFarmPowerToggle = {
  layoutPath : "Layouts/PopupMenu/PopupMenuItemToggle-onOff.js",
  tooltipString : {
    tableID : "GlobalUI.json",
    stringID : "0x0e600fb3",
    placeholder : "kGreatWorksSolarFarmPowerToggle"
  },
  onAudio : simcity.audio.kInstanceOnSwitch,
  offAudio : simcity.audio.kInstanceOffSwitch,
  closeMenu : !1,
  allowNullResults : !0,
  initQueries : function () {
    return {
      hasToggle : ["selectedUnit", "nonSimProperties", simcity.kPropertyUnitShowOnOffToggle],
      receivingPower : ["selectedUnit", "bins", simcity.kResourceIDReceivingPowerFromSolarFarm]
    }
  },
  initTest : function (a) {
    return a.hasToggle
  },
  init : function (a, b) {
    var c = a.layout.FindControlByID(scrui.cPopupMenu.kButtonID);
    1 === b.receivingPower.amount ? (c.SetSelected(!1), c.SetSelected(!0)) : (c.SetSelected(!0), c.SetSelected(!1))
  },
  onItemClicked : function () {
    simcity.CreateUnitCloseby("GreatWorks_ToggleSolarFarmPower", scrui.RequestStringFromUnitRef(simcity.gRolloverManager.mRolloverUI.mSelectedUnitRef))
  }
};
simcity.PopupItems.kDeliveriesToggle = {
  layoutPath : "Layouts/PopupMenu/PopupMenuItemToggle-deliveries.js",
  tooltipString : {
    tableID : "GlobalUI.json",
    stringID : "0x0ca55a86",
    placeholder : "kPopupItemDeliveriesToggle"
  },
  onAudio : simcity.audio.kInstanceAcceptCoalOn,
  offAudio : simcity.audio.kInstanceAcceptCoalOff,
  closeMenu : !1,
  allowNullResults : !0,
  initQueries : function () {
    return {
      hasToggle : ["selectedUnit", "nonSimProperties", simcity.kPropertyUnitShowDeliveriesToggle],
      onFlag : ["selectedUnit", "flags", simcity.kUnitFlagIDDeliveriesAllowed]
    }
  },
  initTest : function (a) {
    return a.hasToggle
  },
  init : function (a, b) {
    a.layout.FindControlByID(scrui.cPopupMenu.kButtonID).SetSelected(b.onFlag)
  },
  onItemClicked : function () {
    scrui.PostGameCommand(scrui.BuildCommand(["runSelectedUnitPlayerRule", simcity.kRuleIDSCPlayerRuleToggleDeliveries]))
  }
};
simcity.PopupItems.kGlobalDeliveriesToggle = {
  layoutPath : "Layouts/PopupMenu/PopupMenuItemToggle-GlobalDeliveries.js",
  tooltipString : {
    tableID : "GlobalUI.json",
    stringID : "0x0dcb38a2",
    placeholder : "kGlobalDeliveriesToggle"
  },
  onAudio : simcity.audio.kInstanceAcceptCoalOn,
  offAudio : simcity.audio.kInstanceAcceptCoalOff,
  closeMenu : !1,
  allowNullResults : !0,
  initQueries : function () {
    return {
      hasToggle : ["selectedUnit", "nonSimProperties", simcity.kPropertyUnitShowDeliveriesToggle],
      importFlag : ["selectedUnit", "flags", simcity.kUnitFlagIDImportLot]
    }
  },
  initTest : function (a) {
    return a.hasToggle
  },
  init : function (a, b) {
    a.layout.FindControlByID(scrui.cPopupMenu.kButtonID).SetSelected(!b.importFlag)
  },
  onItemClicked : function () {
    scrui.PostGameCommand(scrui.BuildCommand(["runSelectedUnitPlayerRule", simcity.kRuleIDSCPlayerRuleToggleImportExport]))
  }
};
simcity.PopupItems.kImportExportToggle = {
  layoutPath : "Layouts/PopupMenu/PopupMenuItemToggle-IO.js",
  tooltipString : {
    tableID : "GlobalUI.json",
    stringID : "0x0ca55a89",
    placeholder : "kPopupItemImportExportToggle"
  },
  onAudio : simcity.audio.kInstanceImportSwitch,
  offAudio : simcity.audio.kInstanceExportSwitch,
  closeMenu : !1,
  allowNullResults : !0,
  initQueries : function () {
    var a = scrui.RequestStringFromUnitRef(simcity.gRolloverManager.mRolloverUI.mSelectedUnitRef);
    return {
      hasToggle : ["selectedUnit", "nonSimProperties", simcity.kPropertyUnitShowImportExportToggle],
      onFlag : ["selectedUnit", "flags", simcity.kUnitFlagIDImportLot],
      offFlag : ["selectedUnit", "flags", simcity.kUnitFlagIDExportLot],
      propKey : ["units", a, "propKey"],
      miningHQIsOn : ["bins", simcity.kResourceIDHQ_Mining_IsOn]
    }
  },
  initTest : function (a) {
    return a.hasToggle ? (a.propKey.instance == scrui.IDFromName("T_Trading_T1_CoalTradeLotGlobal_01_01_N") || a.propKey.instance == scrui.IDFromName("T_Trading_T1_CoalTradeLot_01_01_N")) && 0 == a.miningHQIsOn.amount ? !1 : !0 : !1
  },
  init : function (a, b) {
    a.layout.FindControlByID(scrui.cPopupMenu.kButtonID).SetSelected(b.onFlag &&
      !b.offFlag)
  },
  onItemClicked : function () {
    scrui.PostGameCommand(scrui.BuildCommand(["runSelectedUnitPlayerRule", simcity.kRuleIDSCPlayerRuleToggleImportExport]))
  }
};
simcity.PopupItems.kImportExportClickPanel = {
  layoutPath : "Layouts/PopupMenu/PopupMenuItemToggle-ImportExportLot.js",
  tooltipString : {
    tableID : "GlobalUI.json",
    stringID : "0x0ca55a89",
    placeholder : "kPopupItemImportExportToggle"
  },
  closeMenu : !0,
  onItemClicked : function () {
    var a = simcity.gRolloverManager.mRolloverUI.mSelectedUnitRef,
    b = simcity.gGlobalUIHandler;
    scrui.Assert(!b.mImportExportUIHandler);
    b.mImportExportUIHandler = new simcity.cImportExportUIHandler;
    b.mImportExportUIHandler.Init(gUIManager.FindControlByID(simcity.kWinRootWindowID));
    gUIManager.RegisterUIHandler(b.mImportExportUIHandler);
    simcity.gGlobalUIHandler.mImportExportUIHandler.Show(a)
  }
};
simcity.PopupItems.kIncreasePowerDealSizeClick = {
  layoutPath : "Layouts/PopupMenu/PopupMenuItem.js",
  iconPath : "Graphics/ToolIcons/deal_increase.png",
  closeMenu : !1,
  onItemClicked : function (a) {
    a = a.layout.FindControlByID(scrui.cPopupMenu.kButtonID);
    simcity.CreateUnitCloseby("Trading_IncreasePowerDealSize", scrui.RequestStringFromUnitRef(simcity.gRolloverManager.mRolloverUI.mSelectedUnitRef));
    a.SetSelected(!1)
  }
};
simcity.PopupItems.kDecreasePowerDealSizeClick = {
  layoutPath : "Layouts/PopupMenu/PopupMenuItem.js",
  iconPath : "Graphics/ToolIcons/deal_decrease.png",
  closeMenu : !1,
  onItemClicked : function (a) {
    a = a.layout.FindControlByID(scrui.cPopupMenu.kButtonID);
    simcity.CreateUnitCloseby("Trading_DecreasePowerDealSize", scrui.RequestStringFromUnitRef(simcity.gRolloverManager.mRolloverUI.mSelectedUnitRef));
    a.SetSelected(!1)
  }
};
simcity.PopupItems.kIncreaseWaterDealSizeClick = {
  layoutPath : "Layouts/PopupMenu/PopupMenuItem.js",
  iconPath : "Graphics/ToolIcons/deal_increase.png",
  closeMenu : !1,
  onItemClicked : function (a) {
    a = a.layout.FindControlByID(scrui.cPopupMenu.kButtonID);
    simcity.CreateUnitCloseby("Trading_IncreaseWaterDealSize", scrui.RequestStringFromUnitRef(simcity.gRolloverManager.mRolloverUI.mSelectedUnitRef));
    a.SetSelected(!1)
  }
};
simcity.PopupItems.kDecreaseWaterDealSizeClick = {
  layoutPath : "Layouts/PopupMenu/PopupMenuItem.js",
  iconPath : "Graphics/ToolIcons/deal_decrease.png",
  closeMenu : !1,
  onItemClicked : function (a) {
    a = a.layout.FindControlByID(scrui.cPopupMenu.kButtonID);
    simcity.CreateUnitCloseby("Trading_DecreaseWaterDealSize", scrui.RequestStringFromUnitRef(simcity.gRolloverManager.mRolloverUI.mSelectedUnitRef));
    a.SetSelected(!1)
  }
};
simcity.PopupItems.kIncreaseSimoleonGiftSizeClick = {
  layoutPath : "Layouts/PopupMenu/PopupMenuItem.js",
  iconPath : "Graphics/ToolIcons/deal_increase.png",
  closeMenu : !1,
  initQueries : function () {
    return {
      HQ_CityHall_Level : ["bins", simcity.kResourceIDHQ_CityHall_Level],
      hasMayorsHouse : ["bins", simcity.kResourceIDHasMayorsHouseSmall],
      giftInTransit : ["selectedUnit", "bins", simcity.kResourceIDTradeGiftSendingSimoleons]
    }
  },
  initTest : function (a) {
    return 0 == a.giftInTransit.amount && (1 < a.HQ_CityHall_Level.amount || 1 == a.hasMayorsHouse.amount)
  },
  onItemClicked : function (a) {
    a = a.layout.FindControlByID(scrui.cPopupMenu.kButtonID);
    simcity.CreateUnitCloseby("Trading_IncreaseSimoleonGiftSize", scrui.RequestStringFromUnitRef(simcity.gRolloverManager.mRolloverUI.mSelectedUnitRef));
    a.SetSelected(!1)
  }
};
simcity.PopupItems.kDecreaseSimoleonGiftSizeClick = {
  layoutPath : "Layouts/PopupMenu/PopupMenuItem.js",
  iconPath : "Graphics/ToolIcons/deal_decrease.png",
  closeMenu : !1,
  initQueries : function () {
    return {
      HQ_CityHall_Level : ["bins", simcity.kResourceIDHQ_CityHall_Level],
      hasMayorsHouse : ["bins", simcity.kResourceIDHasMayorsHouseSmall],
      giftInTransit : ["selectedUnit", "bins", simcity.kResourceIDTradeGiftSendingSimoleons]
    }
  },
  initTest : function (a) {
    return 0 == a.giftInTransit.amount && (1 < a.HQ_CityHall_Level.amount || 1 == a.hasMayorsHouse.amount)
  },
  onItemClicked : function (a) {
    a = a.layout.FindControlByID(scrui.cPopupMenu.kButtonID);
    simcity.CreateUnitCloseby("Trading_DecreaseSimoleonGiftSize", scrui.RequestStringFromUnitRef(simcity.gRolloverManager.mRolloverUI.mSelectedUnitRef));
    a.SetSelected(!1)
  }
};
simcity.PopupItems.kSetMaximumSimoleonGiftSizeClick = {
  layoutPath : "Layouts/PopupMenu/PopupMenuItem.js",
  iconPath : "Graphics/ToolIcons/gift_max.png",
  closeMenu : !1,
  initQueries : function () {
    return {
      HQ_CityHall_Level : ["bins", simcity.kResourceIDHQ_CityHall_Level],
      hasMayorsHouse : ["bins", simcity.kResourceIDHasMayorsHouseSmall],
      giftInTransit : ["selectedUnit", "bins", simcity.kResourceIDTradeGiftSendingSimoleons]
    }
  },
  initTest : function (a) {
    return 0 == a.giftInTransit.amount && (1 < a.HQ_CityHall_Level.amount || 1 == a.hasMayorsHouse.amount)
  },
  onItemClicked : function (a) {
    a = a.layout.FindControlByID(scrui.cPopupMenu.kButtonID);
    simcity.CreateUnitCloseby("Trading_SetMaximumSimoleonGiftSize", scrui.RequestStringFromUnitRef(simcity.gRolloverManager.mRolloverUI.mSelectedUnitRef));
    a.SetSelected(!1)
  }
};
simcity.PopupItems.kClearSimoleonGiftSizeClick = {
  layoutPath : "Layouts/PopupMenu/PopupMenuItem.js",
  iconPath : "Graphics/ToolIcons/gift_clear.png",
  closeMenu : !1,
  initQueries : function () {
    return {
      HQ_CityHall_Level : ["bins", simcity.kResourceIDHQ_CityHall_Level],
      hasMayorsHouse : ["bins", simcity.kResourceIDHasMayorsHouseSmall],
      giftInTransit : ["selectedUnit", "bins", simcity.kResourceIDTradeGiftSendingSimoleons]
    }
  },
  initTest : function (a) {
    return 0 == a.giftInTransit.amount && (1 < a.HQ_CityHall_Level.amount || 1 == a.hasMayorsHouse.amount)
  },
  onItemClicked : function (a) {
    a = a.layout.FindControlByID(scrui.cPopupMenu.kButtonID);
    simcity.CreateUnitCloseby("Trading_ClearSimoleonGiftSize", scrui.RequestStringFromUnitRef(simcity.gRolloverManager.mRolloverUI.mSelectedUnitRef));
    a.SetSelected(!1)
  }
};
simcity.PopupItems.kLeaderboardClick = {
  layoutPath : "Layouts/PopupMenu/PopupMenuItemLeaderboard.js",
  tooltipString : {
    tableID : "GlobalUI.json",
    stringID : "0x0eb4ab1e",
    placeholder : "kLeaderboardClick"
  },
  closeMenu : !0,
  initQueries : function () {
    return {
      LBCategory : [simcity.kDataSelectedUnit, simcity.kDataNonSimProperties, simcity.kPropEcoUnitLeaderboardID]
    }
  },
  init : function (a, b) {
    a.layout.FindControlByID(scrui.cPopupMenu.kButtonID).LBCategory = b.LBCategory
  },
  onItemClicked : function (a) {
    a = a.layout.FindControlByID(scrui.cPopupMenu.kButtonID);
    simcity.gGlobalUIHandler.mLeaderboardUIHandler.Show(null, [a.LBCategory])
  }
};
simcity.GeneratePopupItemDataBindingMap = function () {
  var a = {},
  b;
  for (b in simcity.PopupItems)
    simcity.PopupItems.hasOwnProperty(b) && (a[scrui.IDFromName(b)] = simcity.PopupItems[b]);
  return a
};
simcity.Telemetry = {};
simcity.AddTelemetry = function (a, b, c) {
  c = scrui.SerializeJSON(c);
  scrui.PostGameCommand(scrui.BuildCommand(["gameUITelemetry", a, b, c]))
};
simcity.databindings.DataBindingsPopulationUI = {};
simcity.kUnitID_Trading_City_Marker = 3939731971;
simcity.kUnitID_Trading_City_Connection = 1770514921;
simcity.kUnitAttachedUICityLinkUnits = 3133537757;
simcity.kGlobalUIPopulationInfo = {
  rootControlID : simcity.kWinPopulationContainer,
  rootControl : null,
  minimalQueries : {},
  allQueries : {},
  populationData : {
    resident : {
      data : {
        shopperW1 : {
          queryKey : "residentShopperW1",
          query : [simcity.kDataResourceAmount, simcity.kResourceIDResidentShopperW1],
          value : -1
        },
        shopperW2 : {
          queryKey : "residentShopperW2",
          query : [simcity.kDataResourceAmount, simcity.kResourceIDResidentShopperW2],
          value : -1
        },
        shopperW3 : {
          queryKey : "residentShopperW3",
          query : [simcity.kDataResourceAmount, simcity.kResourceIDResidentShopperW3],
          value : -1
        },
        shopperRestingW1 : {
          queryKey : "shopperRestingW1",
          query : [simcity.kDataResourceAmount, simcity.kResourceIDShopperRestingW1],
          value : -1
        },
        shopperRestingW2 : {
          queryKey : "shopperRestingW2",
          query : [simcity.kDataResourceAmount, simcity.kResourceIDShopperRestingW2],
          value : -1
        },
        shopperRestingW3 : {
          queryKey : "shopperRestingW3",
          query : [simcity.kDataResourceAmount, simcity.kResourceIDShopperRestingW3],
          value : -1
        },
        shopperRestingTotal : {
          value : -1
        },
        workerW1 : {
          queryKey : "residentWorkerW1",
          query : [simcity.kDataResourceAmount, simcity.kResourceIDResidentWorkerW1],
          value : -1
        },
        workerW2 : {
          queryKey : "residentWorkerW2",
          query : [simcity.kDataResourceAmount, simcity.kResourceIDResidentWorkerW2],
          value : -1
        },
        workerW3 : {
          queryKey : "residentWorkerW3",
          query : [simcity.kDataResourceAmount, simcity.kResourceIDResidentWorkerW3],
          value : -1
        },
        neighboringShopperW1 : {
          value : -1
        },
        neighboringShopperW2 : {
          value : -1
        },
        neighboringShopperW3 : {
          value : -1
        },
        neighboringWorkerW1 : {
          value : -1
        },
        neighboringWorkerW2 : {
          value : -1
        },
        neighboringWorkerW3 : {
          value : -1
        },
        kids : {
          queryKey : "residentKids",
          query : [simcity.kDataResourceAmount,
            simcity.kResourceIDKid],
          value : -1
        }
      }
    },
    availableResident : {
      data : {
        shopperW1 : {
          value : -1
        },
        shopperW2 : {
          value : -1
        },
        shopperW3 : {
          value : -1
        },
        totalShoppers : {
          value : -1
        },
        workerW1 : {
          value : -1
        },
        workerW2 : {
          value : -1
        },
        workerW3 : {
          value : -1
        },
        totalWorkers : {
          value : -1
        }
      }
    },
    importedRes : {
      data : {
        shopperW1 : {
          queryKey : "importedResidentShopperW1",
          query : [simcity.kDataBinAmount, simcity.kResourceIDImportedResidentShopperW1],
          value : -1
        },
        shopperW2 : {
          queryKey : "importedResidentShopperW2",
          query : [simcity.kDataBinAmount, simcity.kResourceIDImportedResidentShopperW2],
          value : -1
        },
        shopperW3 : {
          queryKey : "importedResidentShopperW3",
          query : [simcity.kDataBinAmount, simcity.kResourceIDImportedResidentShopperW3],
          value : -1
        },
        totalShoppers : {
          value : -1
        },
        workerW1 : {
          queryKey : "importedResidentWorkerW1",
          query : [simcity.kDataBinAmount, simcity.kResourceIDImportedResidentWorkerW1],
          value : -1
        },
        workerW2 : {
          queryKey : "importedResidentWorkerW2",
          query : [simcity.kDataBinAmount, simcity.kResourceIDImportedResidentWorkerW2],
          value : -1
        },
        workerW3 : {
          queryKey : "importedResidentWorkerW3",
          query : [simcity.kDataBinAmount,
            simcity.kResourceIDImportedResidentWorkerW3],
          value : -1
        },
        totalWorkers : {
          value : -1
        },
        kids : {
          queryKey : "importedKid",
          query : [simcity.kDataBinAmount, simcity.kResourceIDImportedKid],
          value : -1
        },
        total : {
          value : -1
        }
      }
    },
    exportedRes : {
      data : {
        shopperW1 : {
          queryKey : "exportedResidentShopperW1",
          query : [simcity.kDataBinAmount, simcity.kResourceIDShoppersExportedW1],
          value : -1
        },
        shopperW2 : {
          queryKey : "exportedResidentShopperW2",
          query : [simcity.kDataBinAmount, simcity.kResourceIDShoppersExportedW2],
          value : -1
        },
        shopperW3 : {
          queryKey : "exportedResidentShopperW3",
          query : [simcity.kDataBinAmount, simcity.kResourceIDShoppersExportedW3],
          value : -1
        },
        totalShoppers : {
          value : -1
        },
        workerW1 : {
          queryKey : "exportedResidentWorkerW1",
          query : [simcity.kDataBinAmount, simcity.kResourceIDWorkersExportedW1],
          value : -1
        },
        workerW2 : {
          queryKey : "exportedResidentWorkerW2",
          query : [simcity.kDataBinAmount, simcity.kResourceIDWorkersExportedW2],
          value : -1
        },
        workerW3 : {
          queryKey : "exportedResidentWorkerW3",
          query : [simcity.kDataBinAmount, simcity.kResourceIDWorkersExportedW3],
          value : -1
        },
        totalWorkers : {
          value : -1
        },
        total : {
          value : -1
        }
      }
    },
    residentPaused : {
      data : {
        shopperW1 : {
          queryKey : "residentShopperW1Paused",
          query : [simcity.kDataResourceAmount, simcity.kResourceIDResidentShopperW1Paused],
          value : -1
        },
        shopperW2 : {
          queryKey : "residentShopperW2Paused",
          query : [simcity.kDataResourceAmount, simcity.kResourceIDResidentShopperW2Paused],
          value : -1
        },
        shopperW3 : {
          queryKey : "residentShopperW3Paused",
          query : [simcity.kDataResourceAmount, simcity.kResourceIDResidentShopperW3Paused],
          value : -1
        },
        workerW1 : {
          queryKey : "residentWorkerW1Paused",
          query : [simcity.kDataResourceAmount,
            simcity.kResourceIDResidentWorkerW1Paused],
          value : -1
        },
        workerW2 : {
          queryKey : "residentWorkerW2Paused",
          query : [simcity.kDataResourceAmount, simcity.kResourceIDResidentWorkerW2Paused],
          value : -1
        },
        workerW3 : {
          queryKey : "residentWorkerW3Paused",
          query : [simcity.kDataResourceAmount, simcity.kResourceIDResidentWorkerW3Paused],
          value : -1
        }
      }
    },
    residentLocked : {
      data : {
        workerW1 : {
          queryKey : "residentWorkerW1Locked",
          query : [simcity.kDataResourceAmount, simcity.kResourceIDResidentWorkerW1Locked],
          value : -1
        },
        workerW2 : {
          queryKey : "residentWorkerW2Locked",
          query : [simcity.kDataResourceAmount, simcity.kResourceIDResidentWorkerW2Locked],
          value : -1
        },
        workerW3 : {
          queryKey : "residentWorkerW3Locked",
          query : [simcity.kDataResourceAmount, simcity.kResourceIDResidentWorkerW3Locked],
          value : -1
        },
        total : {
          value : -1
        }
      }
    },
    totalResident : {
      data : {
        w1 : {
          value : -1
        },
        w2 : {
          value : -1
        },
        w3 : {
          value : -1
        },
        workersW1 : {
          value : -1
        },
        workersW2 : {
          value : -1
        },
        workersW3 : {
          value : -1
        },
        totalWorkers : {
          value : -1
        },
        shoppersW1 : {
          value : -1
        },
        shoppersW2 : {
          value : -1
        },
        shoppersW3 : {
          value : -1
        },
        totalShoppers : {
          value : -1
        }
      }
    },
    sim : {
      data : {
        workerW1 : {
          queryKey : "simWorkerW1",
          query : [simcity.kDataResourceAmount, simcity.kResourceIDSimWorkerW1],
          value : -1
        },
        workerW2 : {
          queryKey : "simWorkerW2",
          query : [simcity.kDataResourceAmount, simcity.kResourceIDSimWorkerW2],
          value : -1
        },
        workerW3 : {
          queryKey : "simWorkerW3",
          query : [simcity.kDataResourceAmount, simcity.kResourceIDSimWorkerW3],
          value : -1
        },
        totalWorkers : {
          value : -1
        },
        shopperW1 : {
          queryKey : "simShopperW1",
          query : [simcity.kDataResourceAmount, simcity.kResourceIDSimShopperW1],
          value : -1
        },
        shopperW2 : {
          queryKey : "simShopperW2",
          query : [simcity.kDataResourceAmount,
            simcity.kResourceIDSimShopperW2],
          value : -1
        },
        shopperW3 : {
          queryKey : "simShopperW3",
          query : [simcity.kDataResourceAmount, simcity.kResourceIDSimShopperW3],
          value : -1
        },
        totalShoppers : {
          value : -1
        }
      }
    },
    shopper : {
      data : {
        w1 : {
          queryKey : "shopperW1",
          query : [simcity.kDataResourceAmount, simcity.kResourceIDShopperW1],
          value : -1
        },
        w2 : {
          queryKey : "shopperW2",
          query : [simcity.kDataResourceAmount, simcity.kResourceIDShopperW2],
          value : -1
        },
        w3 : {
          queryKey : "shopperW3",
          query : [simcity.kDataResourceAmount, simcity.kResourceIDShopperW3],
          value : -1
        },
        total : {
          value : -1
        }
      }
    },
    waresProduced : {
      data : {
        w1 : {
          value : -1
        },
        w2 : {
          value : -1
        },
        w3 : {
          value : -1
        },
        total : {
          value : -1
        }
      }
    },
    shopCount : {
      data : {
        dayW1 : {
          queryKey : "dayShopW1",
          query : [simcity.kDataResourceAmount, simcity.kResourceIDDayShopW1],
          value : -1
        },
        dayW2 : {
          queryKey : "dayShopW2",
          query : [simcity.kDataResourceAmount, simcity.kResourceIDDayShopW2],
          value : -1
        },
        dayW3 : {
          queryKey : "dayShopW3",
          query : [simcity.kDataResourceAmount, simcity.kResourceIDDayShopW3],
          value : -1
        },
        nightW1 : {
          queryKey : "nightShopW1",
          query : [simcity.kDataResourceAmount, simcity.kResourceIDNightShopW1],
          value : -1
        },
        nightW2 : {
          queryKey : "nightShopW2",
          query : [simcity.kDataResourceAmount, simcity.kResourceIDNightShopW2],
          value : -1
        },
        nightW3 : {
          queryKey : "nightShopW3",
          query : [simcity.kDataResourceAmount, simcity.kResourceIDNightShopW3],
          value : -1
        },
        totalDay : {
          value : -1
        },
        totalNight : {
          value : -1
        }
      }
    },
    worker : {
      data : {
        w1 : {
          queryKey : "workerW1",
          query : [simcity.kDataResourceAmount, simcity.kResourceIDWorkerW1],
          value : -1
        },
        w2 : {
          queryKey : "workerW2",
          query : [simcity.kDataResourceAmount, simcity.kResourceIDWorkerW2],
          value : -1
        },
        w3 : {
          queryKey : "workerW3",
          query : [simcity.kDataResourceAmount, simcity.kResourceIDWorkerW3],
          value : -1
        }
      }
    },
    extraWorker : {
      data : {
        w1 : {
          queryKey : "extraWorkerW1",
          query : [simcity.kDataResourceAmount, simcity.kResourceIDExtraWorkerW1],
          value : -1
        },
        w2 : {
          queryKey : "extraWorkerW2",
          query : [simcity.kDataResourceAmount, simcity.kResourceIDExtraWorkerW2],
          value : -1
        },
        w3 : {
          queryKey : "extraWorkerW3",
          query : [simcity.kDataResourceAmount, simcity.kResourceIDExtraWorkerW3],
          value : -1
        },
        total : {
          value : -1
        }
      }
    },
    extraWorkerPaused : {
      data : {
        w1 : {
          queryKey : "extraWorkerW1Paused",
          query : [simcity.kDataResourceAmount,
            simcity.kResourceIDExtraWorkerW1Paused],
          value : -1
        },
        w2 : {
          queryKey : "extraWorkerW2Paused",
          query : [simcity.kDataResourceAmount, simcity.kResourceIDExtraWorkerW2Paused],
          value : -1
        },
        w3 : {
          queryKey : "extraWorkerW3Paused",
          query : [simcity.kDataResourceAmount, simcity.kResourceIDExtraWorkerW3Paused],
          value : -1
        }
      }
    },
    totalExtraWorker : {
      data : {
        w1 : {
          value : -1
        },
        w2 : {
          value : -1
        },
        w3 : {
          value : -1
        },
        total : {
          value : -1
        }
      }
    },
    currentWorkers : {
      data : {
        w1 : {
          value : -1
        },
        w2 : {
          value : -1
        },
        w3 : {
          value : -1
        },
        total : {
          value : -1
        }
      }
    },
    requiredWorkers : {
      title : "/globalMission.UI.json/0x0dd5d7b4",
      icon : "Graphics/Icons/thing.png",
      data : {
        total : {
          value : -1
        }
      }
    },
    residential : {
      minimalQuery : !0,
      data : {
        shopperW1 : {
          queryKey : "residentialShopperW1",
          query : [simcity.kDataBinAmount, simcity.kResourceIDResidentialShopperW1],
          value : -1
        },
        shopperW2 : {
          queryKey : "residentialShopperW2",
          query : [simcity.kDataBinAmount, simcity.kResourceIDResidentialShopperW2],
          value : -1
        },
        shopperW3 : {
          queryKey : "residentialShopperW3",
          query : [simcity.kDataBinAmount, simcity.kResourceIDResidentialShopperW3],
          value : -1
        },
        totalShoppers : {
          value : -1
        },
        workerW1 : {
          queryKey : "residentialWorkerW1",
          query : [simcity.kDataBinAmount, simcity.kResourceIDResidentialWorkerW1],
          value : -1
        },
        workerW2 : {
          queryKey : "residentialWorkerW2",
          query : [simcity.kDataBinAmount, simcity.kResourceIDResidentialWorkerW2],
          value : -1
        },
        workerW3 : {
          queryKey : "residentialWorkerW3",
          query : [simcity.kDataBinAmount, simcity.kResourceIDResidentialWorkerW3],
          value : -1
        },
        totalWorkers : {
          value : -1
        },
        totalResidentialW1 : {
          value : -1
        },
        totalResidentialW2 : {
          value : -1
        },
        totalResidentialW3 : {
          value : -1
        },
        totalKids : {
          queryKey : "totalKids",
          query : [simcity.kDataBinAmount, simcity.kResourceIDTotalKids],
          value : -1
        },
        total : {
          queryKey : "totalResidential",
          query : [simcity.kDataBinAmount, simcity.kResourceIDTotalResidential],
          value : -1
        }
      }
    },
    employment : {
      minimalQuery : !0,
      data : {
        employedW1 : {
          value : -1
        },
        employedW2 : {
          value : -1
        },
        employedW3 : {
          value : -1
        },
        employedTotal : {
          value : -1
        },
        unEmployedW1 : {
          value : -1
        },
        unEmployedW2 : {
          value : -1
        },
        unEmployedW3 : {
          value : -1
        },
        unEmployedTotal : {
          value : -1
        },
        unfilledW1 : {
          value : -1
        },
        unfilledW2 : {
          value : -1
        },
        unfilledW3 : {
          value : -1
        },
        unfilledTotal : {
          value : -1
        },
        commuteOutW1 : {
          value : -1
        },
        commuteOutW2 : {
          value : -1
        },
        commuteOutW3 : {
          value : -1
        },
        commuteOutTotal : {
          value : -1
        }
      }
    },
    shopperPopulation : {
      minimalQuery : !0,
      data : {
        satisfiedW1 : {
          value : -1
        },
        satisfiedW2 : {
          value : -1
        },
        satisfiedW3 : {
          value : -1
        },
        satisfiedTotal : {
          value : -1
        },
        unsatisfiedW1 : {
          value : -1
        },
        unsatisfiedW2 : {
          value : -1
        },
        unsatisfiedW3 : {
          value : -1
        },
        unsatisfiedTotal : {
          value : -1
        },
        unsoldW1 : {
          value : -1
        },
        unsoldW2 : {
          value : -1
        },
        unsoldW3 : {
          value : -1
        },
        unsoldTotal : {
          value : -1
        },
        commuteOutW1 : {
          value : -1
        },
        commuteOutW2 : {
          value : -1
        },
        commuteOutW3 : {
          value : -1
        },
        commuteOutTotal : {
          value : -1
        }
      }
    },
    requiredQueries : {
      minimalQuery : !0,
      data : {
        w1 : {
          queryKey : "jobsW1",
          query : [simcity.kDataBinAmount, simcity.kResourceIDJobsW1]
        },
        w2 : {
          queryKey : "jobsW2",
          query : [simcity.kDataBinAmount, simcity.kResourceIDJobsW2]
        },
        w3 : {
          queryKey : "jobsW3",
          query : [simcity.kDataBinAmount, simcity.kResourceIDJobsW3]
        },
        neighboringShopperW1 : {
          queryKey : "neighboringResidentShopperW1",
          query : [simcity.kDataCachedUnits, simcity.kUnitID_Trading_City_Connection, simcity.kDataBinAmount, simcity.kResourceIDResidentShopperW1]
        },
        neighboringShopperW2 : {
          queryKey : "neighboringResidentShopperW2",
          query : [simcity.kDataCachedUnits,
            simcity.kUnitID_Trading_City_Connection, simcity.kDataBinAmount, simcity.kResourceIDResidentShopperW2]
        },
        neighboringShopperW3 : {
          queryKey : "neighboringResidentShopperW3",
          query : [simcity.kDataCachedUnits, simcity.kUnitID_Trading_City_Connection, simcity.kDataBinAmount, simcity.kResourceIDResidentShopperW3]
        },
        neighboringWorkerW1 : {
          queryKey : "neighboringResidentWorkerW1",
          query : [simcity.kDataCachedUnits, simcity.kUnitID_Trading_City_Connection, simcity.kDataBinAmount, simcity.kResourceIDResidentWorkerW1]
        },
        neighboringWorkerW2 : {
          queryKey : "neighboringResidentWorkerW2",
          query : [simcity.kDataCachedUnits, simcity.kUnitID_Trading_City_Connection, simcity.kDataBinAmount, simcity.kResourceIDResidentWorkerW2]
        },
        neighboringWorkerW3 : {
          queryKey : "neighboringResidentWorkerW3",
          query : [simcity.kDataCachedUnits, simcity.kUnitID_Trading_City_Connection, simcity.kDataBinAmount, simcity.kResourceIDResidentWorkerW3]
        },
        waresW1 : {
          queryKey : "waresProducedDailyW1",
          query : [simcity.kDataResourceAmount, simcity.kResourceIDShopWaresW1ProducedDaily]
        },
        waresW2 : {
          queryKey : "waresProducedDailyW2",
          query : [simcity.kDataResourceAmount,
            simcity.kResourceIDShopWaresW2ProducedDaily]
        },
        waresW3 : {
          queryKey : "waresProducedDailyW3",
          query : [simcity.kDataResourceAmount, simcity.kResourceIDShopWaresW3ProducedDaily]
        },
        importedW1 : {
          queryKey : "importedJobsW1",
          query : [simcity.kDataCachedUnits, simcity.kUnitID_Trading_City_Connection, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingImportedJobsW1]
        },
        importedW2 : {
          queryKey : "importedJobsW2",
          query : [simcity.kDataCachedUnits, simcity.kUnitID_Trading_City_Connection, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingImportedJobsW2]
        },
        importedW3 : {
          queryKey : "importedJobsW3",
          query : [simcity.kDataCachedUnits, simcity.kUnitID_Trading_City_Connection, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingImportedJobsW3]
        }
      }
    },
    jobs : {
      data : {
        dayW1 : {
          queryKey : "dayJobsW1",
          query : [simcity.kDataBinAmount, simcity.kResourceIDDayJobsW1],
          value : -1
        },
        dayW2 : {
          queryKey : "dayJobsW2",
          query : [simcity.kDataBinAmount, simcity.kResourceIDDayJobsW2],
          value : -1
        },
        dayW3 : {
          queryKey : "dayJobsW3",
          query : [simcity.kDataBinAmount, simcity.kResourceIDDayJobsW3],
          value : -1
        },
        dayTotal : {
          value : -1
        },
        nightW1 : {
          queryKey : "nightJobsW1",
          query : [simcity.kDataBinAmount, simcity.kResourceIDNightJobsW1],
          value : -1
        },
        nightW2 : {
          queryKey : "nightJobsW2",
          query : [simcity.kDataBinAmount, simcity.kResourceIDNightJobsW2],
          value : -1
        },
        nightW3 : {
          queryKey : "nightJobsW3",
          query : [simcity.kDataBinAmount, simcity.kResourceIDNightJobsW3],
          value : -1
        },
        nightTotal : {
          value : -1
        },
        w1 : {
          value : -1
        },
        w2 : {
          value : -1
        },
        w3 : {
          value : -1
        },
        total : {
          queryKey : "totalJobs",
          query : [simcity.kDataBinAmount, simcity.kResourceIDTotalJobs],
          value : -1
        },
        importedW1 : {
          value : -1
        },
        importedW2 : {
          value : -1
        },
        importedW3 : {
          value : -1
        }
      }
    },
    tourist : {
      data : {
        touristW1 : {
          queryKey : "touristW1",
          query : [simcity.kDataResourceAmount, simcity.kResourceIDTouristW1],
          value : -1
        },
        touristW2 : {
          queryKey : "touristW2",
          query : [simcity.kDataResourceAmount, simcity.kResourceIDTouristW2],
          value : -1
        },
        touristW3 : {
          queryKey : "touristW3",
          query : [simcity.kDataResourceAmount, simcity.kResourceIDTouristW3],
          value : -1
        },
        guestW1 : {
          queryKey : "guestW1",
          query : [simcity.kDataResourceAmount, simcity.kResourceIDGuestW1],
          value : -1
        },
        guestW2 : {
          queryKey : "guestW2",
          query : [simcity.kDataResourceAmount,
            simcity.kResourceIDGuestW2],
          value : -1
        },
        guestW3 : {
          queryKey : "guestW3",
          query : [simcity.kDataResourceAmount, simcity.kResourceIDGuestW3],
          value : -1
        },
        todayW1 : {
          queryKey : "touristsW1Today",
          query : [simcity.kDataBinAmount, simcity.kResourceIDTouristW1EnteredToday],
          value : -1
        },
        todayW2 : {
          queryKey : "touristsW2Today",
          query : [simcity.kDataBinAmount, simcity.kResourceIDTouristW2EnteredToday],
          value : -1
        },
        todayW3 : {
          queryKey : "touristsW3Today",
          query : [simcity.kDataBinAmount, simcity.kResourceIDTouristW3EnteredToday],
          value : -1
        },
        yesterdayW1 : {
          queryKey : "touristsW1Yesterday",
          query : [simcity.kDataBinAmount, simcity.kResourceIDTouristW1EnteredYesterday],
          value : -1
        },
        yesterdayW2 : {
          queryKey : "touristsW2Yesterday",
          query : [simcity.kDataBinAmount, simcity.kResourceIDTouristW2EnteredYesterday],
          value : -1
        },
        yesterdayW3 : {
          queryKey : "touristsW3Yesterday",
          query : [simcity.kDataBinAmount, simcity.kResourceIDTouristW3EnteredYesterday],
          value : -1
        },
        populationW1 : {
          value : -1
        },
        populationW2 : {
          value : -1
        },
        populationW3 : {
          value : -1
        },
        populationTotal : {
          value : -1
        }
      }
    },
    students : {
      data : {
        totalKidsYesterday : {
          queryKey : "totalKidsYesterday",
          query : [simcity.kDataBinAmount, simcity.kResourceIDTotalKidsYesterday],
          value : -1
        },
        totalStudents : {
          queryKey : "totalStudents",
          query : [simcity.kDataBinAmount, simcity.kResourceIDTotalStudents],
          value : -1
        },
        totalStudentsYesterday : {
          queryKey : "totalStudentsYesterday",
          query : [simcity.kDataBinAmount, simcity.kResourceIDTotalStudentsYesterday],
          value : -1
        },
        localStudentsTodayE2 : {
          queryKey : "localStudentsTodayE2",
          query : [simcity.kDataBinAmount, simcity.kResourceIDLocalStudentsTodayE2],
          value : -1
        },
        localStudentsYesterdayE2 : {
          queryKey : "localStudentsYesterdayE2",
          query : [simcity.kDataBinAmount, simcity.kResourceIDLocalStudentsYesterdayE2],
          value : -1
        },
        localStudentsTodayE3 : {
          queryKey : "localStudentsTodayE3",
          query : [simcity.kDataBinAmount, simcity.kResourceIDLocalStudentsTodayE3],
          value : -1
        },
        localStudentsYesterdayE3 : {
          queryKey : "localStudentsYesterdayE3",
          query : [simcity.kDataBinAmount, simcity.kResourceIDLocalStudentsYesterdayE3],
          value : -1
        },
        examsPassedTodayE2 : {
          queryKey : "examsPassedTodayE2",
          query : [simcity.kDataBinAmount, simcity.kResourceIDExamsPassedTodayE2],
          value : -1
        },
        examsPassedYesterdayE2 : {
          queryKey : "examsPassedYesterdayE2",
          query : [simcity.kDataBinAmount, simcity.kResourceIDExamsPassedYesterdayE2],
          value : -1
        },
        examsPassedTodayE3 : {
          queryKey : "examsPassedTodayE3",
          query : [simcity.kDataBinAmount, simcity.kResourceIDExamsPassedTodayE3],
          value : -1
        },
        examsPassedYesterdayE3 : {
          queryKey : "examsPassedYesterdayE3",
          query : [simcity.kDataBinAmount, simcity.kResourceIDExamsPassedYesterdayE3],
          value : -1
        },
        currentE2TradeStudents : {
          queryKey : "currentE2TradeStudents",
          query : [simcity.kDataCachedUnits, 1779926452, simcity.kDataBinAmount, simcity.kResourceIDFromTradingConnection],
          value : -1
        },
        currentE3TradeStudentsW1 : {
          queryKey : "currentE3TradeStudentsW1",
          query : [simcity.kDataCachedUnits, 1779926453, simcity.kDataBinAmount, simcity.kResourceIDTradeStudentW1],
          value : -1
        },
        currentE3TradeStudentsW2 : {
          queryKey : "currentE3TradeStudentsW2",
          query : [simcity.kDataCachedUnits, 1779926453, simcity.kDataBinAmount, simcity.kResourceIDTradeStudentW2],
          value : -1
        },
        currentE3TradeStudentsW3 : {
          queryKey : "currentE3TradeStudentsW3",
          query : [simcity.kDataCachedUnits, 1779926453, simcity.kDataBinAmount, simcity.kResourceIDTradeStudentW3],
          value : -1
        },
        summaryKids : {
          value : -1
        },
        summaryStudents : {
          value : -1
        },
        summaryLocalStudents : {
          value : -1
        },
        summaryRegionalStudents : {
          value : -1
        },
        kidE2 : {
          queryKey : "kidE2",
          query : [simcity.kDataResourceAmount, simcity.kResourceIDKidE2],
          value : -1
        },
        kidE3 : {
          queryKey : "kidE3",
          query : [simcity.kDataResourceAmount, simcity.kResourceIDKidE3],
          value : -1
        },
        desksE2 : {
          queryKey : "desksE2",
          query : [simcity.kDataBinAmount, simcity.kResourceIDSpotsForKidsE2],
          value : -1
        },
        desksE3 : {
          queryKey : "desksE3",
          query : [simcity.kDataBinAmount, simcity.kResourceIDSpotsForKidsE3],
          value : -1
        },
        totalDesks : {
          queryKey : "totalDesks",
          query : [simcity.kDataBinAmount, simcity.kResourceIDSpotsForKids],
          value : -1
        },
        studyingE2 : {
          queryKey : "studentStudyingE2",
          query : [simcity.kDataBinAmount, simcity.kResourceIDStudentStudyingE2],
          value : -1
        },
        studyingE3 : {
          queryKey : "studentStudyingE3",
          query : [simcity.kDataResourceAmount, simcity.kResourceIDStudentStudyingE3],
          value : -1
        },
        studyingInBorderE2 : {
          queryKey : "studentStudyingInBorderE2",
          query : [simcity.kDataCachedUnits, simcity.kUnitAttachedUICityLinkUnits, simcity.kDataBinAmount,
            simcity.kResourceIDStudentStudyingE2],
          value : -1
        },
        studyingInBorderE3 : {
          queryKey : "studentStudyingInBorderE3",
          query : [simcity.kDataCachedUnits, simcity.kUnitAttachedUICityLinkUnits, simcity.kDataBinAmount, simcity.kResourceIDStudentStudyingE3],
          value : -1
        },
        totalStudyingInBorder : {
          value : -1
        },
        studentToLeaveE3 : {
          queryKey : "studentToLeaveE3",
          query : [simcity.kDataResourceAmount, simcity.kResourceIDStudentToLeave],
          value : -1
        },
        examsPassedE2 : {
          queryKey : "examsPassedE2",
          query : [simcity.kDataResourceAmount, simcity.kResourceIDExamsPassedE2],
          value : -1
        },
        examsPassedGlobalE2 : {
          queryKey : "examsPassedGlobalE2",
          query : [simcity.kDataBinAmount, simcity.kResourceIDExamsPassedE2],
          value : -1
        },
        examsPassedE3 : {
          queryKey : "examsPassedE3",
          query : [simcity.kDataResourceAmount, simcity.kResourceIDExamsPassedE3],
          value : -1
        },
        tokenE2 : {
          queryKey : "studentTokenE2",
          query : [simcity.kDataResourceAmount, simcity.kResourceIDStudentTokenE2],
          value : -1
        },
        tokenE3 : {
          queryKey : "studentTokenE3",
          query : [simcity.kDataResourceAmount, simcity.kResourceIDStudentTokenE3],
          value : -1
        },
        parkKid : {
          queryKey : "parkKid",
          query : [simcity.kDataResourceAmount, simcity.kResourceIDParkKid],
          value : -1
        },
        uneducated : {
          value : -1
        },
        total : {
          value : -1
        },
        notEnrolled : {
          value : -1
        },
        extraDesks : {
          value : -1
        }
      }
    },
    homeless : {
      data : {
        homelessForaging : {
          queryKey : "homelessForaging",
          query : [simcity.kDataResourceAmount, simcity.kResourceIDHomelessForaging],
          value : -1
        },
        homelessSleeping : {
          queryKey : "homelessSleeping",
          query : [simcity.kDataResourceAmount, simcity.kResourceIDHomelessSleeping],
          value : -1
        },
        homelessPanhandling : {
          queryKey : "homelessPanhandling",
          query : [simcity.kDataResourceAmount,
            simcity.kResourceIDHomelessPanhandling],
          value : -1
        },
        homelessWandering : {
          value : -1
        },
        total : {
          queryKey : "homeless",
          query : [simcity.kDataResourceAmount, simcity.kResourceIDHomeless],
          value : -1
        }
      }
    },
    freight : {
      minimalQuery : !0,
      data : {
        production : {
          queryKey : "freightProduction",
          query : [simcity.kDataBinAmount, simcity.kResourceIDFreightProducer],
          value : -1
        },
        consumption : {
          queryKey : "localFreightConsumption",
          query : [simcity.kDataBinAmount, simcity.kResourceIDFreightCapacityGlobal],
          value : -1
        },
        neighborConsumption : {
          queryKey : "neighborFreightConsumption",
          query : [simcity.kDataCachedUnits, simcity.kUnitID_Trading_City_Connection, simcity.kDataBins, simcity.kResourceIDFreightCapacityGlobal],
          value : -1
        },
        freightCapacity : {
          queryKey : "freightCapacity",
          query : [simcity.kDataResourceAmount, simcity.kResourceIDFreightCapacityGlobal],
          value : -1
        },
        satisfied : {
          value : -1
        },
        unsatisfied : {
          value : -1
        },
        unfulfilled : {
          value : -1
        },
        shippingOutToday : {
          queryKey : "shippingOutToday",
          query : [simcity.kDataBinAmount, simcity.kResourceIDFreightExportedToday],
          value : -1
        },
        shippingOutYesterday : {
          queryKey : "shippingOutYesterday",
          query : [simcity.kDataBinAmount, simcity.kResourceIDFreightExportedYesterday],
          value : -1
        },
        shippingInToday : {
          queryKey : "shippingInToday",
          query : [simcity.kDataBinAmount, simcity.kResourceIDFreightImportedToday],
          value : -1
        },
        shippingInYesterday : {
          queryKey : "shippingInYesterday",
          query : [simcity.kDataBinAmount, simcity.kResourceIDFreightImportedYesterday],
          value : -1
        },
        availableBorder : {
          queryKey : "availableBorder",
          query : [simcity.kDataCachedUnits, simcity.kUnitID_Trading_City_Connection, simcity.kDataBinAmount, simcity.kResourceIDFreightProducer],
          value : -1
        },
        commuteOut : {
          value : -1
        },
        commuteIn : {
          value : -1
        }
      }
    },
    visiting : {
      data : {
        total : {
          value : -1
        }
      }
    }
  },
  init : function () {
    for (var a in this.populationData) {
      var b = this.populationData[a],
      c = b.data || [],
      b = b.minimalQuery,
      d;
      for (d in c) {
        var e = c[d];
        e.queryKey && e.query && (this.allQueries[e.queryKey] = e.query, b && (this.minimalQueries[e.queryKey] = e.query))
      }
    }
  },
  action : function (a) {
    this.populationData.residential.data.total.value = a.totalResidential;
    if (this.rootControl.DestroyLayout)
      this.rootControl.DestroyChildren(), this.rootControl.DestroyLayout =
        !1, gUIManager.UnregisterUIHandler(simcity.gGlobalUIHandler.mPopulationUI), delete simcity.gGlobalUIHandler.mPopulationUI;
    else {
      if (this.rootControl.mIsVisible) {
        this.populationData.residential.data.shopperW1.value = a.residentialShopperW1;
        this.populationData.residential.data.shopperW2.value = a.residentialShopperW2;
        this.populationData.residential.data.shopperW3.value = a.residentialShopperW3;
        this.populationData.residential.data.workerW1.value = a.residentialWorkerW1;
        this.populationData.residential.data.workerW2.value =
          a.residentialWorkerW2;
        this.populationData.residential.data.workerW3.value = a.residentialWorkerW3;
        this.populationData.residential.data.totalKids.value = a.totalKids;
        this.populationData.waresProduced.data.w1.value = Math.round(a.waresProducedDailyW1 / 3);
        this.populationData.waresProduced.data.w2.value = Math.round(a.waresProducedDailyW2 / 3);
        this.populationData.waresProduced.data.w3.value = Math.round(a.waresProducedDailyW3 / 3);
        this.populationData.waresProduced.data.total.value = this.populationData.waresProduced.data.w1.value +
          this.populationData.waresProduced.data.w2.value + this.populationData.waresProduced.data.w3.value;
        this.populationData.shopCount.data.dayW1.value = a.dayShopW1;
        this.populationData.shopCount.data.dayW2.value = a.dayShopW2;
        this.populationData.shopCount.data.dayW3.value = a.dayShopW3;
        this.populationData.shopCount.data.nightW1.value = a.nightShopW1;
        this.populationData.shopCount.data.nightW2.value = a.nightShopW2;
        this.populationData.shopCount.data.nightW3.value = a.nightShopW3;
        this.populationData.shopCount.data.totalDay.value =
          this.populationData.shopCount.data.dayW1.value + this.populationData.shopCount.data.dayW2.value + this.populationData.shopCount.data.dayW3.value;
        this.populationData.shopCount.data.totalNight.value = this.populationData.shopCount.data.nightW1.value + this.populationData.shopCount.data.nightW2.value + this.populationData.shopCount.data.nightW3.value;
        this.populationData.jobs.data.dayW1.value = a.dayJobsW1;
        this.populationData.jobs.data.dayW2.value = a.dayJobsW2;
        this.populationData.jobs.data.dayW3.value = a.dayJobsW3;
        this.populationData.jobs.data.nightW1.value = a.nightJobsW1;
        this.populationData.jobs.data.nightW2.value = a.nightJobsW2;
        this.populationData.jobs.data.nightW3.value = a.nightJobsW3;
        this.populationData.jobs.data.w1.value = a.jobsW1;
        this.populationData.jobs.data.w2.value = a.jobsW2;
        this.populationData.jobs.data.w3.value = a.jobsW3;
        this.populationData.jobs.data.total.value = a.totalJobs;
        this.populationData.sim.data.workerW1.value = a.simWorkerW1;
        this.populationData.sim.data.workerW2.value = a.simWorkerW2;
        this.populationData.sim.data.workerW3.value =
          a.simWorkerW3;
        this.populationData.sim.data.shopperW1.value = a.simShopperW1;
        this.populationData.sim.data.shopperW2.value = a.simShopperW2;
        this.populationData.sim.data.shopperW3.value = a.simShopperW3;
        this.populationData.shopper.data.w1.value = a.shopperW1;
        this.populationData.shopper.data.w2.value = a.shopperW2;
        this.populationData.shopper.data.w3.value = a.shopperW3;
        this.populationData.worker.data.w1.value = a.workerW1;
        this.populationData.worker.data.w2.value = a.workerW2;
        this.populationData.worker.data.w3.value =
          a.workerW3;
        this.populationData.requiredWorkers.data.total.value = this.populationData.worker.data.w1.value + this.populationData.worker.data.w2.value + this.populationData.worker.data.w3.value;
        this.populationData.extraWorker.data.w1.value = a.extraWorkerW1;
        this.populationData.extraWorker.data.w2.value = a.extraWorkerW2;
        this.populationData.extraWorker.data.w3.value = a.extraWorkerW3;
        this.populationData.extraWorkerPaused.data.w1.value = a.extraWorkerW1Paused;
        this.populationData.extraWorkerPaused.data.w2.value = a.extraWorkerW2Paused;
        this.populationData.extraWorkerPaused.data.w3.value = a.extraWorkerW3Paused;
        this.populationData.resident.data.shopperW1.value = a.residentShopperW1 - a.neighboringResidentShopperW1;
        this.populationData.resident.data.shopperW2.value = a.residentShopperW2 - a.neighboringResidentShopperW2;
        this.populationData.resident.data.shopperW3.value = a.residentShopperW3 - a.neighboringResidentShopperW3;
        this.populationData.resident.data.workerW1.value = a.residentWorkerW1 - a.neighboringResidentWorkerW1;
        this.populationData.resident.data.workerW2.value =
          a.residentWorkerW2 - a.neighboringResidentWorkerW2;
        this.populationData.resident.data.workerW3.value = a.residentWorkerW3 - a.neighboringResidentWorkerW3;
        this.populationData.resident.data.shopperRestingW1.value = a.shopperRestingW1;
        this.populationData.resident.data.shopperRestingW2.value = a.shopperRestingW2;
        this.populationData.resident.data.shopperRestingW3.value = a.shopperRestingW3;
        this.populationData.resident.data.shopperRestingTotal.value = this.populationData.resident.data.shopperRestingW1.value + this.populationData.resident.data.shopperRestingW2.value +
          this.populationData.resident.data.shopperRestingW3.value;
        this.populationData.resident.data.kids.value = a.residentKids;
        this.populationData.residentPaused.data.shopperW1.value = a.residentShopperW1Paused;
        this.populationData.residentPaused.data.shopperW2.value = a.residentShopperW2Paused;
        this.populationData.residentPaused.data.shopperW3.value = a.residentShopperW3Paused;
        this.populationData.residentPaused.data.workerW1.value = a.residentWorkerW1Paused;
        this.populationData.residentPaused.data.workerW2.value = a.residentWorkerW2Paused;
        this.populationData.residentPaused.data.workerW3.value = a.residentWorkerW3Paused;
        this.populationData.residentLocked.data.workerW1.value = a.residentWorkerW1Locked;
        this.populationData.residentLocked.data.workerW2.value = a.residentWorkerW2Locked;
        this.populationData.residentLocked.data.workerW3.value = a.residentWorkerW3Locked;
        this.populationData.residentLocked.data.total.value = this.populationData.residentLocked.data.workerW1.value + this.populationData.residentLocked.data.workerW2.value + this.populationData.residentLocked.data.workerW3.value;
        this.populationData.importedRes.data.shopperW1.value = a.importedResidentShopperW1;
        this.populationData.importedRes.data.shopperW2.value = a.importedResidentShopperW2;
        this.populationData.importedRes.data.shopperW3.value = a.importedResidentShopperW3;
        this.populationData.importedRes.data.totalShoppers.value = this.populationData.importedRes.data.shopperW1.value + this.populationData.importedRes.data.shopperW2.value + this.populationData.importedRes.data.shopperW3.value;
        this.populationData.importedRes.data.workerW1.value =
          a.importedResidentWorkerW1;
        this.populationData.importedRes.data.workerW2.value = a.importedResidentWorkerW2;
        this.populationData.importedRes.data.workerW3.value = a.importedResidentWorkerW3;
        this.populationData.importedRes.data.totalWorkers.value = this.populationData.importedRes.data.workerW1.value + this.populationData.importedRes.data.workerW2.value + this.populationData.importedRes.data.workerW3.value;
        this.populationData.importedRes.data.kids.value = a.importedKid;
        this.populationData.importedRes.data.total.value =
          this.populationData.importedRes.data.totalShoppers.value + this.populationData.importedRes.data.totalWorkers.value + this.populationData.importedRes.data.kids.value;
        this.populationData.exportedRes.data.shopperW1.value = a.exportedResidentShopperW1;
        this.populationData.exportedRes.data.shopperW2.value = a.exportedResidentShopperW2;
        this.populationData.exportedRes.data.shopperW3.value = a.exportedResidentShopperW3;
        this.populationData.exportedRes.data.workerW1.value = a.exportedResidentWorkerW1;
        this.populationData.exportedRes.data.workerW2.value =
          a.exportedResidentWorkerW2;
        this.populationData.exportedRes.data.workerW3.value = a.exportedResidentWorkerW3;
        var b = a.totalStudents >= a.totalStudentsYesterday;
        this.populationData.students.data.summaryStudents.value = b ? a.totalStudents : a.totalStudentsYesterday;
        this.populationData.students.data.summaryKids.value = b ? a.totalKids : a.totalKidsYesterday;
        var c = b ? a.examsPassedTodayE3 - a.localStudentsTodayE3 : a.examsPassedYesterdayE3 - a.localStudentsYesterdayE3,
        c = Math.max(b ? a.examsPassedTodayE2 - a.localStudentsTodayE2 :
            a.examsPassedYesterdayE2 - a.localStudentsYesterdayE2, 0) + Math.max(c, 0);
        this.populationData.students.data.summaryRegionalStudents.value = (b ? a.currentE2TradeStudents + a.currentE3TradeStudentsW1 + a.currentE3TradeStudentsW2 + a.currentE3TradeStudentsW3 : 0) + c;
        this.populationData.students.data.summaryLocalStudents.value = Math.max(0, this.populationData.students.data.summaryStudents.value - this.populationData.students.data.summaryRegionalStudents.value);
        this.populationData.students.data.summaryLocalStudents.value =
          Math.min(this.populationData.students.data.summaryLocalStudents.value, this.populationData.students.data.summaryKids.value);
        this.populationData.students.data.notEnrolled.value = this.populationData.residential.data.totalKids.value - this.populationData.students.data.summaryLocalStudents.value;
        this.populationData.students.data.extraDesks.value = Math.max(this.populationData.students.data.totalDesks.value - this.populationData.students.data.summaryLocalStudents.value, 0);
        this.populationData.students.data.desksE2.value =
          a.desksE2;
        this.populationData.students.data.desksE3.value = a.desksE3;
        this.populationData.students.data.totalDesks.value = a.totalDesks;
        this.populationData.students.data.studyingInBorderE2.value = a.studentStudyingInBorderE2;
        this.populationData.students.data.studyingInBorderE3.value = a.studentStudyingInBorderE3;
        this.populationData.students.data.totalStudyingInBorder.value = a.studentStudyingInBorderE2 + a.studentStudyingInBorderE3;
        this.populationData.students.data.tokenE2.value = a.examsPassedE2 - a.examsPassedGlobalE2 +
          a.studentStudyingE2;
        this.populationData.students.data.tokenE3.value = a.examsPassedE3 + a.studentStudyingE3 + a.studentToLeaveE3 - a.studentStudyingInBorderE3;
        this.populationData.students.data.uneducated.value = Math.max(a.totalKids - this.populationData.students.data.tokenE2.value - this.populationData.students.data.tokenE3.value, 0);
        this.populationData.students.data.total.value = this.populationData.students.data.uneducated.value + this.populationData.students.data.tokenE2.value + this.populationData.students.data.tokenE3.value;
        this.populationData.homeless.data.homelessForaging.value = a.homelessForaging;
        this.populationData.homeless.data.homelessSleeping.value = a.homelessSleeping;
        this.populationData.homeless.data.homelessPanhandling.value = a.homelessPanhandling;
        b = Math.max(a.homelessPanhandling + a.homelessSleeping + a.homelessForaging, a.homeless);
        this.populationData.homeless.data.homelessWandering.value = b - a.homelessPanhandling - a.homelessSleeping - a.homelessForaging;
        this.populationData.homeless.data.total.value = b;
        this.populationData.tourist.data.populationW1.value =
          a.touristsW1Today > a.touristsW1Yesterday ? a.touristsW1Today : a.touristsW1Yesterday;
        this.populationData.tourist.data.populationW2.value = a.touristsW2Today > a.touristsW2Yesterday ? a.touristsW2Today : a.touristsW2Yesterday;
        this.populationData.tourist.data.populationW3.value = a.touristsW3Today > a.touristsW3Yesterday ? a.touristsW3Today : a.touristsW3Yesterday;
        this.populationData.tourist.data.populationTotal.value = this.populationData.tourist.data.populationW1.value + this.populationData.tourist.data.populationW2.value +
          this.populationData.tourist.data.populationW3.value;
        this.populationData.availableResident.data.workerW1.value = this.populationData.resident.data.workerW1.value + a.residentWorkerW1Paused;
        this.populationData.availableResident.data.workerW2.value = this.populationData.resident.data.workerW2.value + a.residentWorkerW2Paused;
        this.populationData.availableResident.data.workerW3.value = this.populationData.resident.data.workerW3.value + a.residentWorkerW3Paused;
        this.populationData.availableResident.data.totalWorkers.value =
          this.populationData.availableResident.data.workerW1.value + this.populationData.availableResident.data.workerW2.value + this.populationData.availableResident.data.workerW3.value;
        this.populationData.totalExtraWorker.data.w1.value = this.populationData.extraWorker.data.w1.value + this.populationData.extraWorkerPaused.data.w1.value;
        this.populationData.totalExtraWorker.data.w2.value = this.populationData.extraWorker.data.w2.value + this.populationData.extraWorkerPaused.data.w2.value;
        this.populationData.totalExtraWorker.data.w3.value =
          this.populationData.extraWorker.data.w3.value + this.populationData.extraWorkerPaused.data.w3.value;
        this.populationData.totalExtraWorker.data.total.value = this.populationData.totalExtraWorker.data.w1.value + this.populationData.totalExtraWorker.data.w2.value + this.populationData.totalExtraWorker.data.w3.value;
        this.populationData.currentWorkers.data.w1.value = this.populationData.worker.data.w1.value + this.populationData.totalExtraWorker.data.w1.value;
        this.populationData.currentWorkers.data.w2.value = this.populationData.worker.data.w2.value +
          this.populationData.totalExtraWorker.data.w2.value;
        this.populationData.currentWorkers.data.w3.value = this.populationData.worker.data.w3.value + this.populationData.totalExtraWorker.data.w3.value;
        this.populationData.currentWorkers.data.total.value = this.populationData.requiredWorkers.data.total.value + this.populationData.totalExtraWorker.data.total.value;
        this.populationData.totalResident.data.totalWorkers.value = this.populationData.totalResident.data.workersW1.value + this.populationData.totalResident.data.workersW2.value +
          this.populationData.totalResident.data.workersW3.value;
        this.populationData.residential.data.totalShoppers.value = this.populationData.residential.data.shopperW1.value + this.populationData.residential.data.shopperW2.value + this.populationData.residential.data.shopperW3.value;
        this.populationData.residential.data.totalWorkers.value = this.populationData.residential.data.workerW1.value + this.populationData.residential.data.workerW2.value + this.populationData.residential.data.workerW3.value;
        this.populationData.residential.data.totalResidentialW1.value =
          this.populationData.residential.data.workerW1.value + this.populationData.residential.data.shopperW1.value;
        this.populationData.residential.data.totalResidentialW2.value = this.populationData.residential.data.workerW2.value + this.populationData.residential.data.shopperW2.value;
        this.populationData.residential.data.totalResidentialW3.value = this.populationData.residential.data.workerW3.value + this.populationData.residential.data.shopperW3.value;
        this.populationData.sim.data.totalShoppers.value = this.populationData.sim.data.shopperW1.value +
          this.populationData.sim.data.shopperW2.value + this.populationData.sim.data.shopperW3.value;
        this.populationData.sim.data.totalWorkers.value = this.populationData.sim.data.workerW1.value + this.populationData.sim.data.workerW2.value + this.populationData.sim.data.workerW3.value;
        this.populationData.exportedRes.data.totalShoppers.value = this.populationData.exportedRes.data.shopperW1.value + this.populationData.exportedRes.data.shopperW2.value + this.populationData.exportedRes.data.shopperW3.value;
        this.populationData.exportedRes.data.totalWorkers.value =
          this.populationData.exportedRes.data.workerW1.value + this.populationData.exportedRes.data.workerW2.value + this.populationData.exportedRes.data.workerW3.value;
        this.populationData.exportedRes.data.total.value = this.populationData.exportedRes.data.totalShoppers.value + this.populationData.exportedRes.data.totalWorkers.value;
        this.populationData.jobs.data.dayTotal.value = this.populationData.jobs.data.dayW1.value + this.populationData.jobs.data.dayW2.value + this.populationData.jobs.data.dayW3.value;
        this.populationData.jobs.data.nightTotal.value =
          this.populationData.jobs.data.nightW1.value + this.populationData.jobs.data.nightW2.value + this.populationData.jobs.data.nightW3.value;
        this.populationData.jobs.data.total.value = this.populationData.jobs.data.dayTotal.value + this.populationData.jobs.data.nightTotal.value;
        this.populationData.extraWorker.data.total.value = this.populationData.extraWorker.data.w1.value + this.populationData.extraWorker.data.w2.value + this.populationData.extraWorker.data.w3.value;
        this.populationData.shopper.data.total.value = this.populationData.shopper.data.w1.value +
          this.populationData.shopper.data.w2.value + this.populationData.shopper.data.w3.value;
        this.populationData.visiting.data.total.value = this.populationData.importedRes.data.total.value;
        this.populationData.availableResident.data.shopperW1.value = this.populationData.resident.data.shopperW1.value + a.residentShopperW1Paused >= a.shopperRestingW1 ? this.populationData.resident.data.shopperW1.value + a.residentShopperW1Paused - a.shopperRestingW1 : 0;
        this.populationData.availableResident.data.shopperW2.value = this.populationData.resident.data.shopperW2.value +
          a.residentShopperW2Paused >= a.shopperRestingW2 ? this.populationData.resident.data.shopperW2.value + a.residentShopperW2Paused - a.shopperRestingW2 : 0;
        this.populationData.availableResident.data.shopperW3.value = this.populationData.resident.data.shopperW3.value + a.residentShopperW3Paused >= a.shopperRestingW3 ? this.populationData.resident.data.shopperW3.value + a.residentShopperW3Paused - a.shopperRestingW3 : 0;
        this.populationData.availableResident.data.totalShoppers.value = this.populationData.availableResident.data.shopperW1.value +
          this.populationData.availableResident.data.shopperW2.value + this.populationData.availableResident.data.shopperW3.value;
        this.populationData.totalResident.data.workersW1.value = this.populationData.availableResident.data.workerW1.value + this.populationData.residentLocked.data.workerW1.value + this.populationData.sim.data.workerW1.value + this.populationData.exportedRes.data.workerW1.value + this.populationData.currentWorkers.data.w1.value;
        this.populationData.totalResident.data.workersW2.value = this.populationData.availableResident.data.workerW2.value +
          this.populationData.residentLocked.data.workerW2.value + this.populationData.sim.data.workerW2.value + this.populationData.exportedRes.data.workerW2.value + this.populationData.currentWorkers.data.w2.value;
        this.populationData.totalResident.data.workersW3.value = this.populationData.availableResident.data.workerW3.value + this.populationData.residentLocked.data.workerW3.value + this.populationData.sim.data.workerW3.value + this.populationData.exportedRes.data.workerW3.value + this.populationData.currentWorkers.data.w3.value;
        this.populationData.totalResident.data.shoppersW1.value = this.populationData.availableResident.data.shopperW1.value + this.populationData.resident.data.shopperRestingW1.value + this.populationData.sim.data.shopperW1.value + this.populationData.exportedRes.data.shopperW1.value + this.populationData.shopper.data.w1.value;
        this.populationData.totalResident.data.shoppersW2.value = this.populationData.availableResident.data.shopperW2.value + this.populationData.resident.data.shopperRestingW2.value + this.populationData.sim.data.shopperW2.value +
          this.populationData.exportedRes.data.shopperW2.value + this.populationData.shopper.data.w2.value;
        this.populationData.totalResident.data.shoppersW3.value = this.populationData.availableResident.data.shopperW3.value + this.populationData.resident.data.shopperRestingW3.value + this.populationData.sim.data.shopperW3.value + this.populationData.exportedRes.data.shopperW3.value + this.populationData.shopper.data.w3.value;
        this.populationData.totalResident.data.w1.value = this.populationData.resident.data.shopperW1.value +
          this.populationData.resident.data.workerW1.value + this.populationData.residentPaused.data.shopperW1.value + this.populationData.residentPaused.data.workerW1.value + this.populationData.residentLocked.data.workerW1.value;
        this.populationData.totalResident.data.w2.value = this.populationData.resident.data.shopperW2.value + this.populationData.resident.data.workerW2.value + this.populationData.residentPaused.data.shopperW2.value + this.populationData.residentPaused.data.workerW2.value + this.populationData.residentLocked.data.workerW2.value;
        this.populationData.totalResident.data.w3.value = this.populationData.resident.data.shopperW3.value + this.populationData.resident.data.workerW3.value + this.populationData.residentPaused.data.shopperW3.value + this.populationData.residentPaused.data.workerW3.value + this.populationData.residentLocked.data.workerW3.value;
        this.populationData.totalResident.data.totalShoppers.value = this.populationData.totalResident.data.shoppersW1.value + this.populationData.totalResident.data.shoppersW2.value + this.populationData.totalResident.data.shoppersW3.value
      } else
        this.populationData.residential.data.shopperW1.value =
          a.residentialShopperW1, this.populationData.residential.data.shopperW2.value = a.residentialShopperW2, this.populationData.residential.data.shopperW3.value = a.residentialShopperW3, this.populationData.residential.data.workerW1.value = a.residentialWorkerW1, this.populationData.residential.data.workerW2.value = a.residentialWorkerW2, this.populationData.residential.data.workerW3.value = a.residentialWorkerW3, this.populationData.jobs.data.w1.value = a.jobsW1, this.populationData.jobs.data.w2.value = a.jobsW2, this.populationData.jobs.data.w3.value =
          a.jobsW3, this.populationData.waresProduced.data.w1.value = Math.round(a.waresProducedDailyW1 / 3), this.populationData.waresProduced.data.w2.value = Math.round(a.waresProducedDailyW2 / 3), this.populationData.waresProduced.data.w3.value = Math.round(a.waresProducedDailyW3 / 3);
      this.populationData.jobs.data.importedW1.value = a.importedJobsW1;
      this.populationData.jobs.data.importedW2.value = a.importedJobsW2;
      this.populationData.jobs.data.importedW3.value = a.importedJobsW3;
      this.populationData.resident.data.neighboringShopperW1.value =
        a.neighboringResidentShopperW1;
      this.populationData.resident.data.neighboringShopperW2.value = a.neighboringResidentShopperW2;
      this.populationData.resident.data.neighboringShopperW3.value = a.neighboringResidentShopperW3;
      this.populationData.resident.data.neighboringWorkerW1.value = a.neighboringResidentWorkerW1;
      this.populationData.resident.data.neighboringWorkerW2.value = a.neighboringResidentWorkerW2;
      this.populationData.resident.data.neighboringWorkerW3.value = a.neighboringResidentWorkerW3;
      b = a.shippingOutToday >=
        a.shippingOutYesterday ? a.shippingOutToday : a.shippingOutYesterday;
      c = a.shippingInToday >= a.shippingInYesterday ? a.shippingInToday : a.shippingInYesterday;
      this.populationData.freight.data.production.value = a.freightProduction;
      this.populationData.freight.data.consumption.value = a.localFreightConsumption;
      this.populationData.freight.data.neighborConsumption.value = a.neighborFreightConsumption.amount;
      this.populationData.freight.data.freightCapacity.value = a.freightCapacity;
      this.populationData.freight.data.availableBorder.value =
        a.availableBorder;
      this.populationData.employment.data.commuteOutW1.value = Math.min(this.populationData.residential.data.workerW1.value, this.populationData.exportedRes.data.workerW1.value);
      this.populationData.employment.data.commuteOutW2.value = Math.min(this.populationData.residential.data.workerW2.value, this.populationData.exportedRes.data.workerW2.value);
      this.populationData.employment.data.commuteOutW3.value = Math.min(this.populationData.residential.data.workerW3.value, this.populationData.exportedRes.data.workerW3.value);
      this.populationData.employment.data.commuteOutTotal.value = this.populationData.employment.data.commuteOutW1.value + this.populationData.employment.data.commuteOutW2.value + this.populationData.employment.data.commuteOutW3.value;
      this.populationData.employment.data.employedW1.value = Math.min(this.populationData.residential.data.workerW1.value, this.populationData.jobs.data.w1.value + this.populationData.employment.data.commuteOutW1.value);
      this.populationData.employment.data.employedW2.value = Math.min(this.populationData.residential.data.workerW2.value,
          this.populationData.jobs.data.w2.value + this.populationData.employment.data.commuteOutW2.value);
      this.populationData.employment.data.employedW3.value = Math.min(this.populationData.residential.data.workerW3.value, this.populationData.jobs.data.w3.value + this.populationData.employment.data.commuteOutW3.value);
      this.populationData.employment.data.employedTotal.value = this.populationData.employment.data.employedW1.value + this.populationData.employment.data.employedW2.value + this.populationData.employment.data.employedW3.value;
      this.populationData.employment.data.unEmployedW1.value = this.populationData.residential.data.workerW1.value - this.populationData.employment.data.employedW1.value;
      this.populationData.employment.data.unEmployedW2.value = this.populationData.residential.data.workerW2.value - this.populationData.employment.data.employedW2.value;
      this.populationData.employment.data.unEmployedW3.value = this.populationData.residential.data.workerW3.value - this.populationData.employment.data.employedW3.value;
      this.populationData.employment.data.unEmployedTotal.value =
        this.populationData.employment.data.unEmployedW1.value + this.populationData.employment.data.unEmployedW2.value + this.populationData.employment.data.unEmployedW3.value;
      this.populationData.employment.data.unfilledW1.value = Math.max(this.populationData.jobs.data.w1.value - (this.populationData.residential.data.workerW1.value + this.populationData.importedRes.data.workerW1.value), 0);
      this.populationData.employment.data.unfilledW2.value = Math.max(this.populationData.jobs.data.w2.value - (this.populationData.residential.data.workerW2.value +
            this.populationData.importedRes.data.workerW2.value), 0);
      this.populationData.employment.data.unfilledW3.value = Math.max(this.populationData.jobs.data.w3.value - (this.populationData.residential.data.workerW3.value + this.populationData.importedRes.data.workerW3.value), 0);
      this.populationData.employment.data.unfilledTotal.value = this.populationData.employment.data.unfilledW1.value + this.populationData.employment.data.unfilledW2.value + this.populationData.employment.data.unfilledW3.value;
      this.populationData.shopperPopulation.data.commuteOutW1.value =
        Math.min(this.populationData.residential.data.shopperW1.value, this.populationData.exportedRes.data.shopperW1.value);
      this.populationData.shopperPopulation.data.commuteOutW2.value = Math.min(this.populationData.residential.data.shopperW2.value, this.populationData.exportedRes.data.shopperW2.value);
      this.populationData.shopperPopulation.data.commuteOutW3.value = Math.min(this.populationData.residential.data.shopperW3.value, this.populationData.exportedRes.data.shopperW3.value);
      this.populationData.shopperPopulation.data.commuteOutTotal.value =
        this.populationData.shopperPopulation.data.commuteOutW1.value + this.populationData.shopperPopulation.data.commuteOutW2.value + this.populationData.shopperPopulation.data.commuteOutW3.value;
      this.populationData.shopperPopulation.data.satisfiedW1.value = Math.min(this.populationData.residential.data.shopperW1.value, this.populationData.waresProduced.data.w1.value + this.populationData.shopperPopulation.data.commuteOutW1.value);
      this.populationData.shopperPopulation.data.satisfiedW2.value = Math.min(this.populationData.residential.data.shopperW2.value,
          this.populationData.waresProduced.data.w2.value + this.populationData.shopperPopulation.data.commuteOutW2.value);
      this.populationData.shopperPopulation.data.satisfiedW3.value = Math.min(this.populationData.residential.data.shopperW3.value, this.populationData.waresProduced.data.w3.value + this.populationData.shopperPopulation.data.commuteOutW3.value);
      this.populationData.shopperPopulation.data.satisfiedTotal.value = this.populationData.shopperPopulation.data.satisfiedW1.value + this.populationData.shopperPopulation.data.satisfiedW2.value +
        this.populationData.shopperPopulation.data.satisfiedW3.value;
      this.populationData.shopperPopulation.data.unsatisfiedW1.value = this.populationData.residential.data.shopperW1.value - this.populationData.shopperPopulation.data.satisfiedW1.value;
      this.populationData.shopperPopulation.data.unsatisfiedW2.value = this.populationData.residential.data.shopperW2.value - this.populationData.shopperPopulation.data.satisfiedW2.value;
      this.populationData.shopperPopulation.data.unsatisfiedW3.value = this.populationData.residential.data.shopperW3.value -
        this.populationData.shopperPopulation.data.satisfiedW3.value;
      this.populationData.shopperPopulation.data.unsatisfiedTotal.value = this.populationData.shopperPopulation.data.unsatisfiedW1.value + this.populationData.shopperPopulation.data.unsatisfiedW2.value + this.populationData.shopperPopulation.data.unsatisfiedW3.value;
      this.populationData.shopperPopulation.data.unsoldW1.value = Math.max(this.populationData.waresProduced.data.w1.value - (this.populationData.residential.data.shopperW1.value + this.populationData.importedRes.data.shopperW1.value),
          0);
      this.populationData.shopperPopulation.data.unsoldW2.value = Math.max(this.populationData.waresProduced.data.w2.value - (this.populationData.residential.data.shopperW2.value + this.populationData.importedRes.data.shopperW2.value), 0);
      this.populationData.shopperPopulation.data.unsoldW3.value = Math.max(this.populationData.waresProduced.data.w3.value - (this.populationData.residential.data.shopperW3.value + this.populationData.importedRes.data.shopperW3.value), 0);
      this.populationData.shopperPopulation.data.unsoldTotal.value =
        this.populationData.shopperPopulation.data.unsoldW1.value + this.populationData.shopperPopulation.data.unsoldW2.value + this.populationData.shopperPopulation.data.unsoldW3.value;
      this.populationData.freight.data.commuteOut.value = b;
      this.populationData.freight.data.commuteIn.value = c;
      this.populationData.freight.data.satisfied.value = Math.min(this.populationData.freight.data.production.value, this.populationData.freight.data.consumption.value + this.populationData.freight.data.commuteOut.value);
      this.populationData.freight.data.unsatisfied.value =
        this.populationData.freight.data.production.value - this.populationData.freight.data.satisfied.value;
      this.populationData.freight.data.unfulfilled.value = Math.max(this.populationData.freight.data.consumption.value - (this.populationData.freight.data.production.value + this.populationData.freight.data.commuteIn.value), 0)
    }
  },
  minimalQueriesFunction : function () {
    return this.minimalQueries
  },
  allQueriesFunction : function () {
    return this.allQueries
  },
  queries : function () {
    return this.rootControl.mIsVisible ? this.allQueries :
    this.minimalQueries
  }
};
simcity.databindings.DataBindingsGlobalUI = {};
simcity.kWinMayorRatingContainer = 212584417;
simcity.kNumMayorRatingIcons = 5;
simcity.kHappinessForMaxMayorRating = 2;
simcity.transactionRows = [];
simcity.GetHistoryData = function (a, b) {
  for (var c = [], d = simcity.gGlobalUIHandler.mRecentTransactionData.amount.length, e = 0; e < d; e++) {
    var f = simcity.gTimeInfo.month - simcity.gGlobalUIHandler.mRecentTransactionData.date[e].getMonth();
    1 < f || 1 == f && simcity.gTimeInfo.hour >= simcity.gGlobalUIHandler.mRecentTransactionData.date[e].getHours() ? (simcity.gGlobalUIHandler.mRecentTransactionData.amount.splice(e, 1), simcity.gGlobalUIHandler.mRecentTransactionData.date.splice(e, 1), simcity.gGlobalUIHandler.mRecentTransactionData.type.splice(e,
        1), simcity.gGlobalUIHandler.mRecentTransactionData.label.splice(e, 1), d = simcity.gGlobalUIHandler.mRecentTransactionData.amount.length, e--) : c.push({
      amount : simcity.gGlobalUIHandler.mRecentTransactionData.amount[e],
      date : simcity.gGlobalUIHandler.mRecentTransactionData.date[e],
      type : simcity.gGlobalUIHandler.mRecentTransactionData.type[e],
      label : simcity.gGlobalUIHandler.mRecentTransactionData.label[e]
    })
  }
  d = a.length;
  for (e = 0; e < d; e++)
    for (var f = simcity.gHistoryData[a[e]], g = f.data.length, h = 0; h < g; h++)
      if (simcity.gTimeInfo.month !=
        f.data[h].date.getMonth() && simcity.gTimeInfo.hour >= f.data[h].date.getHours())
        f.data.splice(h, 1), g = f.data.length, h--;
      else {
        var i = f.data[h].date.getTime(),
        j = !1;
        if (0 < c.length)
          for (var k = 0; k < c.length; k++) {
            var l = c[k].date.getTime();
            if (i > l) {
              i = {
                amount : f.data[h].amount,
                date : f.data[h].date,
                type : f.type,
                label : f.label
              };
              c.splice(k, 0, i);
              j = !0;
              break
            }
          }
        !1 == j && (i = {
            amount : f.data[h].amount,
            date : f.data[h].date,
            type : f.type,
            label : f.label
          }, c.push(i))
      }
  return c.slice(0, b)
};
simcity.kGlobalUIBudgetInfo = {
  textNoMoneyInRed : new scrui.cLocaleString("Budget.json", "0x0ea0b8c6"),
  textNoMoneyInGreen : new scrui.cLocaleString("Budget.json", "0x0ea0b8c7"),
  textBudgetCrisisIn24 : new scrui.cLocaleString("Budget.json", "0x0ea0b8c8"),
  textBudgetCrisisIn6 : new scrui.cLocaleString("Budget.json", "0x0ea0b8c9"),
  textBudgetCrisisIn1 : new scrui.cLocaleString("Budget.json", "0x0ea0c610"),
  textBudgetInRed : new scrui.cLocaleString("Budget.json", "0x0ea0c1d5"),
  textBudgetGreen : new scrui.cLocaleString("Budget.json",
    "0x0ea0c249"),
  textBudgetGreenTooMuch : new scrui.cLocaleString("Budget.json", "0x0ebc8bb3"),
  textBudgetGreenNoTownHall : new scrui.cLocaleString("Budget.json", "0x0ea0c260"),
  textBudgetGreenNoCityHall : new scrui.cLocaleString("Budget.json", "0x0ea0c261"),
  textBudgetGreenNoFinanceDept : new scrui.cLocaleString("Budget.json", "0x0ea0c262"),
  textBudgetWarningSaveSomeForUtilities : new scrui.cLocaleString("Budget.json", "0x0eb4aa2a"),
  textBudgetWarningNoneForUtilities : new scrui.cLocaleString("Budget.json", "0x0eb4b2cf"),
  txtBudgetGreenFromBigBusiness : new scrui.cLocaleString("Budget.json", "0x0ef10d8b"),
  BudgetTicker_NoneForUtilitiesShown : !1,
  BudgetTicker_24LeftShown : !1,
  BudgetTicker_12LeftShown : !1,
  BudgetTicker_06LeftShown : !1,
  BudgetTicker_05LeftShown : !1,
  BudgetTicker_04LeftShown : !1,
  BudgetTicker_03LeftShown : !1,
  BudgetTicker_02LeftShown : !1,
  BudgetTicker_01LeftShown : !1,
  rootControlID : simcity.kWinBudgetContainer,
  rootControl : null,
  currTick : 0,
  budgetData : {
    income : {
      res : {
        w1 : 1,
        w2 : 1,
        w3 : 1
      },
      comm : {
        w1 : 1,
        w2 : 1,
        w3 : 1
      },
      indust : {
        w1 : 1,
        w2 : 1,
        w3 : 1
      },
      trading : 1,
      globalMarketInc : 1
    },
    expenses : {
      roads : 1,
      power : 1,
      water : 1,
      garbage : 1,
      sewage : 1,
      police : 1,
      fire : 1,
      health : 1,
      education : 1,
      park : 1,
      government : 1,
      extraction : 1,
      manufacture : 1,
      trading : 1,
      globalMarketExp : 1
    },
    totals : {
      income : 0,
      expenses : 0,
      res : 0,
      comm : 0,
      indust : 0,
      budget : 0
    }
  },
  init : function () {
    this.budgetButton = gUIManager.FindControlByID(simcity.kWinSharedUIParent).FindControlByID(245433542);
    this.budgetButton.buttonIconNormal = this.budgetButton.FindControlByID(simcity.cToolPaletteUIHandler.kWinIDCategoryIconNormal);
    this.budgetButton.buttonIconNormalOn =
      this.budgetButton.FindControlByID(simcity.cToolPaletteUIHandler.kWinIDCategoryIconNormalOn);
    this.budgetButton.buttonIconCaution = this.budgetButton.FindControlByID(simcity.cToolPaletteUIHandler.kWinIDCategoryIconCaution);
    this.budgetButton.buttonIconCritical = this.budgetButton.FindControlByID(simcity.cToolPaletteUIHandler.kWinIDCategoryIconCritical);
    this.budgetButton.alertLevel = simcity.kAlertLevelNormal
  },
  minimalQueries : {
    adjustedIncome : [simcity.kDataBinAmount, simcity.kResourceIDAdjustedIncome],
    adjustedExpenses : [simcity.kDataBinAmount,
      simcity.kResourceIDAdjustedExpenses],
    simoleons : [simcity.kDataBinAmount, simcity.kResourceIDSimoleons],
    waterPlants : [simcity.kDataBinAmount, simcity.kResourceIDWaterGlobals_NumberOfWaterPlants],
    powerPlants : [simcity.kDataBinAmount, simcity.kResourceIDPowerGlobals_NumberOfPowerPlants],
    importedPower : [simcity.kDataCachedUnits, simcity.kUnitID_Trading_City_Connection, simcity.kDataBinAmount, simcity.kResourceIDPower],
    importedWater : [simcity.kDataCachedUnits, simcity.kUnitID_Trading_City_Connection, simcity.kDataBinAmount,
      simcity.kResourceIDWater],
    transactionIncomeHourTotal : [simcity.kDataBinAmount, simcity.kResourceIDIncomeHourTotal],
    transactionExpenseHourTotal : [simcity.kDataBinAmount, simcity.kResourceIDExpenseHourTotal]
  },
  allQueries : {
    totalIncome : [simcity.kDataBinAmount, simcity.kResourceIDIncome],
    totalExpenses : [simcity.kDataBinAmount, simcity.kResourceIDExpenses],
    transportMaintenance : [simcity.kDataBinAmount, simcity.kResourceIDExpensesFromMaintenanceTransport],
    airMaintenance : [simcity.kDataBinAmount, simcity.kResourceIDExpensesFromMaintenanceAir],
    boatMaintenance : [simcity.kDataBinAmount, simcity.kResourceIDExpensesFromMaintenanceBoat],
    busMaintenance : [simcity.kDataBinAmount, simcity.kResourceIDExpensesFromMaintenanceBus],
    lightRailMaintenance : [simcity.kDataBinAmount, simcity.kResourceIDExpensesFromMaintenanceLightRail],
    heavyRailMaintenance : [simcity.kDataBinAmount, simcity.kResourceIDExpensesFromMaintenanceHeavyRail],
    powerMaintenance : [simcity.kDataBinAmount, simcity.kResourceIDExpensesFromMaintenancePower],
    powerIncome : [simcity.kDataBinAmount, simcity.kResourceIDIncomeFromPower],
    policeMaintenance : [simcity.kDataBinAmount, simcity.kResourceIDExpensesFromMaintenancePolice],
    ordinanceMaintenance : [simcity.kDataBinAmount, simcity.kResourceIDExpensesFromMaintenanceOrdinance],
    manufactureMaintenance : [simcity.kDataBinAmount, simcity.kResourceIDExpensesFromMaintenanceManufacturing],
    extractionMaintenance : [simcity.kDataBinAmount, simcity.kResourceIDExpensesFromMaintenanceExtraction],
    importMaintenance : [simcity.kDataBinAmount, simcity.kResourceIDExpensesFromMaintenanceImport],
    healthMaintenance : [simcity.kDataBinAmount,
      simcity.kResourceIDExpensesFromMaintenanceHealth],
    garbageMaintenance : [simcity.kDataBinAmount, simcity.kResourceIDExpensesFromMaintenanceGarbage],
    fireMaintenance : [simcity.kDataBinAmount, simcity.kResourceIDExpensesFromMaintenanceFire],
    educationMaintenance : [simcity.kDataBinAmount, simcity.kResourceIDExpensesFromMaintenanceEducation],
    parkMaintenance : [simcity.kDataBinAmount, simcity.kResourceIDExpensesFromMaintenanceParks],
    tourismMaintenance : [simcity.kDataBinAmount, simcity.kResourceIDExpensesFromMaintenanceTourism],
    tourismIncome : [simcity.kDataBinAmount, simcity.kResourceIDIncomeFromLandMarks],
    casinoMaintenance : [simcity.kDataBinAmount, simcity.kResourceIDExpensesFromMaintenanceCasinos],
    governmentMaintenance : [simcity.kDataBinAmount, simcity.kResourceIDExpensesFromMaintenanceGovernment],
    waterMaintenance : [simcity.kDataBinAmount, simcity.kResourceIDExpensesFromMaintenanceWater],
    waterIncome : [simcity.kDataBinAmount, simcity.kResourceIDIncomeFromWater],
    sewageIncome : [simcity.kDataBinAmount, simcity.kResourceIDIncomeFromSewageTreatment],
    sewageMaintenance : [simcity.kDataBinAmount, simcity.kResourceIDExpensesFromMaintenanceSewage],
    totalMaintenance : [simcity.kDataBinAmount, simcity.kResourceIDExpensesFromMaintenance],
    globalMarketImport : [simcity.kDataBinAmount, simcity.kResourceIDExpensesFromGlobalMarketImport],
    expensesTrading : [simcity.kDataBinAmount, simcity.kResourceIDExpensesFromImport],
    incomeFromGlobalMarketExport : [simcity.kDataBinAmount, simcity.kResourceIDIncomeFromGlobalMarketExport],
    expensesFromGlobalMarketImport : [simcity.kDataBinAmount,
      simcity.kResourceIDExpensesFromGlobalMarketImport],
    transactionIncomeHourTotal : [simcity.kDataBinAmount, simcity.kResourceIDIncomeHourTotal],
    transactionExpenseHourTotal : [simcity.kDataBinAmount, simcity.kResourceIDExpenseHourTotal],
    transactionIncomeLast24Hours : [simcity.kDataBinAmount, simcity.kResourceIDIncomeHourTotal],
    transactionExpenseLast24Hours : [simcity.kDataBinAmount, simcity.kResourceIDExpenseHourTotal],
    incomeRW1 : [simcity.kDataBinAmount, simcity.kResourceIDIncomeFromRW1WithTaxes],
    incomeRW2 : [simcity.kDataBinAmount,
      simcity.kResourceIDIncomeFromRW2WithTaxes],
    incomeRW3 : [simcity.kDataBinAmount, simcity.kResourceIDIncomeFromRW3WithTaxes],
    incomeCW1 : [simcity.kDataBinAmount, simcity.kResourceIDIncomeFromCW1WithTaxes],
    incomeCW2 : [simcity.kDataBinAmount, simcity.kResourceIDIncomeFromCW2WithTaxes],
    incomeCW3 : [simcity.kDataBinAmount, simcity.kResourceIDIncomeFromCW3WithTaxes],
    incomeIW1 : [simcity.kDataBinAmount, simcity.kResourceIDIncomeFromIW1WithTaxes],
    incomeIW2 : [simcity.kDataBinAmount, simcity.kResourceIDIncomeFromIW2WithTaxes],
    incomeIW3 : [simcity.kDataBinAmount, simcity.kResourceIDIncomeFromIW3WithTaxes],
    incomeFromCasinos : [simcity.kDataBinAmount, simcity.kResourceIDIncomeFromCasinos],
    cityHallIsOn : [simcity.kDataBinAmount, simcity.kResourceIDHQ_CityHall_IsOn],
    cityHallHasFinanceDept : [simcity.kDataBinAmount, simcity.kResourceIDHQ_CityHall_Finance_Module_IsOn],
    cityHallLevel2IsOn : [simcity.kDataBinAmount, simcity.kResourceIDHQ_CityHall_Level2_IsOn],
    adjustedIncome : [simcity.kDataBinAmount, simcity.kResourceIDAdjustedIncome],
    adjustedExpenses : [simcity.kDataBinAmount,
      simcity.kResourceIDAdjustedExpenses],
    simoleons : [simcity.kDataBinAmount, simcity.kResourceIDSimoleons],
    waterPlants : [simcity.kDataBinAmount, simcity.kResourceIDWaterGlobals_NumberOfWaterPlants],
    powerPlants : [simcity.kDataBinAmount, simcity.kResourceIDPowerGlobals_NumberOfPowerPlants],
    importedPower : [simcity.kDataCachedUnits, simcity.kUnitID_Trading_City_Connection, simcity.kDataBinAmount, simcity.kResourceIDPower],
    importedWater : [simcity.kDataCachedUnits, simcity.kUnitID_Trading_City_Connection, simcity.kDataBinAmount,
      simcity.kResourceIDWater],
    expensesFromBonds1 : [simcity.kDataBinAmount, simcity.kResourceIDExpensesFromBonds1],
    expensesFromBonds2 : [simcity.kDataBinAmount, simcity.kResourceIDExpensesFromBonds2],
    expensesFromBonds3 : [simcity.kDataBinAmount, simcity.kResourceIDExpensesFromBonds3],
    expensesFromBondsInterest1 : [simcity.kDataBinAmount, simcity.kResourceIDExpensesFromBondsInterest1],
    expensesFromBondsInterest2 : [simcity.kDataBinAmount, simcity.kResourceIDExpensesFromBondsInterest2],
    expensesFromBondsInterest3 : [simcity.kDataBinAmount,
      simcity.kResourceIDExpensesFromBondsInterest3]
  },
  queries : function () {
    return this.rootControl.mChildren ? this.allQueries : this.minimalQueries
  },
  action : function (a) {
    var b = 0;
    this.rootControl.DestroyLayout && (this.rootControl.DestroyChildren(), this.rootControl.DestroyLayout = !1);
    var b = simcity.kAlertLevelNormal,
    c = null,
    c = a.adjustedIncome - a.adjustedExpenses + (a.transactionIncomeHourTotal - a.transactionExpenseHourTotal) / 24,
    d = a.adjustedExpenses ? Math.floor(a.simoleons / a.adjustedExpenses) : 1E3;
    this.testBudgetCrisisTicker(d,
      c);
    var e = 0 === a.waterPlants && 0 === a.importedWater,
    f = 0 === a.powerPlants && 0 === a.importedPower;
    0 === a.simoleons && 0 > c ? (b = simcity.kAlertLevelCritical, c = this.textNoMoneyInRed, this.BudgetTicker_NoneForUtilitiesShown = !1) : (e && f && 13500 > a.simoleons || e && 3500 > a.simoleons || f && 1E4 > a.simoleons) && 0 === a.adjustedIncome && 0 === a.adjustedExpenses ? (b = simcity.kAlertLevelCritical, c = this.textBudgetWarningNoneForUtilities, this.BudgetTicker_NoneForUtilitiesShown || (this.BudgetTicker_NoneForUtilitiesShown = !0, simcity.gGlobalUIHandler.mTicker.HandleGameEvent(simcity.kGameMessageUnitRuleUIEvent, {
          eventID : simcity.kEventIDBudgetSaveForUtilities,
          unitRef : simcity.kInvalidUnitRef
        }))) : (e || f) && 2E4 > a.simoleons && 0 === a.adjustedIncome && 0 === a.adjustedExpenses ? (b = simcity.kAlertLevelCaution, c = this.textBudgetWarningSaveSomeForUtilities, this.BudgetTicker_NoneForUtilitiesShown || (this.BudgetTicker_NoneForUtilitiesShown = !0, simcity.gGlobalUIHandler.mTicker.HandleGameEvent(simcity.kGameMessageUnitRuleUIEvent, {
          eventID : simcity.kEventIDBudgetSaveForUtilities,
          unitRef : simcity.kInvalidUnitRef
        }))) : 0 === a.simoleons ? (b =
        simcity.kAlertLevelCaution, c = this.textNoMoneyInGreen) : (0 > c && 0 < a.adjustedExpenses ? 1 >= d ? (b = simcity.kAlertLevelCritical, c = this.textBudgetCrisisIn1) : 6 >= d ? (b = simcity.kAlertLevelCritical, c = this.textBudgetCrisisIn6) : 24 >= d ? (b = simcity.kAlertLevelCaution, c = this.textBudgetCrisisIn24) : (b = simcity.kAlertLevelCaution, c = this.textBudgetInRed) : c = 0 < c && 0 < a.adjustedExpenses ? this.txtBudgetGreenFromBigBusiness : a.cityHallIsOn ? a.cityHallLevel2IsOn ? 0 === a.cityHallHasFinanceDept ? this.textBudgetGreenNoFinanceDept : 1E4 < a.adjustedIncome ?
        this.textBudgetGreenTooMuch : this.textBudgetGreen : this.textBudgetGreenNoCityHall : this.textBudgetGreenNoTownHall, this.BudgetTicker_NoneForUtilitiesShown = !1);
    this.rootControl.mChildren && (e = this.rootControl.FindControlByID(245413631)) && e.SetLocaleText(c, {
      amount : d
    });
    b != this.budgetButton.alertLevel && simcity.gGlobalUIHandler.mBeatCountUpdates.push({
      callback : simcity.SetCategoryButtonAlertLevelHelper,
      win : this.budgetButton,
      alertLevel : b
    });
    if (this.rootControl.mChildren) {
      b = this.rootControl.FindControlByID(241966524);
      d = this.rootControl.FindControlByID(241966048);
      c = this.rootControl.FindControlByID(241966049);
      e = this.rootControl.FindControlByID(241966050);
      f = simcity.gGlobalUIHandler.mTaxesBasicUIHandler;
      a.cityHallIsOn ? a.cityHallHasFinanceDept ? (b.SetVisibility(!1), d.SetVisibility(!1), c.SetVisibility(!1), e.SetVisibility(!0), f.SetTaxMode(simcity.cTaxesBasicUIHandler.kTaxModeComplex)) : a.cityHallLevel2IsOn ? (b.SetVisibility(!1), d.SetVisibility(!1), c.SetVisibility(!0), e.SetVisibility(!1), f.SetTaxMode(simcity.cTaxesBasicUIHandler.kTaxModeIntermediate)) :
      (b.SetVisibility(!1), d.SetVisibility(!0), c.SetVisibility(!1), e.SetVisibility(!1), f.SetTaxMode(simcity.cTaxesBasicUIHandler.kTaxModeBasic)) : (b.SetVisibility(!0), d.SetVisibility(!1), c.SetVisibility(!1), e.SetVisibility(!1), f.SetTaxMode(simcity.cTaxesBasicUIHandler.kTaxModeNone));
      f.Show();
      var g = a.incomeRW1,
      h = a.incomeRW2,
      i = a.incomeRW3,
      j = a.incomeCW1,
      k = a.incomeCW2,
      l = a.incomeCW3,
      m = a.incomeIW1,
      n = a.incomeIW2,
      p = a.incomeIW3,
      d = a.totalIncome,
      f = a.totalExpenses,
      b = d - f,
      c = a.transactionIncomeLast24Hours - a.transactionExpenseLast24Hours,
      e = 24 * b + c,
      h = [[242226048, g + h + i, 0], [242226049, j + k + l, 0], [242226050, m + n + p, 0], [242226051, a.powerIncome, a.powerMaintenance], [242226052, a.waterIncome, a.waterMaintenance], [242226053, a.sewageIncome, a.sewageMaintenance], [242226054, 0, a.garbageMaintenance], [242226055, 0, a.governmentMaintenance], [242226056, 0, a.fireMaintenance], [242226057, 0, a.healthMaintenance], [242226064, 0, a.policeMaintenance], [242226065, 0, a.educationMaintenance], [242226066, 0, a.transportMaintenance + a.airMaintenance + a.busMaintenance + a.boatMaintenance +
          a.lightRailMaintenance + a.heavyRailMaintenance], [242226067, 0, a.parkMaintenance], [242226068, a.incomeFromCasinos + a.tourismIncome, a.extractionMaintenance + a.manufactureMaintenance + a.importMaintenance + a.casinoMaintenance + +a.tourismMaintenance]];
      h.push([242226069, 0, Math.round(a.expensesFromBonds1 + a.expensesFromBonds2 + a.expensesFromBonds3 + a.expensesFromBondsInterest1 + a.expensesFromBondsInterest2 + a.expensesFromBondsInterest3)]);
      for (j = i = 0; j < h.length; ++j)
        h[j][2] > i && (i = h[j][2]), h[j][1] > i && (i = h[j][1]);
      for (j =
          0; j < h.length; ++j)
        k = this.rootControl.FindControlByID(h[j][0]), g = k.FindControlByID(241804088), 0 <= h[j][1] ? g.SetRawText(simcity.MakeSimoleonsText(h[j][1])) : g.SetVisibility(!1), g = k.FindControlByID(241865286), 0 < i ? g.SetWidth(175 * (h[j][1] / i)) : g.SetWidth(0), g = k.FindControlByID(241804087), 0 <= h[j][2] ? g.SetRawText(simcity.MakeSimoleonsText(h[j][2])) : g.SetVisibility(!1), g = k.FindControlByID(241865285), 0 < i ? (g.SetWidth(175 * (h[j][2] / i)), g.SetPosition(184 - 175 * (h[j][2] / i), g.mTop, g.mWidth, g.mHeight)) : g.SetWidth(0), k.SetVisibility(!0);
      f = simcity.MakeSimoleonsText(f);
      g = this.rootControl.FindControlByID(223667544);
      g.UpdateLocaleText({
        expense : f
      });
      f = simcity.MakeSimoleonsText(d);
      g = this.rootControl.FindControlByID(223732732);
      g.UpdateLocaleText({
        income : f
      });
      g = this.rootControl.FindControlByID(223740945);
      f = simcity.MakeSimoleonsText(b);
      g.SetRawText(f);
      0 > b ? (g = this.rootControl.FindControlByID(241958192), g.SetVisibility(!0), g = this.rootControl.FindControlByID(241958193), g.SetVisibility(!1)) : (g = this.rootControl.FindControlByID(241958192), g.SetVisibility(!1),
        g = this.rootControl.FindControlByID(241958193), g.SetVisibility(!0));
      g = this.rootControl.FindControlByID(250278022);
      f = simcity.MakeSimoleonsText(c);
      g.SetRawText(f);
      0 > c ? (g = this.rootControl.FindControlByID(250277955), g.SetVisibility(!0), g = this.rootControl.FindControlByID(250277954), g.SetVisibility(!1)) : (g = this.rootControl.FindControlByID(250277955), g.SetVisibility(!1), g = this.rootControl.FindControlByID(250277954), g.SetVisibility(!0));
      g = this.rootControl.FindControlByID(250277491);
      f = simcity.MakeSimoleonsText(e);
      g.SetRawText(f);
      0 > e ? (g = this.rootControl.FindControlByID(250277412), g.SetVisibility(!0), g = this.rootControl.FindControlByID(250277413), g.SetVisibility(!1)) : (g = this.rootControl.FindControlByID(250277412), g.SetVisibility(!1), g = this.rootControl.FindControlByID(250277413), g.SetVisibility(!0));
      g = this.rootControl.FindControlByID(158166955);
      g.SetRawText(simcity.MakeSimoleonsText(a.simoleons));
      if ((a = this.rootControl.FindControlByID(245175895)) && !0 == a.mIsVisible) {
        d = simcity.GetHistoryData(simcity.kTransactionsToTrack,
            20);
        if (d.length < simcity.transactionRows.length)
          for (c = d.length; c < simcity.transactionRows.length; c++)
            simcity.transactionRows[c].SetVisibility(!1);
        for (c = 0; c < d.length; c++)
          if (simcity.transactionRows[c] || (simcity.transactionRows[c] = gUIManager.LoadLayout("Layouts/GlobalUI/BudgetRecentTransactionsItemTemplate.js", a)), simcity.transactionRows[c].SetPosition(0, simcity.transactionRows[c].mHeight * c), (e = simcity.transactionRows[c].FindControlByID(244568048)) && e.SetLocaleText(new scrui.cLocaleString("Budget.json",
                d[c].label)), d[c].type == simcity.kBudgetTypeIncome ? (e = simcity.transactionRows[c].FindControlByID(244568044), (f = simcity.transactionRows[c].FindControlByID(244568045)) && f.SetVisibility(!1), e && (e.SetRawText(simcity.MakeSimoleonsText(d[c].amount)), e.SetVisibility(!0))) : d[c].type == simcity.kBudgetTypeExpense && (e = simcity.transactionRows[c].FindControlByID(244568044), f = simcity.transactionRows[c].FindControlByID(244568045), e && e.SetVisibility(!1), f && (f.SetRawText(simcity.MakeSimoleonsText(d[c].amount)), f.SetVisibility(!0))),
            e = simcity.transactionRows[c].FindControlByID(244573377))
            f = d[c].date, g = f.getFullYear() - 1999, e.UpdateLocaleText({
              sim_dateTime : f,
              year : g
            })
      }
    } else
      b = 0 < a.adjustedIncome ? a.adjustedIncome : -a.adjustedExpenses;
    null !== simcity.gGlobalUIHandler.mIncomeText && simcity.gGlobalUIHandler.mLastBudgetDelta !== b && (simcity.gGlobalUIHandler.mIncomeText.SetTextColor(0 <= b ? simcity.kColorIncomeGreen : simcity.kColorIncomeRed), simcity.gGlobalUIHandler.mIncomeText.SetLocaleText(0 <= b ? simcity.kLocalePlusBudget : simcity.kLocaleMinusBudget, {
        budget : Math.abs(b)
      }), simcity.gGlobalUIHandler.mLastBudgetDelta = b)
  },
  testBudgetCrisisTicker : function (a, b) {
    24 < a || 0 < b ? this.BudgetTicker_01LeftShown = this.BudgetTicker_02LeftShown = this.BudgetTicker_03LeftShown = this.BudgetTicker_04LeftShown = this.BudgetTicker_05LeftShown = this.BudgetTicker_06LeftShown = this.BudgetTicker_12LeftShown = this.BudgetTicker_24LeftShown = !1 : 1 >= a ? this.BudgetTicker_01LeftShown || (simcity.gGlobalUIHandler.mTicker.HandleGameEvent(simcity.kGameMessageUnitRuleUIEvent, {
          eventID : simcity.kEventIDBudgetInRedCrisis,
          unitRef : simcity.kInvalidUnitRef
        }), this.BudgetTicker_02LeftShown = this.BudgetTicker_03LeftShown = this.BudgetTicker_04LeftShown = this.BudgetTicker_05LeftShown = this.BudgetTicker_06LeftShown = this.BudgetTicker_12LeftShown = this.BudgetTicker_24LeftShown = !1, this.BudgetTicker_01LeftShown = !0) : 2 >= a ? this.BudgetTicker_02LeftShown || (simcity.gGlobalUIHandler.mTicker.HandleGameEvent(simcity.kGameMessageUnitRuleUIEvent, {
          eventID : simcity.kEventIDBudgetInRedCrisis,
          unitRef : simcity.kInvalidUnitRef
        }), this.BudgetTicker_03LeftShown =
          this.BudgetTicker_04LeftShown = this.BudgetTicker_05LeftShown = this.BudgetTicker_06LeftShown = this.BudgetTicker_12LeftShown = this.BudgetTicker_24LeftShown = !1, this.BudgetTicker_02LeftShown = !0, this.BudgetTicker_01LeftShown = !1) : 3 >= a ? this.BudgetTicker_03LeftShown || (simcity.gGlobalUIHandler.mTicker.HandleGameEvent(simcity.kGameMessageUnitRuleUIEvent, {
          eventID : simcity.kEventIDBudgetInRedCrisis,
          unitRef : simcity.kInvalidUnitRef
        }), this.BudgetTicker_04LeftShown = this.BudgetTicker_05LeftShown = this.BudgetTicker_06LeftShown =
          this.BudgetTicker_12LeftShown = this.BudgetTicker_24LeftShown = !1, this.BudgetTicker_03LeftShown = !0, this.BudgetTicker_01LeftShown = this.BudgetTicker_02LeftShown = !1) : 4 >= a ? this.BudgetTicker_04LeftShown || (simcity.gGlobalUIHandler.mTicker.HandleGameEvent(simcity.kGameMessageUnitRuleUIEvent, {
          eventID : simcity.kEventIDBudgetInRedCrisis,
          unitRef : simcity.kInvalidUnitRef
        }), this.BudgetTicker_05LeftShown = this.BudgetTicker_06LeftShown = this.BudgetTicker_12LeftShown = this.BudgetTicker_24LeftShown = !1, this.BudgetTicker_04LeftShown =
          !0, this.BudgetTicker_01LeftShown = this.BudgetTicker_02LeftShown = this.BudgetTicker_03LeftShown = !1) : 5 >= a ? this.BudgetTicker_06LeftShown || (simcity.gGlobalUIHandler.mTicker.HandleGameEvent(simcity.kGameMessageUnitRuleUIEvent, {
          eventID : simcity.kEventIDBudgetInRedCrisis,
          unitRef : simcity.kInvalidUnitRef
        }), this.BudgetTicker_06LeftShown = this.BudgetTicker_12LeftShown = this.BudgetTicker_24LeftShown = !1, this.BudgetTicker_05LeftShown = !0, this.BudgetTicker_01LeftShown = this.BudgetTicker_02LeftShown = this.BudgetTicker_03LeftShown =
          this.BudgetTicker_04LeftShown = !1) : 6 >= a ? this.BudgetTicker_06LeftShown || (simcity.gGlobalUIHandler.mTicker.HandleGameEvent(simcity.kGameMessageUnitRuleUIEvent, {
          eventID : simcity.kEventIDBudgetInRedCrisis,
          unitRef : simcity.kInvalidUnitRef
        }), this.BudgetTicker_12LeftShown = this.BudgetTicker_24LeftShown = !1, this.BudgetTicker_06LeftShown = !0, this.BudgetTicker_01LeftShown = this.BudgetTicker_02LeftShown = this.BudgetTicker_03LeftShown = this.BudgetTicker_04LeftShown = this.BudgetTicker_05LeftShown = !1) : 12 >= a ? this.BudgetTicker_12LeftShown ||
      (simcity.gGlobalUIHandler.mTicker.HandleGameEvent(simcity.kGameMessageUnitRuleUIEvent, {
          eventID : simcity.kEventIDBudgetInRedCrisis,
          unitRef : simcity.kInvalidUnitRef
        }), this.BudgetTicker_24LeftShown = !1, this.BudgetTicker_12LeftShown = !0, this.BudgetTicker_01LeftShown = this.BudgetTicker_02LeftShown = this.BudgetTicker_03LeftShown = this.BudgetTicker_04LeftShown = this.BudgetTicker_05LeftShown = this.BudgetTicker_06LeftShown = !1) : 24 >= a && !this.BudgetTicker_24LeftShown && (simcity.gGlobalUIHandler.mTicker.HandleGameEvent(simcity.kGameMessageUnitRuleUIEvent, {
          eventID : simcity.kEventIDBudgetInRedCrisis,
          unitRef : simcity.kInvalidUnitRef
        }), this.BudgetTicker_24LeftShown = !0, this.BudgetTicker_01LeftShown = this.BudgetTicker_02LeftShown = this.BudgetTicker_03LeftShown = this.BudgetTicker_04LeftShown = this.BudgetTicker_05LeftShown = this.BudgetTicker_06LeftShown = this.BudgetTicker_12LeftShown = !1)
  }
};
simcity.kGlobalUIMayorRating = {
  rootControlID : simcity.kWinSharedUIParent,
  rootControl : null,
  ratingContainer : null,
  ratingBar : null,
  lastMayorRating : -1,
  queryObject : {
    mayorRatingBin : [simcity.kDataBins, simcity.kResourceIDHappinessGlobals_MayorRating]
  },
  init : function () {
    this.ratingContainer = this.rootControl.FindControlByID(210443381);
    this.ratingBar = this.rootControl.FindControlByID(210443385)
  },
  queries : function () {
    return this.queryObject
  },
  action : function (a) {
    a = 0 < a.mayorRatingBin.capacity ? Math.round(100 * (a.mayorRatingBin.amount /
          a.mayorRatingBin.capacity)) : 0;
    if (a !== this.lastMayorRating) {
      var b = Math.min(Math.floor(a / 20), 4);
      this.ratingBar.SetPosition(-this.ratingContainer.mWidth * b, this.ratingBar.mTop, this.ratingBar.mWidth, this.ratingBar.mHeight);
      this.lastMayorRating = a
    }
  }
};
simcity.kGlobalUIDemandBars = {
  rootControlID : simcity.kWinSharedUIParent,
  rootControl : null,
  ratingContainer : null,
  ratingBar : null,
  ratingText : null,
  ResidentialStartingCapacity : 340,
  CommercialStartingCapacity : 100,
  IndustrialStartingFactor : 1800,
  importedShoppersNeededW1 : 0,
  importedShoppersNeededW2 : 0,
  importedShoppersNeededW3 : 0,
  Demand_Local : [0, 0, 0, 0, 0, 0, 0],
  Demand_Regional : [0, 0, 0, 0, 0, 0, 0],
  Demand_Capacity : [0, 0, 0, 0, 0, 0, 0],
  DemandHistoryArray : [[null, null, null, null], [null, null, null, null], [null, null, null, null], [null, null,
      null, null], [null, null, null, null], [null, null, null, null], [null, null, null, null]],
  demandTrendBarTimer : 0,
  queryObject : {
    ImportedShoppersNeededW1 : [simcity.kDataCachedUnits, simcity.kUnitID_Trading_City_Connection, simcity.kDataBins, simcity.kResourceIDShoppersNeededW1],
    ImportedShoppersNeededW2 : [simcity.kDataCachedUnits, simcity.kUnitID_Trading_City_Connection, simcity.kDataBins, simcity.kResourceIDShoppersNeededW2],
    ImportedShoppersNeededW3 : [simcity.kDataCachedUnits, simcity.kUnitID_Trading_City_Connection, simcity.kDataBins,
      simcity.kResourceIDShoppersNeededW3],
    importedFreightProduction : [simcity.kDataCachedUnits, simcity.kUnitID_Trading_City_Connection, simcity.kDataBins, simcity.kResourceIDFreightProducer]
  },
  init : function () {
    this.residentialDemandBarLocal = this.rootControl.FindControlByID(246541752);
    this.residentialDemandBarTrade = this.rootControl.FindControlByID(246541750);
    this.commercialDemandBarLocal = this.rootControl.FindControlByID(246541747);
    this.commercialDemandBarTrade = this.rootControl.FindControlByID(246541745);
    this.industrialDemandBarLocal =
      this.rootControl.FindControlByID(246541741);
    this.industrialDemandBarTrade = this.rootControl.FindControlByID(246541740)
  },
  queries : function () {
    return this.queryObject
  },
  action : function (a) {
    var b = simcity.kGlobalUIPopulationInfo.populationData,
    c = b.jobs.data.w1.value,
    d = b.jobs.data.importedW1.value,
    e = b.residential.data.workerW1.value,
    f = b.resident.data.neighboringWorkerW1.value,
    g = e + f,
    h = Math.max(c - g, 0),
    i = d - Math.max(e - c, 0) + h,
    j = Math.max(1 * g, this.ResidentialStartingCapacity);
    this.Demand_Local[0] = h;
    this.Demand_Regional[0] =
      i;
    this.Demand_Capacity[0] = j;
    var k = b.jobs.data.w2.value,
    l = b.jobs.data.importedW2.value,
    m = b.residential.data.workerW2.value,
    n = b.resident.data.neighboringWorkerW2.value,
    p = m + n,
    q = Math.max(k - p, 0),
    o = l - Math.max(m - k, 0) + q,
    p = Math.max(1 * p, this.ResidentialStartingCapacity);
    this.Demand_Local[1] = q;
    this.Demand_Regional[1] = o;
    this.Demand_Capacity[1] = p;
    var r = b.jobs.data.w3.value,
    s = b.jobs.data.importedW3.value,
    t = b.residential.data.workerW3.value,
    u = b.resident.data.neighboringWorkerW3.value,
    v = t + u,
    x = Math.max(r - v, 0),
    r = s -
      Math.max(t - r, 0) + x,
    v = Math.max(1 * v, this.ResidentialStartingCapacity);
    this.Demand_Local[2] = x;
    this.Demand_Regional[2] = r;
    this.Demand_Capacity[2] = v;
    this.Workers_Local = e + m + t;
    this.Workers_Imported = f + n + u;
    this.Jobs_LocalAndImported = c + k + k + d + l + s;
    var w = b.residential.data.shopperW1.value,
    A = b.resident.data.neighboringShopperW1.value,
    z = b.waresProduced.data.w1.value,
    f = a.ImportedShoppersNeededW1.amount,
    u = z + f,
    l = Math.max(w - u, 0),
    c = A - Math.max(z - w, 0) + l,
    d = Math.max(1 * u, this.CommercialStartingCapacity);
    this.Demand_Local[3] =
      l;
    this.Demand_Regional[3] = c;
    this.Demand_Capacity[3] = d;
    this.importedShoppersNeededW1 = f;
    var y = b.residential.data.shopperW2.value,
    I = b.resident.data.neighboringShopperW2.value,
    B = b.waresProduced.data.w2.value,
    n = a.ImportedShoppersNeededW2.amount,
    C = B + n,
    D = Math.max(y - C, 0),
    f = I - Math.max(B - y, 0) + D,
    k = Math.max(1 * C, this.CommercialStartingCapacity);
    this.Demand_Local[4] = D;
    this.Demand_Regional[4] = f;
    this.Demand_Capacity[4] = k;
    this.importedShoppersNeededW2 = n;
    var E = b.residential.data.shopperW3.value,
    J = b.resident.data.neighboringShopperW3.value,
    F = b.waresProduced.data.w3.value,
    K = a.ImportedShoppersNeededW3.amount,
    G = F + K,
    H = Math.max(E - G, 0),
    n = J - Math.max(F - E, 0) + H,
    s = Math.max(1 * G, this.CommercialStartingCapacity);
    this.Demand_Local[5] = H;
    this.Demand_Regional[5] = n;
    this.Demand_Capacity[5] = s;
    this.importedShoppersNeededW3 = K;
    this.ShoppersNeeded_Local = z + B + F;
    this.Shoppers_Local = w + y + E;
    this.Shoppers_Imported = A + I + J;
    w = b.freight.data.consumption.value;
    A = b.freight.data.neighborConsumption.value;
    z = b.freight.data.production.value;
    b = z + a.importedFreightProduction.amount;
    a = Math.max(w - b, 0);
    w = A - Math.max(z - w, 0) + a;
    A = Math.max(1 * b, this.IndustrialStartingFactor);
    this.Demand_Local[6] = a;
    this.Demand_Regional[6] = w;
    this.Demand_Capacity[6] = A;
    e + m + t < 340 / 3 && (e *= 8, e < j && (0 === u && 0 === C && 0 === G && 0 === b) && (e = j / 3 - e, e >= g && (h = e, this.Demand_Local[0] = h, p = j / 4, v = j / 4)));
    g = [[h + q + x, this.residentialDemandBarLocal, i + o + r, this.residentialDemandBarTrade, j + p + v, 3 * this.ResidentialStartingCapacity], [l + D + H, this.commercialDemandBarLocal, c + f + n, this.commercialDemandBarTrade, d + k + s, 3 * this.CommercialStartingCapacity],
      [a, this.industrialDemandBarLocal, w, this.industrialDemandBarTrade, A, this.IndustrialStartingFactor]];
    simcity.IsMainTutorialInProgress() && (g = [[3410, this.residentialDemandBarLocal, 3410, this.residentialDemandBarTrade, 1184, 1020], [900, this.commercialDemandBarLocal, 2500, this.commercialDemandBarTrade, 1184, 1020], [1E3, this.industrialDemandBarLocal, 2E3, this.industrialDemandBarTrade, 1184, 1020]]);
    this.setBar(g);
    g = simcity.gGlobalUIHandler.mGameTimeManager.GetElapsedGameTimeSeconds();
    this.demandTrendBarTimer += g;
    if (0.1 < this.demandTrendBarTimer) {
      this.demandTrendBarTimer = 0;
      i = [[i, j], [o, p], [r, v], [c, d], [f, k], [n, s], [w, A]];
      for (j = 0; j < this.DemandHistoryArray.length; j++) {
        o = this.DemandHistoryArray[j];
        p = o.length;
        for (g = 0; g < p - 1; g++)
          o[g] = o[g + 1];
        o[p - 1] = i[j][0] / i[j][1]
      }
    }
  },
  setBar : function (a) {
    for (var b = 0; b < a.length; b++) {
      var c = a[b],
      d = c[1].mParentControl.mHeight,
      e = Math.max(c[0] / c[4], 0),
      f = Math.max(c[2] / c[4], 0);
      c[4] > c[5] && (Math.max(1.25 * (c[0] / c[4] - 0.2), 0), Math.max(1.25 * (c[2] / c[4] - 0.2), 0));
      e = Math.max(c[0] / c[4] - 0.05, 0);
      f = Math.max(c[2] /
          c[4] - 0.05, 0);
      c[1].SetHeight(Math.min(e, 1) * d);
      c[3].SetHeight(Math.min(f, 1) * d)
    }
  }
};
simcity.kGlobalUIDataBindings = [simcity.kGlobalUIPopulationInfo, simcity.kGlobalUIBudgetInfo, simcity.kGlobalUIMayorRating, simcity.kGlobalUIDemandBars];
simcity.GameUtilities = {};
simcity.kRecordTypePNG = 796721156;
simcity.DEPRECATED_kInvalidUnitRef = [-1, 4294967295];
simcity.cUnitRef = function () {
  this.slot = -1;
  this.stamp = 4294967295
};
simcity.cKey = function (a, b, c) {
  this.group = a ? a : 0;
  this.instance = b ? b : 0;
  this.type = c ? c : 0
};
simcity.IsUnitRefInvalid = function (a) {
  return a.slot === simcity.kInvalidUnitRef.slot && a.stamp === simcity.kInvalidUnitRef.stamp
};
simcity.IsUnitRefValid = function (a) {
  return a.slot !== simcity.kInvalidUnitRef.slot || a.stamp !== simcity.kInvalidUnitRef.stamp
};
simcity.CompareUnitRefs = function (a, b) {
  return a && b ? a.slot == b.slot && a.stamp == b.stamp ? !0 : !1 : null === a && null === b ? !0 : !1
};
simcity.CompareKeys = function (a, b) {
  return a && b ? a.group === b.group && a.instance === b.instance && a.type === b.type ? !0 : !1 : null === a && null === b ? !0 : !1
};
simcity.CompareKeyArrays = function (a, b) {
  if (a && b) {
    if (a.length !== b.length)
      return !1;
    for (var c = 0, d = a.length; c < d; ++c)
      if (!simcity.CompareKeys(a[c], b[c]))
        return !1;
    return !0
  }
  return null === a && null === b ? !0 : !1
};
simcity.CreateUnit = function (a, b) {
  var c = ["createUnit", scrui.IDFromName(a)];
  b && (c = c.concat(["unitRef", b]));
  scrui.PostGameCommand(scrui.BuildCommand(c))
};
simcity.CreateUnitCloseby = function (a, b) {
  var c = scrui.BuildRequestQuery(["units", b, "position"]);
  scrui.RequestGameData([c], function (b) {
    if (b = b[0])
      b[2] += 0.1, scrui.PostGameCommand(scrui.BuildCommand(["createUnit", scrui.IDFromName(a), scrui.RequestStringFromVector(b)]))
  })
};
simcity.RequestUnitRefFromString = function (a) {
  var b = new simcity.cUnitRef,
  a = a.split(",");
  2 === a.length && (b.slot = a[0], b.stamp = a[1]);
  return b
};
simcity.kConversionRate_Deca = 2077604956;
simcity.kConversionRate_Hecto = 2967773480;
simcity.kConversionRate_Kilo = 2030840470;
simcity.kConversionRate_Mega = 2724999403;
simcity.ConvertToMeasurement = function (a, b) {
  var c = a;
  switch (b) {
  case simcity.kConversionRate_Deca:
    c = a / 10;
    break;
  case simcity.kConversionRate_Hecto:
    c = a / 100;
    break;
  case simcity.kConversionRate_Kilo:
    c = a / 1E3;
    break;
  case simcity.kConversionRate_Mega:
    c = a / 1E6
  }
  return c = Number(c.toFixed(1))
};
simcity.MakeSimoleonsText = function (a) {
  return simcity.LocalizeSimoleons(a)
};
simcity.TimeLineGraph = {};
(function () {
  var a = /\{([^\}]+)\}/g,
  b = /(?:(?:^|\.)(.+?)(?=\[|\.|$|\()|\[('|")(.+?)\2\])(\(\))?/g,
  c = function (c, e) {
    return String(c).replace(a, function (a, c) {
      var d = e;
      c.replace(b, function (a, b, c, e, f) {
        b = b || e;
        d && (b in d && (d = d[b]), "function" == typeof d && f && (d = d()))
      });
      return d = (null == d || d == e ? a : d) + ""
    })
  };
  Raphael.fn.popup = function (a, b, f, g, h) {
    g = String(g || "top-middle").split("-");
    g[1] = g[1] || "middle";
    var i = f.getBBox(),
    j = Math.round(i.width),
    k = Math.round(i.height),
    l = Math.round(i.x) - 5,
    i = Math.round(i.y) - 5,
    m = Math.min(k /
        2, j / 2, 10),
    n = [{
        x : l + 5,
        y : i,
        w : j,
        w4 : j / 4,
        h4 : k / 4,
        right : 0,
        left : j - 2 * m,
        bottom : 0,
        top : k - 2 * m,
        r : 5,
        h : k,
        gap : m
      }, {
        x : l + 5,
        y : i,
        w : j,
        w4 : j / 4,
        h4 : k / 4,
        left : j / 2 - m,
        right : j / 2 - m,
        top : k / 2 - m,
        bottom : k / 2 - m,
        r : 5,
        h : k,
        gap : m
      }, {
        x : l + 5,
        y : i,
        w : j,
        w4 : j / 4,
        h4 : k / 4,
        left : 0,
        right : j - 2 * m,
        top : 0,
        bottom : k - 2 * m,
        r : 5,
        h : k,
        gap : m
      }
    ]["middle" == g[1] ? 1 : 2 * ("top" == g[1] || "left" == g[1])],
    p = 0,
    q = 0,
    o = this.path(c({
          top : "M{x},{y}h{w4},{w4},{w4},{w4}a{r},{r},0,0,1,{r},{r}v{h4},{h4},{h4},{h4}a{r},{r},0,0,1,-{r},{r}l-{right},0-{gap},{gap}-{gap}-{gap}-{left},0a{r},{r},0,0,1-{r}-{r}v-{h4}-{h4}-{h4}-{h4}a{r},{r},0,0,1,{r}-{r}z",
          bottom : "M{x},{y}l{left},0,{gap}-{gap},{gap},{gap},{right},0a{r},{r},0,0,1,{r},{r}v{h4},{h4},{h4},{h4}a{r},{r},0,0,1,-{r},{r}h-{w4}-{w4}-{w4}-{w4}a{r},{r},0,0,1-{r}-{r}v-{h4}-{h4}-{h4}-{h4}a{r},{r},0,0,1,{r}-{r}z",
          right : "M{x},{y}h{w4},{w4},{w4},{w4}a{r},{r},0,0,1,{r},{r}v{h4},{h4},{h4},{h4}a{r},{r},0,0,1,-{r},{r}h-{w4}-{w4}-{w4}-{w4}a{r},{r},0,0,1-{r}-{r}l0-{bottom}-{gap}-{gap},{gap}-{gap},0-{top}a{r},{r},0,0,1,{r}-{r}z",
          left : "M{x},{y}h{w4},{w4},{w4},{w4}a{r},{r},0,0,1,{r},{r}l0,{top},{gap},{gap}-{gap},{gap},0,{bottom}a{r},{r},0,0,1,-{r},{r}h-{w4}-{w4}-{w4}-{w4}a{r},{r},0,0,1-{r}-{r}v-{h4}-{h4}-{h4}-{h4}a{r},{r},0,0,1,{r}-{r}z"
        }
          [g[0]],
          n)).insertBefore(f);
    switch (g[0]) {
    case "top":
      p = a - (l + 5 + n.left + m);
      q = b - (i + 5 + k + 5 + m);
      break;
    case "bottom":
      p = a - (l + 5 + n.left + m);
      q = b - (i - m);
      break;
    case "left":
      p = a - (l + 5 + j + 5 + m);
      q = b - (i + 5 + n.top + m);
      break;
    case "right":
      p = a - (l - m),
      q = b - (i + 5 + n.top + m)
    }
    o.translate(p, q);
    if (h)
      return h = o.attr("path"), o.remove(), {
        path : h,
        dx : p,
        dy : q
      };
    f.translate(p, q);
    return o
  }
})();
simcity.cTimeLineGraph = function (a, b, c, d) {
  this.kStyles = {
    VERTICAL_GRID_LINE : {
      "stroke-width" : 0.2,
      stroke : "#666",
      "stroke-dasharray" : "1, 5"
    },
    HORIZONTAL_GRID_LINE : {
      "stroke-width" : 0.2,
      stroke : "#333"
    },
    GRAPH_FILL : {
      fill : "90-#8cc63f:5-#006837:95",
      stroke : "#fff",
      opacity : 0.8
    },
    CHART_BG : {
      fill : "#fff",
      "stroke-width" : 0
    }
  };
  this.mTextStyle = {
    font : "18px Helvetica, Arial",
    fill : "#56f"
  };
  this.kDefaultLineColor = "#f00";
  this.mLineWidth = 2.5;
  this.mDrawPoints = !0;
  this.mCircleRadius = 8;
  this.svgObj = null;
  this.mZeroBasedYAxis = !0;
  this.mAutoRescaleYAxis =
    !1;
  this.mCurrency = "\u00a7 ";
  this.mValueUnits = "/Truckload";
  this.mContainer = a;
  this.mWidth = b;
  this.mHeight = c;
  this.mGridSpace = 8;
  this.mRoundTo = 10;
  this.mTopPadding = d[0];
  this.mRightPadding = d[1];
  this.mBottomPadding = d[2];
  this.mLeftPadding = d[3];
  this.mChartWidth = this.mWidth - this.mLeftPadding - this.mRightPadding;
  this.mChartHeight = this.mHeight - this.mTopPadding - this.mBottomPadding;
  this.mColumnSegments = [];
  this.mRowSegments = [];
  this.mRowLabels = [];
  this.mColumnLabels = [];
  this.mRowLabelOffset = this.mColumnLabelOffset = 0;
  this.mLabelTable = void 0;
  this.mCircles = [];
  this.mDrawColumnLables = this.mDrawRowLables = this.mChartData = this.mLabel = this.mFrame = void 0;
  this.Initialize()
};
simcity.cTimeLineGraph.prototype.SetTextStyle = function (a) {
  this.mTextStyle = a
};
simcity.cTimeLineGraph.GetGraphData = function (a, b, c) {
  for (var d = [], e = b.mWidth / a.length, f = 10, g = 0; g < a.length; g++)
    d.push({
      x : e * g + e / 2,
      y : a[g]
    }), a[g] > f && (f = a[g]);
  return {
    data : {
      CoorData : d
    },
    metadata : {
      CoorData : {
        color : c,
        dot : "GlobalMarket-Dot-FF8A19.png"
      }
    },
    selected : ["CoorData"],
    xMax : b.mWidth,
    xMaxAll : b.mWidth,
    xMin : 0,
    xMinAll : 0,
    yMax : f + 0.2 * f,
    yMaxAll : f + 0.2 * f,
    yMin : 0,
    yMinAll : 0
  }
};
simcity.cTimeLineGraph.prototype.Initialize = function () {
  this.mContainer.children && 0 < this.mContainer.children.length && this.mContainer.removeChild(this.mContainer.children[0]);
  this.svgObj = Raphael(this.mContainer, this.mWidth, this.mHeight)
};
simcity.cTimeLineGraph.prototype.DestroyChart = function () {
  if (this.mContainer) {
    var a = this.mContainer.children,
    b;
    for (b in a)
      "object" == typeof a[b] && this.mContainer.removeChild(a[b]);
    this.mContainer = null
  }
};
simcity.cTimeLineGraph.prototype.DrawLineChart = function (a) {
  this.mChartData = a;
  var b = a.metadata,
  c = a.selected,
  d = this.mAutoRescaleYAxis ? a.yMin : a.yMinAll,
  e = this.GetTopInterval(this.mAutoRescaleYAxis ? a.yMax : a.yMaxAll, this.mRoundTo),
  d = this.GetBottomInterval(d, this.mRoundTo),
  f = this.GetLeftInterval(a.xMinAll, this.mRoundTo),
  g = this.GetRightInterval(a.xMaxAll, this.mRoundTo);
  if (0 < this.mRowSegments.length) {
    var h = (a.yMaxAll - a.yMinAll) / (this.mRowSegments.length - 1),
    i = Math.pow(10, Math.ceil(Math.log(h) / Math.log(10) -
          1)),
    h = Math.ceil(h / i) * i;
    a.yMinAll = h * Math.round(a.yMinAll / h);
    a.yMaxAll = h * Math.round(1 + a.yMaxAll / h)
  }
  if (this.IsValid(a)) {
    this.DrawGrid();
    for (var j in b)
       - 1 != c.indexOf(j) && (h = b[j].color ? b[j].color : this.kDefaultLineColor, i = this.ToPoints(a, j), this.DrawLines(i, d, e, f, g, h), this.DrawLabel(j, i[0]));
    this.DrawVerticalTickMarks(d, e, this.mRowSegments.length);
    this.DrawHorizontalTickMarks(a.xMinAll, a.xMaxAll, this.mColumnSegments.length + 1)
  } else
    "function" == typeof this.mOnErrorHandler && this.mOnErrorHandler()
};
simcity.cTimeLineGraph.prototype.SetCircleProperties = function (a, b) {
  this.mDrawPoints = a;
  b && (this.mCircleRadius = b)
};
simcity.cTimeLineGraph.prototype.DrawLines = function (a, b, c, d, e, f) {
  if (a && a.length && 0 < a.length) {
    b = "M" + a[0].x + "," + a[0].y;
    d = 1;
    for (e = a.length; d < e; d++)
      b = b + " L" + a[d].x + "," + a[d].y;
    this.svgObj.path(b).attr({
      "stroke-width" : this.mLineWidth,
      "stroke-linejoin" : "miter",
      "stroke-linecap" : "square",
      stroke : f
    });
    if (this.mDrawPoints) {
      c = this.mCircleRadius;
      d = this.svgObj;
      this.mLabel = d.set();
      this.mLabel.push(d.text(60, 27, "yValuefor").attr({
          font : "16px Helvetica, Arial",
          fill : "#000"
        }));
      this.mLabel.hide();
      this.mFrame = d.popup(100,
          100, this.mLabel, "right").attr({
          fill : "#fff",
          stroke : f,
          "stroke-width" : 2,
          "fill-opacity" : 0.95
        }).hide();
      d = 0;
      for (e = a.length; d < e; d++) {
        var b = b + "L" + a[d].x + "," + a[d].y,
        g = this.svgObj.circle(a[d].x, a[d].y, c).attr({
            fill : "#ffffff",
            stroke : f,
            "stroke-width" : 2
          });
        g.data("yVal", a[d].yVal);
        g.data("xPos", a[d].x);
        g.data("yPos", a[d].y);
        this.mCircles.push(g)
      }
    }
  }
};
simcity.cTimeLineGraph.prototype.DrawLabel = function (a, b) {
  if ("function" == typeof this.mOnDrawLabel)
    this.mOnDrawLabel(a, b);
  else if (!(0 === this.mColumnSegments.length && 0 === this.mRowSegments.length)) {
    for (var c = 0; c < this.mRowSegments.length; c++) {
      var d = this.mTopPadding + this.mChartHeight * (1 - this.mRowSegments[c]);
      if (this.mDrawRowLables) {
        var e = Math.round((this.mChartData.yMaxAll - this.mChartData.yMinAll) * this.mRowSegments[c] + this.mChartData.yMinAll),
        f = this.DrawYLabel({
            x : g,
            y : d
          }, e);
        !1 == f && this.svgObj.text(this.mRowLabelOffset,
          d, e).attr(this.mTextStyle)
      }
    }
    for (c = 0; c < this.mColumnSegments.length; c++) {
      var g = this.mLeftPadding + this.mChartWidth * this.mColumnSegments[c];
      this.mDrawColumnLables && (d = this.mHeight - this.mBottomPadding, g = this.mLeftPadding + this.mChartWidth * this.mColumnSegments[c], e = Math.round((this.mChartData.xMaxAll - this.mChartData.xMinAll) * this.mColumnSegments[c] + this.mChartData.xMinAll), f = this.DrawXLabel({
            x : g,
            y : d - this.mColumnLabelOffset
          }, e), !1 == f && this.svgObj.text(g, d + this.mColumnLabelOffset, e).attr(this.mTextStyle))
    }
  }
};
simcity.cTimeLineGraph.prototype.DrawYLabel = function (a, b) {
  return "function" == typeof this.mOnDrawYLabel ? (this.mOnDrawYLabel(a, b), !0) : !1
};
simcity.cTimeLineGraph.prototype.DrawXLabel = function (a, b) {
  return "function" == typeof this.mOnDrawXLabel ? (this.mOnDrawXLabel(a, b), !0) : !1
};
simcity.cTimeLineGraph.prototype.GetTopInterval = function (a, b) {
  return 0 < a % b ? a - a % b + b : a
};
simcity.cTimeLineGraph.prototype.GetBottomInterval = function (a, b) {
  return this.mZeroBasedYAxis ? 0 : 0 < a % b ? a - a % b : a
};
simcity.cTimeLineGraph.prototype.GetLeftInterval = function (a, b) {
  return 0 < a % b ? a - a % b : a
};
simcity.cTimeLineGraph.prototype.GetRightInterval = function (a, b) {
  return 0 < a % b ? a - a % b + b : a
};
simcity.cTimeLineGraph.prototype.DrawVerticalTickMarks = function (a, b, c) {
  var d = b - a,
  b = d / c,
  e = this.mChartHeight / d;
  this.mVerticalTickMarks && this.mVerticalTickMarks.remove();
  this.svgObj.setStart();
  if (this.mRowLabels.length)
    for (d = 0; d < this.mRowLabels.length; d++) {
      var f = this.mRowLabels[d],
      g = this.mRowLabelOffset,
      h = this.mChartHeight * (d / this.mRowLabels.length) + this.mChartHeight / this.mRowLabels.length / 2;
      this.svgObj.text(g, h, f).attr(this.mTextStyle)
    }
  else if (0 < d)
    for (d = 1; d < c; d++)
      f = a + b * d, f = this.mCurrency + f + this.mValueUnits,
      g = this.mChartWidth - this.mRightPadding - 10, h = this.mChartHeight + this.mTopPadding - b * d * e + 10, this.svgObj.text(g, h, f);
  else
    this.svgObj.text(g, this.mChartHeight + this.mTopPadding, a);
  this.mVerticalTickMarks = this.svgObj.setFinish()
};
simcity.cTimeLineGraph.prototype.DrawHorizontalTickMarks = function (a, b, c) {
  var d = this.mHeight - this.mBottomPadding - this.mColumnLabelOffset,
  a = (b - a) / c;
  this.mHorizontalTickMarks && this.mHorizontalTickMarks.remove();
  this.svgObj.setStart();
  for (b = 0; b < c; b++)
    b < this.mColumnLabels.length && this.svgObj.text(a * b + a / 2, d, this.mColumnLabels[b]);
  this.mHorizontalTickMarks = this.svgObj.setFinish()
};
simcity.cTimeLineGraph.prototype.SetGridSize = function (a, b, c, d, e) {
  void 0 != d && (this.mDrawRowLables = d);
  void 0 != c && (this.mDrawColumnLables = c);
  if (!(0 === a && 0 === b)) {
    c = 1 / a;
    d = 1 / b;
    this.mColumnSegments = [];
    this.mRowSegments = [];
    for (var f = 1; f < a; f++)
      this.mColumnSegments.push(c * f);
    for (f = 1; f < b; f++)
      this.mRowSegments.push(d * f);
    void 0 != e && null != e && (this.mLineWidth = e)
  }
};
simcity.cTimeLineGraph.prototype.SetGridLabels = function (a, b, c, d) {
  this.mRowLabels = b;
  this.mColumnLabels = a;
  void 0 !== d && (this.mRowLabelOffset = d);
  void 0 !== c && (this.mColumnLabelOffset = c)
};
simcity.cTimeLineGraph.prototype.ClearGraph = function () {};
simcity.cTimeLineGraph.prototype.DrawGrid = function () {
  if (!(0 === this.mColumnSegments.length && 0 === this.mRowSegments.length)) {
    this.svgObj.rect(this.mLeftPadding, this.mTopPadding, this.mChartWidth, this.mChartHeight).attr(this.kStyles.CHART_BG);
    for (var a = 0; a < this.mRowSegments.length; a++) {
      var b = this.mTopPadding + this.mChartHeight * (1 - this.mRowSegments[a]),
      b = "M" + this.mLeftPadding + ", " + b + "L" + (this.mWidth - this.mRightPadding) + ", " + b;
      this.svgObj.path(b).attr(this.kStyles.HORIZONTAL_GRID_LINE)
    }
    for (a = 0; a < this.mColumnSegments.length; a++)
      b =
        this.mLeftPadding + this.mChartWidth * this.mColumnSegments[a], b = "M" + b + ", " + this.mTopPadding + "L" + b + ", " + (this.mHeight - this.mBottomPadding), this.svgObj.path(b).attr(this.kStyles.VERTICAL_GRID_LINE)
  }
};
simcity.cTimeLineGraph.prototype.GetPointsOnGraph = function (a) {
  var b = [];
  if (a.length) {
    var c = this.mAutoRescaleYAxis ? this.mChartData.yMin : this.mChartData.yMinAll,
    d = this.GetTopInterval(this.mAutoRescaleYAxis ? this.mChartData.yMax : this.mChartData.yMaxAll, this.mRoundTo),
    c = this.GetBottomInterval(c, this.mRoundTo),
    e = this.mChartData.xMaxAll - this.mChartData.xMinAll;
    0 == e && (e = 1);
    e = this.mChartWidth / e;
    d -= c;
    0 == d && (d = 1);
    for (var d = this.mChartHeight / d, f = 0, g = 0, h = 0, i = a.length; h < i; h++)
      f = Math.floor(this.mLeftPadding + (a[h].x -
            this.mChartData.xMinAll) * e), g = this.mZeroBasedYAxis ? Math.floor(this.mTopPadding + this.mChartHeight - a[h].y * d) : Math.floor(this.mTopPadding + this.mChartHeight - (a[h].y - c) * d), b.push({
        x : f,
        y : g,
        xVal : a[h].x,
        yVal : a[h].y
      })
  }
  return b
};
simcity.cTimeLineGraph.prototype.ToPoints = function (a, b) {
  var c = [],
  d = a.data[b];
  if (d.length) {
    var e = this.mAutoRescaleYAxis ? a.yMin : a.yMinAll,
    f = this.GetTopInterval(this.mAutoRescaleYAxis ? a.yMax : a.yMaxAll, this.mRoundTo),
    e = this.GetBottomInterval(e, this.mRoundTo),
    g = a.xMaxAll - a.xMinAll;
    0 == g && (g = 1);
    g = this.mChartWidth / g;
    f -= e;
    0 == f && (f = 1);
    for (var f = this.mChartHeight / f, h = 0, i = 0, j = 0, k = d.length; j < k; j++)
      h = Math.floor(this.mLeftPadding + (d[j].x - a.xMinAll) * g), i = this.mZeroBasedYAxis ? Math.floor(this.mTopPadding + this.mChartHeight -
          d[j].y * f) : Math.floor(this.mTopPadding + this.mChartHeight - (d[j].y - e) * f), c.push({
        x : h,
        y : i,
        xVal : d[j].x,
        yVal : d[j].y
      })
  }
  return c
};
simcity.cTimeLineGraph.prototype.IsValid = function (a) {
  if (!a)
    return !1;
  var b = a.data,
  c = a.metadata,
  a = a.selected;
  if (!b || !c || !a)
    return !1;
  if (a && a.length)
    for (var c = Object.keys(c), a = 0, d = c.length; a < d; a++)
      if (b[c[a]] && b[c[a]].length)
        return !0
};
simcity.cTimeLineGraph.prototype.GetLabelPositions = function () {};
simcity.cTimeLineGraph.prototype.SetLabelReferenceTable = function (a) {
  this.mLabelTable = a
};
simcity.cTimeLineGraph.prototype.MovePopup = function (a) {
  if (!(a >= this.mCircles.length)) {
    var b = this.mCircles[a],
    c = this.mChartWidth,
    d = this.svgObj,
    e = "top";
    0 > b.data("yPos") - this.mFrame.getBBox().height && (e = "bottom");
    e = b.data("xPos") + this.mFrame.getBBox().width > c ? e + "-right" : 0 > b.data("xPos") - this.mFrame.getBBox().width ? e + "-left" : e + "-middle";
    e = d.popup(b.data("xPos"), b.data("yPos"), this.mLabel, e, 1);
    c = Raphael.animation({
        path : e.path,
        transform : ["t", e.dx, e.dy]
      }, 200);
    d = this.mLabel[0].transform()[0][1] + e.dx;
    e = this.mLabel[0].transform()[0][2] +
      e.dy;
    a = b.data("yVal");
    if (this.mLabelTable && this.mLabelTable.length) {
      for (var f = 0, f = a = 0; f < this.mLabelTable.length && !(this.mLabelTable[f].topRange > b.data("yVal")); f++)
        a++;
      a = this.mLabelTable[a].label
    }
    this.mLabel[0].attr({
      text : a
    });
    this.mLabel[0].show().stop().animateWith(this.mFrame, c, {
      transform : ["t", d, e]
    }, 200);
    this.mFrame.show().stop().animate(c);
    this.mFrame.toFront();
    this.mLabel.toFront()
  }
};
simcity.BoundaryUI = {};
simcity.cBoundaryUIHandler = function () {
  this.UIHandler = scrui.cUIHandler;
  this.UIHandler();
  this.mParentControl = this.mMouseEaterWindow = null
};
goog.inherits(simcity.cBoundaryUIHandler, scrui.cUIHandler);
simcity.cBoundaryUIHandler.kWinAvatarTemplateContainer = 240066264;
simcity.cBoundaryUIHandler.kWinAvatarImage = 237907905;
simcity.cBoundaryUIHandler.kBtnAvatar = 239792063;
simcity.cBoundaryUIHandler.kWinAvatarOnlineHighlight = 239800634;
simcity.cBoundaryUIHandler.kWinAvatarAlert = 239807635;
simcity.cBoundaryUIHandler.kWinInfoBarTextWindow = 239731965;
simcity.cBoundaryUIHandler.kTxtInfoBarCityName = 239732070;
simcity.cBoundaryUIHandler.kTxtInfoBarPlayerName = 239732835;
simcity.cBoundaryUIHandler.kTxtInfoBarGreatWork = 252245628;
simcity.cBoundaryUIHandler.kWinInfoBarCitySpecialization = 239799539;
simcity.cBoundaryUIHandler.kWinInfoBarAlertIconContainer = 247069467;
simcity.cBoundaryUIHandler.kBoundaryUpdateTime = 5E3;
simcity.cBoundaryUIHandler.kTopBottomMargin = 0;
simcity.cBoundaryUIHandler.kGapBetweenAvatars = 0;
simcity.cBoundaryUIHandler.kCitySpecializationIcons = "Graphics/Icons/SpecializationIcons/icn-specialization-none.png Graphics/Icons/SpecializationIcons/icn-specialization-metals.png Graphics/Icons/SpecializationIcons/icn-specialization-drilling.png Graphics/Icons/SpecializationIcons/icn-specialization-gambling.png Graphics/Icons/SpecializationIcons/icn-specialization-electrics.png Graphics/Icons/SpecializationIcons/icn-specialization-trade.png Graphics/Icons/SpecializationIcons/icn-specialization-university.png".split(" ");
simcity.cBoundaryUIHandler.kGreatWorkDefaultIcon = "icn-specialization-greatworks-unclaimed.png";
simcity.cBoundaryUIHandler.prototype.Init = function (a) {
  scrui.Assert(null !== a);
  this.mContainerControl = a;
  this.mContainerControl.SetVisibility(!1);
  this.mOriginalContainerTop = this.mContainerControl.mTop;
  this.mForceUpdate = !1;
  this.mTimeSinceLastUpdate = simcity.cBoundaryUIHandler.kBoundaryUpdateTime
};
simcity.cBoundaryUIHandler.prototype.SetVisibility = function (a) {
  this.mContainerControl.SetVisibility(a)
};
simcity.cBoundaryUIHandler.prototype.SetRegionID = function (a) {
  this.mRegionID = a
};
simcity.cBoundaryUIHandler.prototype.Shutdown = function () {};
simcity.cBoundaryUIHandler.prototype.UpdateBoundaryUI = function () {
  if (simcity.IsTutorialInProgress())
    this.mContainerControl.SetVisibility(!1);
  else {
    var a = simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData,
    b = a.mCityTradeData[a.mPlayingBox.uid];
    if (null != b) {
      for (var b = Object.keys(b.connections), c = 0, d = 0, e = b.length; d < e; d++) {
        var f = Number(b[d]);
        a.mCities[f] && (a.mCities[f].isClaimed && f != Number(a.mPlayingBox.uid)) && c++
      }
      a = c + 1;
      b = simcity.gGlobalUIHandler.mAvatarManagerHandler.GetGroupCount("boundary");
      if (this.mCurrTotalBoxesAndGreatWorks !==
        a || a != b || this.mForceUpdate)
        this.mCurrTotalBoxesAndGreatWorks = a, this.mForceUpdate = !1, this.RebuildBoundaryUI()
    }
  }
};
simcity.cBoundaryUIHandler.prototype.RebuildBoundaryUI = function () {
  var a = simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData,
  b = this.mContainerControl,
  c = 0,
  d = 0,
  e = 0;
  b.DestroyChildren();
  simcity.gGlobalUIHandler.mAvatarManagerHandler.ClearSubscriptions("boundary");
  var f = a.mCityTradeData[a.mPlayingBox.uid];
  if (null != f) {
    for (var f = Object.keys(f.connections), g = 0; g < f.length; g++) {
      var h = a.mBoxes[f[g]];
      if (h && "true" === h.isClaimed) {
        if (0 == h.creatorId) {
          this.mForceUpdate = !0;
          return
        }
        var i = parseInt(h.uid),
        j = 0,
        j = this.GetCitySpecialization(i),
        i = gUIManager.LoadAndCacheLayout("Layouts/BoundaryUI/BoundaryUIAvatar.js", b);
        i.SetPosition(0, e * i.mHeight + simcity.cBoundaryUIHandler.kTopBottomMargin + e * simcity.cBoundaryUIHandler.kGapBetweenAvatars);
        var k = i.FindControlByID(simcity.cBoundaryUIHandler.kWinAvatarTemplateContainer),
        k = {
          playerID : h.creatorId,
          layoutInfo : k,
          isMyBox : simcity.gGlobalUIHandler.mRegionViewUIHandler.IsOwnCity(h.uid),
          isCurrentBox : h.uid == simcity.gGlobalUIHandler.mActiveBoxUID,
          showAlerts : !0,
          group : "boundary",
          specialization : j,
          isPlayingThisBox : h.id ==
          h.creator.currentPlayingBoxId,
          serverBoxID : h.id,
          boxID : h.uid
        };
        simcity.gGlobalUIHandler.mAvatarManagerHandler.AddSubscription(k);
        i.FindControlByID(simcity.cBoundaryUIHandler.kWinInfoBarTextWindow).SetVisibility(!1);
        i.FindControlByID(simcity.cBoundaryUIHandler.kTxtInfoBarGreatWork).SetVisibility(!1);
        i.FindControlByID(simcity.cBoundaryUIHandler.kTxtInfoBarCityName).SetRawText(h.name);
        i.FindControlByID(simcity.cBoundaryUIHandler.kTxtInfoBarPlayerName).SetRawText(h.creator.screenName);
        i.FindControlByID(simcity.cBoundaryUIHandler.kWinInfoBarCitySpecialization).SetWindowImage(simcity.cBoundaryUIHandler.kCitySpecializationIcons[j]);
        j = i.FindControlByID(simcity.cBoundaryUIHandler.kBtnAvatar);
        i.mUserData = h.uid;
        j.mUserData = h.uid;
        j.mUnitRef = h.unitRef;
        c += i.mHeight;
        d = i.mWidth;
        e++
      }
    }
    Object.keys(a.mConnectedUnits);
    var l = simcity.gGlobalUIHandler.mRegionViewUIHandler.GetConnectedGWID();
    if (null != l) {
      var m = simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionViewItems[l].mUnitRef;
      m && (f = scrui.BuildRequestQuery([simcity.kDataUnits, m, simcity.kDataNonSimProperties, simcity.kPropBorderUIGreatWorksIcon]), scrui.RequestGameData([f], function (f) {
          var g =
            simcity.cBoundaryUIHandler.kGreatWorkDefaultIcon;
          null !== f[0] && (g = scrui.PathFromResourceKey(f[0]));
          f = gUIManager.LoadAndCacheLayout("Layouts/BoundaryUI/BoundaryUIAvatar.js", b);
          f.SetPosition(0, e * f.mHeight + simcity.cBoundaryUIHandler.kTopBottomMargin + e * simcity.cBoundaryUIHandler.kGapBetweenAvatars);
          var h = f.FindControlByID(simcity.cBoundaryUIHandler.kWinAvatarTemplateContainer);
          simcity.gGlobalUIHandler.mAvatarManagerHandler.AddSubscription({
            greatWorkID : l,
            greatWorksIcon : g,
            isCurrentBox : !1,
            isMyBox : !1,
            layoutInfo : h,
            showAlerts : !0,
            group : "boundary",
            unitRef : m,
            boxID : l
          });
          f.FindControlByID(simcity.cBoundaryUIHandler.kWinInfoBarTextWindow).SetVisibility(!1);
          f.FindControlByID(simcity.cBoundaryUIHandler.kTxtInfoBarPlayerName).SetVisibility(!1);
          f.FindControlByID(simcity.cBoundaryUIHandler.kTxtInfoBarCityName).SetVisibility(!1);
          f.FindControlByID(simcity.cBoundaryUIHandler.kTxtInfoBarGreatWork).SetVisibility(!0);
          (g = a.mGreatWorksLocal[m]) ? (g = scrui.LocaleStringFromLocaleProperty(g.data.name), f.FindControlByID(simcity.cBoundaryUIHandler.kTxtInfoBarGreatWork).SetLocaleText(g)) :
          f.FindControlByID(simcity.cBoundaryUIHandler.kTxtInfoBarGreatWork).SetLocaleText(new scrui.cLocaleString("RegionView.json", "0x0f07bfe5", "great works"));
          f.FindControlByID(simcity.cBoundaryUIHandler.kWinInfoBarCitySpecialization).SetVisibility(!1);
          g = f.FindControlByID(simcity.cBoundaryUIHandler.kBtnAvatar);
          f.mUserData = l;
          g.mUserData = l;
          g.mUnitRef = m;
          c += f.mHeight;
          d = f.mWidth;
          e++
        }));
      e && !simcity.gGlobalUIHandler.mIsSpectatorMode && (b.SetPosition(b.mLeft, this.mOriginalContainerTop - c, d, c), this.mContainerControl.SetVisibility(!0))
    }
  }
};
simcity.cBoundaryUIHandler.prototype.Update = scrui.Client_ProfZone("cBoundaryUIHandler.Update", function (a) {
    this.mTimeSinceLastUpdate += a;
    this.mTimeSinceLastUpdate > simcity.cBoundaryUIHandler.kBoundaryUpdateTime && (this.mTimeSinceLastUpdate = 0, this.CheckForGreatWorkChange(), this.UpdateBoundaryUI(), this.CheckForAlerts())
  });
simcity.cBoundaryUIHandler.prototype.CheckForGreatWorkChange = function () {
  var a = simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData,
  b = simcity.gGlobalUIHandler.mRegionViewUIHandler.GetConnectedGWID();
  if (b) {
    var c = simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionViewItems[b].mUnitRef,
    d = this,
    e = scrui.BuildRequestQuery([simcity.kDataUnits, c, simcity.kDataNonSimProperties, simcity.kPropBorderUIGreatWorksIcon]);
    scrui.RequestGameData([e], function (a) {
      var c = simcity.cBoundaryUIHandler.kGreatWorkDefaultIcon;
      null !== a[0] && (c = scrui.PathFromResourceKey(a[0]));
      simcity.gGlobalUIHandler.mAvatarManagerHandler.IsTrackingGW(b, c) || (d.mForceUpdate = !0)
    });
    if (a = a.mGreatWorksLocal[c])
      if (a = scrui.LocaleStringFromLocaleProperty(a.data.name), c = this.mContainerControl, c.mChildren)
        for (e = 0; e < c.mChildren.length; e++) {
          var f = c.mChildren[e];
          if (f.mUserData == b) {
            c = f.FindControlByID(simcity.cBoundaryUIHandler.kTxtInfoBarGreatWork);
            c.mLocaleString.mStringID != a.mStringID && c.SetLocaleText(a);
            break
          }
        }
  }
};
simcity.cBoundaryUIHandler.prototype.UpdateRolloverSpecialization = function (a, b) {
  var c = this.getUserContainer(a);
  c && c.FindControlByID(simcity.cBoundaryUIHandler.kWinInfoBarCitySpecialization).SetWindowImage(simcity.cBoundaryUIHandler.kCitySpecializationIcons[b])
};
simcity.cBoundaryUIHandler.prototype.getUserContainer = function (a) {
  var b = this.mContainerControl;
  if (b.mChildren)
    for (var c = 0; c < b.mChildren.length; c++) {
      var d = b.mChildren[c];
      if (d.mUserData == a)
        return d
    }
  return null
};
simcity.cBoundaryUIHandler.prototype.HandleUIMessage = function (a, b, c) {
  switch (a) {
  case scrui.kMsgTypeButtonGainFocus:
    b.controlID == simcity.cBoundaryUIHandler.kBtnAvatar && (c = this.getUserContainer(c.mUserData)) && c.FindControlByID(simcity.cBoundaryUIHandler.kWinInfoBarTextWindow).SetVisibility(!0);
    break;
  case scrui.kMsgTypeButtonLoseFocus:
    b.controlID == simcity.cBoundaryUIHandler.kBtnAvatar && (c = this.getUserContainer(c.mUserData)) && c.FindControlByID(simcity.cBoundaryUIHandler.kWinInfoBarTextWindow).SetVisibility(!1);
    break;
  case scrui.kMsgTypeButtonClicked:
    switch (b) {
    case simcity.cBoundaryUIHandler.kBtnAvatar:
      if (simcity.gGlobalUIHandler.mRegionViewUIHandler.IsVisible() || (simcity.gGlobalUIHandler.mRegionViewUIHandler.EnterRegionView(), simcity.gGlobalUIHandler.mRegionViewUIHandler.OnShowRegionUI()), gUIManager.FindControlByID(simcity.kRegionUnlockEffect).SetVisibility(!1), (a = gUIManager.FindControlByID(simcity.kBtnRegionCamera)) && a.SetSelected(!0), a = simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData.mViewingBox ?
          simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData.mViewingBox.uid : -1, c.mUserData && c.mUserData != a)
        simcity.gGlobalUIHandler.mRegionViewUIHandler.ZoomToCity(c.mUserData), simcity.gGlobalUIHandler.mAvatarManagerHandler.BoxClicked(c.mUserData)
    }
  }
};
simcity.cBoundaryUIHandler.prototype.GetCitySpecialization = function (a) {
  var b = simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData;
  if (parseInt(b.mPlayingBox.uid) == a)
    return (a = simcity.cCitySpecializationHandler.guidedSpecialization) ? a - 1 : 0;
  for (var c = Object.keys(b.mCityTradeData), d = 0, e = c.length; d < e; d++) {
    var f = Number(c[d]);
    if (f != a && (f = b.mCityTradeData[f].connections, f[a] && f[a].connectionData && f[a].connectionData.hasOwnProperty("t2")))
      return f[a].connectionData.t2.data.citySpecialization
  }
  return 0
};
simcity.cBoundaryUIHandler.prototype.CheckForAlerts = function () {
  var a = this.mContainerControl;
  if (a.mChildren)
    for (var b = 0; b < a.mChildren.length; b++) {
      var c = a.mChildren[b],
      d = c.FindControlByID(simcity.cBoundaryUIHandler.kWinInfoBarAlertIconContainer);
      d && simcity.gGlobalUIHandler.mAvatarManagerHandler.AddAlertIcons(c.mUserData, d, null)
    }
  return null
};
simcity.Accordion = {};
simcity.cAccordion = function (a, b, c, d) {
  this.mContainer = a;
  this.mItemLayout = b;
  this.mToggleControlId = c;
  this.mToggleAnimationId = d;
  this.mItems = [];
  if (this.mToggleControlId) {
    var e = this;
    simcity.gEventManager.AddEventListener(simcity.gEventTypes.CLICK, this.mToggleControlId, function (a) {
      e.ToggleClick(a)
    })
  }
  gUIManager.CacheLayout(this.mItemLayout)
};
simcity.cAccordion.prototype.IsPointInAccordion = function (a, b) {
  var c = this.mContainer.mChildren,
  d = 0,
  e;
  for (e in c)
    d += c[e].mRootElement.clientHeight;
  c = this.mContainer.GetAbsoluteBoundingBox();
  return a > c[0] && b > c[1] && a < c[2] && b < c[1] + d
};
simcity.cAccordion.prototype.CreateItem = function (a) {
  var b = null,
  b = a ? gUIManager.LoadLayout(a, this.mContainer) : gUIManager.LoadLayout(this.mItemLayout, this.mContainer);
  b.mRootElement.style.position = "relative";
  b.isOpen = !1;
  this.mItems.push(b);
  if (this.mToggleControlId && (a = b.FindControlByID(this.mToggleControlId)))
    a.itemRef = b;
  b.SetVisibility = function (a) {
    scrui.cControlBase.prototype.SetVisibility.call(this, a);
    a && (this.mRootElement.style.display = "block")
  };
  return b
};
simcity.cAccordion.prototype.Destroy = function () {
  for (var a in this.mItems)
    this.mItems[a].DestroyControl();
  this.mItems.length = 0
};
simcity.cAccordion.prototype.Private_RunAnimation = function (a, b) {
  if (a) {
    var c = a.FindAnimationByID(this.mToggleAnimationId);
    c && c.Start(b)
  }
};
simcity.cAccordion.prototype.ToggleClick = function (a) {
  for (var b in this.mItems) {
    var c = this.mItems[b];
    if (c === a.itemRef && !c.isOpen)
      c.isOpen = !0, a instanceof scrui.cButton && a.SetSelected(!0), this.Private_RunAnimation(c, scrui.cAnimation.kPlayForward);
    else {
      c.isOpen = !1;
      var d = c.FindControlByID(this.mToggleControlId);
      d instanceof scrui.cButton && d.SetSelected(!1);
      this.Private_RunAnimation(c, scrui.cAnimation.kPlayReverse)
    }
  }
};
simcity.cAccordion.prototype.OpenItem = function (a) {
  if (a) {
    var b = a.FindControlByID(this.mToggleControlId);
    b && !a.isOpen && this.ToggleClick(b)
  }
};
simcity.cAccordion.prototype.CloseItem = function (a) {
  if (a) {
    a.isOpen = !1;
    var b = a.FindControlByID(this.mToggleControlId);
    b instanceof scrui.cButton && b.SetSelected(!1);
    this.Private_RunAnimation(a, scrui.cAnimation.kPlayReverse)
  }
};
simcity.Panel2D = {};
simcity.cPanel2D = function () {};
goog.inherits(simcity.cPanel2D, scrui.cUIHandler);
simcity.cPanel2D.prototype.InitPanel = function (a, b, c) {
  this.mListeners = [];
  this.mPanelTabs = {};
  this.mCurrentTabKey = null;
  this.mPanelControl = a;
  this.mAnimateControl = b;
  this.mRatioOverride = c;
  this.mShown = !1;
  this.mNoDataMsgControl = this.mLoadNotifier = null;
  this.Private_ScaleControl();
  gUIManager.RegisterUIHandler(this)
};
simcity.cPanel2D.prototype.Private_ScaleControl = function () {
  this.mRatioOverride && simcity.gUIToolbox.SetControlAspectRatio(this.mPanelControl, this.mRatioOverride)
};
simcity.cPanel2D.prototype.HandleUIMessage = function (a) {
  switch (a) {
  case scrui.kMsgTypeRootWindowResized:
    this.Private_ScaleControl()
  }
};
simcity.cPanel2D.prototype.SetLoadNotifier = function (a) {
  this.mLoadNotifier = a
};
simcity.cPanel2D.prototype.LoadStart = function () {
  this.mLoadNotifier && this.mLoadNotifier.LoadStart()
};
simcity.cPanel2D.prototype.LoadFinish = function () {
  this.mLoadNotifier && this.mLoadNotifier.LoadFinish()
};
simcity.cPanel2D.prototype.SetNoDataMsgControl = function (a) {
  this.mNoDataMsgControl = this.FindControlByID(a)
};
simcity.cPanel2D.prototype.ShowNoDataMessage = function () {
  this.mNoDataMsgControl && this.mNoDataMsgControl.SetVisibility(!0)
};
simcity.cPanel2D.prototype.HideNoDataMessage = function () {
  this.mNoDataMsgControl && this.mNoDataMsgControl.SetVisibility(!1)
};
simcity.cPanel2D.prototype.GetPanelControl = function () {
  return this.mPanelControl
};
simcity.cPanel2D.prototype.GetPanelAnimation = function () {
  return this.mAnimateControl
};
simcity.cPanel2D.prototype.Destroy = function () {
  gUIManager.UnregisterUIHandler(this);
  this.RemoveEventListeners();
  for (var a in this.mPanelTabs)
    this.mPanelTabs[a].tab.RemoveEventListeners(), this.mPanelTabs[a].tab.Destroy(), simcity.gEventManager.RemoveEventListener(simcity.gEventTypes.CLICK, this.mPanelTabs[a].controlId);
  this.mPanelTabs = {};
  this.mAnimateControl = this.mPanelControl = this.mCurrentTabKey = null
};
simcity.cPanel2D.prototype.Show = function (a, b) {
  this.mShown = !0;
  a && (this.mCurrentTabKey = a);
  this.mAnimateControl ? this.AnimateIn() : this.mPanelControl.SetVisibility(!0);
  this.AddEventListeners();
  this.mCurrentTabKey && this.ShowTab(this.mCurrentTabKey, !1, b)
};
simcity.cPanel2D.prototype.Hide = function () {
  this.mShown = !1;
  this.RemoveEventListeners();
  this.mAnimateControl ? this.AnimateOut() : this.mPanelControl && this.mPanelControl.SetVisibility(!1);
  this.mCurrentTabKey && this.HideTab(this.mCurrentTabKey)
};
simcity.cPanel2D.prototype.Toggle = function (a, b) {
  this.mShown ? this.Hide() : this.Show(a, b)
};
simcity.cPanel2D.prototype.AnimateIn = function () {
  this.mAnimateControl && this.mAnimateControl.Start(scrui.cAnimation.kPlayForward)
};
simcity.cPanel2D.prototype.AnimateOut = function () {
  this.mAnimateControl && this.mAnimateControl.Start(scrui.cAnimation.kPlayReverse)
};
simcity.cPanel2D.prototype.AddTab = function (a, b, c, d) {
  if (!this.mPanelTabs[a]) {
    var e = this.FindControlByID(d);
    e && e instanceof scrui.cButton && e.SetTreatMouseDownAsClick(!0);
    this.mPanelTabs[a] = {
      tab : b,
      controlId : d
    };
    var f = this;
    simcity.gEventManager.AddEventListener(simcity.gEventTypes.CLICK, d, function () {
      f.ShowTab(a, !0)
    });
    c = this.FindControlByID(c);
    b.InitTab(c, this)
  }
};
simcity.cPanel2D.prototype.ShowTab = function (a, b, c) {
  var d = this.mPanelTabs[this.mCurrentTabKey],
  e = this.mPanelTabs[a];
  this.mCurrentTabKey = a;
  try {
    if (d && d.tab && (d.tab.Hide(), d.tab.RemoveEventListeners()), e) {
      if (!b) {
        var f = this.FindControlByID(e.controlId);
        !b && (f && "function" === typeof f.SetSelected) && f.SetSelected(!0)
      }
      e.tab && (e.tab.AddEventListeners(), e.tab.Show.apply(e.tab, c))
    }
  }
  finally {
    d && d.tab && simcity.cPanelTab.prototype.Hide.call(d.tab),
    e && e.tab && simcity.cPanelTab.prototype.Show.call(e.tab)
  }
};
simcity.cPanel2D.prototype.HideTab = function (a) {
  a = this.mPanelTabs[a];
  a.tab.Hide();
  a.tab.RemoveEventListeners()
};
simcity.cPanel2D.prototype.HideAllTabs = function (a) {
  for (a in this.mPanelTabs)
    this.HideTab(a)
};
simcity.cPanel2D.prototype.GetTab = function (a) {
  a = this.mPanelTabs[a];
  return !a ? null : a.tab
};
simcity.cPanel2D.prototype.FindControlByID = function (a) {
  return !a ? null : this.mPanelControl.FindControlByID(a)
};
simcity.cPanel2D.prototype.FindAnimationByID = function (a) {
  return !a ? null : this.mPanelControl.FindAnimationByID(a)
};
simcity.cPanel2D.prototype.HideControlById = function (a) {
  a = this.FindControlByID(a);
  null != a && a.SetVisibility(!1)
};
simcity.cPanel2D.prototype.ShowControlById = function (a) {
  a = this.FindControlByID(a);
  null != a && a.SetVisibility(!0)
};
simcity.cPanel2D.prototype.ClearViewByID = function (a) {
  (a = this.FindControlByID(a)) && a.DestroyChildren()
};
simcity.cPanel2D.prototype.AddEventListener = function (a, b, c) {
  var d = this;
  this.mListeners.push({
    func : function () {
      c.apply(d, arguments)
    },
    event : a,
    controlId : b
  })
};
simcity.cPanel2D.prototype.AddEventListeners = function () {
  for (var a in this.mListeners) {
    var b = this.mListeners[a];
    simcity.gEventManager.AddEventListener(b.event, b.controlId, b.func)
  }
};
simcity.cPanel2D.prototype.RemoveEventListeners = function () {
  for (var a in this.mListeners) {
    var b = this.mListeners[a];
    simcity.gEventManager.RemoveEventListener(b.event, b.controlId)
  }
};
simcity.BufferedListScroller = {};
simcity.cBufferedListScroller = function (a, b, c) {
  this.mItemHeight = null;
  this.mNumShown = c || 0;
  this.mScrollContainer = a;
  this.mItemContainer = b
};
simcity.cBufferedListScroller.prototype.Init = function (a) {
  this.mItemContainer.DestroyChildren();
  for (var b = this.mNumShown + 1, c = 0; c < b; ++c) {
    var d = gUIManager.LoadAndCacheLayout(a, this.mItemContainer);
    d.SetVisibility(!1);
    this.mItemHeight || (this.mItemHeight = d.mHeight)
  }
};
simcity.cBufferedListScroller.prototype.Destroy = function () {
  delete this.mItemHeight;
  delete this.mNumShown;
  delete this.mScrollContainer;
  delete this.mItemContainer
};
simcity.cBufferedListScroller.prototype.GetItemHeight = function () {
  return this.mItemHeight
};
simcity.cBufferedListScroller.prototype.PopulateItemScroll = function (a, b) {
  for (var b = b || function () {}, c = Math.floor(this.mScrollContainer.mRootElement.scrollTop / this.mItemHeight), d = Math.ceil(c + this.mNumShown), d = Math.min(d + 1, a.length), d = Math.max(0, d - c), e = c % (this.mNumShown + 1), f = 0; f < d; ++f) {
    var g = this.mItemContainer.mChildren[(e + f) % this.mItemContainer.mChildren.length],
    h = c + f;
    g.SetPosition(0, h * this.mItemHeight);
    g.SetVisibility(!0);
    b(g, a[h])
  }
};
simcity.FriendListUIHandler = {};
simcity.cFriendListUIHandler = function () {
  this.mOfflineList = this.mOnlineList = this.mNoFriends = this.mRequestList = this.mSearchResults = this.mFriendAccordion = null;
  this.mOpenOnlineOnShow = !0;
  this.mPulseIntervalHandle = this.mSpinner = this.mSearchTermCache = null;
  this.kPulseIntervalLength = 5E3;
  this.mPageIDs = {
    FRIEND_AVATAR : 234972408,
    FRIEND_NAME : 235053054,
    FRIEND_STATUS_TEXT : 235053113,
    FRIEND_AVATAR_FRAME : 238688407,
    FRIEND_ENTRY_BUTTON : 238945735,
    FRIEND_CHAT_BUTTON : 241540436,
    FRIEND_ACCEPT_BUTTON : 246364899,
    FRIEND_IGNORE_BUTTON : 246364905,
    LOADING_SPINNER : 249680599,
    SEARCH_RESULT_ADD_FRIEND_BUTTON : 242930454,
    FRIEND_SEARCH_TEXT_INPUT : 242876487,
    FRIEND_SEARCH_BUTTON : 242876493,
    FRIEND_LIST_CATEGORY_TITLE : 246396611,
    FRIEND_LIST_CATEGORY_BTN : 240602255,
    FRIEND_LIST_CATEGORY_ANIM : 240609422,
    FRIEND_LIST_CATEGORY_CLOSE_BTN : 242932892,
    FRIEND_ITEM_LIST : 250970925,
    FRIEND_ITEM_SCROLL_AREA : 240602250,
    FRIEND_LIST_PULSE : 251401392,
    MESSAGE_TEXT : 246722907,
    LOAD_FAILED : 249753460,
    NO_FRIENDS : 249753448
  };
  this.mPageLayouts = {
    FRIEND_ITEM : "Layouts/GameEntry/FriendsListItem.js",
    FRIEND_REQUEST_ITEM : "Layouts/GameEntry/FriendsList-FriendRequest.js",
    FRIEND_CATEGORY_ITEM : "Layouts/Friends/FriendListCategory.js",
    FRIEND_LIST_HEADER : "Layouts/Friends/FriendListHeader.js",
    FRIEND_LIST_FOOTER : "Layouts/Friends/FriendListFooter.js",
    FRIEND_MESSAGE_ITEM : "Layouts/Friends/FriendsList-MessageItem.js",
    FRIEND_MESSAGE_NO_FRIENDS : "Layouts/Friends/FriendsList-NoFriends.js"
  };
  this.mDeepLinkPaths = {
    mProfilePath : "profile",
    mRegionPath : "region"
  };
  this.mLocaleString = {
    kNotInGame : new scrui.cLocaleString("GameEntry.json",
      "0x0e2e5ea0"),
    kPlayingInRegion : new scrui.cLocaleString("GameEntry.json", "0x0e2e5eb8"),
    kPlayingTutorial : new scrui.cLocaleString("GameEntry.json", "0x0f2de187"),
    kLastOnline : new scrui.cLocaleString("GameEntry.json", "0x60a63dcf"),
    kSearchingUserMsg : new scrui.cLocaleString("GameEntry.json", "0x61dc4334"),
    kSearchResultsMsg : new scrui.cLocaleString("GameEntry.json", "0xa788a5b5"),
    kString_Error : new scrui.cLocaleString("GameEntry.json", "0x70192415"),
    kString_AjaxErrorMsg : new scrui.cLocaleString("GameEntry.json",
      "0x6b51b2d3"),
    kOnlineTitle : new scrui.cLocaleString("GameEntry.json", "0x0eafb79f"),
    kOfflineTitle : new scrui.cLocaleString("GameEntry.json", "0x0eafb7b5"),
    kRequestsTitle : new scrui.cLocaleString("GameEntry.json", "0x0eb20efa"),
    kNoFriendsOnline : new scrui.cLocaleString("GameEntry.json", "0x0eb4aedf"),
    kNoFriendsOffline : new scrui.cLocaleString("GameEntry.json", "0x0eb4aeec"),
    kRequestPending : new scrui.cLocaleString("GameEntry.json", "0x0eba39c1"),
    kSendRequest : new scrui.cLocaleString("GameEntry.json", "0xe4ebff09"),
    kErrorAddingFriend : new scrui.cLocaleString("GameEntry.json", "0x0eba1de8")
  };
  this.mAnimKeyframes = {
    FRIEND_LIST_CATEGORY_ANIM_HEIGHT : 246394486
  }
};
goog.inherits(simcity.cFriendListUIHandler, simcity.cPanel2D);
simcity.cFriendListUIHandler.kFriendItemsShownMax = 8;
simcity.cFriendListUIHandler.kOriginFriendChanged = 4156034237;
simcity.cFriendListUIHandler.kOriginRequestsChanged = 3955877007;
simcity.cFriendListUIHandler.prototype.Initialize = function (a) {
  this.Destroy();
  simcity.gFriendController.UpdateFriendRequestsFromServer();
  simcity.gFriendController.UpdatePendingRequestsFromServer();
  simcity.gFriendController.RequestListChangeSubscription();
  var b = this.mPageIDs;
  this.InitPanel(a);
  this.InitFriendsList();
  this.mInvitesPulseAnimation = gUIManager.FindAnimationByID(b.FRIEND_LIST_PULSE);
  this.ShowFriendInvitesPulse();
  this.AddEventListener(simcity.gEventTypes.CLICK, b.FRIEND_LIST_CATEGORY_CLOSE_BTN,
    this.RemoveCategory);
  this.AddEventListener(simcity.gEventTypes.CLICK, b.FRIEND_SEARCH_BUTTON, this.SearchUser);
  this.AddEventListener(simcity.gEventTypes.CLICK, b.SEARCH_RESULT_ADD_FRIEND_BUTTON, this.AddFriendFromSearchResultTile);
  this.AddEventListener(simcity.gEventTypes.CLICK, b.FRIEND_ACCEPT_BUTTON, this.AcceptFriendRequest);
  this.AddEventListener(simcity.gEventTypes.CLICK, b.FRIEND_IGNORE_BUTTON, this.IgnoreFriendRequest);
  this.AddEventListener(simcity.gEventTypes.CLICK, b.FRIEND_CHAT_BUTTON, this.OpenChat)
};
simcity.cFriendListUIHandler.prototype.Destroy = function () {
  this.mFriendAccordion && (this.mFriendAccordion.Destroy(), delete this.mFriendAccordion);
  delete this.mSearchResults;
  delete this.mRequestList;
  delete this.mNoFriends;
  delete this.mOnlineList;
  delete this.mOfflineList;
  delete this.mFriendAccordion
};
simcity.cFriendListUIHandler.prototype.InitFriendsList = function () {
  var a = this.mPageIDs;
  this.mFriendAccordion = new simcity.cAccordion(this.GetPanelControl(), this.mPageLayouts.FRIEND_CATEGORY_ITEM, a.FRIEND_LIST_CATEGORY_BTN, a.FRIEND_LIST_CATEGORY_ANIM);
  this.mFriendAccordion.CreateItem(this.mPageLayouts.FRIEND_LIST_HEADER);
  this.mSearchResults = this.mFriendAccordion.CreateItem();
  this.mRequestList = this.mFriendAccordion.CreateItem();
  this.mNoFriends = this.mFriendAccordion.CreateItem(this.mPageLayouts.FRIEND_MESSAGE_NO_FRIENDS);
  this.mOnlineList = this.mFriendAccordion.CreateItem();
  this.mOfflineList = this.mFriendAccordion.CreateItem();
  this.mSpinner = this.mFriendAccordion.CreateItem(this.mPageLayouts.FRIEND_LIST_FOOTER).FindControlByID(a.LOADING_SPINNER);
  a = this.mSearchResults.FindControlByID(a.FRIEND_LIST_CATEGORY_CLOSE_BTN);
  a.SetVisibility(!0);
  a.itemRef = this.mSearchResults;
  this.mSearchResults.SetVisibility(!1);
  this.mRequestList.SetVisibility(!1);
  this.mOnlineList.SetVisibility(!1);
  this.mOfflineList.SetVisibility(!1)
};
simcity.cFriendListUIHandler.prototype.RemoveCategory = function (a) {
  a.itemRef == this.mSearchResults && this.FindControlByID(this.mPageIDs.FRIEND_SEARCH_TEXT_INPUT).SetRawText("");
  a.itemRef.SetVisibility(!1)
};
simcity.cFriendListUIHandler.prototype.Show = function () {
  simcity.gFriendController.GetCachedPendingRequests();
  this.Private_UpdateRequests();
  this.Private_UpdateCurrentFriends();
  this.mOpenOnlineOnShow && (this.mFriendAccordion.OpenItem(this.mOnlineList), this.mOpenOnlineOnShow = !1);
  simcity.cPanel2D.prototype.Show.call(this)
};
simcity.cFriendListUIHandler.prototype.Private_SetFriendCategoryMessage = function (a, b) {
  var c = this.mPageIDs,
  d = a.FindControlByID(c.FRIEND_ITEM_SCROLL_AREA),
  e = d.FindControlByID(c.FRIEND_ITEM_LIST);
  a.bufferedScroller && (a.bufferedScroller.Destroy(), delete a.bufferedScroller);
  e.DestroyChildren();
  var f = gUIManager.LoadLayout(this.mPageLayouts.FRIEND_MESSAGE_ITEM, e);
  f.FindControlByID(c.MESSAGE_TEXT).SetLocaleText(b);
  var g = a.FindControlByID(c.FRIEND_LIST_CATEGORY_BTN).mHeight,
  g = f.mHeight + g;
  a.isOpen && a.SetHeight(g);
  e.SetOverflowType(scrui.cControlBase.kOverflowTypeHidden);
  e.SetHeight(f.mHeight);
  d.SetOverflowType(scrui.cControlBase.kOverflowTypeHidden);
  a.FindAnimationByID(c.FRIEND_LIST_CATEGORY_ANIM).FindKeyFrameByID(this.mAnimKeyframes.FRIEND_LIST_CATEGORY_ANIM_HEIGHT).mValue = g
};
simcity.cFriendListUIHandler.prototype.IsPointInAccordion = function (a, b) {
  return !this.mFriendAccordion || !this.mShown ? !1 : this.mFriendAccordion.IsPointInAccordion(a, b)
};
simcity.cFriendListUIHandler.prototype.ShowFriendInvitesPulse = function () {
  var a = simcity.gFriendController.GetCachedFriendRequests(),
  b = this;
  a && (a.length && !this.mPulseIntervalHandle) && (this.mPulseIntervalHandle = setInterval(function () {
        b.mInvitesPulseAnimation && (b.mInvitesPulseAnimation.Reset(), b.mInvitesPulseAnimation.Start(scrui.cAnimation.kPlayForward))
      }, this.kPulseIntervalLength))
};
simcity.cFriendListUIHandler.prototype.StopFriendInvitesPulse = function () {
  this.mInvitesPulseAnimation.Stop();
  this.mInvitesPulseAnimation.Reset();
  this.mPulseIntervalHandle && (clearInterval(this.mPulseIntervalHandle), this.mPulseIntervalHandle = null)
};
simcity.cFriendListUIHandler.prototype.Private_FillFriendCategory = function (a, b, c) {
  b || (b = []);
  a.users = b;
  var d = this.mPageIDs,
  b = a.FindControlByID(d.FRIEND_ITEM_SCROLL_AREA),
  e = b.FindControlByID(d.FRIEND_ITEM_LIST);
  a.bufferedScroller || (a.bufferedScroller = new simcity.cBufferedListScroller(b, e, simcity.cFriendListUIHandler.kFriendItemsShownMax), a.bufferedScroller.Init(c));
  var f = a.bufferedScroller.GetItemHeight(),
  c = a.users.length * f,
  f = Math.min(c, simcity.cFriendListUIHandler.kFriendItemsShownMax * f);
  e.SetHeight(c);
  c > f ? b.SetOverflowType(scrui.cControlBase.kOverflowTypeScrollY) : b.SetOverflowType(scrui.cControlBase.kOverflowTypeHidden);
  e = a.FindControlByID(d.FRIEND_LIST_CATEGORY_BTN).mHeight;
  e = f + e;
  a.isOpen && a.SetHeight(e);
  a.FindAnimationByID(d.FRIEND_LIST_CATEGORY_ANIM).FindKeyFrameByID(this.mAnimKeyframes.FRIEND_LIST_CATEGORY_ANIM_HEIGHT).mValue = e;
  d = function () {
    a.bufferedScroller.PopulateItemScroll(a.users, function (a, b) {
      simcity.gFriendListUIHandler.Private_PopulateFriendItem(a, b)
    })
  };
  d();
  b.mRootElement.onscroll =
    d
};
simcity.cFriendListUIHandler.prototype.Private_PopulateFriendItem = scrui.Client_ProfZone("cFriendListUIHandler.Private_PopulateFriendItem", function (a, b) {
    if (!simcity.gUIToolbox.ShallowEquals(a.userInfo, b)) {
      a.userInfo = goog.object.clone(b);
      var c = this.mPageIDs,
      d = a.FindControlByID(c.FRIEND_AVATAR);
      d.SetWindowImage(null);
      simcity.gUIToolbox.SetAvatar(d, b.screenName);
      var e = [this.mDeepLinkPaths.mProfilePath, b.id].join();
      simcity.gDeepLinkManager.mDeepLink.WrapControl(d, e);
      e = !0 === b.isOnline || "true" === b.isOnline;
      if (simcity.gFriendController.IsLoggedInUsersFriend(b.id)) {
        var d =
          a.FindControlByID(c.SEARCH_RESULT_ADD_FRIEND_BUTTON),
        f = a.FindControlByID(c.FRIEND_CHAT_BUTTON);
        d && d.SetVisibility(!1);
        f && (b.nucleusId && e ? f.SetVisibility(!0) : f.SetVisibility(!1))
      } else
        d = a.FindControlByID(c.SEARCH_RESULT_ADD_FRIEND_BUTTON), f = a.FindControlByID(c.FRIEND_CHAT_BUTTON), d && (d.SetVisibility(!0), simcity.gFriendController.IsRequestPending(b.id) ? (d.SetEnabled(!1), d.SetTooltipLocaleText(this.mLocaleString.kRequestPending)) : (d.SetEnabled(!0), d.SetTooltipLocaleText(this.mLocaleString.kSendRequest))),
        f && f.SetVisibility(!1);
      d = a.FindControlByID(c.FRIEND_ENTRY_BUTTON);
      f = a.FindControlByID(c.FRIEND_STATUS_TEXT);
      d.SetEnabled(!1);
      b.inTutorial = void 0 != b.inTutorial ? simcity.gUIToolbox.ToBoolean(b.inTutorial) : 2 > b.tutorialState;
      var g = simcity.gUIToolbox.GetAvatarFrame(b, b.currentPlayingRegionId);
      a.FindControlByID(c.FRIEND_AVATAR_FRAME).SetWindowImage(g);
      e ? b.currentPlayingRegionId && b.currentPlayingRegionName ? b.inTutorial ? f && f.SetLocaleText(this.mLocaleString.kPlayingTutorial) : (f && f.SetLocaleText(this.mLocaleString.kPlayingInRegion, {
          regionName : b.currentPlayingRegionName
        }), e = [this.mDeepLinkPaths.mRegionPath, b.currentPlayingRegionId].join(), simcity.gDeepLinkManager.mDeepLink.WrapControl(d, e), d.SetEnabled("undefined" === typeof simcity.gGlobalUIHandler)) : f && f.SetLocaleText(this.mLocaleString.kNotInGame) : (e = simcity.gUIToolbox.PrettyDateUtcMs(b.lastLogin), f && f.SetLocaleText(this.mLocaleString.kLastOnline, {
          lastOnlineDate : e
        }));
      a.FindControlByID(c.FRIEND_NAME).SetRawText(b.screenName);
      a.user = b
    }
  });
simcity.cFriendListUIHandler.prototype.SearchUser = function () {
  var a = this.FindControlByID(this.mPageIDs.FRIEND_SEARCH_TEXT_INPUT).GetText();
  if (a) {
    delete this.mSearchTermCache;
    this.mSearchTermCache = null;
    this.mSearchResults.FindControlByID(this.mPageIDs.FRIEND_LIST_CATEGORY_TITLE).SetLocaleText(this.mLocaleString.kSearchingUserMsg);
    this.mFriendAccordion.CloseItem(this.mSearchResults);
    this.mSearchResults.SetVisibility(!0);
    var b = this;
    simcity.gFriendController.UserSearch(a, function (c) {
      c = c.users.strangers.sort();
      b.Private_ShowSearchResults(c, a)
    }, function () {
      b.Private_UserSearchErrorHandler()
    })
  }
};
simcity.cFriendListUIHandler.prototype.Private_UserSearchErrorHandler = function () {
  simcity.cLauncher3D && simcity.cLauncher3D.mDialogManager.ShowLocalizedModal(this.mLocaleString.kString_Error, this.mLocaleString.kString_AjaxErrorMsg)
};
simcity.cFriendListUIHandler.prototype.Private_ShowSearchResults = function (a, b) {
  this.mSearchTermCache = b;
  this.mSearchResults.SetVisibility(!0);
  this.Private_FillFriendCategory(this.mSearchResults, a, this.mPageLayouts.FRIEND_ITEM);
  var c = {
    numresults : a.length
  };
  this.mSearchResults.FindControlByID(this.mPageIDs.FRIEND_LIST_CATEGORY_TITLE).SetLocaleText(this.mLocaleString.kSearchResultsMsg, c);
  this.mFriendAccordion.OpenItem(this.mSearchResults)
};
simcity.cFriendListUIHandler.prototype.Private_UpdateRequests = function () {
  var a = this.mPageIDs,
  b = simcity.gFriendController.GetCachedFriendRequests();
  0 < b.length ? (this.mRequestList.SetVisibility(!0), this.Private_FillFriendCategory(this.mRequestList, b, this.mPageLayouts.FRIEND_REQUEST_ITEM), this.mRequestList.FindControlByID(a.FRIEND_LIST_CATEGORY_TITLE).SetLocaleText(this.mLocaleString.kRequestsTitle, {
      numrequests : b.length
    })) : this.mRequestList.SetVisibility(!1)
};
simcity.cFriendListUIHandler.prototype.Private_UpdateCurrentFriends = function () {
  var a = this.mPageIDs,
  b = simcity.gFriendController.GetOfflineFriends(),
  c = simcity.gFriendController.GetOnlineFriends();
  b || (b = []);
  c || (c = []);
  0 == b.length && 0 == c.length ? (this.mOfflineList.SetVisibility(!1), this.mOnlineList.SetVisibility(!1), b = simcity.gFriendController.IsFriendListFirstUpdate(), this.mSpinner && this.mSpinner.SetVisibility(b), this.mNoFriends.SetVisibility(!b), b = null == simcity.gFriendController.mFriendCache, this.mNoFriends.FindControlByID(a.LOAD_FAILED).SetVisibility(b),
    this.mNoFriends.FindControlByID(a.NO_FRIENDS).SetVisibility(!b)) : (this.mOfflineList.SetVisibility(!0), this.mOnlineList.SetVisibility(!0), this.mNoFriends.SetVisibility(!1), this.mSpinner && this.mSpinner.SetVisibility(!1), 0 == b.length ? this.Private_SetFriendCategoryMessage(this.mOfflineList, this.mLocaleString.kNoFriendsOffline) : this.Private_FillFriendCategory(this.mOfflineList, b, this.mPageLayouts.FRIEND_ITEM), this.mOfflineList.FindControlByID(a.FRIEND_LIST_CATEGORY_TITLE).SetLocaleText(this.mLocaleString.kOfflineTitle, {
      numoffline : b.length
    }), 0 == c.length ? this.Private_SetFriendCategoryMessage(this.mOnlineList, this.mLocaleString.kNoFriendsOnline) : this.Private_FillFriendCategory(this.mOnlineList, c, this.mPageLayouts.FRIEND_ITEM), this.mOnlineList.FindControlByID(a.FRIEND_LIST_CATEGORY_TITLE).SetLocaleText(this.mLocaleString.kOnlineTitle, {
      numonline : c.length
    }))
};
simcity.cFriendListUIHandler.prototype.AddFriendFromSearchResultTile = function (a) {
  a.SetEnabled(!1);
  var b = this,
  c = a.GetParentLayout().user;
  simcity.gFriendController.AddFriend(c.id, function () {
    var a = b.mSearchResults.users,
    e = a.indexOf(c);
    -1 != e && a.splice(e, 1);
    b.Private_ShowSearchResults(a, b.mSearchTermCache)
  }, function () {
    a.SetEnabled(!0);
    var c = {
      title : b.mLocaleString.kString_Error,
      message : b.mLocaleString.kErrorAddingFriend,
      buttons : [simcity.gDialog.kButtonOk]
    };
    simcity.cLauncher3D && simcity.cLauncher3D.mDialogManager.ShowPrompt(c)
  })
};
simcity.cFriendListUIHandler.prototype.HandleGameEvent = function (a, b) {
  switch (a) {
  case simcity.cFriendListUIHandler.kOriginFriendChanged:
    simcity.gFriendController.ProcessOriginFriendList(b);
    break;
  case simcity.cFriendListUIHandler.kOriginRequestsChanged:
    simcity.gFriendController.DoServerOriginSync()
  }
};
simcity.cFriendListUIHandler.prototype.HandleUIMessage = function (a, b, c) {
  simcity.cPanel2D.prototype.HandleUIMessage.apply(this, arguments);
  if (this.mFriendAccordion)
    switch (a) {
    case simcity.cFriendController.kMsgRequestsChanged:
      this.Private_UpdateRequests();
      this.ShowFriendInvitesPulse();
      break;
    case simcity.cFriendController.kMsgFriendsPresenceChanged:
    case simcity.cFriendController.kMsgFriendsChanged:
      this.Private_UpdateCurrentFriends()
    }
};
simcity.cFriendListUIHandler.prototype.AcceptFriendRequest = function (a) {
  var b = this,
  a = a.GetParentLayout().user;
  simcity.gFriendController.AcceptFriendRequest(a.id, function () {
    b.Private_UpdateRequests()
  }, function () {
    var a = {
      title : b.mLocaleString.kString_Error,
      message : b.mLocaleString.kErrorAddingFriend,
      buttons : [simcity.gDialog.kButtonOk]
    };
    simcity.cLauncher3D && simcity.cLauncher3D.mDialogManager.ShowPrompt(a)
  })
};
simcity.cFriendListUIHandler.prototype.IgnoreFriendRequest = function (a) {
  var b = this,
  a = a.GetParentLayout().user;
  simcity.gFriendController.IgnoreFriendRequest(a.id, function () {
    b.Private_UpdateRequests()
  })
};
simcity.cFriendListUIHandler.prototype.OpenChat = function (a) {
  a = a.GetParentLayout().user;
  simcity.cOriginUtilities.OpenIgoChat(a.nucleusId)
};
simcity.gFriendListUIHandler = new simcity.cFriendListUIHandler;
simcity.SVGRingUtils = {};
simcity.cSVGRingsUtils = function () {};
simcity.cSVGRingsUtils.prototype.RadArc = function (a, b, c, d, e, f, g) {
  var h = null,
  i = !1,
  a = isNaN(a) ? 0 : a,
  b = isNaN(b) ? 0 : b;
  a > b && (i = !0, h = a, a = b, b = h);
  var j = this.data("icon") || null,
  h = 360 / c * a,
  k = (90 - h) * Math.PI / 180,
  l = d + f * Math.cos(k),
  k = e - f * Math.sin(k),
  m = 360 / c * b,
  n = (90 - m) * Math.PI / 180,
  p = d + f * Math.cos(n),
  n = e - f * Math.sin(n),
  q = f - g,
  o = (90 - 360 / c * b) * Math.PI / 180,
  r = d + q * Math.cos(o),
  o = e - q * Math.sin(o),
  s = (90 - 360 / c * a) * Math.PI / 180,
  t = d + q * Math.cos(s),
  s = e - q * Math.sin(s);
  if (j && "object" == typeof j) {
    var u = j.attr("width");
    m - h > u ? (j.show(), a = 360 / c *
        (Math.ceil(a + b) / 2), g = f - g / 2, a = (90 - a) * Math.PI / 180, d = d + g * Math.cos(a) - u / 2, e = e - g * Math.sin(a) - u / 2, j.attr({
        x : d,
        y : e
      })) : j.hide()
  }
  e = "";
  e = i ? [["M", l, k], ["A", f, f, 0,  + (180 < h), 0, p, n], ["L", r, o], ["A", q, q, 0,  + (180 < h), 1, t, s], ["L", l, k]] : 50 > b ? [["M", l, k], ["A", f, f, 1,  + (180 > h), 0, p, n], ["L", r, o], ["A", q, q, 1,  + (180 > h), 1, t, s], ["L", l, k]] : [["M", l, k], ["A", f, f, 1,  + (180 < h), 0, p, n], ["L", r, o], ["A", q, q, 1,  + (180 < h), 1, t, s], ["L", l, k]];
  return {
    path : e
  }
};
simcity.cSVGRingsUtils.prototype.SimpleArc = function (a, b, c, d, e, f, g) {
  var h = this.data("icon") || null;
  if (!isNaN(a) && !isNaN(b) && !isNaN(c)) {
    var i = 360 / c * a,
    j = (90 - i) * Math.PI / 180,
    k = d + f * Math.cos(j),
    j = e - f * Math.sin(j),
    l = 360 / c * b,
    m = (90 - l) * Math.PI / 180,
    n = d + f * Math.cos(m),
    m = e - f * Math.sin(m),
    p = f + g,
    q = (90 - 360 / c * b) * Math.PI / 180,
    o = d + p * Math.cos(q),
    q = e - p * Math.sin(q),
    r = (90 - 360 / c * a) * Math.PI / 180,
    s = d + p * Math.cos(r),
    r = e - p * Math.sin(r);
    if (h && "object" == typeof h) {
      var t = h.attr("width");
      3.2 * (l - i) > t ? (h.show(), c = 360 / c * (Math.ceil(a + b) / 2), g =
          f + g / 2, c = (90 - c) * Math.PI / 180, d = d + g * Math.cos(c) - t / 2, e = e - g * Math.sin(c) - t / 2, h.animate({
          x : d,
          y : e
        }, 10, "linear")) : h.hide()
    }
    h = [];
    h = 50 < a || 50 > a && 50 <= b - a ? [["M", k, j], ["A", f, f, 0,  + (180 > i), 1, n, m], ["L", o, q], ["A", p, p, 0,  + (180 > i), 0, s, r], ["L", k, j]] : [["M", k, j], ["A", f, f, 0,  + (180 < i), 1, n, m], ["L", o, q], ["A", p, p, 0,  + (180 < i), 0, s, r], ["L", k, j]];
    return {
      path : h
    }
  }
};
simcity.cSVGRingsUtils.prototype.HideArc = function (a) {
  var b = this.data("icon") || null;
  a ? (b && b.attr({
      opacity : 0
    }), this.hide()) : (b && b.attr({
      opacity : 1
    }), this.show());
  return null
};
simcity.gSVGRingsUtils = new simcity.cSVGRingsUtils;
simcity.ReportContentUIHandler = {};
simcity.cReportContentUIHandler = function () {
  this.mSelectedRadioButton = this.mRootLayout = this.mParentControl = null;
  this.mPageIDs = {
    ROOT : 235131228,
    REPORT_TYPE_TEXT : 235057652,
    REPORT_TYPE_RADIO : 235057655,
    REPORT_DESC : 235061352,
    REPORT_BUTTON : 235061341,
    CATEGORY_TYPE_PANEL : 235071868,
    CANCEL_BUTTON : 235061345,
    CLOSE_BUTTON : 240419370,
    REQUIRED_TEXT : 235142526,
    REPORT_TITLE_NAME : 236276280,
    REPORT_TITLE : 240944879
  };
  this.mPageLayouts = {
    REPORT_WINDOW : "Layouts/GlobalUI/ReportContent.js",
    CATEGORY_TYPE_LAYOUT : "Layouts/GlobalUI/ReportContentType.js"
  };
  this.kLocaleStrings = {
    kReportCityName : new scrui.cLocaleString("GameEntry.json", "0x0e5c822f"),
    kReportRegionName : new scrui.cLocaleString("GameEntry.json", "0x0e5c8253"),
    kReportWallMessage : new scrui.cLocaleString("GameEntry.json", "0x98c8de83"),
    kReportUserMessage : new scrui.cLocaleString("GameEntry.json", "0x3fc598dc"),
    kRequiredFields : new scrui.cLocaleString("GameEntry.json", "0x0e5c90db")
  };
  this.mReportTypes = {
    CITY_NAME : "CITY",
    REGION_NAME : "REGION",
    CHAT : "CHAT"
  };
  this.mCityReportCategoryTypes = [{
      id : "Hatespeech",
      label : "0x0e5c928c"
    }, {
      id : "VulgarContent",
      label : "0x0e5c929e"
    }, {
      id : "VulgarLanguage",
      label : "0x0e5c92b0"
    }, {
      id : "OffensiveContent",
      label : "0x0e98d732"
    }
  ];
  this.mRegionReportCategoryTypes = [{
      id : "Harassment",
      label : "0x7d264c81"
    }, {
      id : "OffensiveContent",
      label : "0x32aa05fd"
    }, {
      id : "Hatespeech",
      label : "0x0e5c928c"
    }, {
      id : "VulgarContent",
      label : "0x0e5c929e"
    }, {
      id : "VulgarLanguage",
      label : "0x0e5c92b0"
    }
  ];
  this.mReportDetails = {
    petitionerPersona : null,
    boxId : 0,
    boxName : null,
    defaultName : null,
    targetUserId : 0,
    targetUserPersona : null,
    messageId : 0,
    reportType : null,
    description : null,
    type : null
  };
  this.mServiceUrls = {
    REPORT_NAME : "/gpsEventService/reportAbuseForName",
    REPORT_CHAT : "/gpsEventService/reportAbuseForRegionWall",
    REPORT_BOX_LAYOUT : "/gpsEventService/reportAbuseForBoxLayout"
  }
};
goog.inherits(simcity.cReportContentUIHandler, scrui.cUIHandler);
simcity.cReportContentUIHandler.prototype.Initialize = function (a) {
  this.mParentControl = a;
  for (var b in this.mPageLayouts)
    gUIManager.CacheLayout(this.mPageLayouts[b]);
  this.mRootLayout || (this.mRootLayout = gUIManager.LoadLayout(this.mPageLayouts.REPORT_WINDOW, a))
};
simcity.cReportContentUIHandler.prototype.Show = function (a) {
  this.mReportDetails = a;
  this.mRootLayout.FindControlByID(this.mPageIDs.REPORT_DESC).SetText("");
  this.mRootLayout.FindControlByID(this.mPageIDs.REPORT_TITLE_NAME).SetText("");
  this.mRootLayout.FindControlByID(this.mPageIDs.REQUIRED_TEXT).SetVisibility(!1);
  this.mRootLayout.SetVisibility(!0);
  this.mParentControl.SetVisibility(!0);
  if (a.reportType) {
    var a = this.mReportDetails,
    b = "",
    c = "",
    d = null;
    switch (a.reportType) {
    case this.mReportTypes.CITY_NAME:
      b = this.kLocaleStrings.kReportCityName;
      c = a.boxName;
      this.mRootLayout.FindControlByID(this.mPageIDs.REPORT_TITLE).SetLocaleText(b);
      this.mRootLayout.FindControlByID(this.mPageIDs.REPORT_TITLE_NAME).SetText(c);
      break;
    case this.mReportTypes.REGION_NAME:
      b = this.kLocaleStrings.kReportRegionName;
      c = a.boxName;
      this.mRootLayout.FindControlByID(this.mPageIDs.REPORT_TITLE).SetLocaleText(b);
      this.mRootLayout.FindControlByID(this.mPageIDs.REPORT_TITLE_NAME).SetText(c);
      break;
    case this.mReportTypes.CHAT:
      b = this.kLocaleStrings.kReportWallMessage,
      c = this.kLocaleStrings.kReportUserMessage,
      d = {
        screenName : a.targetUserPersona
      },
      this.mRootLayout.FindControlByID(this.mPageIDs.REPORT_TITLE).SetLocaleText(b),
      this.mRootLayout.FindControlByID(this.mPageIDs.REPORT_TITLE_NAME).SetLocaleText(c, d)
    }
  }
  this.ShowReportOptions();
  var e = this;
  simcity.gEventManager.AddEventListener(simcity.gEventTypes.CLICK, this.mPageIDs.REPORT_TYPE_RADIO, function (a) {
    e.ToggleReportType(a)
  });
  simcity.gEventManager.AddEventListener(simcity.gEventTypes.CLICK, this.mPageIDs.REPORT_BUTTON, function (a) {
    e.SubmitReportForm(a)
  });
  simcity.gEventManager.AddEventListener(simcity.gEventTypes.CLICK,
    this.mPageIDs.CANCEL_BUTTON, function (a) {
    e.Hide(a)
  });
  simcity.gEventManager.AddEventListener(simcity.gEventTypes.CLICK, this.mPageIDs.CLOSE_BUTTON, function (a) {
    e.Hide(a)
  })
};
simcity.cReportContentUIHandler.prototype.ShowReportOptions = function () {
  var a = this.mRootLayout.FindControlByID(this.mPageIDs.CATEGORY_TYPE_PANEL),
  b = 0,
  c = null,
  c = this.mReportDetails.reportType == this.mReportTypes.CITY_NAME ? this.mCityReportCategoryTypes : this.mRegionReportCategoryTypes;
  a && a.DestroyChildren();
  for (var d = 0; d < c.length; d++) {
    var e = c[d],
    f = gUIManager.LoadLayout(this.mPageLayouts.CATEGORY_TYPE_LAYOUT, a),
    g = new scrui.cLocaleString("GameEntry.json", e.label, "");
    f.FindControlByID(this.mPageIDs.REPORT_TYPE_TEXT).SetLocaleText(g);
    f.FindControlByID(this.mPageIDs.REPORT_TYPE_RADIO).id = e.id;
    0 !== d && (b += f.mHeight);
    f.SetPosition(10, b)
  }
};
simcity.cReportContentUIHandler.prototype.Hide = function () {
  simcity.gEventManager.RemoveEventListener(simcity.gEventTypes.CLICK, this.mPageIDs.REPORT_TYPE_RADIO);
  simcity.gEventManager.RemoveEventListener(simcity.gEventTypes.CLICK, this.mPageIDs.REPORT_BUTTON);
  simcity.gEventManager.RemoveEventListener(simcity.gEventTypes.CLICK, this.mPageIDs.CANCEL_BUTTON);
  simcity.gEventManager.RemoveEventListener(simcity.gEventTypes.CLICK, this.mPageIDs.CLOSE_BUTTON);
  this.mRootLayout.SetVisibility(!1);
  this.mParentControl.SetVisibility(!1)
};
simcity.cReportContentUIHandler.prototype.SubmitReportForm = function () {
  var a = this,
  b = a.mRootLayout.FindControlByID(a.mPageIDs.REPORT_DESC).GetText();
  if (this.mSelectedRadioButton && b) {
    this.mRootLayout.FindControlByID(this.mPageIDs.REQUIRED_TEXT).SetVisibility(!1);
    var c = a.mReportDetails;
    c.description = b;
    c.type = this.mSelectedRadioButton;
    c.reportType == this.mReportTypes.CHAT ? this.SubmitReportWallMessage(c, function (b) {
      a.SubmitReportCallback(b)
    }, function (b) {
      a.ReportErrorCallback(b)
    }) : this.SubmitReportContent(c,
      function (b) {
      a.SubmitReportCallback(b)
    }, function (b) {
      a.ReportErrorCallback(b)
    })
  } else
    gUIManager.FindControlByID(a.mPageIDs.REQUIRED_TEXT).SetLocaleText(a.kLocaleStrings.kRequiredFields), this.mRootLayout.FindControlByID(this.mPageIDs.REQUIRED_TEXT).SetVisibility(!0)
};
simcity.cReportContentUIHandler.prototype.SubmitReportContent = function (a, b, c) {
  var d = scrui.GetRestPath().replace("/simcity/rest", "/citylog/json");
  if (a) {
    var e = null,
    e = a.reportType == this.mReportTypes.CITY_NAME && "OffensiveContent" == a.type ? d + this.mServiceUrls.REPORT_BOX_LAYOUT : a.reportType == this.mReportTypes.CITY_NAME || a.reportType == this.mReportTypes.REGION_NAME ? d + this.mServiceUrls.REPORT_NAME : d + this.mServiceUrls.REPORT_CHAT;
    scrui.XHR.Request({
      url : e,
      params : [["petitionerPersona", a.petitionerPersona], ["boxId",
          a.boxId], ["boxName", a.boxName], ["defaultName", a.defaultName], ["targetUserId", a.targetUserId], ["targetUserPersona", a.targetUserPersona], ["reportType", a.type], ["description", a.description], ["boxType", a.reportType]],
      onSuccess : function (a) {
        (a = a.json.gpsServiceResponse) && "success" == a.status ? "function" == typeof b && b(a) : "function" == typeof c && c(a)
      },
      onError : function (a) {
        "function" == typeof c && c(a)
      },
      method : "get"
    })
  }
};
simcity.cReportContentUIHandler.prototype.SubmitReportWallMessage = function (a, b, c) {
  var d = scrui.GetRestPath().replace("/simcity/rest", "/citylog/json");
  a && (d += this.mServiceUrls.REPORT_CHAT, scrui.XHR.Request({
      url : d,
      params : [["petitionerPersona", a.petitionerPersona], ["reportType", a.type], ["targetUserId", a.targetUserId], ["targetUserPersona", a.targetUserPersona], ["boxId", a.boxId], ["boxType", "region"], ["messageId", a.messageId], ["description", a.description]],
      onSuccess : function (a) {
        (a = a.json.gpsServiceResponse) &&
        "success" == a.status ? "function" == typeof b && b(a) : "function" == typeof c && c(a)
      },
      onError : function (a) {
        "function" == typeof c && c(a)
      },
      method : "get"
    }))
};
simcity.cReportContentUIHandler.prototype.SubmitReportCallback = function (a) {
  this.mRootLayout.FindControlByID(this.mPageIDs.REQUIRED_TEXT).SetVisibility(!0);
  this.mRootLayout.FindControlByID(this.mPageIDs.REQUIRED_TEXT).SetText(a.textResult);
  this.Hide()
};
simcity.cReportContentUIHandler.prototype.ReportErrorCallback = function (a) {
  if (a && a.textResult && "fail" == a.status) {
    var b = this.mRootLayout.FindControlByID(this.mPageIDs.REQUIRED_TEXT);
    b.SetText(a.textResult);
    b.SetVisibility(!0)
  }
};
simcity.cReportContentUIHandler.prototype.ToggleReportType = function (a) {
  this.mSelectedRadioButton = a.mIsSelected ? a.id : null
};
simcity.databindings.DataBindingsImportExport = {};
simcity.kImportExportCoal = {
  resourceName : new scrui.cLocaleString("Resources.json", "0xcec5890c", "kImportExportCoal"),
  resourceID : simcity.kResourceIDCoal,
  importSwitchResourceID : simcity.kResourceIDGlobalMarketImportSwitchCoal,
  storageSwitchResourceID : simcity.kResourceIDGlobalMarketStorageSwitchCoal,
  amountText : new scrui.cLocaleString("BuildingRollover.json", "0x0dfc2b20"),
  darkIconPath : "Graphics/Icons/TradeIcons/icn-trade-coal.png",
  lightIconPath : "Graphics/Icons/TradeIcons/icn-trade-coal-white.png",
  sellPrice : simcity.kPropscCoalBuyPrice,
  buyPrice : simcity.kPropscCoalBuyPrice,
  formatType : 3209013327,
  historyID : "coal"
};
simcity.kImportExportOreRaw = {
  resourceName : new scrui.cLocaleString("Resources.json", "0x96cf3b07", "kImportExportOreRaw"),
  resourceID : simcity.kResourceIDOreRaw,
  importSwitchResourceID : simcity.kResourceIDGlobalMarketImportSwitchOreRaw,
  storageSwitchResourceID : simcity.kResourceIDGlobalMarketStorageSwitchOreRaw,
  amountText : new scrui.cLocaleString("BuildingRollover.json", "0x0dfc2b20"),
  darkIconPath : "Graphics/Icons/TradeIcons/icn-trade-ore.png",
  lightIconPath : "Graphics/Icons/TradeIcons/icn-trade-ore-white.png",
  sellPrice : simcity.kPropscOreRawBuyPrice,
  buyPrice : simcity.kPropscOreRawBuyPrice,
  formatType : 3209013327,
  historyID : "OreRaw"
};
simcity.kImportExportMetal = {
  resourceName : new scrui.cLocaleString("Resources.json", "0x9375c65e", "kImportExportMetal"),
  resourceID : simcity.kResourceIDMetal,
  importSwitchResourceID : simcity.kResourceIDGlobalMarketImportSwitchMetal,
  storageSwitchResourceID : simcity.kResourceIDGlobalMarketStorageSwitchMetal,
  amountText : new scrui.cLocaleString("BuildingRollover.json", "0x0dfc2b20"),
  darkIconPath : "Graphics/Icons/TradeIcons/icn-trade-metal.png",
  lightIconPath : "Graphics/Icons/TradeIcons/icn-trade-metal-white.png",
  sellPrice : simcity.kPropscMetalBuyPrice,
  buyPrice : simcity.kPropscMetalBuyPrice,
  formatType : 3209013327,
  historyID : "Metal"
};
simcity.kImportExportAlloy = {
  resourceName : new scrui.cLocaleString("Resources.json", "0x1e16cfe6", "kImportExportAlloy"),
  resourceID : simcity.kResourceIDAlloy,
  importSwitchResourceID : simcity.kResourceIDGlobalMarketImportSwitchAlloy,
  storageSwitchResourceID : simcity.kResourceIDGlobalMarketStorageSwitchAlloy,
  amountText : new scrui.cLocaleString("BuildingRollover.json", "0x0dfc2b20"),
  darkIconPath : "Graphics/Icons/TradeIcons/icn-trade-alloy.png",
  lightIconPath : "Graphics/Icons/TradeIcons/icn-trade-alloy-white.png",
  sellPrice : simcity.kPropscAlloyBuyPrice,
  buyPrice : simcity.kPropscAlloyBuyPrice,
  formatType : 3209013327,
  historyID : "Alloy"
};
simcity.kImportExportFuel = {
  resourceName : new scrui.cLocaleString("Resources.json", "0x9ea37dd1", "kImportExportFuel"),
  resourceID : simcity.kResourceIDFuel,
  importSwitchResourceID : simcity.kResourceIDGlobalMarketImportSwitchFuel,
  storageSwitchResourceID : simcity.kResourceIDGlobalMarketStorageSwitchFuel,
  amountText : new scrui.cLocaleString("BuildingRollover.json", "0x0dfc2b22"),
  darkIconPath : "Graphics/Icons/TradeIcons/icn-trade-fuel.png",
  lightIconPath : "Graphics/Icons/TradeIcons/icn-trade-fuel-white.png",
  sellPrice : simcity.kPropscFuelBuyPrice,
  buyPrice : simcity.kPropscFuelBuyPrice,
  formatType : 2833605196,
  historyID : "Fuel"
};
simcity.kImportExportPlastic = {
  resourceName : new scrui.cLocaleString("Resources.json", "0x27638c5b", "kImportExportPlastic"),
  resourceID : simcity.kResourceIDPlastic,
  importSwitchResourceID : simcity.kResourceIDGlobalMarketImportSwitchPlastic,
  storageSwitchResourceID : simcity.kResourceIDGlobalMarketStorageSwitchPlastic,
  amountText : new scrui.cLocaleString("BuildingRollover.json", "0x0dfc2b21"),
  darkIconPath : "Graphics/Icons/TradeIcons/icn-trade-plastic.png",
  lightIconPath : "Graphics/Icons/TradeIcons/icn-trade-plastic-white.png",
  sellPrice : simcity.kPropscPlasticBuyPrice,
  buyPrice : simcity.kPropscPlasticBuyPrice,
  formatType : 1821810158,
  historyID : "Plastic"
};
simcity.kImportExportElectronics = {
  resourceName : new scrui.cLocaleString("Resources.json", "0x0dfc0e9f", "kImportExportElectronics"),
  resourceID : simcity.kResourceIDElectronics,
  importSwitchResourceID : simcity.kResourceIDGlobalMarketImportSwitchElectronics,
  storageSwitchResourceID : simcity.kResourceIDGlobalMarketStorageSwitchElectronics,
  amountText : new scrui.cLocaleString("BuildingRollover.json", "0x0dfc2b21"),
  darkIconPath : "Graphics/Icons/TradeIcons/icn-trade-electronics.png",
  lightIconPath : "Graphics/Icons/TradeIcons/icn-trade-electronics-white.png",
  sellPrice : simcity.kPropscElectronicsBuyPrice,
  buyPrice : simcity.kPropscElectronicsBuyPrice,
  formatType : 1821810158,
  historyID : "Electronics"
};
simcity.kImportExportComputer = {
  resourceName : new scrui.cLocaleString("Resources.json", "0x8da94c6a", "kImportExportComputer"),
  resourceID : simcity.kResourceIDComputer,
  importSwitchResourceID : simcity.kResourceIDGlobalMarketImportSwitchComputer,
  storageSwitchResourceID : simcity.kResourceIDGlobalMarketStorageSwitchComputer,
  amountText : new scrui.cLocaleString("BuildingRollover.json", "0x0dfc2b21"),
  darkIconPath : "Graphics/Icons/TradeIcons/icn-trade-computer.png",
  lightIconPath : "Graphics/Icons/TradeIcons/icn-trade-computer-white.png",
  sellPrice : simcity.kPropscComputerBuyPrice,
  buyPrice : simcity.kPropscComputerBuyPrice,
  formatType : 1821810158,
  historyID : "Computer"
};
simcity.kImportExportTelevision = {
  resourceName : new scrui.cLocaleString("Resources.json", "0xb8b5dd59", "kImportExportTelevision"),
  resourceID : simcity.kResourceIDTelevision,
  importSwitchResourceID : simcity.kResourceIDGlobalMarketImportSwitchTelevision,
  storageSwitchResourceID : simcity.kResourceIDGlobalMarketStorageSwitchTelevision,
  amountText : new scrui.cLocaleString("BuildingRollover.json", "0x0dfc2b21"),
  darkIconPath : "Graphics/Icons/TradeIcons/icn-trade-television.png",
  lightIconPath : "Graphics/Icons/TradeIcons/icn-trade-television-white.png",
  sellPrice : simcity.kPropscTelevisionBuyPrice,
  buyPrice : simcity.kPropscTelevisionBuyPrice,
  formatType : 1821810158,
  historyID : "Television"
};
simcity.kImportExportOilCrude = {
  resourceName : new scrui.cLocaleString("Resources.json", "0xbf75dc04", "kImportExportOilCrude"),
  resourceID : simcity.kResourceIDOilCrude,
  importSwitchResourceID : simcity.kResourceIDGlobalMarketImportSwitchOilCrude,
  storageSwitchResourceID : simcity.kResourceIDGlobalMarketStorageSwitchOilCrude,
  amountText : new scrui.cLocaleString("BuildingRollover.json", "0x0dfc2b22"),
  darkIconPath : "Graphics/Icons/TradeIcons/icn-trade-oil.png",
  lightIconPath : "Graphics/Icons/TradeIcons/icn-trade-oil-white.png",
  sellPrice : simcity.kPropscOilCrudeBuyPrice,
  buyPrice : simcity.kPropscOilCrudeBuyPrice,
  formatType : 2833605196,
  historyID : "OilCrude"
};
simcity.kImportExportDataBindings = {};
simcity.kImportExportDataBindings[scrui.IDFromName("CoalImExStorage")] = simcity.kImportExportCoal;
simcity.kImportExportDataBindings[scrui.IDFromName("OreRawStorage")] = simcity.kImportExportOreRaw;
simcity.kImportExportDataBindings[scrui.IDFromName("MetalStorage")] = simcity.kImportExportMetal;
simcity.kImportExportDataBindings[scrui.IDFromName("AlloyStorage")] = simcity.kImportExportAlloy;
simcity.kImportExportDataBindings[scrui.IDFromName("FuelStorage")] = simcity.kImportExportFuel;
simcity.kImportExportDataBindings[scrui.IDFromName("PlasticStorage")] = simcity.kImportExportPlastic;
simcity.kImportExportDataBindings[scrui.IDFromName("ElectronicsStorage")] = simcity.kImportExportElectronics;
simcity.kImportExportDataBindings[scrui.IDFromName("ComputerStorage")] = simcity.kImportExportComputer;
simcity.kImportExportDataBindings[scrui.IDFromName("TelevisionStorage")] = simcity.kImportExportTelevision;
simcity.kImportExportDataBindings[scrui.IDFromName("OilCrudeStorage")] = simcity.kImportExportOilCrude;
simcity.PopupMenu = {};
scrui.cPopupMenu = function () {
  this.UIHander = scrui.cUIHandler;
  this.UIHander();
  this.mItemRadius = this.mOriginY = this.mOriginX = 0;
  this.mItemInfo = [];
  this.mUnitRef = null
};
goog.inherits(scrui.cPopupMenu, scrui.cUIHandler);
scrui.cPopupMenu.kButtonID = 181820548;
scrui.cPopupMenu.kIconID = 181820561;
scrui.cPopupMenu.prototype.Init = function (a, b, c) {
  var d = b.length;
  this.mItemInfo = [];
  this.mUnitRef = c;
  var c = [],
  e = [];
  simcity.GenerateDataBindingQueries(b, c, null, e, !1, "initQueries");
  var f = this;
  simcity.RequestDataBindingData(c, b, e, !1, function (c) {
    for (var e = 0; e < d; ++e) {
      var i = b[e],
      j = c[e];
      if (!i.hasOwnProperty("initTest") || i.initTest(j)) {
        var k = gUIManager.LoadLayout(i.layoutPath, a),
        l = k.FindControlByID(scrui.cPopupMenu.kButtonID);
        if (i.hasOwnProperty("tooltipString")) {
          var m = i.tooltipString;
          l.SetTooltipLocaleText(new scrui.cLocaleString(m.tableID,
              m.stringID, m.placeholder))
        }
        if (i.hasOwnProperty("iconPath"))
          (m = k.FindControlByID(scrui.cPopupMenu.kIconID)) && m.SetWindowImage(i.iconPath);
        m = Math.max(k.mWidth, k.mHeight) / 2;
        f.mItemRadius = Math.max(f.mItemRadius, m);
        k = {
          dataBinding : i,
          layout : k,
          button : l
        };
        f.mItemInfo.push(k);
        i.hasOwnProperty("init") && i.init(k, j)
      }
    }
    f.UpdateItemPositions();
    gUIManager.RegisterUIHandler(f)
  })
};
scrui.cPopupMenu.prototype.Shutdown = function () {
  gUIManager.UnregisterUIHandler(this);
  for (var a = 0, b = this.mItemInfo.length; a < b; ++a) {
    var c = this.mItemInfo[a];
    c.layout.DestroyControl();
    c.layout = null;
    c.button = null;
    c.dataBinding = null
  }
  this.mItemInfo = null
};
scrui.cPopupMenu.prototype.ContainsButton = function (a) {
  for (var b = 0, c = this.mItemInfo.length; b < c; ++b)
    if (this.mItemInfo[b].button === a)
      return !0;
  return !1
};
scrui.cPopupMenu.prototype.SetPosition = function (a, b) {
  this.mOriginX = a;
  this.mOriginY = b;
  this.UpdateItemPositions()
};
scrui.cPopupMenu.prototype.UpdateItemPositions = function () {
  for (var a = 0, b = 0, c = this.mItemInfo.length; b < c; ++b)
    var d = this.mItemInfo[b], d = d.layout, a = a + d.mWidth;
  a = ((this.mItemInfo.length ? this.mItemInfo[0].layout.mParentControl.mWidth : 0) - a) / 2;
  b = 0;
  for (c = this.mItemInfo.length; b < c; ++b)
    d = this.mItemInfo[b], d = d.layout, d.SetPosition(a, d.mParentControl.mHeight - d.mHeight, d.mWidth, d.mHeight), a += d.mWidth
};
scrui.cPopupMenu.prototype.HandleUIMessage = function (a, b, c) {
  switch (a) {
  case scrui.kMsgTypeButtonClicked:
    if (b === scrui.cPopupMenu.kButtonID)
      for (var b = 0, d = this.mItemInfo.length; b < d; ++b)
        if (a = this.mItemInfo[b], a.button === c) {
          c.mButtonType === kButtonTypeToggle && (a.dataBinding.hasOwnProperty("onAudio") && c.mIsSelected ? simcity.SendSoundEvent(simcity.audio.kGlobalSoundObjectID, a.dataBinding.onAudio) : a.dataBinding.hasOwnProperty("offAudio") && !c.mIsSelected && simcity.SendSoundEvent(simcity.audio.kGlobalSoundObjectID,
              a.dataBinding.offAudio));
          c = a.dataBinding.closeMenu;
          a.dataBinding.onItemClicked(a);
          c && scrui.PostGameCommand(scrui.BuildCommand(["deselectUnit"]));
          break
        }
  }
};
simcity.BudgetCrisisUI = {};
simcity.cBudgetCrisisUI = function () {
  this.UIHandler = scrui.cUIHandler;
  this.UIHandler();
  this.budgetCrisisLayoutWindow = null;
  this.inBudgetCrisis = !1;
  this.collapseButton = this.budgetSlideAnimation = null
};
goog.inherits(simcity.cBudgetCrisisUI, scrui.cUIHandler);
simcity.cBudgetCrisisUI.kBudgetCrisisContainer = 247678304;
simcity.cBudgetCrisisUI.kBtnTurnOffToys = 213369345;
simcity.cBudgetCrisisUI.kBtnRaiseTaxes = 213369347;
simcity.cBudgetCrisisUI.kBtnTakeLoan = 213369348;
simcity.cBudgetCrisisUI.kBtnStartANewCity = 213369349;
simcity.cBudgetCrisisUI.kTxtSelectedAction = 247602675;
simcity.cBudgetCrisisUI.kLocaleTextTurnOffToys = "0x0ec1ecc1";
simcity.cBudgetCrisisUI.kLocaleTextRaiseTaxes = "0x0ec1ecc2";
simcity.cBudgetCrisisUI.kLocaleTextTakeLoan = "0x0ec1ecc3";
simcity.cBudgetCrisisUI.kLocaleTextStartANewCity = "0x0ec1ecc4";
simcity.cBudgetCrisisUI.kSlideAnimation = 247843314;
simcity.cBudgetCrisisUI.kCollapsedWindow = 247604911;
simcity.cBudgetCrisisUI.kMainWindow = 247606234;
simcity.cBudgetCrisisUI.kCongratsWindow = 247606807;
simcity.cBudgetCrisisUI.kCollapsedButton = 247844531;
simcity.cBudgetCrisisUI.kBtnCongratsOK = 205471161;
simcity.IsInBudgetCrisis = function () {
  return simcity.gGlobalUIHandler.mIsSpectatorMode ? !1 : simcity.gGlobalUIHandler.mBudgetCrisisUI.inBudgetCrisis
};
simcity.CheckBudgetCrisisBins = function () {
  var a = [scrui.BuildRequestQuery([simcity.kDataBinAmount, simcity.kResourceIDSimoleons]), scrui.BuildRequestQuery([simcity.kDataBinAmount, simcity.kResourceIDAdjustedExpenses])],
  b = 0,
  c = 0;
  scrui.RequestGameData(a, function (a) {
    b = a[0];
    c = a[1]
  });
  return 0 == b && 0 < c ? !0 : !1
};
simcity.cBudgetCrisisUI.prototype.Init = function () {
  this.budgetCrisisLayoutWindow = gUIManager.FindControlByID(simcity.cBudgetCrisisUI.kBudgetCrisisContainer);
  this.budgetSlideAnimation = gUIManager.FindAnimationByID(simcity.cBudgetCrisisUI.kSlideAnimation);
  this.collapseButton = this.budgetCrisisLayoutWindow.FindControlByID(simcity.cBudgetCrisisUI.kCollapsedButton);
  this.inBudgetCrisis = !1
};
simcity.cBudgetCrisisUI.prototype.HandleUIMessage = function (a, b) {
  switch (a) {
  case scrui.kMsgTypeButtonClicked:
    switch (b) {
    case simcity.cBudgetCrisisUI.kBtnRaiseTaxes:
      this.ShowRaiseTaxes();
      break;
    case simcity.cBudgetCrisisUI.kBtnTurnOffToys:
      this.ShowTurnOffToys();
      break;
    case simcity.cBudgetCrisisUI.kBtnTakeLoan:
      this.ShowTakeLoan();
      break;
    case simcity.cBudgetCrisisUI.kBtnStartANewCity:
      this.ShowStartANewCity();
      break;
    case simcity.cBudgetCrisisUI.kBtnCongratsOK:
      this.ShowBudgetCrisisUI(!1)
    }
  }
};
simcity.cBudgetCrisisUI.prototype.Update = scrui.Client_ProfZone("cBudgetCrisisUI.Update", function () {
    if (simcity.gGlobalUIHandler.mIsSpectatorMode)
      return !1;
    var a = this.inBudgetCrisis;
    this.inBudgetCrisis = simcity.CheckBudgetCrisisBins();
    a && !this.inBudgetCrisis ? (this.ShowCongrats(), scrui.PostGameCommand(scrui.BuildCommand(["budgetCrisisActive", "false"])), simcity.UnpauseGame(), simcity.GetSpeed3Button().SetEnabled(!0), simcity.GetSpeed2Button().SetEnabled(!0), simcity.GetSpeed1Button().SetEnabled(!0), simcity.GetPauseButton().SetEnabled(!0)) :
    !a && this.inBudgetCrisis && (simcity.gGlobalUIHandler.mRegionViewUIHandler.IsVisible() && (simcity.gGlobalUIHandler.mReturnToCityButton.SetSelected(!0), simcity.gGlobalUIHandler.mRegionViewUIHandler.OnReturnToCityButtonClicked()), this.budgetCrisisLayoutWindow.FindControlByID(simcity.cBudgetCrisisUI.kCollapsedWindow).SetVisibility(!1), this.budgetCrisisLayoutWindow.FindControlByID(simcity.cBudgetCrisisUI.kMainWindow).SetVisibility(!0), this.budgetCrisisLayoutWindow.FindControlByID(simcity.cBudgetCrisisUI.kCongratsWindow).SetVisibility(!1),
      this.ShowBudgetCrisisUI(!0), simcity.PauseGame(), simcity.gGlobalUIHandler.mSpeechBalloonHandler.ExitSpeechBalloon(null, !1, !0), scrui.PostGameCommand(scrui.BuildCommand(["budgetCrisisActive", "true"])), simcity.GetSpeed3Button().SetEnabled(!1), simcity.GetSpeed2Button().SetEnabled(!1), simcity.GetSpeed1Button().SetEnabled(!1), simcity.GetPauseButton().SetEnabled(!1))
  });
simcity.cBudgetCrisisUI.prototype.ShowBudgetCrisisUI = function (a) {
  this.budgetCrisisLayoutWindow.SetVisibility(a);
  this.budgetCrisisLayoutWindow.FindControlByID(simcity.cBudgetCrisisUI.kCollapsedWindow).SetVisibility(!1)
};
simcity.cBudgetCrisisUI.prototype.MinimizeBudgetCrisisUI = function () {
  this.collapseButton.SetSelected(!1);
  this.budgetCrisisLayoutWindow.FindControlByID(simcity.cBudgetCrisisUI.kCollapsedWindow).SetVisibility(!0)
};
simcity.cBudgetCrisisUI.prototype.ShowRaiseTaxes = function () {
  this.CloseToolsAndPanels();
  this.budgetCrisisLayoutWindow.FindControlByID(simcity.cBudgetCrisisUI.kTxtSelectedAction).SetLocaleText(new scrui.cLocaleString("GlobalUI.json", simcity.cBudgetCrisisUI.kLocaleTextRaiseTaxes, "Increase taxes!"));
  this.collapseButton.SetSelected(!0);
  this.MinimizeBudgetCrisisUI();
  gUIManager.FindControlByID(245433542).FindControlByID(simcity.kBtnIDBudget).SetSelected(!0)
};
simcity.cBudgetCrisisUI.prototype.ShowTurnOffToys = function () {
  this.CloseToolsAndPanels();
  this.budgetCrisisLayoutWindow.FindControlByID(simcity.cBudgetCrisisUI.kTxtSelectedAction).SetLocaleText(new scrui.cLocaleString("GlobalUI.json", simcity.cBudgetCrisisUI.kLocaleTextTurnOffToys, "Turn off some city buildings!"));
  this.collapseButton.SetSelected(!0);
  this.MinimizeBudgetCrisisUI();
  simcity.gGlobalUIHandler.mToolPaletteUIHandler.OpenToolPanelFromID(simcity.kCategoryIDCivic);
  simcity.gGlobalUIHandler.mLayerUIHandler.ActivateLayer(3831447942)
};
simcity.cBudgetCrisisUI.prototype.ShowTakeLoan = function () {
  this.CloseToolsAndPanels();
  this.budgetCrisisLayoutWindow.FindControlByID(simcity.cBudgetCrisisUI.kTxtSelectedAction).SetLocaleText(new scrui.cLocaleString("GlobalUI.json", simcity.cBudgetCrisisUI.kLocaleTextTakeLoan, "Take out a loan!"));
  this.collapseButton.SetSelected(!0);
  this.MinimizeBudgetCrisisUI();
  gUIManager.FindControlByID(245433542).FindControlByID(simcity.kBtnIDBudget).SetSelected(!0)
};
simcity.cBudgetCrisisUI.prototype.ShowStartANewCity = function () {
  this.budgetCrisisLayoutWindow.FindControlByID(simcity.cBudgetCrisisUI.kTxtSelectedAction).SetLocaleText(new scrui.cLocaleString("GlobalUI.json", simcity.cBudgetCrisisUI.kLocaleTextStartANewCity, "Start a new city!"));
  this.collapseButton.SetSelected(!0);
  this.MinimizeBudgetCrisisUI();
  simcity.gGlobalUIHandler.mRegionViewUIHandler.IsVisible() || (simcity.gGlobalUIHandler.mRegionViewUIHandler.EnterRegionView(), simcity.gGlobalUIHandler.mRegionViewUIHandler.OnShowRegionUI(),
    simcity.gGlobalUIHandler.mRegionCameraButton.SetSelected(!0))
};
simcity.cBudgetCrisisUI.prototype.ShowCongrats = function () {
  this.CloseToolsAndPanels();
  this.ShowBudgetCrisisUI(!1);
  this.ShowBudgetCrisisUI(!0);
  this.collapseButton.SetSelected(!1);
  this.budgetCrisisLayoutWindow.FindControlByID(simcity.cBudgetCrisisUI.kCollapsedWindow).SetVisibility(!1);
  this.budgetCrisisLayoutWindow.FindControlByID(simcity.cBudgetCrisisUI.kMainWindow).SetVisibility(!1);
  this.budgetCrisisLayoutWindow.FindControlByID(simcity.cBudgetCrisisUI.kCongratsWindow).SetVisibility(!0)
};
simcity.cBudgetCrisisUI.prototype.CloseToolsAndPanels = function () {
  simcity.gGlobalUIHandler.mRegionViewUIHandler.IsVisible() && (simcity.gGlobalUIHandler.mReturnToCityButton.SetSelected(!0), simcity.gGlobalUIHandler.mRegionViewUIHandler.OnReturnToCityButtonClicked());
  simcity.gGlobalUIHandler.mLayerUIHandler.DeactivateLayer();
  simcity.gGlobalUIHandler.mToolPaletteUIHandler.CloseEditorPanel();
  null !== simcity.gGlobalUIHandler.mToolPaletteUIHandler.mSelectedCategoryButton && simcity.gGlobalUIHandler.mToolPaletteUIHandler.CloseToolPanel();
  scrui.PostGameCommand(scrui.BuildCommand(["deselectTool"]));
  gUIManager.FindControlByID(simcity.kBtnIDBudget).SetSelected(!1);
  gUIManager.FindControlByID(simcity.kBtnIDPopulation).SetSelected(!1)
};
simcity.PieChart = {};
(function () {
  function a(a, b, e, f, g, h) {
    function i(a, b, c, d, e) {
      var f = Math.PI / 180,
      g = a + c * Math.cos(-d * f),
      h = a + c * Math.cos(-e * f),
      i = a + c / 2 * Math.cos( - (d + (e - d) / 2) * f),
      j = b + c * Math.sin(-d * f),
      k = b + c * Math.sin(-e * f),
      f = b + c / 2 * Math.sin( - (d + (e - d) / 2) * f),
      a = ["M", a, b, "L", g, j, "A", c, c, 0,  + (180 < Math.abs(e - d)), 1, h, k, "z"];
      a.middle = {
        x : i,
        y : f
      };
      return a
    }
    var h = h || {},
    j = [],
    k = a.set(),
    l = a.set(),
    m = a.set(),
    n = g.length,
    p = 0,
    q = 0;
    parseFloat(h.minPercent);
    l.covers = k;
    if (1 == n)
      m.push(a.circle(b, e, f).attr({
          fill : h.colors && h.colors[0] || this.colors[0],
          stroke : h.stroke ||
          "#fff",
          "stroke-width" : null == h.strokewidth ? 1 : h.strokewidth
        })), k.push(a.circle(b, e, f).attr(this.shim)), q = g[0], g[0] = {
        value : g[0],
        order : 0,
        valueOf : function () {
          return this.value
        }
      },
    h.href && h.href[0] && k[0].attr({
      href : h.href[0]
    }),
    m[0].middle = {
      x : b,
      y : e
    },
    m[0].mangle = 180;
    else {
      for (var o = 0; o < n; o++)
        0 === g[o] && (g[o] = 0.01), q += g[o], g[o] = {
          value : g[o],
          order : o,
          valueOf : function () {
            return this.value
          }
        };
      for (o = 0; o < n; o++) {
        var r = p - 360 * g[o] / q / 2;
        o || (p = 90 - r, r = p - 360 * g[o] / q / 2);
        var s = null != h.angleOffset ? h.angleOffset : 0;
        if (h.init)
          var t =
            i(b, e, 1, p + s, p - 360 * g[o] / q + s).join(",");
        var s = i(b, e, f, p + s, (p -= 360 * g[o] / q) + s),
        u = h.matchColors && !0 == h.matchColors ? g[o].order : o,
        u = a.path(h.init ? t : s).attr({
            fill : h.colors && h.colors[u] || this.colors[u] || "#666",
            stroke : h.stroke || "#fff",
            "stroke-width" : null == h.strokewidth ? 1 : h.strokewidth,
            "stroke-linejoin" : "round"
          });
        u.value = g[o];
        u.middle = s.middle;
        u.mangle = r;
        j.push(u);
        m.push(u);
        h.init && u.animate({
          path : s.join(",")
        }, +h.init - 1 || 1E3, ">")
      }
      for (o = 0; o < n; o++)
        u = a.path(j[o].attr("path")).attr(this.shim), h.href && h.href[o] &&
        u.attr({
          href : h.href[o]
        }), u.attr = function () {},
      k.push(u),
      m.push(u)
    }
    l.hover = function (a, c) {
      for (var c = c || function () {}, h = this, i = 0; i < n; i++)
        (function (i, j, k) {
          var l = {
            sector : i,
            cover : j,
            cx : b,
            cy : e,
            mx : i.middle.x,
            my : i.middle.y,
            mangle : i.mangle,
            r : f,
            value : g[k],
            total : q,
            label : h.labels && h.labels[k]
          };
          j.mouseover(function () {
            a.call(l)
          }).mouseout(function () {
            c.call(l)
          })
        })(m[i], k[i], i);
      return this
    };
    l.each = function (a) {
      for (var c = 0; c < n; c++) {
        var h = m[c];
        a.call({
          sector : h,
          cover : k[c],
          cx : b,
          cy : e,
          x : h.middle.x,
          y : h.middle.y,
          mangle : h.mangle,
          r : f,
          value : g[c],
          total : q,
          label : this.labels && this.labels[c]
        })
      }
      return this
    };
    l.click = function (a) {
      for (var c = this, h = 0; h < n; h++)
        (function (h, i, j) {
          var k = {
            sector : h,
            cover : i,
            cx : b,
            cy : e,
            mx : h.middle.x,
            my : h.middle.y,
            mangle : h.mangle,
            r : f,
            value : g[j],
            total : q,
            label : c.labels && c.labels[j]
          };
          i.click(function () {
            a.call(k)
          })
        })(m[h], k[h], h);
      return this
    };
    l.inject = function (a) {
      a.insertBefore(k[0])
    };
    if (h.legend) {
      o = h.legend;
      r = h.legendothers;
      t = h.legendmark;
      j = h.legendpos;
      s = b + f + f / 5;
      u = null != h.legendOffset ? e + h.legendOffset : e + 10;
      p = 0;
      o = o ||
        [];
      j = j && j.toLowerCase && j.toLowerCase() || "east";
      t = a[t && t.toLowerCase()] || "circle";
      l.labels = a.set();
      for (var v = 0; v < n; v++) {
        var x = m[v].attr("fill"),
        w = g[v].order;
        g[v].others && (o[w] = r || "Others");
        o[w] = this.labelise(o[w], g[v], q);
        l.labels.push(a.set());
        l.labels[v].push(a[t](s + 5, u, h.legendRadius || 5).attr({
            fill : x,
            stroke : "none"
          }));
        l.labels[v].push(x = a.text(s + 20, u, o[w] || g[w]).attr(this.txtattr).attr({
              cursor : "none",
              "font-size" : h.legendFont || 12,
              fill : h.legendcolor || "#000",
              "text-anchor" : "start"
            }));
        k[v].label = l.labels[v];
        p += x.getBBox().height;
        u += 1.2 * x.getBBox().height
      }
      a = l.labels.getBBox();
      l.labels.translate.apply(l.labels, {
        east : [0, -p / 2],
        west : [-a.width - 2 * f - 20, -a.height / 2],
        north : [-f - a.width / 2, -f - a.height - 10],
        south : [-f - a.width / 2, f + 1]
      }
        [j]);
      l.push(l.labels)
    }
    l.push(m, k);
    l.series = m;
    l.covers = k;
    return l
  }
  var b = function () {};
  b.prototype = Raphael.g;
  a.prototype = new b;
  Raphael.fn.piechart = function (b, d, e, f, g) {
    b = new a(this, b, d, e, f, g);
    b.hover(function () {
      this.sector.stop();
      this.sector.scale(1.1, 1.1, this.cx, this.cy);
      this.label && (this.label[0].stop(),
        this.label[0].attr({
          r : 7.5
        }), this.label[1].attr({
          "font-weight" : 800
        }))
    }, function () {
      this.sector.animate({
        transform : "s1 1 " + this.cx + " " + this.cy
      }, 500, "bounce");
      this.label && (this.label[0].animate({
          r : 5
        }, 500, "bounce"), this.label[1].attr({
          "font-weight" : 400
        }))
    });
    return b
  }
})();
simcity.databindings.DataBindingsRegionalAdvisors = {};
simcity.kRegionDataLayer_Workers = 1681645042;
simcity.kRegionDataLayer_WorkerLevels = [];
simcity.kRegionDataLayer_WorkerLevels[0] = 2017533386;
simcity.kRegionDataLayer_WorkerLevels[1] = 516088733;
simcity.kRegionDataLayer_WorkerLevels[2] = 3419053136;
simcity.kRegionDataLayer_Shoppers = 3106667129;
simcity.kRegionDataLayer_ShopperLevels = [];
simcity.kRegionDataLayer_ShopperLevels[0] = 1712426133;
simcity.kRegionDataLayer_ShopperLevels[1] = 2455408482;
simcity.kRegionDataLayer_ShopperLevels[2] = 781000183;
simcity.kRegionDataLayer_Freight = 4206887478;
simcity.kRegionDataLayer_FreightLevels = [];
simcity.kRegionDataLayer_FreightLevels[0] = 3061475479;
simcity.kRegionDataLayer_Students = 1972713909;
simcity.kRegionDataLayer_StudentLevels = [];
simcity.kRegionDataLayer_StudentLevels[0] = 3364369847;
simcity.kRegionDataLayer_Power = 421466908;
simcity.kRegionDataLayer_PowerLevels = [];
simcity.kRegionDataLayer_PowerLevels[0] = 2070473197;
simcity.kRegionDataLayer_Water = 2159337086;
simcity.kRegionDataLayer_WaterLevels = [];
simcity.kRegionDataLayer_WaterLevels[0] = 3550359375;
simcity.kRegionDataLayer_Sewage = 992740189;
simcity.kRegionDataLayer_SewageLevels = [];
simcity.kRegionDataLayer_SewageLevels[0] = 1960253498;
simcity.kRegionDataLayer_Garbage = 349418674;
simcity.kRegionDataLayer_GarbageLevels = [];
simcity.kRegionDataLayer_GarbageLevels[0] = 774058619;
simcity.kRegionDataLayer_Fire = 2237727921;
simcity.kRegionDataLayer_FireLevels = [];
simcity.kRegionDataLayer_FireLevels[0] = 1989660182;
simcity.kRegionDataLayer_Police = 3575552095;
simcity.kRegionDataLayer_PoliceLevels = [];
simcity.kRegionDataLayer_PoliceLevels[0] = 210312572;
simcity.kRegionDataLayer_Health = 2383364379;
simcity.kRegionDataLayer_HealthLevels = [];
simcity.kRegionDataLayer_HealthLevels[0] = 2451150608;
simcity.kRegionDataLayer_Transport = 4175520896;
simcity.kRegionDataLayer_TransportLevels = [];
simcity.kRegionDataLayer_TransportLevels[0] = 402290246;
simcity.kRegionDataLayer_TransportLevels[1] = 478458494;
simcity.kRegionDataLayer_TransportLevels[2] = 2832315202;
simcity.kRegionDataLayer_TransportLevels[3] = 3423995412;
simcity.kRegionDataLayer_Alloy = 3841649374;
simcity.kRegionDataLayer_Coal = 1578916780;
simcity.kRegionDataLayer_Computer = 784088442;
simcity.kRegionDataLayer_Electronics = 1341663182;
simcity.kRegionDataLayer_Fuel = 1922030413;
simcity.kRegionDataLayer_Metal = 1761487246;
simcity.kRegionDataLayer_OilCrude = 2810366428;
simcity.kRegionDataLayer_OreRaw = 101305499;
simcity.kRegionDataLayer_Plastic = 3293042223;
simcity.kRegionDataLayer_Television = 153210045;
simcity.kRegionDataLayer_GiftingSimoleons = 1334600322;
simcity.kRegionDataLayer_ResourceGifting = 1973420321;
simcity.kRegionDataLayer_GreatWorks = 3019514126;
simcity.kAdvisorLocaleFile = "RegionPaletteInfoPanel.json";
simcity.kRegionSimIcons = {
  fire : 2266301170,
  freight : 2593907311,
  garbage : 1013775918,
  gifting : 714576934,
  greatWorks : 713280810,
  health : 2704671394,
  power : 880729972,
  police : 974964530,
  sewage : 1017255779,
  shoppers : 2016816505,
  students : 4071577074,
  transit : 2626542018,
  water : 2692447573,
  workers : 95601648
};
simcity.kRegionAdvisorText = {
  power : {
    needed : "0x0eeb3651",
    neededNoOp : "0x0eeb3722",
    excess : "0x0eeb3724"
  },
  water : {
    needed : "0x0eeb3727",
    neededNoOp : "0x0eeb3729",
    excess : "0x0eeb372a"
  },
  sewage : {
    needed : "0x0eeb372b",
    neededNoOp : "0x0eeb372c",
    excess : "0x0eeb372d"
  },
  workers : {
    neededW1 : "0x0ef15a0d",
    neededW2 : "0x0f227a69",
    neededW3 : "0x0f227a6a",
    excessW1 : "0x0ef159f2",
    excessW2 : "0x0f2279d9",
    excessW3 : "0x0f2279da"
  },
  shoppers : {
    neededW1 : "0x0ef162f5",
    neededW2 : "0x0f227b14",
    neededW3 : "0x0f227b15",
    excessW1 : "0x0ef162f3",
    excessW2 : "0x0f227ab8",
    excessW3 : "0x0f227ab9"
  },
  freight : {
    needed : "0x0ef168c5",
    excess : "0x0ef168c3"
  },
  students : {
    neededNoOp : "0x0ef19c84",
    neededNoStops : "0x0ef19ceb",
    neededNoNeighborBuses : "0x0ef19d2e",
    excessNoOp : "0x0ef19d7a",
    excessNoStops : "0x0ef19db2",
    excessNoBuses : "0x0ef19dfb"
  },
  transport : {
    localBusNeeded : "0x0ef27c24",
    localRailNeeded : "0x0ef27c7c",
    localFerryNeeded : "0x0ef27c8c",
    busNeeded : "0x0ef19f1b",
    busExcess : "0x0ef19f47",
    busNeededNoStops : "0x0ef19f54",
    busExcessNoStops : "0x0ef19f70",
    railNeeded : "0x0ef19f7f",
    railExcess : "0x0ef19f90",
    railNeededNoStation : "0x0ef19fa2",
    railExcessNoStation : "0x0ef19fb2",
    ferryNeeded : "0x0ef19fc1",
    ferryExcess : "0x0ef19fce",
    ferryNeededNoTerminal : "0x0ef19fdb",
    ferryExcessNoTerminal : "0x0ef19fee"
  },
  garbage : {
    needed : "0x0ef28786",
    neededRecycling : "0x0ef28787",
    neededNoOp : "0x0ef28788"
  },
  fire : {
    needed : "0x0eeb3730",
    neededNoOp : "0x0eeb3731"
  },
  police : {
    needed : "0x0eeb372e",
    neededNoOp : "0x0eeb372f"
  },
  health : {
    needed : "0x0ef2849c",
    neededNoOp : "0x0ef2849d"
  },
  greatworks : {
    solarFarmSuggestion : "0x0ef5522e",
    arcologySuggestion : "0x0ef5527e",
    spaceCenterSuggestion : "0x0ef5529e",
    internationalAirportSuggestion : "0x0ef552c7",
    gwNeedsConstructionMaterials : "0x0ef552d6",
    gwConstructionStalled : "0x0ef5533b",
    gwNeedsConstructionWorkers : "0x0ef5534a",
    internationalAirportNeedsWorkers : "0x0ef553ca",
    internationalAirportNeedsPower : "0x0ef55408",
    internationalAirportCrisisMissionInProgress1 : "0x0ef55434",
    internationalAirportCrisisMissionInProgress2 : "0x0ef5548c",
    internationalAirportNeedsRail : "0x0ef554af",
    internationalAirportNeedsBuses : "0x0f14a5fb",
    internationalAirportLowTouristLevel : "0x0ef554d4",
    internationalAirportLowFreight : "0x0ef5551c",
    arcologyNeedsPower : "0x0ef5553c",
    arcologyNeedsWater : "0x0ef5555a",
    arcologyCrisisMissionInProgress : "0x0ef5557b",
    arcologyNotEnoughMoney : "0x0ef55591",
    spaceCenterCountdownInProgress : "0x0ef555a4",
    spaceCenterSatelliteLaunchedSkill : "0x0ef555d1",
    spaceCenterSatelliteLaunchedTourism : "0x0ef555de",
    spaceCenterSatelliteLaunchedRelaunch : "0x0ef5561b",
    spaceCenterCrisisMissionInProgress1 : "0x0ef55641",
    spaceCenterCrisisMissionInProgress2 : "0x0ef55663",
    spaceCenterLowTouristLevel : "0x0ef5567d",
    solarFarmNeedsWorkers : "0x0ef553ed",
    solarFarmCrisisMissionInProgress1 : "0x0ef5568f",
    solarFarmCrisisMissionInProgress2 : "0x0ef556ac",
    solarFarmPowerNight : "0x0ef556be",
    solarFarmPowerDay : "0x0ef556cc"
  },
  gifting : {
    myCityBankrupt : "0x0f0b8be0",
    myCityNearingBankruptcy : "0x0f0b8be1",
    neighborBankrupt : "0x0f0b8be2",
    neighborNearingBankruptcy : "0x0f0b8be3",
    needAlloy : "0x0f0b8be4",
    neighborNeedAlloy : "0x0f0b8be5",
    needCoal : "0x0f0b8be6",
    neighborNeedCoal : "0x0f0b8be7",
    needComputers : "0x0f0b8be8",
    neighborNeedComputers : "0x0f0b8be9",
    needFuel : "0x0f0b8bea",
    neighborNeedFuel : "0x0f0b8beb",
    needElectronics : "0x0f0b8bee",
    neighborNeedElectronics : "0x0f0b8bef",
    needMetal : "0x0f0b8bec",
    neighborNeedMetal : "0x0f0b8bed",
    needOilCrude : "0x0f0b8bf0",
    neighborNeedOilCrude : "0x0f0b8bf1",
    needOreRaw : "0x0f0b8bf4",
    neighborNeedOreRaw : "0x0f0b8bf5",
    needPlastic : "0x0f0b8bf2",
    neighborNeedPlastic : "0x0f0b8bf3",
    needTelevisions : "0x0f0b8bf6",
    neighborNeedTelevisions : "0x0f0b8bf7"
  }
};
simcity.RegionalAdvisors = {};
simcity.RegionalAdvisors[simcity.kRegionDataLayer_Fire] = {
  simIcon : simcity.kRegionSimIcons.fire,
  alertHeaderText : "0x0eebf36f",
  helpTipText : new scrui.cLocaleString(simcity.kAdvisorLocaleFile, "0x0ee1de4f", "Region fire advisor help tip")
};
simcity.RegionalAdvisors[simcity.kRegionDataLayer_Freight] = {
  simIcon : simcity.kRegionSimIcons.freight,
  alertHeaderText : "0x0eebee6d",
  helpTipText : new scrui.cLocaleString(simcity.kAdvisorLocaleFile, "0x0ee1de49", "Region fire advisor help tip")
};
simcity.RegionalAdvisors[simcity.kRegionDataLayer_Garbage] = {
  simIcon : simcity.kRegionSimIcons.garbage,
  alertHeaderText : "0x0eebf350",
  helpTipText : new scrui.cLocaleString(simcity.kAdvisorLocaleFile, "0x0ee1de4e", "Region fire advisor help tip")
};
simcity.RegionalAdvisors[simcity.kRegionDataLayer_ResourceGifting] = {
  simIcon : simcity.kRegionSimIcons.gifting,
  alertHeaderText : "0x0eebf397",
  helpTipText : new scrui.cLocaleString(simcity.kAdvisorLocaleFile, "0x0ee1d89d", "Region fire advisor help tip")
};
simcity.RegionalAdvisors[simcity.kRegionDataLayer_GreatWorks] = {
  simIcon : simcity.kRegionSimIcons.greatWorks,
  alertHeaderText : "0x0eebee2c",
  helpTipText : new scrui.cLocaleString(simcity.kAdvisorLocaleFile, "0x0ee1de52", "Region great works advisor help tip")
};
simcity.RegionalAdvisors[simcity.kRegionDataLayer_Health] = {
  simIcon : simcity.kRegionSimIcons.health,
  alertHeaderText : "0x0eebf37e",
  helpTipText : new scrui.cLocaleString(simcity.kAdvisorLocaleFile, "0x0ee1de51", "Region health advisor help tip")
};
simcity.RegionalAdvisors[simcity.kRegionDataLayer_Power] = {
  simIcon : simcity.kRegionSimIcons.power,
  alertHeaderText : "0x0eebf18e",
  helpTipText : new scrui.cLocaleString(simcity.kAdvisorLocaleFile, "0x0ee1de4b", "Region power advisor help tip")
};
simcity.RegionalAdvisors[simcity.kRegionDataLayer_Police] = {
  simIcon : simcity.kRegionSimIcons.police,
  alertHeaderText : "0x0eebf38d",
  helpTipText : new scrui.cLocaleString(simcity.kAdvisorLocaleFile, "0x0ee1de50", "Region police advisor help tip")
};
simcity.RegionalAdvisors[simcity.kRegionDataLayer_Sewage] = {
  simIcon : simcity.kRegionSimIcons.sewage,
  alertHeaderText : "0x0eebf347",
  helpTipText : new scrui.cLocaleString(simcity.kAdvisorLocaleFile, "0x0ee1de4d", "Region sewage advisor help tip")
};
simcity.RegionalAdvisors[simcity.kRegionDataLayer_Shoppers] = {
  simIcon : simcity.kRegionSimIcons.shoppers,
  alertHeaderText : "0x0eebee44",
  helpTipText : new scrui.cLocaleString(simcity.kAdvisorLocaleFile, "0x0ee1de48", "Region shoppers advisor help tip")
};
simcity.RegionalAdvisors[simcity.kRegionDataLayer_Transport] = {
  simIcon : simcity.kRegionSimIcons.transit,
  alertHeaderText : "0x0eebee85",
  helpTipText : new scrui.cLocaleString(simcity.kAdvisorLocaleFile, "0x0ee1d89c", "Region transport advisor help tip")
};
simcity.RegionalAdvisors[simcity.kRegionDataLayer_TransportLevels[0]] = {
  simIcon : simcity.kRegionSimIcons.transit,
  alertHeaderText : "0x0eebee85",
  helpTipText : new scrui.cLocaleString(simcity.kAdvisorLocaleFile, "0x0ee1d89c", "Region transport advisor help tip")
};
simcity.RegionalAdvisors[simcity.kRegionDataLayer_TransportLevels[1]] = {
  simIcon : simcity.kRegionSimIcons.transit,
  alertHeaderText : "0x0eebee85",
  helpTipText : new scrui.cLocaleString(simcity.kAdvisorLocaleFile, "0x0ee1d89c", "Region transport advisor help tip")
};
simcity.RegionalAdvisors[simcity.kRegionDataLayer_TransportLevels[2]] = {
  simIcon : simcity.kRegionSimIcons.transit,
  alertHeaderText : "0x0eebee85",
  helpTipText : new scrui.cLocaleString(simcity.kAdvisorLocaleFile, "0x0ee1d89c", "Region transport advisor help tip")
};
simcity.RegionalAdvisors[simcity.kRegionDataLayer_TransportLevels[3]] = {
  simIcon : simcity.kRegionSimIcons.transit,
  alertHeaderText : "0x0eebee85",
  helpTipText : new scrui.cLocaleString(simcity.kAdvisorLocaleFile, "0x0ee1d89c", "Region transport advisor help tip")
};
simcity.RegionalAdvisors[simcity.kRegionDataLayer_Students] = {
  simIcon : simcity.kRegionSimIcons.students,
  alertHeaderText : "0x0eebee77",
  helpTipText : new scrui.cLocaleString(simcity.kAdvisorLocaleFile, "0x0ee1de4a", "Region students advisor help tip")
};
simcity.RegionalAdvisors[simcity.kRegionDataLayer_Water] = {
  simIcon : simcity.kRegionSimIcons.water,
  alertHeaderText : "0x0eebf197",
  helpTipText : new scrui.cLocaleString(simcity.kAdvisorLocaleFile, "0x0ee1de4c", "Region water advisor help tip")
};
simcity.RegionalAdvisors[simcity.kRegionDataLayer_Workers] = {
  simIcon : simcity.kRegionSimIcons.workers,
  alertHeaderText : "0x0eebee2f",
  helpTipText : new scrui.cLocaleString(simcity.kAdvisorLocaleFile, "0x0ee1de47", "Region workers advisor help tip")
};
simcity.ResourceUIKeys = {};
simcity.kResourceUIKeys = {};
simcity.kResourceUnitsOfMeasure = {};
simcity.kResourceConversionRate = {};
simcity.CreateResourceKeysValidationObject = function () {
  if (simcity.DEBUG) {
    for (var a = {}, b = Object.keys(simcity.kResourceUIKeys), c = 0, d = b.length; c < d; ++c)
      a[simcity.kResourceUIKeys[b[c]]] = 1;
    return a
  }
};
simcity.kResourceUIKeys.NeededPowerPerHour = 493122592;
simcity.kResourceUIKeys.TotalPowerProducedPerHour = 3575017707;
simcity.kResourceUIKeys.PowerAvailableForSalePerConnection = 215015060;
simcity.kResourceUIKeys.DeficitPowerPerHour = 293488187;
simcity.kResourceUIKeys.BoughtPowerPerHour = 4093493366;
simcity.kResourceUIKeys.TradePower = 2982740460;
simcity.kResourceUIKeys.NeededWaterPerHour = 3480652742;
simcity.kResourceUIKeys.TotalWaterProducedPerHour = 4130136097;
simcity.kResourceUIKeys.WaterAvailableForSalePerConnection = 3083942282;
simcity.kResourceUIKeys.DeficitWaterPerHour = 4206205293;
simcity.kResourceUIKeys.BoughtWaterPerHour = 155868464;
simcity.kResourceUIKeys.TradeWater = 3906242182;
simcity.kResourceUIKeys.TotalSewageProducedPerHour = 914259612;
simcity.kResourceUIKeys.TotalSewageTreatmentCapacityPerHour = 701206630;
simcity.kResourceUIKeys.SewageTreatedPerHour = 1014227891;
simcity.kResourceUIKeys.SewageDumpedPerHour = 3485658875;
simcity.kResourceUIKeys.BoughtTreatmentCapacityPerHour = 1283924079;
simcity.kResourceUIKeys.TradeSewage = 3911129393;
simcity.kResourceUIKeys.TradeSewageUsed = 719096374;
simcity.kResourceUIKeys.TotalFireTruck = 3504937922;
simcity.kResourceUIKeys.TotalFireTruckTokensAvailable = 2892528009;
simcity.kResourceUIKeys.TotalFires = 1469542512;
simcity.kResourceUIKeys.UnattendedFires = 4272610390;
simcity.kResourceUIKeys.FireAssigned = 3036780785;
simcity.kResourceUIKeys.TotalPoliceVehicle = 3418728717;
simcity.kResourceUIKeys.TotalPoliceVehicleTokensAvailable = 1126486176;
simcity.kResourceUIKeys.TotalCrime = 2826474121;
simcity.kResourceUIKeys.CriminalsAtLarge = 323121511;
simcity.kResourceUIKeys.PoliceAssigned = 4219354879;
simcity.kResourceUIKeys.TotalHealthVehicle = 2173809025;
simcity.kResourceUIKeys.TotalHealthVehicleTokensAvailable = 2493029036;
simcity.kResourceUIKeys.TotalSickAndInjured = 4036765737;
simcity.kResourceUIKeys.TotalSickAndInjuredUntreated = 4112821823;
simcity.kResourceUIKeys.HealthAssigned = 650490891;
simcity.kResourceUIKeys.TotalGarbageAndRecyclingVehicle = 3125713767;
simcity.kResourceUIKeys.TotalGarbageAndRecyclingVehicleTokensAvailable = 628002926;
simcity.kResourceUIKeys.TotalGarbageAndRecyclablesProduced = 4002187950;
simcity.kResourceUIKeys.TotalGarbageAndRecyclablesUncollected = 2596860136;
simcity.kResourceUIKeys.GarbageAndRecyclingAssigned = 2639531541;
simcity.kResourceUIKeys.BusR2 = 3783846437;
simcity.kResourceUIKeys.BusR2Stop = 3811986621;
simcity.kResourceUIKeys.BusR2PassengersToday = 36583729;
simcity.kResourceUIKeys.BusR2Trading = 3362480252;
simcity.kResourceUIKeys.SchoolBusR2 = 1268616873;
simcity.kResourceUIKeys.SchoolBusR2Stop = 119321169;
simcity.kResourceUIKeys.SchoolBusR2PassengersToday = 2787258021;
simcity.kResourceUIKeys.SchoolBusR2Trading = 1172067064;
simcity.kResourceUIKeys.TrainT2Stop = 2952376667;
simcity.kResourceUIKeys.TrainT2PassengersToday = 3029627231;
simcity.kResourceUIKeys.TrainT2Trading = 1883739082;
simcity.kResourceUIKeys.FerryT1Stop = 3607048138;
simcity.kResourceUIKeys.FerryT1PassengersToday = 2474466032;
simcity.kResourceUIKeys.FerryT1Trading = 2116194717;
simcity.kResourceUIKeys.TotalWorkersW1 = 4103864734;
simcity.kResourceUIKeys.TotalJobsW1 = 2203466001;
simcity.kResourceUIKeys.ExcessWorkersW1 = 573820801;
simcity.kResourceUIKeys.ExcessJobsW1 = 4129782420;
simcity.kResourceUIKeys.CommutingWorkersW1 = 2525600259;
simcity.kResourceUIKeys.TotalWorkersW2 = 4103864733;
simcity.kResourceUIKeys.TotalJobsW2 = 2203466002;
simcity.kResourceUIKeys.ExcessWorkersW2 = 573820802;
simcity.kResourceUIKeys.ExcessJobsW2 = 4129782423;
simcity.kResourceUIKeys.CommutingWorkersW2 = 2525600256;
simcity.kResourceUIKeys.TotalWorkersW3 = 4103864732;
simcity.kResourceUIKeys.TotalJobsW3 = 2203466003;
simcity.kResourceUIKeys.ExcessWorkersW3 = 573820803;
simcity.kResourceUIKeys.ExcessJobsW3 = 4129782422;
simcity.kResourceUIKeys.CommutingWorkersW3 = 2525600257;
simcity.kResourceUIKeys.TradeCommutingWorkersOut = 3263404645;
simcity.kResourceUIKeys.TradeCommutingWorkersIn = 603377418;
simcity.kResourceUIKeys.TotalShoppersW1 = 3699155349;
simcity.kResourceUIKeys.TotalItemsW1 = 2073006635;
simcity.kResourceUIKeys.ExcessShoppersW1 = 2074827940;
simcity.kResourceUIKeys.ExcessItemsW1 = 4059946552;
simcity.kResourceUIKeys.CommutingShoppersW1 = 1186242634;
simcity.kResourceUIKeys.TotalShoppersW2 = 3699155350;
simcity.kResourceUIKeys.TotalItemsW2 = 2073006632;
simcity.kResourceUIKeys.ExcessShoppersW2 = 2074827943;
simcity.kResourceUIKeys.ExcessItemsW2 = 4059946555;
simcity.kResourceUIKeys.CommutingShoppersW2 = 1186242633;
simcity.kResourceUIKeys.TotalShoppersW3 = 3699155351;
simcity.kResourceUIKeys.TotalItemsW3 = 2073006633;
simcity.kResourceUIKeys.ExcessShoppersW3 = 2074827942;
simcity.kResourceUIKeys.ExcessItemsW3 = 4059946554;
simcity.kResourceUIKeys.CommutingShoppersW3 = 1186242632;
simcity.kResourceUIKeys.TradeCommutingShoppersOut = 451039250;
simcity.kResourceUIKeys.TradeCommutingShoppersIn = 2122957567;
simcity.kResourceUIKeys.TotalFreightProduced = 2416802518;
simcity.kResourceUIKeys.TotalFreightDesired = 2081412012;
simcity.kResourceUIKeys.ExcessFreightProduced = 4037501689;
simcity.kResourceUIKeys.ExcessFreightDesired = 462457901;
simcity.kResourceUIKeys.TradeFreight = 587057158;
simcity.kResourceUIKeys.TradeFreightIn = 1752522223;
simcity.kResourceUIKeys.TradeFreightOut = 1757899490;
simcity.kResourceUIKeys.TotalStudents = 116259821;
simcity.kResourceUIKeys.TotalDesks = 3408362105;
simcity.kResourceUIKeys.ExcessStudents = 3536077248;
simcity.kResourceUIKeys.ExcessDesks = 1762890554;
simcity.kResourceUIKeys.TradeStudentsE2 = 1530352336;
simcity.kResourceUIKeys.TradeStudentsE3 = 1530352337;
simcity.kResourceUIKeys.TradeStudentsOut = 723912583;
simcity.kResourceUIKeys.TradeStudentsIn = 1597462848;
simcity.kResourceUIKeys.Coal = 3469052172;
simcity.kResourceUIKeys.Oil = 981044951;
simcity.kResourceUIKeys.Metal = 2473969246;
simcity.kResourceUIKeys.Alloy = 504811494;
simcity.kResourceUIKeys.Plastic = 660835419;
simcity.kResourceUIKeys.Electronics = 3202467646;
simcity.kResourceUIKeys.Computer = 2376682602;
simcity.kResourceUIKeys.Fuel = 2661514705;
simcity.kResourceUIKeys.Televion = 2805399573;
simcity.kResourceUIKeys.GiftableSimoleons = 1852930584;
simcity.kResourceUIKeys.SimoleonsGifted = 639787655;
simcity.kResourceUIKeys.AlloyStored = 379988183;
simcity.kResourceUIKeys.AlloyGifted = 1150348899;
simcity.kResourceUIKeys.CoalStored = 827325393;
simcity.kResourceUIKeys.CoalGifted = 3042287713;
simcity.kResourceUIKeys.ComputerStored = 2637771595;
simcity.kResourceUIKeys.ComputerGifted = 2299662351;
simcity.kResourceUIKeys.ElectronicsStored = 1427812671;
simcity.kResourceUIKeys.ElectronicsGifted = 3259395883;
simcity.kResourceUIKeys.FuelStored = 269947704;
simcity.kResourceUIKeys.FuelGifted = 2388037964;
simcity.kResourceUIKeys.MetalStored = 2713418591;
simcity.kResourceUIKeys.MetalGifted = 250034507;
simcity.kResourceUIKeys.OilCrudeStored = 1331352249;
simcity.kResourceUIKeys.OilCrudeGifted = 1993864489;
simcity.kResourceUIKeys.OreRawStored = 113803274;
simcity.kResourceUIKeys.OreRawGifted = 3580989722;
simcity.kResourceUIKeys.PlasticStored = 2254408254;
simcity.kResourceUIKeys.PlasticGifted = 1908940438;
simcity.kResourceUIKeys.TelevisionStored = 1689781648;
simcity.kResourceUIKeys.TelevisionGifted = 1549752868;
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.NeededPowerPerHour] = new scrui.cLocaleString("resources.json", "0x0eb9dae8", "W needed power");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.TotalPowerProducedPerHour] = new scrui.cLocaleString("resources.json", "0x0eb9daeb", "W total power produced");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.PowerAvailableForSalePerConnection] = new scrui.cLocaleString("resources.json", "0x0eb9daef", "W power available for sale");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.DeficitPowerPerHour] = new scrui.cLocaleString("resources.json", "0x0eb9daf2", "W deficit power");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.TradePower] = new scrui.cLocaleString("resources.json", "0x0e9e7585", "W");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.NeededWaterPerHour] = new scrui.cLocaleString("resources.json", "0x0eba1ef1", "gal needed water");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.TotalWaterProducedPerHour] = new scrui.cLocaleString("resources.json", "0x0eba1ef4", "gal total water produced");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.WaterAvailableForSalePerConnection] = new scrui.cLocaleString("resources.json", "0x0eba1ef7", "gal water available for sale");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.DeficitWaterPerHour] = new scrui.cLocaleString("resources.json", "0x0eba1efb", "gal deficit water");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.TradeWater] = new scrui.cLocaleString("resources.json", "0x0e9e8ab1", "gal");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.TotalSewageProducedPerHour] = new scrui.cLocaleString("resources.json", "0x0ecadb7d", "gal total sewage");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.TotalSewageTreatmentCapacityPerHour] = new scrui.cLocaleString("resources.json", "0x0ecadbbe", "gal sewage treatment capacity for sale");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.SewageTreatedPerHour] = new scrui.cLocaleString("resources.json", "0x0ecadbcc", "gal treated sewage");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.SewageDumpedPerHour] = new scrui.cLocaleString("resources.json", "0x0ecadf89", "gal sewage dumped");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.TradeSewage] = new scrui.cLocaleString("resources.json", "0x0e9e8ab1", "gal");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.TradeSewageUsed] = new scrui.cLocaleString("resources.json", "0x0e9e8ab1", "gal");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.TotalFireTruck] = new scrui.cLocaleString("resources.json", "0x0ec78a66", "total firetrucks");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.TotalFireTruckTokensAvailable] = new scrui.cLocaleString("resources.json", "0x0ec78aaf", "shareable firetrucks");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.TotalFires] = new scrui.cLocaleString("resources.json", "0x0ec78af3", "total fires today");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.UnattendedFires] = new scrui.cLocaleString("resources.json", "0x0ec78b37", "buildings destroyed by fire today");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.FireAssigned] = new scrui.cLocaleString("resources.json", "0x0efd569b", "Vehicles Volunteered");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.TotalPoliceVehicle] = new scrui.cLocaleString("resources.json", "0x0ecad8bc", "total police vehicles");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.TotalPoliceVehicleTokensAvailable] = new scrui.cLocaleString("resources.json", "0x0ecad8e0", "shareable police vehicles");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.TotalCrime] = new scrui.cLocaleString("resources.json", "0x0ecad8fa", "total crimes today");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.CriminalsAtLarge] = new scrui.cLocaleString("resources.json", "0x0ecad901", "criminals at large");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.PoliceAssigned] = new scrui.cLocaleString("resources.json", "0x0efd569b", "Vehicles Volunteered");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.TotalHealthVehicle] = new scrui.cLocaleString("resources.json", "0x0edafb90", "total medic vehicles");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.TotalHealthVehicleTokensAvailable] = new scrui.cLocaleString("resources.json", "0x0edafbbd", "shareable medic vehicles");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.TotalSickAndInjured] = new scrui.cLocaleString("resources.json", "0x0edafbe1", "total sick and injured today");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.TotalSickAndInjuredUntreated] = new scrui.cLocaleString("resources.json", "0x0edafbf6", "sick and injured untreated today");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.HealthAssigned] = new scrui.cLocaleString("resources.json", "0x0efd569b", "Vehicles Volunteered");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.TotalGarbageAndRecyclingVehicle] = new scrui.cLocaleString("resources.json", "0x0edc7448", "total garbage and recycling vehicles");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.TotalGarbageAndRecyclingVehicleTokensAvailable] = new scrui.cLocaleString("resources.json", "0x0edc7458", "shareable garbage and recycling vehicles");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.TotalGarbageAndRecyclablesProduced] = new scrui.cLocaleString("resources.json", "0x0edc7464", "total garbage and recyclables produced today");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.TotalGarbageAndRecyclablesUncollected] = new scrui.cLocaleString("resources.json", "0x0edc7482", "garbage and recyclables uncollected today");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.GarbageAndRecyclingAssigned] = new scrui.cLocaleString("resources.json", "0x0efd569b", "Vehicles Volunteered");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.BusR2] = new scrui.cLocaleString("resources.json", "0x0ee059ce", "current bus passengers");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.BusR2Stop] = new scrui.cLocaleString("resources.json", "0x0ee059fb", "bus stops");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.BusR2PassengersToday] = new scrui.cLocaleString("resources.json", "0x0ee05a0d", "bus passengers today");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.BusR2Trading] = new scrui.cLocaleString("resources.json", "0x0efe6abf", "Bus Connection");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.SchoolBusR2] = new scrui.cLocaleString("resources.json", "0x0ee05a36", "current school bus students");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.SchoolBusR2Stop] = new scrui.cLocaleString("resources.json", "0x0ee05a55", "school bus stops");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.SchoolBusR2PassengersToday] = new scrui.cLocaleString("resources.json", "0x0ee05a81", "school bus students today");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.SchoolBusR2Trading] = new scrui.cLocaleString("resources.json", "0x0efe6afb", "School Bus Connection");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.TrainT2Stop] = new scrui.cLocaleString("resources.json", "0x0ee05ad4", "train passenger capacity");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.TrainT2PassengersToday] = new scrui.cLocaleString("resources.json", "0x0ee05af2", "trains passengers today");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.TrainT2Trading] = new scrui.cLocaleString("resources.json", "0x0efe6b05", "Train Connection");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.FerryT1Stop] = new scrui.cLocaleString("resources.json", "0x0ee05b26", "ferry passenger capacity");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.FerryT1PassengersToday] = new scrui.cLocaleString("resources.json", "0x0ee05b30", "ferry passengers today");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.FerryT1Trading] = new scrui.cLocaleString("resources.json", "0x0efe6b0d", "Ferry Connection");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.TradeCommutingWorkersIn] = new scrui.cLocaleString("resources.json", "0x0e9e8797", "Workers Commuting Out");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.TradeCommutingWorkersOut] = new scrui.cLocaleString("resources.json", "0x0e9e8797", "Workers Commuting Out");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.TotalWorkersW1] = new scrui.cLocaleString("resources.json", "0x0ebb621f", "W1 total workers");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.TotalJobsW1] = new scrui.cLocaleString("resources.json", "0x0ebb6221", "W1 total jobs");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.ExcessWorkersW1] = new scrui.cLocaleString("resources.json", "0x0ebb6223", "W1 unemployed");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.ExcessJobsW1] = new scrui.cLocaleString("resources.json", "0x0ebb6224", "W1 open jobs");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.CommutingWorkersW1] = new scrui.cLocaleString("resources.json", "0x0e9e8797", "Workers Commuting Out");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.TotalWorkersW2] = new scrui.cLocaleString("resources.json", "0x0ebb6371", "W2 total workers");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.TotalJobsW2] = new scrui.cLocaleString("resources.json", "0x0ebb6372", "W2 total jobs");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.ExcessWorkersW2] = new scrui.cLocaleString("resources.json", "0x0ebb6375", "W2 unemployed");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.ExcessJobsW2] = new scrui.cLocaleString("resources.json", "0x0ebb6376", "W2 open jobs");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.CommutingWorkersW2] = new scrui.cLocaleString("resources.json", "0x0e9e8797", "Workers Commuting Out");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.TotalWorkersW3] = new scrui.cLocaleString("resources.json", "0x0ebb63d8", "W3 total workers");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.TotalJobsW3] = new scrui.cLocaleString("resources.json", "0x0ebb63da", "W3 total jobs");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.ExcessWorkersW3] = new scrui.cLocaleString("resources.json", "0x0ebb63dc", "W3 unemployed");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.ExcessJobsW3] = new scrui.cLocaleString("resources.json", "0x0ebb63de", "W3 open jobs");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.CommutingWorkersW3] = new scrui.cLocaleString("resources.json", "0x0e9e8797", "Workers Commuting Out");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.TradeCommutingShoppersIn] = new scrui.cLocaleString("resources.json", "0x0e9e83ee", "Out of Town Shoppers");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.TradeCommutingShoppersOut] = new scrui.cLocaleString("resources.json", "0x0e9e83ee", "Out of Town Shoppers");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.TotalShoppersW1] = new scrui.cLocaleString("resources.json", "0x0ebb6515", "W1 total shoppers");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.TotalItemsW1] = new scrui.cLocaleString("resources.json", "0x0ebb6516", "W1 total goods");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.ExcessShoppersW1] = new scrui.cLocaleString("resources.json", "0x0ebb6517", "W1 unsatisfied shoppers");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.ExcessItemsW1] = new scrui.cLocaleString("resources.json", "0x0ebb6518", "W1 unsold goods");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.CommutingShoppersW1] = new scrui.cLocaleString("resources.json", "0x0e9e83ee", "Out of Town Shoppers");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.TotalShoppersW2] = new scrui.cLocaleString("resources.json", "0x0ebb6519", "W2 total shoppers");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.TotalItemsW2] = new scrui.cLocaleString("resources.json", "0x0ebb651a", "W2 total goods");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.ExcessShoppersW2] = new scrui.cLocaleString("resources.json", "0x0ebb651b", "W2 unsatisfied shoppers");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.ExcessItemsW2] = new scrui.cLocaleString("resources.json", "0x0ebb651c", "W2 unsold goods");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.CommutingShoppersW2] = new scrui.cLocaleString("resources.json", "0x0e9e83ee", "Out of Town Shoppers");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.TotalShoppersW3] = new scrui.cLocaleString("resources.json", "0x0ebb651d", "W3 total shoppers");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.TotalItemsW3] = new scrui.cLocaleString("resources.json", "0x0ebb651e", "W3 total goods");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.ExcessShoppersW3] = new scrui.cLocaleString("resources.json", "0x0ebb651f", "W3 unsatisfied shoppers");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.ExcessItemsW3] = new scrui.cLocaleString("resources.json", "0x0ebb6520", "W3 unsold goods");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.CommutingShoppersW3] = new scrui.cLocaleString("resources.json", "0x0e9e83ee", "Out of Town Shoppers");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.TotalFreightProduced] = new scrui.cLocaleString("resources.json", "0x0ebc6603", "total freight per day");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.TotalFreightDesired] = new scrui.cLocaleString("resources.json", "0x0ebc6605", "total freight orders per day");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.ExcessFreightProduced] = new scrui.cLocaleString("resources.json", "0x0ebc6608", "surplus freight per day");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.ExcessFreightDesired] = new scrui.cLocaleString("resources.json", "0x0ebc660a", "unfulfilled freight orders per day");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.TradeFreight] = new scrui.cLocaleString("resources.json", "0x0efab77b", "Commuting Freight Trucks");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.TradeFreightIn] = new scrui.cLocaleString("resources.json", "0x0efab77b", "Commuting Freight Trucks");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.TradeFreightOut] = new scrui.cLocaleString("resources.json", "0x0efab77b", "Commuting Freight Trucks");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.TradeStudentsIn] = new scrui.cLocaleString("resources.json", "0x0ec8467e", "Students");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.TradeStudentsOut] = new scrui.cLocaleString("resources.json", "0x0ec8467e", "Students");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.TotalStudents] = new scrui.cLocaleString("resources.json", "0x0f2e12b7", "total students");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.TotalDesks] = new scrui.cLocaleString("resources.json", "0x0f2e12c7", "total desks");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.ExcessStudents] = new scrui.cLocaleString("resources.json", "0x0ec60e84", "total uneducated students");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.ExcessDesks] = new scrui.cLocaleString("resources.json", "0x0ec60e98", "total extra desks");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.TradeStudentsE2] = new scrui.cLocaleString("resources.json", "0x0efd56bb", "Students");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.TradeStudentsE3] = new scrui.cLocaleString("resources.json", "0x0efd56bb", "Students");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.Coal] = new scrui.cLocaleString("resources.json", "0x0f07b05d", "Tons of Coal");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.Oil] = new scrui.cLocaleString("resources.json", "0x0f07c03c", "Barrels of Crude Oil");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.Metal] = new scrui.cLocaleString("resources.json", "0x0f07c002", "Tons of Metal");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.Alloy] = new scrui.cLocaleString("resources.json", "0x0f07bf3a", "Tons of Alloy");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.Plastic] = new scrui.cLocaleString("resources.json", "0x0f07c01e", "Crates of Plastic");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.Electronics] = new scrui.cLocaleString("resources.json", "0x0f07bf7a", "Crates of Processors");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.Computer] = new scrui.cLocaleString("resources.json", "0x0f07bfb6", "Crates of Computers");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.Fuel] = new scrui.cLocaleString("resources.json", "0x0f07c064", "Barrels of Fuel");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.Televion] = new scrui.cLocaleString("resources.json", "0x0f07bfea", "Crates of TVs");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.GiftableSimoleons] = new scrui.cLocaleString("resources.json", "0x0ee2d5d8", "Simoleons");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.AlloyStored] = new scrui.cLocaleString("BuildingRollover.json", "0x0e8d4573", "tons");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.CoalStored] = new scrui.cLocaleString("BuildingRollover.json", "0x0e8d4573", "tons");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.ComputerStored] = new scrui.cLocaleString("BuildingRollover.json", "0x0e8d4574", "units");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.ElectronicsStored] = new scrui.cLocaleString("BuildingRollover.json", "0x0e8d4574", "units");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.FuelStored] = new scrui.cLocaleString("BuildingRollover.json", "0x0e8d4575", "bbl");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.MetalStored] = new scrui.cLocaleString("BuildingRollover.json", "0x0e8d4573", "tons");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.OilCrudeStored] = new scrui.cLocaleString("BuildingRollover.json", "0x0e8d4575", "bbl");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.OreRawStored] = new scrui.cLocaleString("BuildingRollover.json", "0x0e8d4573", "tons");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.PlasticStored] = new scrui.cLocaleString("BuildingRollover.json", "0x0e8d4574", "units");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.TelevisionStored] = new scrui.cLocaleString("BuildingRollover.json", "0x0e8d4574", "units");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.SimoleonsGifted] = new scrui.cLocaleString("resources.json", "0x0ee2d5d8", "Simoleons");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.AlloyGifted] = new scrui.cLocaleString("BuildingRollover.json", "0x0e8d4573", "tons");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.CoalGifted] = new scrui.cLocaleString("BuildingRollover.json", "0x0e8d4573", "tons");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.ComputerGifted] = new scrui.cLocaleString("BuildingRollover.json", "0x0e8d4574", "units");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.ElectronicsGifted] = new scrui.cLocaleString("BuildingRollover.json", "0x0e8d4574", "units");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.FuelGifted] = new scrui.cLocaleString("BuildingRollover.json", "0x0e8d4575", "bbl");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.MetalGifted] = new scrui.cLocaleString("BuildingRollover.json", "0x0e8d4573", "tons");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.OilCrudeGifted] = new scrui.cLocaleString("BuildingRollover.json", "0x0e8d4575", "bbl");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.OreRawGifted] = new scrui.cLocaleString("BuildingRollover.json", "0x0e8d4573", "tons");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.PlasticGifted] = new scrui.cLocaleString("BuildingRollover.json", "0x0e8d4574", "units");
simcity.kResourceUnitsOfMeasure[simcity.kResourceUIKeys.TelevisionGifted] = new scrui.cLocaleString("BuildingRollover.json", "0x0e8d4574", "units");
simcity.GameMessageIDs = {};
simcity.kGameMessageSpeedChanged = 182429322;
simcity.kGameMessageHideGlobalUI = 182862029;
simcity.kGameMessageShowGlobalUI = 182862043;
simcity.kGameMessageHideRegionUI = 203180755;
simcity.kGameMessageShowRegionUI = 203180756;
simcity.kGameMessageShowLetterbox = 232569060;
simcity.kGameMessageHideLetterbox = 232569061;
simcity.kGameMessageShowSiteUI = 232627372;
simcity.kGameMessageHideSiteUI = 232627373;
simcity.kGameMessageLayerToggled = 182943898;
simcity.kGameMessageToolDeselected = 183731993;
simcity.kGameMessageToolSelected = 209731326;
simcity.kGameMessagePlopToolSelected = 216227805;
simcity.kGameMessagePlopToolDeselected = 216228843;
simcity.kMessageStoppedMovie = 77017517;
simcity.kGameMessageGameLoadingFinalized = 254599144;
simcity.kGameMessageQuitting = 4172439308;
simcity.kGameMessageBuildingRolledOver = 245515571;
simcity.kGameMessageBuildingRolledOff = 245515574;
simcity.kGameMessageBuildingSelected = 211893270;
simcity.kGameMessageBuildingDeselected = 211893256;
simcity.kGameMessageRoadSelected = 247759596;
simcity.kGameMessageRoadDeselected = 247759597;
simcity.kGameMessageRegionViewItemSelected = 227715821;
simcity.kGameMessageRegionViewItemMouseOver = 2782523294;
simcity.kGameMessageRegionViewItemMouseOut = 1535045308;
simcity.kGameMessageToolConfirmation = 234362264;
simcity.kGameMessageToolConfirmationHide = 3947420944;
simcity.kGameMessageBeatCountChanged = 237557144;
simcity.kGameMessageCinematicDisasterStart = 253033771;
simcity.kGameMessageCinematicDisasterEnd = 253033772;
simcity.kGameMessageRegionUnitRolledOver = 246385605;
simcity.kGameMessageRegionUnitRolledOff = 246385609;
simcity.kGameMessageRegionUnitSelected = 246368015;
simcity.kGameMessageRegionUnitDeselected = 246374977;
simcity.kGameMessageZoomToCity = 244817673;
simcity.kGameMessageBarGraphRolledOver = 245152993;
simcity.kGameMessageArrowRolledOver = 250266855;
simcity.kGameMessageBarGraphRolledOff = 245153002;
simcity.kGameMessageAgentSelected = 236428978;
simcity.kGameMessageActorSelected = 239365389;
simcity.kGameMessageAgentDeselected = 236428713;
simcity.kMessageBuildingClicked = 181836074;
simcity.kMessageEditorDeactivated = 182003884;
simcity.kMessageEditorActivated = 182003899;
simcity.kGameMessageTickerSettingsChanged = 196955843;
simcity.kMessageGameCameraMovingStart = 205419630;
simcity.kMessageGameCameraMovingStop = 205419631;
simcity.kMessageKeyTrigger = 1751899574;
simcity.kGameMessageUnitRuleUIEvent = 199450092;
simcity.kGameMessageGlobalRuleUIEvent = 248287250;
simcity.kGameMessageHistoryUIEvent = 245345823;
simcity.kGameMessageWebSocketReceiveUIEvent = 221717398;
simcity.kGameMessageWebSocketConnected = 221717399;
simcity.kGameMessageWebSocketDisconnected = 221717400;
simcity.kGameMessageGreatWorksContributors = 221717401;
simcity.kGameMessageOriginPurchaseCompleted = 236446040;
simcity.kGameMessageRegionUpdated = 237568396;
simcity.kGameMessageRegionLoadStatus = 237568397;
simcity.kGameMessageGameLoaded = 247678832;
simcity.kGameMessageDemoTimerEnd = 928964014;
simcity.kGameMessageDemoTimerWarning = 2157038965;
simcity.kGameMessageTerrainExportStarted = 254073984;
simcity.kGameMessageTerrainExportEnded = 254073985;
simcity.kGameMessageApiChanged = 255285636;
simcity.kGameMessageApiChanging = 257280773;
simcity.kGameMessageStartWorldSelection = 3438476797;
simcity.kGameMessageEndWorldSelection = 3438476798;
simcity.kGameMessageWorldSelectionResult = 526927108;
simcity.kGameMessageRequestWorldConfig = 3667045590;
simcity.kGameMessageRecieveWorldConfig = 253405898;
simcity.kGameMessageStartShardFlow = 255285637;
simcity.kGameMessageSetShardSelection = 255285638;
simcity.kEventIDNoHappiness = 280351819;
simcity.kEventIDResidentIsComplaining = 388900076;
simcity.kMessageCinematicFinishedPlaying = 239210102;
simcity.kMessageVideoCaptureStarted = 250183042;
simcity.kMessageVideoCaptureFinished = 250183103;
simcity.kMessageScreenshotCaptured = 250186018;
simcity.kMessageScreenshotTriggered = 253120279;
simcity.kMessageToggleFullscreen = 250709868;
simcity.kGameMessageHeavyDataLayerToggledOn = 244823987;
simcity.kGameMessageHeavyDataLayerToggledOff = 244823988;
simcity.kGameMessageRequestTradeData = 246714418;
simcity.kGameMessagePauseTradeDataRequest = 246722631;
simcity.kGameMessageLoggedOut = 248029635;
simcity.kMessageIMECompositionStringUpdated = 255200649;
simcity.kMessageIMECandidateListUpdate = 255202587;
simcity.kMessageIMECompositionFinalized = 255203611;
simcity.kMessageIMESetCompositionCaretPosition = 255202763;
simcity.kMessageIMESetCandidateListSelection = 255202917;
simcity.kMessageIMECompositionCanceled = 255202941;
simcity.kMessageIMECandidateListClosed = 255202959;
simcity.kGameMessageDebugMenuLogout = 248029634;
simcity.kEventIDUnlock = 4282012141;
simcity.kEventIDSilentUnlock = 2410698630;
simcity.kEventIDSimEnteredBuilding = 1041715627;
simcity.kEventIDSimExitedBuilding = 2970822833;
simcity.kEventIDShopperCarEnteredBuilding = 478031525;
simcity.kEventIDShopperSimEnteredBuilding = 2357791944;
simcity.kEventIDWorkerCarEnteredBuilding = 1395358552;
simcity.kEventIDWorkerSimEnteredBuilding = 716577125;
simcity.kEventIDResidentCarEnteredBuilding = 540079298;
simcity.kEventIDResidentSimEnteredBuilding = 184153467;
simcity.kEventIDShopperCarExitedBuilding = 281864703;
simcity.kEventIDShopperSimExitedBuilding = 4138224424;
simcity.kEventIDWorkerCarExitedBuilding = 475804440;
simcity.kEventIDWorkerSimExitedBuilding = 395798975;
simcity.kEventIDResidentCarExitedBuilding = 972152278;
simcity.kEventIDResidentSimExitedBuilding = 1745734369;
simcity.kEventIDSaleMadeInBuilding = 4079413170;
simcity.kEventIDBuildingLevelUp = 3197263498;
simcity.kEventIDRegionMessage = 3779332530;
simcity.kEventIDRegionWorksCompleted = 3323880324;
simcity.kEventIDStopFlyoverCamera = 2936571871;
simcity.kEventIDFireResponseTimeTest = 1965778579;
simcity.kEventIDFireDestroy = 349812833;
simcity.kEventIDTBDeath = 1326186203;
simcity.kToyPlopped = 2011641973;
simcity.kToyDestroyed = 2780218360;
simcity.kEventIDStartSmoke = 253705106;
simcity.kEventIDStartFire = 2883249331;
simcity.kEventIDFireEnded = 1733783587;
simcity.kEventIDFireExtinguished = 3378138762;
simcity.kEventIDFireSpreading = 2050669172;
simcity.kEventIDGarbageFireRisk = 3467300855;
simcity.kEventIDWaterFireRisk = 3590051651;
simcity.kEventIDKnowledgeFireRisk = 2033158162;
simcity.kEventIDSkillFireRisk = 2570961977;
simcity.kEventIDWaterTableFireRisk = 2448624047;
simcity.kEventIDRetardantFireRisk = 1066304361;
simcity.kEventIDCityStarted = 560208010;
simcity.kEventIDConnection_Started = 1855074423;
simcity.kEventIDConnected = 1629494038;
simcity.kEventIDArsonistCreated = 56;
simcity.kEventIDArsonistCaught = 57;
simcity.kEventIDCriminalArrested = 1054374498;
simcity.kEventIDCriminalIncarcerated = 2332958203;
simcity.kEventIDCoalMinePlaced = 3551534130;
simcity.kEventIDCoalShaftPlaced = 3581150063;
simcity.kEventIDCoalStorageLotPlaced = 2144194471;
simcity.kEventIDDiggerHitCoal = 2226814247;
simcity.kEventIDUnemployedCoal = 2323551320;
simcity.kEventIDAddToCoalMine = 3848325309;
simcity.kEventIDNumberOfConnectionsAdded = 2715715314;
simcity.kEventIDStripMineTutorial = 1586842242;
simcity.kEventIDCoalPowerAskForWorkers = 1369878579;
simcity.kEventIDTKMSTradeBuildRoadConnectionStarted = 3989142309;
simcity.kEventIDTKMSTradeBuildRoadConnectionEnded = 1469912334;
simcity.kEventIDWireWorkersLeaving = 3681306353;
simcity.kEventIDWireFreightTruckLeaving = 2132627336;
simcity.kEventIDWireShoppersLeaving = 1044951734;
simcity.kEventIDWireStudentsLeaving = 1044951734;
simcity.kEventIDWirePowerLeaving = 997657899;
simcity.kEventIDWireWaterLeaving = 297441569;
simcity.kEventIDWireWorkersReturning = 2068719515;
simcity.kEventIDWireFreightTruckIncoming = 3426026764;
simcity.kEventIDWireWorkersIncoming = 4263726347;
simcity.kEventIDWireShoppersIncoming = 4110660326;
simcity.kEventIDWireStudentsIncoming = 1707093346;
simcity.kEventIDWirePowerIncoming = 2254420897;
simcity.kEventIDWireWaterIncoming = 952793403;
simcity.kEventIDTutorialSimNationConnect = 3721885357;
simcity.kEventIDTBClaimedBox = 4035127579;
simcity.kEventIDSBNeighborHasJoined = 1532235834;
simcity.kEventIDTBWorkInOtherCity = 2141225E3;
simcity.kEventIDConnectionMission = 2447190157;
simcity.kEventIDNoHandshake = 479664727;
simcity.kEventIDShowLaunchButton = 3920093387;
simcity.kEventIDSatelliteLaunched = 992762266;
simcity.kEventIDWireGreatWorksNotOperating = 2625976762;
simcity.kEventIDWireGreatWorksNoWorkers = 3059867160;
simcity.kEventIDSBStartSolarFarmMission = 3743169556;
simcity.kEventIDSBStartSolarFarmMission2 = 1299354446;
simcity.kEventIDSBTriggerLoveSolarFarm = 3078239366;
simcity.kEventIDTKMSTradeBuildRegionSolarFarmStarted = 1706533746;
simcity.kEventIDTKMSTradeBuildRegionSolarFarm25 = 265057016;
simcity.kEventIDTKMSTradeBuildRegionSolarFarm75 = 181168859;
simcity.kEventIDTKMSTradeBuildRegionSolarFarmEnded = 432255665;
simcity.kEventIDStartCoalMineMission = 3568593723;
simcity.kEventIDStartCoalMineMission2 = 319081939;
simcity.kEventIDStartInternationalAirportMission = 3481212272;
simcity.kEventIDStartInternationalAirportMission2 = 353288034;
simcity.kEventIDWireInternationalAirportNoTourists = 3789963787;
simcity.kEventIDwireSentSharedFiretruck = 2450350132;
simcity.kEventIDwireReceivedSharedFireTruck = 535921629;
simcity.kEventIDwireSolarFarmCompleted = 766203056;
simcity.kEventIDTBWorkersLeavingForGreatWork = 1415754491;
simcity.kEventIDTKGreatWorkNoResource = 2107744227;
simcity.kEventIDAmbulanceGarageAdded = 2346836760;
simcity.kEventIDTriggerImSickThoughtBubble = 718763212;
simcity.kEventIDTriggerBadGroundPollutionThoughtBubble = 1284759302;
simcity.kEventIDTriggerRequestCasinoSpeechBubble = 1797807007;
simcity.kEventIDTriggerRequestCoalMineSpeechBubble = 3734399278;
simcity.kEventIDTriggerGarbageWarningThoughtBalloon = 330100544;
simcity.kEventIDTriggerGarbageIsFullThoughtBalloon = 375535679;
simcity.kEventIDTriggerGarbageMission = 3215575922;
simcity.kEventIDSatisfySimMovesIn = 4144969792;
simcity.kEventIDTriggerPowerIsLowThoughtBubble = 242016209;
simcity.kEventIDTriggerPowerIsLowSpeechBubble = 493675228;
simcity.kEventIDTriggerLoveCoalHQ = 2103987599;
simcity.kEventIDTriggerWaterIsLowThoughtBubble = 3056198271;
simcity.kEventIDTriggerWaterIsLowSpeechBubble = 2216247766;
simcity.kEventIDTriggerResidentialInjuryThoughtBubble = 3704880115;
simcity.kEventIDTriggerTimeComplaintGarbageThoughtBubble = 2347359381;
simcity.kEventIDTriggerCompletedCoalDiggerMission = 629490929;
simcity.kEventIDTriggerSickAddWaitingRoomThoughtBubble = 3952835803;
simcity.kEventIDTriggerMSHeatWave = 3636522598;
simcity.kEventIDTutorialPower = 924503518;
simcity.kEventIDplacedFirstWindTurbine = 369274843;
simcity.kEventIDplacedFirstT1CoalPlant = 335410487;
simcity.kEventIDplacedFirstT2CoalPlant = 1536234742;
simcity.kEventIDplacedFirstSolarUnit = 3101396037;
simcity.kEventIDMissionStarted = 419590612;
simcity.kEventIDMissionCompleted = 1627245352;
simcity.kEventIDMissionFailed = 3130169198;
simcity.kEventIDturbineHasLowWind = 1918214742;
simcity.kEventIDturbineHasNoWind = 589635949;
simcity.kEventIDResidentIsHomeless = 586057619;
simcity.kEventIDPowerStationNoCoalSupply = 1225505969;
simcity.kEventIDPowerStationLowCoalSupply = 1706039354;
simcity.kEventIDPowerStationLocalCoalDelivery = 728449172;
simcity.kEventIDStartSolarIntro = 1623954560;
simcity.kEventIDProtestAboutGeneral = 979192143;
simcity.kEventIDProtestAboutSickness = 3744163318;
simcity.kEventIDProtestAboutTaxes = 1076190396;
simcity.kEventIDProtestAboutPollution = 488823017;
simcity.kEventIDProtestAboutNoWater = 91654425;
simcity.kEventIDProtestAboutNoPower = 40611879;
simcity.kEventIDProtestAboutGarbage = 3522495174;
simcity.kEventIDProtestAboutNoRent = 285147549;
simcity.kEventIDProtestAboutNoDesirability = 3726526121;
simcity.kEventIDProtestAboutCrime = 2850001113;
simcity.kEventIDUnlock_Specialization_Gambling = 3742950856;
simcity.kEventIDUnlock_Specialization_Education = 3461677465;
simcity.kEventIDUnlock_Specialization_Metals = 3228802589;
simcity.kEventIDUnlock_Specialization_Petroleum = 2304903770;
simcity.kEventIDUnlock_Specialization_Electronics = 342194522;
simcity.kEventIDUnlock_Specialization_Trade = 1543642725;
simcity.kEventIDUnlock_DisasterActive = 475159146;
simcity.kEventIDUnlock_NumberOfConnections = 3962071103;
simcity.kEventIDUnlock_TownHallBubbles = 3859969542;
simcity.kEventIDUnlock_HQ_CityHall_Level2_IsOn = 733461785;
simcity.kEventIDUnlock_CoalMineUnlocked = 2465533523;
simcity.kEventIDUnlock_OreMineUnlocked = 1980550838;
simcity.kEventIDUnlock_OilT1BaseUnlocked = 3177717013;
simcity.kEventIDUnlock_GamblingHallUnlocked = 266538287;
simcity.kEventIDUnlock_ElectronicsBaseUnlocked = 4002751217;
simcity.kCategoryIDDemolish = 3639785352;
simcity.kCategoryIDDisasters = 2608627999;
simcity.kCategoryIDFire = 2678880713;
simcity.kCategoryIDPower = 2391494160;
simcity.kCategoryIDProducer = 3379473219;
simcity.kCategoryIDRoads = 1577763374;
simcity.kCategoryIDZones = 831766718;
simcity.kCategoryIDGarbage = 2092055118;
simcity.kCategoryIDRecycling = 2916550401;
simcity.kCategoryIDWaste = 2368395713;
simcity.kCategoryIDGarbageDump = 1486967056;
simcity.kCategoryIDWater = 2654748154;
simcity.kCategoryIDSewage = 3441286197;
simcity.kCategoryIDDisasters = 2608627999;
simcity.kCategoryIDDispatch = 3194224055;
simcity.kCategoryIDManufacturing = 3293020993;
simcity.kCategoryIDMining = 2947051645;
simcity.kCategoryIDExtraction = 1479985646;
simcity.kCategoryIDCoal = 3469052172;
simcity.kCategoryIDRCI = 1014158965;
simcity.kCategoryIDEducation = 2510935805;
simcity.kCategoryIDTourism = 2308696688;
simcity.kCategoryIDCasinos = 1587139775;
simcity.kCategoryIDPolice = 291106007;
simcity.kCategoryIDHospital = 1640084191;
simcity.kCategoryIDHealth = 3677180323;
simcity.kCategoryIDBuilding = 3339761385;
simcity.kCategoryIDTrading = 340639644;
simcity.kCategoryIDCivic = 1732323837;
simcity.kCategoryIDGovt = 819631613;
simcity.kCategoryIDParks = 3496088904;
simcity.kCategoryIDCultural = 1275708583;
simcity.kCategoryIDOil = 981044951;
simcity.kCategoryIDOre = 595159779;
simcity.kCategoryIDBasic = 3340296461;
simcity.kCategoryIDAdvanced = 3691536187;
simcity.kCategoryIDTransport = 2886912260;
simcity.kCategoryIDMassTransit = 3418519638;
simcity.kCategoryIDBusStation = 3608730319;
simcity.kCategoryIDBusStop = 3087650781;
simcity.kCategoryIDSmelting = 2400381530;
simcity.kCategoryIDLightRailTrainStation = 2395400053;
simcity.kCategoryIDLightRailTrainStop = 1074295699;
simcity.kCategoryIDHeavyRailTrainStation = 1648290512;
simcity.kCategoryIDHeavyRailTrainStop = 3240155564;
simcity.kCategoryIDAirport = 2748908406;
simcity.kCategoryIDFerry = 1307722599;
simcity.kCategoryIDCruiseShip = 565551182;
simcity.kCategoryIDFerryStop = 2110591175;
simcity.kCategoryIDCruiseShipStop = 2093628358;
simcity.kCategoryIDResidentialW1 = 3000398761;
simcity.kCategoryIDResidentialW2 = 3000398762;
simcity.kCategoryIDResidentialW3 = 3000398763;
simcity.kCategoryIDCommercialW1 = 3635297831;
simcity.kCategoryIDCommercialW2 = 3635297828;
simcity.kCategoryIDCommercialW3 = 3635297829;
simcity.kCategoryIDIndustrialW1 = 14091500;
simcity.kCategoryIDIndustrialW2 = 14091503;
simcity.kCategoryIDIndustrialW3 = 14091502;
simcity.kCategoryIDBudget = 3831447942;
simcity.kEventIDMSCivicBalanceTheBudgetStarted = 2958268410;
simcity.kEventIDMSCivicBalanceTheBudgetEnded = 2166734153;
simcity.kEventIDMSCivicBuildCityHallStarted = 4045834506;
simcity.kEventIDMSCivicBuildCityHallEnded = 570680601;
simcity.kEventIDMSCivicBuildMayorsHouseStarted = 2543743235;
simcity.kEventIDMSCivicBuildMayorsHouseEnded = 1502180160;
simcity.kEventIDMSCivicBuildRoadStarted = 2485905E3;
simcity.kEventIDMSCivicBuildRoadEnded = 2540283323;
simcity.kEventIDMSCivicBuildTownHallStarted = 3384898769;
simcity.kEventIDMSCivicBuildTownHallEnded = 126184498;
simcity.kEventIDMSCivicBuildWaterTowerStarted = 788392090;
simcity.kEventIDMSCivicBuildWaterTowerEnded = 812732137;
simcity.kEventIDMSCivicCreateResidentialStarted = 2903813476;
simcity.kEventIDMSCivicCreateResidentialEnded = 3231375583;
simcity.kEventIDMSCivicGettingStartedStarted = 4134518337;
simcity.kEventIDMSCivicGettingStartedEnded = 2572571106;
simcity.kEventIDMSCivicGrowPopulationStarted = 3076453400;
simcity.kEventIDMSCivicGrowPopulationEnded = 1448829803;
simcity.kEventIDMSCivicGrowPopulation1Started = 2941889965;
simcity.kEventIDMSCivicGrowPopulation1Ended = 3572008390;
simcity.kEventIDMSCivicGrowPopulation2Started = 32188664;
simcity.kEventIDMSCivicGrowPopulation2Ended = 605835595;
simcity.kEventIDMSCivicGrowPopulation3Started = 91678351;
simcity.kEventIDMSCivicGrowPopulation3Ended = 3377479732;
simcity.kEventIDMSCivicGrowPopulation4Started = 2143598330;
simcity.kEventIDMSCivicGrowPopulation4Ended = 1223951433;
simcity.kEventIDMSCivicGrowPopulation5Started = 2087472905;
simcity.kEventIDMSCivicGrowPopulation5Ended = 478068762;
simcity.kEventIDMSCivicGrowPopulation6Started = 2724629188;
simcity.kEventIDMSCivicGrowPopulation6Ended = 2836078143;
simcity.kEventIDMSCivicGrowPopulation7Started = 3851681323;
simcity.kEventIDMSCivicGrowPopulation7Ended = 3683470680;
simcity.kEventIDMSCivicGrowPopulation8Started = 4013211046;
simcity.kEventIDMSCivicGrowPopulation8Ended = 2786009213;
simcity.kEventIDMSCivicGrowPopulation9Started = 1024389925;
simcity.kEventIDMSCivicGrowPopulation9Ended = 784059662;
simcity.kEventIDMSCivicPowerWantPowerStarted = 3821441684;
simcity.kEventIDMSCivicPowerWantPowerEnded = 2612854607;
simcity.kEventIDMSCivicProtestAboutCrimeStarted = 2860226472;
simcity.kEventIDMSCivicProtestAboutCrimeEnded = 2993951739;
simcity.kEventIDMSCivicProtestAboutGarbageStarted = 4099066353;
simcity.kEventIDMSCivicProtestAboutGarbageEnded = 1600624466;
simcity.kEventIDMSCivicProtestAboutNoDesirabilityStarted = 858925112;
simcity.kEventIDMSCivicProtestAboutNoDesirabilityEnded = 2970307211;
simcity.kEventIDMSCivicProtestAboutNoPowerStarted = 719393362;
simcity.kEventIDMSCivicProtestAboutNoPowerEnded = 3306212753;
simcity.kEventIDMSCivicProtestAboutNoRentStarted = 3555720340;
simcity.kEventIDMSCivicProtestAboutNoRentEnded = 449435983;
simcity.kEventIDMSCivicProtestAboutNoWaterStarted = 1702985416;
simcity.kEventIDMSCivicProtestAboutNoWaterEnded = 858934299;
simcity.kEventIDMSCivicProtestAboutPollutionStarted = 3612915160;
simcity.kEventIDMSCivicProtestAboutPollutionEnded = 1851682091;
simcity.kEventIDMSCivicProtestAboutSicknessStarted = 2492069985;
simcity.kEventIDMSCivicProtestAboutSicknessEnded = 2020722434;
simcity.kEventIDMSCivicProtestAboutTaxesStarted = 2599351307;
simcity.kEventIDMSCivicProtestAboutTaxesEnded = 726193720;
simcity.kEventIDMSCivicSpeechBubbleStarted = 2693376760;
simcity.kEventIDMSCivicSpeechBubbleEnded = 1046643531;
simcity.kEventIDMSCivicZoneResidentialStarted = 1384647514;
simcity.kEventIDMSCivicZoneResidentialEnded = 145557161;
simcity.kEventIDMSCoalExtendCoalMineStarted = 2387003767;
simcity.kEventIDMSCoalExtendCoalMineEnded = 1062033324;
simcity.kEventIDMSCoalPlaceCoalMineStarted = 1850433724;
simcity.kEventIDMSCoalPlaceCoalMineEnded = 1769617543;
simcity.kEventIDMSCoalPlaceHQStarted = 3627661883;
simcity.kEventIDMSCoalPlaceHQEnded = 2012507880;
simcity.kEventIDMSCoalRemoveAllCoalStarted = 3835441603;
simcity.kEventIDMSCoalRemoveAllCoalEnded = 3171107584;
simcity.kEventIDMSCoalTutorialStripMineStarted = 44579304;
simcity.kEventIDMSCoalTutorialStripMineEnded = 3369463099;
simcity.kEventIDMSCommercialNeedShopsStarted = 3104989341;
simcity.kEventIDMSCommercialNeedShopsEnded = 2084116726;
simcity.kEventIDMSCrimeNeedPoliceStarted = 3613694514;
simcity.kEventIDMSCrimeNeedPoliceEnded = 1188184945;
simcity.kEventIDMSEducationBuildDepartmentOfEducationStarted = 3477207047;
simcity.kEventIDMSEducationBuildDepartmentOfEducationEnded = 1968327292;
simcity.kEventIDMSEducationBuildElementarySchoolStarted = 4184281756;
simcity.kEventIDMSEducationBuildElementarySchoolEnded = 1873831527;
simcity.kEventIDMSEducationBuildGradeSchoolStarted = 3842391039;
simcity.kEventIDMSEducationBuildGradeSchoolEnded = 154204964;
simcity.kEventIDMSEducationBuildT2PublicSchoolStarted = 1108458777;
simcity.kEventIDMSEducationBuildT2PublicSchoolEnded = 1176211306;
simcity.kEventIDMSEducationCreateGradeSchoolBusesStarted = 2099498115;
simcity.kEventIDMSEducationCreateGradeSchoolBusesEnded = 608535232;
simcity.kEventIDMSFireArsonistStarted = 3052764611;
simcity.kEventIDMSFireArsonistEnded = 1282453248;
simcity.kEventIDMSFireBuildDepartmentOfSafetyStarted = 2767265835;
simcity.kEventIDMSFireBuildDepartmentOfSafetyEnded = 3196657496;
simcity.kEventIDMSFireBuildFireStationStarted = 4041840264;
simcity.kEventIDMSFireBuildFireStationEnded = 1811008987;
simcity.kEventIDMSFireBuildT2FireStationStarted = 3439702142;
simcity.kEventIDMSFireBuildT2FireStationEnded = 2820195909;
simcity.kEventIDMSFireDispatchRaceStarted = 1639461467;
simcity.kEventIDMSFireDispatchRaceEnded = 203283208;
simcity.kEventIDMSFireDispatchRace2Started = 2220357857;
simcity.kEventIDMSFireDispatchRace2Ended = 157987714;
simcity.kEventIDMSFireHeatWaveStarted = 778410855;
simcity.kEventIDMSFireHeatWaveEnded = 3545928668;
simcity.kEventIDMSFireSetServiceCostStarted = 91485938;
simcity.kEventIDMSFireSetServiceCostEnded = 1248852529;
simcity.kEventIDMSGarbageBuildGarbageDumpStarted = 1758388176;
simcity.kEventIDMSGarbageBuildGarbageDumpEnded = 2469043475;
simcity.kEventIDMSGarbageBuildIncineratorStarted = 2910010905;
simcity.kEventIDMSGarbageBuildIncineratorEnded = 2247551082;
simcity.kEventIDMSHealthNeedHospitalStarted = 697126268;
simcity.kEventIDMSHealthNeedHospitalEnded = 37010503;
simcity.kEventIDMSHealthNeedMoreAmbulancesStarted = 1642937820;
simcity.kEventIDMSHealthNeedMoreAmbulancesEnded = 389740199;
simcity.kEventIDMSJobsNeedJobsStarted = 2137303456;
simcity.kEventIDMSJobsNeedJobsEnded = 2832975779;
simcity.kEventIDMSPowerAddCoalTrucksStarted = 1518011911;
simcity.kEventIDMSPowerAddCoalTrucksEnded = 3683985532;
simcity.kEventIDMSPowerImportCoalStarted = 256280489;
simcity.kEventIDMSPowerImportCoalEnded = 1070429370;
simcity.kEventIDMSPowerNeedMorePowerForIndustryStarted = 2319452420;
simcity.kEventIDMSPowerNeedMorePowerForIndustryEnded = 723649919;
simcity.kEventIDMSPowerNeedPowerStarted = 934875938;
simcity.kEventIDMSPowerNeedPowerEnded = 1517886305;
simcity.kEventIDMSResidentialIncreaseW2HousingStarted = 415549630;
simcity.kEventIDMSResidentialIncreaseW2HousingEnded = 359439237;
simcity.kEventIDMSResidentialMoreHousesStarted = 25711824;
simcity.kEventIDMSResidentialMoreHousesEnded = 4195863059;
simcity.kEventIDMSTradeBuildRegionSolarFarmStarted = 294506757;
simcity.kEventIDMSTradeBuildRegionSolarFarmEnded = 1034149102;
simcity.kEventIDMSTradeBuildRoadConnectionStarted = 3254353676;
simcity.kEventIDMSTradeBuildRoadConnectionEnded = 797188375;
simcity.kEventIDMSTradeConnectToNeighbourStarted = 115887202;
simcity.kEventIDMSTradeConnectToNeighbourEnded = 1804531617;
simcity.kEventIDMSWaterNeedMoreWaterForIndustryStarted = 1874114196;
simcity.kEventIDMSWaterNeedMoreWaterForIndustryEnded = 885583;
simcity.kEventIDMSWaterNeedWaterStarted = 234740206;
simcity.kEventIDMSWaterNeedWaterEnded = 117553909;
simcity.kEventIDTBBuildingIsShaking = 4029833558;
simcity.kEventIDTBPlague = 3367041369;
simcity.kEventIDTBTornadoIsComing = 3288922175;
simcity.kEventIDBuiltTownhall = 4013458699;
simcity.kEventIDCaptureRobber = 2637104640;
simcity.kEventIDStadiumEventSucceeded = 1649716697;
simcity.kEventIDFilledVehicleBus = 3898039075;
simcity.kEventIDFilledVehicleLightTrain = 506449933;
simcity.kEventIDInviteFriend = 6;
simcity.kOriginAuthTokenEvent = 231431032;
simcity.kEventIDCityStarted = 4175299695;
simcity.kEventIDCoalPowerAskForWorkers = 3688396384;
simcity.kEventIDcrimeAtMUGGING = 1947784394;
simcity.kEventIDcrimeAtROBBERY = 565757787;
simcity.kEventIDcrimeAtSHOPLIFTING = 2704177719;
simcity.kEventIDcrimeInCrimeArea = 2443607657;
simcity.kEventIDcrimeNearMugging = 4201618457;
simcity.kEventIDcrimeNearRobbery = 3026001164;
simcity.kEventIDcrimeNearShoplifting = 606695216;
simcity.kEventIDcrimeTestPoliceMap = 2472196227;
simcity.kEventIDembezzlerHasStruck = 573755715;
simcity.kEventIDFireCostReceived = 755716355;
simcity.kEventIDSBNeighborHasJoined = 654488091;
simcity.kEventIDSBStartSolarFarmMission = 2805862549;
simcity.kEventIDSBStartSolarFarmMission2 = 3686013629;
simcity.kEventIDSBTriggerLoveSolarFarm = 756796549;
simcity.kEventIDStartCoalMineMission = 3124934327;
simcity.kEventIDStartCoalMineMission2 = 3993346599;
simcity.kEventIDTBClaimedBox = 1892373565;
simcity.kEventIDWireCoalStripMineCompleted = 3031248953;
simcity.kEventIDWireE3NeedSteelAtInternationalAirport = 708210541;
simcity.kEventIDWireInternationalAirportCompleted = 1645829750;
simcity.kEventIDWireInternationalAirportNotOperating = 2793476175;
simcity.kEventIDWorkersNeeded = 1400428281;
simcity.kEventIDGreatWorksProgress1 = 3919625440;
simcity.kEventIDGreatWorksProgress4 = 3919625445;
simcity.kEventIDGreatWorksProgress5 = 3919625444;
simcity.kEventIDMSWaterNeedWaterT2Started = 842864292;
simcity.kEventIDMSWaterNeedWaterT2Ended = 3519522591;
simcity.kEventIDdisasterThoughts = 3574064802;
simcity.kEventIDcrimeAtEMBEZZLING = 3758054231;
simcity.kEventIDcrimeAtMURDER = 2410579423;
simcity.kEventIDrobotThoughts = 2877148849;
simcity.kEventIDrobotDisasterThoughts = 3956991332;
simcity.kEventIDfireFailure = 2967416553;
simcity.kEventIDtriggerMSBadMayor = 1202235984;
simcity.kEventIDGreatWorks_JoinGreatWorksMission = 3986091572;
simcity.kEventIDGreatWorksProgress3 = 3919625442;
simcity.kEventIDInternationalAirportUnlocked = 2383687319;
simcity.kEventIDJoinInternationalAirportPrompt = 808630762;
simcity.kEventIDTKInternationalAirportNoResource = 3400880650;
simcity.kEventIDWireE3PowerSuppliedFromBlueSteel = 3697061912;
simcity.kEventIDWireE3ConnectionMade = 2110143977;
simcity.kEventIDCriminalRobberSpotted = 4059387345;
simcity.kEventIDCriminalRobberStart = 1800060862;
simcity.kEventIDRailConnectionMade = 132975974;
simcity.kEventIDInCrimeArea = 1139430117;
simcity.kEventIDJailOverCrowding = 2007252102;
simcity.kEventIDPoliceStationT1Built = 3323947924;
simcity.kEventIDStadiumTickerOnPlop = 419454250;
simcity.kEventIDPostEventTicker = 1416221879;
simcity.kEventIDcrimeAtARSON = 1363131977;
simcity.kEventIDCriminalArsonistArrested = 2202698535;
simcity.kEventIDCriminalEmbezzlingArrested = 2440412787;
simcity.kEventIDCriminalMurdererArrested = 1983022634;
simcity.kEventIDCriminalRobberArrested = 2591044086;
simcity.kEventIDWireE3RailConnectionMade = 3203410741;
simcity.kEventIDCriminalArsonistSpotted = 1637247490;
simcity.kEventIDCriminalEmbezzlerSpotted = 2494240695;
simcity.kEventIDCriminalMurdererSpotted = 3174134949;
simcity.kEventIDRegionalCriminalMurderer_StartCrime = 3376354642;
simcity.kEventIDRegionalCriminalArsonist_StartCrime = 3858100681;
simcity.kEventIDRegionalCriminalEmbezzler_StartCrime = 312831498;
simcity.kEventIDRegionalCriminalRobber_StartCrime = 932493922;
simcity.kEventIDdumpingSewage = 1323230525;
simcity.kEventIDJoinPromptJoinAirport = 3572618228;
simcity.kEventIDJoinPromptSelectAirport = 458970024;
simcity.kEventIDJoinPromptUpgradeAirport = 2745385502;
simcity.kEventIDJoinPromptSelectCoalMine = 1693685827;
simcity.kEventIDJoinPromptSelectSolarFarm = 1150630902;
simcity.kEventIDJoinPromptUpgradeCoalMine = 708816005;
simcity.kEventIDJoinPromptUpgradeSolarFarm = 2592216964;
simcity.kEventIDStartWindPowerIntro = 4092246958;
simcity.kEventIDSewageOverflow = 3430033063;
simcity.kEventIDSewageT1Built = 1795807328;
simcity.kEventIDSewageT2Built = 3393546525;
simcity.kEventIDZombieAttack = 316992591;
simcity.kEventIDtriggerNewYearsGarbageMission = 2353689678;
simcity.kEventIDSolarFarmUnlocked = 2252877243;
simcity.kEventIDJoinPromptSelectSpaceStation = 122411673;
simcity.kEventIDSpaceStationUnlocked = 2415360136;
simcity.kEventIDWireSpaceStationCompleted = 1078973235;
simcity.kEventIDJoinPromptSelectSpaceCenter = 540638900;
simcity.kEventIDSpaceCenterUnlocked = 3825521097;
simcity.kEventIDWireSpaceCenterCompleted = 2888378838;
simcity.kEventIDWireSpaceCenterComLaunch = 1037362451;
simcity.kEventIDWireSpaceCenterTVLaunch = 3898416672;
simcity.kEventIDJoinPromptUpgradeSpaceCenterSatCom = 1705793105;
simcity.kEventIDJoinPromptUpgradeSpaceCenterSatTV = 1137710236;
simcity.kEventIDCriminalArsonistStart = 2261483553;
simcity.kEventIDCriminalMurdererStart = 3904912538;
simcity.kEventIDsewageAtCapacity = 1064664786;
simcity.kEventIDWireTradeServiceTokensFireServiceTokenSent = 1741900745;
simcity.kEventIDWireTradeServiceTokensFireServiceTokenAdded = 4013206523;
simcity.kEventIDWireTradeServiceTokensFireServiceTokenRemoved = 400378925;
simcity.kEventIDCoalMineT1Built = 3756103096;
simcity.kEventIDWireTradeServiceTokensFireServiceRewardTokenConverted = 1212466338;
simcity.kEventIDlocalAirportBuilt = 3650409873;
simcity.kEventIDairportBuildRunway = 3032034438;
simcity.kEventIDWireTradeServiceTokensPoliceServiceRewardTokenConverted = 2250694568;
simcity.kEventIDWireTradeServiceTokensPoliceServiceTokenAdded = 2174741945;
simcity.kEventIDWireTradeServiceTokensPoliceServiceTokenRemoved = 3481063927;
simcity.kEventIDWireTradePowerDealCancelled = 44949430;
simcity.kEventIDWireTradePowerDealIncoming = 3871575401;
simcity.kEventIDTBLandmark = 2598631251;
simcity.kEventIDTBNoHotelAvailable = 1358237345;
simcity.kEventIDTBNoRoomAvailable = 2772268824;
simcity.kEventIDTBTouristLeavingSatisfied = 2739815955;
simcity.kEventIDMSCivicClickSpeechBubble2Ended = 3816611581;
simcity.kEventIDMSCivicClickSpeechBubble2Started = 3942703142;
simcity.kEventIDJoinPromptSelectArcology = 2971140367;
simcity.kEventIDMeltdownImminent = 706007498;
simcity.kEventIDPoliceStationT2Built = 3185588033;
simcity.kEventIDTBNoAttractionAvailable = 1829017362;
simcity.kEventIDWireTradeServiceTokensFireServiceVehicleIncoming = 3256678384;
simcity.kEventIDWireTradeServiceTokensPoliceServiceVehicleIncoming = 3302529954;
simcity.kEventIDWireTradeServiceTokensFireServiceCooldownInEffect = 143978993;
simcity.kEventIDWireTradeServiceTokensPoliceServiceCooldownInEffect = 2357815379;
simcity.kEventIDWireTradeServiceTokensGarbageServiceCooldownInEffect = 243663936;
simcity.kEventIDWireTradeServiceTokensGarbageServiceRewardTokenConverted = 1748616199;
simcity.kEventIDWireTradeServiceTokensGarbageServiceTokenAdded = 28062150;
simcity.kEventIDWireTradeServiceTokensGarbageServiceTokenRemoved = 911773884;
simcity.kEventIDWireTradeServiceTokensGarbageServiceVehicleIncoming = 3514846415;
simcity.kEventIDMSEducationBackToSchool1Ended = 3779053992;
simcity.kEventIDMSEducationBackToSchool2Ended = 142403993;
simcity.kEventIDMSEducationBackToSchool3Ended = 1835728106;
simcity.kEventIDMSEducationBackToSchool4Ended = 4237803739;
simcity.kEventIDMSEducationBackToSchool5Ended = 3708754052;
simcity.kEventIDMSEducationBackToSchool6Ended = 1736072933;
simcity.kEventIDMSEducationBackToSchool7Ended = 361091734;
simcity.kEventIDMSEducationBackToSchool8Ended = 127564247;
simcity.kEventIDMSEducationBackToSchool9Ended = 2054427376;
simcity.kEventIDWireTradeWaterDealCancelled = 489461216;
simcity.kEventIDWireTradeWaterDealIncoming = 4250344879;
simcity.kEventIDGlobalMarketTrading_ExportedAlloy = 2898299576;
simcity.kEventIDGlobalMarketTrading_ExportedCoal = 474926254;
simcity.kEventIDGlobalMarketTrading_ImportedAlloy = 1587183275;
simcity.kEventIDGlobalMarketTrading_ImportedCoal = 287576275;
simcity.kEventIDPoliceStationT2Built = 3185588033;
simcity.kEventIDGlobalMarketTrading_ExportedElectronics = 2924542324;
simcity.kEventIDGlobalMarketTrading_ExportedFuel = 3429900335;
simcity.kEventIDGlobalMarketTrading_ExportedMetal = 193037348;
simcity.kEventIDGlobalMarketTrading_ExportedOilCrude = 1029775850;
simcity.kEventIDGlobalMarketTrading_ExportedOreRaw = 1282177425;
simcity.kEventIDGlobalMarketTrading_ExportedPlastic = 3348338849;
simcity.kEventIDGlobalMarketTrading_ImportedElectronics = 1099901411;
simcity.kEventIDGlobalMarketTrading_ImportedFuel = 1727304870;
simcity.kEventIDGlobalMarketTrading_ImportedMetal = 3738475059;
simcity.kEventIDGlobalMarketTrading_ImportedOilCrude = 2999126071;
simcity.kEventIDGlobalMarketTrading_ImportedPlastic = 3785392922;
simcity.kEventIDGlobalMarketTrading_ImportedRawOre = 520003540;
simcity.kEventIDMSGameMissionChainTest1Ended = 1404879405;
simcity.kEventIDWireTradeServiceTokensPoliceServicePoliceDetectiveVanIncoming = 2019190184;
simcity.kEventIDWireTradeServiceTokensPoliceServicePoliceOutreachVanIncoming = 1380747748;
simcity.kEventIDWireTradePowerDealAgreed = 2534136553;
simcity.kEventIDWireTradeWaterDealAgreed = 4145339147;
simcity.kEventIDMeltdownReactorDestroyed = 1789551612;
simcity.kEventIDWireTradePowerDeal = 4169988249;
simcity.kEventIDWireTradePowerDealAgreedByMe = 4161782244;
simcity.kEventIDWireTradePowerDealAgreedByThem = 2592819984;
simcity.kEventIDWireTradePowerDealCancelledByMe = 891636519;
simcity.kEventIDWireTradePowerDealCancelledByThem = 2811865843;
simcity.kEventIDWireTradeWaterDealAgreedByMe = 4159173922;
simcity.kEventIDWireTradeWaterDealAgreedByThem = 4111203430;
simcity.kEventIDWireTradeWaterDealCancelledByMe = 1313581445;
simcity.kEventIDWireTradeWaterDealCancelledByThem = 2541789257;
simcity.kEventIDWireTradeWaterDealOutgoing = 662137189;
simcity.kEventIDPowerStationLowOilCrudeSupply = 3805302966;
simcity.kEventIDWireTradeNeighboringMayorArrives = 3314618110;
simcity.kEventIDWireTradeSimoleonsGiftSent = 900397201;
simcity.kEventIDWireTradeSimoleonsGiftReceived = 3559950082;
simcity.kEventIDBusT1Intro = 3330843254;
simcity.kEventIDBusT2Intro = 3904912775;
simcity.kEventIDcasinoIntro = 3074393098;
simcity.kEventIDFireT1Intro = 3316582274;
simcity.kEventIDFireT2Intro = 332313251;
simcity.kEventIDparksIntro = 4123921470;
simcity.kEventIDcollegeIntro = 1802947514;
simcity.kEventIDgarbageIntro = 2118563068;
simcity.kEventIDgradeSchoolIntro = 944946312;
simcity.kEventIDhighSchoolIntro = 3987764129;
simcity.kEventIDImExIntro = 2186527046;
simcity.kEventIDLightRailIntro = 1755779963;
simcity.kEventIDplacedFirstT1NuclearPlant = 1998223836;
simcity.kEventIDplacedFirstT1OilCrudePlant = 1238602343;
simcity.kEventIDRecyclingIntro = 395732005;
simcity.kEventIDuniversityIntro = 2553590197;
simcity.kEventIDplacedFirstT1WaterTower = 2238866005;
simcity.kEventIDplacedFirstT2WaterPlant = 3100303298;
simcity.kEventIDplacedTownHall = 864724411;
simcity.kEventIDCoalMineT2Built = 2720970485;
simcity.kEventIDplaced1stCoalHQ = 1313347690;
simcity.kEventIDplaced1stMetalPlant = 234107322;
simcity.kEventIDplaced1stOilPlant = 622630261;
simcity.kEventIDplaced1stOilWell = 1551916546;
simcity.kEventIDplacedFirstHospital = 66668510;
simcity.kEventIDplacedFirstT2Hospital = 2131472404;
simcity.kEventIDplacedT1ElectronicsFactory = 2259032198;
simcity.kEventIDOreMineT1Built = 1879779869;
simcity.kEventIDImExIntroT2 = 1493287168;
simcity.kEventIDlibraryIntro = 73701380;
simcity.kEventIDparksT2Intro = 1596170436;
simcity.kEventIDparksT3Intro = 956796539;
simcity.kEventIDImExT2Intro = 3529545772;
simcity.kEventIDplacedT1Hospital = 1325285769;
simcity.kEventIDparksT1Intro = 3880294329;
simcity.kEventIDplacedT1Ferry = 2476257921;
simcity.kEventIDplacedT2Hospital = 1417368374;
simcity.kEventIDPoliceT1Intro = 553514336;
simcity.kEventIDPoliceT2Intro = 3464105029;
simcity.kEventIDplacedCoalHQ = 363078358;
simcity.kEventIDplacedCoalPower = 2763119538;
simcity.kEventIDplacedNuclearPower = 810647251;
simcity.kEventIDplacedOilPower = 3853854589;
simcity.kEventIDplacedOreMine = 997380803;
simcity.kEventIDplacedSolarPlant = 928274828;
simcity.kEventIDplacedT2ElectronicsFactory = 2716562889;
simcity.kEventIDplacedWindFarm = 2527767176;
simcity.kEventIDplacedMayorsHouse = 3939978431;
simcity.kEventIDrailIntro = 3626887201;
simcity.kEventIDplacedMetalPlant = 2304013054;
simcity.kEventIDplacedOilPlant = 1032354185;
simcity.kEventIDplacedT1CoalMine = 3328370019;
simcity.kEventIDplacedT2CoalMine = 3970220736;
simcity.kEventIDplacedStadiumT1 = 1344496174;
simcity.kEventIDplacedStadiumT2 = 1344496173;
simcity.kEventIDplacedCasinoHQ = 3949915358;
simcity.kEventIDplacedElectronicHQ = 4170323517;
simcity.kEventIDplacedTradeHQ = 528794525;
simcity.kEventIDplacedOilHQ = 18745931;
simcity.kEventIDplacedT1Stadium = 1789096728;
simcity.kEventIDplacedT2Stadium = 1682801701;
simcity.kEventIDplacedBigBen = 3154861847;
simcity.kEventIDplacedBrandenburggate = 2875855283;
simcity.kEventIDplacedEiffelTower = 961530718;
simcity.kEventIDplacedTownHall = 864724411;
simcity.kEventIDRecyclingIntro = 395732005;
simcity.kEventIDuniversityIntro = 2553590197;
simcity.kEventIDWireTradeRegionalAirPollutionReceived = 4215758728;
simcity.kEventIDcheatingTuredOn = 2569522831;
simcity.kEventIDFullWaitingRoom = 4123946850;
simcity.kEventIDLowCoalSupply = 2512183165;
simcity.kEventIDLowOilCrudeSupply = 3787294069;
simcity.kEventIDlowOreSupply = 2157988278;
simcity.kEventIDlowPlasticSupply = 3308825294;
simcity.kEventIDlowAlloySupply = 974832851;
simcity.kEventIDLowElectronicsSupply = 1533473579;
simcity.kEventIDlowOreRawSupply = 1154032570;
simcity.kEventIDTriggerInjuryThoughtBubble = 2761019883;
simcity.kEventIDoopsFireworks = 3042872174;
simcity.kEventIDInternationalAirportIntro = 4079632590;
simcity.kEventIDArcologyIntro = 2014355773;
simcity.kEventIDSolarFarmIntro = 1503866610;
simcity.kEventIDSpaceCenterIntro = 4221569512;
simcity.kEventIDSBCriminalCreated1 = 99434240;
simcity.kEventIDSBCriminalCreated2 = 99434243;
simcity.kEventIDTBCriminalArrested = 4039494608;
simcity.kEventIDWireTradeServiceTokensHealthServiceCooldownInEffect = 2694179863;
simcity.kEventIDWireTradeServiceTokensHealthServiceRewardTokenConverted = 3909457444;
simcity.kEventIDWireTradeServiceTokensHealthServiceTokenAdded = 278757173;
simcity.kEventIDWireTradeServiceTokensHealthServiceTokenRemoved = 2028498339;
simcity.kEventIDWireTradeServiceTokensHealthServiceVehicleIncoming = 642788878;
simcity.kEventIDWireTradeServiceTokensHealthServiceVehicleCooldownInEffect = 210039051;
simcity.kEventIDAlertCityHallUpgrade = 3092605751;
simcity.kEventIDSBCriminalFlavor = 180545737;
simcity.kEventIDSBNotPickedUpByBus = 3695652149;
simcity.kEventIDSBNotPickedUpBySchoolBus = 167732761;
simcity.kEventIDgamblerSatisfied = 3187921131;
simcity.kEventIDplaneLands = 74495913;
simcity.kEventIDWireTradeServiceTokensHealthServiceSickSimsOutgoing = 34576310;
simcity.kEventIDWireTradeResourceGiftingAlloyReceived = 3014702446;
simcity.kEventIDWireTradeResourceGiftingAlloySent = 1236193741;
simcity.kEventIDWireTradeResourceGiftingCoalReceived = 3507257078;
simcity.kEventIDWireTradeResourceGiftingCoalSent = 2665834581;
simcity.kEventIDWireTradeResourceGiftingComputerReceived = 2525503284;
simcity.kEventIDWireTradeResourceGiftingComputerSent = 3761766791;
simcity.kEventIDWireTradeResourceGiftingElectronicsReceived = 2150332046;
simcity.kEventIDWireTradeResourceGiftingElectronicsSent = 3479607021;
simcity.kEventIDWireTradeResourceGiftingFuelReceived = 3315280111;
simcity.kEventIDWireTradeResourceGiftingFuelSent = 4244910428;
simcity.kEventIDWireTradeResourceGiftingMetalReceived = 1070364894;
simcity.kEventIDWireTradeResourceGiftingMetalSent = 571912381;
simcity.kEventIDWireTradeResourceGiftingOilCrudeReceived = 2246151690;
simcity.kEventIDWireTradeResourceGiftingOilCrudeSent = 1357377753;
simcity.kEventIDWireTradeResourceGiftingOreRawReceived = 1731593861;
simcity.kEventIDWireTradeResourceGiftingOreRawSent = 2805355414;
simcity.kEventIDWireTradeResourceGiftingPlasticReceived = 749303235;
simcity.kEventIDWireTradeResourceGiftingPlasticSent = 1352231952;
simcity.kEventIDWireTradeResourceGiftingTelevisionReceived = 2430323423;
simcity.kEventIDWireTradeResourceGiftingTelevisionSent = 1558485452;
simcity.kEventIDWireTradeResourceGiftingAlloyWaiting = 1576530832;
simcity.kEventIDWireTradeResourceGiftingCoalWaiting = 3427069192;
simcity.kEventIDWireTradeResourceGiftingComputerWaiting = 938214978;
simcity.kEventIDWireTradeResourceGiftingElectronicsWaiting = 1238396208;
simcity.kEventIDWireTradeResourceGiftingFuelWaiting = 2540088839;
simcity.kEventIDWireTradeResourceGiftingMetalWaiting = 2862773152;
simcity.kEventIDWireTradeResourceGiftingOilCrudeWaiting = 1591856956;
simcity.kEventIDWireTradeResourceGiftingOreRawWaiting = 2344190529;
simcity.kEventIDWireTradeResourceGiftingPlasticWaiting = 2916830987;
simcity.kEventIDWireTradeResourceGiftingTelevisionWaiting = 2867964951;
simcity.kEventIDWireTradeServiceTokensGarbageServiceAtCapacity = 1615137518;
simcity.kEventIDInternationalAirportUnlockedLocal = 4147007240;
simcity.kEventIDMSCivicGrowPopulation9EndedLocal = 1342907867;
simcity.kEventIDSolarFarmUnlockedLocal = 1866320540;
simcity.kEventIDSpaceCenterUnlockedLocal = 3462689662;
simcity.kEventIDWireSpaceArcologyCompleted = 1524943415;
simcity.kEventIDGreatWorksFire = 3422206166;
simcity.kEventIDGreatWorksInjury = 934194563;
simcity.kEventIDWireGreatWorksFireExtinguished = 2538549362;
simcity.kEventIDWireGreatWorksFireExtinguishedByNeighbors = 3478994570;
simcity.kEventIDWireGreatWorksInjuriesCleared = 3355066620;
simcity.kEventIDWireGreatWorksInjuriesClearedByNeighbor = 3091443325;
simcity.kEventIDnimbyCall = 871312520;
simcity.kEventIDnimbyCall1 = 1233328681;
simcity.kEventIDnimbyCall2 = 1233328682;
simcity.kEventIDnimbyCall3 = 1233328683;
simcity.kEventIDnimbyCall4 = 1233328684;
simcity.kEventIDnimbyCall5 = 1233328685;
simcity.kEventIDnimbyCall6 = 1233328686;
simcity.kEventIDnimbyCall7 = 1233328687;
simcity.kEventIDnimbyCall8 = 1233328672;
simcity.kEventIDnimbyCall9 = 1233328673;
simcity.kEventIDWireTradeResourceGiftingSimoleonsReceived = 2134550134;
simcity.kEventIDWireTradeResourceGiftingSimoleonsSent = 1824004053;
simcity.kEventIDWireTradeResourceGiftingSimoleonsWaiting = 380950408;
simcity.kEventIDTBNotPickedUpByBus = 1507836080;
simcity.kEventIDTBNotPickedUpByCoach = 305698128;
simcity.kEventIDTBNotPickedUpByFerry = 3910910814;
simcity.kEventIDTBNotPickedUpByLightTrain = 2487889120;
simcity.kEventIDTBNotPickedUpByTrain = 292268636;
simcity.kEventIDWireTradeServiceTokensPoliceServiceAtCapacity = 2249387993;
simcity.kEventIDWireTradeServiceTokensHealthServiceAtCapacity = 3900350469;
simcity.kEventIDSBGarbageExpandGarbageTrucks = 1801523300;
simcity.kEventIDSBGarbageNeedGarbageDump = 2841375762;
simcity.kEventIDAlertHQUpgrade = 1331151604;
simcity.kEventIDdisasterMonsterThoughts = 2504824928;
simcity.kEventIDTBBuildingIsShakingI = 1968126475;
simcity.kEventIDTBBuildingIsShakingR = 1968126480;
simcity.kEventIDTBTornadoIsComingC = 3642673998;
simcity.kEventIDTBTornadoIsComingI = 3642673988;
simcity.kEventIDTBTornadoIsComingR = 3642674015;
simcity.kEventIDTriggerInjurySpeechBubble = 201634002;
simcity.kEventIDTBPlagueC = 1201178488;
simcity.kEventIDTBPlagueI = 1201178482;
simcity.kEventIDTBPlagueR = 1201178473;
simcity.kEventIDSBSewageOverflow = 472932684;
simcity.kEventIDTBSewageOverflow = 1954144673;
simcity.kEventIDcrimeNearMurder = 3166558862;
simcity.kEventIDCriminalMuggerArrested = 162369043;
simcity.kEventIDBudgetUpdate = 234119753;
simcity.kEventIDBudgetInRed = 292097996;
simcity.kEventIDBudgetNoMoney = 3279936225;
simcity.kEventIDWireTradeServiceTokensFireServiceTokenCanGrant = 2359443595;
simcity.kEventIDWireTradeServiceTokensGarbageServiceTokenCanGrant = 1174652592;
simcity.kEventIDWireTradeServiceTokensHealthServiceTokenCanGrant = 185554269;
simcity.kEventIDWireTradeServiceTokensPoliceServiceTokenCanGrant = 2455529609;
simcity.kEventIDTradeResourceGiftingSimoleonsReceived = 3356443719;
simcity.kEventIDTradeResourceGiftingSimoleonsSent = 2169095412;
simcity.kEventIDTradeResourceGiftingSimoleonsWaiting = 972812271;
simcity.kEventIDWireTradeServiceTokensFireServiceTokenNeeded = 3191875928;
simcity.kEventIDWireTradeServiceTokensFireServiceRewardTokenConvertedFull = 4100655093;
simcity.kEventIDWireTradeServiceTokensFireServiceRewardTokenConvertedLight = 3819042126;
simcity.kEventIDWireTradeServiceTokensFireServiceVehicleIncomingFull = 2179209047;
simcity.kEventIDWireTradeServiceTokensFireServiceVehicleIncomingLight = 1019633164;
simcity.kEventIDWireTradeServiceTokensHealthServiceOutreachVehicleIncoming = 3477466969;
simcity.kEventIDWireTradeServiceTokensHealthServiceRewardTokenConvertedFull = 527284971;
simcity.kEventIDWireTradeServiceTokensHealthServiceRewardTokenConvertedLight = 1091383536;
simcity.kEventIDWireTradeServiceTokensHealthServiceSickSimsOutgoingFull = 2317981561;
simcity.kEventIDWireTradeServiceTokensHealthServiceSickSimsOutgoingLight = 754895330;
simcity.kEventIDWireTradeServiceTokensPoliceServiceRewardTokenConvertedFull = 1066921807;
simcity.kEventIDWireTradeServiceTokensPoliceServiceRewardTokenConvertedLight = 2097013508;
simcity.kEventIDWireTradeServiceTokensPoliceServiceVehicleIncomingFull = 2418364149;
simcity.kEventIDWireTradeServiceTokensPoliceServiceVehicleIncomingLight = 165657166;
simcity.kEventIDWireTradeServiceTokensGarbageServiceRewardTokenConvertedFull = 1385030164;
simcity.kEventIDWireTradeServiceTokensGarbageServiceRewardTokenConvertedLight = 489091125;
simcity.kEventIDWireTradeServiceTokensGarbageServiceVehicleIncomingFull = 714915676;
simcity.kEventIDWireTradeServiceTokensGarbageServiceVehicleIncomingLight = 2241911229;
simcity.kEventIDregionalTradeTransaction = 3931884768;
simcity.kEventIDcommutingResidentWorkerW1FromLow = 1018356190;
simcity.kEventIDcommutingResidentWorkerW1ToHigh = 3467124283;
simcity.kEventIDcommutingResidentWorkerW1ToLow = 2474060671;
simcity.kEventIDcommutingResidentWorkerW1ToMed = 1769253431;
simcity.kEventIDcommutingFreightTruckExtD1FromHigh = 2344654164;
simcity.kEventIDcommutingFreightTruckExtD1FromLow = 1205305622;
simcity.kEventIDcommutingFreightTruckExtD1FromMed = 567903298;
simcity.kEventIDcommutingFreightTruckExtD1ToHigh = 2473304163;
simcity.kEventIDcommutingFreightTruckExtD1ToLow = 2825610023;
simcity.kEventIDcommutingFreightTruckExtD1ToMed = 2389244847;
simcity.kEventIDcommutingKidFromHigh = 837100762;
simcity.kEventIDcommutingKidFromLow = 736740220;
simcity.kEventIDcommutingKidFromMed = 1374436624;
simcity.kEventIDcommutingKidToHigh = 1727318385;
simcity.kEventIDcommutingKidToLow = 835848277;
simcity.kEventIDcommutingKidToMed = 198151645;
simcity.kEventIDcommutingResidentShopperW1FromHigh = 635281231;
simcity.kEventIDcommutingResidentShopperW1FromLow = 3022974907;
simcity.kEventIDcommutingResidentShopperW1FromMed = 3660377443;
simcity.kEventIDcommutingResidentShopperW1ToHigh = 3339688296;
simcity.kEventIDcommutingResidentShopperW1ToLow = 3305824498;
simcity.kEventIDcommutingResidentShopperW1ToMed = 4010631518;
simcity.kEventIDcommutingResidentWorkerW1FromHigh = 3337463196;
simcity.kEventIDcommutingResidentWorkerW1FromMed = 649395706;
simcity.kEventIDBudgetFixed = 1326794868;
simcity.kEventIDWireTradePowerIncomingHigh = 272039023;
simcity.kEventIDWireTradePowerIncomingLow = 1299557211;
simcity.kEventIDWireTradePowerIncomingMedium = 1564911794;
simcity.kEventIDWireTradePowerOutgoingHigh = 744427913;
simcity.kEventIDWireTradePowerOutgoingLow = 2523044269;
simcity.kEventIDWireTradePowerOutgoingMedium = 3419546264;
simcity.kEventIDWireTradeWaterDealIncomingMedium = 2123788074;
simcity.kEventIDWireTradeWaterIncomingLow = 794046589;
simcity.kEventIDWireTradeWaterIncomingMedium = 2834101256;
simcity.kEventIDWireTradeWaterOutgoingHigh = 3629485403;
simcity.kEventIDWireTradeWaterOutgoingLow = 1902955551;
simcity.kEventIDWireTradeWaterOutgoingMedium = 2323216350;
simcity.kEventIDWireTradePowerOutgoingStopped = 4157819788;
simcity.kEventIDWireTradeWaterOutgoingStopped = 2800738454;
simcity.kEventIDResearchUniversityAdvancedSolarPowerUnlockReceived = 3118116995;
simcity.kEventIDResearchUniversityAdvancedSolarPowerUnlockSent = 1818965712;
simcity.kEventIDResearchUniversityCoalPowerLevel3UnlockReceived = 117525694;
simcity.kEventIDResearchUniversityCoalPowerLevel3UnlockSent = 1948498333;
simcity.kEventIDResearchUniversityDetectiveWingUnlockReceived = 1919923391;
simcity.kEventIDResearchUniversityDetectiveWingUnlockSent = 2146326444;
simcity.kEventIDResearchUniversityNuclearPowerLevel2UnlockReceived = 3563247378;
simcity.kEventIDResearchUniversityNuclearPowerLevel2UnlockSent = 3986736353;
simcity.kEventIDResearchUniversityNuclearPowerLevel3UnlockReceived = 3372460267;
simcity.kEventIDResearchUniversityNuclearPowerLevel3UnlockSent = 196003928;
simcity.kEventIDResearchUniversityNuclearPowerUnlockReceived = 2251708498;
simcity.kEventIDResearchUniversityNuclearPowerUnlockSent = 4027037473;
simcity.kEventIDResearchUniversityOilCrudePowerLevel2UnlockReceived = 664726691;
simcity.kEventIDResearchUniversityOilCrudePowerLevel2UnlockSent = 4086896624;
simcity.kEventIDResearchUniversityOilCrudePowerLevel3UnlockReceived = 1302522794;
simcity.kEventIDResearchUniversityOilCrudePowerLevel3UnlockSent = 3788916089;
simcity.kEventIDResearchUniversitySolarBatteryUnlockReceived = 594088689;
simcity.kEventIDResearchUniversitySolarBatteryUnlockSent = 3261320066;
simcity.kEventIDResearchUniversitySolarPowerUnlockReceived = 712475373;
simcity.kEventIDResearchUniversitySolarPowerUnlockSent = 1496290846;
simcity.kEventIDResearchUniversitySurgeryCenterUnlockReceived = 865181461;
simcity.kEventIDResearchUniversitySurgeryCenterUnlockSent = 2648227878;
simcity.kEventIDResearchUniversityWindBatteryUnlockReceived = 1792108298;
simcity.kEventIDResearchUniversityWindBatteryUnlockSent = 1352415705;
simcity.kEventIDResearchUniversityWindLargeTurbineUnlockReceived = 3263289223;
simcity.kEventIDResearchUniversityWindLargeTurbineUnlockSent = 360068916;
simcity.kEventIDResearchUniversityWindMediumTurbineUnlockReceived = 489908703;
simcity.kEventIDResearchUniversityWindMediumTurbineUnlockSent = 2087733452;
simcity.kEventIDWireArcologyAlloyStalled = 4031108688;
simcity.kEventIDWireArcologyCompleted = 3704729337;
simcity.kEventIDWireArcologyElectronicsStalled = 3351989520;
simcity.kEventIDWireArcologyMetalStalled = 339769440;
simcity.kEventIDWireArcologyOilCrudeStalled = 1664323620;
simcity.kEventIDWireArcologyWorkersStalled = 3009316388;
simcity.kEventIDWireInternationalAirportAlloyStalled = 3463107657;
simcity.kEventIDWireInternationalAirportMetalStalled = 3516457829;
simcity.kEventIDWireInternationalAirportOilCrudeStalled = 20670907;
simcity.kEventIDWireInternationalAirportWorkersStalled = 1751914069;
simcity.kEventIDWireSolarFarmAlloyStalled = 4254423167;
simcity.kEventIDWireSolarFarmElectronicsStalled = 189948327;
simcity.kEventIDWireSolarFarmPlasticStalled = 1219405388;
simcity.kEventIDWireSolarFarmWorkersStalled = 1609443735;
simcity.kEventIDWireSpaceCenterAlloyStalled = 4028603177;
simcity.kEventIDWireSpaceCenterComputerStalled = 3009035561;
simcity.kEventIDWireSpaceCenterMetalStalled = 996256069;
simcity.kEventIDWireSpaceCenterOilCrudeStalled = 4094198555;
simcity.kEventIDWireSpaceCenterSatelliteAlloyStalled = 423721228;
simcity.kEventIDWireSpaceCenterSatelliteElectronicsStalled = 751809044;
simcity.kEventIDWireSpaceCenterSatelliteFuelStalled = 2950072879;
simcity.kEventIDWireSpaceCenterSatelliteWorkersStalled = 51342384;
simcity.kEventIDWireSpaceCenterWorkersStalled = 1893468981;
simcity.kEventIDWireArcologyNotEnoughPower = 2598069796;
simcity.kEventIDWireArcologyNotEnoughWater = 4256661998;
simcity.kEventIDWireInternationalAirportNotEnoughPower = 1666973033;
simcity.kEventIDWireInternationalAirportNotEnoughWorkers = 1984590727;
simcity.kEventIDWireSolarFarmNotEnoughWorkers = 508337641;
simcity.kEventIDWireSpaceCenterLaunchSatellite = 812747997;
simcity.kEventIDWireSpaceCenterSatelliteLaunched = 2609853804;
simcity.kEventIDWireInternationalAirportTouristsMaxed = 4120749035;
simcity.kEventIDWireSolarFarmNotRecievingPower = 4046738029;
simcity.kEventIDWireSpaceCenterOperatingMission1Start = 3926157269;
simcity.kEventIDWireSpaceCenterOperatingMission1Success = 2738122816;
simcity.kEventIDWireSolarFarmOperatingMission1Fail = 3213653837;
simcity.kEventIDWireSolarFarmOperatingMission1Start = 1386102563;
simcity.kEventIDWireSolarFarmOperatingMission1Success = 1067401634;
simcity.kEventIDWireSpaceCenterOperatingMission1Fail = 3810487919;
simcity.kEventIDWireInternationalAirportOperatingMission1Fail = 3288367759;
simcity.kEventIDWireInternationalAirportOperatingMission1Start = 165457269;
simcity.kEventIDWireInternationalAirportOperatingMission1Success = 1607336928;
simcity.kEventIDWireGreatWorksWorkersStalled = 2552163895;
simcity.kEventIDWireGreatWorksAlloyStalled = 386334239;
simcity.kEventIDWireGreatWorksElectronicsStalled = 2287756871;
simcity.kEventIDWireGreatWorksOilCrudeStalled = 2676572717;
simcity.kEventIDWireGreatWorksMetalStalled = 4247238887;
simcity.kEventIDWireGreatWorksPlasticStalled = 741629676;
simcity.kEventIDWireGreatWorksSatelliteFuelStalled = 2851900225;
simcity.kEventIDWireGreatWorksNotEnoughPower = 4157790255;
simcity.kEventIDWireGreatWorksNotEnoughWater = 3939880177;
simcity.kEventIDWireGreatWorksNotEnoughWorkers = 83638153;
simcity.kEventIDWireGreatWorksRegionalBuildingActiveFailed = 2776390503;
simcity.kEventIDWireGreatWorksRegionalPowerOperatingFailed = 3171144225;
simcity.kEventIDWireGreatWorksRegionalWaterOperatingFailed = 2062849511;
simcity.kEventIDMSBusinessOilOilFields6Ended = 1039055558;
simcity.kEventIDMSBusinessOilOilFields11Ended = 2286869602;
simcity.kEventIDCoalDeliveryMadeFromProducer = 3107856713;
simcity.kEventIDElectronicsDeliveryMadeFromProducer = 818873759;
simcity.kEventIDFuelDeliveryMadeFromProducer = 80209500;
simcity.kEventIDMetalDeliveryMadeFromProducer = 862426047;
simcity.kEventIDOilCrudeDeliveryMadeFromProducer = 3896009489;
simcity.kEventIDOreRawDeliveryMadeFromProducer = 2690450166;
simcity.kEventIDPlasticDeliveryMadeFromLocalProducer = 3108287611;
simcity.kEventIDCoalDeliveryMadeFromGlobalMarket = 4218081070;
simcity.kEventIDOilCrudeDeliveryMadeFromGlobalMarket = 4213085462;
simcity.kEventIDHQCityHallEducationIsOnUnlockReceived = 2167306996;
simcity.kEventIDHQCityHallEducationIsOnUnlockSent = 296702791;
simcity.kEventIDHQCityHallFinanceIsOnUnlockReceived = 1013991476;
simcity.kEventIDHQCityHallFinanceIsOnUnlockSent = 788503175;
simcity.kEventIDHQCityHallSafetyIsOnUnlockReceived = 902874420;
simcity.kEventIDHQCityHallSafetyIsOnUnlockSent = 3114420103;
simcity.kEventIDHQCityHallTourismIsOnUnlockReceived = 256022521;
simcity.kEventIDHQCityHallTourismIsOnUnlockSent = 3485815114;
simcity.kEventIDHQCityHallTransportationIsOnUnlockReceived = 836684252;
simcity.kEventIDHQCityHallTransportationIsOnUnlockSent = 2865422159;
simcity.kEventIDHQCityHallUtilitiesIsOnUnlockReceived = 2326840166;
simcity.kEventIDHQCityHallUtilitiesIsOnUnlockSent = 4039290501;
simcity.kEventIDWireTradePowerSold = 2234484777;
simcity.kEventIDWireTradeWaterSold = 1532002531;
simcity.kEventIDMSBusinessElectronicsZTronix10Ended = 2180924865;
simcity.kEventIDMSBusinessElectronicsZTronix11Ended = 3497174034;
simcity.kEventIDMSBusinessElectronicsZTronix12Ended = 2923709015;
simcity.kEventIDMSBusinessElectronicsZTronix1Ended = 714005039;
simcity.kEventIDMSBusinessElectronicsZTronix2Ended = 58574474;
simcity.kEventIDMSBusinessElectronicsZTronix3Ended = 2660321081;
simcity.kEventIDMSBusinessElectronicsZTronix4Ended = 1507246372;
simcity.kEventIDMSBusinessElectronicsZTronix5Ended = 2036296059;
simcity.kEventIDMSBusinessElectronicsZTronix6Ended = 1670644022;
simcity.kEventIDMSBusinessElectronicsZTronix7Ended = 3087201669;
simcity.kEventIDMSBusinessElectronicsZTronix8Ended = 4147886736;
simcity.kEventIDMSBusinessElectronicsZTronix9Ended = 2179343991;
simcity.kEventIDWireGreatWorksCostRefunded = 1394842079;
simcity.kEventIDBasicUtilitiesUnlocked = 2798332768;
simcity.kEventIDDisasterBigLizard = 1347975906;
simcity.kEventIDDisasterMeltdown = 3225811206;
simcity.kEventIDDisasterMeteor = 2542472204;
simcity.kEventIDDisasterPlague = 3857138918;
simcity.kEventIDDisasterRobot = 4281559900;
simcity.kEventIDDisasterTornado = 1686144419;
simcity.kEventIDDisasterUFO = 3049827944;
simcity.kEventIDDisasterZombie = 3745587666;
simcity.kEventIDTBNoPower = 850563797;
simcity.kEventIDTBNoWater = 4101975507;
simcity.kEventIDHQCasinoEntertainmentIsOnUnlockReceived = 3229982503;
simcity.kEventIDHQCasinoEntertainmentIsOnUnlockSent = 293762772;
simcity.kEventIDHQCasinoGamesIsOnUnlockReceived = 3471514620;
simcity.kEventIDHQCasinoGamesIsOnUnlockSent = 3293942639;
simcity.kEventIDHQCasinoIsOnUnlockReceived = 223162703;
simcity.kEventIDHQCasinoIsOnUnlockSent = 2058662332;
simcity.kEventIDHQCasinoLodgingIsOnUnlockReceived = 3139374469;
simcity.kEventIDHQCasinoLodgingIsOnUnlockSent = 42789526;
simcity.kEventIDHQElectronicsCommerceIsOnUnlockReceived = 488998310;
simcity.kEventIDHQElectronicsCommerceIsOnUnlockSent = 1000001221;
simcity.kEventIDHQElectronicsConsumerElectronicsIsOnUnlockReceived = 3339309328;
simcity.kEventIDHQElectronicsConsumerElectronicsIsOnUnlockSent = 569481875;
simcity.kEventIDHQElectronicsIsOnUnlockReceived = 1445541587;
simcity.kEventIDHQElectronicsIsOnUnlockSent = 2844209440;
simcity.kEventIDHQMiningCommerceIsOnUnlockReceived = 214014959;
simcity.kEventIDHQMiningCommerceIsOnUnlockSent = 2673439836;
simcity.kEventIDHQMiningEngineeringIsOnUnlockReceived = 3065292143;
simcity.kEventIDHQMiningEngineeringIsOnUnlockSent = 898033116;
simcity.kEventIDHQMiningIsOnUnlockReceived = 320870250;
simcity.kEventIDHQMiningIsOnUnlockSent = 1674394937;
simcity.kEventIDHQMiningRndIsOnUnlockReceived = 4119722366;
simcity.kEventIDHQMiningRndIsOnUnlockSent = 2994741597;
simcity.kEventIDHQOilCommerceIsOnUnlockSent = 3991231920;
simcity.kEventIDHQOilIsOnUnlockSent = 3742490997;
simcity.kEventIDHQOilRndIsOnUnlockSent = 3344725265;
simcity.kEventIDHQTradeElectronicsIsOnUnlockReceived = 3236061377;
simcity.kEventIDHQTradeElectronicsIsOnUnlockSent = 3685232210;
simcity.kEventIDHQTradeIsOnUnlockReceived = 4038079920;
simcity.kEventIDHQTradeIsOnUnlockSent = 4059569459;
simcity.kEventIDHQTradeMetalsIsOnUnlockReceived = 1705678572;
simcity.kEventIDHQTradeMetalsIsOnUnlockSent = 3463571167;
simcity.kEventIDHQTradePetroleumIsOnUnlockReceived = 2542308469;
simcity.kEventIDHQTradePetroleumIsOnUnlockSent = 612522118;
simcity.kEventIDHQCityHallIsOnUnlockReceived = 32372890;
simcity.kEventIDHQCityHallIsOnUnlockSent = 3809844265;
simcity.kEventIDBudgetSaveForUtilities = 3491343762;
simcity.kEventIDTBgoodProfitCommercial = 2176656392;
simcity.kEventIDTBnoProfitCommercial = 1323246242;
simcity.kEventIDTBgoodProfitIndustrial = 2953178983;
simcity.kEventIDTBnoProfitIndustrial = 4152608629;
simcity.kEventIDWireTradeWaterIncomingHigh = 2737418649;
simcity.kEventIDWireTradeServiceTokensRecyclingEffectFromOtherCity = 2591371939;
simcity.kEventIDWireTradeServiceTokensRecyclingTrucksIncoming = 686752831;
simcity.kEventIDBudgetPetroleumSpecialtyReport = 3806113539;
simcity.kEventIDBudgetMetalSpecialtyReport = 4056021231;
simcity.kEventIDBudgetElectronicsSpecialtyReport = 2190777279;
simcity.kEventIDBudgetTradeSpecialtyReport = 1053008090;
simcity.kEventIDBudgetCasinoSpecialtyReport = 2216564935;
simcity.kEventIDHQCityHallLevel2IsOnUnlockReceived = 3414636374;
simcity.kEventIDHQCityHallLevel2IsOnUnlockSent = 1601112245;
simcity.kEventIDArcologyUnlockedLocal = 553803811;
simcity.kEventIDWireTradeSewageExportAllowedIncomingHigh = 3492598502;
simcity.kEventIDWireTradeSewageExportAllowedOutgoingHigh = 1915414808;
simcity.kEventIDWireTradeSewageExportAllowedIncomingLow = 3248744848;
simcity.kEventIDWireTradeSewageExportAllowedIncomingMed = 2544231940;
simcity.kEventIDWireTradeSewageExportAllowedOutgoingLow = 338868450;
simcity.kEventIDWireTradeSewageExportAllowedOutgoingMed = 4264875246;
simcity.kEventIDTBTaxLevelHigh = 4234378480;
simcity.kEventIDTBTaxLevelLow = 2683032218;
simcity.kEventIDdesireUpgradeC = 845090828;
simcity.kEventIDdesireUpgradeI = 845090822;
simcity.kEventIDdesireUpgradeR = 845090845;
simcity.kEventIDconstructionStartedTB = 1517578755;
simcity.kEventIDhappinessWaveTB = 856399965;
simcity.kEventIDresidentSimEnteredBuildingTB = 7905069;
simcity.kEventIDshopperSimEnteredBuildingTB = 2447198374;
simcity.kEventIDTBHealthOutreachDone = 1809375424;
simcity.kEventIDTBHomelessGuy = 3332678242;
simcity.kEventIDTBInjuryHealed = 2550243007;
simcity.kEventIDTBKidsAtPark = 1396428347;
simcity.kEventIDTBKidsAtSchoolE2 = 3793775006;
simcity.kEventIDTBKidsAtSchoolE3 = 3793775007;
simcity.kEventIDTBKidsGoToEducationE2 = 721908184;
simcity.kEventIDTBKidsGoToParkKid = 4134375427;
simcity.kEventIDTBKidsGoToTradeEducationE2 = 2633913636;
simcity.kEventIDTBSickArrive = 3751144848;
simcity.kEventIDTBSickHealed = 2401798432;
simcity.kEventIDworkerSimEnteredBuildingTB = 160683443;
simcity.kEventIDTBGarbageTruckDone = 3911881381;
simcity.kEventIDTBPeopleGoToExtraShop = 1600552883;
simcity.kEventIDTBPeopleGoToExtraWork = 2686547328;
simcity.kEventIDTBPeopleGoToShop = 2686740039;
simcity.kEventIDTBPeopleGoToStadium = 92148580;
simcity.kEventIDTBPeopleGoToToyWork = 1721039082;
simcity.kEventIDTBPeopleGoToTradeShop = 3055238667;
simcity.kEventIDTBPeopleGoToTradeWork = 3862345688;
simcity.kEventIDTBPeopleGoToWork = 1902448476;
simcity.kEventIDTBStudentE3Home = 1322986213;
simcity.kEventIDTBStadiumEventHappening = 84390032;
simcity.kEventIDWireTradeServiceTokensServiceFireHelicopterIncoming = 1849816363;
simcity.kEventIDWireTradeServiceTokensServicePoliceHelicopterIncoming = 142759929;
simcity.kEventIDSBNeedConnection = 1118327298;
simcity.kEventIDrobotDisasterThoughtsC = 2912361487;
simcity.kEventIDrobotDisasterThoughtsI = 2912361477;
simcity.kEventIDrobotDisasterThoughtsR = 2912361502;
simcity.kEventIDTKGovernmentFirstComW1D2 = 1706339152;
simcity.kEventIDTKGovernmentFirstComW1D3 = 1706339153;
simcity.kEventIDTKGovernmentFirstComW2D1 = 2008189200;
simcity.kEventIDTKGovernmentFirstComW2D2 = 2008189203;
simcity.kEventIDTKGovernmentFirstComW2D3 = 2008189202;
simcity.kEventIDTKGovernmentFirstComW3D1 = 1370492553;
simcity.kEventIDTKGovernmentFirstComW3D2 = 1370492554;
simcity.kEventIDTKGovernmentFirstComW3D3 = 1370492555;
simcity.kEventIDTKGovernmentFirstIndW1D2 = 4269770864;
simcity.kEventIDTKGovernmentFirstIndW1D3 = 4269770865;
simcity.kEventIDTKGovernmentFirstIndW2D1 = 276550448;
simcity.kEventIDTKGovernmentFirstIndW2D2 = 276550451;
simcity.kEventIDTKGovernmentFirstIndW2D3 = 276550450;
simcity.kEventIDTKGovernmentFirstIndW3D1 = 3933821097;
simcity.kEventIDTKGovernmentFirstIndW3D2 = 3933821098;
simcity.kEventIDTKGovernmentFirstIndW3D3 = 3933821099;
simcity.kEventIDTKGovernmentFirstResW1D2 = 3886424745;
simcity.kEventIDTKGovernmentFirstResW1D3 = 3886424744;
simcity.kEventIDTKGovernmentFirstResW2D1 = 3047102481;
simcity.kEventIDTKGovernmentFirstResW2D2 = 3047102482;
simcity.kEventIDTKGovernmentFirstResW2D3 = 3047102483;
simcity.kEventIDTKGovernmentFirstResW3D1 = 3684799160;
simcity.kEventIDTKGovernmentFirstResW3D2 = 3684799163;
simcity.kEventIDTKGovernmentFirstResW3D3 = 3684799162;
simcity.kEventIDBudgetInRedCrisis = 2862522295;
simcity.kEventIDAliensHitCity = 1869765365;
simcity.kEventIDEarthquakeHitCity = 2946006796;
simcity.kEventIDTBDisasterBigLizard = 1921934112;
simcity.kEventIDTBMeteor1 = 2208232020;
simcity.kEventIDTBQuake1 = 4134455947;
simcity.kEventIDTBQuake2 = 4134455944;
simcity.kEventIDTBQuake3 = 4134455945;
simcity.kEventIDTBTornado1 = 1902641071;
simcity.kEventIDTBTornado2 = 1902641068;
simcity.kEventIDTBTornado3 = 1902641069;
simcity.kEventIDTKBigLizardEnded = 1323680520;
simcity.kEventIDTKEarthquakeEnded = 1606613579;
simcity.kEventIDTKGiantRobotEnded = 1678288329;
simcity.kEventIDTKMeltdownEnded = 849218788;
simcity.kEventIDTKMeteorShowerEnded = 158623644;
simcity.kEventIDTKTornadoEnded = 2497225335;
simcity.kEventIDTKUFOEnded = 3218687294;
simcity.kEventIDTKZombieEnd = 3410603091;
simcity.kEventIDWireTradeServiceTokensRecyclingServiceTokenCanGrant = 2585087251;
simcity.kEventIDplacedMayorsHouseSmall = 2523864220;
simcity.kEventIDSBBombCreated = 1023867910;
simcity.kEventIDTBBombFound = 4195652213;
simcity.kEventIDTBFireInspector = 575657826;
simcity.kEventIDNuclearLowSkill = 2937274104;
simcity.kEventIDResearchUniversityHazMatGarageUnlockReceived = 104362725;
simcity.kEventIDResearchUniversityHazMatGarageUnlockSent = 2754023926;
simcity.kEventIDtkCasinoSpecialize = 2126793774;
simcity.kEventIDtkCoalSpecialize = 344128374;
simcity.kEventIDtkEducationSpecialize = 3162950861;
simcity.kEventIDtkElectronicsSpecialize = 3485381822;
simcity.kEventIDtkOilSpecialize = 4233742703;
simcity.kEventIDtkOreSpecialize = 2199591307;
simcity.kEventIDtkTradeSpecialize = 3241423309;
simcity.kEventIDMSBusinessElectronicsZTronix13Ended = 555604848;
simcity.kEventIDMSBusinessElectronicsZTronix2Started = 2417386553;
simcity.kEventIDMSBusinessElectronicsZTronix4Started = 2237690367;
simcity.kEventIDMSBusinessElectronicsZTronix6Started = 4014134237;
simcity.kEventIDMSBusinessElectronicsZTronix7Started = 592687806;
simcity.kEventIDMSBusinessGamblingBigGamble17Ended = 1816067128;
simcity.kEventIDMSBusinessGamblingBigGamble1Started = 1595331192;
simcity.kEventIDMSBusinessGamblingBigGamble4MuggingComplete = 3990571085;
simcity.kEventIDMSBusinessGamblingBigGamble4Started = 1119856555;
simcity.kEventIDMSBusinessGamblingBigGamble8Started = 3289957511;
simcity.kEventIDMSBusinessGamblingBigGamble9RobberyComplete = 1121631731;
simcity.kEventIDMSBusinessMetalsCoalTown10Ended = 611741879;
simcity.kEventIDMSBusinessMetalsCoalTown1Started = 389610818;
simcity.kEventIDMSBusinessMetalsCoalTown4Started = 3057508149;
simcity.kEventIDMSBusinessMetalsCoalTown5EarthquakeComplete = 3529811841;
simcity.kEventIDMSBusinessMetalsCoalTown8Started = 2213573849;
simcity.kEventIDMSBusinessOilOilFields13Ended = 3215913152;
simcity.kEventIDMSBusinessOilOilFields1Started = 355747780;
simcity.kEventIDMSBusinessOilOilFields3Started = 4069684218;
simcity.kEventIDMSBusinessOilOilFields5FireComplete = 980995476;
simcity.kEventIDMSBusinessOilOilFields8Started = 4075518179;
simcity.kEventIDMSBusinessOilOilFields9Started = 1822446140;
simcity.kEventIDMSEducationBackToSchool10Started = 3912979267;
simcity.kEventIDMSEducationBackToSchool1Started = 1352952059;
simcity.kEventIDMSEducationBackToSchool4Started = 1086865800;
simcity.kEventIDMSEducationBackToSchool5Started = 3755975519;
simcity.kEventIDMSEducationBackToSchool6Started = 650782;
simcity.kEventIDMSEducationBackToSchool7Started = 2679869757;
simcity.kEventIDMSEducationBackToSchool8Started = 3560657356;
simcity.kEventIDTKSandboxMode = 1271082866;
simcity.kEventIDSandBoxAbandonedDisabled = 3172445582;
simcity.kEventIDSandBoxAbandonedEnabled = 3024572645;
simcity.kEventIDSandBoxAirPollutionDisabled = 1664877296;
simcity.kEventIDSandBoxAirPollutionEnabled = 813626371;
simcity.kEventIDSandBoxCrimeDisabled = 3045040548;
simcity.kEventIDSandBoxCrimeEnabled = 452126727;
simcity.kEventIDSandBoxFireDisabled = 3102886986;
simcity.kEventIDSandBoxFireEnabled = 938476001;
simcity.kEventIDSandBoxGarbageDisabled = 3451080315;
simcity.kEventIDSandBoxGarbageEnabled = 793375054;
simcity.kEventIDSandBoxGroundPollutionDisabled = 4146082347;
simcity.kEventIDSandBoxGroundPollutionEnabled = 2500531390;
simcity.kEventIDSandBoxHealthDisabled = 108845600;
simcity.kEventIDSandBoxHealthEnabled = 1040548979;
simcity.kEventIDSandBoxHomelessDisabled = 2931558408;
simcity.kEventIDSandBoxHomelessEnabled = 3044592107;
simcity.kEventIDSandBoxSewageDisabled = 3738875514;
simcity.kEventIDSandBoxSewageEnabled = 2683538385;
simcity.kEventIDstartHazmatFire = 2021150154;
simcity.kEventIDTBCantPutOutFires = 208561639;
simcity.kEventIDDrVuCaptured = 3698925310;
simcity.kEventIDDrVuEscaped = 2867731663;
simcity.kEventIDWireTradePowerIncomingStart = 2763154245;
simcity.kEventIDWireTradePowerIncomingStopped = 2945415290;
simcity.kEventIDWireTradePowerOutgoingStart = 2874050975;
simcity.kEventIDWireTradeSewageExportAllowedIncomingStart = 436794662;
simcity.kEventIDWireTradeSewageExportAllowedIncomingStopped = 2597422333;
simcity.kEventIDWireTradeSewageExportAllowedOutgoingStart = 4205117752;
simcity.kEventIDWireTradeSewageExportAllowedOutgoingStopped = 2346385127;
simcity.kEventIDWireTradeWaterIncomingStart = 3119121743;
simcity.kEventIDWireTradeWaterIncomingStopped = 3857351228;
simcity.kEventIDWireTradeWaterOutgoingStart = 2064983649;
simcity.kEventIDMSBusinessMetalsCoalTown14Ended = 1108413795;
simcity.kEventIDMSBusinessTradeFreeMarket13Ended = 530157819;
simcity.kEventIDMSEducationBackToSchool10Ended = 1503012992;
simcity.kEventIDArcologyUnlocked = 2057105206;
simcity.kEventIDEventBlimpT1SentToEvent = 1268970863;
simcity.kEventIDEventBlimpT1SentToLandmark = 2381695017;
simcity.kEventIDNissanChargingStationPlaced = 2016919735;
simcity.databindings.DataBindingsRegionView = {};
simcity.RegionViewGeneric = {
  queries : function (a) {
    return {
      unitID : [simcity.kDataUnits, a.mUnitRef, simcity.kDataPropKey]
    }
  },
  update : function (a, b) {
    a.mUnitID = b.unitID.instance;
    switch (a.mUnitID) {
    case simcity.kUnitID_Trading_City_Marker:
      a.mDataBinding = new simcity.RegionViewCity;
      a.mViewUnitType = simcity.RegionUnitTypes.CITY;
      break;
    default:
      a.mDataBinding = new simcity.RegionViewGreatWork,
      a.mViewUnitType = simcity.RegionUnitTypes.GREATWORK
    }
  }
};
simcity.RegionViewCity = function () {
  return {
    queries : function (a) {
      a = a.mUnitRef;
      return {
        name : [simcity.kDataUnits, a, simcity.kDataNonSimProperties, simcity.kPropSCUnitName],
        regionalBoxUniqueID : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceRegionalBoxUniqueID]
      }
    },
    update : function (a, b) {
      var c = a.mUnitRef;
      if (b) {
        var d = b.regionalBoxUniqueID.amount.toString(),
        e = simcity.gGlobalUIHandler.mAPIServerDataUIHandler.GetBoxByRegionID(d);
        simcity.gGlobalUIHandler.mAPIServerDataUIHandler.SetBoxData(e, {
          unitRef : c
        });
        a.pollServer =
          !0;
        a.mRegionalBoxID = b.regionalBoxUniqueID.amount;
        c = simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData;
        c.mRegionUnitsLookup.hasOwnProperty(d) ? (c.mRegionUnitsLookup[d].localUnitRef = a.mUnitRef, c.mRegionUnitsLookup[d].type = simcity.RegionUnitTypes.CITY) : c.mRegionUnitsLookup[d] = new simcity.RegionUnit({
            localUnitRef : a.mUnitRef,
            type : simcity.RegionUnitTypes.CITY
          })
      }
      return 0
    }
  }
};
simcity.RegionViewGreatWork = function () {
  return {
    allowNullResults : !0,
    data : {
      name : "",
      unitID : 0,
      underConstruction : !1,
      isSelected : !1,
      progressflag : 0,
      openForBusiness : !1,
      activeBuilding : !1,
      workersUpkeep : 0,
      powerUpkeep : 0,
      powerOperational : !1,
      waterOperational : !1,
      isOperating : !1,
      enoughWorkers : 0,
      touristRating : 0,
      population : 0,
      touristW2 : 0,
      touristW3 : 0,
      cargoT1 : 0,
      cargoT2 : 0,
      passengerT2 : 0,
      closedByMission : 0,
      bypassOperational : 0,
      powerGenerated : 0,
      powerUsed : 0,
      powerToggle : 0,
      regionalBoxUniqueID : 0,
      constructionStage : 0,
      greatWorksOperationalStage : 0,
      missionProgress : 0,
      localMissionProgress : 0,
      regionalConstructionWorkersTotal : 0,
      buildingSatellite : 0,
      activeSatelliteLaunch : 0,
      workersW1 : 0,
      workersW2 : 0,
      workersW3 : 0,
      shoppersW1 : 0,
      shoppersW2 : 0,
      shoppersW3 : 0,
      money : 0,
      level : 0,
      isOperationalStage : !1,
      kidsToSend : 0,
      spaceCenterOperatingPhase : 0,
      spaceCenterConstructionTimer : 0,
      spaceCenterLaunchTimer : 0
    },
    queries : function (a) {
      a = a.mUnitRef;
      return {
        name : [simcity.kDataUnits, a, simcity.kDataNonSimProperties, simcity.kPropSCUnitName],
        unitID : [simcity.kDataUnits, a, simcity.kDataPropKey],
        underConstruction : [simcity.kDataUnits, a, simcity.kDataFlags, simcity.kUnitFlagGreatWorksConstructionSite],
        isSelected : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDIsSelected],
        progressflag : [simcity.kDataUnits, a, simcity.kDataFlags, simcity.kUnitFlagProgressAllowed],
        openForBusiness : [simcity.kDataUnits, a, simcity.kDataFlags, simcity.kUnitFlagOpenForBusiness],
        activeBuilding : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDRegionalBuildingActive],
        workersUpkeep : [simcity.kDataUnits, a, simcity.kDataBins,
          simcity.kResourceIDRegionalWorkersTotal],
        powerUpkeep : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDRegionalPowerTotal],
        waterUpkeep : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDRegionalWaterTotal],
        enoughWorkers : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDRegionalBuildingActive],
        powerOperational : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDRegionalPowerOperating],
        waterOperational : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDRegionalWaterOperating],
        isOperating : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDGreatWorksOperational],
        touristRating : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDRegionalAttractionLevelTotal],
        population : [simcity.kDataBins, simcity.kResourceIDTotalResidential],
        touristW2 : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDTrackingTouristW2],
        touristW3 : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDTrackingTouristW3],
        potentialTouristW2 : [simcity.kDataUnits, a, simcity.kDataBins,
          simcity.kResourceIDTrackingPotentialTouristW2],
        potentialTouristW3 : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDTrackingPotentialTouristW3],
        cargoT1 : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDTrackingCargoAirplaneT1],
        cargoT2 : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDTrackingCargoAirplaneT2],
        freight : [simcity.kDataConnectedUnits, a, simcity.kDataBins, simcity.kResourceIDFreight],
        passengerT2 : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDTrackingPassengerAirplaneT2],
        closedByMission : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDGreatWorksOperatingMissionInProgress],
        bypassOperational : [simcity.kDataBins, simcity.kResourceIDBypassOperationalCheck],
        powerGenerated : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDPowerToTransmit],
        powerUsed : [simcity.kDataBins, simcity.kResourceIDGreatWorkImportedPowerCounter],
        powerToggle : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDReceivingPowerFromSolarFarm],
        regionalBoxUniqueID : [simcity.kDataUnits,
          a, simcity.kDataBins, simcity.kResourceRegionalBoxUniqueID],
        constructionStage : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDGWConstructionStage],
        greatWorksOperationalStage : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDGWOperationalStage],
        missionProgress : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDMissionProgressDisplay],
        localMissionProgress : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDLocalMissionProgress],
        regionalConstructionWorkersTotal : [simcity.kDataUnits,
          a, simcity.kDataBins, simcity.kResourceIDGWRegionalConstructionWorkersTotal],
        regionalConstructionWorkersSent : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDGWRegionalConstructionWorkersSent],
        buildingSatellite : [simcity.kDataBins, simcity.kResourceIDBuildingSatellite],
        activeSatelliteLaunch : [simcity.kDataBins, simcity.kResourceIDActiveSatelliteLaunch],
        workersW1 : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDResidentWorkerW1],
        workersW2 : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDResidentWorkerW2],
        workersW3 : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDResidentWorkerW3],
        shoppersW1 : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDResidentShopperW1],
        shoppersW2 : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDResidentShopperW2],
        shoppersW3 : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDResidentShopperW3],
        money : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDMoneyToken],
        level : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDArcologyPopulationLevel],
        spaceCenterTouristW1 : [simcity.kDataConnectedUnits, a, simcity.kDataBins, simcity.kResourceIDTouristW1],
        spaceCenterTouristW2 : [simcity.kDataConnectedUnits, a, simcity.kDataBins, simcity.kResourceIDTouristW2],
        spaceCenterTouristW3 : [simcity.kDataConnectedUnits, a, simcity.kDataBins, simcity.kResourceIDTouristW3],
        kidsToSend : [simcity.kDataConnectedUnits, a, simcity.kDataBins, simcity.kResourceIDKidToSend],
        spaceCenterOperatingPhase : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDSpaceCenterOperatingPhase],
        spaceCenterConstructionTimer : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDSpaceCenterLaunchAvailable],
        spaceCenterLaunchTimer : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDMissionCountdownClock]
      }
    },
    update : function (a, b) {
      if (b && b.unitID) {
        b.name && (a.mUnitName = b.name);
        for (var c = a.mUnitRef, d = [], e = Object.keys(b), f = 0, g = e.length; f < g; f++) {
          var h = e[f],
          i = b[h];
          this.data[h] = i;
          d[h] = i
        }
        b.regionalBoxUniqueID && 0 !== b.regionalBoxUniqueID.amount && (e = b.regionalBoxUniqueID.amount.toString(), f = simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData,
          f.mRegionUnitsLookup.hasOwnProperty(e) ? (f.mRegionUnitsLookup[e].localUnitRef = a.mUnitRef, f.mRegionUnitsLookup[e].type = simcity.RegionUnitTypes.GREATWORK, f.mGreatWorksLocal[c] && (f.mGreatWorksLocal[c].data = d)) : f.mRegionUnitsLookup[e] = new simcity.RegionUnit({
              localUnitRef : a.mUnitRef,
              type : simcity.RegionUnitTypes.GREATWORK
            }));
        return b.unitID.instance
      }
      return null
    }
  }
};
simcity.kGreatWorkPrerequisiteText_NeedEducation = new scrui.cLocaleString("Missions.json", "0x0c105aec", "NeedEducation");
simcity.kGreatWorkPrerequisiteText_CannotAffordSolarFarm = new scrui.cLocaleString("Missions.json", "0x0c105aed", "CannotAffordSolarFarm");
simcity.kGreatWorkPrerequisiteText_CannotAffordInternationalAirport = new scrui.cLocaleString("Missions.json", "0x0e9cc48d", "CannotAffordIntAirport");
simcity.kGreatWorkPrerequisiteText_CannotAffordSpaceCenter = new scrui.cLocaleString("Missions.json", "0x0e9cc490", "CannotAffordSpaceCenter");
simcity.kGreatWorkPrerequisiteText_CannotAffordArcology = new scrui.cLocaleString("Missions.json", "0x0e9cc493", "CannotAffordArcology");
simcity.kGreatWorkPrerequisiteText_AlreadySelected = new scrui.cLocaleString("Missions.json", "0x0c101aee", "AlreadySelected");
simcity.kGreatWorkPrerequisiteText_AlreadySelected2 = new scrui.cLocaleString("Missions.json", "0x0c101aef", "AlreadySelected2");
simcity.kGreatWorkPrerequisiteText_PopulationLow = new scrui.cLocaleString("Missions.json", "0x0c105aef", "PopLow");
simcity.kGreatWorkPrerequisiteText_NeedHQ = new scrui.cLocaleString("Missions.json", "0x0c105aff", "NeedHQ");
simcity.kGreatWorkPrerequisiteText_NeedLocalAirport = new scrui.cLocaleString("Missions.json", "0x0db26e1e", "NeedLocalAirport");
simcity.kGreatWorkPrerequisiteText_NeedResearchAndElectronics = new scrui.cLocaleString("Missions.json", "0x0df1c0c7", "NeedEducationPart2");
simcity.GreatWorkSolarFarm = {
  nameText : new scrui.cLocaleString("Missions.json", "0x0edd9daa", "Solar Farm"),
  descriptionText : new scrui.cLocaleString("Tools.json", "0x0e702fc9", "Solar Farm Description"),
  thumbnail : "Graphics/Region/t_greatworks_solarfarm.png",
  marqueeImage : "Graphics/Palette_Preview_Images/Greatworks_solarfarm.png",
  headerIcon : "Graphics/Icons/TradeIcons/icn-greatworks-solarfarm.png",
  benefitsArray : [{
      icon : "Graphics/Icons/TradeIcons/icn-trade-power.png",
      altIcon : "Graphics/Icons/TradeIcons/icn-trade-power-celebration.png",
      localeString : new scrui.cLocaleString("RegionView.json", "0x0eebee40", "Improved Regional Power")
    }
  ],
  constructionMaterialsArray : [{
      icon : "Graphics/Icons/TradeIcons/icn-trade-plastic.png",
      localeString : new scrui.cLocaleString("Missions.json", "0x0d96a975"),
      titleString : new scrui.cLocaleString("Missions.json", "0x0d96a985"),
      localeObj : {
        objective_amount : 115E4
      },
      resourceType : 2
    }, {
      icon : "Graphics/Icons/TradeIcons/icn-trade-alloy.png",
      localeString : new scrui.cLocaleString("Missions.json", "0x0d96a974"),
      titleString : new scrui.cLocaleString("Missions.json",
        "0x0d96a984"),
      localeObj : {
        objective_amount : 6E5
      },
      resourceType : 1
    }, {
      icon : "Graphics/Icons/TradeIcons/icn-trade-electronics.png",
      localeString : new scrui.cLocaleString("Missions.json", "0x0d96a976"),
      titleString : new scrui.cLocaleString("Missions.json", "0x0d96a986"),
      localeObj : {
        objective_amount : 45E4
      },
      resourceType : 2
    }
  ],
  constructionWorkersNeeded : 300,
  maintenanceCost : 300,
  text : new scrui.cLocaleString("Missions.json", "0x0edd9daa", "Solar Farm"),
  overviewText : new scrui.cLocaleString("Missions.json", "0x0c11941b", "Solar Farm Overview"),
  completionText : new scrui.cLocaleString("Missions.json", "0x0c101ba5", "Solar Farm Complete"),
  benefits : scrui.IDFromName("GreatWorks_SolarFarm_01_01_U"),
  completionImage : "Graphics/Region/GreatWorks_Complete_SolarFarm.png",
  resources : scrui.IDFromName("GreatWorks_SolarFarm_01_01_U"),
  queries : function (a) {
    return {
      money : [simcity.kDataBins, simcity.kResourceIDSimoleons],
      selected : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDIsSelected],
      cost : ["units", a, "properties", simcity.kPropSelectSolarFarmCost],
      solarPowerResearched : [simcity.kDataBinAmount, simcity.kResourceIDRegionSolarPlantUnlocked],
      scienceModuleIsOn : [simcity.kDataBinAmount, simcity.kResourceIDHQ_University_Science_Module_IsOn]
    }
  },
  test : function (a) {
    this.mPrerequisiteFailedList = [];
    1 === a.selected.amount ? (this.mPrerequisiteFailedList.push(simcity.kGreatWorkPrerequisiteText_AlreadySelected), this.mPrerequisiteFailedList.push(simcity.kGreatWorkPrerequisiteText_AlreadySelected2)) : (0 === a.solarPowerResearched || 0 === a.scienceModuleIsOn) && this.mPrerequisiteFailedList.push(simcity.kGreatWorkPrerequisiteText_NeedEducation);
    return 0 === this.mPrerequisiteFailedList.length
  },
  testbutton : function (a) {
    return a.money.amount > a.cost
  },
  getPrerequisiteList : function (a) {
    var b = [];
    if (0 === a.scienceModuleIsOn || 0 === a.solarPowerResearched)
      b = [{
          localeString : new scrui.cLocaleString("PaletteToolRollovers.json", "0x0e4f2f4f", "University with School of Science in the region"),
          hasBeenMet : 0 < a.scienceModuleIsOn
        }, {
          localeString : new scrui.cLocaleString("PaletteToolRollovers.json", "0x0ee16fb6", "Complete research project at a University in the region"),
          hasBeenMet : 0 < a.solarPowerResearched
        }
      ];
    return b
  },
  onAccept : function (a) {
    simcity.CreateUnit("GreatWorks_Button_SelectSolarFarm", a)
  }
};
simcity.GreatWorkInternationalAirport = {
  nameText : new scrui.cLocaleString("Missions.json", "0x0edd9e61", "International Airport"),
  descriptionText : new scrui.cLocaleString("Tools.json", "0x0e702fae", "International Airport Description"),
  thumbnail : "Graphics/Region/t_greatworks_international_airport.png",
  marqueeImage : "Graphics/Palette_Preview_Images/GreatWorks_IntAirport.png",
  headerIcon : "Graphics/Icons/TradeIcons/icn-greatworks-intairport.png",
  benefitsArray : [{
      icon : "Graphics/Icons/TradeIcons/icn-trade-tourism.png",
      altIcon : "Graphics/Icons/TradeIcons/icn-trade-tourism-celebration.png",
      localeString : new scrui.cLocaleString("RegionView.json", "0x0eebee44", "Tourists"),
      localeObj : {
        passengerT2 : 2E3
      }
    }, {
      icon : "Graphics/Icons/TradeIcons/icn-trade-freight.png",
      altIcon : "Graphics/Icons/TradeIcons/icn-trade-freight-celebration.png",
      localeString : new scrui.cLocaleString("RegionView.json", "0x0eebee46", "Cargo T1"),
      localeObj : {
        cargoT1 : 100
      }
    }
  ],
  constructionMaterialsArray : [{
      icon : "Graphics/Icons/TradeIcons/icn-trade-metal.png",
      localeString : new scrui.cLocaleString("Missions.json",
        "0x0d96a973"),
      titleString : new scrui.cLocaleString("Missions.json", "0x0d96a983"),
      localeObj : {
        objective_amount : 2E6
      },
      resourceType : 1
    }, {
      icon : "Graphics/Icons/TradeIcons/icn-trade-oil.png",
      localeString : new scrui.cLocaleString("Missions.json", "0x0d96a972"),
      titleString : new scrui.cLocaleString("Missions.json", "0x0d96a982"),
      localeObj : {
        objective_amount : 25E5
      },
      resourceType : 3
    }, {
      icon : "Graphics/Icons/TradeIcons/icn-trade-alloy.png",
      localeString : new scrui.cLocaleString("Missions.json", "0x0d96a974"),
      titleString : new scrui.cLocaleString("Missions.json",
        "0x0d96a984"),
      localeObj : {
        objective_amount : 15E5
      },
      resourceType : 1
    }
  ],
  constructionWorkersNeeded : 300,
  maintenanceCost : 300,
  text : new scrui.cLocaleString("Missions.json", "0x0edd9e61", "International Airport"),
  overviewText : new scrui.cLocaleString("Missions.json", "0x0c11951b", "International Airport Overview"),
  completionText : new scrui.cLocaleString("Missions.json", "0x0c101ba5", "International Airport Complete"),
  benefits : scrui.IDFromName("GreatWorks_InternationalAirport_01_01_U"),
  completionImage : "Graphics/Region/GreatWorks_Complete_IntAirport.png",
  resources : scrui.IDFromName("GreatWorks_InternationalAirport_01_01_U"),
  queries : function (a) {
    return {
      money : [simcity.kDataBins, simcity.kResourceIDSimoleons],
      selected : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDIsSelected],
      cost : ["units", a, "properties", simcity.kPropSelectAirportCost],
      regionalAirportUnlocked : [simcity.kDataBinAmount, simcity.kResourceIDRegionInternationalAirportUnlocked],
      numAirports : [simcity.kDataBinAmount, simcity.kResourceIDHelicopterUnlock_IsOn]
    }
  },
  test : function (a) {
    this.mPrerequisiteFailedList =
      [];
    1 === a.selected.amount ? (this.mPrerequisiteFailedList.push(simcity.kGreatWorkPrerequisiteText_AlreadySelected), this.mPrerequisiteFailedList.push(simcity.kGreatWorkPrerequisiteText_AlreadySelected2)) : (0 === a.numAirports || 0 === a.regionalAirportUnlocked) && this.mPrerequisiteFailedList.push(simcity.kGreatWorkPrerequisiteText_NeedLocalAirport);
    return 0 === this.mPrerequisiteFailedList.length
  },
  testbutton : function (a) {
    return a.money.amount > a.cost
  },
  getPrerequisiteList : function (a) {
    var b = [];
    if (0 === a.numAirports ||
      0 === a.regionalAirportUnlocked)
      b = [{
          localeString : new scrui.cLocaleString("PaletteToolRollovers.json", "0x0ee0743b", "Municipal Airport in the region"),
          hasBeenMet : 0 < a.numAirports
        }, {
          localeString : new scrui.cLocaleString("PaletteToolRollovers.json", "0x0ee0743c", "tourists arrive at a Municipal Airport in the region"),
          localeObj : {
            unlockValue : 100
          },
          hasBeenMet : 0 < a.regionalAirportUnlocked
        }
      ];
    return b
  },
  onAccept : function (a) {
    simcity.CreateUnit("GreatWorks_Button_SelectAirport", a)
  }
};
simcity.GreatWorkCoalMine = {
  text : new scrui.cLocaleString("Missions.json", "0x0c11961a", "Coal Strip Mine"),
  overviewText : new scrui.cLocaleString("Missions.json", "0x0d9a961b", "Coal Strip Mine Overview"),
  completionText : new scrui.cLocaleString("Missions.json", "0x0c101ba5", "Coal Mine Complete"),
  benefits : scrui.IDFromName("GreatWorks_CoalMine_01_01_U"),
  completionImage : "Graphics/Region/GreatWorks_Complete_SolarFarm.png",
  resources : scrui.IDFromName("GreatWorks_CoalMine_01_01_U"),
  headerIcon : "Graphics/Icons/TradeIcons/icn-greatworks-solarfarm.png",
  queries : function (a) {
    return {
      selected : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDIsSelected],
      coalHQpresent : [simcity.kDataBins, simcity.kResourceIDRegionCoalHQIsPresent]
    }
  },
  test : function (a) {
    this.mPrerequisiteFailedList = [];
    1 === a.selected.amount ? (this.mPrerequisiteFailedList.push(simcity.kGreatWorkPrerequisiteText_AlreadySelected), this.mPrerequisiteFailedList.push(simcity.kGreatWorkPrerequisiteText_AlreadySelected2)) : 1 > a.coalHQpresent.amount && this.mPrerequisiteFailedList.push(simcity.kGreatWorkPrerequisiteText_NeedHQ);
    return 0 === this.mPrerequisiteFailedList.length
  },
  onAccept : function (a) {
    simcity.CreateUnit("GreatWorks_Button_SelectCoalMine", a)
  }
};
simcity.GreatWorkSpaceCenter = {
  nameText : new scrui.cLocaleString("Missions.json", "0x0edd9e98", "Space Center"),
  descriptionText : new scrui.cLocaleString("Tools.json", "0x0e702fef", "Space Center Description"),
  thumbnail : "Graphics/Region/t_greatworks_spacecenter.png",
  marqueeImage : "Graphics/Palette_Preview_Images/Greatworks_spacecenter.png",
  headerIcon : "Graphics/Icons/TradeIcons/icn-greatworks-spacecenter.png",
  benefitsArray : [{
      icon : "Graphics/Icons/TradeIcons/icn-trade-tourism.png",
      altIcon : "Graphics/Icons/TradeIcons/icn-trade-tourism-celebration.png",
      localeString : new scrui.cLocaleString("RegionView.json", "0x0eebee44", "Tourists")
    }, {
      icon : "Graphics/Icons/TradeIcons/icn-trade-education.png",
      altIcon : "Graphics/Icons/TradeIcons/icn-trade-education-celebration.png",
      localeString : new scrui.cLocaleString("RegionView.json", "0x0eebee45", "Knowledge/Skill")
    }
  ],
  constructionMaterialsArray : [{
      icon : "Graphics/Icons/TradeIcons/icn-trade-fuel.png",
      localeString : new scrui.cLocaleString("Missions.json", "0x0e77dd70"),
      titleString : new scrui.cLocaleString("Missions.json", "0x0e77dd80"),
      localeObj : {
        objective_amount : 17E5
      },
      resourceType : 3
    }, {
      icon : "Graphics/Icons/TradeIcons/icn-trade-alloy.png",
      localeString : new scrui.cLocaleString("Missions.json", "0x0d96a974"),
      titleString : new scrui.cLocaleString("Missions.json", "0x0d96a984"),
      localeObj : {
        objective_amount : 14E5
      },
      resourceType : 1
    }, {
      icon : "Graphics/Icons/TradeIcons/icn-trade-computer.png",
      localeString : new scrui.cLocaleString("Missions.json", "0x0e77d672"),
      titleString : new scrui.cLocaleString("Missions.json", "0x0e77d682"),
      localeObj : {
        objective_amount : 4E5
      },
      resourceType : 2
    }
  ],
  constructionWorkersNeeded : 300,
  maintenanceCost : 300,
  text : new scrui.cLocaleString("Missions.json", "0x0edd9e98", "Space Center"),
  overviewText : new scrui.cLocaleString("Missions.json", "0x0df1bcc0", "Space Center Overview"),
  completionText : new scrui.cLocaleString("Missions.json", "0x0c101ba5", "Space Center Complete"),
  benefits : scrui.IDFromName("GreatWorks_SpaceCenter_01_01_U"),
  completionImage : "Graphics/Region/GreatWorks_Complete_Spaceport.png",
  resources : scrui.IDFromName("GreatWorks_SpaceCenter_01_01_U"),
  queries : function (a) {
    return {
      money : [simcity.kDataBins, simcity.kResourceIDSimoleons],
      selected : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDIsSelected],
      cost : ["units", a, "properties", simcity.kPropSelectSpaceCenterCost],
      hasResearchedSpaceCenter : [simcity.kDataBinAmount, simcity.kResourceIDRegionSpaceCenterUnlocked],
      engineeringModuleIsOn : [simcity.kDataBinAmount, simcity.kResourceIDHQ_University_Engineering_Module_IsOn]
    }
  },
  test : function (a) {
    this.mPrerequisiteFailedList = [];
    1 === a.selected.amount ? (this.mPrerequisiteFailedList.push(simcity.kGreatWorkPrerequisiteText_AlreadySelected),
      this.mPrerequisiteFailedList.push(simcity.kGreatWorkPrerequisiteText_AlreadySelected2)) : (0 === a.engineeringModuleIsOn || 0 === a.hasResearchedSpaceCenter) && this.mPrerequisiteFailedList.push(simcity.kGreatWorkPrerequisiteText_NeedResearchAndElectronics);
    return 0 === this.mPrerequisiteFailedList.length
  },
  testbutton : function (a) {
    return a.money.amount > a.cost
  },
  getPrerequisiteList : function (a) {
    var b = [];
    if (0 === a.engineeringModuleIsOn || 0 === a.hasResearchedSpaceCenter)
      b = [{
          localeString : new scrui.cLocaleString("PaletteToolRollovers.json",
            "0x0e27cedc", "University with School of Engineering in the region"),
          hasBeenMet : 0 < a.engineeringModuleIsOn
        }, {
          localeString : new scrui.cLocaleString("PaletteToolRollovers.json", "0x0ee16fb6", "Complete research project at a University in the region"),
          hasBeenMet : 0 < a.hasResearchedSpaceCenter
        }
      ];
    return b
  },
  onAccept : function (a) {
    simcity.CreateUnit("GreatWorks_Button_SelectSpaceCenter", a)
  }
};
simcity.GreatWorkArcology = {
  nameText : new scrui.cLocaleString("Missions.json", "0x0edd9f02", "Arcology"),
  descriptionText : new scrui.cLocaleString("Tools.json", "0x0e702dd9", "Arcology Description"),
  thumbnail : "Graphics/Region/t_greatworks_arcology.png",
  marqueeImage : "Graphics/Palette_Preview_Images/Greatworks_arcology.png",
  headerIcon : "Graphics/Icons/TradeIcons/icn-greatworks-arcology.png",
  benefitsArray : [{
      icon : "Graphics/Icons/TradeIcons/icn-trade-workers.png",
      altIcon : "Graphics/Icons/TradeIcons/icn-trade-workers-celebration.png",
      localeString : new scrui.cLocaleString("RegionView.json", "0x0eebee41", "Improved Worker Influx")
    }, {
      icon : "Graphics/Icons/TradeIcons/icn-trade-shoppers.png",
      altIcon : "Graphics/Icons/TradeIcons/icn-trade-shoppers-celebration.png",
      localeString : new scrui.cLocaleString("RegionView.json", "0x0eebee42", "High Rate of Shoppers")
    }, {
      icon : "Graphics/Icons/TradeIcons/icn-trade-students.png",
      altIcon : "Graphics/Icons/TradeIcons/icn-trade-students-celebration.png",
      localeString : new scrui.cLocaleString("RegionView.json", "0x0eebee43",
        "Financial Benefit")
    }
  ],
  constructionMaterialsArray : [{
      icon : "Graphics/Icons/TradeIcons/icn-trade-metal.png",
      localeString : new scrui.cLocaleString("Missions.json", "0x0d96a973"),
      titleString : new scrui.cLocaleString("Missions.json", "0x0d96a983"),
      localeObj : {
        objective_amount : 28E5
      },
      resourceType : 1
    }, {
      icon : "Graphics/Icons/TradeIcons/icn-trade-alloy.png",
      localeString : new scrui.cLocaleString("Missions.json", "0x0d96a974"),
      titleString : new scrui.cLocaleString("Missions.json", "0x0d96a984"),
      localeObj : {
        objective_amount : 1E6
      },
      resourceType : 1
    }, {
      icon : "Graphics/Icons/TradeIcons/icn-trade-television.png",
      localeString : new scrui.cLocaleString("Missions.json", "0x0ee88976"),
      titleString : new scrui.cLocaleString("Missions.json", "0x0ee88986"),
      localeObj : {
        objective_amount : 6E5
      },
      resourceType : 2
    }
  ],
  constructionWorkersNeeded : 300,
  maintenanceCost : 300,
  text : new scrui.cLocaleString("Missions.json", "0x0edd9f02", "Arcology"),
  overviewText : new scrui.cLocaleString("Missions.json", "0x0e013b27", "Arcology Overview"),
  completionText : new scrui.cLocaleString("Missions.json",
    "0x0c101ba5", "Arcology Complete"),
  benefits : scrui.IDFromName("GreatWorks_Arcology_01_01_U"),
  completionImage : "Graphics/Region/GreatWorks_Complete_Arcology.png",
  resources : scrui.IDFromName("GreatWorks_Arcology_01_01_U"),
  queries : function (a) {
    return {
      money : [simcity.kDataBins, simcity.kResourceIDSimoleons],
      selected : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDIsSelected],
      cost : ["units", a, "properties", simcity.kPropSelectArcologyCost],
      arcologyUnlock : [simcity.kDataBins, simcity.kResourceIDRegionArcologyUnlocked]
    }
  },
  test : function (a) {
    this.mPrerequisiteFailedList = [];
    1 === a.selected.amount ? (this.mPrerequisiteFailedList.push(simcity.kGreatWorkPrerequisiteText_AlreadySelected), this.mPrerequisiteFailedList.push(simcity.kGreatWorkPrerequisiteText_AlreadySelected2)) : 0 === a.arcologyUnlock.amount && this.mPrerequisiteFailedList.push(simcity.kGreatWorkPrerequisiteText_PopulationLow);
    return 0 === this.mPrerequisiteFailedList.length
  },
  testbutton : function (a) {
    return a.money.amount > a.cost
  },
  getPrerequisiteList : function (a) {
    var b = [];
    0 == a.arcologyUnlock.amount && (b = [{
          localeString : new scrui.cLocaleString("PaletteToolRollovers.json", "0x0ee07426", "City in the region with ~unlockValue~ residents"),
          localeObj : {
            unlockValue : 58E3
          },
          hasBeenMet : 0 < a.arcologyUnlock.amount
        }
      ]);
    return b
  },
  onAccept : function (a) {
    simcity.CreateUnit("GreatWorks_Button_SelectArcology", a)
  }
};
simcity.kGreatWorksID_Empty = scrui.IDFromName("GreatWorks_Empty");
simcity.kGreatWorksID_SolarFarm_u = scrui.IDFromName("GreatWorks_SolarFarm_01_01_U");
simcity.kGreatWorksID_SolarFarm_n = scrui.IDFromName("GreatWorks_SolarFarm_01_01_N");
simcity.kGreatWorksID_InternationalAirport_u = scrui.IDFromName("GreatWorks_InternationalAirport_01_01_U");
simcity.kGreatWorksID_InternationalAirport_n = scrui.IDFromName("GreatWorks_InternationalAirport_01_01_N");
simcity.kGreatWorksID_CoalMine_u = scrui.IDFromName("GreatWorks_CoalMine_01_01_U");
simcity.kGreatWorksID_CoalMine_n = scrui.IDFromName("GreatWorks_CoalMine_01_01_N");
simcity.kGreatWorksID_SpaceCenter_u = scrui.IDFromName("GreatWorks_SpaceCenter_01_01_U");
simcity.kGreatWorksID_SpaceCenter_n = scrui.IDFromName("GreatWorks_SpaceCenter_01_01_N");
simcity.kGreatWorksID_Arcology_u = scrui.IDFromName("GreatWorks_Arcology_01_01_U");
simcity.kGreatWorksID_Arcology_n = scrui.IDFromName("GreatWorks_Arcology_01_01_N");
simcity.GreatWorksSelectionChoices = [simcity.kGreatWorksID_SolarFarm_n, simcity.kGreatWorksID_InternationalAirport_n, simcity.kGreatWorksID_SpaceCenter_n, simcity.kGreatWorksID_Arcology_n];
simcity.GreatWorksUpgradeOptions = {};
simcity.GreatWorksUpgradeOptions[simcity.kGreatWorksID_Empty] = [simcity.GreatWorkSolarFarm, simcity.GreatWorkInternationalAirport, simcity.GreatWorkSpaceCenter, simcity.GreatWorkArcology];
simcity.GreatWorksOptions = {};
simcity.GreatWorksOptions[simcity.kGreatWorksID_InternationalAirport_n] = [simcity.GreatWorkInternationalAirport];
simcity.GreatWorksOptions[simcity.kGreatWorksID_InternationalAirport_u] = [simcity.GreatWorkInternationalAirport];
simcity.GreatWorksOptions[simcity.kGreatWorksID_SpaceCenter_n] = [simcity.GreatWorkSpaceCenter];
simcity.GreatWorksOptions[simcity.kGreatWorksID_SpaceCenter_u] = [simcity.GreatWorkSpaceCenter];
simcity.GreatWorksOptions[simcity.kGreatWorksID_Arcology_n] = [simcity.GreatWorkArcology];
simcity.GreatWorksOptions[simcity.kGreatWorksID_Arcology_u] = [simcity.GreatWorkArcology];
simcity.GreatWorksOptions[simcity.kGreatWorksID_SolarFarm_n] = [simcity.GreatWorkSolarFarm];
simcity.GreatWorksOptions[simcity.kGreatWorksID_SolarFarm_u] = [simcity.GreatWorkSolarFarm];
simcity.GreatWorkSolarFarmStarted = {
  text : new scrui.cLocaleString("Missions.json", "0x0c11942a", "Solar Farm"),
  overviewText : new scrui.cLocaleString("Missions.json", "0x0c11942b", "Solar Farm Overview"),
  resources : simcity.kGreatWorksID_SolarFarm_u,
  onAccept : function (a) {
    simcity.CreateUnit("GreatWorks_Button_JoinSolarFarm", a)
  }
};
simcity.GreatWorksUpgradeOptions[simcity.kGreatWorksID_SolarFarm_u] = [simcity.GreatWorkSolarFarmStarted];
simcity.GreatWorkAirportStarted = {
  text : new scrui.cLocaleString("Missions.json", "0x0c11952a", "Airport"),
  overviewText : new scrui.cLocaleString("Missions.json", "0x0c11952b", "Airport Overview"),
  resources : simcity.kGreatWorksID_InternationalAirport_u,
  onAccept : function (a) {
    simcity.CreateUnit("GreatWorks_Button_JoinAirport", a)
  }
};
simcity.GreatWorksUpgradeOptions[simcity.kGreatWorksID_InternationalAirport_u] = [simcity.GreatWorkAirportStarted];
simcity.GreatWorkAirportStarted = {
  text : new scrui.cLocaleString("Missions.json", "0x0c11952a", "Airport"),
  overviewText : new scrui.cLocaleString("Missions.json", "0x0c11952b", "Airport Overview"),
  resources : simcity.kGreatWorksID_InternationalAirport_n,
  onAccept : function (a) {
    simcity.CreateUnit("GreatWorks_Button_JoinAirport", a)
  }
};
simcity.GreatWorksUpgradeOptions[simcity.kGreatWorksID_InternationalAirport_n] = [simcity.GreatWorkAirportStarted];
simcity.GreatWorkCoalMineStarted = {
  text : new scrui.cLocaleString("Missions.json", "0x0c11962a", "Coal mine"),
  overviewText : new scrui.cLocaleString("Missions.json", "0x0c11962b", "Coal Mine Overview"),
  resources : simcity.kGreatWorksID_CoalMine_u,
  onAccept : function (a) {
    simcity.CreateUnit("GreatWorks_Button_JoinCoalMine", a)
  }
};
simcity.GreatWorksUpgradeOptions[simcity.kGreatWorksID_CoalMine_u] = [simcity.GreatWorkCoalMineStarted];
simcity.GreatWorkSpaceCenterStarted = {
  text : new scrui.cLocaleString("Missions.json", "0x0df1bcc1", "Space Center"),
  overviewText : new scrui.cLocaleString("Missions.json", "0x0df1bcc2", "Space Center Overview"),
  resources : simcity.kGreatWorksID_SpaceCenter_u,
  onAccept : function (a) {
    simcity.CreateUnit("GreatWorks_Button_JoinSpaceCenter", a)
  }
};
simcity.GreatWorksUpgradeOptions[simcity.kGreatWorksID_SpaceCenter_u] = [simcity.GreatWorkSpaceCenterStarted];
simcity.GreatWorkArcologyStarted = {
  text : new scrui.cLocaleString("Missions.json", "0x0e013b28", "Arcology"),
  overviewText : new scrui.cLocaleString("Missions.json", "0x0e013b29", "Arcology Overview"),
  resources : simcity.kGreatWorksID_Arcology_u,
  onAccept : function (a) {
    simcity.CreateUnit("GreatWorks_Button_JoinArcology", a)
  }
};
simcity.GreatWorksUpgradeOptions[simcity.kGreatWorksID_Arcology_u] = [simcity.GreatWorkArcologyStarted];
simcity.GreatWorkSolarFarmFinished = {
  text : new scrui.cLocaleString("Missions.json", "0x0c11943a", "Solar Farm"),
  overviewText : new scrui.cLocaleString("Missions.json", "0x0c11943b", "Solar Farm Overview"),
  resources : scrui.IDFromName("GreatWorks_SolarFarmModule_01_01_U"),
  onAccept : function (a) {
    simcity.CreateUnit("GreatWorks_Button_UpgradeSolarFarm", a)
  }
};
simcity.GreatWorksUpgradeOptions[simcity.kGreatWorksID_SolarFarm_n] = [simcity.GreatWorkSolarFarmFinished];
simcity.GreatWorkAirportFinished = {
  text : new scrui.cLocaleString("Missions.json", "0x0c11953a", "Airport"),
  overviewText : new scrui.cLocaleString("Missions.json", "0x0c11953b", "Airport Overview"),
  resources : scrui.IDFromName("GreatWorks_InternationalAirportRunway_01_01_U"),
  onAccept : function (a) {
    simcity.CreateUnit("GreatWorks_Button_UpgradeAirport", a)
  }
};
simcity.GreatWorksUpgradeOptions[simcity.kGreatWorksID_InternationalAirport_n] = [simcity.GreatWorkAirportFinished];
simcity.GreatWorkAirportFinished = {
  text : new scrui.cLocaleString("Missions.json", "0x0e013b2a", "Arcology"),
  overviewText : new scrui.cLocaleString("Missions.json", "0x0e013b2b", "Arcology Overview"),
  resources : scrui.IDFromName("GreatWorks_ArcologyModule_01_01_U"),
  onAccept : function (a) {
    simcity.CreateUnit("GreatWorks_Button_UpgradeArcology", a)
  }
};
simcity.GreatWorksUpgradeOptions[simcity.kGreatWorksID_Arcology_n] = [simcity.GreatWorkArcologyFinished];
simcity.GreatWorkCoalMineFinished = {
  text : new scrui.cLocaleString("Missions.json", "0x0c11943a", "Coal Mine"),
  overviewText : new scrui.cLocaleString("Missions.json", "0x0c11943b", "Coal Mine Overview"),
  resources : scrui.IDFromName("GreatWorks_CoalMineModule_01_01_U"),
  onAccept : function (a) {
    simcity.CreateUnit("GreatWorks_Button_UpgradeCoalMine", a)
  }
};
simcity.GreatWorkFinishedConfirm = {
  onAccept : function (a) {
    simcity.gGlobalUIHandler.mRegionViewUIHandler.ZoomToGreatWork(a)
  }
};
simcity.GreatWorksRequirementMissionProgressQuery = {
  allowNullResults : !0,
  queries : function (a) {
    return {
      progress : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDMissionProgressDisplay],
      threshold : [simcity.kDataUnits, a, simcity.kDataProperties, simcity.kPropMissionThreshold],
      progressflag : [simcity.kDataUnits, a, simcity.kDataFlags, simcity.kUnitFlagProgressAllowed]
    }
  },
  update : function (a, b) {
    b.progress && simcity.SetProgressBarState(a, b.progress.amount, b.threshold, b.progressflag)
  }
};
simcity.GreatWorksRequirementLocalMissionProgressQuery = {
  allowNullResults : !0,
  queries : function (a) {
    return {
      localProgress : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDLocalMissionProgress],
      totalProgress : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDMissionProgress]
    }
  },
  update : function (a, b) {
    a.FindControlByID(simcity.kRegionView_ResourceContributionText).UpdateLocaleText({
      contribution_percent : b.localProgress.amount / b.totalProgress.amount
    })
  }
};
simcity.GreatWorksRequirementWorkersSentQuery = {
  allowNullResults : !0,
  queries : function (a) {
    return {
      workers : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDWorkersSent]
    }
  },
  update : function (a, b, c) {
    var d = 100 * (b.workers.amount / b.workers.capacity),
    e = "red";
    0 < d && 80 >= d ? e = "yellow" : 80 < d && (e = "green");
    simcity.SetProgressBarState(a, b.workers.amount, b.workers.capacity, e, c)
  }
};
simcity.GreatWorksRequirementResourceQuery = {
  allowNullResults : !0,
  data : {
    resource : {
      amount : 0,
      capacity : 0
    },
    localResource : {
      amount : 0,
      capacity : 0
    }
  },
  queries : function (a, b) {
    return {
      resource : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kMissionResources[b]],
      localResource : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kMissionLocalResources[b]]
    }
  },
  update : function (a, b) {
    for (var c = Object.keys(this.data), d = 0, e = c.length; d < e; d++)
      b.hasOwnProperty(c[d]) && (this.data[c[d]].amount = b[c[d]].amount, this.data[c[d]].capacity =
          b[c[d]].capacity)
  }
};
simcity.GreatWorksRequirementLocalResourceQuery = {
  allowNullResults : !0,
  data : {
    localResource : 0,
    totalResource : 0
  },
  queries : function (a, b) {
    return {
      totalResource : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kMissionResources[b]],
      localResource : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kMissionLocalResources[b]]
    }
  },
  update : function (a, b) {
    for (var c = Object.keys(this.data), d = 0, e = c.length; d < e; d++)
      b.hasOwnProperty(c[d]) && (this.data[c[d]] = b[c[d]].amount)
  }
};
simcity.SetSingupBindingData = function (a, b) {
  for (var a = a[0], c = Object.keys(b), d = 0, e = c.length; d < e; d++)
    a.hasOwnProperty(c[d]) && a[c[d]] && (a[c[d]].amount ? (b[c[d]] = {}, b[c[d]].amount = a[c[d]].amount, b[c[d]].capacity = a[c[d]].capacity) : b[c[d]] = a[c[d]])
};
simcity.kGreatWorksAlloySignup = {
  tooltipString : {
    tableID : "GlobalUI.json",
    stringID : "0x0e4b89a3",
    placeholder : "kPopupItemGreatWorksAlloySignup"
  },
  allowNullResults : !0,
  data : {
    hasToggle : null,
    signup : null
  },
  queries : function (a) {
    return {
      hasToggle : [simcity.kDataUnits, a, simcity.kDataNonSimProperties, simcity.kPropertyUnitShowOnOffToggle],
      signup : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDSignedUpForAlloy]
    }
  },
  update : function (a) {
    simcity.SetSingupBindingData(a, this.data)
  },
  onItemClicked : function (a) {
    simcity.CreateUnitCloseby("GreatWorks_ToggleAlloySignup",
      a)
  }
};
simcity.kGreatWorksMetalSignup = {
  tooltipString : {
    tableID : "GlobalUI.json",
    stringID : "0x0e4b8a34",
    placeholder : "kPopupItemGreatWorksMetalSignup"
  },
  allowNullResults : !0,
  data : {
    hasToggle : null,
    signup : null
  },
  queries : function (a) {
    return {
      hasToggle : [simcity.kDataUnits, a, simcity.kDataNonSimProperties, simcity.kPropertyUnitShowOnOffToggle],
      signup : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDSignedUpForMetal]
    }
  },
  update : function (a) {
    simcity.SetSingupBindingData(a, this.data)
  },
  onItemClicked : function (a) {
    simcity.CreateUnitCloseby("GreatWorks_ToggleMetalSignup", a)
  }
};
simcity.kGreatWorksOilCrudeSignup = {
  tooltipString : {
    tableID : "GlobalUI.json",
    stringID : "0x0e4b8a42",
    placeholder : "kPopupItemGreatWorksOilCrudeSignup"
  },
  allowNullResults : !0,
  data : {
    hasToggle : null,
    signup : null
  },
  queries : function (a) {
    return {
      hasToggle : [simcity.kDataUnits, a, simcity.kDataNonSimProperties, simcity.kPropertyUnitShowOnOffToggle],
      signup : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDSignedUpForOilCrude]
    }
  },
  update : function (a) {
    simcity.SetSingupBindingData(a, this.data)
  },
  onItemClicked : function (a) {
    simcity.CreateUnitCloseby("GreatWorks_ToggleOilCrudeSignup",
      a)
  }
};
simcity.kGreatWorksCoalSignup = {
  tooltipString : {
    tableID : "GlobalUI.json",
    stringID : "0x0e4b89fa",
    placeholder : "kPopupItemGreatWorksCoalSignup"
  },
  allowNullResults : !0,
  data : {
    hasToggle : null,
    signup : null
  },
  queries : function () {
    return {
      hasToggle : [simcity.kDataUnits, unitRef, simcity.kDataNonSimProperties, simcity.kPropertyUnitShowOnOffToggle],
      coalSignup : [simcity.kDataUnits, unitRef, simcity.kDataBins, simcity.kResourceIDSignedUpForCoal]
    }
  },
  update : function (a) {
    simcity.SetSingupBindingData(a, this.data)
  },
  onItemClicked : function (a) {
    simcity.CreateUnitCloseby("GreatWorks_ToggleCoalSignup", a)
  }
};
simcity.kGreatWorksElectronicsSignup = {
  tooltipString : {
    tableID : "GlobalUI.json",
    stringID : "0x0e4b8a11",
    placeholder : "kPopupItemGreatWorksElectronicsSignup"
  },
  allowNullResults : !0,
  data : {
    hasToggle : null,
    signup : null
  },
  queries : function (a) {
    return {
      hasToggle : [simcity.kDataUnits, a, simcity.kDataNonSimProperties, simcity.kPropertyUnitShowOnOffToggle],
      signup : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDSignedUpForElectronics]
    }
  },
  update : function (a) {
    simcity.SetSingupBindingData(a, this.data)
  },
  onItemClicked : function (a) {
    simcity.CreateUnitCloseby("GreatWorks_ToggleElectronicsSignup",
      a)
  }
};
simcity.kGreatWorksFuelSignup = {
  tooltipString : {
    tableID : "GlobalUI.json",
    stringID : "0x0e4b8a23",
    placeholder : "kPopupItemGreatWorksFuelSignup"
  },
  allowNullResults : !0,
  data : {
    hasToggle : null,
    signup : null
  },
  queries : function (a) {
    return {
      hasToggle : [simcity.kDataUnits, a, simcity.kDataNonSimProperties, simcity.kPropertyUnitShowOnOffToggle],
      signup : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDSignedUpForFuel]
    }
  },
  update : function (a) {
    simcity.SetSingupBindingData(a, this.data)
  },
  onItemClicked : function (a) {
    simcity.CreateUnitCloseby("GreatWorks_ToggleFuelSignup", a)
  }
};
simcity.kGreatWorksOreRawSignup = {
  tooltipString : {
    tableID : "GlobalUI.json",
    stringID : "0x0e4b8a50",
    placeholder : "kPopupItemGreatWorksOreRawSignup"
  },
  allowNullResults : !0,
  data : {
    hasToggle : null,
    signup : null
  },
  queries : function (a) {
    return {
      hasToggle : [simcity.kDataUnits, a, simcity.kDataNonSimProperties, simcity.kPropertyUnitShowOnOffToggle],
      signup : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDSignedUpForOreRaw]
    }
  },
  update : function (a) {
    simcity.SetSingupBindingData(a, this.data)
  },
  onItemClicked : function (a) {
    simcity.CreateUnitCloseby("GreatWorks_ToggleOreRawSignup",
      a)
  }
};
simcity.kGreatWorksPlasticSignup = {
  tooltipString : {
    tableID : "GlobalUI.json",
    stringID : "0x0e4b8a5e",
    placeholder : "kPopupItemGreatWorksPlasticSignup"
  },
  allowNullResults : !0,
  data : {
    hasToggle : null,
    signup : null
  },
  queries : function (a) {
    return {
      hasToggle : [simcity.kDataUnits, a, simcity.kDataNonSimProperties, simcity.kPropertyUnitShowOnOffToggle],
      signup : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDSignedUpForPlastic]
    }
  },
  update : function (a) {
    simcity.SetSingupBindingData(a, this.data)
  },
  onItemClicked : function (a) {
    simcity.CreateUnitCloseby("GreatWorks_TogglePlasticSignup", a)
  }
};
simcity.kGreatWorksComputerSignup = {
  tooltipString : {
    tableID : "GlobalUI.json",
    stringID : "0x0e77bbd7",
    placeholder : "kPopupItemGreatWorksComputerSignup"
  },
  allowNullResults : !0,
  data : {
    hasToggle : null,
    signup : null
  },
  queries : function (a) {
    return {
      hasToggle : [simcity.kDataUnits, a, simcity.kDataNonSimProperties, simcity.kPropertyUnitShowOnOffToggle],
      signup : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDSignedUpForComputer]
    }
  },
  update : function (a) {
    simcity.SetSingupBindingData(a, this.data)
  },
  onItemClicked : function (a) {
    simcity.CreateUnitCloseby("GreatWorks_ToggleComputerSignup",
      a)
  }
};
simcity.kGreatWorksTelevisionSignup = {
  tooltipString : {
    tableID : "GlobalUI.json",
    stringID : "0x0ee87dbf",
    placeholder : "kPopupItemGreatWorksTelevisionSignup"
  },
  allowNullResults : !0,
  data : {
    hasToggle : null,
    signup : null
  },
  queries : function (a) {
    return {
      hasToggle : [simcity.kDataUnits, a, simcity.kDataNonSimProperties, simcity.kPropertyUnitShowOnOffToggle],
      signup : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDSignedUpForTelevision]
    }
  },
  update : function (a) {
    simcity.SetSingupBindingData(a, this.data)
  },
  onItemClicked : function (a) {
    simcity.CreateUnitCloseby("GreatWorks_ToggleTelevisionSignup", a)
  }
};
simcity.GreatWorksRequirementProgress = {
  icon : "Graphics/Common/Icons/icn_rollover_Construction.png",
  text : new scrui.cLocaleString("Missions.json", "0x0d96a961"),
  dataBinding : simcity.GreatWorksRequirementMissionProgressQuery,
  dataBindingLocalContribution : simcity.GreatWorksRequirementLocalMissionProgressQuery
};
simcity.GreatWorksRequirementWorkers = {
  icon : "Graphics/Trade/tradeWall_icon_job_export.png",
  iconRed : "Graphics/Trade/tradeWall_icon_job_export_red.png",
  iconAmber : "Graphics/Trade/tradeWall_icon_job_export_amber.png",
  text : new scrui.cLocaleString("Missions.json", "0x0d96a962"),
  dataBinding : simcity.GreatWorksRequirementWorkersSentQuery,
  dataBindingLocalContribution : simcity.GreatWorksRequirementLocalMissionProgressQuery
};
simcity.GreatWorksRequirementCoal = {
  icon : "Graphics/Icons/TradeIcons/icn-trade-coal.png",
  iconRed : "Graphics/Icons/TradeIcons/icn-trade-coal_red.png",
  iconAmber : "Graphics/Icons/TradeIcons/icn-trade-coal_yellow.png",
  text : new scrui.cLocaleString("Missions.json", "0x0d96a971"),
  title : new scrui.cLocaleString("Missions.json", "0x0d96a981"),
  resourceUIKey : simcity.kResourceUIKeys.Coal,
  signupBinResource : simcity.kResourceIDSignedUpForCoalStored,
  dataBinding : simcity.GreatWorksRequirementResourceQuery,
  dataBindingLocalContribution : simcity.GreatWorksRequirementLocalResourceQuery,
  resourceType : 1,
  dataBindingSignup : simcity.kGreatWorksCoalSignup
};
simcity.GreatWorksRequirementOil = {
  icon : "Graphics/Icons/TradeIcons/icn-trade-oil.png",
  iconRed : "Graphics/Icons/TradeIcons/icn-trade-oil_red.png",
  iconAmber : "Graphics/Icons/TradeIcons/icn-trade-oil_yellow.png",
  text : new scrui.cLocaleString("Missions.json", "0x0d96a972"),
  title : new scrui.cLocaleString("Missions.json", "0x0d96a982"),
  resourceUIKey : simcity.kResourceUIKeys.Oil,
  signupBinResource : simcity.kResourceIDSignedUpForOilCrudeStored,
  dataBinding : simcity.GreatWorksRequirementResourceQuery,
  dataBindingLocalContribution : simcity.GreatWorksRequirementLocalResourceQuery,
  resourceType : 3,
  dataBindingSignup : simcity.kGreatWorksOilCrudeSignup
};
simcity.GreatWorksRequirementMetal = {
  icon : "Graphics/Icons/TradeIcons/icn-trade-metal.png",
  iconRed : "Graphics/Icons/TradeIcons/icn-trade-metal_red.png",
  iconAmber : "Graphics/Icons/TradeIcons/icn-trade-metal_yellow.png",
  resourceUIKey : simcity.kResourceUIKeys.Metal,
  text : new scrui.cLocaleString("Missions.json", "0x0d96a973"),
  title : new scrui.cLocaleString("Missions.json", "0x0d96a983"),
  signupBinResource : simcity.kResourceIDSignedUpForMetalStored,
  dataBinding : simcity.GreatWorksRequirementResourceQuery,
  dataBindingLocalContribution : simcity.GreatWorksRequirementLocalResourceQuery,
  resourceType : 1,
  dataBindingSignup : simcity.kGreatWorksMetalSignup
};
simcity.GreatWorksRequirementAlloys = {
  icon : "Graphics/Icons/TradeIcons/icn-trade-alloy.png",
  iconRed : "Graphics/Icons/TradeIcons/icn-trade-alloy_red.png",
  iconAmber : "Graphics/Icons/TradeIcons/icn-trade-alloy_yellow.png",
  text : new scrui.cLocaleString("Missions.json", "0x0d96a974"),
  title : new scrui.cLocaleString("Missions.json", "0x0d96a984"),
  resourceUIKey : simcity.kResourceUIKeys.Alloy,
  signupBinResource : simcity.kResourceIDSignedUpForAlloyStored,
  dataBinding : simcity.GreatWorksRequirementResourceQuery,
  dataBindingLocalContribution : simcity.GreatWorksRequirementLocalResourceQuery,
  resourceType : 1,
  dataBindingSignup : simcity.kGreatWorksAlloySignup
};
simcity.GreatWorksRequirementPlastic = {
  icon : "Graphics/Icons/TradeIcons/icn-trade-plastic.png",
  iconRed : "Graphics/Icons/TradeIcons/icn-trade-plastic_red.png",
  iconAmber : "Graphics/Icons/TradeIcons/icn-trade-plastic_yellow.png",
  text : new scrui.cLocaleString("Missions.json", "0x0d96a975"),
  title : new scrui.cLocaleString("Missions.json", "0x0d96a985"),
  resourceUIKey : simcity.kResourceUIKeys.Plastic,
  signupBinResource : simcity.kResourceIDSignedUpForPlasticStored,
  dataBinding : simcity.GreatWorksRequirementResourceQuery,
  dataBindingLocalContribution : simcity.GreatWorksRequirementLocalResourceQuery,
  resourceType : 2,
  dataBindingSignup : simcity.kGreatWorksPlasticSignup
};
simcity.GreatWorksRequirementElectronics = {
  icon : "Graphics/Icons/TradeIcons/icn-trade-electronics.png",
  iconRed : "Graphics/Icons/TradeIcons/icn-trade-electronics_red.png",
  iconAmber : "Graphics/Icons/TradeIcons/icn-trade-electronics_yellow.png",
  text : new scrui.cLocaleString("Missions.json", "0x0d96a976"),
  title : new scrui.cLocaleString("Missions.json", "0x0d96a986"),
  resourceUIKey : simcity.kResourceUIKeys.Electronics,
  signupBinResource : simcity.kResourceIDSignedUpForElectronicsStored,
  dataBinding : simcity.GreatWorksRequirementResourceQuery,
  dataBindingLocalContribution : simcity.GreatWorksRequirementLocalResourceQuery,
  resourceType : 2,
  dataBindingSignup : simcity.kGreatWorksElectronicsSignup
};
simcity.GreatWorksRequirementOre = {
  icon : "Graphics/Icons/TradeIcons/icn-trade-ore.png",
  iconRed : "Graphics/Icons/TradeIcons/icn-trade-ore_red.png",
  iconAmber : "Graphics/Icons/TradeIcons/icn-trade-ore_yellow.png",
  text : new scrui.cLocaleString("Missions.json", "0x0d96a977"),
  title : new scrui.cLocaleString("Missions.json", "0x0d96a987"),
  dataBinding : simcity.GreatWorksRequirementResourceQuery,
  dataBindingLocalContribution : simcity.GreatWorksRequirementLocalResourceQuery,
  resourceType : 1,
  dataBindingSignup : simcity.kGreatWorksOreSignup
};
simcity.GreatWorksRequirementComputer = {
  icon : "Graphics/Icons/TradeIcons/icn-trade-computer.png",
  iconRed : "Graphics/Icons/TradeIcons/icn-trade-computer_red.png",
  iconAmber : "Graphics/Icons/TradeIcons/icn-trade-computer_yellow.png",
  text : new scrui.cLocaleString("Missions.json", "0x0e77d672"),
  title : new scrui.cLocaleString("Missions.json", "0x0e77d682"),
  resourceUIKey : simcity.kResourceUIKeys.Computer,
  signupBinResource : simcity.kResourceIDSignedUpForComputerStored,
  dataBinding : simcity.GreatWorksRequirementResourceQuery,
  dataBindingLocalContribution : simcity.GreatWorksRequirementLocalResourceQuery,
  resourceType : 2,
  dataBindingSignup : simcity.kGreatWorksComputerSignup
};
simcity.GreatWorksRequirementFuel = {
  icon : "Graphics/Icons/TradeIcons/icn-trade-fuel.png",
  iconRed : "Graphics/Icons/TradeIcons/icn-trade-fuel_red.png",
  iconAmber : "Graphics/Icons/TradeIcons/icn-trade-fuel_yellow.png",
  text : new scrui.cLocaleString("Missions.json", "0x0e77dd70"),
  title : new scrui.cLocaleString("Missions.json", "0x0e77dd80"),
  resourceUIKey : simcity.kResourceUIKeys.Fuel,
  signupBinResource : simcity.kResourceIDSignedUpForFuelStored,
  dataBinding : simcity.GreatWorksRequirementResourceQuery,
  dataBindingLocalContribution : simcity.GreatWorksRequirementLocalResourceQuery,
  resourceType : 3,
  dataBindingSignup : simcity.kGreatWorksFuelSignup
};
simcity.GreatWorksRequirementTelevision = {
  icon : "Graphics/Icons/TradeIcons/icn-trade-television.png",
  iconRed : "Graphics/Icons/TradeIcons/icn-trade-television_red.png",
  iconAmber : "Graphics/Icons/TradeIcons/icn-trade-television_yellow.png",
  text : new scrui.cLocaleString("Missions.json", "0x0ee88976"),
  title : new scrui.cLocaleString("Missions.json", "0x0ee88986"),
  resourceUIKey : simcity.kResourceUIKeys.Televion,
  signupBinResource : simcity.kResourceIDSignedUpForTelevisionStored,
  dataBinding : simcity.GreatWorksRequirementResourceQuery,
  dataBindingLocalContribution : simcity.GreatWorksRequirementLocalResourceQuery,
  resourceType : 2,
  dataBindingSignup : simcity.kGreatWorksTelevisionSignup
};
simcity.GreatWorksRequirementLumber = {
  icon : "Graphics/Common/Icons/icn-trade-logs.png",
  iconRed : "Graphics/Common/Icons/icn-trade-logs_red.png",
  iconAmber : "Graphics/Common/Icons/icn-trade-logs_amber.png",
  text : new scrui.cLocaleString("Missions.json", "0x0d96a978"),
  title : new scrui.cLocaleString("Missions.json", "0x0d96a988"),
  dataBinding : simcity.GreatWorksRequirementResourceQuery,
  dataBindingLocalContribution : simcity.GreatWorksRequirementLocalResourceQuery,
  dataBindingSignup : simcity.kGreatWorksLumberSignup
};
simcity.GreatWorksRequirementGrain = {
  icon : "Graphics/Common/Icons/icn-trade-grain.png",
  iconRed : "Graphics/Common/Icons/icn-trade-grain_red.png",
  iconAmber : "Graphics/Common/Icons/icn-trade-grain_amber.png",
  text : new scrui.cLocaleString("Missions.json", "0x0d96a979"),
  title : new scrui.cLocaleString("Missions.json", "0x0d96a988"),
  dataBinding : simcity.GreatWorksRequirementResourceQuery,
  dataBindingLocalContribution : simcity.GreatWorksRequirementLocalResourceQuery,
  dataBindingSignup : simcity.kGreatWorksGrainSignup
};
simcity.GreatWorksRequirements = {};
simcity.GreatWorksRequirements[simcity.kGreatWorksID_SolarFarm_u] = [simcity.GreatWorksRequirementProgress, simcity.GreatWorksRequirementWorkers, simcity.GreatWorksRequirementPlastic, simcity.GreatWorksRequirementAlloys, simcity.GreatWorksRequirementElectronics];
simcity.GreatWorksRequirements[simcity.kGreatWorksID_InternationalAirport_u] = [simcity.GreatWorksRequirementProgress, simcity.GreatWorksRequirementWorkers, simcity.GreatWorksRequirementMetal, simcity.GreatWorksRequirementOil, simcity.GreatWorksRequirementAlloys];
simcity.GreatWorksRequirements[simcity.kGreatWorksID_InternationalAirport_n] = [simcity.GreatWorksRequirementProgress, simcity.GreatWorksRequirementWorkers, simcity.GreatWorksRequirementMetal, simcity.GreatWorksRequirementOil, simcity.GreatWorksRequirementAlloys];
simcity.GreatWorksRequirements[simcity.kGreatWorksID_CoalMine_u] = [simcity.GreatWorksRequirementProgress, simcity.GreatWorksRequirementWorkers, simcity.GreatWorksRequirementMetal, simcity.GreatWorksRequirementOil];
simcity.GreatWorksRequirements[simcity.kGreatWorksID_CoalMine_n] = [simcity.GreatWorksRequirementOil, simcity.GreatWorksRequirementCoal];
simcity.GreatWorksRequirements[simcity.kGreatWorksID_SpaceCenter_u] = [simcity.GreatWorksRequirementProgress, simcity.GreatWorksRequirementWorkers, simcity.GreatWorksRequirementFuel, simcity.GreatWorksRequirementAlloys, simcity.GreatWorksRequirementComputer];
simcity.GreatWorksRequirements[simcity.kGreatWorksID_Arcology_u] = [simcity.GreatWorksRequirementProgress, simcity.GreatWorksRequirementWorkers, simcity.GreatWorksRequirementMetal, simcity.GreatWorksRequirementAlloys, simcity.GreatWorksRequirementTelevision];
simcity.kTradeConnectionAlterResidentsAmount = 15;
simcity.kTradeConnectionAlterKidsAmount = 10;
simcity.kConnectionStatusDisconnected = "0x0caaa6da";
simcity.kConnectionStatusInProgress = "0x0caaa6d7";
simcity.kConnectionStatusConnected = "0x0caaa6d9";
simcity.kTradeConnectionStatus = {
  text : new scrui.cLocaleString("Resources.json", "0x0e86c816", "Connections"),
  data : {
    connectionStatus : !1,
    missionProgress : 0
  },
  queries : function (a) {
    return {
      connected : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDConnected],
      missionProgress : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDMissionProgress]
    }
  },
  update : function (a) {
    this.data.connectionStatus = simcity.kConnectionStatusDisconnected;
    this.data.missionProgress = 0;
    1 === a.connected.amount ? this.data.connectionStatus =
      simcity.kConnectionStatusConnected : 0 === a.connected.amount && 0 !== a.missionProgress.amount && (this.data.connectionStatus = simcity.kConnectionStatusInProgress, this.data.missionProgress = a.missionProgress.amount / a.missionProgress.capacity)
  }
};
simcity.kTradeConnectionVisitors = {
  text : new scrui.cLocaleString("Resources.json", "0x0e86c814", "Visitors"),
  data : {
    importedSimsW1 : 0,
    importedSimsW2 : 0,
    importedSimsW3 : 0,
    importedKids : 0,
    exportingWorkers : 0,
    exportingShoppers : 0,
    totals : {
      importing : 0,
      exporting : 0
    }
  },
  queries : function () {
    return {}

  },
  update : function () {}

};
simcity.kTradeConnectionJobs = {
  text : new scrui.cLocaleString("Resources.json", "0x0e86c017", "Jobs"),
  importIconPath : "Graphics/Trade/tradeWall_icon_job_import.png",
  exportIconPath : "Graphics/Trade/tradeWall_icon_job_export.png",
  enableTradingToggle : !1,
  data : {
    importingJobsW1 : 0,
    importingJobsW2 : 0,
    importingJobsW3 : 0,
    exportingJobsW1 : 0,
    exportingJobsW2 : 0,
    exportingJobsW3 : 0,
    localSwitchAmount : 0,
    connectionSwitchAmount : 0,
    totals : {
      importing : 0,
      exporting : 0
    }
  },
  queries : function (a) {
    return {
      importingDayJobsW1 : [simcity.kDataUnits,
        a, simcity.kDataBins, simcity.kResourceIDDayJobsW1],
      importingDayJobsW2 : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDDayJobsW2],
      importingDayJobsW3 : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDDayJobsW3],
      importingNightJobsW1 : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDNightJobsW1],
      importingNightJobsW2 : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDNightJobsW2],
      importingNightJobsW3 : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDNightJobsW3],
      exportingDayJobsW1 : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDTradeExcessDayJobsW1],
      exportingDayJobsW2 : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDTradeExcessDayJobsW2],
      exportingDayJobsW3 : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDTradeExcessDayJobsW3],
      exportingNightJobsW1 : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDTradeExcessNightJobsW1],
      exportingNightJobsW2 : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDTradeExcessNightJobsW2],
      exportingNightJobsW3 : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDTradeExcessNightJobsW3],
      jobsSwitch : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDTradeSwitchJobs],
      jobsConnectionSwitch : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDTradeSwitchConnectionJobs]
    }
  },
  update : function (a) {
    this.data.importingJobsW1 = a.importingDayJobsW1.amount + a.importingNightJobsW1.amount;
    this.data.importingJobsW2 = a.importingDayJobsW2.amount + a.importingNightJobsW2.amount;
    this.data.importingJobsW3 =
      a.importingDayJobsW3.amount + a.importingNightJobsW3.amount;
    this.data.exportingJobsW1 = a.exportingDayJobsW1.amount + a.exportingNightJobsW1.amount;
    this.data.exportingJobsW2 = a.exportingDayJobsW2.amount + a.exportingNightJobsW2.amount;
    this.data.exportingJobsW3 = a.exportingDayJobsW3.amount + a.exportingNightJobsW3.amount;
    this.data.localSwitchAmount = a.jobsSwitch.amount;
    this.data.connectionSwitchAmount = a.jobsConnectionSwitch.amount;
    this.data.totals.importing = this.data.importingJobsW1 + this.data.importingJobsW2 + this.data.importingJobsW3;
    this.data.totals.exporting = this.data.exportingJobsW1 + this.data.exportingJobsW2 + this.data.exportingJobsW3
  },
  onToggleIncomingClicked : function (a) {
    simcity.CreateUnit("Trading_ToggleSwitchJobs", a)
  },
  onIncreaseButtonClicked : function (a) {
    simcity.ModifyUnitBinDebugCheat(a, "JobsW1", simcity.kTradeConnectionAlterResidentsAmount);
    simcity.ModifyUnitBinDebugCheat(a, "JobsW2", simcity.kTradeConnectionAlterResidentsAmount);
    simcity.ModifyUnitBinDebugCheat(a, "JobsW3", simcity.kTradeConnectionAlterResidentsAmount)
  },
  onDecreaseButtonClicked : function (a) {
    simcity.ModifyUnitBinDebugCheat(a,
      "JobsW1", -simcity.kTradeConnectionAlterResidentsAmount);
    simcity.ModifyUnitBinDebugCheat(a, "JobsW2", -simcity.kTradeConnectionAlterResidentsAmount);
    simcity.ModifyUnitBinDebugCheat(a, "JobsW3", -simcity.kTradeConnectionAlterResidentsAmount)
  }
};
simcity.kTradeConnectionResidents = {
  text : new scrui.cLocaleString("Resources.json", "0x8b6871fa", "Workers"),
  importIconPath : "Graphics/Trade/tradeWall_icon_residents_import.png",
  exportIconPath : "Graphics/Trade/tradeWall_icon_residents_export.png",
  enableTradingToggle : !1,
  data : {
    importingResidentsW1 : 0,
    importingResidentsW2 : 0,
    importingResidentsW3 : 0,
    exportingResidentsW1 : 0,
    exportingResidentsW2 : 0,
    exportingResidentsW3 : 0,
    localSwitchAmount : 0,
    connectionSwitchAmount : 0,
    totals : {
      importing : 0,
      exporting : 0
    }
  },
  queries : function (a) {
    return {
      importingResidentWorkersW1 : [simcity.kDataUnits,
        a, simcity.kDataBins, simcity.kResourceIDResidentWorkerW1],
      importingResidentShoppersW1 : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDResidentShopperW1],
      importingResidentWorkersW2 : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDResidentWorkerW2],
      importingResidentShoppersW2 : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDResidentShopperW2],
      importingResidentWorkersW3 : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDResidentWorkerW3],
      importingResidentShoppersW3 : [simcity.kDataUnits,
        a, simcity.kDataBins, simcity.kResourceIDResidentShopperW3],
      exportingResidentWorkersW1 : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDTradeExcessResidentWorkerW1],
      exportingResidentWorkersW2 : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDTradeExcessResidentWorkerW2],
      exportingResidentWorkersW3 : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDTradeExcessResidentWorkerW3],
      exportingResidentShoppersW1 : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDTradeExcessResidentShopperW1],
      exportingResidentShoppersW2 : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDTradeExcessResidentShopperW2],
      exportingResidentShoppersW3 : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDTradeExcessResidentShopperW3],
      residentsSwitch : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDTradeSwitchResidents],
      residentsConnectionSwitch : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDTradeSwitchConnectionResidents]
    }
  },
  update : function (a) {
    this.data.importingResidentWorkersW1 =
      a.importingResidentWorkersW1.amount;
    this.data.importingResidentShoppersW1 = a.importingResidentShoppersW1.amount;
    this.data.importingResidentWorkersW2 = a.importingResidentWorkersW2.amount;
    this.data.importingResidentShoppersW2 = a.importingResidentShoppersW2.amount;
    this.data.importingResidentWorkersW3 = a.importingResidentWorkersW3.amount;
    this.data.importingResidenShoppertsW3 = a.importingResidentShoppersW3.amount;
    this.data.exportingResidentsW1 = a.exportingResidentWorkersW1.amount;
    this.data.exportingResidentsW2 =
      a.exportingResidentWorkersW2.amount;
    this.data.exportingResidentsW3 = a.exportingResidentWorkersW3.amount;
    this.data.localSwitchAmount = a.residentsSwitch.amount;
    this.data.connectionSwitchAmount = a.residentsConnectionSwitch.amount;
    this.data.totals.importing = a.importingResidentWorkersW1.amount + a.importingResidentShoppersW1.amount + a.importingResidentWorkersW2.amount + a.importingResidentShoppersW2.amount + a.importingResidentWorkersW3.amount + a.importingResidentShoppersW3.amount;
    this.data.totals.exporting = a.exportingResidentWorkersW1.amount +
      a.exportingResidentWorkersW2.amount + a.exportingResidentWorkersW3.amount
  },
  onToggleIncomingClicked : function (a) {
    simcity.CreateUnit("Trading_ToggleSwitchResidents", a)
  },
  onIncreaseButtonClicked : function (a) {
    simcity.ModifyUnitBinDebugCheat(a, "ResidentW1", simcity.kTradeConnectionAlterResidentsAmount);
    simcity.ModifyUnitBinDebugCheat(a, "ResidentW2", simcity.kTradeConnectionAlterResidentsAmount);
    simcity.ModifyUnitBinDebugCheat(a, "ResidentW3", simcity.kTradeConnectionAlterResidentsAmount)
  },
  onDecreaseButtonClicked : function (a) {
    simcity.ModifyUnitBinDebugCheat(a,
      "ResidentW1", -simcity.kTradeConnectionAlterResidentsAmount);
    simcity.ModifyUnitBinDebugCheat(a, "ResidentW2", -simcity.kTradeConnectionAlterResidentsAmount);
    simcity.ModifyUnitBinDebugCheat(a, "ResidentW3", -simcity.kTradeConnectionAlterResidentsAmount)
  }
};
simcity.kTradeConnectionShoppers = {
  text : new scrui.cLocaleString("Resources.json", "0x0e86c018", "Shoppers"),
  importIconPath : "Graphics/Trade/tradeWall_icon_shoppers_import.png",
  exportIconPath : "Graphics/Trade/tradeWall_icon_shoppers_export.png",
  enableTradingToggle : !1,
  data : {
    importingShoppersW1 : 0,
    importingShoppersW2 : 0,
    importingShoppersW3 : 0,
    exportingShoppersW1 : 0,
    exportingShoppersW2 : 0,
    exportingShoppersW3 : 0,
    localSwitchAmount : 0,
    connectionSwitchAmount : 0,
    totals : {
      importing : 0,
      exporting : 0
    }
  },
  queries : function (a) {
    return {
      importingShoppersW1 : [simcity.kDataUnits,
        a, simcity.kDataBins, simcity.kResourceIDShoppersNeededW1],
      importingShoppersW2 : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDShoppersNeededW2],
      importingShoppersW3 : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDShoppersNeededW3],
      exportingShoppersW1 : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDExcessShoppersNeededW1],
      exportingShoppersW2 : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDExcessShoppersNeededW2],
      exportingShoppersW3 : [simcity.kDataUnits, a, simcity.kDataBins,
        simcity.kResourceIDExcessShoppersNeededW3],
      shoppingSwitch : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDTradeSwitchShopping],
      shoppingConnectionSwitch : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDTradeSwitchConnectionShopping]
    }
  },
  update : function (a) {
    this.data.importingShoppersW1 = a.importingShoppersW1.amount;
    this.data.importingShoppersW2 = a.importingShoppersW2.amount;
    this.data.importingShoppersW3 = a.importingShoppersW3.amount;
    this.data.exportingShoppersW1 = a.exportingShoppersW1.amount;
    this.data.exportingShoppersW2 = a.exportingShoppersW2.amount;
    this.data.exportingShoppersW3 = a.exportingShoppersW3.amount;
    this.data.localSwitchAmount = a.shoppingSwitch.amount;
    this.data.connectionSwitchAmount = a.shoppingConnectionSwitch.amount;
    this.data.totals.importing = a.importingShoppersW1.amount + a.importingShoppersW2.amount + a.importingShoppersW3.amount;
    this.data.totals.exporting = a.exportingShoppersW1.amount + a.exportingShoppersW2.amount + a.exportingShoppersW3.amount
  },
  onToggleIncomingClicked : function (a) {
    simcity.CreateUnit("Trading_ToggleSwitchShopping",
      a)
  },
  onIncreaseButtonClicked : function (a) {
    simcity.ModifyUnitBinDebugCheat(a, "ShoppersNeededW1", simcity.kTradeConnectionAlterResidentsAmount);
    simcity.ModifyUnitBinDebugCheat(a, "ShoppersNeededW2", simcity.kTradeConnectionAlterResidentsAmount);
    simcity.ModifyUnitBinDebugCheat(a, "ShoppersNeededW3", simcity.kTradeConnectionAlterResidentsAmount)
  },
  onDecreaseButtonClicked : function (a) {
    simcity.ModifyUnitBinDebugCheat(a, "ShoppersNeededW1", -simcity.kTradeConnectionAlterResidentsAmount);
    simcity.ModifyUnitBinDebugCheat(a,
      "ShoppersNeededW2", -simcity.kTradeConnectionAlterResidentsAmount);
    simcity.ModifyUnitBinDebugCheat(a, "ShoppersNeededW3", -simcity.kTradeConnectionAlterResidentsAmount)
  }
};
simcity.kTradeConnectionEducation = {
  text : new scrui.cLocaleString("Resources.json", "0x0e86c019", "Education"),
  importIconPath : "Graphics/Trade/tradeWall_icon_education_import.png",
  exportIconPath : "Graphics/Trade/tradeWall_icon_education_export.png",
  enableTradingToggle : !1,
  data : {
    importingEducationE2 : 0,
    importingEducationE3 : 0,
    exportingEducationE2 : 0,
    exportingEducationE3 : 0,
    localSwitchAmount : 0,
    connectionSwitchAmount : 0,
    totals : {
      importing : 0,
      exporting : 0
    }
  },
  queries : function (a) {
    return {
      importingEducationE2 : [simcity.kDataUnits,
        a, simcity.kDataBins, simcity.kResourceIDStudentE2],
      importingEducationE3 : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDStudentE3],
      exportingEducationE2 : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDExcessStudentE2],
      exportingEducationE3 : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDExcessStudentE3],
      educationSwitch : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDTradeSwitchEducation],
      educationConnectionSwitch : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDTradeSwitchConnectionEducation]
    }
  },
  update : function (a) {
    this.data.importingEducationE2 = a.importingEducationE2.amount;
    this.data.importingEducationE3 = a.importingEducationE3.amount;
    this.data.exportingEducationE2 = a.exportingEducationE2.amount;
    this.data.exportingEducationE3 = a.exportingEducationE3.amount;
    this.data.localSwitchAmount = a.educationSwitch.amount;
    this.data.connectionSwitchAmount = a.educationConnectionSwitch.amount;
    this.data.totals.importing = a.importingEducationE2.amount + a.importingEducationE3.amount;
    this.data.totals.exporting = a.exportingEducationE2.amount +
      a.exportingEducationE3.amount
  },
  onToggleIncomingClicked : function (a) {
    simcity.CreateUnit("Trading_ToggleSwitchEducation", a)
  },
  onIncreaseButtonClicked : function (a) {
    simcity.ModifyUnitBinDebugCheat(a, "StudentE2", simcity.kTradeConnectionAlterKidsAmount);
    simcity.ModifyUnitBinDebugCheat(a, "StudentE3", simcity.kTradeConnectionAlterKidsAmount)
  },
  onDecreaseButtonClicked : function (a) {
    simcity.ModifyUnitBinDebugCheat(a, "StudentE2", -simcity.kTradeConnectionAlterKidsAmount);
    simcity.ModifyUnitBinDebugCheat(a, "StudentE3",
      -simcity.kTradeConnectionAlterKidsAmount)
  }
};
simcity.kTradeConnectionKids = {
  text : new scrui.cLocaleString("Resources.json", "0x0ec8467e", "Students"),
  importIconPath : "Graphics/Trade/tradeWall_icon_kids_import.png",
  exportIconPath : "Graphics/Trade/tradeWall_icon_kids_export.png",
  enableTradingToggle : !1,
  data : {
    importingKids : 0,
    exportingKids : 0,
    localSwitchAmount : 0,
    connectionSwitchAmount : 0,
    totals : {
      importing : 0,
      exporting : 0
    }
  },
  queries : function (a) {
    return {
      importingKids : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDKid],
      exportingKids : [simcity.kDataUnits,
        a, simcity.kDataBins, simcity.kResourceIDExcessKids],
      kidsSwitch : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDTradeSwitchKids],
      kidsConnectionSwitch : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDTradeSwitchConnectionKids]
    }
  },
  update : function (a) {
    this.data.importingKids = a.importingKids.amount;
    this.data.exportingKids = a.exportingKids.amount;
    this.data.localSwitchAmount = a.kidsSwitch.amount;
    this.data.connectionSwitchAmount = a.kidsConnectionSwitch.amount;
    this.data.totals.importing = a.importingKids.amount;
    this.data.totals.exporting = a.exportingKids.amount
  },
  onToggleIncomingClicked : function (a) {
    simcity.CreateUnit("Trading_ToggleSwitchKids", a)
  },
  onIncreaseButtonClicked : function (a) {
    simcity.ModifyUnitBinDebugCheat(a, "Kid", simcity.kTradeConnectionAlterKidsAmount)
  },
  onDecreaseButtonClicked : function (a) {
    simcity.ModifyUnitBinDebugCheat(a, "Kid", -simcity.kTradeConnectionAlterKidsAmount)
  }
};
simcity.kTradeConnectionPower = {
  text : new scrui.cLocaleString("Resources.json", "0xe62d5803", "Power"),
  importIconPath : "Graphics/Trade/tradeWall_icon_power_import.png",
  exportIconPath : "Graphics/Trade/tradeWall_icon_power__export.png",
  data : {
    extraPower : 0,
    powerProducedInBox : 0,
    rate : 0,
    localSwitchAmount : 0,
    connectionSwitchAmount : 0,
    totals : {
      importing : 0,
      exporting : 0
    }
  },
  queries : function (a) {
    return {
      extrapower : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDPower],
      powerProducedInBox : [simcity.kDataBins, simcity.kResourceIDExcessPower],
      powerSwitch : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDTradeSwitchPower],
      powerConnectionSwitch : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDTradeSwitchConnectionPower]
    }
  },
  update : function (a) {
    this.data.extrapower = a.extrapower.amount;
    this.data.powerProducedInBox = a.powerProducedInBox.amount;
    this.data.localSwitchAmount = a.powerSwitch.amount;
    this.data.connectionSwitchAmount = a.powerConnectionSwitch.amount;
    this.data.totals.importing = 0;
    this.data.totals.exporting = 0
  },
  onToggleIncomingClicked : function (a) {
    simcity.CreateUnit("Trading_ToggleSwitchPower",
      a)
  },
  onIncreaseButtonClicked : function (a) {
    simcity.ModifyUnitBinDebugCheat(a, "Power", 16)
  },
  onDecreaseButtonClicked : function (a) {
    simcity.ModifyUnitBinDebugCheat(a, "Power", -16)
  }
};
simcity.kTradeConnectionWater = {
  text : new scrui.cLocaleString("Resources.json", "0xc203a244", "Water"),
  importIconPath : "Graphics/Trade/tradeWall_icon_water_import.png",
  exportIconPath : "Graphics/Trade/tradeWall_icon_water_export.png",
  data : {
    extrawater : 0,
    waterProducedInBox : 0,
    localSwitchAmount : 0,
    connectionSwitchAmount : 0,
    totals : {
      importing : 0,
      exporting : 0
    }
  },
  queries : function (a) {
    return {
      extrawater : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDWater],
      waterProducedInBox : [simcity.kDataBins, simcity.kResourceIDExcessWater],
      waterSwitch : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDTradeSwitchWater],
      waterConnectionSwitch : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDTradeSwitchConnectionWater]
    }
  },
  update : function (a) {
    this.data.extrawater = a.extrawater.amount;
    this.data.waterProducedInBox = a.waterProducedInBox.amount;
    this.data.localSwitchAmount = a.waterSwitch.amount;
    this.data.connectionSwitchAmount = a.waterConnectionSwitch.amount;
    this.data.totals.importing = 4 * a.extrawater.amount;
    this.data.totals.exporting =
      4 * a.waterProducedInBox.amount
  },
  onToggleIncomingClicked : function (a) {
    simcity.CreateUnit("Trading_ToggleSwitchWater", a)
  },
  onIncreaseButtonClicked : function (a) {
    simcity.ModifyUnitBinDebugCheat(a, "Water", 10)
  },
  onDecreaseButtonClicked : function (a) {
    simcity.ModifyUnitBinDebugCheat(a, "Water", -10)
  }
};
simcity.kTradeConnectionFireTrucks = {
  text : new scrui.cLocaleString("Resources.json", "0x0e86c01a", "Fire Trucks"),
  importIconPath : "Graphics/Trade/tradeWall_icon_firetruck_import.png",
  exportIconPath : "Graphics/Trade/tradeWall_icon_firetruck_export.png",
  data : {
    firetrucksT1 : 0,
    firetrucksT2 : 0,
    exportingfiretrucksT1 : 0,
    exportingfiretrucksT2 : 0,
    fireServiceTokenSent : 0,
    fireServiceTokenGranted : 0,
    localSwitchAmount : 0,
    connectionSwitchAmount : 0,
    totals : {
      importing : 0,
      exporting : 0
    }
  },
  queries : function (a) {
    return {
      firetrucksT1 : [simcity.kDataUnits,
        a, simcity.kDataBins, simcity.kResourceIDFireTruckR1],
      firetrucksT2 : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDFireTruckR2],
      exportingfiretrucksT1 : [simcity.kDataBins, simcity.kResourceIDExcessFireTruckR1],
      exportingfiretrucksT2 : [simcity.kDataBins, simcity.kResourceIDExcessFireTruckR2],
      fireSwitch : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDTradeSwitchFire],
      fireConnectionSwitch : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDTradeSwitchConnectionFire],
      fireServiceTokenSent : [simcity.kDataUnits,
        a, simcity.kDataBins, simcity.kResourceIDFireServiceToken],
      fireServiceTokenGranted : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDFireServiceTokenGranted]
    }
  },
  update : function (a) {
    this.data.firetrucksT1 = a.firetrucksT1.amount;
    this.data.firetrucksT2 = a.firetrucksT2.amount;
    this.data.exportingfiretrucksT1 = a.exportingfiretrucksT1.amount;
    this.data.exportingfiretrucksT2 = a.exportingfiretrucksT2.amount;
    this.data.fireServiceTokenSent = a.fireServiceTokenSent.amount;
    this.data.fireServiceTokenGranted = a.fireServiceTokenGranted.amount;
    this.data.localSwitchAmount = a.fireSwitch.amount;
    this.data.connectionSwitchAmount = a.fireConnectionSwitch.amount;
    this.data.totals.importing = a.firetrucksT1.amount + a.firetrucksT2.amount;
    this.data.totals.exporting = a.exportingfiretrucksT1.amount + a.exportingfiretrucksT2.amount
  },
  onToggleIncomingClicked : function (a) {
    simcity.CreateUnit("Trading_ToggleSwitchFire", a)
  },
  onIncreaseButtonClicked : function (a) {
    simcity.ModifyUnitBinDebugCheat(a, "FireTruckR2", 1);
    simcity.ModifyUnitBinDebugCheat(a, "NumberOfFireTrucks", 1)
  },
  onDecreaseButtonClicked : function (a) {
    simcity.ModifyUnitBinDebugCheat(a, "FireTruckR2", -1);
    simcity.ModifyUnitBinDebugCheat(a, "NumberOfFireTrucks", -1)
  },
  onTokenButtonClicked : function (a) {
    this.tokenButton.mIsSelected ? simcity.CreateUnit("Trading_RemoveFireServiceToken", a) : simcity.CreateUnit("Trading_AddFireServiceToken", a)
  }
};
simcity.kTradeConnectionPolice = {
  text : new scrui.cLocaleString("Resources.json", "0x0e86c01b", "Police"),
  importIconPath : "Graphics/Trade/tradeWall_icon_police_import.png",
  exportIconPath : "Graphics/Trade/tradeWall_icon_police_export.png",
  data : {
    policeCarR1 : 0,
    exportingPoliceCarR1 : 0,
    policeServiceTokenSent : 0,
    policeServiceTokenGranted : 0,
    localSwitchAmount : 0,
    connectionSwitchAmount : 0,
    totals : {
      importing : 0,
      exporting : 0
    }
  },
  queries : function (a) {
    return {
      policeCarR1 : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDPoliceCarR1],
      exportingPoliceCarR1 : [simcity.kDataBins, simcity.kResourceIDTradeExcessPoliceCarR1],
      policeServiceTokenSent : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDPoliceServiceToken],
      policeServiceTokenGranted : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDPoliceServiceTokenGranted]
    }
  },
  update : function (a) {
    this.data.policeCarR1 = a.policeCarR1.amount;
    this.data.exportingPoliceCarR1 = a.exportingPoliceCarR1.amount;
    this.data.policeServiceTokenSent = a.policeServiceTokenSent.amount;
    this.data.policeServiceTokenGranted =
      a.policeServiceTokenGranted.amount;
    this.data.localSwitchAmount = 1;
    this.data.connectionSwitchAmount = 1;
    this.data.totals.importing = a.policeCarR1.amount;
    this.data.totals.exporting = a.exportingPoliceCarR1.amount
  },
  onToggleIncomingClicked : function () {},
  onIncreaseButtonClicked : function (a) {
    simcity.ModifyUnitBinDebugCheat(a, "PoliceCarR1", 1)
  },
  onDecreaseButtonClicked : function (a) {
    simcity.ModifyUnitBinDebugCheat(a, "PoliceCarR1", -1)
  },
  onTokenButtonClicked : function (a) {
    this.tokenButton.mIsSelected ? simcity.CreateUnit("Trading_RemovePoliceServiceToken",
      a) : simcity.CreateUnit("Trading_AddPoliceServiceToken", a)
  }
};
simcity.kTradeConnectionGarbage = {
  text : new scrui.cLocaleString("Resources.json", "0x0e30d0a2", "Garbage"),
  importIconPath : "Graphics/Trade/tradeWall_icon_garbage_import.png",
  exportIconPath : "Graphics/Trade/tradeWall_icon_garbage_export.png",
  data : {
    garbageTruckR1 : 0,
    exportingGarbageTruckR1 : 0,
    garbageServiceTokenSent : 0,
    garbageServiceTokenGranted : 0,
    localSwitchAmount : 0,
    connectionSwitchAmount : 0,
    totals : {
      importing : 0,
      exporting : 0
    }
  },
  queries : function (a) {
    return {
      garbageTruckR1 : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDGarbageTruckR1],
      exportingGarbageTruckR1 : [simcity.kDataBins, simcity.kResourceIDTradeExcessGarbageTruckR1],
      garbageServiceTokenSent : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDGarbageServiceToken],
      garbageServiceTokenGranted : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDGarbageServiceTokenGranted]
    }
  },
  update : function (a) {
    this.data.garbageTruckR1 = a.garbageTruckR1.amount;
    this.data.exportingGarbageTruckR1 = a.exportingGarbageTruckR1.amount;
    this.data.garbageServiceTokenSent = a.garbageServiceTokenSent.amount;
    this.data.garbageServiceTokenGranted = a.garbageServiceTokenGranted.amount;
    this.data.localSwitchAmount = 1;
    this.data.connectionSwitchAmount = 1;
    this.data.totals.importing = a.garbageTruckR1.amount;
    this.data.totals.exporting = a.exportingGarbageTruckR1.amount
  },
  onToggleIncomingClicked : function () {},
  onIncreaseButtonClicked : function (a) {
    simcity.ModifyUnitBinDebugCheat(a, "GarbageTruckR1", 1)
  },
  onDecreaseButtonClicked : function (a) {
    simcity.ModifyUnitBinDebugCheat(a, "GarbageTruckR1", -1)
  },
  onTokenButtonClicked : function (a) {
    this.tokenButton.mIsSelected ?
    simcity.CreateUnit("Trading_RemoveGarbageServiceToken", a) : simcity.CreateUnit("Trading_AddGarbageServiceToken", a)
  }
};
simcity.kTradeConnectionHealth = {
  text : new scrui.cLocaleString("Resources.json", "0x0e86c01d", "Health"),
  importIconPath : "Graphics/Trade/tradeWall_icon_health_import.png",
  exportIconPath : "Graphics/Trade/tradeWall_icon_health_export.png",
  data : {
    ambulanceR1 : 0,
    exportingAmbulanceR1 : 0,
    healthServiceTokenSent : 0,
    healthServiceTokenGranted : 0,
    localSwitchAmount : 0,
    connectionSwitchAmount : 0,
    totals : {
      importing : 0,
      exporting : 0
    }
  },
  queries : function (a) {
    return {
      ambulanceR1 : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDAmbulanceR1],
      exportingAmbulanceR1 : [simcity.kDataBins, simcity.kResourceIDTradeExcessAmbulanceR1],
      healthServiceTokenSent : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDHealthServiceToken],
      healthServiceTokenGranted : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDHealthServiceTokenGranted]
    }
  },
  update : function (a) {
    this.data.ambulanceR1 = a.ambulanceR1.amount;
    this.data.exportingAmbulanceR1 = a.exportingAmbulanceR1.amount;
    this.data.healthServiceTokenSent = a.healthServiceTokenSent.amount;
    this.data.healthServiceTokenGranted =
      a.healthServiceTokenGranted.amount;
    this.data.localSwitchAmount = 1;
    this.data.connectionSwitchAmount = 1;
    this.data.totals.importing = a.ambulanceR1.amount;
    this.data.totals.exporting = a.exportingAmbulanceR1.amount
  },
  onToggleIncomingClicked : function () {},
  onIncreaseButtonClicked : function (a) {
    simcity.ModifyUnitBinDebugCheat(a, "AmbulanceR1", 1)
  },
  onDecreaseButtonClicked : function (a) {
    simcity.ModifyUnitBinDebugCheat(a, "AmbulanceR1", -1)
  },
  onTokenButtonClicked : function (a) {
    this.tokenButton.mIsSelected ? simcity.CreateUnit("Trading_RemoveHealthServiceToken",
      a) : simcity.CreateUnit("Trading_AddHealthServiceToken", a)
  }
};
simcity.kRegionDataLayer_TokenKeys = [simcity.kRegionDataLayer_Fire, simcity.kRegionDataLayer_Police, simcity.kRegionDataLayer_Garbage, simcity.kRegionDataLayer_Health];
simcity.kRegionDataLayers_IconPath = "Graphics/Icons/";
simcity.kRegionDataLayers = {
  commuters : {
    label : "Commuters",
    targetControl : 235173107,
    layers : [{
        key : simcity.kRegionDataLayer_Workers,
        label : {
          tableID : 37687336,
          stringID : 248004570
        },
        icon : "TradeIcons/icn-trade-workers.png",
        iconWhite : "TradeIcons/icn-trade-workers_white.png",
        iconRed : "TradeIcons/icn-trade-workers_red.png",
        iconYellow : "TradeIcons/icn-trade-workers_yellow.png"
      }, {
        key : simcity.kRegionDataLayer_Shoppers,
        label : {
          tableID : 37687336,
          stringID : 243712024
        },
        icon : "TradeIcons/icn-trade-shoppers.png",
        iconWhite : "TradeIcons/icn-trade-shoppers_white.png",
        iconRed : "TradeIcons/icn-trade-shoppers_red.png",
        iconYellow : "TradeIcons/icn-trade-shoppers_yellow.png"
      }, {
        key : simcity.kRegionDataLayer_Freight,
        label : {
          tableID : 37687336,
          stringID : 242491767
        },
        icon : "TradeIcons/icn-trade-freight.png",
        iconWhite : "TradeIcons/icn-trade-freight_white.png",
        iconRed : "TradeIcons/icn-trade-freight_red.png",
        iconYellow : "TradeIcons/icn-trade-freight_yellow.png"
      }, {
        key : simcity.kRegionDataLayer_Students,
        label : {
          tableID : 37687336,
          stringID : 248006270
        },
        icon : "TradeIcons/icn-trade-education.png",
        iconWhite : "TradeIcons/icn-trade-education_white.png",
        iconRed : "TradeIcons/icn-trade-education_red.png",
        iconYellow : "TradeIcons/icn-trade-education_yellow.png"
      }
    ]
  },
  transport : {
    label : "Transport",
    targetControl : 249655481,
    layers : [{
        key : simcity.kRegionDataLayer_Transport,
        label : {
          tableID : 1988789331,
          stringID : 204987548
        },
        icon : "SystemCategoryIcons/icn_sci_masstransit.png",
        iconWhite : "SystemCategoryIcons/icn_sci_masstransit_white.png",
        iconRed : "SystemCategoryIcons/icn_sci_masstransit_red.png",
        iconYellow : "SystemCategoryIcons/icn_sci_masstransit_yellow.png"
      }
    ]
  },
  utilities : {
    label : "Utilities",
    targetControl : 235173156,
    layers : [{
        key : simcity.kRegionDataLayer_Power,
        label : {
          tableID : 1988789331,
          stringID : 204209365
        },
        icon : "TradeIcons/icn-trade-power.png",
        iconWhite : "TradeIcons/icn-trade-power_white.png",
        iconRed : "TradeIcons/icn-trade-power_red.png",
        iconYellow : "TradeIcons/icn-trade-power_yellow.png"
      }, {
        key : simcity.kRegionDataLayer_Water,
        label : {
          tableID : 1988789331,
          stringID : 204209366
        },
        icon : "TradeIcons/icn-trade-water.png",
        iconWhite : "TradeIcons/icn-trade-water_white.png",
        iconRed : "TradeIcons/icn-trade-water_red.png",
        iconYellow : "TradeIcons/icn-trade-water_yellow.png"
      }, {
        key : simcity.kRegionDataLayer_Sewage,
        label : {
          tableID : 1988789331,
          stringID : 225805057
        },
        icon : "TradeIcons/icn-trade-sewage.png",
        iconWhite : "TradeIcons/icn-trade-sewage_white.png",
        iconRed : "TradeIcons/icn-trade-sewage_red.png",
        iconYellow : "TradeIcons/icn-trade-sewage_yellow.png"
      }
    ]
  },
  services : {
    label : "Services",
    targetControl : 235173124,
    layers : [{
        key : simcity.kRegionDataLayer_Garbage,
        label : {
          tableID : 1988789331,
          stringID : 236445260
        },
        icon : "TradeIcons/icn-trade-garbage.png",
        iconWhite : "TradeIcons/icn-trade-garbage_white.png",
        iconRed : "TradeIcons/icn-trade-garbage_red.png",
        iconYellow : "TradeIcons/icn-trade-garbage_yellow.png"
      }, {
        key : simcity.kRegionDataLayer_Fire,
        label : {
          tableID : 1988789331,
          stringID : 204209367
        },
        icon : "TradeIcons/icn-trade-fire-department.png",
        iconWhite : "TradeIcons/icn-trade-fire-department_white.png",
        iconRed : "TradeIcons/icn-trade-fire-department_red.png",
        iconYellow : "TradeIcons/icn-trade-fire-department_yellow.png"
      }, {
        key : simcity.kRegionDataLayer_Health,
        label : {
          tableID : 1988789331,
          stringID : 204209371
        },
        icon : "TradeIcons/icn-trade-health.png",
        iconWhite : "TradeIcons/icn-trade-health_white.png",
        iconRed : "TradeIcons/icn-trade-health_red.png",
        iconYellow : "TradeIcons/icn-trade-health_yellow.png"
      }, {
        key : simcity.kRegionDataLayer_Police,
        label : {
          tableID : 1988789331,
          stringID : 204209368
        },
        icon : "TradeIcons/icn-trade-police.png",
        iconWhite : "TradeIcons/icn-trade-police_white.png",
        iconRed : "TradeIcons/icn-trade-police_red.png",
        iconYellow : "TradeIcons/icn-trade-police_yellow.png"
      }
    ]
  },
  gifting : {
    label : "Gifts",
    targetControl : 240497420,
    layers : [{
        key : simcity.kRegionDataLayer_ResourceGifting,
        label : {
          tableID : 5818370,
          stringID : 245774531
        },
        icon : "TradeIcons/icn-trade-resourcegifting.png",
        iconWhite : "TradeIcons/icn-trade-resourcegifting_white.png",
        iconRed : "TradeIcons/icn-trade-resourcegifting_red.png",
        iconYellow : "TradeIcons/icn-trade-resourcegifting_yellow.png"
      }
    ]
  },
  greatwork : {
    label : "Great Works",
    targetControl : 250005339,
    layers : [{
        key : simcity.kRegionDataLayer_GreatWorks,
        label : {
          tableID : 1988789331,
          stringID : 252094373
        },
        icon : "TradeIcons/icn-trade-greatworks.png",
        iconWhite : "TradeIcons/icn-trade-greatworks_white.png",
        iconRed : "TradeIcons/icn-trade-greatworks_red.png",
        iconYellow : "TradeIcons/icn-trade-greatworks_yellow.png"
      }
    ]
  }
};
simcity.UpdateVisualizedData = function (a, b) {
  a.amount != b && (a.amount = b, a.changed = !0)
};
simcity.UpdateVisualizedCombinedData = function (a, b, c) {
  a.outAmount != b && (a.outAmount = b, a.changed = !0);
  a.inAmount != c && (a.inAmount = c, a.changed = !0)
};
simcity.CalculateTotalWorkers = function (a, b, c) {
  var d = 0;
  a && (d += a);
  b && (d -= b);
  c && (d += c);
  return Math.max(0, d)
};
simcity.kRegionalCitiesResourceResidential = function () {
  return {
    type : "residential",
    importIconPath : "Graphics/Trade/tradeWall_icon_residents_import.png",
    exportIconPath : "Graphics/Trade/tradeWall_icon_residents_export.png",
    data : {
      totalWorkersW1 : 0,
      totalJobsW1 : 0,
      excessWorkersW1 : 0,
      excessJobsW1 : 0,
      totalWorkersW2 : 0,
      totalJobsW2 : 0,
      excessWorkersW2 : 0,
      excessJobsW2 : 0,
      totalWorkersW3 : 0,
      totalJobsW3 : 0,
      excessWorkersW3 : 0,
      excessJobsW3 : 0
    },
    visualizedData : {
      totalWorkersW1 : {
        uiKey : simcity.kResourceUIKeys.TotalWorkersW1,
        amount : -1,
        changed : !1
      },
      totalJobsW1 : {
        uiKey : simcity.kResourceUIKeys.TotalJobsW1,
        amount : -1,
        changed : !1
      },
      excessWorkersW1 : {
        uiKey : simcity.kResourceUIKeys.ExcessWorkersW1,
        amount : -1,
        changed : !1
      },
      excessJobsW1 : {
        uiKey : simcity.kResourceUIKeys.ExcessJobsW1,
        amount : -1,
        changed : !1
      },
      totalWorkersW2 : {
        uiKey : simcity.kResourceUIKeys.TotalWorkersW2,
        amount : -1,
        changed : !1
      },
      totalJobsW2 : {
        uiKey : simcity.kResourceUIKeys.TotalJobsW2,
        amount : -1,
        changed : !1
      },
      excessWorkersW2 : {
        uiKey : simcity.kResourceUIKeys.ExcessWorkersW2,
        amount : -1,
        changed : !1
      },
      excessJobsW2 : {
        uiKey : simcity.kResourceUIKeys.ExcessJobsW2,
        amount : -1,
        changed : !1
      },
      totalWorkersW3 : {
        uiKey : simcity.kResourceUIKeys.TotalWorkersW3,
        amount : -1,
        changed : !1
      },
      totalJobsW3 : {
        uiKey : simcity.kResourceUIKeys.TotalJobsW3,
        amount : -1,
        changed : !1
      },
      excessWorkersW3 : {
        uiKey : simcity.kResourceUIKeys.ExcessWorkersW3,
        amount : -1,
        changed : !1
      },
      excessJobsW3 : {
        uiKey : simcity.kResourceUIKeys.ExcessJobsW3,
        amount : -1,
        changed : !1
      }
    },
    visualizedTradeData : {
      commutingWorkersW1 : {
        uiKey : simcity.kResourceUIKeys.CommutingWorkersW1,
        amount : -1,
        changed : !1
      },
      commutingWorkersW2 : {
        uiKey : simcity.kResourceUIKeys.CommutingWorkersW2,
        amount : -1,
        changed : !1
      },
      commutingWorkersW3 : {
        uiKey : simcity.kResourceUIKeys.CommutingWorkersW3,
        amount : -1,
        changed : !1
      },
      tradeCombine : {
        uiKeyIn : simcity.kResourceUIKeys.TradeCommutingWorkersOut,
        uiKeyOut : simcity.kResourceUIKeys.TradeCommutingWorkersIn,
        outAmount : -1,
        inAmount : -1,
        changed : !1
      }
    },
    queries : function (a, b, c, d, e) {
      return (this.viewingOwnBox = b) ? {
        residentWorkerW1 : [simcity.kDataBinAmount, simcity.kResourceIDResidentialWorkerW1],
        neighboringWorkerW1 : ["cachedUnits", simcity.kUnitID_Trading_City_Connection, simcity.kDataBinAmount,
          simcity.kResourceIDResidentWorkerW1],
        pausedWorkerW1 : [simcity.kDataResourceAmount, simcity.kResourceIDResidentWorkerW1Paused],
        lockedWorkerW1 : [simcity.kDataResourceAmount, simcity.kResourceIDResidentWorkerW1Locked],
        enRouteWorkerW1 : [simcity.kDataResourceAmount, simcity.kResourceIDSimWorkerW1],
        exportedWorkerW1 : [simcity.kDataBinAmount, simcity.kResourceIDWorkersExportedW1],
        workingWorkerW1 : [simcity.kDataResourceAmount, simcity.kResourceIDWorkerW1],
        extraWorkingWorkerW1 : [simcity.kDataResourceAmount, simcity.kResourceIDExtraWorkerW1],
        importedWorkerW1 : [simcity.kDataBinAmount, simcity.kResourceIDImportedResidentWorkerW1],
        commutingResidentWorkerW1 : [simcity.kDataConnectedUnits, c, simcity.kDataBinAmount, simcity.kResourceIDWorkersExportedW1],
        dayJobsW1 : [simcity.kDataBinAmount, simcity.kResourceIDDayJobsW1],
        nightJobsW1 : [simcity.kDataBinAmount, simcity.kResourceIDNightJobsW1],
        residentWorkerW2 : [simcity.kDataBinAmount, simcity.kResourceIDResidentialWorkerW2],
        neighboringWorkerW2 : ["cachedUnits", simcity.kUnitID_Trading_City_Connection, simcity.kDataBinAmount,
          simcity.kResourceIDResidentWorkerW2],
        pausedWorkerW2 : [simcity.kDataResourceAmount, simcity.kResourceIDResidentWorkerW2Paused],
        lockedWorkerW2 : [simcity.kDataResourceAmount, simcity.kResourceIDResidentWorkerW2Locked],
        enRouteWorkerW2 : [simcity.kDataResourceAmount, simcity.kResourceIDSimWorkerW2],
        exportedWorkerW2 : [simcity.kDataBinAmount, simcity.kResourceIDWorkersExportedW2],
        workingWorkerW2 : [simcity.kDataResourceAmount, simcity.kResourceIDWorkerW2],
        extraWorkingWorkerW2 : [simcity.kDataResourceAmount, simcity.kResourceIDExtraWorkerW2],
        importedWorkerW2 : [simcity.kDataBinAmount, simcity.kResourceIDImportedResidentWorkerW2],
        commutingResidentWorkerW2 : [simcity.kDataConnectedUnits, c, simcity.kDataBinAmount, simcity.kResourceIDWorkersExportedW2],
        dayJobsW2 : [simcity.kDataBinAmount, simcity.kResourceIDDayJobsW2],
        nightJobsW2 : [simcity.kDataBinAmount, simcity.kResourceIDNightJobsW2],
        residentWorkerW3 : [simcity.kDataBinAmount, simcity.kResourceIDResidentialWorkerW3],
        neighboringWorkerW3 : ["cachedUnits", simcity.kUnitID_Trading_City_Connection, simcity.kDataBinAmount,
          simcity.kResourceIDResidentWorkerW3],
        pausedWorkerW3 : [simcity.kDataResourceAmount, simcity.kResourceIDResidentWorkerW3Paused],
        lockedWorkerW3 : [simcity.kDataResourceAmount, simcity.kResourceIDResidentWorkerW3Locked],
        enRouteWorkerW3 : [simcity.kDataResourceAmount, simcity.kResourceIDSimWorkerW3],
        exportedWorkerW3 : [simcity.kDataBinAmount, simcity.kResourceIDWorkersExportedW3],
        workingWorkerW3 : [simcity.kDataResourceAmount, simcity.kResourceIDWorkerW3],
        extraWorkingWorkerW3 : [simcity.kDataResourceAmount, simcity.kResourceIDExtraWorkerW3],
        importedWorkerW3 : [simcity.kDataBinAmount, simcity.kResourceIDImportedResidentWorkerW3],
        commutingResidentWorkerW3 : [simcity.kDataConnectedUnits, c, simcity.kDataBinAmount, simcity.kResourceIDWorkersExportedW3],
        dayJobsW3 : [simcity.kDataBinAmount, simcity.kResourceIDDayJobsW3],
        nightJobsW3 : [simcity.kDataBinAmount, simcity.kResourceIDNightJobsW3]
      }
       : d && e ? {
        residentWorkerW1 : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingResidentialWorkerW1],
        commutingResidentWorkerW1 : [simcity.kDataConnectedUnits,
          e, simcity.kDataBinAmount, simcity.kResourceIDImportedResidentWorkerW1],
        importedWorkerW1 : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingImportedResidentWorkerW1],
        exportedWorkerW1 : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingExportedWorkerW1],
        dayJobsW1 : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingDayJobsW1],
        nightJobsW1 : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingNightJobsW1],
        residentWorkerW2 : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingResidentialWorkerW2],
        commutingResidentWorkerW2 : [simcity.kDataConnectedUnits, e, simcity.kDataBinAmount, simcity.kResourceIDImportedResidentWorkerW2],
        importedWorkerW2 : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingImportedResidentWorkerW2],
        exportedWorkerW2 : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingExportedWorkerW2],
        dayJobsW2 : [simcity.kDataRegionUnits,
          a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingDayJobsW2],
        nightJobsW2 : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingNightJobsW2],
        residentWorkerW3 : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingResidentialWorkerW3],
        commutingResidentWorkerW3 : [simcity.kDataConnectedUnits, e, simcity.kDataBinAmount, simcity.kResourceIDImportedResidentWorkerW3],
        importedWorkerW3 : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingImportedResidentWorkerW3],
        exportedWorkerW3 : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingExportedWorkerW3],
        dayJobsW3 : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingDayJobsW3],
        nightJobsW3 : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingNightJobsW3]
      }
       : {
        residentWorkerW1 : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingResidentialWorkerW1],
        importedWorkerW1 : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount,
          simcity.kResourceIDTradeTrackingImportedResidentWorkerW1],
        exportedWorkerW1 : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingExportedWorkerW1],
        dayJobsW1 : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingDayJobsW1],
        nightJobsW1 : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingNightJobsW1],
        residentWorkerW2 : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingResidentialWorkerW2],
        importedWorkerW2 : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingImportedResidentWorkerW2],
        exportedWorkerW2 : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingExportedWorkerW2],
        dayJobsW2 : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingDayJobsW2],
        nightJobsW2 : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingNightJobsW2],
        residentWorkerW3 : [simcity.kDataRegionUnits, a,
          simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingResidentialWorkerW3],
        importedWorkerW3 : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingImportedResidentWorkerW3],
        exportedWorkerW3 : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingExportedWorkerW3],
        dayJobsW3 : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingDayJobsW3],
        nightJobsW3 : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingNightJobsW3]
      }
    },
    update : function (a) {
      this.data.totalWorkersW1 = a.residentWorkerW1;
      this.data.totalJobsW1 = a.dayJobsW1 + a.nightJobsW1;
      var b = 0,
      c = 0,
      d = 0,
      c = null != a.importedWorkerW1 ? a.importedWorkerW1 : 0,
      d = null != a.exportedWorkerW1 ? a.exportedWorkerW1 : 0,
      b = this.data.totalJobsW1 - this.data.totalWorkersW1;
      0 < b ? (this.data.excessWorkersW1 = 0, this.data.excessJobsW1 = c > b ? 0 : b - c) : (b = -b, this.data.excessWorkersW1 = d > b ? 0 : b - d, this.data.excessJobsW1 = 0);
      simcity.UpdateVisualizedData(this.visualizedData.totalWorkersW1, this.data.totalWorkersW1);
      simcity.UpdateVisualizedData(this.visualizedData.totalJobsW1,
        this.data.totalJobsW1);
      simcity.UpdateVisualizedData(this.visualizedData.excessJobsW1, this.data.excessJobsW1);
      simcity.UpdateVisualizedData(this.visualizedData.excessWorkersW1, this.data.excessWorkersW1);
      simcity.UpdateVisualizedData(this.visualizedTradeData.commutingWorkersW1, a.commutingResidentWorkerW1 ? a.commutingResidentWorkerW1 : 0);
      this.data.totalWorkersW2 = a.residentWorkerW2;
      this.data.totalJobsW2 = a.dayJobsW2 + a.nightJobsW2;
      c = null != a.importedWorkerW2 ? a.importedWorkerW2 : 0;
      d = null != a.exportedWorkerW2 ? a.exportedWorkerW2 :
        0;
      b = this.data.totalJobsW2 - this.data.totalWorkersW2;
      0 < b ? (this.data.excessWorkersW2 = 0, this.data.excessJobsW2 = c > b ? 0 : b - c) : (b = -b, this.data.excessWorkersW2 = d > b ? 0 : b - d, this.data.excessJobsW2 = 0);
      simcity.UpdateVisualizedData(this.visualizedData.totalWorkersW2, this.data.totalWorkersW2);
      simcity.UpdateVisualizedData(this.visualizedData.totalJobsW2, this.data.totalJobsW2);
      simcity.UpdateVisualizedData(this.visualizedData.excessJobsW2, this.data.excessJobsW2);
      simcity.UpdateVisualizedData(this.visualizedData.excessWorkersW2,
        this.data.excessWorkersW2);
      simcity.UpdateVisualizedData(this.visualizedTradeData.commutingWorkersW2, a.commutingResidentWorkerW2 ? a.commutingResidentWorkerW2 : 0);
      this.data.totalWorkersW3 = a.residentWorkerW3;
      this.data.totalJobsW3 = a.dayJobsW3 + a.nightJobsW3;
      c = null != a.importedWorkerW3 ? a.importedWorkerW3 : 0;
      d = null != a.exportedWorkerW3 ? a.exportedWorkerW3 : 0;
      b = this.data.totalJobsW3 - this.data.totalWorkersW3;
      0 < b ? (this.data.excessWorkersW3 = 0, this.data.excessJobsW3 = c > b ? 0 : b - c) : (b = -b, this.data.excessWorkersW3 = d > b ? 0 :
          b - d, this.data.excessJobsW3 = 0);
      simcity.UpdateVisualizedData(this.visualizedData.totalWorkersW3, this.data.totalWorkersW3);
      simcity.UpdateVisualizedData(this.visualizedData.totalJobsW3, this.data.totalJobsW3);
      simcity.UpdateVisualizedData(this.visualizedData.excessJobsW3, this.data.excessJobsW3);
      simcity.UpdateVisualizedData(this.visualizedData.excessWorkersW3, this.data.excessWorkersW3);
      simcity.UpdateVisualizedData(this.visualizedTradeData.commutingWorkersW3, a.commutingResidentWorkerW3 ? a.commutingResidentWorkerW3 :
        0);
      b = a = -1;
      if (0 < this.visualizedTradeData.commutingWorkersW1.amount || 0 < this.visualizedTradeData.commutingWorkersW2.amount || 0 < this.visualizedTradeData.commutingWorkersW3.amount)
        a = Math.max(0, this.visualizedTradeData.commutingWorkersW1.amount), a += Math.max(0, this.visualizedTradeData.commutingWorkersW2.amount), a += Math.max(0, this.visualizedTradeData.commutingWorkersW3.amount);
      if (0 == this.visualizedTradeData.commutingWorkersW1.amount || 0 == this.visualizedTradeData.commutingWorkersW2.amount || 0 == this.visualizedTradeData.commutingWorkersW3.amount)
        b =
          0;
      simcity.UpdateVisualizedCombinedData(this.visualizedTradeData.tradeCombine, a, b)
    }
  }
};
simcity.CalculateTotalItems = function (a) {
  return Math.round(a / 3)
};
simcity.kRegionalCitiesResourceCommercial = function () {
  return {
    type : "commercial",
    importIconPath : "Graphics/Trade/tradeWall_icon_shoppers_import.png",
    exportIconPath : "Graphics/Trade/tradeWall_icon_shoppers_export.png",
    data : {
      totalShoppersW1 : 0,
      totalItemsW1 : 0,
      excessShoppersW1 : 0,
      excessItemsW1 : 0,
      totalShoppersW2 : 0,
      totalItemsW2 : 0,
      excessShoppersW2 : 0,
      excessItemsW2 : 0,
      totalShoppersW3 : 0,
      totalItemsW3 : 0,
      excessShoppersW3 : 0,
      excessItemsW3 : 0
    },
    visualizedData : {
      totalShoppersW1 : {
        uiKey : simcity.kResourceUIKeys.TotalShoppersW1,
        amount : -1,
        changed : !1
      },
      totalItemsW1 : {
        uiKey : simcity.kResourceUIKeys.TotalItemsW1,
        amount : -1,
        changed : !1
      },
      excessShoppersW1 : {
        uiKey : simcity.kResourceUIKeys.ExcessShoppersW1,
        amount : -1,
        changed : !1
      },
      excessItemsW1 : {
        uiKey : simcity.kResourceUIKeys.ExcessItemsW1,
        amount : -1,
        changed : !1
      },
      totalShoppersW2 : {
        uiKey : simcity.kResourceUIKeys.TotalShoppersW2,
        amount : -1,
        changed : !1
      },
      totalItemsW2 : {
        uiKey : simcity.kResourceUIKeys.TotalItemsW2,
        amount : -1,
        changed : !1
      },
      excessShoppersW2 : {
        uiKey : simcity.kResourceUIKeys.ExcessShoppersW2,
        amount : -1,
        changed : !1
      },
      excessItemsW2 : {
        uiKey : simcity.kResourceUIKeys.ExcessItemsW2,
        amount : -1,
        changed : !1
      },
      totalShoppersW3 : {
        uiKey : simcity.kResourceUIKeys.TotalShoppersW3,
        amount : -1,
        changed : !1
      },
      totalItemsW3 : {
        uiKey : simcity.kResourceUIKeys.TotalItemsW3,
        amount : -1,
        changed : !1
      },
      excessShoppersW3 : {
        uiKey : simcity.kResourceUIKeys.ExcessShoppersW3,
        amount : -1,
        changed : !1
      },
      excessItemsW3 : {
        uiKey : simcity.kResourceUIKeys.ExcessItemsW3,
        amount : -1,
        changed : !1
      }
    },
    visualizedTradeData : {
      commutingShoppersW1 : {
        uiKey : simcity.kResourceUIKeys.CommutingShoppersW1,
        amount : -1,
        changed : !1
      },
      commutingShoppersW2 : {
        uiKey : simcity.kResourceUIKeys.CommutingShoppersW2,
        amount : -1,
        changed : !1
      },
      commutingShoppersW3 : {
        uiKey : simcity.kResourceUIKeys.CommutingShoppersW3,
        amount : -1,
        changed : !1
      },
      tradeCombine : {
        uiKeyIn : simcity.kResourceUIKeys.TradeCommutingShoppersOut,
        uiKeyOut : simcity.kResourceUIKeys.TradeCommutingShoppersIn,
        outAmount : -1,
        inAmount : -1,
        changed : !1
      }
    },
    queries : function (a, b, c, d, e) {
      return (this.viewingOwnBox = b) ? {
        residentShopperW1 : [simcity.kDataBinAmount, simcity.kResourceIDResidentialShopperW1],
        neighboringShopperW1 : ["cachedUnits", simcity.kUnitID_Trading_City_Connection, simcity.kDataBinAmount, simcity.kResourceIDResidentShopperW1],
        pausedShopperW1 : [simcity.kDataResourceAmount, simcity.kResourceIDResidentShopperW1Paused],
        restingShopperW1 : [simcity.kDataResourceAmount, simcity.kResourceIDShopperRestingW1],
        enRouteShopperW1 : [simcity.kDataResourceAmount, simcity.kResourceIDSimShopperW1],
        exportedShopperW1 : [simcity.kDataBinAmount, simcity.kResourceIDShoppersExportedW1],
        shoppingShopperW1 : [simcity.kDataResourceAmount,
          simcity.kResourceIDShopperW1],
        importedShopperW1 : [simcity.kDataBinAmount, simcity.kResourceIDImportedResidentShopperW1],
        commutingResidentShopperW1 : [simcity.kDataConnectedUnits, c, simcity.kDataBinAmount, simcity.kResourceIDShoppersExportedW1],
        dailyProducedWaresW1 : [simcity.kDataResourceAmount, simcity.kResourceIDShopWaresW1ProducedDaily],
        residentShopperW2 : [simcity.kDataBinAmount, simcity.kResourceIDResidentialShopperW2],
        neighboringShopperW2 : ["cachedUnits", simcity.kUnitID_Trading_City_Connection, simcity.kDataBinAmount,
          simcity.kResourceIDResidentShopperW2],
        pausedShopperW2 : [simcity.kDataResourceAmount, simcity.kResourceIDResidentShopperW2Paused],
        restingShopperW2 : [simcity.kDataResourceAmount, simcity.kResourceIDShopperRestingW2],
        enRouteShopperW2 : [simcity.kDataResourceAmount, simcity.kResourceIDSimShopperW2],
        exportedShopperW2 : [simcity.kDataBinAmount, simcity.kResourceIDShoppersExportedW2],
        shoppingShopperW2 : [simcity.kDataResourceAmount, simcity.kResourceIDShopperW2],
        importedShopperW2 : [simcity.kDataBinAmount, simcity.kResourceIDImportedResidentShopperW2],
        commutingResidentShopperW2 : [simcity.kDataConnectedUnits, c, simcity.kDataBinAmount, simcity.kResourceIDShoppersExportedW2],
        dailyProducedWaresW2 : [simcity.kDataResourceAmount, simcity.kResourceIDShopWaresW2ProducedDaily],
        residentShopperW3 : [simcity.kDataBinAmount, simcity.kResourceIDResidentialShopperW3],
        neighboringShopperW3 : ["cachedUnits", simcity.kUnitID_Trading_City_Connection, simcity.kDataBinAmount, simcity.kResourceIDResidentShopperW3],
        pausedShopperW3 : [simcity.kDataResourceAmount, simcity.kResourceIDResidentShopperW3Paused],
        restingShopperW3 : [simcity.kDataResourceAmount, simcity.kResourceIDShopperRestingW3],
        enRouteShopperW3 : [simcity.kDataResourceAmount, simcity.kResourceIDSimShopperW3],
        exportedShopperW3 : [simcity.kDataBinAmount, simcity.kResourceIDShoppersExportedW3],
        shoppingShopperW3 : [simcity.kDataResourceAmount, simcity.kResourceIDShopperW3],
        importedShopperW3 : [simcity.kDataBinAmount, simcity.kResourceIDImportedResidentShopperW3],
        commutingResidentShopperW3 : [simcity.kDataConnectedUnits, c, simcity.kDataBinAmount, simcity.kResourceIDShoppersExportedW3],
        dailyProducedWaresW3 : [simcity.kDataResourceAmount, simcity.kResourceIDShopWaresW3ProducedDaily]
      }
       : d && e ? {
        residentShopperW1 : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingResidentialShopperW1],
        commutingResidentShopperW1 : [simcity.kDataConnectedUnits, e, simcity.kDataBinAmount, simcity.kResourceIDImportedResidentShopperW1],
        importedShopperW1 : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingImportedResidentShopperW1],
        exportedShopperW1 : [simcity.kDataRegionUnits,
          a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingExportedShopperW1],
        dailyProducedWaresW1 : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingHotItemsW1ProducedYesterday_Day],
        residentShopperW2 : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingResidentialShopperW2],
        commutingResidentShopperW2 : [simcity.kDataConnectedUnits, e, simcity.kDataBinAmount, simcity.kResourceIDImportedResidentShopperW2],
        importedShopperW2 : [simcity.kDataRegionUnits,
          a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingImportedResidentShopperW2],
        exportedShopperW2 : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingExportedShopperW2],
        dailyProducedWaresW2 : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingHotItemsW2ProducedYesterday_Day],
        residentShopperW3 : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingResidentialShopperW3],
        commutingResidentShopperW3 : [simcity.kDataConnectedUnits,
          e, simcity.kDataBinAmount, simcity.kResourceIDImportedResidentShopperW3],
        importedShopperW3 : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingImportedResidentShopperW3],
        exportedShopperW3 : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingExportedShopperW3],
        dailyProducedWaresW3 : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingHotItemsW3ProducedYesterday_Day]
      }
       : {
        residentShopperW1 : [simcity.kDataRegionUnits,
          a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingResidentialShopperW1],
        dailyProducedWaresW1 : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingHotItemsW1ProducedYesterday_Day],
        importedShopperW1 : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingImportedResidentShopperW1],
        exportedShopperW1 : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingExportedShopperW1],
        residentShopperW2 : [simcity.kDataRegionUnits,
          a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingResidentialShopperW2],
        dailyProducedWaresW2 : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingHotItemsW2ProducedYesterday_Day],
        importedShopperW2 : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingImportedResidentShopperW2],
        exportedShopperW2 : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingExportedShopperW2],
        residentShopperW3 : [simcity.kDataRegionUnits,
          a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingResidentialShopperW3],
        dailyProducedWaresW3 : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingHotItemsW3ProducedYesterday_Day],
        importedShopperW3 : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingImportedResidentShopperW3],
        exportedShopperW3 : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingExportedShopperW3]
      }
    },
    update : function (a) {
      this.data.totalShoppersW1 =
        a.residentShopperW1;
      this.data.totalItemsW1 = simcity.CalculateTotalItems(a.dailyProducedWaresW1);
      var b = 0,
      c = 0,
      d = 0,
      c = null != a.importedShopperW1 ? a.importedShopperW1 : 0,
      d = null != a.exportedShopperW1 ? a.exportedShopperW1 : 0,
      b = this.data.totalItemsW1 - this.data.totalShoppersW1;
      0 < b ? (this.data.excessShoppersW1 = 0, this.data.excessItemsW1 = c > b ? 0 : b - c) : (b = -b, this.data.excessShoppersW1 = d > b ? 0 : b - d, this.data.excessItemsW1 = 0);
      simcity.UpdateVisualizedData(this.visualizedData.totalShoppersW1, this.data.totalShoppersW1);
      simcity.UpdateVisualizedData(this.visualizedData.totalItemsW1,
        this.data.totalItemsW1);
      simcity.UpdateVisualizedData(this.visualizedData.excessShoppersW1, this.data.excessShoppersW1);
      simcity.UpdateVisualizedData(this.visualizedData.excessItemsW1, this.data.excessItemsW1);
      simcity.UpdateVisualizedData(this.visualizedTradeData.commutingShoppersW1, a.commutingResidentShopperW1 ? a.commutingResidentShopperW1 : 0);
      this.data.totalShoppersW2 = a.residentShopperW2;
      this.data.totalItemsW2 = simcity.CalculateTotalItems(a.dailyProducedWaresW2);
      c = null != a.importedShopperW2 ? a.importedShopperW2 :
        0;
      d = null != a.exportedShopperW2 ? a.exportedShopperW2 : 0;
      b = this.data.totalItemsW2 - this.data.totalShoppersW2;
      0 < b ? (this.data.excessShoppersW2 = 0, this.data.excessItemsW2 = c > b ? 0 : b - c) : (b = -b, this.data.excessShoppersW2 = d > b ? 0 : b - d, this.data.excessItemsW2 = 0);
      simcity.UpdateVisualizedData(this.visualizedData.totalShoppersW2, this.data.totalShoppersW2);
      simcity.UpdateVisualizedData(this.visualizedData.totalItemsW2, this.data.totalItemsW2);
      simcity.UpdateVisualizedData(this.visualizedData.excessShoppersW2, this.data.excessShoppersW2);
      simcity.UpdateVisualizedData(this.visualizedData.excessItemsW2, this.data.excessItemsW2);
      simcity.UpdateVisualizedData(this.visualizedTradeData.commutingShoppersW2, a.commutingResidentShopperW2 ? a.commutingResidentShopperW2 : 0);
      this.data.totalShoppersW3 = a.residentShopperW3;
      this.data.totalItemsW3 = simcity.CalculateTotalItems(a.dailyProducedWaresW3);
      c = null != a.importedShopperW3 ? a.importedShopperW3 : 0;
      d = null != a.exportedShopperW3 ? a.exportedShopperW3 : 0;
      b = this.data.totalItemsW3 - this.data.totalShoppersW3;
      0 < b ? (this.data.excessShoppersW3 =
          0, this.data.excessItemsW3 = c > b ? 0 : b - c) : (b = -b, this.data.excessShoppersW3 = d > b ? 0 : b - d, this.data.excessItemsW3 = 0);
      simcity.UpdateVisualizedData(this.visualizedData.totalShoppersW3, this.data.totalShoppersW3);
      simcity.UpdateVisualizedData(this.visualizedData.totalItemsW3, this.data.totalItemsW3);
      simcity.UpdateVisualizedData(this.visualizedData.excessShoppersW3, this.data.excessShoppersW3);
      simcity.UpdateVisualizedData(this.visualizedData.excessItemsW3, this.data.excessItemsW3);
      simcity.UpdateVisualizedData(this.visualizedTradeData.commutingShoppersW3,
        a.commutingResidentShopperW3 ? a.commutingResidentShopperW3 : 0);
      b = a = -1;
      if (0 < this.visualizedTradeData.commutingShoppersW1.amount || 0 < this.visualizedTradeData.commutingShoppersW2.amount || 0 < this.visualizedTradeData.commutingShoppersW3.amount)
        a = Math.max(0, this.visualizedTradeData.commutingShoppersW1.amount), a += Math.max(0, this.visualizedTradeData.commutingShoppersW2.amount), a += Math.max(0, this.visualizedTradeData.commutingShoppersW3.amount);
      if (0 == this.visualizedTradeData.commutingShoppersW1.amount || 0 == this.visualizedTradeData.commutingShoppersW2.amount ||
        0 == this.visualizedTradeData.commutingShoppersW3.amount)
        b = 0;
      simcity.UpdateVisualizedCombinedData(this.visualizedTradeData.tradeCombine, a, b)
    }
  }
};
simcity.kRegionalCitiesResourceIndustrial = function () {
  return {
    type : "industrial",
    importIconPath : "Graphics/Trade/tradeWall_icon_job_import.png",
    exportIconPath : "Graphics/Trade/tradeWall_icon_job_export.png",
    data : {
      totalFreightProduced : 0,
      totalFreightDesired : 0,
      excessFreightProduced : 0,
      excessFreightDesired : 0,
      tradeFreight : 0
    },
    visualizedData : {
      totalFreightProduced : {
        uiKey : simcity.kResourceUIKeys.TotalFreightProduced,
        amount : -1,
        changed : !1
      },
      totalFreightDesired : {
        uiKey : simcity.kResourceUIKeys.TotalFreightDesired,
        amount : -1,
        changed : !1
      },
      excessFreightProduced : {
        uiKey : simcity.kResourceUIKeys.ExcessFreightProduced,
        amount : -1,
        changed : !1
      },
      excessFreightDesired : {
        uiKey : simcity.kResourceUIKeys.ExcessFreightDesired,
        amount : -1,
        changed : !1
      }
    },
    visualizedTradeData : {
      tradeFreight : {
        uiKey : simcity.kResourceUIKeys.TradeFreight,
        amount : -1,
        changed : !1
      },
      tradeCombine : {
        uiKeyIn : simcity.kResourceUIKeys.TradeFreightIn,
        uiKeyOut : simcity.kResourceUIKeys.TradeFreightOut,
        outAmount : -1,
        inAmount : -1,
        changed : !1
      }
    },
    queries : function (a, b, c, d, e) {
      this.viewingOwnBox = b;
      this.isConnectedToOwnBox = d;
      this.incomingConnectionUnit = e;
      return b ? {
        freightProduced : [simcity.kDataBinAmount, simcity.kResourceIDFreightProducer],
        freightDesired : [simcity.kDataBinAmount, simcity.kResourceIDFreightCapacityGlobal],
        freightShippedOutToday : [simcity.kDataBinAmount, simcity.kResourceIDFreightExportedToday],
        freightShippedOutYesterday : [simcity.kDataBinAmount, simcity.kResourceIDFreightExportedYesterday],
        freightShippedInToday : [simcity.kDataBinAmount, simcity.kResourceIDFreightImportedToday],
        freightShippedInYesterday : [simcity.kDataBinAmount,
          simcity.kResourceIDFreightImportedYesterday],
        freightShippingToday : [simcity.kDataConnectedUnits, c, simcity.kDataBinAmount, simcity.kResourceIDFreightExportedToday],
        freightShippingYesterday : [simcity.kDataConnectedUnits, c, simcity.kDataBinAmount, simcity.kResourceIDFreightExportedYesterday]
      }
       : d && e ? {
        freightProduced : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingFreightProducer],
        freightDesired : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingFreightCapacityGlobal],
        freightShippedOutToday : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingFreightExportedToday],
        freightShippedOutYesterday : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingFreightExportedYesterday],
        freightShippedInToday : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingFreightImportedToday],
        freightShippedInYesterday : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingFreightImportedYesterday],
        freightShippingToday : [simcity.kDataConnectedUnits, e, simcity.kDataBinAmount, simcity.kResourceIDFreightImportedToday],
        freightShippingYesterday : [simcity.kDataConnectedUnits, e, simcity.kDataBinAmount, simcity.kResourceIDFreightImportedYesterday]
      }
       : {
        freightProduced : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingFreightProducer],
        freightDesired : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingFreightCapacityGlobal],
        freightShippedOutToday : [simcity.kDataRegionUnits,
          a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingFreightExportedToday],
        freightShippedOutYesterday : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingFreightExportedYesterday],
        freightShippedInToday : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingFreightImportedToday],
        freightShippedInYesterday : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingFreightImportedYesterday]
      }
    },
    update : function (a) {
      this.data.totalFreightProduced =
        a.freightProduced;
      this.data.totalFreightDesired = a.freightDesired;
      var b = null != a.freightShippingToday ? a.freightShippingToday : 0,
      c = null != a.freightShippingYesterday ? a.freightShippingYesterday : 0,
      b = b >= c ? b : c,
      c = a.freightShippedInToday >= a.freightShippedInYesterday ? a.freightShippedInToday : a.freightShippedInYesterday,
      a = a.freightShippedOutToday >= a.freightShippedOutYesterday ? a.freightShippedOutToday : a.freightShippedOutYesterday,
      a = 0 === a ? this.data.totalFreightDesired - c - this.data.totalFreightProduced : this.data.totalFreightDesired +
        a - this.data.totalFreightProduced;
      0 < a ? (this.data.excessFreightProduced = 0, this.data.excessFreightDesired = a) : (this.data.excessFreightProduced = -a, this.data.excessFreightDesired = 0);
      simcity.UpdateVisualizedData(this.visualizedData.totalFreightProduced, this.data.totalFreightProduced);
      simcity.UpdateVisualizedData(this.visualizedData.totalFreightDesired, this.data.totalFreightDesired);
      simcity.UpdateVisualizedData(this.visualizedData.excessFreightProduced, this.data.excessFreightProduced);
      simcity.UpdateVisualizedData(this.visualizedData.excessFreightDesired,
        this.data.excessFreightDesired);
      simcity.UpdateVisualizedData(this.visualizedTradeData.tradeFreight, b)
    }
  }
};
simcity.kRegionalCitiesResourceStudents = function () {
  return {
    type : "education",
    importIconPath : "Graphics/Trade/tradeWall_icon_job_import.png",
    exportIconPath : "Graphics/Trade/tradeWall_icon_job_export.png",
    data : {
      totalStudents : 0,
      totalDesks : 0,
      excessStudents : 0,
      excessDesks : 0
    },
    visualizedData : {
      totalStudents : {
        uiKey : simcity.kResourceUIKeys.TotalStudents,
        amount : -1,
        changed : !1
      },
      totalDesks : {
        uiKey : simcity.kResourceUIKeys.TotalDesks,
        amount : -1,
        changed : !1
      },
      excessStudents : {
        uiKey : simcity.kResourceUIKeys.ExcessStudents,
        amount : -1,
        changed : !1
      },
      excessDesks : {
        uiKey : simcity.kResourceUIKeys.ExcessDesks,
        amount : -1,
        changed : !1
      }
    },
    visualizedTradeData : {
      tradeStudentsE2 : {
        uiKey : simcity.kResourceUIKeys.TradeStudentsE2,
        amount : -1,
        changed : !1
      },
      tradeStudentsE3 : {
        uiKey : simcity.kResourceUIKeys.TradeStudentsE3,
        amount : -1,
        changed : !1
      },
      tradeCombine : {
        uiKeyIn : simcity.kResourceUIKeys.TradeStudentsOut,
        uiKeyOut : simcity.kResourceUIKeys.TradeStudentsIn,
        outAmount : -1,
        inAmount : -1,
        changed : !1
      }
    },
    queries : function (a, b, c, d, e) {
      return (this.viewingOwnBox = b) ? {
        totalStudents : [simcity.kDataBinAmount,
          simcity.kResourceIDTotalStudents],
        totalStudentsYesterday : [simcity.kDataBinAmount, simcity.kResourceIDTotalStudentsYesterday],
        localStudentsE2 : [simcity.kDataBinAmount, simcity.kResourceIDLocalStudentsTodayE2],
        localStudentsE2Yesterday : [simcity.kDataBinAmount, simcity.kResourceIDLocalStudentsYesterdayE2],
        totalDesksE2 : [simcity.kDataBinAmount, simcity.kResourceIDSpotsForKidsE2],
        localStudentsE3 : [simcity.kDataBinAmount, simcity.kResourceIDLocalStudentsTodayE3],
        localStudentsE3Yesterday : [simcity.kDataBinAmount,
          simcity.kResourceIDLocalStudentsYesterdayE3],
        totalDesksE3 : [simcity.kDataBinAmount, simcity.kResourceIDSpotsForKidsE3],
        totalKids : [simcity.kDataBinAmount, simcity.kResourceIDTotalKids],
        totalKidsYesterday : [simcity.kDataBinAmount, simcity.kResourceIDTotalKidsYesterday],
        importedKids : [simcity.kDataBinAmount, simcity.kResourceIDImportedKid],
        examsPassedTodayE2 : [simcity.kDataBinAmount, simcity.kResourceIDExamsPassedTodayE2],
        examsPassedTodayE3 : [simcity.kDataBinAmount, simcity.kResourceIDExamsPassedTodayE3],
        examsPassedYesterdayE2 : [simcity.kDataBinAmount,
          simcity.kResourceIDExamsPassedYesterdayE2],
        examsPassedYesterdayE3 : [simcity.kDataBinAmount, simcity.kResourceIDExamsPassedYesterdayE3],
        commutingKidsE2 : [simcity.kDataConnectedUnits, c, simcity.kDataBinAmount, simcity.kResourceIDStudentStudyingE2],
        commutingKidsE3 : [simcity.kDataConnectedUnits, c, simcity.kDataBinAmount, simcity.kResourceIDStudentStudyingE3],
        currentE2TradeStudents : [simcity.kDataCachedUnits, 1779926452, simcity.kDataBinAmount, simcity.kResourceIDFromTradingConnection],
        currentE3TradeStudentsW1 : [simcity.kDataCachedUnits,
          1779926453, simcity.kDataBinAmount, simcity.kResourceIDTradeStudentW1],
        currentE3TradeStudentsW2 : [simcity.kDataCachedUnits, 1779926453, simcity.kDataBinAmount, simcity.kResourceIDTradeStudentW2],
        currentE3TradeStudentsW3 : [simcity.kDataCachedUnits, 1779926453, simcity.kDataBinAmount, simcity.kResourceIDTradeStudentW3]
      }
       : d && e ? {
        localStudentsE2 : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingLocalStudentsYesterdayE2],
        totalDesksE2 : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount,
          simcity.kResourceIDTradeTrackingSpotsForKidsE2],
        localStudentsE3 : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingLocalStudentsYesterdayE3],
        totalDesksE3 : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingSpotsForKidsE3],
        totalKids : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingTotalKids],
        importedKids : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingTotalKids],
        examsPassedYesterdayE2 : [simcity.kDataRegionUnits,
          a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingExamsPassedTodayE2],
        examsPassedYesterdayE3 : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingExamsPassedTodayE3],
        commutingKidsE2 : [simcity.kDataConnectedUnits, e, simcity.kDataBinAmount, simcity.kResourceIDImportedKid],
        commutingKidsE3 : [simcity.kDataConnectedUnits, e, simcity.kDataBinAmount, simcity.kResourceIDImportedKid]
      }
       : {
        localStudentsE2 : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingLocalStudentsYesterdayE2],
        totalDesksE2 : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingSpotsForKidsE2],
        localStudentsE3 : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingLocalStudentsYesterdayE3],
        totalDesksE3 : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingSpotsForKidsE3],
        totalKids : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingTotalKids],
        importedKids : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount,
          simcity.kResourceIDTradeTrackingTotalKids],
        examsPassedYesterdayE2 : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingExamsPassedTodayE2],
        examsPassedYesterdayE3 : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingExamsPassedTodayE3]
      }
    },
    update : function (a) {
      var b = 0,
      c = 0,
      d = 0,
      e = 0,
      f = c = e = b = 0,
      g = 0,
      d = c = f = f = 0;
      this.viewingOwnBox ? (g = (b = a.totalStudents >= a.totalStudentsYesterday) ? a.totalStudents : a.totalStudentsYesterday, f = b ? a.totalKids : a.totalKidsYesterday,
        c = b ? a.examsPassedTodayE2 - a.localStudentsE2 : a.examsPassedYesterdayE2 - a.localStudentsE2Yesterday, d = b ? a.examsPassedTodayE3 - a.localStudentsE3 : a.examsPassedYesterdayE3 - a.localStudentsE3Yesterday, e = Math.max(c, 0) + Math.max(d, 0), b = b ? a.currentE2TradeStudents + a.currentE3TradeStudentsW1 + a.currentE3TradeStudentsW2 + a.currentE3TradeStudentsW3 : 0, e = b + e, Math.max(c, 0), Math.max(d, 0), c = Math.max(0, g - e), f = a.totalKids - Math.min(c, f), d = a.totalDesksE2 + a.totalDesksE3, c = Math.max(d - c, 0), this.data.totalStudents = a.totalKids, this.data.totalDesks =
          d, this.data.excessStudents = f - a.commutingKidsE2 - a.commutingKidsE3, this.data.excessDesks = c - a.importedKids) : (c = a.examsPassedYesterdayE2 - a.localStudentsE2, d = a.examsPassedYesterdayE3 - a.localStudentsE3, e = Math.max(c, 0) + Math.max(d, 0), b = null != a.commutingKids ? a.commutingKids : 0, e = b + e, Math.max(c, 0), Math.max(d, 0), this.data.totalStudents = a.totalKids, this.data.totalDesks = a.totalDesksE2 + a.totalDesksE3, f = a.totalKids - a.examsPassedYesterdayE2 - a.examsPassedYesterdayE3 - e, 0 < f ? (this.data.excessStudents = f, this.data.excessDesks =
            0) : (this.data.excessStudents = 0, this.data.excessDesks = this.data.totalDesks - a.examsPassedYesterdayE3 - a.examsPassedYesterdayE3 - e, 0 > this.data.excessDesks && (this.data.excessDesks = 0)));
      simcity.UpdateVisualizedData(this.visualizedData.totalStudents, this.data.totalStudents);
      simcity.UpdateVisualizedData(this.visualizedData.totalDesks, this.data.totalDesks);
      simcity.UpdateVisualizedData(this.visualizedData.excessStudents, this.data.excessStudents);
      simcity.UpdateVisualizedData(this.visualizedData.excessDesks, this.data.excessDesks);
      f = null != a.commutingKidsE3 ? a.commutingKidsE3 : 0;
      simcity.UpdateVisualizedData(this.visualizedTradeData.tradeStudentsE2, null != a.commutingKidsE2 ? a.commutingKidsE2 : 0);
      simcity.UpdateVisualizedData(this.visualizedTradeData.tradeStudentsE3, f);
      f = a = -1;
      if (0 < this.visualizedTradeData.tradeStudentsE2.amount || 0 < this.visualizedTradeData.tradeStudentsE3.amount)
        a = this.viewingOwnBox ? Math.max(0, this.visualizedTradeData.tradeStudentsE2.amount) + Math.max(0, this.visualizedTradeData.tradeStudentsE3.amount) : Math.max(0, this.visualizedTradeData.tradeStudentsE2.amount);
      if (0 == this.visualizedTradeData.tradeStudentsE2.amount || 0 == this.visualizedTradeData.tradeStudentsE3.amount)
        f = 0;
      simcity.UpdateVisualizedCombinedData(this.visualizedTradeData.tradeCombine, a, f)
    }
  }
};
simcity.kRegionalCitiesResourcePower = function () {
  return {
    type : "power",
    importIconPath : "Graphics/Trade/tradeWall_icon_power_import.png",
    exportIconPath : "Graphics/Trade/tradeWall_icon_power__export.png",
    data : {
      neededPowerPerHour : 0,
      totalPowerProducedPerHour : 0,
      powerAvailableForSalePerConnection : 0,
      deficitPowerPerHour : 0,
      tradePower : 0,
      boughtPowerPerHour : 0,
      powerExchangeRate : 0
    },
    visualizedData : {
      neededPowerPerHour : {
        uiKey : simcity.kResourceUIKeys.NeededPowerPerHour,
        amount : -1,
        changed : !1
      },
      totalPowerProducedPerHour : {
        uiKey : simcity.kResourceUIKeys.TotalPowerProducedPerHour,
        amount : -1,
        changed : !1
      },
      powerAvailableForSalePerConnection : {
        uiKey : simcity.kResourceUIKeys.PowerAvailableForSalePerConnection,
        amount : -1,
        changed : !1
      },
      deficitPowerPerHour : {
        uiKey : simcity.kResourceUIKeys.DeficitPowerPerHour,
        amount : -1,
        changed : !1
      },
      boughtPowerPerHour : {
        uiKey : simcity.kResourceUIKeys.BoughtPowerPerHour,
        amount : -1,
        changed : !1
      }
    },
    visualizedTradeData : {
      tradePower : {
        uiKey : simcity.kResourceUIKeys.TradePower,
        regionTradeSwitchID : simcity.kResourceIDTradeTrackingSwitchConnectionPower,
        localImportTradeSwitchID : simcity.kResourceIDTradeSwitchPower,
        localExportTradeSwitchID : simcity.kResourceIDTradeSwitchConnectionPower,
        amount : -1,
        changed : !1
      }
    },
    queries : function (a, b, c, d, e) {
      return b ? {
        neededPower : [simcity.kDataBinAmount, simcity.kResourceIDPowerNeeded],
        totalPower : [simcity.kDataBinAmount, simcity.kResourceIDPowerGlobals_TotalPowerTransmittedPerHour],
        numConnections : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfClaimedConnections],
        boughtPowerPerHour : [simcity.kDataConnectedUnits, c, simcity.kDataBinAmount, simcity.kResourceIDTradePowerUsedToSend],
        powerExchangeRate : [simcity.kDataBinAmount,
          simcity.kResourceIDPowerImportExchangeRate]
      }
       : d && e ? {
        neededPower : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingNeededPower],
        totalPower : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingTotalPower],
        boughtPowerPerHour : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradePowerUsedToSend],
        availablePower : [simcity.kDataUnits, e, simcity.kDataBinAmount, simcity.kResourceIDPower]
      }
       : {
        neededPower : [simcity.kDataRegionUnits,
          a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingNeededPower],
        totalPower : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingTotalPower],
        boughtPowerPerHour : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradePowerUsedToSend]
      }
    },
    update : function (a) {
      this.data.neededPowerPerHour = a.neededPower / 24;
      this.data.totalPowerProducedPerHour = a.totalPower;
      this.data.boughtPowerPerHour = a.boughtPowerPerHour;
      this.data.powerExchangeRate = a.powerExchangeRate ?
        a.powerExchangeRate : 0;
      var b = this.data.totalPowerProducedPerHour - this.data.neededPowerPerHour;
      0 < b ? (this.data.powerAvailableForSalePerConnection = b / (a.numConnections ? a.numConnections : 1), this.data.deficitPowerPerHour = 0) : (this.data.powerAvailableForSalePerConnection = 0, b += a.boughtPowerPerHour, this.data.deficitPowerPerHour = 0 > b ? -b : 0);
      this.data.tradePower = a.availablePower ? 30 * a.availablePower : this.data.powerAvailableForSalePerConnection;
      simcity.UpdateVisualizedData(this.visualizedData.neededPowerPerHour, this.data.neededPowerPerHour);
      simcity.UpdateVisualizedData(this.visualizedData.totalPowerProducedPerHour, this.data.totalPowerProducedPerHour);
      simcity.UpdateVisualizedData(this.visualizedData.powerAvailableForSalePerConnection, this.data.powerAvailableForSalePerConnection);
      simcity.UpdateVisualizedData(this.visualizedData.deficitPowerPerHour, this.data.deficitPowerPerHour);
      simcity.UpdateVisualizedData(this.visualizedData.boughtPowerPerHour, this.data.boughtPowerPerHour);
      simcity.UpdateVisualizedData(this.visualizedTradeData.tradePower,
        this.data.tradePower)
    }
  }
};
simcity.kRegionalCitiesResourceWater = function () {
  return {
    type : "water",
    importIconPath : "Graphics/Trade/tradeWall_icon_water_import.png",
    exportIconPath : "Graphics/Trade/tradeWall_icon_water_export.png",
    data : {
      neededWaterPerHour : 0,
      totalWaterProducedPerHour : 0,
      waterAvailableForSalePerConnection : 0,
      deficitWaterPerHour : 0,
      tradingWater : 0,
      boughtWaterPerHour : 0,
      waterExchangeRate : 0
    },
    visualizedData : {
      neededWaterPerHour : {
        uiKey : simcity.kResourceUIKeys.NeededWaterPerHour,
        amount : -1,
        changed : !1
      },
      totalWaterProducedPerHour : {
        uiKey : simcity.kResourceUIKeys.TotalWaterProducedPerHour,
        amount : -1,
        changed : !1
      },
      waterAvailableForSalePerConnection : {
        uiKey : simcity.kResourceUIKeys.WaterAvailableForSalePerConnection,
        amount : -1,
        changed : !1
      },
      deficitWaterPerHour : {
        uiKey : simcity.kResourceUIKeys.DeficitWaterPerHour,
        amount : -1,
        changed : !1
      },
      boughtWaterPerHour : {
        uiKey : simcity.kResourceUIKeys.BoughtWaterPerHour,
        amount : -1,
        changed : !1
      }
    },
    visualizedTradeData : {
      tradeWater : {
        uiKey : simcity.kResourceUIKeys.TradeWater,
        regionTradeSwitchID : simcity.kResourceIDTradeTrackingSwitchConnectionWater,
        localImportTradeSwitchID : simcity.kResourceIDTradeSwitchWater,
        localExportTradeSwitchID : simcity.kResourceIDTradeSwitchConnectionWater,
        amount : -1,
        changed : !1
      }
    },
    queries : function (a, b, c, d, e) {
      return b ? {
        neededWater : [simcity.kDataBinAmount, simcity.kResourceIDWaterNeeded],
        totalWaterPerHour : [simcity.kDataBinAmount, simcity.kResourceIDWaterGlobals_TotalWaterTransmittedPerHour],
        numConnections : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfClaimedConnections],
        boughtWaterPerHour : [simcity.kDataConnectedUnits, c, simcity.kDataBinAmount, simcity.kResourceIDTradeWaterUsedToSend],
        waterExchangeRate : [simcity.kDataBinAmount, simcity.kResourceIDWaterImportExchangeRate]
      }
       : d && e ? {
        neededWater : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingNeededWater],
        totalWaterPerHour : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingTotalWater],
        boughtWaterPerHour : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeWaterUsedToSend],
        availableWater : [simcity.kDataUnits, e, simcity.kDataBinAmount, simcity.kResourceIDWater]
      }
       : {
        neededWater : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingNeededWater],
        totalWaterPerHour : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingTotalWater],
        boughtWaterPerHour : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeWaterUsedToSend]
      }
    },
    update : function (a) {
      this.data.neededWaterPerHour = a.neededWater / 24;
      this.data.totalWaterProducedPerHour = a.totalWaterPerHour;
      this.data.boughtWaterPerHour = a.boughtWaterPerHour;
      this.data.waterExchangeRate = a.waterExchangeRate ? a.waterExchangeRate : 0;
      var b = this.data.totalWaterProducedPerHour + a.boughtWaterPerHour - this.data.neededWaterPerHour;
      0 < b ? (this.data.waterAvailableForSalePerConnection = b / (a.numConnections ? a.numConnections : 1), this.data.deficitWaterPerHour = 0) : (this.data.waterAvailableForSalePerConnection = 0, b += a.boughtWaterPerHour, this.data.deficitWaterPerHour = 0 > b ? -b : 0);
      this.data.tradingWater = a.availableWater ? 20 * a.availableWater : this.data.waterAvailableForSalePerConnection;
      simcity.UpdateVisualizedData(this.visualizedData.neededWaterPerHour, this.data.neededWaterPerHour);
      simcity.UpdateVisualizedData(this.visualizedData.totalWaterProducedPerHour, this.data.totalWaterProducedPerHour);
      simcity.UpdateVisualizedData(this.visualizedData.waterAvailableForSalePerConnection, this.data.waterAvailableForSalePerConnection);
      simcity.UpdateVisualizedData(this.visualizedData.deficitWaterPerHour, this.data.deficitWaterPerHour);
      simcity.UpdateVisualizedData(this.visualizedData.boughtWaterPerHour,
        this.data.boughtWaterPerHour);
      simcity.UpdateVisualizedData(this.visualizedTradeData.tradeWater, this.data.tradingWater)
    }
  }
};
simcity.kRegionalCitiesResourceSewage = function () {
  return {
    type : "sewage",
    importIconPath : "Graphics/Trade/tradeWall_icon_sewage_import.png",
    exportIconPath : "Graphics/Trade/tradeWall_icon_sewage_export.png",
    viewingOwnBox : !1,
    data : {
      tradeSewage : 0,
      totalSewageProducedPerHour : 0,
      totalSewageTreatmentCapacityPerHour : 0,
      sewageTreatedPerHour : 0,
      sewageDumpedPerHour : 0,
      boughtTreatmentCapacityPerHour : 0,
      sewageExchangeRate : 0,
      tradeSewageUsed : 0
    },
    visualizedData : {
      totalSewageProducedPerHour : {
        uiKey : simcity.kResourceUIKeys.TotalSewageProducedPerHour,
        amount : -1,
        changed : !1
      },
      totalSewageTreatmentCapacityPerHour : {
        uiKey : simcity.kResourceUIKeys.TotalSewageTreatmentCapacityPerHour,
        amount : -1,
        changed : !1
      },
      sewageTreatedPerHour : {
        uiKey : simcity.kResourceUIKeys.SewageTreatedPerHour,
        amount : -1,
        changed : !1
      },
      sewageDumpedPerHour : {
        uiKey : simcity.kResourceUIKeys.SewageDumpedPerHour,
        amount : -1,
        changed : !1
      },
      boughtTreatmentCapacityPerHour : {
        uiKey : simcity.kResourceUIKeys.BoughtTreatmentCapacityPerHour,
        amount : -1,
        changed : !1
      }
    },
    visualizedTradeData : {
      tradeSewage : {
        uiKey : simcity.kResourceUIKeys.TradeSewage,
        localImportTradeSwitchID : simcity.kResourceIDTradeSwitchConnectionSewage,
        localExportTradeSwitchID : simcity.kResourceIDTradeSwitchSewage,
        regionTradeSwitchID : simcity.kResourceIDTradeTrackingSwitchConnectionSewage,
        amount : -1,
        changed : !1
      },
      tradeSewageUsed : {
        uiKey : simcity.kResourceUIKeys.TradeSewageUsed,
        localImportTradeSwitchID : simcity.kResourceIDTradeSwitchConnectionSewage,
        localExportTradeSwitchID : simcity.kResourceIDTradeSwitchSewage,
        regionTradeSwitchID : simcity.kResourceIDTradeTrackingSwitchConnectionSewage,
        amount : -1,
        changed : !1
      }
    },
    queries : function (a, b, c) {
      return (this.viewingOwnBox = b) ? {
        tradeSewage : [simcity.kDataBinAmount, simcity.kResourceIDTradeExcessSewageExportAllowed],
        totalSewageProducedPerHour : [simcity.kDataBinAmount, simcity.kResourceIDSewageTransmitted_PerHour],
        totalSewageTreatmentCapacityPerHour : [simcity.kDataBinAmount, simcity.kResourceIDSewageMainStorage],
        sewageTreatedPerHour : [simcity.kDataBinAmount, simcity.kResourceIDSewageProcessed_PerHour],
        sewageDumpedPerHour : [simcity.kDataBinAmount, simcity.kResourceIDSewageDumped_PerHour],
        boughtTreatmentCapacityPerHour : [simcity.kDataConnectedUnits, c, simcity.kDataBinAmount, simcity.kResourceIDTradeSewageExportAllowedUsedToSend],
        sewageExchangeRate : [simcity.kDataBinAmount, simcity.kResourceIDSewageTreatmentImportExchangeRate]
      }
       : {
        tradeSewage : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeExcessSewageExportAllowed],
        totalSewageProducedPerHour : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingTotalSewage],
        totalSewageTreatmentCapacityPerHour : [simcity.kDataRegionUnits,
          a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingTreatedSewage],
        sewageTreatedPerHour : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingTreatedSewage],
        sewageDumpedPerHour : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingExcessSewage],
        boughtTreatmentCapacityPerHour : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeSewageExportAllowedUsedToSend]
      }
    },
    update : function (a) {
      this.data.tradeSewage = a.tradeSewage;
      this.data.totalSewageProducedPerHour = a.totalSewageProducedPerHour;
      this.data.sewageExchangeRate = a.sewageExchangeRate ? a.sewageExchangeRate : 0;
      this.data.totalSewageTreatmentCapacityPerHour = this.viewingOwnBox ? 3 * a.totalSewageTreatmentCapacityPerHour : a.tradeSewage + a.totalSewageTreatmentCapacityPerHour;
      this.data.sewageTreatedPerHour = a.sewageTreatedPerHour;
      this.data.sewageDumpedPerHour = a.sewageDumpedPerHour;
      this.data.boughtTreatmentCapacityPerHour = a.boughtTreatmentCapacityPerHour;
      0 == this.data.tradeSewage ?
      simcity.UpdateVisualizedData(this.visualizedTradeData.tradeSewage, 1) : 0 < this.data.tradeSewage ? simcity.UpdateVisualizedData(this.visualizedTradeData.tradeSewage, 0) : simcity.UpdateVisualizedData(this.visualizedTradeData.tradeSewage, -1);
      simcity.UpdateVisualizedData(this.visualizedData.totalSewageProducedPerHour, this.data.totalSewageProducedPerHour);
      simcity.UpdateVisualizedData(this.visualizedData.totalSewageTreatmentCapacityPerHour, this.data.totalSewageTreatmentCapacityPerHour);
      simcity.UpdateVisualizedData(this.visualizedData.sewageTreatedPerHour,
        this.data.sewageTreatedPerHour);
      simcity.UpdateVisualizedData(this.visualizedData.sewageDumpedPerHour, this.data.sewageDumpedPerHour);
      simcity.UpdateVisualizedData(this.visualizedData.boughtTreatmentCapacityPerHour, this.data.boughtTreatmentCapacityPerHour);
      simcity.UpdateVisualizedData(this.visualizedTradeData.tradeSewageUsed, this.data.boughtTreatmentCapacityPerHour)
    }
  }
};
simcity.kRegionalCitiesResourceGarbage = function () {
  return {
    type : "garbage",
    importIconPath : "Graphics/Trade/tradeWall_icon_garbage_import.png",
    exportIconPath : "Graphics/Trade/tradeWall_icon_garbage_export.png",
    data : {
      totalGarbageAndRecyclingTruck : 0,
      totalGarbageAndRecyclingTruckTokensAssigned : 0,
      totalGarbageAndRecyclingTruckTokensAvailable : 0,
      totalGarbageAndRecyclingProduced : 0,
      totalGarbageAndRecyclingUncollected : 0,
      totalGarbage : 0,
      dumpCapacity : 0,
      garbagePickedUp : 0,
      garbageRewards : 0,
      garbageAndRecyclingAssigned : 0,
      totalRecycling : 0,
      recyclingCapacity : 0,
      recyclingPickedUp : 0,
      recyclingRewards : 0
    },
    visualizedData : {
      totalGarbageAndRecyclingTruck : {
        uiKey : simcity.kResourceUIKeys.TotalGarbageAndRecyclingVehicle,
        amount : -1,
        changed : !1
      },
      totalGarbageAndRecyclingTruckTokensAvailable : {
        uiKey : simcity.kResourceUIKeys.TotalGarbageAndRecyclingVehicleTokensAvailable,
        amount : -1,
        changed : !1
      },
      totalGarbageAndRecyclingProduced : {
        uiKey : simcity.kResourceUIKeys.TotalGarbageAndRecyclablesProduced,
        amount : -1,
        changed : !1
      },
      totalGarbageAndRecyclingUncollected : {
        uiKey : simcity.kResourceUIKeys.TotalGarbageAndRecyclablesUncollected,
        amount : -1,
        changed : !1
      }
    },
    visualizedTradeData : {
      garbageAndRecyclingAssigned : {
        uiKey : simcity.kResourceUIKeys.GarbageAndRecyclingAssigned,
        amount : -1,
        changed : !1
      }
    },
    queries : function (a, b, c) {
      return (this.viewingOwnBox = b) ? {
        garbageTruckR1 : [simcity.kDataBinAmount, simcity.kResourceIDTradeExcessGarbageTruckR1],
        totalGarbageTruckR1TokensAssigned : [simcity.kDataUnits, c, simcity.kDataBinAmount, simcity.kResourceIDTradeExcessGarbageTruckR1],
        garbageProducedToday : [simcity.kDataBinAmount, simcity.kResourceIDGarbageProducedToday],
        garbageProducedYesterday : [simcity.kDataBinAmount, simcity.kResourceIDGarbageProducedYesterday],
        garbageRemainingToday : [simcity.kDataBinAmount, simcity.kResourceIDGarbageInCityPerDay],
        garbageRemainingYesterday : [simcity.kDataBinAmount, simcity.kResourceIDGarbageInCityPerDay_Last],
        garbageLost : [simcity.kDataBinAmount, simcity.kResourceIDGarbageLost],
        garbageLostPerDay : [simcity.kDataBinAmount, simcity.kResourceIDGarbageLostPerDay],
        dumpCapacity : [simcity.kDataBinAmount, simcity.kResourceIDGarbageDumpCapacity],
        garbagePickedUpToday : [simcity.kDataBinAmount,
          simcity.kResourceIDGarbagePickedUpToday],
        garbagePickedUpYesterday : [simcity.kDataBinAmount, simcity.kResourceIDGarbagePickedUpYesterday],
        garbageRewards : [simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingGarbageRewards],
        recyclingTruckR2 : [simcity.kDataBinAmount, simcity.kResourceIDTradeExcessRecyclingTruckR2],
        totalRecyclingTruckR2TokensAssigned : [simcity.kDataUnits, c, simcity.kDataBinAmount, simcity.kResourceIDTradeExcessRecyclingTruckR2],
        recyclingProducedToday : [simcity.kDataBinAmount, simcity.kResourceIDRecyclablesProducedToday],
        recyclingProducedYesterday : [simcity.kDataBinAmount, simcity.kResourceIDRecyclablesProducedYesterday],
        recyclingRemainingToday : [simcity.kDataBinAmount, simcity.kResourceIDRecyclingInCityPerDay],
        recyclingRemainingYesterday : [simcity.kDataBinAmount, simcity.kResourceIDRecyclingInCityPerDay_Last],
        recyclingLost : [simcity.kDataBinAmount, simcity.kResourceIDRecyclablesLost],
        recyclingLostPerDay : [simcity.kDataBinAmount, simcity.kResourceIDRecyclablesLostPerDay],
        recyclingCapacity : [simcity.kDataBinAmount, simcity.kResourceIDRecyclablesCapacity],
        recyclingPickedUpToday : [simcity.kDataBinAmount, simcity.kResourceIDRecyclablesPickedUpToday],
        recyclingPickedUpYesterday : [simcity.kDataBinAmount, simcity.kResourceIDRecyclablesPickedUpYesterday],
        recyclingRewards : [simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingRecyclingRewards]
      }
       : {
        garbageTruckR1 : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingGarbageTruckR1],
        totalGarbageTruckR1TokensAssigned : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeExcessGarbageTruckR1],
        totalGarbage : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingTotalGarbage],
        dumpCapacity : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingGarbageDumpCapacity],
        garbagePickedUp : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingGarbagePickup],
        garbageRewards : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingGarbageRewards],
        recyclingTruckR2 : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount,
          simcity.kResourceIDTradeTrackingRecyclingTruckR2],
        totalRecyclingTruckR2TokensAssigned : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeExcessRecyclingTruckR2],
        totalRecycling : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingTotalRecycling],
        recyclingCapacity : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingRecyclablesCapacity],
        recyclingPickedUp : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingRecyclingPickedUp],
        recyclingRewards : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingRecyclingRewards]
      }
    },
    update : function (a) {
      this.data.totalGarbageAndRecyclingTruck = a.garbageTruckR1 + a.recyclingTruckR2;
      this.data.totalGarbageAndRecyclingTruckTokensAssigned = a.totalGarbageTruckR1TokensAssigned + a.totalRecyclingTruckR2TokensAssigned;
      this.data.totalGarbageAndRecyclingTruckTokensAvailable = this.data.totalGarbageAndRecyclingTruck - this.data.totalGarbageAndRecyclingTruckTokensAssigned;
      if (this.viewingOwnBox) {
        var b =
          a.garbageProducedToday + a.garbageRemainingToday > a.garbageProducedYesterday + a.garbageRemainingYesterday;
        this.data.garbagePickedUp = b ? a.garbagePickedUpToday : a.garbagePickedUpYesterday;
        this.data.totalGarbage = b ? a.garbageProducedToday + a.garbageRemainingToday - a.garbageLost : a.garbageProducedYesterday + a.garbageRemainingYesterday - a.garbageLostPerDay;
        b = a.recyclingProducedToday + a.recyclingRemainingToday > a.recyclingProducedYesterday + a.recyclingRemainingYesterday;
        this.data.recyclingPickedUp = b ? a.recyclingPickedUpToday :
          a.recyclingPickedUpYesterday;
        this.data.totalRecycling = b ? a.recyclingProducedToday + a.recyclingRemainingToday - a.recyclingLost : a.recyclingProducedYesterday + a.recyclingRemainingYesterday - a.recyclingLostPerDay
      } else
        this.data.totalGarbage = a.totalGarbage, this.data.garbagePickedUp = a.garbagePickedUp, this.data.totalRecycling = a.totalRecycling, this.data.recyclingPickedUp = a.recyclingPickedUp;
      this.data.dumpCapacity = a.dumpCapacity;
      this.data.garbageRewards = a.garbageRewards;
      this.data.recyclingCapacity = a.recyclingCapacity;
      this.data.recyclingRewards = a.recyclingRewards;
      this.data.totalGarbageAndRecyclingProduced = this.data.totalGarbage + this.data.totalRecycling;
      this.data.totalGarbageAndRecyclingUncollected = this.data.totalGarbageAndRecyclingProduced - this.data.garbagePickedUp - this.data.recyclingPickedUp;
      0 > this.data.totalGarbageAndRecyclingUncollected && (this.data.totalGarbageAndRecyclingUncollected = 0);
      this.data.garbageAndRecyclingAssigned = this.data.totalGarbageAndRecyclingTruckTokensAssigned;
      simcity.UpdateVisualizedData(this.visualizedTradeData.garbageAndRecyclingAssigned,
        this.data.garbageAndRecyclingAssigned);
      simcity.UpdateVisualizedData(this.visualizedData.totalGarbageAndRecyclingTruck, this.data.totalGarbageAndRecyclingTruck);
      simcity.UpdateVisualizedData(this.visualizedData.totalGarbageAndRecyclingTruckTokensAvailable, this.data.totalGarbageAndRecyclingTruckTokensAvailable);
      simcity.UpdateVisualizedData(this.visualizedData.totalGarbageAndRecyclingProduced, simcity.Garbage.FormatGarbageCans(this.data.totalGarbageAndRecyclingProduced));
      simcity.UpdateVisualizedData(this.visualizedData.totalGarbageAndRecyclingUncollected,
        simcity.Garbage.FormatGarbageCans(this.data.totalGarbageAndRecyclingUncollected))
    }
  }
};
simcity.kRegionalCitiesResourceFire = function () {
  return {
    type : "fire",
    importIconPath : "Graphics/Trade/tradeWall_icon_firetruck_import.png",
    exportIconPath : "Graphics/Trade/tradeWall_icon_firetruck_export.png",
    data : {
      totalFireTruck : 0,
      totalFireTruckTokensAssigned : 0,
      totalFireTruckTokensAvailable : 0,
      totalFires : 0,
      unattendedFires : 0,
      fireRewards : 0,
      fireAssigned : 0
    },
    visualizedData : {
      totalFireTruck : {
        uiKey : simcity.kResourceUIKeys.TotalFireTruck,
        amount : -1,
        changed : !1
      },
      totalFireTruckTokensAvailable : {
        uiKey : simcity.kResourceUIKeys.TotalFireTruckTokensAvailable,
        amount : -1,
        changed : !1
      },
      totalFires : {
        uiKey : simcity.kResourceUIKeys.TotalFires,
        amount : -1,
        changed : !1
      },
      unattendedFires : {
        uiKey : simcity.kResourceUIKeys.UnattendedFires,
        amount : -1,
        changed : !1
      }
    },
    visualizedTradeData : {
      fireAssigned : {
        uiKey : simcity.kResourceUIKeys.FireAssigned,
        amount : -1,
        changed : !1
      }
    },
    queries : function (a, b, c) {
      return b ? {
        fireTruckR1 : [simcity.kDataBinAmount, simcity.kResourceIDTradeExcessFireTruckR1],
        fireTruckR2 : [simcity.kDataBinAmount, simcity.kResourceIDTradeExcessFireTruckR2],
        hazmatTruckR2 : [simcity.kDataBinAmount,
          simcity.kResourceIDTradeExcessHazMatTruckR2],
        fireInspectorR2 : [simcity.kDataBinAmount, simcity.kResourceIDTradeExcessFireInspectorR2],
        fireHelicopterR2 : [simcity.kDataBinAmount, simcity.kResourceIDTradeExcessFireHelicopterR2],
        totalFireTruckR1TokensAssigned : [simcity.kDataUnits, c, simcity.kDataBinAmount, simcity.kResourceIDTradeExcessFireTruckR1],
        totalFireTruckR2TokensAssigned : [simcity.kDataUnits, c, simcity.kDataBinAmount, simcity.kResourceIDTradeExcessFireTruckR2],
        totalHazMatTruckR2TokensAssigned : [simcity.kDataUnits,
          c, simcity.kDataBinAmount, simcity.kResourceIDTradeExcessHazMatTruckR2],
        totalFireInspectorR2TokensAssigned : [simcity.kDataUnits, c, simcity.kDataBinAmount, simcity.kResourceIDTradeExcessFireInspectorR2],
        totalFireHelicopterR2TokensAssigned : [simcity.kDataUnits, c, simcity.kDataBinAmount, simcity.kResourceIDTradeExcessFireHelicopterR2],
        totalFires : [simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingTotalFires],
        unattendedFires : [simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingUnattendedFires],
        fireRewards : [simcity.kDataBinAmount,
          simcity.kResourceIDTradeTrackingFireRewards]
      }
       : {
        fireTruckR1 : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingFireTruckR1],
        fireTruckR2 : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingFireTruckR2],
        hazmatTruckR2 : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingHazMatTruckR2],
        fireInspectorR2 : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingFireInspectorR2],
        fireHelicopterR2 : [simcity.kDataRegionUnits,
          a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingFireHelicopterR2],
        totalFireTruckR1TokensAssigned : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeExcessFireTruckR1],
        totalFireTruckR2TokensAssigned : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeExcessFireTruckR2],
        totalHazMatTruckR2TokensAssigned : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeExcessHazMatTruckR2],
        totalFireInspectorR2TokensAssigned : [simcity.kDataRegionUnits,
          a, simcity.kDataBinAmount, simcity.kResourceIDTradeExcessFireInspectorR2],
        totalFireHelicopterR2TokensAssigned : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeExcessFireHelicopterR2],
        totalFires : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingTotalFires],
        unattendedFires : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingUnattendedFires],
        fireRewards : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingFireRewards]
      }
    },
    update : function (a) {
      this.data.totalFireTruck = a.fireTruckR1 + a.fireTruckR2 + a.hazmatTruckR2 + a.fireInspectorR2 + a.fireHelicopterR2;
      this.data.totalFireTruckTokensAssigned = a.totalFireTruckR1TokensAssigned + a.totalFireTruckR2TokensAssigned + a.totalHazMatTruckR2TokensAssigned + a.totalFireInspectorR2TokensAssigned + a.totalFireHelicopterR2TokensAssigned;
      this.data.totalFireTruckTokensAvailable = this.data.totalFireTruck - this.data.totalFireTruckTokensAssigned;
      this.data.totalFires = a.totalFires;
      this.data.unattendedFires =
        a.unattendedFires;
      this.data.fireRewards = a.fireRewards;
      this.data.fireAssigned = this.data.totalFireTruckTokensAssigned;
      simcity.UpdateVisualizedData(this.visualizedTradeData.fireAssigned, this.data.fireAssigned);
      simcity.UpdateVisualizedData(this.visualizedData.totalFireTruck, this.data.totalFireTruck);
      simcity.UpdateVisualizedData(this.visualizedData.totalFireTruckTokensAvailable, this.data.totalFireTruckTokensAvailable);
      simcity.UpdateVisualizedData(this.visualizedData.totalFires, this.data.totalFires);
      simcity.UpdateVisualizedData(this.visualizedData.unattendedFires,
        this.data.unattendedFires)
    }
  }
};
simcity.kRegionalCitiesResourceCrime = function () {
  return {
    type : "police",
    importIconPath : "Graphics/Trade/tradeWall_icon_police_import.png",
    exportIconPath : "Graphics/Trade/tradeWall_icon_police_export.png",
    data : {
      totalPoliceVehicle : 0,
      totalPoliceVehicleTokensAssigned : 0,
      totalPoliceVehicleTokensAvailable : 0,
      totalCrime : 0,
      criminalsCaught : 0,
      totalCells : 0,
      criminalsAtLarge : 0,
      policeAssigned : 0
    },
    visualizedData : {
      totalPoliceVehicle : {
        uiKey : simcity.kResourceUIKeys.TotalPoliceVehicle,
        amount : -1,
        changed : !1
      },
      totalPoliceVehicleTokensAvailable : {
        uiKey : simcity.kResourceUIKeys.TotalPoliceVehicleTokensAvailable,
        amount : -1,
        changed : !1
      },
      totalCrime : {
        uiKey : simcity.kResourceUIKeys.TotalCrime,
        amount : -1,
        changed : !1
      },
      criminalsAtLarge : {
        uiKey : simcity.kResourceUIKeys.CriminalsAtLarge,
        amount : -1,
        changed : !1
      }
    },
    visualizedTradeData : {
      policeAssigned : {
        uiKey : simcity.kResourceUIKeys.PoliceAssigned,
        amount : -1,
        changed : !1
      }
    },
    queries : function (a, b, c) {
      return b ? {
        policeCarR1 : [simcity.kDataBinAmount, simcity.kResourceIDTradeExcessPoliceCarR1],
        policeDetectiveVanR2 : [simcity.kDataBinAmount, simcity.kResourceIDTradeExcessPoliceDetectiveVanR2],
        policeOutreachVanR2 : [simcity.kDataBinAmount,
          simcity.kResourceIDTradeExcessPoliceOutreachVanR2],
        policeHelicopterR2 : [simcity.kDataBinAmount, simcity.kResourceIDTradeExcessFireHelicopterR2],
        totalPoliceCarR1TokensAssigned : [simcity.kDataUnits, c, simcity.kDataBinAmount, simcity.kResourceIDTradeExcessPoliceCarR1],
        totalDetectiveVanR2TokensAssigned : [simcity.kDataUnits, c, simcity.kDataBinAmount, simcity.kResourceIDTradeExcessPoliceDetectiveVanR2],
        totalOutreachVanR2TokensAssigned : [simcity.kDataUnits, c, simcity.kDataBinAmount, simcity.kResourceIDTradeExcessPoliceOutreachVanR2],
        totalPoliceHelicopterR2TokensAssigned : [simcity.kDataUnits, c, simcity.kDataBinAmount, simcity.kResourceIDTradeExcessPoliceHelicopterR2],
        totalCrime : [simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingTotalCrimes],
        criminalsCaught : [simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingCriminalsCaught],
        totalCells : [simcity.kDataBinAmount, simcity.kResourceIDTotalCells],
        criminalsAtLarge : [simcity.kDataBinAmount, simcity.kResourceIDCriminalsAtLarge]
      }
       : {
        policeCarR1 : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount,
          simcity.kResourceIDTradeTrackingPoliceCarR1],
        policeDetectiveVanR2 : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingPoliceDetectiveVanR2],
        policeOutreachVanR2 : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingPoliceOutreachVanR2],
        policeHelicopterR2 : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingPoliceHelicopterR2],
        totalPoliceCarR1TokensAssigned : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeExcessPoliceCarR1],
        totalDetectiveVanR2TokensAssigned : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeExcessPoliceDetectiveVanR2],
        totalOutreachVanR2TokensAssigned : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeExcessPoliceOutreachVanR2],
        totalPoliceHelicopterR2TokensAssigned : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeExcessPoliceHelicopterR2],
        totalCrime : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingTotalCrimes],
        criminalsCaught : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingCriminalsCaught],
        totalCells : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingTotalCells],
        criminalsAtLarge : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingCriminalsAtLarge]
      }
    },
    update : function (a) {
      this.data.totalPoliceVehicle = a.policeCarR1 + a.policeDetectiveVanR2 + a.policeOutreachVanR2 + a.policeHelicopterR2;
      this.data.totalPoliceVehicleTokensAssigned =
        a.totalPoliceCarR1TokensAssigned + a.totalDetectiveVanR2TokensAssigned + a.totalOutreachVanR2TokensAssigned + a.totalPoliceHelicopterR2TokensAssigned;
      this.data.totalPoliceVehicleTokensAvailable = this.data.totalPoliceVehicle - this.data.totalPoliceVehicleTokensAssigned;
      this.data.totalCrime = a.totalCrime;
      this.data.criminalsCaught = a.criminalsCaught;
      this.data.totalCells = a.totalCells;
      this.data.criminalsAtLarge = a.criminalsAtLarge;
      this.data.policeAssigned = this.data.totalPoliceVehicleTokensAssigned;
      simcity.UpdateVisualizedData(this.visualizedData.totalPoliceVehicle,
        this.data.totalPoliceVehicle);
      simcity.UpdateVisualizedData(this.visualizedData.totalPoliceVehicleTokensAvailable, this.data.totalPoliceVehicleTokensAvailable);
      simcity.UpdateVisualizedData(this.visualizedData.totalCrime, this.data.totalCrime);
      simcity.UpdateVisualizedData(this.visualizedData.criminalsAtLarge, this.data.criminalsAtLarge);
      simcity.UpdateVisualizedData(this.visualizedTradeData.policeAssigned, this.data.policeAssigned)
    }
  }
};
simcity.kRegionalCitiesResourceHealth = function () {
  return {
    type : "health",
    importIconPath : "Graphics/Trade/tradeWall_icon_health_import.png",
    exportIconPath : "Graphics/Trade/tradeWall_icon_health_export.png",
    data : {
      totalHealthVehicle : 0,
      totalHealthVehicleTokensAssigned : 0,
      totalHealthVehicleTokensAvailable : 0,
      sickHealing : 0,
      hospitalRooms : 0,
      injuryHealing : 0,
      totalSickAndInjured : 0,
      totalSickAndInjuredUntreated : 0,
      healthAssigned : 0
    },
    visualizedData : {
      totalHealthVehicle : {
        uiKey : simcity.kResourceUIKeys.TotalHealthVehicle,
        amount : -1,
        changed : !1
      },
      totalHealthVehicleTokensAvailable : {
        uiKey : simcity.kResourceUIKeys.TotalHealthVehicleTokensAvailable,
        amount : -1,
        changed : !1
      },
      totalSickAndInjured : {
        uiKey : simcity.kResourceUIKeys.TotalSickAndInjured,
        amount : -1,
        changed : !1
      },
      totalSickAndInjuredUntreated : {
        uiKey : simcity.kResourceUIKeys.TotalSickAndInjuredUntreated,
        amount : -1,
        changed : !1
      }
    },
    visualizedTradeData : {
      healthAssigned : {
        uiKey : simcity.kResourceUIKeys.HealthAssigned,
        amount : -1,
        changed : !1
      }
    },
    queries : function (a, b, c) {
      return (this.viewingOwnBox = b) ? {
        ambulanceR1 : [simcity.kDataBinAmount,
          simcity.kResourceIDTradeExcessAmbulanceR1],
        communityOutreachVanR2 : [simcity.kDataBinAmount, simcity.kResourceIDTradeExcessCommunityOutreachVanR2],
        totalAmbulanceR1TokensAssigned : [simcity.kDataUnits, c, simcity.kDataBinAmount, simcity.kResourceIDTradeExcessAmbulanceR1],
        totalCommunityOutreachVanR2TokensAssigned : [simcity.kDataUnits, c, simcity.kDataBinAmount, simcity.kResourceIDTradeExcessCommunityOutreachVanR2],
        sickHealing : [simcity.kDataBinAmount, simcity.kResourceIDSickHealing],
        hospitalRooms : [simcity.kDataBinAmount,
          simcity.kResourceIDHospitalRooms],
        injuryHealing : [simcity.kDataBinAmount, simcity.kResourceIDInjuryHealing],
        injury : [simcity.kDataResourceAmount, simcity.kResourceIDInjury],
        sickW1 : [simcity.kDataResourceAmount, simcity.kResourceIDSickW1],
        sickW2 : [simcity.kDataResourceAmount, simcity.kResourceIDSickW2],
        sickW3 : [simcity.kDataResourceAmount, simcity.kResourceIDSickW3],
        sickHealingW1 : [simcity.kDataResourceAmount, simcity.kResourceIDSickHealingW1],
        sickHealingW2 : [simcity.kDataResourceAmount, simcity.kResourceIDSickHealingW2],
        sickHealingW3 : [simcity.kDataResourceAmount, simcity.kResourceIDSickHealingW3],
        sickWaitingW1 : [simcity.kDataResourceAmount, simcity.kResourceIDSickWaitingW1],
        sickWaitingW2 : [simcity.kDataResourceAmount, simcity.kResourceIDSickWaitingW2],
        sickWaitingW3 : [simcity.kDataResourceAmount, simcity.kResourceIDSickWaitingW3],
        sickHealed : [simcity.kDataResourceAmount, simcity.kResourceIDSickHealedDisplay],
        sickToInjured : [simcity.kDataBinAmount, simcity.kResourceIDSickToInjured],
        sickToInjured_PerDay : [simcity.kDataBinAmount,
          simcity.kResourceIDSickToInjured_PerDay],
        sickToNormal : [simcity.kDataBinAmount, simcity.kResourceIDSickToNormal],
        sickToNormal_PerDay : [simcity.kDataBinAmount, simcity.kResourceIDSickToNormal_PerDay],
        injuryHealed : [simcity.kDataResourceAmount, simcity.kResourceIDInjuryHealedDisplay],
        death : [simcity.kDataBinAmount, simcity.kResourceIDDeathFromInjury],
        deathPerDay : [simcity.kDataBinAmount, simcity.kResourceIDDeathFromInjuryPerDay]
      }
       : {
        ambulanceR1 : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingAmbulanceR1],
        communityOutreachVanR2 : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingCommunityOutreachVanR2],
        totalAmbulanceR1TokensAssigned : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeExcessAmbulanceR1],
        totalCommunityOutreachVanR2TokensAssigned : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeExcessCommunityOutreachVanR2],
        sickHealing : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingSickHealing],
        hospitalRooms : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingHospitalRooms],
        injuryHealing : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingInjuryHealing],
        totalSickAndInjured : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingTotalSickAndInjured]
      }
    },
    update : function (a) {
      this.data.totalHealthVehicle = a.ambulanceR1 + a.communityOutreachVanR2;
      this.data.totalHealthVehicleTokensAssigned = a.totalAmbulanceR1TokensAssigned +
        a.totalCommunityOutreachVanR2TokensAssigned;
      this.data.totalHealthVehicleTokensAvailable = this.data.totalHealthVehicle - this.data.totalHealthVehicleTokensAssigned;
      this.data.sickHealing = a.sickHealing;
      this.data.hospitalRooms = a.hospitalRooms;
      this.data.injuryHealing = a.injuryHealing;
      if (this.viewingOwnBox) {
        var b = a.sickW1 + a.sickW2 + a.sickW3 + a.sickHealingW1 + a.sickHealingW2 + a.sickHealingW3 + a.sickWaitingW1 + a.sickWaitingW2 + a.sickWaitingW3,
        c = Math.max(a.death, a.deathPerDay),
        d = a.injuryHealed,
        c = d + c,
        e = a.sickHealed,
        a =
          e + Math.max(a.sickToInjured + b, a.sickToInjured_PerDay);
        this.data.totalSickAndInjured = a + c;
        this.data.totalSickAndInjuredUntreated = this.data.totalSickAndInjured - e - d
      } else
        this.data.totalSickAndInjured = a.totalSickAndInjured, this.data.totalSickAndInjuredUntreated = this.data.totalSickAndInjured - a.sickHealing - a.injuryHealing, 0 > this.data.totalSickAndInjuredUntreated && (this.data.totalSickAndInjuredUntreated = 0);
      this.data.healthAssigned = this.data.totalHealthVehicleTokensAssigned;
      simcity.UpdateVisualizedData(this.visualizedData.totalHealthVehicle,
        this.data.totalHealthVehicle);
      simcity.UpdateVisualizedData(this.visualizedData.totalHealthVehicleTokensAvailable, this.data.totalHealthVehicleTokensAvailable);
      simcity.UpdateVisualizedData(this.visualizedData.totalSickAndInjured, this.data.totalSickAndInjured);
      simcity.UpdateVisualizedData(this.visualizedData.totalSickAndInjuredUntreated, this.data.totalSickAndInjuredUntreated);
      simcity.UpdateVisualizedData(this.visualizedTradeData.healthAssigned, this.data.healthAssigned)
    }
  }
};
simcity.kRegionalCitiesResourceTransport = function () {
  return {
    type : "transport",
    importIconPath : "Graphics/Trade/tradeWall_icon_health_import.png",
    exportIconPath : "Graphics/Trade/tradeWall_icon_health_export.png",
    data : {
      outgoingRoadTraffic : 0,
      incomingRoadTraffic : 0,
      outgoingRoadCapacity : 0,
      incomingRoadCapacity : 0,
      numberRoadConnections : 0,
      numberRailConnections : 0,
      numberBoatConnections : 0,
      busR2 : 0,
      busR2Stop : 0,
      busR2Station : 0,
      busR2PassengersToday : 0,
      busR2Trading : 0,
      schoolBusR2 : 0,
      schoolBusR2Stop : 0,
      schoolBusR2Station : 0,
      schoolBusR2PassengersToday : 0,
      schoolBusR2Trading : 0,
      trainT2Stop : 0,
      trainT2PassengersToday : 0,
      trainT2Trading : 0,
      ferryT1Stop : 0,
      ferryT1PassengersToday : 0,
      ferryT1Trading : 0
    },
    visualizedData : {
      busR2 : {
        uiKey : simcity.kResourceUIKeys.BusR2,
        amount : -1,
        changed : !1
      },
      busR2Stop : {
        uiKey : simcity.kResourceUIKeys.BusR2Stop,
        amount : -1,
        changed : !1
      },
      busR2PassengersToday : {
        uiKey : simcity.kResourceUIKeys.BusR2PassengersToday,
        amount : -1,
        changed : !1
      },
      schoolBusR2 : {
        uiKey : simcity.kResourceUIKeys.SchoolBusR2,
        amount : -1,
        changed : !1
      },
      schoolBusR2Stop : {
        uiKey : simcity.kResourceUIKeys.SchoolBusR2Stop,
        amount : -1,
        changed : !1
      },
      schoolBusR2PassengersToday : {
        uiKey : simcity.kResourceUIKeys.SchoolBusR2PassengersToday,
        amount : -1,
        changed : !1
      },
      trainT2Stop : {
        uiKey : simcity.kResourceUIKeys.TrainT2Stop,
        amount : -1,
        changed : !1
      },
      trainT2PassengersToday : {
        uiKey : simcity.kResourceUIKeys.TrainT2PassengersToday,
        amount : -1,
        changed : !1
      },
      ferryT1Stop : {
        uiKey : simcity.kResourceUIKeys.FerryT1Stop,
        amount : -1,
        changed : !1
      },
      ferryT1PassengersToday : {
        uiKey : simcity.kResourceUIKeys.FerryT1PassengersToday,
        amount : -1,
        changed : !1
      }
    },
    visualizedTradeData : {
      busR2Trading : {
        uiKey : simcity.kResourceUIKeys.BusR2Trading,
        amount : -1,
        changed : !1
      },
      schoolBusR2Trading : {
        uiKey : simcity.kResourceUIKeys.SchoolBusR2Trading,
        amount : -1,
        changed : !1
      },
      trainT2Trading : {
        uiKey : simcity.kResourceUIKeys.TrainT2Trading,
        amount : -1,
        changed : !1
      },
      ferryT1Trading : {
        uiKey : simcity.kResourceUIKeys.FerryT1Trading,
        amount : -1,
        changed : !1
      }
    },
    queries : function (a, b, c) {
      return (this.viewingOwnBox = b) ? {
        outgoingRoadTraffic : [simcity.kDataBins, simcity.kResourceIDOutgoingTradeCarTraffic],
        incomingRoadTraffic : [simcity.kDataBins, simcity.kResourceIDIncomingTradeCarTraffic],
        numberRoadConnections : [simcity.kDataConnectedUnits,
          c, simcity.kDataBinAmount, simcity.kResourceIDNumberOfRoadConnections],
        numberRailConnections : [simcity.kDataConnectedUnits, c, simcity.kDataBinAmount, simcity.kResourceIDNumberOfRailConnections],
        numberBoatConnections : [simcity.kDataConnectedUnits, c, simcity.kDataBinAmount, simcity.kResourceIDNumberOfBoatConnections],
        busR2 : [simcity.kDataBinAmount, simcity.kResourceIDTradeExcessBusR2],
        busR2Stop : [simcity.kDataBinAmount, simcity.kResourceIDTradeExcessBusR2Stop],
        busR2Station : [simcity.kDataBinAmount, simcity.kResourceIDTradeExcessBusR2Station],
        busR2PassengersLocalToday : [simcity.kDataBinAmount, simcity.kResourceIDBusTripsToday],
        busR2PassengersRegionalToday : [simcity.kDataBinAmount, simcity.kResourceIDCoachTripsToday],
        schoolBusR2 : [simcity.kDataBinAmount, simcity.kResourceIDTradeExcessSchoolBusR2],
        schoolBusR2Stop : [simcity.kDataBinAmount, simcity.kResourceIDTradeExcessSchoolBusR2Stop],
        schoolBusR2Station : [simcity.kDataBinAmount, simcity.kResourceIDTradeExcessSchoolBusR2Station],
        schoolBusR2PassengersToday : [simcity.kDataBinAmount, simcity.kResourceIDSchoolBusTripsToday],
        trainT2Stop : [simcity.kDataBinAmount, simcity.kResourceIDTradeExcessTrainT2Stop],
        trainT2PassengersToday : [simcity.kDataBinAmount, simcity.kResourceIDTrainTripsToday],
        ferryT1Stop : [simcity.kDataBinAmount, simcity.kResourceIDTradeExcessFerryT1Stop],
        ferryT1PassengersToday : [simcity.kDataBinAmount, simcity.kResourceIDFerryTripsToday]
      }
       : {
        busR2 : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeExcessBusR2],
        busR2Stop : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeExcessBusR2Stop],
        busR2Station : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeExcessBusR2Station],
        busR2PassengersToday : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingBusR2PassengersToday],
        schoolBusR2 : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeExcessSchoolBusR2],
        schoolBusR2Stop : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeExcessSchoolBusR2Stop],
        schoolBusR2Station : [simcity.kDataRegionUnits, a,
          simcity.kDataBinAmount, simcity.kResourceIDTradeExcessSchoolBusR2Station],
        schoolBusR2PassengersToday : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingSchoolBusR2PassengersToday],
        trainT2Stop : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeExcessTrainT2Stop],
        trainT2PassengersToday : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingTrainT2PassengersToday],
        ferryT1Stop : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount,
          simcity.kResourceIDTradeExcessFerryT1Stop],
        ferryT1PassengersToday : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingFerryT1PassengersToday]
      }
    },
    update : function (a) {
      this.viewingOwnBox && (this.data.outgoingRoadTraffic = a.outgoingRoadTraffic.amount, this.data.incomingRoadTraffic = a.incomingRoadTraffic.amount, this.data.outgoingRoadCapacity = a.outgoingRoadTraffic.capacity, this.data.incomingRoadCapacity = a.incomingRoadTraffic.capacity, this.data.numberRoadConnections = a.numberRoadConnections,
        this.data.numberRailConnections = a.numberRailConnections, this.data.numberBoatConnections = a.numberBoatConnections);
      this.data.busR2 = 60 * a.busR2;
      this.data.busR2Stop = a.busR2Stop;
      this.data.busR2Station = a.busR2Station;
      this.data.busR2PassengersToday = this.viewingOwnBox ? a.busR2PassengersLocalToday + a.busR2PassengersRegionalToday : a.busR2PassengersLocalToday;
      this.data.busR2Trading = -1;
      0 < a.busR2Stop && (this.data.busR2Trading = 0);
      0 < a.busR2Station && (this.data.busR2Trading = 1);
      this.data.schoolBusR2 = 60 * a.schoolBusR2;
      this.data.schoolBusR2Stop =
        a.schoolBusR2Stop;
      this.data.schoolBusR2Station = a.schoolBusR2Station;
      this.data.schoolBusR2PassengersToday = a.schoolBusR2PassengersToday;
      this.data.schoolBusR2Trading = -1;
      0 < a.schoolBusR2Stop && (this.data.schoolBusR2Trading = 0);
      0 < a.schoolBusR2Station && (this.data.schoolBusR2Trading = 1);
      this.data.trainT2Stop = 500 * a.trainT2Stop;
      this.data.trainT2PassengersToday = a.trainT2PassengersToday;
      this.data.trainT2Trading = -1;
      0 < a.trainT2Stop && (this.data.trainT2Trading = 1);
      this.data.ferryT1Stop = 1E3 * a.ferryT1Stop;
      this.data.ferryT1PassengersToday =
        a.ferryT1PassengersToday;
      this.data.ferryT1Trading = -1;
      0 < a.ferryT1Stop && (this.data.ferryT1Trading = 1);
      simcity.UpdateVisualizedData(this.visualizedData.busR2, this.data.busR2);
      simcity.UpdateVisualizedData(this.visualizedData.busR2Stop, this.data.busR2Stop);
      simcity.UpdateVisualizedData(this.visualizedData.busR2PassengersToday, this.data.busR2PassengersToday);
      simcity.UpdateVisualizedData(this.visualizedData.schoolBusR2, this.data.schoolBusR2);
      simcity.UpdateVisualizedData(this.visualizedData.schoolBusR2Stop,
        this.data.schoolBusR2Stop);
      simcity.UpdateVisualizedData(this.visualizedData.schoolBusR2PassengersToday, this.data.schoolBusR2PassengersToday);
      simcity.UpdateVisualizedData(this.visualizedData.trainT2Stop, this.data.trainT2Stop);
      simcity.UpdateVisualizedData(this.visualizedData.ferryT1PassengersToday, this.data.ferryT1PassengersToday);
      simcity.UpdateVisualizedData(this.visualizedData.ferryT1Stop, this.data.ferryT1Stop);
      simcity.UpdateVisualizedData(this.visualizedData.trainT2PassengersToday, this.data.trainT2PassengersToday);
      simcity.UpdateVisualizedData(this.visualizedTradeData.busR2Trading, this.data.busR2Trading);
      simcity.UpdateVisualizedData(this.visualizedTradeData.schoolBusR2Trading, this.data.schoolBusR2Trading);
      simcity.UpdateVisualizedData(this.visualizedTradeData.trainT2Trading, this.data.trainT2Trading);
      simcity.UpdateVisualizedData(this.visualizedTradeData.ferryT1Trading, this.data.ferryT1Trading)
    }
  }
};
simcity.kRegionalCitiesResourceGreatWorks = function () {
  return {
    allowNullResults : !0,
    type : "greatworks",
    importIconPath : "Graphics/Trade/tradeWall_icon_health_import.png",
    exportIconPath : "Graphics/Trade/tradeWall_icon_health_export.png",
    data : {
      regionalBoxUniqueID : 0,
      noSelectedGreatWorks : 0,
      gwSignedUp : 0,
      gwContribution : 0,
      isOperating : 0,
      opportunityExists : !1,
      needExists : !1,
      ready1 : !1,
      ready2 : !1,
      ready3 : !1,
      ready4 : !1,
      ready5 : !1,
      openGWSlot : 0,
      hasUniversity : 0,
      population : 0,
      hasElectronicsHQ : 0,
      numberOfAirTourists : 0,
      hasArcology : 0,
      hasSolarFarm : 0,
      hasInternationalAirport : 0,
      hasSpaceCenter : 0,
      gwContribution1 : 0,
      gwContribution2 : 0,
      gwContribution3 : 0,
      lacksConstructionWorkers : 0,
      hasWorkers : 0,
      hasPower : 0,
      hasWater : 0,
      gwMissionInProgress : 0,
      attractionLevel : 0,
      freight : 0,
      totalJobs : 0,
      launchCountdown : 0,
      satelliteLaunchedTimer : 0,
      timeOfDay : 0,
      internationalAirportUnlocked : 0,
      spaceCenterUnlocked : 0,
      Power_RegionalSolarPlant_Unlocked : 0,
      arcologyUnlocked : 0,
      hasBusStops : 0,
      hasRailStops : 0
    },
    queries : function (a) {
      return {
        regionalBoxUniqueID : [simcity.kDataUnits, a, simcity.kDataBins,
          simcity.kResourceRegionalBoxUniqueID],
        noSelectedGreatWorks : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDGreatWorksUnlocked],
        internationalAirportUnlocked : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDInternationalAirportUnlocked],
        spaceCenterUnlocked : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDSpaceCenterUnlocked],
        Power_RegionalSolarPlant_Unlocked : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDPower_RegionalSolarPlant_Unlocked],
        arcologyUnlocked : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDArcologyUnlocked],
        gwSignedUp : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDGreatWorksSignedUpCounter],
        gwContribution : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDGreatWorksResourceDelivered],
        isOperating : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDGreatWorksOperational],
        ready1 : [simcity.kDataBinAmount, simcity.kResourceIDRegionSolarPlantUnlocked],
        ready2 : [simcity.kDataBinAmount,
          simcity.kResourceIDRegionInternationalAirportUnlocked],
        ready3 : [simcity.kDataBinAmount, simcity.kResourceIDRegionSpaceCenterUnlocked],
        ready4 : [simcity.kDataBinAmount, simcity.kResourceIDRegionArcologyUnlocked],
        ready5 : [simcity.kDataBinAmount, simcity.kResourceIDHQ_Electronics_ConsumerElectronics_Module_IsOn],
        openGWSlot : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfGreatWorksAvailable],
        hasUniversity : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfUniversities],
        population : [simcity.kDataBinAmount,
          simcity.kResourceIDTotalResidential],
        hasElectronicsHQ : [simcity.kDataBinAmount, simcity.kResourceIDHQ_Electronics_IsOn],
        numberOfAirTourists : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfAirTouristsYesterday],
        hasArcology : [simcity.kDataBinAmount, simcity.kResourceIDHasArcology],
        hasSolarFarm : [simcity.kDataBinAmount, simcity.kResourceIDHasSolarFarm],
        hasInternationalAirport : [simcity.kDataBinAmount, simcity.kResourceIDHasInternationalAirport],
        hasSpaceCenter : [simcity.kDataBinAmount, simcity.kResourceIDHasSpaceCenter],
        gwContribution1 : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDGreatWorksResource1Delivered],
        gwContribution2 : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDGreatWorksResource2Delivered],
        gwContribution3 : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDGreatWorksResource3Delivered],
        gwConstructionStage : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDGWConstructionStage],
        lacksConstructionWorkers : [simcity.kDataUnits, a, simcity.kDataBinAmount,
          simcity.kResourceIDConstructionWorkersStalled],
        hasWorkers : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDRegionalBuildingActive],
        hasPower : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDRegionalPowerOperating],
        hasWater : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDRegionalWaterOperating],
        gwMissionInProgress : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDGreatWorksOperatingMissionInProgress],
        attractionLevel : [simcity.kDataBinAmount,
          simcity.kResourceIDAttractionLevel],
        freight : [simcity.kDataConnectedUnits, a, simcity.kDataBins, simcity.kResourceIDFreight],
        hasBusStops : [simcity.kDataBinAmount, simcity.kResourceIDTradeExcessBusR2Station],
        hasRailStops : [simcity.kDataBinAmount, simcity.kResourceIDTradeExcessTrainT2Stop],
        totalJobs : [simcity.kDataBinAmount, simcity.kResourceIDTotalJobs],
        launchCountdown : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDSpaceCenterRocketOnPad],
        satelliteLaunchedTimer : [simcity.kDataUnits, a, simcity.kDataBins,
          simcity.kResourceIDSpaceCenterSkillBoostCounter],
        timeOfDay : [simcity.kDataBinAmount, simcity.kResourceIDHour]
      }
    },
    update : function (a) {
      this.data.opportunityExists = !1;
      this.data.needExists = !1;
      if (a.ready1 || a.ready2 || a.ready4 || a.ready3 && a.ready5)
        this.data.gwSignedUp = a.gwSignedUp, this.data.gwContribution = a.gwContribution, this.data.isOperating = a.isOperating, this.data.gwSignedUp ? this.data.gwContribution ? this.data.isOperating || (this.data.needExists = !0) : this.data.needExists = !0 : this.data.opportunityExists = !0
    }
  }
};
simcity.kRegionalCitiesResourceT2 = function () {
  return {
    type : "t2",
    importIconPath : "Graphics/Trade/tradeWall_icon_job_import.png",
    exportIconPath : "Graphics/Trade/tradeWall_icon_job_export.png",
    data : {
      fireStations : 0,
      garbageBases : 0,
      hospitals : 0,
      policeStations : 0,
      citySpecialization : 0
    },
    queries : function (a, b) {
      return b ? {
        fireStations : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfT2FireStations],
        garbageBases : [simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingT2GarbageBases],
        hospitals : [simcity.kDataBinAmount,
          simcity.kResourceIDTradeTrackingT2Hospitals],
        policeStations : [simcity.kDataBinAmount, simcity.kResourceIDPoliceStationsT2Built],
        citySpecialization : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingSpecializationNumber]
      }
       : {
        fireStations : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingT2FireStations],
        garbageBases : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingT1GarbageBases],
        hospitals : [simcity.kDataRegionUnits,
          a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingT2Hospitals],
        policeStations : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingT2PoliceStations],
        citySpecialization : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingSpecializationNumber]
      }
    },
    update : function (a) {
      this.data.fireStations = a.fireStations;
      this.data.garbageBases = a.garbageBases;
      this.data.hospitals = a.hospitals;
      this.data.policeStations = a.policeStations;
      this.data.citySpecialization =
        a.citySpecialization
    }
  }
};
simcity.kRegionalCitiesResourceLocalRCI = function () {
  return {
    type : "LocalRCI",
    importIconPath : "Graphics/Trade/tradeWall_icon_shoppers_import.png",
    exportIconPath : "Graphics/Trade/tradeWall_icon_shoppers_export.png",
    data : {
      residentialWorkerW1 : 0,
      residentialWorkerW2 : 0,
      residentialWorkerW3 : 0,
      exportingResidentWorkersW1 : 0,
      exportingResidentWorkersW2 : 0,
      exportingResidentWorkersW3 : 0,
      dayJobsW1 : 0,
      dayJobsW2 : 0,
      dayJobsW3 : 0,
      nightJobsW1 : 0,
      nightJobsW2 : 0,
      nightJobsW3 : 0,
      residentialShopperW1 : 0,
      residentialShopperW2 : 0,
      residentialShopperW3 : 0,
      hotItemsW1 : 0,
      hotItemsW2 : 0,
      hotItemsW3 : 0,
      hotItemsW1ProducedYesterday_Day : 0,
      hotItemsW2ProducedYesterday_Day : 0,
      hotItemsW3ProducedYesterday_Day : 0,
      hotItemsW1ProducedYesterday_Night : 0,
      hotItemsW2ProducedYesterday_Night : 0,
      hotItemsW3ProducedYesterday_Night : 0,
      hotItemsW1ConsumedYesterday_Day : 0,
      hotItemsW2ConsumedYesterday_Day : 0,
      hotItemsW3ConsumedYesterday_Day : 0,
      hotItemsW1ConsumedYesterday_Night : 0,
      hotItemsW2ConsumedYesterday_Night : 0,
      hotItemsW3ConsumedYesterday_Night : 0,
      freightCapacityGlobal : 0,
      freightConsumedYesterday : 0,
      freightProducedYesterday : 0,
      freightExcessConsumerD1 : 0,
      freightExcessConsumerD2 : 0,
      freightExcessConsumerD3 : 0,
      kids : 0,
      localStudentsYesterday : 0,
      spotsForKids : 0,
      spotsForKidsE2 : 0,
      spotsForKidsE3 : 0,
      examsPassedE2 : 0,
      examsPassedE3 : 0,
      totals : {
        jobs : 0,
        jobsW1 : 0,
        jobsW2 : 0,
        jobsW3 : 0,
        workers : 0,
        unemployedWorkers : 0,
        shoppers : 0,
        ordersNeedFilling : 0,
        excessItems : 0,
        hotItemsProducedW1 : 0,
        hotItemsProducedW2 : 0,
        hotItemsProducedW3 : 0,
        hotItemsProduced : 0,
        hotItemsConsumedW1 : 0,
        hotItemsConsumedW2 : 0,
        hotItemsConsumedW3 : 0,
        hotItemsConsumed : 0
      }
    },
    queries : function (a, b) {
      return b ? {
        residentialWorkerW1 : [simcity.kDataResourceAmount, simcity.kResourceIDResidentWorkerW1],
        residentialWorkerW2 : [simcity.kDataResourceAmount, simcity.kResourceIDResidentWorkerW2],
        residentialWorkerW3 : [simcity.kDataResourceAmount, simcity.kResourceIDResidentWorkerW3],
        workerW1 : [simcity.kDataResourceAmount, simcity.kResourceIDWorkerW1],
        workerW2 : [simcity.kDataResourceAmount, simcity.kResourceIDWorkerW2],
        workerW3 : [simcity.kDataResourceAmount, simcity.kResourceIDWorkerW3],
        exportingResidentWorkersW1 : [simcity.kDataResourceAmount,
          simcity.kResourceIDTradeExcessResidentWorkerW1],
        exportingResidentWorkersW2 : [simcity.kDataResourceAmount, simcity.kResourceIDTradeExcessResidentWorkerW2],
        exportingResidentWorkersW3 : [simcity.kDataResourceAmount, simcity.kResourceIDTradeExcessResidentWorkerW3],
        dayJobsW1 : [simcity.kDataBinAmount, simcity.kResourceIDDayJobsW1],
        dayJobsW2 : [simcity.kDataBinAmount, simcity.kResourceIDDayJobsW2],
        dayJobsW3 : [simcity.kDataBinAmount, simcity.kResourceIDDayJobsW3],
        nightJobsW1 : [simcity.kDataBinAmount, simcity.kResourceIDNightJobsW1],
        nightJobsW2 : [simcity.kDataBinAmount, simcity.kResourceIDNightJobsW2],
        nightJobsW3 : [simcity.kDataBinAmount, simcity.kResourceIDNightJobsW3],
        residentialShopperW1 : [simcity.kDataResourceAmount, simcity.kResourceIDShopperW1],
        residentialShopperW2 : [simcity.kDataResourceAmount, simcity.kResourceIDShopperW2],
        residentialShopperW3 : [simcity.kDataResourceAmount, simcity.kResourceIDShopperW3],
        hotItemsW1 : [simcity.kDataResourceAmount, simcity.kResourceIDHotItemsW1],
        hotItemsW2 : [simcity.kDataResourceAmount, simcity.kResourceIDHotItemsW2],
        hotItemsW3 : [simcity.kDataResourceAmount, simcity.kResourceIDHotItemsW3],
        hotItemsW1ProducedYesterday_Day : [simcity.kDataBinAmount, simcity.kResourceIDHotItemsW1ProducedYesterday_Day],
        hotItemsW2ProducedYesterday_Day : [simcity.kDataBinAmount, simcity.kResourceIDHotItemsW2ProducedYesterday_Day],
        hotItemsW3ProducedYesterday_Day : [simcity.kDataBinAmount, simcity.kResourceIDHotItemsW3ProducedYesterday_Day],
        hotItemsW1ProducedYesterday_Night : [simcity.kDataBinAmount, simcity.kResourceIDHotItemsW1ProducedYesterday_Night],
        hotItemsW2ProducedYesterday_Night : [simcity.kDataBinAmount, simcity.kResourceIDHotItemsW2ProducedYesterday_Night],
        hotItemsW3ProducedYesterday_Night : [simcity.kDataBinAmount, simcity.kResourceIDHotItemsW3ProducedYesterday_Night],
        hotItemsW1ConsumedYesterday_Day : [simcity.kDataBinAmount, simcity.kResourceIDHotItemsW1ConsumedYesterday_Day],
        hotItemsW2ConsumedYesterday_Day : [simcity.kDataBinAmount, simcity.kResourceIDHotItemsW2ConsumedYesterday_Day],
        hotItemsW3ConsumedYesterday_Day : [simcity.kDataBinAmount, simcity.kResourceIDHotItemsW3ConsumedYesterday_Day],
        hotItemsW1ConsumedYesterday_Night : [simcity.kDataBinAmount, simcity.kResourceIDHotItemsW1ConsumedYesterday_Night],
        hotItemsW2ConsumedYesterday_Night : [simcity.kDataBinAmount, simcity.kResourceIDHotItemsW2ConsumedYesterday_Night],
        hotItemsW3ConsumedYesterday_Night : [simcity.kDataBinAmount, simcity.kResourceIDHotItemsW3ConsumedYesterday_Night],
        freightCapacityGlobal : [simcity.kDataBinAmount, simcity.kResourceIDFreightCapacityGlobal],
        freightConsumedYesterday : [simcity.kDataBinAmount, simcity.kResourceIDFreightConsumedYesterday],
        freightProducedYesterday : [simcity.kDataBinAmount, simcity.kResourceIDFreightProducedYesterday],
        freightExcessConsumerD1 : [simcity.kDataBinAmount, simcity.kResourceIDTradeExcessFreightConsumerD1],
        freightExcessConsumerD2 : [simcity.kDataBinAmount, simcity.kResourceIDTradeExcessFreightConsumerD2],
        freightExcessConsumerD3 : [simcity.kDataBinAmount, simcity.kResourceIDTradeExcessFreightConsumerD3],
        kids : [simcity.kDataBinAmount, simcity.kResourceIDTotalKids],
        localStudentsYesterday : [simcity.kDataBinAmount, simcity.kResourceIDLocalStudentsYesterday],
        spotsForKids : [simcity.kDataBinAmount, simcity.kResourceIDSpotsForKids],
        spotsForKidsE2 : [simcity.kDataBinAmount, simcity.kResourceIDSpotsForKidsE2],
        spotsForKidsE3 : [simcity.kDataBinAmount, simcity.kResourceIDSpotsForKidsE3],
        examsPassedE2 : [simcity.kDataBinAmount, simcity.kResourceIDExamsPassedTodayE2],
        examsPassedE3 : [simcity.kDataBinAmount, simcity.kResourceIDExamsPassedTodayE3]
      }
       : {
        residentialWorkerW1 : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingResidentialWorkerW1],
        residentialWorkerW2 : [simcity.kDataRegionUnits,
          a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingResidentialWorkerW2],
        residentialWorkerW3 : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingResidentialWorkerW3],
        exportingResidentWorkersW1 : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeExcessResidentWorkerW1],
        exportingResidentWorkersW2 : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeExcessResidentWorkerW2],
        exportingResidentWorkersW3 : [simcity.kDataRegionUnits,
          a, simcity.kDataBinAmount, simcity.kResourceIDTradeExcessResidentWorkerW3],
        dayJobsW1 : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingDayJobsW1],
        dayJobsW2 : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingDayJobsW2],
        dayJobsW3 : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingDayJobsW3],
        nightJobsW1 : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingNightJobsW1],
        nightJobsW2 : [simcity.kDataRegionUnits,
          a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingNightJobsW2],
        nightJobsW3 : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingNightJobsW3],
        residentialShopperW1 : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingResidentialShopperW1],
        residentialShopperW2 : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingResidentialShopperW2],
        residentialShopperW3 : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount,
          simcity.kResourceIDTradeTrackingResidentialShopperW3],
        hotItemsW1 : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingHotItemsW1ProducedYesterday_Day],
        hotItemsW2 : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingHotItemsW2ProducedYesterday_Day],
        hotItemsW3 : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingHotItemsW3ProducedYesterday_Day],
        hotItemsW1ProducedYesterday_Day : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount,
          simcity.kResourceIDTradeTrackingHotItemsW1ProducedYesterday_Day],
        hotItemsW2ProducedYesterday_Day : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingHotItemsW2ProducedYesterday_Day],
        hotItemsW3ProducedYesterday_Day : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingHotItemsW3ProducedYesterday_Day],
        hotItemsW1ProducedYesterday_Night : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingHotItemsW1ProducedYesterday_Night],
        hotItemsW2ProducedYesterday_Night : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingHotItemsW2ProducedYesterday_Night],
        hotItemsW3ProducedYesterday_Night : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingHotItemsW3ProducedYesterday_Night],
        hotItemsW1ConsumedYesterday_Day : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingHotItemsW1ConsumedYesterday_Day],
        hotItemsW2ConsumedYesterday_Day : [simcity.kDataRegionUnits,
          a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingHotItemsW2ConsumedYesterday_Day],
        hotItemsW3ConsumedYesterday_Day : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingHotItemsW3ConsumedYesterday_Day],
        hotItemsW1ConsumedYesterday_Night : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingHotItemsW1ConsumedYesterday_Night],
        hotItemsW2ConsumedYesterday_Night : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingHotItemsW2ConsumedYesterday_Night],
        hotItemsW3ConsumedYesterday_Night : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingHotItemsW3ConsumedYesterday_Night],
        freightCapacityGlobal : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingFreightCapacityGlobal],
        freightConsumedYesterday : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingFreightConsumedYesterday],
        freightProducedYesterday : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingFreightProducedYesterday],
        freightExcessConsumerD1 : [simcity.kDataBinAmount, simcity.kResourceIDTradeExcessFreightConsumerD1],
        freightExcessConsumerD2 : [simcity.kDataBinAmount, simcity.kResourceIDTradeExcessFreightConsumerD2],
        freightExcessConsumerD3 : [simcity.kDataBinAmount, simcity.kResourceIDTradeExcessFreightConsumerD3],
        kids : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingTotalKids],
        localStudentsYesterday : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingLocalStudentsYesterday],
        spotsForKids : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingSpotsForKids],
        spotsForKidsE2 : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingSpotsForKidsE2],
        spotsForKidsE3 : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingSpotsForKidsE3],
        examsPassedE2 : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingExamsPassedTodayE2],
        examsPassedE3 : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount,
          simcity.kResourceIDTradeTrackingExamsPassedTodayE3]
      }
    },
    update : function (a) {
      this.data.residentialWorkerW1 = a.residentialWorkerW1;
      this.data.residentialWorkerW2 = a.residentialWorkerW2;
      this.data.residentialWorkerW3 = a.residentialWorkerW3;
      this.data.exportingResidentWorkersW1 = a.exportingResidentWorkersW1;
      this.data.exportingResidentWorkersW2 = a.exportingResidentWorkersW2;
      this.data.exportingResidentWorkersW3 = a.exportingResidentWorkersW3;
      a.workerW1 && (a.workerW2 && a.workerW3) && (this.data.residentialWorkerW1 += a.workerW1,
        this.data.residentialWorkerW2 += a.workerW2, this.data.residentialWorkerW3 += a.workerW3);
      this.data.dayJobsW1 = a.dayJobsW1;
      this.data.dayJobsW2 = a.dayJobsW2;
      this.data.dayJobsW3 = a.dayJobsW3;
      this.data.nightJobsW1 = a.nightJobsW1;
      this.data.nightJobsW2 = a.nightJobsW2;
      this.data.nightJobsW3 = a.nightJobsW3;
      this.data.residentialShopperW1 = a.residentialShopperW1;
      this.data.residentialShopperW2 = a.residentialShopperW2;
      this.data.residentialShopperW3 = a.residentialShopperW3;
      this.data.hotItemsW1 = a.hotItemsW1;
      this.data.hotItemsW2 =
        a.hotItemsW2;
      this.data.hotItemsW3 = a.hotItemsW3;
      this.data.hotItemsW1ProducedYesterday_Day = a.hotItemsW1ProducedYesterday_Day;
      this.data.hotItemsW2ProducedYesterday_Day = a.hotItemsW2ProducedYesterday_Day;
      this.data.hotItemsW3ProducedYesterday_Day = a.hotItemsW3ProducedYesterday_Day;
      this.data.hotItemsW1ProducedYesterday_Night = a.hotItemsW1ProducedYesterday_Night;
      this.data.hotItemsW2ProducedYesterday_Night = a.hotItemsW2ProducedYesterday_Night;
      this.data.hotItemsW3ProducedYesterday_Night = a.hotItemsW3ProducedYesterday_Night;
      this.data.hotItemsW1ConsumedYesterday_Day = a.hotItemsW1ConsumedYesterday_Day;
      this.data.hotItemsW2ConsumedYesterday_Day = a.hotItemsW2ConsumedYesterday_Day;
      this.data.hotItemsW3ConsumedYesterday_Day = a.hotItemsW3ConsumedYesterday_Day;
      this.data.hotItemsW1ConsumedYesterday_Night = a.hotItemsW1ConsumedYesterday_Night;
      this.data.hotItemsW2ConsumedYesterday_Night = a.hotItemsW2ConsumedYesterday_Night;
      this.data.hotItemsW3ConsumedYesterday_Night = a.hotItemsW3ConsumedYesterday_Night;
      this.data.freightCapacityGlobal = a.freightCapacityGlobal;
      this.data.freightConsumedYesterday = a.freightConsumedYesterday;
      this.data.freightProducedYesterday = a.freightProducedYesterday;
      this.data.freightExcessConsumerD1 = a.freightExcessConsumerD1;
      this.data.freightExcessConsumerD2 = a.freightExcessConsumerD2;
      this.data.freightExcessConsumerD3 = a.freightExcessConsumerD3;
      this.data.kids = a.kids;
      this.data.localStudentsYesterday = a.localStudentsYesterday;
      this.data.spotsForKids = a.spotsForKids;
      this.data.spotsForKidsE2 = a.spotsForKidsE2;
      this.data.spotsForKidsE3 = a.spotsForKidsE3;
      this.data.examsPassedE2 = a.examsPassedE2;
      this.data.examsPassedE3 = a.examsPassedE3;
      this.data.totals.jobs = this.data.dayJobsW1 + this.data.dayJobsW2 + this.data.dayJobsW3 + this.data.nightJobsW1 + this.data.nightJobsW2 + this.data.nightJobsW3;
      this.data.totals.jobsW1 = this.data.dayJobsW1 + this.data.nightJobsW1;
      this.data.totals.jobsW2 = this.data.dayJobsW2 + this.data.nightJobsW2;
      this.data.totals.jobsW3 = this.data.dayJobsW3 + this.data.nightJobsW3;
      this.data.totals.workers = this.data.residentialWorkerW1 + this.data.residentialWorkerW2 +
        this.data.residentialWorkerW3;
      this.data.totals.unemployedWorkers = this.data.exportingResidentWorkersW1 + this.data.exportingResidentWorkersW2 + this.data.exportingResidentWorkersW3;
      this.data.totals.shoppers = this.data.residentialShopperW1 + this.data.residentialShopperW2 + this.data.residentialShopperW3;
      this.data.totals.ordersNeedFilling = this.data.freightExcessConsumerD1 + this.data.freightExcessConsumerD2 + this.data.freightExcessConsumerD3;
      this.data.totals.excessItems = this.data.hotItemsW2ProducedYesterday_Day +
        this.data.hotItemsW2ProducedYesterday_Night + this.data.hotItemsW2ConsumedYesterday_Night + this.data.hotItemsW2ConsumedYesterday_Day;
      this.data.totals.hotItemsProducedW1 = this.data.hotItemsW1ProducedYesterday_Night + this.data.hotItemsW1ProducedYesterday_Day;
      this.data.totals.hotItemsProducedW2 = this.data.hotItemsW2ProducedYesterday_Night + this.data.hotItemsW2ProducedYesterday_Day;
      this.data.totals.hotItemsProducedW3 = this.data.hotItemsW3ProducedYesterday_Night + this.data.hotItemsW3ProducedYesterday_Day;
      this.data.totals.hotItemsConsumedW1 =
        this.data.hotItemsW1ConsumedYesterday_Night + this.data.hotItemsW1ConsumedYesterday_Day;
      this.data.totals.hotItemsConsumedW2 = this.data.hotItemsW2ConsumedYesterday_Night + this.data.hotItemsW2ConsumedYesterday_Day;
      this.data.totals.hotItemsConsumedW3 = this.data.hotItemsW3ConsumedYesterday_Night + this.data.hotItemsW3ConsumedYesterday_Day;
      this.data.totals.hotItemsProduced = this.data.hotItemsW1ProducedYesterday_Night + this.data.hotItemsW2ProducedYesterday_Night + this.data.hotItemsW3ProducedYesterday_Night + this.data.hotItemsW1ProducedYesterday_Day +
        this.data.hotItemsW2ProducedYesterday_Day + this.data.hotItemsW3ProducedYesterday_Day;
      this.data.totals.hotItemsConsumed = this.data.hotItemsW1ConsumedYesterday_Night + this.data.hotItemsW2ConsumedYesterday_Night + this.data.hotItemsW3ConsumedYesterday_Night + this.data.hotItemsW1ConsumedYesterday_Day + this.data.hotItemsW2ConsumedYesterday_Day + this.data.hotItemsW3ConsumedYesterday_Day
    }
  }
};
simcity.kRegionalCitiesResourceImportedRCI = function () {
  return {
    type : "ImportedRCI",
    importIconPath : "Graphics/Trade/tradeWall_icon_shoppers_import.png",
    exportIconPath : "Graphics/Trade/tradeWall_icon_shoppers_export.png",
    data : {
      importedResidentsW1 : 0,
      importedResidentsW2 : 0,
      importedResidentsW3 : 0,
      importedJobsW1 : 0,
      importedJobsW2 : 0,
      importedJobsW3 : 0,
      importedShoppersW1 : 0,
      importedShoppersW2 : 0,
      importedShoppersW3 : 0,
      importedShoppersNeededW1 : 0,
      importedShoppersNeededW2 : 0,
      importedShoppersNeededW3 : 0,
      importedKid : 0,
      importedStudentsE2 : 0,
      importedStudentsE3 : 0,
      totals : {
        importedResidents : 0,
        importedResidentsW1 : 0,
        importedResidentsW2 : 0,
        importedResidentsW3 : 0,
        importedJobs : 0,
        importedJobsW1 : 0,
        importedJobsW2 : 0,
        importedJobsW3 : 0,
        importedShoppers : 0,
        importedShoppersNeeded : 0,
        importedStudents : 0,
        importedKid : 0
      }
    },
    queries : function (a, b) {
      return b ? {
        importedResidentsW1 : [simcity.kDataBinAmount, simcity.kResourceIDImportedResidentWorkerW1],
        importedResidentsW2 : [simcity.kDataBinAmount, simcity.kResourceIDImportedResidentWorkerW2],
        importedResidentsW3 : [simcity.kDataBinAmount,
          simcity.kResourceIDImportedResidentWorkerW3],
        importedJobsW1 : [simcity.kDataBinAmount, simcity.kResourceIDImportedJobsW1],
        importedJobsW2 : [simcity.kDataBinAmount, simcity.kResourceIDImportedJobsW2],
        importedJobsW3 : [simcity.kDataBinAmount, simcity.kResourceIDImportedJobsW3],
        importedShoppersW1 : [simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingImportedShoppersNeededW1],
        importedShoppersW2 : [simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingImportedShoppersNeededW2],
        importedShoppersW3 : [simcity.kDataBinAmount,
          simcity.kResourceIDTradeTrackingImportedShoppersNeededW3],
        importedShoppersNeededW1 : [simcity.kDataBinAmount, simcity.kResourceIDImportedShoppersNeededW1],
        importedShoppersNeededW2 : [simcity.kDataBinAmount, simcity.kResourceIDImportedShoppersNeededW2],
        importedShoppersNeededW3 : [simcity.kDataBinAmount, simcity.kResourceIDImportedShoppersNeededW3],
        importedKid : [simcity.kDataBinAmount, simcity.kResourceIDImportedKid],
        importedStudentsE2 : [simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingImportedStudentsE2],
        importedStudentsE3 : [simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingImportedStudentsE3]
      }
       : {
        importedResidentsW1 : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingImportedResidentWorkerW1],
        importedResidentsW2 : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingImportedResidentWorkerW2],
        importedResidentsW3 : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingImportedResidentWorkerW3],
        importedJobsW1 : [simcity.kDataRegionUnits,
          a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingImportedJobsW1],
        importedJobsW2 : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingImportedJobsW2],
        importedJobsW3 : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingImportedJobsW3],
        importedShoppersW1 : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingImportedResidentShopperW1],
        importedShoppersW2 : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingImportedResidentShopperW2],
        importedShoppersW3 : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingImportedResidentShopperW3],
        importedShoppersNeededW1 : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingImportedShoppersNeededW1],
        importedShoppersNeededW2 : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingImportedShoppersNeededW2],
        importedShoppersNeededW3 : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingImportedShoppersNeededW3],
        importedKid : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingImportedKid],
        importedStudentsE2 : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingImportedStudentsE2],
        importedStudentsE3 : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingImportedStudentsE3]
      }
    },
    update : function (a) {
      this.data.importedResidentsW1 = a.importedResidentsW1;
      this.data.importedResidentsW2 = a.importedResidentsW2;
      this.data.importedResidentsW3 =
        a.importedResidentsW3;
      this.data.importedJobsW1 = a.importedJobsW1;
      this.data.importedJobsW2 = a.importedJobsW2;
      this.data.importedJobsW3 = a.importedJobsW3;
      this.data.importedShoppersW1 = a.importedShoppersW1;
      this.data.importedShoppersW2 = a.importedShoppersW2;
      this.data.importedShoppersW3 = a.importedShoppersW3;
      this.data.importedShoppersNeededW1 = a.importedShoppersNeededW1;
      this.data.importedShoppersNeededW2 = a.importedShoppersNeededW2;
      this.data.importedShoppersNeededW3 = a.importedShoppersNeededW3;
      this.data.importedKid =
        a.importedKid;
      this.data.importedStudentsE2 = a.importedStudentsE2;
      this.data.importedStudentsE3 = a.importedStudentsE3;
      this.data.totals.importedResidents = this.data.importedResidentsW1 + this.data.importedResidentsW2 + this.data.importedResidentsW3;
      this.data.totals.importedJobs = this.data.importedJobsW1 + this.data.importedJobsW2 + this.data.importedJobsW3;
      this.data.totals.importedShoppers = this.data.importedShoppersW1 + this.data.importedShoppersW2 + this.data.importedShoppersW3;
      this.data.totals.importedShoppersNeeded =
        this.data.importedShoppersNeededW1 + this.data.importedShoppersNeededW2 + this.data.importedShoppersNeededW3;
      this.data.totals.importedStudents = this.data.importedStudentsE2 + this.data.importedStudentsE3;
      this.data.totals.importedKid = this.data.importedKid;
      this.data.totals.importedJobsW1 = this.data.importedJobsW1;
      this.data.totals.importedJobsW2 = this.data.importedJobsW2;
      this.data.totals.importedJobsW3 = this.data.importedJobsW3;
      this.data.totals.importedResidentsW1 = this.data.importedResidentsW1;
      this.data.totals.importedResidentsW2 =
        this.data.importedResidentsW2;
      this.data.totals.importedResidentsW3 = this.data.importedResidentsW3
    }
  }
};
simcity.kRegionalCitiesResourceHarvestedCommodities = function () {
  return {
    type : "HarvestedCommodities",
    importIconPath : "Graphics/Trade/tradeWall_icon_shoppers_import.png",
    exportIconPath : "Graphics/Trade/tradeWall_icon_shoppers_export.png",
    data : {
      coalHarvested : 0,
      coalConsumed : 0,
      oreHarvested : 0,
      oreConsumed : 0,
      oilHarvested : 0
    },
    queries : function (a, b) {
      return b ? {
        coalHarvested : [simcity.kDataBinAmount, simcity.kResourceIDCoalHarvested],
        coalConsumed : [simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingCoalConsumed],
        oreHarvested : [simcity.kDataBinAmount, simcity.kResourceIDOreHarvested],
        oreConsumed : [simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingOreRawConsumedByProducer],
        oilHarvested : [simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingOilCrudeHarvested]
      }
       : {
        coalHarvested : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingCoalHarvested],
        coalConsumed : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingCoalConsumed],
        oreHarvested : [simcity.kDataRegionUnits,
          a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingOreRawHarvested],
        oreConsumed : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingOreRawConsumedByProducer],
        oilHarvested : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingOilCrudeHarvested]
      }
    },
    update : function (a) {
      this.data.coalHarvested = a.coalHarvested;
      this.data.coalConsumed = a.coalConsumed;
      this.data.oreHarvested = a.oreHarvested;
      this.data.oreConsumed = a.oreConsumed;
      this.data.oilHarvested =
        a.oilHarvested
    }
  }
};
simcity.kRegionalCitiesGiftableResources = function () {
  return {
    type : "GiftableResources",
    importIconPath : "Graphics/Trade/tradeWall_icon_shoppers_import.png",
    exportIconPath : "Graphics/Trade/tradeWall_icon_shoppers_export.png",
    data : {
      simoleons : 0,
      numberOfTruckLots : 0,
      numberOfRailLots : 0,
      numberOfBoatLots : 0,
      alloyImported : 0,
      alloyAssembled : 0,
      alloyExported : 0,
      alloyConsumedByProducer : 0,
      alloyCapacity : 0,
      alloyStored : 0,
      alloyTotal : 0,
      coalImported : 0,
      coalHarvested : 0,
      coalExported : 0,
      coalConsumed : 0,
      coalCapacity : 0,
      coalStored : 0,
      coalTotal : 0,
      computerImported : 0,
      computerAssembled : 0,
      computerExported : 0,
      computerConsumedByProducer : 0,
      computerCapacity : 0,
      computerStored : 0,
      computerTotal : 0,
      electronicsImported : 0,
      electronicsAssembled : 0,
      electronicsExported : 0,
      electronicsConsumedByProducer : 0,
      electronicsCapacity : 0,
      electronicsStored : 0,
      electronicsTotal : 0,
      fuelImported : 0,
      fuelAssembled : 0,
      fuelExported : 0,
      fuelConsumedByProducer : 0,
      fuelCapacity : 0,
      fuelStored : 0,
      fuelTotal : 0,
      metalImported : 0,
      metalAssembled : 0,
      metalExported : 0,
      metalConsumedByProducer : 0,
      metalCapacity : 0,
      metalStored : 0,
      metalTotal : 0,
      oilCrudeImported : 0,
      oilCrudeHarvested : 0,
      oilCrudeExported : 0,
      oilCrudeConsumed : 0,
      oilCrudeCapacity : 0,
      oilCrudeStored : 0,
      oilCrudeTotal : 0,
      oreRawImported : 0,
      oreRawHarvested : 0,
      oreRawExported : 0,
      oreRawConsumedByProducer : 0,
      oreRawCapacity : 0,
      oreRawStored : 0,
      oreRawTotal : 0,
      plasticImported : 0,
      plasticAssembled : 0,
      plasticExported : 0,
      plasticConsumedByProducer : 0,
      plasticCapacity : 0,
      plasticStored : 0,
      plasticTotal : 0,
      televisionImported : 0,
      televisionAssembled : 0,
      televisionExported : 0,
      televisionConsumedByProducer : 0,
      televisionCapacity : 0,
      televisionStored : 0,
      televisionTotal : 0
    },
    visualizedData : {
      giftableSimoleons : {
        uiKey : simcity.kResourceUIKeys.GiftableSimoleons,
        amount : -1,
        changed : !1
      },
      alloyStored : {
        uiKey : simcity.kResourceUIKeys.AlloyStored,
        amount : -1,
        changed : !1
      },
      coalStored : {
        uiKey : simcity.kResourceUIKeys.CoalStored,
        amount : -1,
        changed : !1
      },
      computerStored : {
        uiKey : simcity.kResourceUIKeys.ComputerStored,
        amount : -1,
        changed : !1
      },
      electronicsStored : {
        uiKey : simcity.kResourceUIKeys.ElectronicsStored,
        amount : -1,
        changed : !1
      },
      fuelStored : {
        uiKey : simcity.kResourceUIKeys.FuelStored,
        amount : -1,
        changed : !1
      },
      metalStored : {
        uiKey : simcity.kResourceUIKeys.MetalStored,
        amount : -1,
        changed : !1
      },
      oilCrudeStored : {
        uiKey : simcity.kResourceUIKeys.OilCrudeStored,
        amount : -1,
        changed : !1
      },
      oreRawStored : {
        uiKey : simcity.kResourceUIKeys.OreRawStored,
        amount : -1,
        changed : !1
      },
      plasticStored : {
        uiKey : simcity.kResourceUIKeys.PlasticStored,
        amount : -1,
        changed : !1
      },
      televisionStored : {
        uiKey : simcity.kResourceUIKeys.TelevisionStored,
        amount : -1,
        changed : !1
      }
    },
    queries : function (a, b) {
      return b ? {
        simoleons : [simcity.kDataBinAmount, simcity.kResourceIDSimoleons],
        numImExT1 : [simcity.kDataBinAmount, simcity.kResourceIDNumImEx],
        numImExT2 : [simcity.kDataBinAmount, simcity.kResourceIDNumImExT2],
        numImExT2Rail : [simcity.kDataBinAmount, simcity.kResourceIDNumImExT2Rail],
        numImExT2Boat : [simcity.kDataBinAmount, simcity.kResourceIDNumImExT2Boat],
        alloyImported : [simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingAlloyImported],
        alloyAssembled : [simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingAlloyAssembled],
        alloyExported : [simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingAlloyExported],
        alloyConsumedByProducer : [simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingAlloyConsumedByProducer],
        alloyCapacity : [simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingAlloyCapacity],
        alloyStored : [simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingAlloyStored],
        coalImported : [simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingCoalImported],
        coalHarvested : [simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingCoalHarvested],
        coalExported : [simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingCoalExported],
        coalConsumed : [simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingCoalConsumed],
        coalCapacity : [simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingCoalCapacity],
        coalStored : [simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingCoalStored],
        computerImported : [simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingComputerImported],
        computerAssembled : [simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingComputerAssembled],
        computerExported : [simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingComputerExported],
        computerConsumedByProducer : [simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingComputerConsumedByProducer],
        computerCapacity : [simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingComputerCapacity],
        computerStored : [simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingComputerStored],
        electronicsImported : [simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingElectronicsImported],
        electronicsAssembled : [simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingElectronicsAssembled],
        electronicsExported : [simcity.kDataBinAmount,
          simcity.kResourceIDTradeTrackingElectronicsExported],
        electronicsConsumedByProducer : [simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingElectronicsConsumedByProducer],
        electronicsCapacity : [simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingElectronicsCapacity],
        electronicsStored : [simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingElectronicsStored],
        fuelImported : [simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingFuelImported],
        fuelAssembled : [simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingFuelAssembled],
        fuelExported : [simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingFuelExported],
        fuelConsumedByProducer : [simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingFuelConsumedByProducer],
        fuelCapacity : [simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingFuelCapacity],
        fuelStored : [simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingFuelStored],
        metalImported : [simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingMetalImported],
        metalAssembled : [simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingMetalAssembled],
        metalExported : [simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingMetalExported],
        metalConsumedByProducer : [simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingMetalConsumedByProducer],
        metalCapacity : [simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingMetalStored],
        metalStored : [simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingMetalStored],
        oilCrudeImported : [simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingOilCrudeImported],
        oilCrudeHarvested : [simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingOilCrudeHarvested],
        oilCrudeExported : [simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingOilCrudeExported],
        oilCrudeConsumed : [simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingOilCrudeConsumed],
        oilCrudeCapacity : [simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingOilCrudeCapacity],
        oilCrudeStored : [simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingOilCrudeStored],
        oreRawImported : [simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingOreRawImported],
        oreRawHarvested : [simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingOreRawHarvested],
        oreRawExported : [simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingOreRawExported],
        oreRawConsumedByProducer : [simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingOreRawConsumedByProducer],
        oreRawCapacity : [simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingOreRawCapacity],
        oreRawStored : [simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingOreRawStored],
        plasticImported : [simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingPlasticImported],
        plasticAssembled : [simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingPlasticAssembled],
        plasticExported : [simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingPlasticExported],
        plasticConsumedByProducer : [simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingPlasticConsumedByProducer],
        plasticCapacity : [simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingPlasticCapacity],
        plasticStored : [simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingPlasticStored],
        televisionImported : [simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingTelevisionImported],
        televisionAssembled : [simcity.kDataBinAmount,
          simcity.kResourceIDTradeTrackingTelevisionAssembled],
        televisionExported : [simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingTelevisionExported],
        televisionConsumedByProducer : [simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingTelevisionConsumedByProducer],
        televisionCapacity : [simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingTelevisionCapacity],
        televisionStored : [simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingTelevisionStored]
      }
       : {
        simoleons : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount,
          simcity.kResourceIDTradeTrackingSimoleons],
        numImExT1 : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingNumImEx],
        numImExT2 : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingNumImExT2],
        numImExT2Rail : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingNumImExT2Rail],
        numImExT2Boat : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingNumImExT2Boat],
        alloyImported : [simcity.kDataRegionUnits,
          a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingAlloyImported],
        alloyAssembled : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingAlloyAssembled],
        alloyExported : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingAlloyExported],
        alloyConsumedByProducer : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingAlloyConsumedByProducer],
        alloyCapacity : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingAlloyCapacity],
        alloyStored : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingAlloyStored],
        coalImported : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingCoalImported],
        coalHarvested : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingCoalHarvested],
        coalExported : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingCoalExported],
        coalConsumed : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount,
          simcity.kResourceIDTradeTrackingCoalConsumed],
        coalCapacity : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingCoalCapacity],
        coalStored : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingCoalStored],
        computerImported : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingComputerImported],
        computerAssembled : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingComputerAssembled],
        computerExported : [simcity.kDataRegionUnits,
          a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingComputerExported],
        computerConsumedByProducer : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingComputerConsumedByProducer],
        computerCapacity : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingComputerCapacity],
        computerStored : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingComputerStored],
        electronicsImported : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount,
          simcity.kResourceIDTradeTrackingElectronicsImported],
        electronicsAssembled : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingElectronicsAssembled],
        electronicsExported : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingElectronicsExported],
        electronicsConsumedByProducer : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingElectronicsConsumedByProducer],
        electronicsCapacity : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount,
          simcity.kResourceIDTradeTrackingElectronicsCapacity],
        electronicsStored : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingElectronicsStored],
        fuelImported : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingFuelImported],
        fuelAssembled : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingFuelAssembled],
        fuelExported : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingFuelExported],
        fuelConsumedByProducer : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingFuelConsumedByProducer],
        fuelCapacity : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingFuelCapacity],
        fuelStored : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingFuelStored],
        metalImported : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingMetalImported],
        metalAssembled : [simcity.kDataRegionUnits, a,
          simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingMetalAssembled],
        metalExported : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingMetalExported],
        metalConsumedByProducer : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingMetalConsumedByProducer],
        metalCapacity : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingMetalCapacity],
        metalStored : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingMetalStored],
        oilCrudeImported : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingOilCrudeImported],
        oilCrudeHarvested : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingOilCrudeHarvested],
        oilCrudeExported : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingOilCrudeExported],
        oilCrudeConsumed : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingOilCrudeConsumed],
        oilCrudeCapacity : [simcity.kDataRegionUnits,
          a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingOilCrudeCapacity],
        oilCrudeStored : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingOilCrudeStored],
        oreRawImported : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingOreRawImported],
        oreRawHarvested : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingOreRawHarvested],
        oreRawExported : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingOreRawExported],
        oreRawConsumedByProducer : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingOreRawConsumedByProducer],
        oreRawCapacity : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingOreRawCapacity],
        oreRawStored : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingOreRawStored],
        plasticImported : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingPlasticImported],
        plasticAssembled : [simcity.kDataRegionUnits,
          a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingPlasticAssembled],
        plasticExported : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingPlasticExported],
        plasticConsumedByProducer : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingPlasticConsumedByProducer],
        plasticCapacity : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingPlasticCapacity],
        plasticStored : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount,
          simcity.kResourceIDTradeTrackingPlasticStored],
        televisionImported : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingTelevisionImported],
        televisionAssembled : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingTelevisionAssembled],
        televisionExported : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingTelevisionExported],
        televisionConsumedByProducer : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingTelevisionConsumedByProducer],
        televisionCapacity : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingTelevisionCapacity],
        televisionStored : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingTelevisionStored]
      }
    },
    update : function (a) {
      this.data.simoleons = a.simoleons;
      this.data.numberOfTruckLots = a.numImExT1 + a.numImExT2;
      this.data.numberOfRailLots = a.numImExT2Rail;
      this.data.numberOfBoatLots = a.numImExT2Boat;
      this.data.alloyImported = a.alloyImported;
      this.data.alloyAssembled = a.alloyAssembled;
      this.data.alloyExported = a.alloyExported;
      this.data.alloyConsumedByProducer = a.alloyConsumedByProducer;
      this.data.alloyCapacity = a.alloyCapacity;
      this.data.alloyStored = a.alloyStored;
      this.data.alloyTotal = Math.max(0, a.alloyImported + a.alloyAssembled - (a.alloyExported + a.alloyConsumedByProducer));
      this.data.coalImported = a.coalImported;
      this.data.coalHarvested = a.coalHarvested;
      this.data.coalExported = a.coalExported;
      this.data.coalConsumed = a.coalConsumed;
      this.data.coalCapacity = a.coalCapacity;
      this.data.coalStored = a.coalStored;
      this.data.coalTotal = Math.max(0, a.coalImported + a.coalHarvested - (a.coalExported + a.coalConsumed));
      this.data.computerImported = a.computerImported;
      this.data.computerAssembled = a.computerAssembled;
      this.data.computerExported = a.computerExported;
      this.data.computerConsumedByProducer = a.computerConsumedByProducer;
      this.data.computerCapacity = a.computerCapacity;
      this.data.computerStored = a.computerStored;
      this.data.computerTotal = Math.max(0, a.computerImported + a.computerAssembled - (a.computerExported + a.computerConsumedByProducer));
      this.data.electronicsImported = a.electronicsImported;
      this.data.electronicsAssembled = a.electronicsAssembled;
      this.data.electronicsExported = a.electronicsExported;
      this.data.electronicsConsumedByProducer = a.electronicsConsumedByProducer;
      this.data.electronicsCapacity = a.electronicsCapacity;
      this.data.electronicsStored = a.electronicsStored;
      this.data.electronicsTotal = Math.max(0, a.electronicsImported + a.electronicsAssembled - (a.electronicsExported + a.electronicsConsumedByProducer));
      this.data.fuelImported = a.fuelImported;
      this.data.fuelAssembled = a.fuelAssembled;
      this.data.fuelExported = a.fuelExported;
      this.data.fuelConsumedByProducer = a.fuelConsumedByProducer;
      this.data.fuelCapacity = a.fuelCapacity;
      this.data.fuelStored = a.fuelStored;
      this.data.fuelTotal = Math.max(0, a.fuelImported + a.fuelAssembled - (a.fuelExported + a.fuelConsumedByProducer));
      this.data.metalImported = a.metalImported;
      this.data.metalAssembled = a.metalAssembled;
      this.data.metalExported = a.metalExported;
      this.data.metalConsumedByProducer = a.metalConsumedByProducer;
      this.data.metalCapacity =
        a.metalCapacity;
      this.data.metalStored = a.metalStored;
      this.data.metalTotal = Math.max(0, a.metalImported + a.metalAssembled - (a.metalExported + a.metalConsumedByProducer));
      this.data.oilCrudeImported = a.oilCrudeImported;
      this.data.oilCrudeHarvested = a.oilCrudeHarvested;
      this.data.oilCrudeExported = a.oilCrudeExported;
      this.data.oilCrudeConsumed = a.oilCrudeConsumed;
      this.data.oilCrudeCapacity = a.oilCrudeCapacity;
      this.data.oilCrudeStored = a.oilCrudeStored;
      this.data.oilCrudeTotal = Math.max(0, a.oilCrudeImported + a.oilCrudeHarvested -
          (a.oilCrudeExported + a.oilCrudeConsumed));
      this.data.oreRawImported = a.oreRawImported;
      this.data.oreRawHarvested = a.oreRawHarvested;
      this.data.oreRawExported = a.oreRawExported;
      this.data.oreRawConsumedByProducer = a.oreRawConsumedByProducer;
      this.data.oreRawCapacity = a.oreRawCapacity;
      this.data.oreRawStored = a.oreRawStored;
      this.data.oreRawTotal = Math.max(0, a.oreRawImported + a.oreRawHarvested - (a.oreRawExported + a.oreRawConsumedByProducer));
      this.data.plasticImported = a.plasticImported;
      this.data.plasticAssembled = a.plasticAssembled;
      this.data.plasticExported = a.plasticExported;
      this.data.plasticConsumedByProducer = a.plasticConsumedByProducer;
      this.data.plasticCapacity = a.plasticCapacity;
      this.data.plasticStored = a.plasticStored;
      this.data.plasticTotal = Math.max(0, a.plasticImported + a.plasticAssembled - (a.plasticExported + a.plasticConsumedByProducer));
      this.data.televisionImported = a.televisionImported;
      this.data.televisionAssembled = a.televisionAssembled;
      this.data.televisionExported = a.televisionExported;
      this.data.televisionConsumedByProducer =
        a.televisionConsumedByProducer;
      this.data.televisionCapacity = a.televisionCapacity;
      this.data.televisionStored = a.televisionStored;
      this.data.televisionTotal = Math.max(0, a.televisionImported + a.televisionAssembled - (a.televisionExported + a.televisionConsumedByProducer));
      simcity.UpdateVisualizedData(this.visualizedData.giftableSimoleons, this.data.simoleons);
      simcity.UpdateVisualizedData(this.visualizedData.alloyStored, simcity.FormatLargeNumberByType(this.data.alloyStored, simcity.NumberFormat.Tons).number);
      simcity.UpdateVisualizedData(this.visualizedData.coalStored,
        simcity.FormatLargeNumberByType(this.data.coalStored, simcity.NumberFormat.Tons).number);
      simcity.UpdateVisualizedData(this.visualizedData.computerStored, simcity.FormatLargeNumberByType(this.data.computerStored, simcity.NumberFormat.Units).number);
      simcity.UpdateVisualizedData(this.visualizedData.electronicsStored, simcity.FormatLargeNumberByType(this.data.electronicsStored, simcity.NumberFormat.Units).number);
      simcity.UpdateVisualizedData(this.visualizedData.fuelStored, simcity.FormatLargeNumberByType(this.data.fuelStored,
          simcity.NumberFormat.Barrels).number);
      simcity.UpdateVisualizedData(this.visualizedData.metalStored, simcity.FormatLargeNumberByType(this.data.metalStored, simcity.NumberFormat.Tons).number);
      simcity.UpdateVisualizedData(this.visualizedData.oilCrudeStored, simcity.FormatLargeNumberByType(this.data.oilCrudeStored, simcity.NumberFormat.Barrels).number);
      simcity.UpdateVisualizedData(this.visualizedData.oreRawStored, simcity.FormatLargeNumberByType(this.data.oreRawStored, simcity.NumberFormat.Tons).number);
      simcity.UpdateVisualizedData(this.visualizedData.plasticStored,
        simcity.FormatLargeNumberByType(this.data.plasticStored, simcity.NumberFormat.Units).number);
      simcity.UpdateVisualizedData(this.visualizedData.televisionStored, simcity.FormatLargeNumberByType(this.data.televisionStored, simcity.NumberFormat.Units).number)
    }
  }
};
simcity.kRegionalCitiesGiftableResourcesArrows = function () {
  return {
    type : "GiftableResourcesArrows",
    importIconPath : "Graphics/Trade/tradeWall_icon_shoppers_import.png",
    exportIconPath : "Graphics/Trade/tradeWall_icon_shoppers_export.png",
    amountMultiplier : 1,
    data : {
      giftedSimoleons : 0,
      giftedAlloy : 0,
      giftedCoal : 0,
      giftedComputers : 0,
      giftedElectronics : 0,
      giftedFuel : 0,
      giftedMetal : 0,
      giftedOilCrude : 0,
      giftedOreRaw : 0,
      giftedPlastic : 0,
      giftedTelevision : 0
    },
    visualizedTradeData : {
      giftedSimoleons : {
        uiKey : simcity.kResourceUIKeys.SimoleonsGifted,
        amount : -1,
        changed : !1
      },
      giftedAlloy : {
        uiKey : simcity.kResourceUIKeys.AlloyGifted,
        amount : -1,
        changed : !1
      },
      giftedCoal : {
        uiKey : simcity.kResourceUIKeys.CoalGifted,
        amount : -1,
        changed : !1
      },
      giftedComputers : {
        uiKey : simcity.kResourceUIKeys.ComputerGifted,
        amount : -1,
        changed : !1
      },
      giftedElectronics : {
        uiKey : simcity.kResourceUIKeys.ElectronicsGifted,
        amount : -1,
        changed : !1
      },
      giftedFuel : {
        uiKey : simcity.kResourceUIKeys.FuelGifted,
        amount : -1,
        changed : !1
      },
      giftedMetal : {
        uiKey : simcity.kResourceUIKeys.MetalGifted,
        amount : -1,
        changed : !1
      },
      giftedOilCrude : {
        uiKey : simcity.kResourceUIKeys.OilCrudeGifted,
        amount : -1,
        changed : !1
      },
      giftedOreRaw : {
        uiKey : simcity.kResourceUIKeys.OreRawGifted,
        amount : -1,
        changed : !1
      },
      giftedPlastic : {
        uiKey : simcity.kResourceUIKeys.PlasticGifted,
        amount : -1,
        changed : !1
      },
      giftedTelevision : {
        uiKey : simcity.kResourceUIKeys.TelevisionGifted,
        amount : -1,
        changed : !1
      }
    },
    queries : function (a, b, c, d, e) {
      this.amountMultiplier = 1;
      if (d && e)
        return {
          giftedSimoleons : [simcity.kDataUnits, e, simcity.kDataBinAmount, simcity.kResourceIDSimoleons],
          giftedAlloy : [simcity.kDataUnits, e, simcity.kDataBinAmount, simcity.kResourceIDAlloy],
          giftedCoal : [simcity.kDataUnits, e, simcity.kDataBinAmount, simcity.kResourceIDCoal],
          giftedComputers : [simcity.kDataUnits, e, simcity.kDataBinAmount, simcity.kResourceIDComputer],
          giftedElectronics : [simcity.kDataUnits, e, simcity.kDataBinAmount, simcity.kResourceIDElectronics],
          giftedFuel : [simcity.kDataUnits, e, simcity.kDataBinAmount, simcity.kResourceIDFuel],
          giftedMetal : [simcity.kDataUnits, e, simcity.kDataBinAmount, simcity.kResourceIDMetal],
          giftedOilCrude : [simcity.kDataUnits, e, simcity.kDataBinAmount, simcity.kResourceIDOilCrude],
          giftedOreRaw : [simcity.kDataUnits, e, simcity.kDataBinAmount, simcity.kResourceIDOreRaw],
          giftedPlastic : [simcity.kDataUnits, e, simcity.kDataBinAmount, simcity.kResourceIDPlastic],
          giftedTelevision : [simcity.kDataUnits, e, simcity.kDataBinAmount, simcity.kResourceIDTelevision]
        };
      if (b)
        return this.amountMultiplier = 1E4, {
          giftedSimoleons : [simcity.kDataUnits, c, simcity.kDataBinAmount, simcity.kResourceIDTradeGiftSimoleonsSize],
          giftedAlloy : [simcity.kDataUnits, c, simcity.kDataBinAmount, simcity.kResourceIDAlloyTransportToSend],
          giftedCoal : [simcity.kDataUnits, c, simcity.kDataBinAmount, simcity.kResourceIDCoalTransportToSend],
          giftedComputers : [simcity.kDataUnits, c, simcity.kDataBinAmount, simcity.kResourceIDComputerTransportToSend],
          giftedElectronics : [simcity.kDataUnits, c, simcity.kDataBinAmount, simcity.kResourceIDElectronicsTransportToSend],
          giftedFuel : [simcity.kDataUnits, c, simcity.kDataBinAmount, simcity.kResourceIDFuelTransportToSend],
          giftedMetal : [simcity.kDataUnits, c, simcity.kDataBinAmount, simcity.kResourceIDMetalTransportToSend],
          giftedOilCrude : [simcity.kDataUnits, c, simcity.kDataBinAmount, simcity.kResourceIDOilCrudeTransportToSend],
          giftedOreRaw : [simcity.kDataUnits, c, simcity.kDataBinAmount, simcity.kResourceIDOreRawTransportToSend],
          giftedPlastic : [simcity.kDataUnits, c, simcity.kDataBinAmount, simcity.kResourceIDPlasticTransportToSend],
          giftedTelevision : [simcity.kDataUnits, c, simcity.kDataBinAmount, simcity.kResourceIDTelevisionTransportToSend]
        }
    },
    update : function (a) {
      this.data.giftedSimoleons = a.giftedSimoleons ? a.giftedSimoleons : 0;
      this.data.giftedAlloy =
        a.giftedAlloy ? a.giftedAlloy : 0;
      this.data.giftedCoal = a.giftedCoal ? a.giftedCoal : 0;
      this.data.giftedComputers = a.giftedComputers ? a.giftedComputers : 0;
      this.data.giftedFuel = a.giftedFuel ? a.giftedFuel : 0;
      this.data.giftedMetal = a.giftedMetal ? a.giftedMetal : 0;
      this.data.giftedOilCrude = a.giftedOilCrude ? a.giftedOilCrude : 0;
      this.data.giftedOreRaw = a.giftedOreRaw ? a.giftedOreRaw : 0;
      this.data.giftedPlastic = a.giftedPlastic ? a.giftedPlastic : 0;
      this.data.giftedTelevision = a.giftedTelevision ? a.giftedTelevision : 0;
      this.data.giftedAlloy =
        simcity.FormatLargeNumberByType(this.data.giftedAlloy * this.amountMultiplier, simcity.NumberFormat.Tons).number;
      this.data.giftedCoal = simcity.FormatLargeNumberByType(this.data.giftedCoal * this.amountMultiplier, simcity.NumberFormat.Tons).number;
      this.data.giftedComputers = simcity.FormatLargeNumberByType(this.data.giftedComputers * this.amountMultiplier, simcity.NumberFormat.Units).number;
      this.data.giftedElectronics = simcity.FormatLargeNumberByType(this.data.giftedElectronics * this.amountMultiplier, simcity.NumberFormat.Units).number;
      this.data.giftedFuel = simcity.FormatLargeNumberByType(this.data.giftedFuel * this.amountMultiplier, simcity.NumberFormat.Barrels).number;
      this.data.giftedMetal = simcity.FormatLargeNumberByType(this.data.giftedMetal * this.amountMultiplier, simcity.NumberFormat.Tons).number;
      this.data.giftedOilCrude = simcity.FormatLargeNumberByType(this.data.giftedOilCrude * this.amountMultiplier, simcity.NumberFormat.Barrels).number;
      this.data.giftedOreRaw = simcity.FormatLargeNumberByType(this.data.giftedOreRaw * this.amountMultiplier,
          simcity.NumberFormat.Tons).number;
      this.data.giftedPlastic = simcity.FormatLargeNumberByType(this.data.giftedPlastic * this.amountMultiplier, simcity.NumberFormat.Units).number;
      this.data.giftedTelevision = simcity.FormatLargeNumberByType(this.data.giftedTelevision * this.amountMultiplier, simcity.NumberFormat.Units).number;
      simcity.UpdateVisualizedData(this.visualizedTradeData.giftedSimoleons, this.data.giftedSimoleons);
      simcity.UpdateVisualizedData(this.visualizedTradeData.giftedAlloy, this.data.giftedAlloy);
      simcity.UpdateVisualizedData(this.visualizedTradeData.giftedCoal,
        this.data.giftedCoal);
      simcity.UpdateVisualizedData(this.visualizedTradeData.giftedComputers, this.data.giftedComputers);
      simcity.UpdateVisualizedData(this.visualizedTradeData.giftedElectronics, this.data.giftedElectronics);
      simcity.UpdateVisualizedData(this.visualizedTradeData.giftedFuel, this.data.giftedFuel);
      simcity.UpdateVisualizedData(this.visualizedTradeData.giftedMetal, this.data.giftedMetal);
      simcity.UpdateVisualizedData(this.visualizedTradeData.giftedOilCrude, this.data.giftedOilCrude);
      simcity.UpdateVisualizedData(this.visualizedTradeData.giftedOreRaw,
        this.data.giftedOreRaw);
      simcity.UpdateVisualizedData(this.visualizedTradeData.giftedPlastic, this.data.giftedPlastic);
      simcity.UpdateVisualizedData(this.visualizedTradeData.giftedTelevision, this.data.giftedTelevision)
    }
  }
};
simcity.kRegionalCitiesResourceTradeTokens = function () {
  return {
    type : "tradeTokens",
    data : {
      healthToken : 0,
      healthTokenPending : -1,
      fireToken : 0,
      fireTokenPending : -1,
      policeToken : 0,
      policeTokenPending : -1,
      garbageToken : 0,
      garbageTokenPending : -1
    },
    queries : function (a) {
      return {
        healthToken : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDHealthServiceToken],
        fireToken : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDFireServiceToken],
        policeToken : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount,
          simcity.kResourceIDPoliceServiceToken],
        garbageToken : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDGarbageServiceToken]
      }
    },
    update : function (a) {
      this.data.healthToken = a.healthToken;
      this.data.fireToken = a.fireToken;
      this.data.policeToken = a.policeToken;
      this.data.garbageToken = a.garbageToken;
      this.data.healthTokenPending == this.data.healthToken && (this.data.healthTokenPending = -1);
      this.data.fireTokenPending == this.data.fireToken && (this.data.fireTokenPending = -1);
      this.data.policeTokenPending ==
      this.data.policeToken && (this.data.policeTokenPending = -1);
      this.data.garbageTokenPending == this.data.garbageToken && (this.data.garbageTokenPending = -1)
    }
  }
};
simcity.kRegionalCitiesResourceRegionTotals = {
  type : "regionTotals",
  data : {
    totals : {
      workers : 0,
      importedResidents : 0,
      importedResidentsW1 : 0,
      importedResidentsW2 : 0,
      importedResidentsW3 : 0,
      importedJobs : 0,
      importedJobsW1 : 0,
      importedJobsW2 : 0,
      importedJobsW3 : 0,
      unemployedW1 : 0,
      unemployedW2 : 0,
      unemployedW3 : 0,
      importedShoppers : 0,
      importedShoppersNeeded : 0,
      importedFreightConsumer : 0,
      importedFreightProducer : 0,
      importedKid : 0,
      importedStudents : 0
    }
  },
  clear : function () {
    for (var a in this.data.totals)
      this.data.totals[a] = 0
  },
  update : function (a) {
    if (a.data.totals)
      for (var b in this.data.totals)
        a.data.totals.hasOwnProperty(b) &&
        (this.data.totals[b] += a.data.totals[b])
  }
};
simcity.kRegionalCitiesLocalData = function () {
  return {
    type : "localData",
    data : {
      mayorRating : 0,
      budget : 0,
      population : 0
    },
    queries : function (a, b) {
      return b ? {
        mayorRating : [simcity.kDataBinAmount, simcity.kResourceIDHappinessGlobals_MayorRating],
        budget : [simcity.kDataBinAmount, simcity.kResourceIDSimoleons],
        population : [simcity.kDataBinAmount, simcity.kResourceIDTotalResidential]
      }
       : {
        mayorRating : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingMayorRating],
        budget : [simcity.kDataRegionUnits,
          a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingSimoleons],
        population : [simcity.kDataRegionUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeTrackingTotalResidential]
      }
    },
    update : function (a) {
      this.data.mayorRating = a.mayorRating;
      this.data.budget = a.budget;
      this.data.population = a.population
    }
  }
};
simcity.kRegionDataLayers_ContextPanels = [];
simcity.kRegionDataLayers_ContextPanels[simcity.kRegionDataLayer_Workers] = {
  layout : "Layouts/Region/DataContextPanel_Workers.js",
  cityToolPanelID : simcity.kCategoryIDZones,
  connectionData : [new simcity.kRegionalCitiesResourceResidential],
  advisor : simcity.RegionalAdvisors.workers,
  heavyLayers : [simcity.kRegionDataLayer_WorkerLevels[0], simcity.kRegionDataLayer_WorkerLevels[1], simcity.kRegionDataLayer_WorkerLevels[2]]
};
simcity.kRegionDataLayers_ContextPanels[simcity.kRegionDataLayer_Shoppers] = {
  layout : "Layouts/Region/DataContextPanel_Shoppers.js",
  cityToolPanelID : simcity.kCategoryIDZones,
  connectionData : [new simcity.kRegionalCitiesResourceCommercial],
  advisor : simcity.RegionalAdvisors.shopppers,
  heavyLayers : [simcity.kRegionDataLayer_ShopperLevels[0], simcity.kRegionDataLayer_ShopperLevels[1], simcity.kRegionDataLayer_ShopperLevels[2]]
};
simcity.kRegionDataLayers_ContextPanels[simcity.kRegionDataLayer_Freight] = {
  layout : "Layouts/Region/DataContextPanel_Freight.js",
  cityToolPanelID : simcity.kCategoryIDZones,
  connectionData : [new simcity.kRegionalCitiesResourceIndustrial],
  advisor : simcity.RegionalAdvisors.freight,
  heavyLayers : [simcity.kRegionDataLayer_FreightLevels[0]]
};
simcity.kRegionDataLayers_ContextPanels[simcity.kRegionDataLayer_Students] = {
  layout : "Layouts/Region/DataContextPanel_Education.js",
  cityToolPanelID : simcity.kCategoryIDEducation,
  connectionData : [new simcity.kRegionalCitiesResourceStudents],
  advisor : simcity.RegionalAdvisors.students,
  heavyLayers : [simcity.kRegionDataLayer_StudentLevels[0]]
};
simcity.kRegionDataLayers_ContextPanels[simcity.kRegionDataLayer_Power] = {
  layout : "Layouts/Region/DataContextPanel_Power.js",
  cityToolPanelID : simcity.kCategoryIDPower,
  tradeType : "trade",
  utilityType : "Power",
  connectionData : [new simcity.kRegionalCitiesResourcePower],
  advisor : simcity.RegionalAdvisors.power,
  heavyLayers : [simcity.kRegionDataLayer_PowerLevels[0]]
};
simcity.kRegionDataLayers_ContextPanels[simcity.kRegionDataLayer_Water] = {
  layout : "Layouts/Region/DataContextPanel_Water.js",
  cityToolPanelID : simcity.kCategoryIDWater,
  tradeType : "trade",
  utilityType : "Water",
  connectionData : [new simcity.kRegionalCitiesResourceWater],
  advisor : simcity.RegionalAdvisors.water,
  heavyLayers : [simcity.kRegionDataLayer_WaterLevels[0]]
};
simcity.kRegionDataLayers_ContextPanels[simcity.kRegionDataLayer_Sewage] = {
  layout : "Layouts/Region/DataContextPanel_Sewage.js",
  cityToolPanelID : simcity.kCategoryIDSewage,
  tradeType : "trade",
  utilityType : "Sewage",
  connectionData : [new simcity.kRegionalCitiesResourceSewage],
  advisor : simcity.RegionalAdvisors.sewage,
  heavyLayers : [simcity.kRegionDataLayer_SewageLevels[0]]
};
simcity.kRegionDataLayers_ContextPanels[simcity.kRegionDataLayer_Garbage] = {
  layout : "Layouts/Region/DataContextPanel_Garbage.js",
  cityToolPanelID : simcity.kCategoryIDGarbage,
  tradeType : "token",
  tokenType : "garbage",
  connectionData : [new simcity.kRegionalCitiesResourceGarbage, new simcity.kRegionalCitiesResourceTradeTokens],
  advisor : simcity.RegionalAdvisors.garbage,
  getServiceVehicles : function () {
    return [simcity.kServiceVehicleGarbageTruckR1, simcity.kServiceVehicleRecyclingTruckR2]
  },
  getServiceString : function () {
    return new scrui.cLocaleString("RegionSystemInfo.json",
      "0x0ea638c0", "Garbage")
  },
  getServiceDestinationString : function () {
    return new scrui.cLocaleString("RegionSystemInfo.json", "0x0ee2b57f", "Garbage to city")
  },
  getCurrentValueQueries : function () {
    var a = [];
    a.push(scrui.BuildRequestQuery([simcity.kDataBinAmount, simcity.kResourceIDTradeExcessGarbageTruckR1]));
    a.push(scrui.BuildRequestQuery([simcity.kDataBinAmount, simcity.kResourceIDGarbageTruckR1]));
    a.push(scrui.BuildRequestQuery([simcity.kDataBinAmount, simcity.kResourceIDTradeExcessRecyclingTruckR2]));
    a.push(scrui.BuildRequestQuery([simcity.kDataBinAmount,
          simcity.kResourceIDRecyclingTruckR2]));
    return a
  },
  heavyLayers : [simcity.kRegionDataLayer_GarbageLevels[0]]
};
simcity.kRegionDataLayers_ContextPanels[simcity.kRegionDataLayer_Fire] = {
  layout : "Layouts/Region/DataContextPanel_Fire.js",
  cityToolPanelID : simcity.kCategoryIDFire,
  tradeType : "token",
  tokenType : "fire",
  connectionData : [new simcity.kRegionalCitiesResourceFire, new simcity.kRegionalCitiesResourceTradeTokens],
  advisor : simcity.RegionalAdvisors.fire,
  getServiceVehicles : function () {
    return [simcity.kServiceVehicleFireTruckR1, simcity.kServiceVehicleFireTruckR2, simcity.kServiceVehicleHazMatTruckR2, simcity.kServiceVehicleFireInspectorR2,
      simcity.kServiceVehicleFireHelicopterR2]
  },
  getServiceString : function () {
    return new scrui.cLocaleString("RegionSystemInfo.json", "0x0eae31d4", "Fire")
  },
  getServiceDestinationString : function () {
    return new scrui.cLocaleString("RegionSystemInfo.json", "0x0ee2b595", "Fire to city")
  },
  getCurrentValueQueries : function () {
    var a = [];
    a.push(scrui.BuildRequestQuery([simcity.kDataBinAmount, simcity.kResourceIDExcessFireTruckR1]));
    a.push(scrui.BuildRequestQuery([simcity.kDataBinAmount, simcity.kResourceIDFireTruckR1]));
    a.push(scrui.BuildRequestQuery([simcity.kDataBinAmount,
          simcity.kResourceIDExcessFireTruckR2]));
    a.push(scrui.BuildRequestQuery([simcity.kDataBinAmount, simcity.kResourceIDFireTruckR2]));
    a.push(scrui.BuildRequestQuery([simcity.kDataBinAmount, simcity.kResourceIDExcessHazMatTruckR2]));
    a.push(scrui.BuildRequestQuery([simcity.kDataBinAmount, simcity.kResourceIDHazMatTruckR2]));
    a.push(scrui.BuildRequestQuery([simcity.kDataBinAmount, simcity.kResourceIDTradeExcessFireInspectorR2]));
    a.push(scrui.BuildRequestQuery([simcity.kDataBinAmount, simcity.kResourceIDFireInspectorR2]));
    a.push(scrui.BuildRequestQuery([simcity.kDataBinAmount, simcity.kResourceIDTradeExcessFireHelicopterR2]));
    a.push(scrui.BuildRequestQuery([simcity.kDataBinAmount, simcity.kResourceIDFireHelicopterR2]));
    return a
  },
  heavyLayers : [simcity.kRegionDataLayer_FireLevels[0]]
};
simcity.kRegionDataLayers_ContextPanels[simcity.kRegionDataLayer_Police] = {
  layout : "Layouts/Region/DataContextPanel_Police.js",
  cityToolPanelID : simcity.kCategoryIDPolice,
  tradeType : "token",
  tokenType : "police",
  connectionData : [new simcity.kRegionalCitiesResourceCrime, new simcity.kRegionalCitiesResourceTradeTokens],
  advisor : simcity.RegionalAdvisors.crime,
  getServiceVehicles : function () {
    return [simcity.kServiceVehiclePoliceCarR1, simcity.kServiceVehiclePoliceDetectiveVanR2, simcity.kServiceVehiclePoliceOutreachVanR2,
      simcity.kServiceVehiclePoliceHelicopterR2]
  },
  getServiceString : function () {
    return new scrui.cLocaleString("RegionSystemInfo.json", "0x0ea638c1", "Police")
  },
  getServiceDestinationString : function () {
    return new scrui.cLocaleString("RegionSystemInfo.json", "0x0ee2b587", "Police to city")
  },
  getCurrentValueQueries : function () {
    var a = [];
    a.push(scrui.BuildRequestQuery([simcity.kDataBinAmount, simcity.kResourceIDTradeExcessPoliceCarR1]));
    a.push(scrui.BuildRequestQuery([simcity.kDataBinAmount, simcity.kResourceIDPoliceCarR1]));
    a.push(scrui.BuildRequestQuery([simcity.kDataBinAmount, simcity.kResourceIDTradeExcessPoliceDetectiveVanR2]));
    a.push(scrui.BuildRequestQuery([simcity.kDataBinAmount, simcity.kResourceIDPoliceDetectiveVanR2]));
    a.push(scrui.BuildRequestQuery([simcity.kDataBinAmount, simcity.kResourceIDTradeExcessPoliceOutreachVanR2]));
    a.push(scrui.BuildRequestQuery([simcity.kDataBinAmount, simcity.kResourceIDPoliceOutreachVanR2]));
    a.push(scrui.BuildRequestQuery([simcity.kDataBinAmount, simcity.kResourceIDTradeExcessPoliceHelicopterR2]));
    a.push(scrui.BuildRequestQuery([simcity.kDataBinAmount, simcity.kResourceIDPoliceHelicopterR2]));
    return a
  },
  heavyLayers : [simcity.kRegionDataLayer_PoliceLevels[0]]
};
simcity.kRegionDataLayers_ContextPanels[simcity.kRegionDataLayer_Health] = {
  layout : "Layouts/Region/DataContextPanel_Health.js",
  cityToolPanelID : simcity.kCategoryIDHealth,
  tradeType : "token",
  tokenType : "health",
  connectionData : [new simcity.kRegionalCitiesResourceHealth, new simcity.kRegionalCitiesResourceTradeTokens],
  advisor : simcity.RegionalAdvisors.health,
  getServiceVehicles : function () {
    return [simcity.kServiceVehicleAmbulanceR1, simcity.kServiceVehicleCommunityOutreachVanR2]
  },
  getServiceString : function () {
    return new scrui.cLocaleString("RegionSystemInfo.json",
      "0x0ea638c2", "Health")
  },
  getServiceDestinationString : function () {
    return new scrui.cLocaleString("RegionSystemInfo.json", "0x0ee2b58f", "Health to city")
  },
  getCurrentValueQueries : function () {
    var a = [];
    a.push(scrui.BuildRequestQuery([simcity.kDataBinAmount, simcity.kResourceIDTradeExcessAmbulanceR1]));
    a.push(scrui.BuildRequestQuery([simcity.kDataBinAmount, simcity.kResourceIDAmbulanceR1]));
    a.push(scrui.BuildRequestQuery([simcity.kDataBinAmount, simcity.kResourceIDTradeExcessCommunityOutreachVanR2]));
    a.push(scrui.BuildRequestQuery([simcity.kDataBinAmount,
          simcity.kResourceIDCommunityOutreachVanR2]));
    return a
  },
  heavyLayers : [simcity.kRegionDataLayer_HealthLevels[0]]
};
simcity.kRegionDataLayers_ContextPanels[simcity.kRegionDataLayer_ResourceGifting] = {
  layout : "Layouts/Region/DataContextPanel_ResourceGifting2.js",
  cityToolPanelID : simcity.kCategoryIDManufacturing,
  tradeType : "gifting",
  giftingType : "resources",
  connectionData : [],
  advisor : simcity.RegionalAdvisors.gifting,
  updateUI : function () {
    var a = simcity.gGlobalUIHandler.mRegionViewUIHandler,
    b = a.mRegionData,
    a = a.mContextPanelObj,
    c = "",
    d = "";
    b.mViewingBox && (c = b.mViewingBox.name, "" === c ? (c = "Regional City", d = "Unclaimed") : d = b.mViewingBox.creator.screenName,
      a.FindControlByID(239380240).SetRawText(c), a.FindControlByID(239380639).SetRawText(d), a.FindControlByID(242575627).SetVisibility(!1), a.FindControlByID(239392898).SetRawText(""), a.FindControlByID(236438205).SetRawText(""), a.FindControlByID(242575614).SetVisibility(!1), a.FindControlByID(239393402).SetRawText(""), a.FindControlByID(236438273).SetRawText(""))
  }
};
simcity.kRegionDataLayers_ContextPanels[simcity.kRegionDataLayer_Transport] = {
  layout : "Layouts/Region/DataContextPanel_Transport.js",
  cityToolPanelID : simcity.kCategoryIDMassTransit,
  tradeType : "transport",
  transportType : "resources",
  connectionData : [new simcity.kRegionalCitiesResourceTransport],
  updateUI : function () {
    var a = simcity.gGlobalUIHandler.mRegionViewUIHandler,
    b = a.mRegionData,
    a = a.mContextPanelObj,
    c = "",
    d = "";
    b.mViewingBox && (c = b.mViewingBox.name, "" === c ? (c = "Regional City", d = "Unclaimed") : d = b.mViewingBox.creator.screenName,
      a.FindControlByID(239380240).SetRawText(c), a.FindControlByID(239380639).SetRawText(d), a.FindControlByID(242575627).SetVisibility(!1), a.FindControlByID(239392898).SetRawText(""), a.FindControlByID(236438205).SetRawText(""), a.FindControlByID(242575614).SetVisibility(!1), a.FindControlByID(239393402).SetRawText(""), a.FindControlByID(236438273).SetRawText(""))
  },
  heavyLayers : [simcity.kRegionDataLayer_TransportLevels[0], simcity.kRegionDataLayer_TransportLevels[1], simcity.kRegionDataLayer_TransportLevels[2],
    simcity.kRegionDataLayer_TransportLevels[3]]
};
simcity.kRegionDataLayers_ContextPanels[simcity.kRegionDataLayer_GreatWorks] = {
  layout : "Layouts/Region/DataContextPanel_GreatWorks.js",
  tradeType : "greatworks",
  greatWorksType : "unused",
  advisor : simcity.RegionalAdvisors.greatwork,
  connectionData : [],
  updateUI : function () {
    var a = simcity.gGlobalUIHandler.mRegionViewUIHandler,
    b = a.mRegionData,
    a = a.mContextPanelObj,
    c = "",
    d = "";
    b.mViewingBox && (c = b.mViewingBox.name, "" === c ? (c = "Regional City", d = "Unclaimed") : d = b.mViewingBox.creator.screenName, a.FindControlByID(239380240).SetRawText(c),
      a.FindControlByID(239380639).SetRawText(d), a.FindControlByID(242575627).SetVisibility(!1), a.FindControlByID(239392898).SetRawText(""), a.FindControlByID(236438205).SetRawText(""), a.FindControlByID(242575614).SetVisibility(!1), a.FindControlByID(239393402).SetRawText(""), a.FindControlByID(236438273).SetRawText(""))
  }
};
simcity.kGiftableResourceAlloy = {
  text : new scrui.cLocaleString("Resources.json", "0x1e16cfe6", "Alloy"),
  amountText : new scrui.cLocaleString("BuildingRollover.json", "0x0e8d4576", "Alloy"),
  formatType : simcity.NumberFormat.Tons,
  legendID : 252160847,
  lightIcon : "Graphics/Icons/TradeIcons/icn-trade-alloy-white.png",
  darkIcon : "Graphics/Icons/TradeIcons/icn-trade-alloy.png",
  scriptIndex : 17,
  resourceID : simcity.kResourceIDAlloy,
  layerID : simcity.kRegionDataLayer_Alloy,
  enRouteQueries : function (a) {
    return [scrui.BuildRequestQuery([simcity.kDataUnits,
          a, simcity.kDataBinAmount, simcity.kResourceIDAlloyTransportToSend]), scrui.BuildRequestQuery([simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDAlloyTransport]), scrui.BuildRequestQuery([simcity.kDataCachedUnits, simcity.kUnitID_Trading_City_Connection, simcity.kDataBinAmount, simcity.kResourceIDAlloyTransportToSend]), scrui.BuildRequestQuery([simcity.kDataCachedUnits, simcity.kUnitAttachedUICityLinkUnits, simcity.kDataBinAmount, simcity.kResourceIDAlloyTransport])]
  },
  calculateTotal : function (a) {
    return a.alloyStored
  }
};
simcity.kGiftableResourceCoal = {
  text : new scrui.cLocaleString("Resources.json", "0xcec5890c", "Coal"),
  amountText : new scrui.cLocaleString("BuildingRollover.json", "0x0e8d4576", "Coal"),
  formatType : simcity.NumberFormat.Tons,
  legendID : 252160848,
  lightIcon : "Graphics/Icons/TradeIcons/icn-trade-coal-white.png",
  darkIcon : "Graphics/Icons/TradeIcons/icn-trade-coal.png",
  scriptIndex : 18,
  resourceID : simcity.kResourceIDCoal,
  layerID : simcity.kRegionDataLayer_Coal,
  enRouteQueries : function (a) {
    return [scrui.BuildRequestQuery([simcity.kDataUnits,
          a, simcity.kDataBinAmount, simcity.kResourceIDCoalTransportToSend]), scrui.BuildRequestQuery([simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDCoalTransport]), scrui.BuildRequestQuery([simcity.kDataCachedUnits, simcity.kUnitID_Trading_City_Connection, simcity.kDataBinAmount, simcity.kResourceIDCoalTransportToSend]), scrui.BuildRequestQuery([simcity.kDataCachedUnits, simcity.kUnitAttachedUICityLinkUnits, simcity.kDataBinAmount, simcity.kResourceIDCoalTransport])]
  },
  calculateTotal : function (a) {
    return a.coalStored
  }
};
simcity.kGiftableResourceComputer = {
  text : new scrui.cLocaleString("Resources.json", "0x8da94c6a", "Computers"),
  amountText : new scrui.cLocaleString("BuildingRollover.json", "0x0e8d4577", "Computers"),
  formatType : simcity.NumberFormat.Units,
  legendID : 252160850,
  lightIcon : "Graphics/Icons/TradeIcons/icn-trade-computer-white.png",
  darkIcon : "Graphics/Icons/TradeIcons/icn-trade-computer.png",
  scriptIndex : 19,
  resourceID : simcity.kResourceIDComputer,
  layerID : simcity.kRegionDataLayer_Computer,
  enRouteQueries : function (a) {
    return [scrui.BuildRequestQuery([simcity.kDataUnits,
          a, simcity.kDataBinAmount, simcity.kResourceIDComputerTransportToSend]), scrui.BuildRequestQuery([simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDComputerTransport]), scrui.BuildRequestQuery([simcity.kDataCachedUnits, simcity.kUnitID_Trading_City_Connection, simcity.kDataBinAmount, simcity.kResourceIDComputerTransportToSend]), scrui.BuildRequestQuery([simcity.kDataCachedUnits, simcity.kUnitAttachedUICityLinkUnits, simcity.kDataBinAmount, simcity.kResourceIDComputerTransport])]
  },
  calculateTotal : function (a) {
    return a.computerStored
  }
};
simcity.kGiftableResourceElectronics = {
  text : new scrui.cLocaleString("Resources.json", "0x0dfc0e9f", "Electronics"),
  amountText : new scrui.cLocaleString("BuildingRollover.json", "0x0e8d4577", "Electronics"),
  formatType : simcity.NumberFormat.Units,
  legendID : 252160851,
  lightIcon : "Graphics/Icons/TradeIcons/icn-trade-electronics-white.png",
  darkIcon : "Graphics/Icons/TradeIcons/icn-trade-electronics.png",
  scriptIndex : 20,
  resourceID : simcity.kResourceIDElectronics,
  layerID : simcity.kRegionDataLayer_Electronics,
  enRouteQueries : function (a) {
    return [scrui.BuildRequestQuery([simcity.kDataUnits,
          a, simcity.kDataBinAmount, simcity.kResourceIDElectronicsTransportToSend]), scrui.BuildRequestQuery([simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDElectronicsTransport]), scrui.BuildRequestQuery([simcity.kDataCachedUnits, simcity.kUnitID_Trading_City_Connection, simcity.kDataBinAmount, simcity.kResourceIDElectronicsTransportToSend]), scrui.BuildRequestQuery([simcity.kDataCachedUnits, simcity.kUnitAttachedUICityLinkUnits, simcity.kDataBinAmount, simcity.kResourceIDElectronicsTransport])]
  },
  calculateTotal : function (a) {
    return a.electronicsStored
  }
};
simcity.kGiftableResourceFuel = {
  text : new scrui.cLocaleString("Resources.json", "0x9ea37dd1", "Fuel"),
  amountText : new scrui.cLocaleString("BuildingRollover.json", "0x0e8d4578", "Fuel"),
  formatType : simcity.NumberFormat.Barrels,
  legendID : 252160853,
  lightIcon : "Graphics/Icons/TradeIcons/icn-trade-fuel-white.png",
  darkIcon : "Graphics/Icons/TradeIcons/icn-trade-fuel.png",
  scriptIndex : 21,
  resourceID : simcity.kResourceIDFuel,
  layerID : simcity.kRegionDataLayer_Fuel,
  enRouteQueries : function (a) {
    return [scrui.BuildRequestQuery([simcity.kDataUnits, a,
          simcity.kDataBinAmount, simcity.kResourceIDFuelTransportToSend]), scrui.BuildRequestQuery([simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDFuelTransport]), scrui.BuildRequestQuery([simcity.kDataCachedUnits, simcity.kUnitID_Trading_City_Connection, simcity.kDataBinAmount, simcity.kResourceIDFuelTransportToSend]), scrui.BuildRequestQuery([simcity.kDataCachedUnits, simcity.kUnitAttachedUICityLinkUnits, simcity.kDataBinAmount, simcity.kResourceIDFuelTransport])]
  },
  calculateTotal : function (a) {
    return a.fuelStored
  }
};
simcity.kGiftableResourceMetal = {
  text : new scrui.cLocaleString("Resources.json", "0x9375c65e", "Metal"),
  amountText : new scrui.cLocaleString("BuildingRollover.json", "0x0e8d4576", "Metal"),
  formatType : simcity.NumberFormat.Tons,
  legendID : 252160854,
  lightIcon : "Graphics/Icons/TradeIcons/icn-trade-metal-white.png",
  darkIcon : "Graphics/Icons/TradeIcons/icn-trade-metal.png",
  scriptIndex : 22,
  resourceID : simcity.kResourceIDMetal,
  layerID : simcity.kRegionDataLayer_Metal,
  enRouteQueries : function (a) {
    return [scrui.BuildRequestQuery([simcity.kDataUnits,
          a, simcity.kDataBinAmount, simcity.kResourceIDMetalTransportToSend]), scrui.BuildRequestQuery([simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDMetalTransport]), scrui.BuildRequestQuery([simcity.kDataCachedUnits, simcity.kUnitID_Trading_City_Connection, simcity.kDataBinAmount, simcity.kResourceIDMetalTransportToSend]), scrui.BuildRequestQuery([simcity.kDataCachedUnits, simcity.kUnitAttachedUICityLinkUnits, simcity.kDataBinAmount, simcity.kResourceIDMetalTransport])]
  },
  calculateTotal : function (a) {
    return a.metalStored
  }
};
simcity.kGiftableResourceOilCrude = {
  text : new scrui.cLocaleString("Resources.json", "0xbf75dc04", "Crude Oil"),
  amountText : new scrui.cLocaleString("BuildingRollover.json", "0x0e8d4578", "Crude Oil"),
  formatType : simcity.NumberFormat.Barrels,
  legendID : 252160856,
  lightIcon : "Graphics/Icons/TradeIcons/icn-trade-oil-white.png",
  darkIcon : "Graphics/Icons/TradeIcons/icn-trade-oil.png",
  scriptIndex : 23,
  resourceID : simcity.kResourceIDOilCrude,
  layerID : simcity.kRegionDataLayer_OilCrude,
  enRouteQueries : function (a) {
    return [scrui.BuildRequestQuery([simcity.kDataUnits,
          a, simcity.kDataBinAmount, simcity.kResourceIDOilCrudeTransportToSend]), scrui.BuildRequestQuery([simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDOilCrudeTransport]), scrui.BuildRequestQuery([simcity.kDataCachedUnits, simcity.kUnitID_Trading_City_Connection, simcity.kDataBinAmount, simcity.kResourceIDOilCrudeTransportToSend]), scrui.BuildRequestQuery([simcity.kDataCachedUnits, simcity.kUnitAttachedUICityLinkUnits, simcity.kDataBinAmount, simcity.kResourceIDOilCrudeTransport])]
  },
  calculateTotal : function (a) {
    return a.oilCrudeStored
  }
};
simcity.kGiftableResourceOreRaw = {
  text : new scrui.cLocaleString("Resources.json", "0x96cf3b07", "Raw Ore"),
  amountText : new scrui.cLocaleString("BuildingRollover.json", "0x0e8d4576", "Raw Ore"),
  formatType : simcity.NumberFormat.Tons,
  legendID : 252160857,
  lightIcon : "OreGraphics/Icons/TradeIcons/icn-trade-ore-white.png",
  darkIcon : "OreGraphics/Icons/TradeIcons/icn-trade-ore.png",
  scriptIndex : 24,
  resourceID : simcity.kResourceIDOreRaw,
  layerID : simcity.kRegionDataLayer_OreRaw,
  enRouteQueries : function (a) {
    return [scrui.BuildRequestQuery([simcity.kDataUnits,
          a, simcity.kDataBinAmount, simcity.kResourceIDOreRawTransportToSend]), scrui.BuildRequestQuery([simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDOreRawTransport]), scrui.BuildRequestQuery([simcity.kDataCachedUnits, simcity.kUnitID_Trading_City_Connection, simcity.kDataBinAmount, simcity.kResourceIDOreRawTransportToSend]), scrui.BuildRequestQuery([simcity.kDataCachedUnits, simcity.kUnitAttachedUICityLinkUnits, simcity.kDataBinAmount, simcity.kResourceIDOreRawTransport])]
  },
  calculateTotal : function (a) {
    return a.oreRawStored
  }
};
simcity.kGiftableResourcePlastic = {
  text : new scrui.cLocaleString("Resources.json", "0x27638c5b", "Plastic"),
  amountText : new scrui.cLocaleString("BuildingRollover.json", "0x0e8d4577", "Plastic"),
  formatType : simcity.NumberFormat.Units,
  legendID : 252160859,
  lightIcon : "Graphics/Icons/TradeIcons/icn-trade-plastic-white.png",
  darkIcon : "Graphics/Icons/TradeIcons/icn-trade-plastic.png",
  scriptIndex : 25,
  resourceID : simcity.kResourceIDPlastic,
  layerID : simcity.kRegionDataLayer_Plastic,
  enRouteQueries : function (a) {
    return [scrui.BuildRequestQuery([simcity.kDataUnits,
          a, simcity.kDataBinAmount, simcity.kResourceIDPlasticTransportToSend]), scrui.BuildRequestQuery([simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDPlasticTransport]), scrui.BuildRequestQuery([simcity.kDataCachedUnits, simcity.kUnitID_Trading_City_Connection, simcity.kDataBinAmount, simcity.kResourceIDPlasticTransportToSend]), scrui.BuildRequestQuery([simcity.kDataCachedUnits, simcity.kUnitAttachedUICityLinkUnits, simcity.kDataBinAmount, simcity.kResourceIDPlasticTransport])]
  },
  calculateTotal : function (a) {
    return a.plasticStored
  }
};
simcity.kGiftableResourceTelevision = {
  text : new scrui.cLocaleString("Resources.json", "0xb8b5dd59", "TVs"),
  amountText : new scrui.cLocaleString("BuildingRollover.json", "0x0e8d4577", "TVs"),
  formatType : simcity.NumberFormat.Units,
  legendID : 252160861,
  lightIcon : "Graphics/Icons/TradeIcons/icn-trade-television-white.png",
  darkIcon : "Graphics/Icons/TradeIcons/icn-trade-television.png",
  scriptIndex : 26,
  resourceID : simcity.kResourceIDTelevision,
  layerID : simcity.kRegionDataLayer_Television,
  enRouteQueries : function (a) {
    return [scrui.BuildRequestQuery([simcity.kDataUnits,
          a, simcity.kDataBinAmount, simcity.kResourceIDTelevisionTransportToSend]), scrui.BuildRequestQuery([simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTelevisionTransport]), scrui.BuildRequestQuery([simcity.kDataCachedUnits, simcity.kUnitID_Trading_City_Connection, simcity.kDataBinAmount, simcity.kResourceIDTelevisionTransportToSend]), scrui.BuildRequestQuery([simcity.kDataCachedUnits, simcity.kUnitAttachedUICityLinkUnits, simcity.kDataBinAmount, simcity.kResourceIDTelevisionTransport])]
  },
  calculateTotal : function (a) {
    return a.televisionStored
  }
};
simcity.kGiftableResourceSimoleons = {
  text : new scrui.cLocaleString("Resources.json", "0x0ee2d5d8", "Simoleons"),
  amountText : new scrui.cLocaleString("BuildingRollover.json", "0x0e8d4579", "Simoleons"),
  formatType : simcity.NumberFormat.Standard,
  legendID : 252160845,
  lightIcon : "Graphics/Icons/TradeIcons/icn-trade-cashgifting_white.png",
  darkIcon : "Graphics/Icons/TradeIcons/icn-trade-cashgifting.png",
  scriptIndex : 16,
  resourceID : simcity.kResourceIDSimoleons,
  layerID : simcity.kRegionDataLayer_GiftingSimoleons,
  enRouteQueries : function (a) {
    return [scrui.BuildRequestQuery([simcity.kDataUnits,
          a, simcity.kDataBinAmount, simcity.kResourceIDTradeGiftSimoleonsSize]), scrui.BuildRequestQuery([simcity.kDataCachedUnits, simcity.kUnitID_Trading_City_Connection, simcity.kDataBinAmount, simcity.kResourceIDTradeGiftSimoleonsSize])]
  },
  calculateTotal : function (a) {
    return a.simoleons
  }
};
simcity.kServiceVehicleFireTruckR1 = {
  text : new scrui.cLocaleString("Transports.json", "0x00000007", "Fire Truck"),
  icon : "Graphics/Region/Service_Vehicles_FireTruckR1.png",
  rolloverText : new scrui.cLocaleString("RegionView.json", "0x0eeaa950", "Fire Truck"),
  rolloverIcon : "Graphics/Region/Service_Vehicles_FireTruckR1_Marquee.png",
  index : 0,
  queries : function (a) {
    return {
      outgoingVehicle : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDExcessFireTruckR1],
      incomingVehicle : [simcity.kDataUnits, a, simcity.kDataBinAmount,
        simcity.kResourceIDFireTruckR1]
    }
  }
};
simcity.kServiceVehicleFireTruckR2 = {
  text : new scrui.cLocaleString("Transports.json", "0x00000009", "Hook & Ladder Truck"),
  icon : "Graphics/Region/Service_Vehicles_FireTruckR2.png",
  rolloverText : new scrui.cLocaleString("RegionView.json", "0x0eeaa951", "Hook & Ladder Truck"),
  rolloverIcon : "Graphics/Region/Service_Vehicles_FireTruckR2_Marquee.png",
  index : 1,
  queries : function (a) {
    return {
      outgoingVehicle : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDExcessFireTruckR2],
      incomingVehicle : [simcity.kDataUnits,
        a, simcity.kDataBinAmount, simcity.kResourceIDFireTruckR2]
    }
  }
};
simcity.kServiceVehicleHazMatTruckR2 = {
  text : new scrui.cLocaleString("Transports.json", "0x00000008", "HazMat Truck"),
  icon : "Graphics/Region/Service_Vehicles_HazMatTruckR2.png",
  rolloverText : new scrui.cLocaleString("RegionView.json", "0x0eeaa952", "HazMat Truck"),
  rolloverIcon : "Graphics/Region/Service_Vehicles_HazMatTruckR2_Marquee.png",
  index : 8,
  queries : function (a) {
    return {
      outgoingVehicle : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDExcessHazMatTruckR2],
      incomingVehicle : [simcity.kDataUnits,
        a, simcity.kDataBinAmount, simcity.kResourceIDHazMatTruckR2]
    }
  }
};
simcity.kServiceVehicleFireInspectorR2 = {
  text : new scrui.cLocaleString("Transports.json", "0x0000000a", "Fire Inspector"),
  icon : "Graphics/Region/Service_Vehicles_FireInspectorR2.png",
  rolloverText : new scrui.cLocaleString("RegionView.json", "0x0eeaa953", "Fire Inspector"),
  rolloverIcon : "Graphics/Region/Service_Vehicles_FireInspectorR2_Marquee.png",
  index : 11,
  queries : function (a) {
    return {
      outgoingVehicle : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeExcessFireInspectorR2],
      incomingVehicle : [simcity.kDataUnits,
        a, simcity.kDataBinAmount, simcity.kResourceIDFireInspectorR2]
    }
  }
};
simcity.kServiceVehicleFireHelicopterR2 = {
  text : new scrui.cLocaleString("Transports.json", "0x0000003c", "Fire Helicopter"),
  icon : "Graphics/Region/Service_Vehicles_FireHelicopterR2.png",
  rolloverText : new scrui.cLocaleString("RegionView.json", "0x0eeaa954", "Fire Helicopter"),
  rolloverIcon : "Graphics/Region/Service_Vehicles_FireHelicopterR2_Marquee.png",
  index : 10,
  queries : function (a) {
    return {
      outgoingVehicle : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeExcessFireHelicopterR2],
      incomingVehicle : [simcity.kDataUnits,
        a, simcity.kDataBinAmount, simcity.kResourceIDFireHelicopterR2]
    }
  }
};
simcity.kServiceVehiclePoliceCarR1 = {
  text : new scrui.cLocaleString("Transports.json", "0x0000002c", "Police Car"),
  icon : "Graphics/Region/Service_Vehicles_PoliceCarR1.png",
  rolloverText : new scrui.cLocaleString("RegionView.json", "0x0eeaa970", "Police Car"),
  rolloverIcon : "Graphics/Region/Service_Vehicles_PoliceCarR1_Marquee.png",
  index : 2,
  queries : function (a) {
    return {
      outgoingVehicle : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeExcessPoliceCarR1],
      incomingVehicle : [simcity.kDataUnits, a, simcity.kDataBinAmount,
        simcity.kResourceIDPoliceCarR1]
    }
  }
};
simcity.kServiceVehiclePoliceDetectiveVanR2 = {
  text : new scrui.cLocaleString("Transports.json", "0x0000002d", "Detective Van"),
  icon : "Graphics/Region/Service_Vehicles_PoliceDetectiveVanR2.png",
  rolloverText : new scrui.cLocaleString("RegionView.json", "0x0eeaa971", "Detective Van"),
  rolloverIcon : "Graphics/Region/Service_Vehicles_PoliceDetectiveVanR2_Marquee.png",
  index : 3,
  queries : function (a) {
    return {
      outgoingVehicle : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeExcessPoliceDetectiveVanR2],
      incomingVehicle : [simcity.kDataUnits,
        a, simcity.kDataBinAmount, simcity.kResourceIDPoliceDetectiveVanR2]
    }
  }
};
simcity.kServiceVehiclePoliceOutreachVanR2 = {
  text : new scrui.cLocaleString("Transports.json", "0x0000002e", "Police Outreach Van"),
  icon : "Graphics/Region/Service_Vehicles_PoliceOutreachVanR2.png",
  rolloverText : new scrui.cLocaleString("RegionView.json", "0x0eeaa972", "Police Outreach Van"),
  rolloverIcon : "Graphics/Region/Service_Vehicles_PoliceOutreachVanR2_Marquee.png",
  index : 4,
  queries : function (a) {
    return {
      outgoingVehicle : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeExcessPoliceOutreachVanR2],
      incomingVehicle : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDPoliceOutreachVanR2]
    }
  }
};
simcity.kServiceVehiclePoliceHelicopterR2 = {
  text : new scrui.cLocaleString("Transports.json", "0x0000003e", "Police Helicopter"),
  icon : "Graphics/Region/Service_Vehicles_PoliceHelicopterR2.png",
  rolloverText : new scrui.cLocaleString("RegionView.json", "0x0eeaa973", "Police Helicopter"),
  rolloverIcon : "Graphics/Region/Service_Vehicles_PoliceHelicopterR2_Marquee.png",
  index : 12,
  queries : function (a) {
    return {
      outgoingVehicle : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeExcessPoliceHelicopterR2],
      incomingVehicle : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDPoliceHelicopterR2]
    }
  }
};
simcity.kServiceVehicleAmbulanceR1 = {
  text : new scrui.cLocaleString("Transports.json", "0x00000035", "Ambulance"),
  icon : "Graphics/Region/Service_Vehicles_AmbulanceR1.png",
  rolloverText : new scrui.cLocaleString("RegionView.json", "0x0eeaa980", "Ambulance"),
  rolloverIcon : "Graphics/Region/Service_Vehicles_AmbulanceR1_Marquee.png",
  index : 5,
  queries : function (a) {
    return {
      outgoingVehicle : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeExcessAmbulanceR1],
      incomingVehicle : [simcity.kDataUnits, a, simcity.kDataBinAmount,
        simcity.kResourceIDAmbulanceR1]
    }
  }
};
simcity.kServiceVehicleCommunityOutreachVanR2 = {
  text : new scrui.cLocaleString("Transports.json", "0x0eaa0c36", "Health Outreach Van"),
  icon : "Graphics/Region/Service_Vehicles_CommunityOutreachVanR2.png",
  rolloverText : new scrui.cLocaleString("RegionView.json", "0x0eeaa981", "Health Outreach Van"),
  rolloverIcon : "Graphics/Region/Service_Vehicles_CommunityOutreachVanR2_Marquee.png",
  index : 6,
  queries : function (a) {
    return {
      outgoingVehicle : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeExcessCommunityOutreachVanR2],
      incomingVehicle : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDCommunityOutreachVanR2]
    }
  }
};
simcity.kServiceVehicleGarbageTruckR1 = {
  text : new scrui.cLocaleString("Transports.json", "0x00000014", "Garbage Truck"),
  icon : "Graphics/Region/Service_Vehicles_GarbageTruckR1.png",
  rolloverText : new scrui.cLocaleString("RegionView.json", "0x0eeaa960", "Garbage Truck"),
  rolloverIcon : "Graphics/Region/Service_Vehicles_GarbageTruckR1_Marquee.png",
  index : 7,
  queries : function (a) {
    return {
      outgoingVehicle : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeExcessGarbageTruckR1],
      incomingVehicle : [simcity.kDataUnits,
        a, simcity.kDataBinAmount, simcity.kResourceIDGarbageTruckR1]
    }
  }
};
simcity.kServiceVehicleRecyclingTruckR2 = {
  text : new scrui.cLocaleString("Transports.json", "0x00000015", "Recycling Truck"),
  icon : "Graphics/Region/Service_Vehicles_RecyclingTruckR2.png",
  rolloverText : new scrui.cLocaleString("RegionView.json", "0x0eeaa961", "Recycling Truck"),
  rolloverIcon : "Graphics/Region/Service_Vehicles_RecyclingTruckR2_Marquee.png",
  index : 9,
  queries : function (a) {
    return {
      outgoingVehicle : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeExcessRecyclingTruckR2],
      incomingVehicle : [simcity.kDataUnits,
        a, simcity.kDataBinAmount, simcity.kResourceIDRecyclingTruckR2]
    }
  }
};
simcity.kRegionalCitiesResourceDataBindings = [simcity.kRegionalCitiesResourcePower, simcity.kRegionalCitiesResourceWater, simcity.kRegionalCitiesResourceGarbage, simcity.kRegionalCitiesResourceFire, simcity.kRegionalCitiesResourceT2, simcity.kRegionalCitiesResourceImportedRCI, simcity.kRegionalCitiesResourceLocalRCI, simcity.kRegionalCitiesResourceResidential, simcity.kRegionalCitiesResourceCommercial, simcity.kRegionalCitiesResourceIndustrial, simcity.kRegionalCitiesResourceStudents, simcity.kRegionalCitiesResourceTradeTokens,
  simcity.kRegionalCitiesResourceHarvestedCommodities, simcity.kRegionalCitiesResourceCrime, simcity.kRegionalCitiesResourceHealth, simcity.kRegionalCitiesResourceSewage, simcity.kRegionalCitiesResourceTransport, simcity.kRegionalCitiesGiftableResourcesArrows, simcity.kRegionalCitiesResourceRegionTotals];
simcity.kRegionalCitiesResourceGreatWorksDataBindings = [simcity.kRegionalCitiesResourceGreatWorks];
simcity.kConnectedCitiesDataBindings = [simcity.kTradeConnectionStatus, simcity.kTradeConnectionVisitors, simcity.kTradeConnectionPower, simcity.kTradeConnectionWater, simcity.kTradeConnectionResidents, simcity.kTradeConnectionKids, simcity.kTradeConnectionJobs, simcity.kTradeConnectionShoppers, simcity.kTradeConnectionEducation, simcity.kTradeConnectionFireTrucks, simcity.kTradeConnectionPolice, simcity.kTradeConnectionGarbage, simcity.kTradeConnectionHealth];
simcity.kGiftableResourcesDataBindings = [simcity.kGiftableResourceSimoleons, simcity.kGiftableResourceAlloy, simcity.kGiftableResourceCoal, simcity.kGiftableResourceComputer, simcity.kGiftableResourceElectronics, simcity.kGiftableResourceFuel, simcity.kGiftableResourceMetal, simcity.kGiftableResourceOilCrude, simcity.kGiftableResourceOreRaw, simcity.kGiftableResourcePlastic, simcity.kGiftableResourceTelevision];
simcity.kServiceVehiclesDataBindings = {
  fire : [simcity.kServiceVehicleFireTruckR1, simcity.kServiceVehicleFireTruckR2, simcity.kServiceVehicleHazMatTruckR2, simcity.kServiceVehicleFireInspectorR2, simcity.kServiceVehicleFireHelicopterR2],
  police : [simcity.kServiceVehiclePoliceCarR1, simcity.kServiceVehiclePoliceDetectiveVanR2, simcity.kServiceVehiclePoliceOutreachVanR2, simcity.kServiceVehiclePoliceHelicopterR2],
  health : [simcity.kServiceVehicleAmbulanceR1, simcity.kServiceVehicleCommunityOutreachVanR2],
  garbage : [simcity.kServiceVehicleGarbageTruckR1,
    simcity.kServiceVehicleRecyclingTruckR2]
};
simcity.SetProgressBarState = function (a, b, c, d, e) {
  var f = null,
  g = null;
  if (!d || "red" == d) {
    if (f = a.FindControlByID(232195641))
      f.SetVisibility(!0), a.FindControlByID(232209833).SetVisibility(!1), a.FindControlByID(232632407).SetVisibility(!1);
    g = e && e.iconRed ? e.iconRed : null
  } else if ("yellow" == d) {
    if (f = a.FindControlByID(232632407))
      f.SetVisibility(!0), a.FindControlByID(232209833).SetVisibility(!1), a.FindControlByID(232195641).SetVisibility(!1);
    g = e && e.iconAmber ? e.iconAmber : null
  } else {
    if (f = a.FindControlByID(232209833))
      f.SetVisibility(!0),
      a.FindControlByID(232195641).SetVisibility(!1), a.FindControlByID(232632407).SetVisibility(!1);
    g = e && e.icon ? e.icon : null
  }
  f && (d = f.FindControlByID(232125300), scrui.SetProgressBarWidth(d, b / c));
  g && a.FindControlByID(231802902) && a.FindControlByID(231802902).SetWindowImage(g)
};
simcity.databindings.DataBindingsRegionalAlerts = {};
simcity.kPowerProductionRate = 30;
simcity.kWaterProductionRate = 20;
simcity.GetArrayComparisonIndex = function (a, b) {
  for (var c = 0, d = a.length; c < d; ++c)
    if (-1 !== b.indexOf(a[c]))
      return c;
  return -1
};
simcity.kRegionalAlertsPower = {
  connectionData : [new simcity.kRegionalCitiesResourcePower],
  update : function (a) {
    var b = !1,
    c = simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData.mPlayingBox.uid,
    d = this.connectionData[0],
    e = d.data.neededPowerPerHour / simcity.kPowerProductionRate,
    f = d.data.totalPowerProducedPerHour,
    g = 0,
    h = simcity.gGlobalUIHandler.mRegionViewUIHandler.GetRegionalConnectedCities(c)[0];
    if (h) {
      h = h[1].power.data.tradePower;
      a != c && (g += h);
      for (var h = simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData,
        i = Object.keys(h.mCityTradeData[a].connections), j = 0, k = i.length; j < k; j++)
        i[j] != c && (g += h.mCityTradeData[a].connections[i[j]].connectionData.power.data.tradePower);
      g /= simcity.kPowerProductionRate;
      if (simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData.mConnectedUnits[a] || a === c)
        if ((h = simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData.mCityTradeData[a].connections[c]) && h.connectionData || a === c)
          if (0 < f && (f /= simcity.kPowerProductionRate), d.data.key = simcity.kRegionDataLayer_Power, d.data.opportunityExists =
              !1, d.data.needExists = !1, d.data.needText = new scrui.cLocaleString("RegionView.json", "0x0e125921", "needs power"), d.data.needIcon = "icn_alert-no-power.png", d.data.availabilityExists = !1, a === c ? e && 0.6 > f / e && (d.data.needExists = !0) : e && 0.6 > (f + g) / e && (d.data.needExists = !0), a === c)
            e = simcity.TestRegionConnectionValue(a, "power", "deficitPowerPerHour", ">", 0), 0 < d.data.tradePower && 0 < e.length ? simcity.AddRegionAdvisorAlert(simcity.kRegionDataLayer_Power, e[0], simcity.kRegionAdvisorText.power.excess) : simcity.ClearRegionAdvisorAlert(simcity.kRegionDataLayer_Power,
              simcity.kRegionAdvisorText.power.excess), d.data.needExists ? (a = simcity.TestRegionConnectionValue(a, "power", ["tradePower"], ">", 0), 0 < a.length ? (simcity.AddRegionAdvisorAlert(simcity.kRegionDataLayer_Power, a[0], simcity.kRegionAdvisorText.power.needed), b = !0) : simcity.AddRegionAdvisorAlert(simcity.kRegionDataLayer_Power, c, simcity.kRegionAdvisorText.power.neededNoOp)) : (simcity.ClearRegionAdvisorAlert(simcity.kRegionDataLayer_Power, simcity.kRegionAdvisorText.power.neededNoOp), simcity.ClearRegionAdvisorAlert(simcity.kRegionDataLayer_Power,
                simcity.kRegionAdvisorText.power.needed));
      return b
    }
  }
};
simcity.kRegionalAlertsWater = {
  connectionData : [new simcity.kRegionalCitiesResourceWater],
  update : function (a) {
    var b = !1,
    c = this.connectionData[0],
    d = c.data.neededWaterPerHour / simcity.kWaterProductionRate,
    e = c.data.totalWaterProducedPerHour / simcity.kWaterProductionRate,
    f = simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData.mPlayingBox.uid,
    g = 0,
    h = simcity.gGlobalUIHandler.mRegionViewUIHandler.GetRegionalConnectedCities(f)[0];
    if (h) {
      for (var g = g + h[1].water.data.tradingWater, h = simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData,
        i = Object.keys(h.mCityTradeData[a].connections), j = 0, k = i.length; j < k; j++)
        i[j] != f && (g += h.mCityTradeData[a].connections[i[j]].connectionData.water.data.tradingWater);
      g /= simcity.kWaterProductionRate;
      if (simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData.mConnectedUnits[a] || a === f)
        if ((h = simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData.mCityTradeData[a].connections[f]) && h.connectionData || a === f)
          if (c.data.key = simcity.kRegionDataLayer_Water, c.data.opportunityExists = !1, c.data.needExists = !1, c.data.needText =
              new scrui.cLocaleString("RegionView.json", "0x0e212f83", "needs water"), c.data.needIcon = "icn_alert-no-water.png", c.data.availabilityExists = !1, a === f ? d && 0.7 > e / d && (c.data.needExists = !0) : d && 0.7 > (e + g) / d && (c.data.needExists = !0), a === f)
            d = simcity.TestRegionConnectionValue(a, "water", "deficitWaterPerHour", ">", 0), 0 < c.data.tradingWater && 0 < d.length ? simcity.AddRegionAdvisorAlert(simcity.kRegionDataLayer_Water, d[0], simcity.kRegionAdvisorText.water.excess) : simcity.ClearRegionAdvisorAlert(simcity.kRegionDataLayer_Water,
              simcity.kRegionAdvisorText.water.excess), 0 < c.data.deficitWaterPerHour ? (a = simcity.TestRegionConnectionValue(a, "water", "tradingWater", ">", 0), 0 < a.length ? (simcity.AddRegionAdvisorAlert(simcity.kRegionDataLayer_Water, a[0], simcity.kRegionAdvisorText.water.needed), b = !0) : simcity.AddRegionAdvisorAlert(simcity.kRegionDataLayer_Water, f, simcity.kRegionAdvisorText.water.neededNoOp)) : (simcity.ClearRegionAdvisorAlert(simcity.kRegionDataLayer_Water, simcity.kRegionAdvisorText.water.neededNoOp), simcity.ClearRegionAdvisorAlert(simcity.kRegionDataLayer_Water,
                simcity.kRegionAdvisorText.water.needed));
      return b
    }
  }
};
simcity.kRegionalAlertsGarbage = {
  connectionData : [new simcity.kRegionalCitiesResourceGarbage],
  update : function (a) {
    var b = this.connectionData[0],
    c = b.data.totalGarbage,
    d = b.data.garbagePickedUp,
    e = simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData.mPlayingBox.uid;
    if (simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData.mConnectedUnits[a] || a === e) {
      var f = simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData.mCityTradeData[a].connections[e];
      if ((f = f ? f.connectionData : null) || a === e) {
        b.data.key = simcity.kRegionDataLayer_Garbage;
        b.data.opportunityExists = !1;
        b.data.needExists = !1;
        b.data.needText = new scrui.cLocaleString("RegionView.json", "0x0eb9c92a", "needs garbage");
        b.data.needIcon = "icn_alert-garbage.png";
        b.data.availabilityExists = !1;
        var g = 0;
        a != e && (g = simcity.GetServiceVehiclesSuppliedCount(simcity.kRegionDataLayer_Garbage, a));
        1E4 < c && 0.3 > d / c && (g ? (c -= d, 0 < c && 0.25 >= 1E3 * g / c && (b.data.needExists = !0)) : b.data.needExists = !0);
        f && (c = f.garbage.data, b.data.needExists && 0 < c.totalGarbageAndRecyclingTruckTokensAvailable ? (b.data.opportunityExists =
              !0, simcity.AddRegionAdvisorAlert(simcity.kRegionDataLayer_Garbage, a, simcity.kRegionAdvisorText.garbage.needed)) : b.data.needExists && 0 == c.totalGarbageAndRecyclingTruckTokensAvailable ? simcity.AddRegionAdvisorAlert(simcity.kRegionDataLayer_Garbage, a, simcity.kRegionAdvisorText.garbage.neededNoOp) : (simcity.ClearRegionAdvisorAlert(simcity.kRegionDataLayer_Garbage, simcity.kRegionAdvisorText.garbage.needed), simcity.ClearRegionAdvisorAlert(simcity.kRegionDataLayer_Garbage, simcity.kRegionAdvisorText.garbage.neededNoOp)))
      }
    }
  }
};
simcity.kRegionalAlertsFire = {
  connectionData : [new simcity.kRegionalCitiesResourceFire],
  update : function (a) {
    var b = this.connectionData[0],
    c = b.data.totalFires,
    d = b.data.unattendedFires,
    e = simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData.mPlayingBox.uid;
    if (simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData.mConnectedUnits[a] || a === e) {
      var f = simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData.mCityTradeData[a].connections[e];
      if ((f = f ? f.connectionData : null) || a === e) {
        b.data.key = simcity.kRegionDataLayer_Fire;
        b.data.opportunityExists = !1;
        b.data.needExists = !1;
        b.data.needText = new scrui.cLocaleString("RegionView.json", "0x0eb9c972", "needs fire");
        b.data.needIcon = "icn_alert-fires.png";
        b.data.availabilityExists = !1;
        var g = 0;
        a != e && (g = simcity.GetServiceVehiclesSuppliedCount(simcity.kRegionDataLayer_Fire, a));
        4 <= c && 0.4 < d / c && (a == e ? b.data.needExists = !0 : g ? 0.1 >= 3 * g / d && (b.data.needExists = !0) : b.data.needExists = !0);
        f && (c = f.fire.data, b.data.needExists && 0 < c.totalFireTruckTokensAvailable ? (b.data.opportunityExists = !0, simcity.AddRegionAdvisorAlert(simcity.kRegionDataLayer_Fire,
              a, simcity.kRegionAdvisorText.fire.needed)) : b.data.needExists && 0 == c.totalFireTruckTokensAvailable ? simcity.AddRegionAdvisorAlert(simcity.kRegionDataLayer_Fire, a, simcity.kRegionAdvisorText.fire.neededNoOp) : (simcity.ClearRegionAdvisorAlert(simcity.kRegionDataLayer_Fire, simcity.kRegionAdvisorText.fire.needed), simcity.ClearRegionAdvisorAlert(simcity.kRegionDataLayer_Fire, simcity.kRegionAdvisorText.fire.neededNoOp)))
      }
    }
  }
};
simcity.kRegionalAlertsPolice = {
  connectionData : [new simcity.kRegionalCitiesResourceCrime],
  update : function (a) {
    var b = this.connectionData[0],
    c = b.data.totalCrime,
    d = b.data.criminalsCaught,
    e = c - d,
    f = simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData.mPlayingBox.uid;
    if (simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData.mConnectedUnits[a] || a === f) {
      var g = simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData.mCityTradeData[a].connections[f];
      if ((g = g ? g.connectionData : null) || a === f) {
        b.data.key = simcity.kRegionDataLayer_Police;
        b.data.opportunityExists = !1;
        b.data.needExists = !1;
        b.data.needText = new scrui.cLocaleString("RegionView.json", "0x0eb9c999", "needs police");
        b.data.needIcon = "icn_alert-criminal.png";
        b.data.availabilityExists = !1;
        var h = 0;
        a != f && (h = simcity.GetServiceVehiclesSuppliedCount(simcity.kRegionDataLayer_Police, a));
        20 < c && 0.3 > d / c && (a == f ? b.data.needExists = !0 : h ? 0.3 > 3 * h / e && (b.data.needExists = !0) : b.data.needExists = !0);
        g && (c = g.police.data, b.data.needExists && 0 < c.totalPoliceVehicleTokensAvailable ? (b.data.opportunityExists =
              !0, simcity.AddRegionAdvisorAlert(simcity.kRegionDataLayer_Police, a, simcity.kRegionAdvisorText.police.needed)) : b.data.needExists && 0 == c.totalPoliceVehicleTokensAvailable ? simcity.AddRegionAdvisorAlert(simcity.kRegionDataLayer_Police, a, simcity.kRegionAdvisorText.police.neededNoOp) : (simcity.ClearRegionAdvisorAlert(simcity.kRegionDataLayer_Police, simcity.kRegionAdvisorText.police.needed), simcity.ClearRegionAdvisorAlert(simcity.kRegionDataLayer_Police, simcity.kRegionAdvisorText.police.neededNoOp)))
      }
    }
  }
};
simcity.kRegionalAlertsSewage = {
  connectionData : [new simcity.kRegionalCitiesResourceSewage],
  update : function (a) {
    var b = !1,
    c = simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData.mPlayingBox.uid;
    if (simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData.mCityTradeData[a]) {
      if (simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData.mConnectedUnits[a] || a === c) {
        var d = simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData.mCityTradeData[a].connections[c];
        if (d && d.connectionData || a === c) {
          var d = this.connectionData[0],
          e = d.data.totalSewageProducedPerHour / 72,
          f = d.data.totalSewageTreatmentCapacityPerHour + d.data.boughtTreatmentCapacityPerHour;
          d.data.key = simcity.kRegionDataLayer_Sewage;
          d.data.opportunityExists = !1;
          d.data.needExists = !1;
          d.data.needText = new scrui.cLocaleString("RegionView.json", "0x0ec6f7b1", "needs sewage");
          d.data.needIcon = "icn_alert-sewage.png";
          d.data.availabilityExists = !1;
          var g = 0,
          h = simcity.gGlobalUIHandler.mRegionViewUIHandler.GetRegionalConnectedCities(c)[0];
          if (!h)
            return;
          for (var g = g + h[1].sewage.data.tradeSewage,
            h = simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData, i = Object.keys(h.mCityTradeData[a].connections), j = 0, k = i.length; j < k; j++)
            i[j] != c && (g += h.mCityTradeData[a].connections[i[j]].connectionData.sewage.data.tradeSewage);
          a === c ? e && 0.5 > f / e && (d.data.needExists = !0) : e && 0.5 > (f + g) / e && (d.data.needExists = !0);
          a === c && (e = simcity.TestRegionConnectionValue(a, "sewage", "sewageDumpedPerHour", ">", 0), 0 < d.data.tradeSewage && 0 < e.length ? simcity.AddRegionAdvisorAlert(simcity.kRegionDataLayer_Sewage, e[0], simcity.kRegionAdvisorText.sewage.excess) :
            simcity.ClearRegionAdvisorAlert(simcity.kRegionDataLayer_Sewage, simcity.kRegionAdvisorText.sewage.excess), d.data.needExists ? (a = simcity.TestRegionConnectionValue(a, "sewage", "tradeSewage", ">", 0), 0 < a.length ? (simcity.AddRegionAdvisorAlert(simcity.kRegionDataLayer_Sewage, a[0], simcity.kRegionAdvisorText.sewage.needed), b = !0) : simcity.AddRegionAdvisorAlert(simcity.kRegionDataLayer_Sewage, c, simcity.kRegionAdvisorText.sewage.neededNoOp)) : (simcity.ClearRegionAdvisorAlert(simcity.kRegionDataLayer_Sewage, simcity.kRegionAdvisorText.sewage.neededNoOp),
              simcity.ClearRegionAdvisorAlert(simcity.kRegionDataLayer_Sewage, simcity.kRegionAdvisorText.sewage.needed)))
        }
      }
      return b
    }
  }
};
simcity.kRegionalAlertsHealth = {
  connectionData : [new simcity.kRegionalCitiesResourceHealth],
  update : function (a) {
    var b = this.connectionData[0],
    c = b.data.hospitalRooms,
    d = b.data.totalSickAndInjuredUntreated,
    e = simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData.mPlayingBox.uid;
    if (simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData.mConnectedUnits[a] || a === e) {
      var f = simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData.mCityTradeData[a].connections[e];
      if ((f = f ? f.connectionData : null) || a === e) {
        b.data.key =
          simcity.kRegionDataLayer_Health;
        b.data.opportunityExists = !1;
        b.data.needExists = !1;
        b.data.needText = new scrui.cLocaleString("RegionView.json", "0x0ec6ec85", "needs health");
        b.data.needIcon = "icn_alert-sick.png";
        b.data.availabilityExists = !1;
        var g = 0;
        a != e && (g = simcity.GetServiceVehiclesSuppliedCount(simcity.kRegionDataLayer_Health, a));
        if (12 <= d && (!c && d || d / 2 > c))
          g ? d && 0.15 > 3 * g / d && (b.data.needExists = !0) : b.data.needExists = !0;
        f && (c = f.health.data, b.data.needExists && 0 < c.totalHealthVehicleTokensAvailable ? (b.data.opportunityExists =
              !0, simcity.AddRegionAdvisorAlert(simcity.kRegionDataLayer_Health, a, simcity.kRegionAdvisorText.health.needed)) : b.data.needExists && 0 == c.totalHealthVehicleTokensAvailable ? simcity.AddRegionAdvisorAlert(simcity.kRegionDataLayer_Health, a, simcity.kRegionAdvisorText.health.neededNoOp) : (simcity.ClearRegionAdvisorAlert(simcity.kRegionDataLayer_Health, simcity.kRegionAdvisorText.health.needed), simcity.ClearRegionAdvisorAlert(simcity.kRegionDataLayer_Health, simcity.kRegionAdvisorText.health.neededNoOp)))
      }
    }
  }
};
simcity.kRegionalAlertsUnemployed = {
  connectionData : [new simcity.kRegionalCitiesResourceResidential],
  update : function (a) {
    var b = this.connectionData[0],
    c = b.data.totalWorkersW1 + b.data.totalWorkersW2 + b.data.totalWorkersW3,
    d = b.data.totalJobsW1 + b.data.totalJobsW2 + b.data.totalJobsW3,
    e = simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData.mPlayingBox.uid;
    if (simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData.mConnectedUnits[a] || a === e) {
      var f = simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData.mCityTradeData[a].connections[e];
      if (f && f.connectionData || a === e)
        if (b.data.key = simcity.kRegionDataLayer_Workers, b.data.opportunityExists = !1, b.data.needExists = !1, b.data.needText = new scrui.cLocaleString("RegionView.json", "0x0ed192db", "needs jobs"), b.data.needIcon = "icn_alert-no-jobs.png", b.data.availabilityExists = !1, 0 !== d && 0 == c && (b.data.opportunityExists = !0), a === e)
          0 < b.data.excessJobsW3 ? simcity.AddRegionAdvisorAlert(simcity.kRegionDataLayer_Workers, a, simcity.kRegionAdvisorText.workers.excessW3) : simcity.ClearRegionAdvisorAlert(simcity.kRegionDataLayer_Workers,
            simcity.kRegionAdvisorText.workers.excessW3), 0 < b.data.excessJobsW2 ? simcity.AddRegionAdvisorAlert(simcity.kRegionDataLayer_Workers, a, simcity.kRegionAdvisorText.workers.excessW2) : simcity.ClearRegionAdvisorAlert(simcity.kRegionDataLayer_Workers, simcity.kRegionAdvisorText.workers.excessW2), 0 < b.data.excessJobsW1 ? simcity.AddRegionAdvisorAlert(simcity.kRegionDataLayer_Workers, a, simcity.kRegionAdvisorText.workers.excessW1) : simcity.ClearRegionAdvisorAlert(simcity.kRegionDataLayer_Workers, simcity.kRegionAdvisorText.workers.excessW1),
          b = simcity.TestRegionConnectionValue(a, "residential", ["excessJobsW1"], ">", 0), c = simcity.TestRegionConnectionValue(a, "residential", ["excessJobsW2"], ">", 0), a = simcity.TestRegionConnectionValue(a, "residential", ["excessJobsW3"], ">", 0), 0 < b.length ? simcity.AddRegionAdvisorAlert(simcity.kRegionDataLayer_Workers, b[0], simcity.kRegionAdvisorText.workers.neededW1) : simcity.ClearRegionAdvisorAlert(simcity.kRegionDataLayer_Workers, simcity.kRegionAdvisorText.workers.neededW1), 0 < c.length ? simcity.AddRegionAdvisorAlert(simcity.kRegionDataLayer_Workers,
            c[0], simcity.kRegionAdvisorText.workers.neededW2) : simcity.ClearRegionAdvisorAlert(simcity.kRegionDataLayer_Workers, simcity.kRegionAdvisorText.workers.neededW2), 0 < a.length ? simcity.AddRegionAdvisorAlert(simcity.kRegionDataLayer_Workers, a[0], simcity.kRegionAdvisorText.workers.neededW3) : simcity.ClearRegionAdvisorAlert(simcity.kRegionDataLayer_Workers, simcity.kRegionAdvisorText.workers.neededW3)
    }
  }
};
simcity.kRegionalAlertsShoppers = {
  connectionData : [new simcity.kRegionalCitiesResourceCommercial],
  update : function (a) {
    var b = this.connectionData[0],
    c = b.data.totalShoppersW1 + b.data.totalShoppersW2 + b.data.totalShoppersW3,
    d = b.data.totalItemsW1 + b.data.totalItemsW2 + b.data.totalItemsW3,
    e = simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData.mPlayingBox.uid;
    b.data.needText = new scrui.cLocaleString("RegionView.json", "0x0eb9c9e2", "needs shoppers");
    b.data.needIcon = "icn_alert-no-shoppers.png";
    b.data.key = simcity.kRegionDataLayer_Shoppers;
    b.data.needExists = !1;
    if (simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData.mConnectedUnits[a] || a === e) {
      var f = simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData.mCityTradeData[a].connections[e];
      if (f && f.connectionData || a === e)
        if (a != e && (d && 500 < d && 0.5 > c / d) && (b.data.needExists = !0), a === e)
          b.data.excessItemsW1 ? simcity.AddRegionAdvisorAlert(simcity.kRegionDataLayer_Shoppers, a, simcity.kRegionAdvisorText.shoppers.excessW1) : simcity.ClearRegionAdvisorAlert(simcity.kRegionDataLayer_Shoppers, simcity.kRegionAdvisorText.shoppers.excessW1),
          0 < b.data.excessItemsW2 ? simcity.AddRegionAdvisorAlert(simcity.kRegionDataLayer_Shoppers, a, simcity.kRegionAdvisorText.shoppers.excessW2) : simcity.ClearRegionAdvisorAlert(simcity.kRegionDataLayer_Shoppers, simcity.kRegionAdvisorText.shoppers.excessW2), 0 < b.data.excessItemsW3 ? simcity.AddRegionAdvisorAlert(simcity.kRegionDataLayer_Shoppers, a, simcity.kRegionAdvisorText.shoppers.excessW3) : simcity.ClearRegionAdvisorAlert(simcity.kRegionDataLayer_Shoppers, simcity.kRegionAdvisorText.shoppers.excessW3), b = simcity.TestRegionConnectionValue(a,
              "commercial", ["excessItemsW1"], ">", 0), c = simcity.TestRegionConnectionValue(a, "commercial", ["excessItemsW2"], ">", 0), a = simcity.TestRegionConnectionValue(a, "commercial", ["excessItemsW3"], ">", 0), 0 < b.length ? simcity.AddRegionAdvisorAlert(simcity.kRegionDataLayer_Shoppers, b[0], simcity.kRegionAdvisorText.shoppers.neededW1) : simcity.ClearRegionAdvisorAlert(simcity.kRegionDataLayer_Shoppers, simcity.kRegionAdvisorText.shoppers.neededW1), 0 < c.length ? simcity.AddRegionAdvisorAlert(simcity.kRegionDataLayer_Shoppers,
            c[0], simcity.kRegionAdvisorText.shoppers.neededW2) : simcity.ClearRegionAdvisorAlert(simcity.kRegionDataLayer_Shoppers, simcity.kRegionAdvisorText.shoppers.neededW2), 0 < a.length ? simcity.AddRegionAdvisorAlert(simcity.kRegionDataLayer_Shoppers, a[0], simcity.kRegionAdvisorText.shoppers.neededW3) : simcity.ClearRegionAdvisorAlert(simcity.kRegionDataLayer_Shoppers, simcity.kRegionAdvisorText.shoppers.neededW3)
    }
  }
};
simcity.kRegionalAlertsFreight = {
  connectionData : [new simcity.kRegionalCitiesResourceLocalRCI],
  update : function (a) {
    var b = this.connectionData[0],
    c = b.data.freightConsumedYesterday,
    d = b.data.freightProducedYesterday,
    e = simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData.mPlayingBox.uid;
    if (simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData.mConnectedUnits[a] || a === e) {
      var f = simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData.mCityTradeData[a].connections[e];
      if (((f = f ? f.connectionData : null) ||
          a === e) && a === e)
        c < d ? simcity.AddRegionAdvisorAlert(simcity.kRegionDataLayer_Freight, a, simcity.kRegionAdvisorText.freight.excess) : simcity.ClearRegionAdvisorAlert(simcity.kRegionDataLayer_Freight, simcity.kRegionAdvisorText.freight.excess), a = simcity.TestRegionConnectionValue(a, "LocalRCI", ["freightConsumedYesterday", "freightProducedYesterday"], "->", 0), 0 < a.length ? simcity.AddRegionAdvisorAlert(simcity.kRegionDataLayer_Freight, a[0], simcity.kRegionAdvisorText.freight.needed) : simcity.ClearRegionAdvisorAlert(simcity.kRegionDataLayer_Freight,
          simcity.kRegionAdvisorText.freight.needed);
      f && (b.data.needText = new scrui.cLocaleString("RegionView.json", "0x0e125922", "needs freight"), b.data.needIcon = "icn_alert-nofreight.png", b.data.key = simcity.kRegionDataLayer_Freight, b.data.opportunityExists = !1, b.data.needExists = !1)
    }
  }
};
simcity.kRegionalAlertsStudents = {
  connectionData : [new simcity.kRegionalCitiesResourceStudents, new simcity.kRegionalCitiesResourceTransport],
  update : function (a) {
    var b = this.connectionData[1],
    c = this.connectionData[0],
    d = simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData.mPlayingBox.uid;
    if (simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData.mConnectedUnits[a] || a === d) {
      var e = simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData.mCityTradeData[a].connections[d];
      if (e && e.connectionData || a ===
        d) {
        var e = b.data.excessStudentsE2 + b.data.excessStudentsE3,
        c = c.data.schoolBusR2Stop,
        f = b.data.schoolBusR2,
        b = b.data.totalDesksE2 + b.data.totalDesksE3;
        if (a === d) {
          var d = simcity.TestRegionConnectionValue(a, "transport", "schoolBusR2", "<", 1),
          g = simcity.TestRegionConnectionValue(a, "education", ["excessStudentsE2", "excessStudentsE3"], ">", 0),
          h = simcity.TestRegionConnectionValue(a, "transport", "schoolBusR2Stop", "<", 1),
          i = simcity.TestRegionConnectionValue(a, "education", ["totalDesksE2", "totalDesksE3"], ">", 0);
          0 < g.length ?
          simcity.AddRegionAdvisorAlert(simcity.kRegionDataLayer_Students, g[0], simcity.kRegionAdvisorText.students.excessNoOp) : simcity.ClearRegionAdvisorAlert(simcity.kRegionDataLayer_Students, simcity.kRegionAdvisorText.students.excessNoOp);
          var j = simcity.GetArrayComparisonIndex(i, h);
          0 < g.length && 0 < b && -1 !== j ? simcity.AddRegionAdvisorAlert(simcity.kRegionDataLayer_Students, h[j], simcity.kRegionAdvisorText.students.excessNoStops) : simcity.ClearRegionAdvisorAlert(simcity.kRegionDataLayer_Students, simcity.kRegionAdvisorText.students.excessNoStops);
          0 < g.length && 0 < b && 0 === f ? simcity.AddRegionAdvisorAlert(simcity.kRegionDataLayer_Students, g[0], simcity.kRegionAdvisorText.students.excessNoBuses) : simcity.ClearRegionAdvisorAlert(simcity.kRegionDataLayer_Students, simcity.kRegionAdvisorText.students.excessNoBuses);
          0 < e ? simcity.AddRegionAdvisorAlert(simcity.kRegionDataLayer_Students, a, simcity.kRegionAdvisorText.students.neededNoOp) : simcity.ClearRegionAdvisorAlert(simcity.kRegionDataLayer_Students, simcity.kRegionAdvisorText.students.neededNoOp);
          j = simcity.GetArrayComparisonIndex(i,
              d);
          0 < e && -1 !== j ? simcity.AddRegionAdvisorAlert(simcity.kRegionDataLayer_Students, d[j], simcity.kRegionAdvisorText.students.neededNoNeighborBuses) : simcity.ClearRegionAdvisorAlert(simcity.kRegionDataLayer_Students, simcity.kRegionAdvisorText.students.neededNoNeighborBuses);
          0 < e && 0 < i.length && 1 > c ? simcity.AddRegionAdvisorAlert(simcity.kRegionDataLayer_Students, i[0], simcity.kRegionAdvisorText.students.neededNoStops) : simcity.ClearRegionAdvisorAlert(simcity.kRegionDataLayer_Students, simcity.kRegionAdvisorText.students.neededNoStops)
        }
      }
    }
  }
};
simcity.kRegionalAlertsTransport0 = {
  connectionData : [new simcity.kRegionalCitiesResourceResidential, new simcity.kRegionalCitiesResourceTransport],
  update : function (a) {
    var b = this.connectionData[1],
    c = this.connectionData[0],
    d = simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData.mPlayingBox.uid;
    if ((simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData.mConnectedUnits[a] || a === d) && a === d) {
      var d = simcity.TestRegionConnectionValue(a, "transport", ["numberRailConnections"], ">", 0),
      e = b.data.excessWorkersW1 +
        b.data.excessWorkersW2 + b.data.excessWorkersW3,
      c = c.data.trainR2Stop,
      f = simcity.TestRegionConnectionValue(a, "residential", ["excessJobsW1", "excessJobsW2", "excessJobsW3"], ">", 0),
      g = simcity.TestRegionConnectionValue(a, "transport", ["trainT2Stop"], "<", 1),
      h = simcity.GetArrayComparisonIndex(f, g);
      0 < e && 0 === c && -1 != h ? simcity.AddRegionAdvisorAlert(simcity.kRegionDataLayer_TransportLevels[0], g[h], simcity.kRegionAdvisorText.transport.railNeeded) : simcity.ClearRegionAdvisorAlert(simcity.kRegionDataLayer_TransportLevels[0],
        simcity.kRegionAdvisorText.transport.railNeeded);
      var i = simcity.TestRegionConnectionValue(a, "transport", ["trainT2Stop"], ">", 0),
      h = simcity.GetArrayComparisonIndex(f, i);
      0 < e && 0 === c && -1 !== h && 0 < d ? simcity.AddRegionAdvisorAlert(simcity.kRegionDataLayer_TransportLevels[0], i[h], simcity.kRegionAdvisorText.transport.railNeededNoStation) : simcity.ClearRegionAdvisorAlert(simcity.kRegionDataLayer_TransportLevels[0], simcity.kRegionAdvisorText.transport.railNeededNoStation);
      a = simcity.TestRegionConnectionValue(a, "residential",
          ["excessWorkersW1", "excessWorkersW2", "excessWorkersW3"], ">", 0);
      b = b.data.excessJobsW1 + b.data.excessJobsW2 + b.data.excessJobsW3;
      h = simcity.GetArrayComparisonIndex(a, g);
      0 < b && 0 === c && -1 != h ? simcity.AddRegionAdvisorAlert(simcity.kRegionDataLayer_TransportLevels[0], g[h], simcity.kRegionAdvisorText.transport.railExcess) : simcity.ClearRegionAdvisorAlert(simcity.kRegionDataLayer_TransportLevels[0], simcity.kRegionAdvisorText.transport.railExcess);
      h = simcity.GetArrayComparisonIndex(a, i);
      0 < b && 0 === c && -1 != h && 0 < d ? simcity.AddRegionAdvisorAlert(simcity.kRegionDataLayer_TransportLevels[0],
        i[h], simcity.kRegionAdvisorText.transport.railExcessNoStation) : simcity.ClearRegionAdvisorAlert(simcity.kRegionDataLayer_TransportLevels[0], simcity.kRegionAdvisorText.transport.railExcessNoStation)
    }
  }
};
simcity.kRegionalAlertsTransport2 = {
  connectionData : [new simcity.kRegionalCitiesResourceResidential, new simcity.kRegionalCitiesResourceTransport],
  update : function (a) {
    var b = this.connectionData[1],
    c = this.connectionData[0],
    d = simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData.mPlayingBox.uid;
    if ((simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData.mConnectedUnits[a] || a === d) && a === d) {
      var e = b.data.excessWorkersW1 + b.data.excessWorkersW2 + b.data.excessWorkersW3,
      f = simcity.TestRegionConnectionValue(a,
          "residential", ["excessJobsW1", "excessJobsW2", "excessJobsW3"], ">", 0),
      d = simcity.TestRegionConnectionValue(a, "transport", ["busR2Station"], "<", 1),
      g = c.data.busR2Station,
      h = simcity.GetArrayComparisonIndex(f, d);
      0 < e && 0 === g && -1 != h ? simcity.AddRegionAdvisorAlert(simcity.kRegionDataLayer_TransportLevels[2], d[h], simcity.kRegionAdvisorText.transport.busNeeded) : simcity.ClearRegionAdvisorAlert(simcity.kRegionDataLayer_TransportLevels[2], simcity.kRegionAdvisorText.transport.busNeeded);
      var c = c.data.busR2Stop,
      i = simcity.TestRegionConnectionValue(a,
          "transport", ["busR2Station"], ">", 0),
      h = simcity.GetArrayComparisonIndex(f, i);
      0 < e && 0 === c && -1 != h ? simcity.AddRegionAdvisorAlert(simcity.kRegionDataLayer_TransportLevels[2], i[h], simcity.kRegionAdvisorText.transport.busNeededNoStops) : simcity.ClearRegionAdvisorAlert(simcity.kRegionDataLayer_TransportLevels[2], simcity.kRegionAdvisorText.transport.busNeededNoStops);
      a = simcity.TestRegionConnectionValue(a, "residential", ["excessWorkersW1", "excessWorkersW2", "excessWorkersW3"], ">", 0);
      b = b.data.excessJobsW1 + b.data.excessJobsW2 +
        b.data.excessJobsW3;
      h = simcity.GetArrayComparisonIndex(a, d);
      0 < b && 0 === g && -1 != h ? simcity.AddRegionAdvisorAlert(simcity.kRegionDataLayer_TransportLevels[2], d[h], simcity.kRegionAdvisorText.transport.busExcess) : simcity.ClearRegionAdvisorAlert(simcity.kRegionDataLayer_TransportLevels[2], simcity.kRegionAdvisorText.transport.busExcess);
      h = simcity.GetArrayComparisonIndex(a, i);
      0 < b && 0 === c && -1 != h ? simcity.AddRegionAdvisorAlert(simcity.kRegionDataLayer_TransportLevels[2], i[h], simcity.kRegionAdvisorText.transport.busExcessNoStops) :
      simcity.ClearRegionAdvisorAlert(simcity.kRegionDataLayer_TransportLevels[2], simcity.kRegionAdvisorText.transport.busExcessNoStops)
    }
  }
};
simcity.kRegionalAlertsTransport3 = {
  connectionData : [new simcity.kRegionalCitiesResourceResidential, new simcity.kRegionalCitiesResourceTransport],
  update : function (a) {
    var b = this.connectionData[1],
    c = this.connectionData[0],
    d = simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData.mPlayingBox.uid;
    if ((simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData.mConnectedUnits[a] || a === d) && a === d) {
      var d = c.data.numberBoatConnections,
      e = b.data.excessWorkersW1 + b.data.excessWorkersW2 + b.data.excessWorkersW3,
      c = c.data.ferryT1Stop,
      f = simcity.TestRegionConnectionValue(a, "residential", ["excessJobsW1", "excessJobsW2", "excessJobsW3"], ">", 0),
      g = simcity.TestRegionConnectionValue(a, "transport", ["ferryT1Stop"], "<", 1),
      h = simcity.GetArrayComparisonIndex(f, g);
      0 < e && 0 === c && -1 != h ? simcity.AddRegionAdvisorAlert(simcity.kRegionDataLayer_TransportLevels[3], g[h], simcity.kRegionAdvisorText.transport.ferryNeeded) : simcity.ClearRegionAdvisorAlert(simcity.kRegionDataLayer_TransportLevels[3], simcity.kRegionAdvisorText.transport.ferryNeeded);
      var i = simcity.TestRegionConnectionValue(a,
          "transport", ["ferryT1Stop"], ">", 0),
      h = simcity.GetArrayComparisonIndex(f, i);
      0 < e && 0 === c && -1 != h && 0 < d ? simcity.AddRegionAdvisorAlert(simcity.kRegionDataLayer_TransportLevels[3], i[h], simcity.kRegionAdvisorText.transport.ferryNeededNoTerminal) : simcity.ClearRegionAdvisorAlert(simcity.kRegionDataLayer_TransportLevels[3], simcity.kRegionAdvisorText.transport.ferryNeededNoTerminal);
      a = simcity.TestRegionConnectionValue(a, "residential", ["excessWorkersW1", "excessWorkersW2", "excessWorkersW3"], ">", 0);
      b = b.data.excessJobsW1 +
        b.data.excessJobsW2 + b.data.excessJobsW3;
      h = simcity.GetArrayComparisonIndex(a, g);
      0 < b && 0 === c && -1 != h ? simcity.AddRegionAdvisorAlert(simcity.kRegionDataLayer_TransportLevels[3], g[h], simcity.kRegionAdvisorText.transport.ferryExcess) : simcity.ClearRegionAdvisorAlert(simcity.kRegionDataLayer_TransportLevels[3], simcity.kRegionAdvisorText.transport.ferryExcess);
      h = simcity.GetArrayComparisonIndex(a, i);
      0 < b && 0 === c && -1 != h && 0 < d ? simcity.AddRegionAdvisorAlert(simcity.kRegionDataLayer_TransportLevels[3], i[h], simcity.kRegionAdvisorText.transport.ferryExcessNoTerminal) :
      simcity.ClearRegionAdvisorAlert(simcity.kRegionDataLayer_TransportLevels[3], simcity.kRegionAdvisorText.transport.ferryExcessNoTerminal)
    }
  }
};
simcity.kRegionalAlertsTransport = {
  connectionData : [new simcity.kRegionalCitiesResourceResidential, new simcity.kRegionalCitiesResourceTransport],
  update : function (a) {
    var b = this.connectionData[0],
    c = simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData.mPlayingBox.uid;
    if ((simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData.mConnectedUnits[a] || a === c) && a === c) {
      var c = b.data.outgoingRoadTraffic / b.data.outgoingRoadCapacity,
      d = b.data.incomingRoadTraffic / b.data.incomingRoadCapacity,
      e = b.data.busR2Station;
      0.9 < c && 0.9 < d && 0 === e ? simcity.AddRegionAdvisorAlert(simcity.kRegionDataLayer_Transport, a, simcity.kRegionAdvisorText.transport.localBusNeeded) : simcity.ClearRegionAdvisorAlert(simcity.kRegionDataLayer_Transport, simcity.kRegionAdvisorText.transport.localBusNeeded);
      var e = b.data.trainR2Stop,
      f = simcity.TestRegionConnectionValue(a, "transport", ["numberRailConnections"], ">", 0);
      0.9 < c && 0.9 < d && 0 === e && 0 < f ? simcity.AddRegionAdvisorAlert(simcity.kRegionDataLayer_Transport, a, simcity.kRegionAdvisorText.transport.localRailNeeded) :
      simcity.ClearRegionAdvisorAlert(simcity.kRegionDataLayer_Transport, simcity.kRegionAdvisorText.transport.localRailNeeded);
      e = b.data.ferryT1Stop;
      b = b.data.numberBoatConnections;
      0.9 < c && 0.9 < d && 0 === e && 0 < b ? simcity.AddRegionAdvisorAlert(simcity.kRegionDataLayer_Transport, a, simcity.kRegionAdvisorText.transport.localFerryNeeded) : simcity.ClearRegionAdvisorAlert(simcity.kRegionDataLayer_Transport, simcity.kRegionAdvisorText.transport.localFerryNeeded)
    }
  }
};
simcity.kRegionalAlertsGreatWorks = {
  connectionData : [new simcity.kRegionalCitiesResourceGreatWorks],
  update : function () {
    var a = simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData.mPlayingBox.uid,
    b;
    b = this.connectionData;
    b.opportunityExists = !1;
    b.needExists = !1;
    b.availabilityExists = !1;
    b.key = "GreatWorks";
    b.needIcon = "icn_region_construction.png";
    b.needText = new scrui.cLocaleString("RegionView.json", "0x0eb9ca48", "needs contribution");
    b.opportunityExists = !1;
    b.needExists = !1;
    var c = b.gwContribution,
    d = b.isOperating;
    b.gwSignedUp ? c ? d || (b.needExists = !0, b.needText = new scrui.cLocaleString("RegionView.json", "0x0eb9ca83", "needs operating help")) : (b.needExists = !0, b.needText = new scrui.cLocaleString("RegionView.json", "0x0eb9ca48", "needs contribution")) : b.opportunityExists = !0;
    if (null != b.noSelectedGreatWorks)
      d = [], 0 < b.Power_RegionalSolarPlant_Unlocked && d.push(simcity.kRegionAdvisorText.greatworks.solarFarmSuggestion), 0 < b.arcologyUnlocked && d.push(simcity.kRegionAdvisorText.greatworks.arcologySuggestion), 0 < b.spaceCenterUnlocked &&
      d.push(simcity.kRegionAdvisorText.greatworks.spaceCenterSuggestion), 0 < b.internationalAirportUnlocked && d.push(simcity.kRegionAdvisorText.greatworks.internationalAirportSuggestion), 0 < d.length && (c = Math.floor(Math.random() * d.length), simcity.AddRegionAdvisorAlert(simcity.kRegionDataLayer_GreatWorks, a, d[c]));
    else if (null === b.noSelectedGreatWorks && null === b.isOperating && (1 === b.gwConstructionStage && (0 < c && 0 === b.gwContribution1 && 0 === b.gwContribution2 && 0 === b.gwContribution3) && (simcity.AddRegionAdvisorAlert(simcity.kRegionDataLayer_GreatWorks,
            a, simcity.kRegionAdvisorText.greatworks.gwConstructionStalled), simcity.ClearRegionAdvisorAlert(simcity.kRegionDataLayer_GreatWorks, simcity.kRegionAdvisorText.greatworks.gwNeedsConstructionMaterials), simcity.ClearRegionAdvisorAlert(simcity.kRegionDataLayer_GreatWorks, simcity.kRegionAdvisorText.greatworks.gwNeedsConstructionWorkers)), 0 === c && 1 === b.gwConstructionStage && (simcity.AddRegionAdvisorAlert(simcity.kRegionDataLayer_GreatWorks, a, simcity.kRegionAdvisorText.greatworks.gwNeedsConstructionMaterials),
          simcity.ClearRegionAdvisorAlert(simcity.kRegionDataLayer_GreatWorks, simcity.kRegionAdvisorText.greatworks.gwConstructionStalled), simcity.ClearRegionAdvisorAlert(simcity.kRegionDataLayer_GreatWorks, simcity.kRegionAdvisorText.greatworks.gwNeedsConstructionWorkers)), 2 === b.gwConstructionStage && 0 < b.lacksConstructionWorkers))
      simcity.AddRegionAdvisorAlert(simcity.kRegionDataLayer_GreatWorks, a, simcity.kRegionAdvisorText.greatworks.gwNeedsConstructionWorkers), simcity.ClearRegionAdvisorAlert(simcity.kRegionDataLayer_GreatWorks,
        simcity.kRegionAdvisorText.greatworks.gwConstructionStalled), simcity.ClearRegionAdvisorAlert(simcity.kRegionDataLayer_GreatWorks, simcity.kRegionAdvisorText.greatworks.gwNeedsConstructionMaterials);
    if (null != b.isOperating) {
      b.hasSolarFarm && (d = Math.floor(2 * Math.random() + 1), 0 === b.hasWorkers ? simcity.AddRegionAdvisorAlert(simcity.kRegionDataLayer_GreatWorks, a, simcity.kRegionAdvisorText.greatworks.solarFarmNeedsWorkers) : simcity.ClearRegionAdvisorAlert(simcity.kRegionDataLayer_GreatWorks, simcity.kRegionAdvisorText.greatworks.solarFarmNeedsWorkers),
        0 < b.gwMissionInProgress && 1 === d ? simcity.AddRegionAdvisorAlert(simcity.kRegionDataLayer_GreatWorks, a, simcity.kRegionAdvisorText.greatworks.solarFarmCrisisMissionInProgress1) : simcity.ClearRegionAdvisorAlert(simcity.kRegionDataLayer_GreatWorks, simcity.kRegionAdvisorText.greatworks.solarFarmCrisisMissionInProgress1), 0 < b.gwMissionInProgress && 2 === d ? simcity.AddRegionAdvisorAlert(simcity.kRegionDataLayer_GreatWorks, a, simcity.kRegionAdvisorText.greatworks.solarFarmCrisisMissionInProgress2) : simcity.ClearRegionAdvisorAlert(simcity.kRegionDataLayer_GreatWorks,
          simcity.kRegionAdvisorText.greatworks.solarFarmCrisisMissionInProgress2), 6 < b.timeOfDay && 18 > b.timeOfDay ? simcity.AddRegionAdvisorAlert(simcity.kRegionDataLayer_GreatWorks, a, simcity.kRegionAdvisorText.greatworks.solarFarmPowerDay) : simcity.ClearRegionAdvisorAlert(simcity.kRegionDataLayer_GreatWorks, simcity.kRegionAdvisorText.greatworks.solarFarmPowerDay), 6 >= b.timeOfDay && 18 <= b.timeOfDay ? simcity.AddRegionAdvisorAlert(simcity.kRegionDataLayer_GreatWorks, a, simcity.kRegionAdvisorText.greatworks.solarFarmPowerNight) :
        simcity.ClearRegionAdvisorAlert(simcity.kRegionDataLayer_GreatWorks, simcity.kRegionAdvisorText.greatworks.solarFarmPowerDay));
      b.hasArcology && (0 === b.hasPower ? simcity.AddRegionAdvisorAlert(simcity.kRegionDataLayer_GreatWorks, a, simcity.kRegionAdvisorText.greatworks.arcologyNeedsPower) : simcity.ClearRegionAdvisorAlert(simcity.kRegionDataLayer_GreatWorks, simcity.kRegionAdvisorText.greatworks.arcologyNeedsPower), 0 === b.hasWater ? simcity.AddRegionAdvisorAlert(simcity.kRegionDataLayer_GreatWorks, a, simcity.kRegionAdvisorText.greatworks.arcologyNeedsWater) :
        simcity.ClearRegionAdvisorAlert(simcity.kRegionDataLayer_GreatWorks, simcity.kRegionAdvisorText.greatworks.arcologyNeedsWater), 0 < b.gwMissionInProgress ? simcity.AddRegionAdvisorAlert(simcity.kRegionDataLayer_GreatWorks, a, simcity.kRegionAdvisorText.greatworks.arcologyCrisisMissionInProgress) : simcity.ClearRegionAdvisorAlert(simcity.kRegionDataLayer_GreatWorks, simcity.kRegionAdvisorText.greatworks.arcologyCrisisMissionInProgress), 1E3 > b.totalJobs ? simcity.AddRegionAdvisorAlert(simcity.kRegionDataLayer_GreatWorks,
          a, simcity.kRegionAdvisorText.greatworks.arcologyNotEnoughMoney) : simcity.ClearRegionAdvisorAlert(simcity.kRegionDataLayer_GreatWorks, simcity.kRegionAdvisorText.greatworks.arcologyNotEnoughMoney));
      if (b.hasSpaceCenter) {
        c = Math.floor(3 * Math.random() + 1);
        d = Math.floor(2 * Math.random() + 1);
        1 === b.launchCountdown ? simcity.AddRegionAdvisorAlert(simcity.kRegionDataLayer_GreatWorks, a, simcity.kRegionAdvisorText.greatworks.spaceCenterCountdownInProgress) : simcity.ClearRegionAdvisorAlert(simcity.kRegionDataLayer_GreatWorks,
          simcity.kRegionAdvisorText.greatworks.spaceCenterCountdownInProgress);
        var e = null != b.satelliteLaunchedTimer ? b.satelliteLaunchedTimer : 0,
        f = null != b.satelliteLaunchedTimer ? b.satelliteLaunchedTimer.capacity - 20 : 0;
        e.amount < f && 1 === c ? simcity.AddRegionAdvisorAlert(simcity.kRegionDataLayer_GreatWorks, a, simcity.kRegionAdvisorText.greatworks.spaceCenterSatelliteLaunchedSkill) : simcity.ClearRegionAdvisorAlert(simcity.kRegionDataLayer_GreatWorks, simcity.kRegionAdvisorText.greatworks.spaceCenterSatelliteLaunchedSkill);
        e.amount < f && 2 === c ? simcity.AddRegionAdvisorAlert(simcity.kRegionDataLayer_GreatWorks, a, simcity.kRegionAdvisorText.greatworks.spaceCenterSatelliteLaunchedTourism) : simcity.ClearRegionAdvisorAlert(simcity.kRegionDataLayer_GreatWorks, simcity.kRegionAdvisorText.greatworks.spaceCenterSatelliteLaunchedTourism);
        e.amount < f && 3 === c ? simcity.AddRegionAdvisorAlert(simcity.kRegionDataLayer_GreatWorks, a, simcity.kRegionAdvisorText.greatworks.spaceCenterSatelliteLaunchedRelaunch) : simcity.ClearRegionAdvisorAlert(simcity.kRegionDataLayer_GreatWorks,
          simcity.kRegionAdvisorText.greatworks.spaceCenterSatelliteLaunchedRelaunch);
        0 < b.gwMissionInProgress && 1 === d ? simcity.AddRegionAdvisorAlert(simcity.kRegionDataLayer_GreatWorks, a, simcity.kRegionAdvisorText.greatworks.spaceCenterCrisisMissionInProgress1) : simcity.ClearRegionAdvisorAlert(simcity.kRegionDataLayer_GreatWorks, simcity.kRegionAdvisorText.greatworks.spaceCenterCrisisMissionInProgress1);
        0 < b.gwMissionInProgress && 2 === d ? simcity.AddRegionAdvisorAlert(simcity.kRegionDataLayer_GreatWorks, a, simcity.kRegionAdvisorText.greatworks.spaceCenterCrisisMissionInProgress2) :
        simcity.ClearRegionAdvisorAlert(simcity.kRegionDataLayer_GreatWorks, simcity.kRegionAdvisorText.greatworks.spaceCenterCrisisMissionInProgress2);
        200 > b.attractionLevel ? simcity.AddRegionAdvisorAlert(simcity.kRegionDataLayer_GreatWorks, a, simcity.kRegionAdvisorText.greatworks.spaceCenterLowTouristLevel) : simcity.ClearRegionAdvisorAlert(simcity.kRegionDataLayer_GreatWorks, simcity.kRegionAdvisorText.greatworks.spaceCenterLowTouristLevel)
      }
      b.hasInternationalAirport && (d = Math.floor(2 * Math.random() + 1), 0 === b.hasWorkers ?
        simcity.AddRegionAdvisorAlert(simcity.kRegionDataLayer_GreatWorks, a, simcity.kRegionAdvisorText.greatworks.internationalAirportNeedsWorkers) : simcity.ClearRegionAdvisorAlert(simcity.kRegionDataLayer_GreatWorks, simcity.kRegionAdvisorText.greatworks.internationalAirportNeedsWorkers), 0 === b.hasPower ? simcity.AddRegionAdvisorAlert(simcity.kRegionDataLayer_GreatWorks, a, simcity.kRegionAdvisorText.greatworks.internationalAirportNeedsPower) : simcity.ClearRegionAdvisorAlert(simcity.kRegionDataLayer_GreatWorks,
          simcity.kRegionAdvisorText.greatworks.internationalAirportNeedsPower), 0 < b.gwMissionInProgress && 1 === d ? simcity.AddRegionAdvisorAlert(simcity.kRegionDataLayer_GreatWorks, a, simcity.kRegionAdvisorText.greatworks.internationalAirportCrisisMissionInProgress1) : simcity.ClearRegionAdvisorAlert(simcity.kRegionDataLayer_GreatWorks, simcity.kRegionAdvisorText.greatworks.internationalAirportCrisisMissionInProgress1), 0 < b.gwMissionInProgress && 2 === d ? simcity.AddRegionAdvisorAlert(simcity.kRegionDataLayer_GreatWorks,
          a, simcity.kRegionAdvisorText.greatworks.internationalAirportCrisisMissionInProgress2) : simcity.ClearRegionAdvisorAlert(simcity.kRegionDataLayer_GreatWorks, simcity.kRegionAdvisorText.greatworks.internationalAirportCrisisMissionInProgress2), 0 === b.hasBusStops ? simcity.AddRegionAdvisorAlert(simcity.kRegionDataLayer_GreatWorks, a, simcity.kRegionAdvisorText.greatworks.internationalAirportNeedsBuses) : simcity.ClearRegionAdvisorAlert(simcity.kRegionDataLayer_GreatWorks, simcity.kRegionAdvisorText.greatworks.internationalAirportNeedsBuses),
        0 === b.hasRailStops ? simcity.AddRegionAdvisorAlert(simcity.kRegionDataLayer_GreatWorks, a, simcity.kRegionAdvisorText.greatworks.internationalAirportNeedsRail) : simcity.ClearRegionAdvisorAlert(simcity.kRegionDataLayer_GreatWorks, simcity.kRegionAdvisorText.greatworks.internationalAirportNeedsRail), 200 > b.attractionLevel ? simcity.AddRegionAdvisorAlert(simcity.kRegionDataLayer_GreatWorks, a, simcity.kRegionAdvisorText.greatworks.internationalAirportLowTouristLevel) : simcity.ClearRegionAdvisorAlert(simcity.kRegionDataLayer_GreatWorks,
          simcity.kRegionAdvisorText.greatworks.internationalAirportLowTouristLevel), 100 > b.freight ? simcity.AddRegionAdvisorAlert(simcity.kRegionDataLayer_GreatWorks, a, simcity.kRegionAdvisorText.greatworks.internationalAirportLowFreight) : simcity.ClearRegionAdvisorAlert(simcity.kRegionDataLayer_GreatWorks, simcity.kRegionAdvisorText.greatworks.internationalAirportLowFreight))
    }
  }
};
simcity.kRegionalAlertsGifting = {
  connectionData : [new simcity.kRegionalCitiesGiftableResourcesArrows],
  update : function (a) {
    var b = this.connectionData[0].data,
    c = simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData.mPlayingBox.uid;
    if (simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData.mConnectedUnits[a]) {
      var d = simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData.mCityTradeData[c],
      c = simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData.mCityTradeData[a];
      d && (d.giftableResources && c && c.giftableResources) &&
      ((d = d.giftableResources.data, c = c.giftableResources.data, b.key = simcity.kRegionDataLayer_ResourceGifting, b.opportunityExists = !1, b.needExists = !1, 1E4 >= c.simoleons ? (b.needIcon = "icn_alert-no-profitability.png", b.needText = new scrui.cLocaleString("RegionView.json", "0x0f0bcd10", "needs simoleons"), b.needExists = !0) : 1E4 <= c.coalCapacity ? (b.needIcon = "icn_alert-no-coal.png", b.needText = new scrui.cLocaleString("RegionView.json", "0x0f0bcd12", "needs coal"), b.needExists = !0) : 1E4 <= c.oilCrudeCapacity ? (b.needIcon = "icn_alert-no-oil.png",
            b.needText = new scrui.cLocaleString("RegionView.json", "0x0f0bcd18", "needs crude oil"), b.needExists = !0) : 1E4 <= c.oreRawCapacity ? (b.needIcon = "icn_alert-no-ore.png", b.needText = new scrui.cLocaleString("RegionView.json", "0x0f0bcd17", "needs raw ore"), b.needExists = !0) : 1E4 <= c.alloyCapacity ? (b.needIcon = "icn_alert-no-alloy.png", b.needText = new scrui.cLocaleString("RegionView.json", "0x0f0bcd11", "needs alloy"), b.needExists = !0) : 1E4 <= c.plasticCapacity ? (b.needIcon = "icn_alert-no-plastics.png", b.needText = new scrui.cLocaleString("RegionView.json",
                "0x0f0bcd19", "needs plastic"), b.needExists = !0) : 1E4 <= c.electronicsCapacity ? (b.needIcon = "icn_alert-no-electronics.png", b.needText = new scrui.cLocaleString("RegionView.json", "0x0f0bcd15", "needs processors"), b.needExists = !0) : 1E4 <= c.metalCapacity ? (b.needIcon = "icn_alert_warning_metals.png", b.needText = new scrui.cLocaleString("RegionView.json", "0x0f0bcd16", "needs metal"), b.needExists = !0) : 1E4 <= b.fuelCapacity ? (b.needIcon = "icn_alert-no-fuel.png", b.needText = new scrui.cLocaleString("RegionView.json", "0x0f0bcd14",
                "needs fuel"), b.needExists = !0) : 1E4 <= c.computerCapacity ? (b.needIcon = "icn_alert-no-computers.png", b.needText = new scrui.cLocaleString("RegionView.json", "0x0f0bcd13", "needs computers"), b.needExists = !0) : 1E4 <= c.televisionCapacity && (b.needIcon = "icn_alert-no-tvs.png", b.needText = new scrui.cLocaleString("RegionView.json", "0x0f0bcd1a", "needs tvs"), b.needExists = !0), 0 === d.simoleons && 5E4 <= c.simoleons) ? simcity.AddRegionAdvisorAlert(simcity.kRegionDataLayer_ResourceGifting, a, simcity.kRegionAdvisorText.gifting.myCityBankrupt) :
        1E4 >= d.simoleons && 5E4 <= c.simoleons ? simcity.AddRegionAdvisorAlert(simcity.kRegionDataLayer_ResourceGifting, a, simcity.kRegionAdvisorText.gifting.myCityNearingBankruptcy) : 1E4 <= d.coalCapacity && 1E4 <= c.coalStored ? simcity.AddRegionAdvisorAlert(simcity.kRegionDataLayer_ResourceGifting, a, simcity.kRegionAdvisorText.gifting.needCoal) : 1E4 <= d.oilCrudeCapacity && 1E4 <= c.oilCrudeStored ? simcity.AddRegionAdvisorAlert(simcity.kRegionDataLayer_ResourceGifting, a, simcity.kRegionAdvisorText.gifting.needOilCrude) : 1E4 <= d.oreRawCapacity &&
        1E4 <= c.oreRawStored ? simcity.AddRegionAdvisorAlert(simcity.kRegionDataLayer_ResourceGifting, a, simcity.kRegionAdvisorText.gifting.needOreRaw) : 1E4 <= d.alloyCapacity && 1E4 <= c.alloyStored ? simcity.AddRegionAdvisorAlert(simcity.kRegionDataLayer_ResourceGifting, a, simcity.kRegionAdvisorText.gifting.needAlloy) : 1E4 <= d.plasticCapacity && 1E4 <= c.plasticStored ? simcity.AddRegionAdvisorAlert(simcity.kRegionDataLayer_ResourceGifting, a, simcity.kRegionAdvisorText.gifting.needPlastic) : 1E4 <= d.electronicsCapacity && 1E4 <= c.electronicsStored ?
        simcity.AddRegionAdvisorAlert(simcity.kRegionDataLayer_ResourceGifting, a, simcity.kRegionAdvisorText.gifting.needElectronics) : 1E4 <= d.metalCapacity && 1E4 <= c.metalStored ? simcity.AddRegionAdvisorAlert(simcity.kRegionDataLayer_ResourceGifting, a, simcity.kRegionAdvisorText.gifting.needMetal) : 1E4 <= d.fuelCapacity && 1E4 <= c.fuelStored ? simcity.AddRegionAdvisorAlert(simcity.kRegionDataLayer_ResourceGifting, a, simcity.kRegionAdvisorText.gifting.needFuel) : 1E4 <= d.computerCapacity && 1E4 <= c.computerStored ? simcity.AddRegionAdvisorAlert(simcity.kRegionDataLayer_ResourceGifting,
          a, simcity.kRegionAdvisorText.gifting.needComputers) : 1E4 <= d.televisionCapacity && 1E4 <= c.televisionStored ? simcity.AddRegionAdvisorAlert(simcity.kRegionDataLayer_ResourceGifting, a, simcity.kRegionAdvisorText.gifting.needTelevisions) : 5E4 <= d.simoleons && 0 === c.simoleons ? simcity.AddRegionAdvisorAlert(simcity.kRegionDataLayer_ResourceGifting, a, simcity.kRegionAdvisorText.gifting.neighborBankrupt) : 5E4 <= d.simoleons && 1E4 >= c.simoleons ? simcity.AddRegionAdvisorAlert(simcity.kRegionDataLayer_ResourceGifting, a, simcity.kRegionAdvisorText.gifting.neighborNearingBankruptcy) :
        1E4 <= c.coalCapacity && 1E4 <= d.coalStored ? simcity.AddRegionAdvisorAlert(simcity.kRegionDataLayer_ResourceGifting, a, simcity.kRegionAdvisorText.gifting.neighborNeedCoal) : 1E4 <= c.oilCrudeCapacity && 1E4 <= d.oilCrudeStored ? simcity.AddRegionAdvisorAlert(simcity.kRegionDataLayer_ResourceGifting, a, simcity.kRegionAdvisorText.gifting.neighborNeedOilCrude) : 1E4 <= c.oreRawCapacity && 1E4 <= d.oreRawStored ? simcity.AddRegionAdvisorAlert(simcity.kRegionDataLayer_ResourceGifting, a, simcity.kRegionAdvisorText.gifting.neighborNeedOreRaw) :
        1E4 <= c.alloyCapacity && 1E4 <= d.alloyStored ? simcity.AddRegionAdvisorAlert(simcity.kRegionDataLayer_ResourceGifting, a, simcity.kRegionAdvisorText.gifting.neighborNeedAlloy) : 1E4 <= c.plasticCapacity && 1E4 <= d.plasticStored ? simcity.AddRegionAdvisorAlert(simcity.kRegionDataLayer_ResourceGifting, a, simcity.kRegionAdvisorText.gifting.neighborNeedPlastic) : 1E4 <= c.electronicsCapacity && 1E4 <= d.electronicsStored ? simcity.AddRegionAdvisorAlert(simcity.kRegionDataLayer_ResourceGifting, a, simcity.kRegionAdvisorText.gifting.neighborNeedElectronics) :
        1E4 <= c.metalCapacity && 1E4 <= d.metalStored ? simcity.AddRegionAdvisorAlert(simcity.kRegionDataLayer_ResourceGifting, a, simcity.kRegionAdvisorText.gifting.neighborNeedMetal) : 1E4 <= c.fuelCapacity && 1E4 <= d.fuelStored ? simcity.AddRegionAdvisorAlert(simcity.kRegionDataLayer_ResourceGifting, a, simcity.kRegionAdvisorText.gifting.neighborNeedFuel) : 1E4 <= c.computerCapacity && 1E4 <= d.computerStored ? simcity.AddRegionAdvisorAlert(simcity.kRegionDataLayer_ResourceGifting, a, simcity.kRegionAdvisorText.gifting.neighborNeedComputers) :
        1E4 <= c.televisionCapacity && 1E4 <= d.televisionStored ? simcity.AddRegionAdvisorAlert(simcity.kRegionDataLayer_ResourceGifting, a, simcity.kRegionAdvisorText.gifting.neighborNeedTelevisions) : (simcity.ClearRegionAdvisorAlertForBoxID(simcity.kRegionDataLayer_ResourceGifting, a, simcity.kRegionAdvisorText.gifting.myCityBankrupt), simcity.ClearRegionAdvisorAlertForBoxID(simcity.kRegionDataLayer_ResourceGifting, a, simcity.kRegionAdvisorText.gifting.myCityNearingBankruptcy), simcity.ClearRegionAdvisorAlertForBoxID(simcity.kRegionDataLayer_ResourceGifting,
            a, simcity.kRegionAdvisorText.gifting.needCoal), simcity.ClearRegionAdvisorAlertForBoxID(simcity.kRegionDataLayer_ResourceGifting, a, simcity.kRegionAdvisorText.gifting.needOilCrude), simcity.ClearRegionAdvisorAlertForBoxID(simcity.kRegionDataLayer_ResourceGifting, a, simcity.kRegionAdvisorText.gifting.needOreRaw), simcity.ClearRegionAdvisorAlertForBoxID(simcity.kRegionDataLayer_ResourceGifting, a, simcity.kRegionAdvisorText.gifting.needAlloy), simcity.ClearRegionAdvisorAlertForBoxID(simcity.kRegionDataLayer_ResourceGifting,
            a, simcity.kRegionAdvisorText.gifting.needPlastic), simcity.ClearRegionAdvisorAlertForBoxID(simcity.kRegionDataLayer_ResourceGifting, a, simcity.kRegionAdvisorText.gifting.needElectronics), simcity.ClearRegionAdvisorAlertForBoxID(simcity.kRegionDataLayer_ResourceGifting, a, simcity.kRegionAdvisorText.gifting.needMetal), simcity.ClearRegionAdvisorAlertForBoxID(simcity.kRegionDataLayer_ResourceGifting, a, simcity.kRegionAdvisorText.gifting.needFuel), simcity.ClearRegionAdvisorAlertForBoxID(simcity.kRegionDataLayer_ResourceGifting,
            a, simcity.kRegionAdvisorText.gifting.needComputers), simcity.ClearRegionAdvisorAlertForBoxID(simcity.kRegionDataLayer_ResourceGifting, a, simcity.kRegionAdvisorText.gifting.needTelevisions), simcity.ClearRegionAdvisorAlertForBoxID(simcity.kRegionDataLayer_ResourceGifting, a, simcity.kRegionAdvisorText.gifting.neighborBankrupt), simcity.ClearRegionAdvisorAlertForBoxID(simcity.kRegionDataLayer_ResourceGifting, a, simcity.kRegionAdvisorText.gifting.neighborNearingBankruptcy), simcity.ClearRegionAdvisorAlertForBoxID(simcity.kRegionDataLayer_ResourceGifting,
            a, simcity.kRegionAdvisorText.gifting.neighborNeedCoal), simcity.ClearRegionAdvisorAlertForBoxID(simcity.kRegionDataLayer_ResourceGifting, a, simcity.kRegionAdvisorText.gifting.neighborNeedOilCrude), simcity.ClearRegionAdvisorAlertForBoxID(simcity.kRegionDataLayer_ResourceGifting, a, simcity.kRegionAdvisorText.gifting.neighborNeedOreRaw), simcity.ClearRegionAdvisorAlertForBoxID(simcity.kRegionDataLayer_ResourceGifting, a, simcity.kRegionAdvisorText.gifting.neighborNeedAlloy), simcity.ClearRegionAdvisorAlertForBoxID(simcity.kRegionDataLayer_ResourceGifting,
            a, simcity.kRegionAdvisorText.gifting.neighborNeedPlastic), simcity.ClearRegionAdvisorAlertForBoxID(simcity.kRegionDataLayer_ResourceGifting, a, simcity.kRegionAdvisorText.gifting.neighborNeedElectronics), simcity.ClearRegionAdvisorAlertForBoxID(simcity.kRegionDataLayer_ResourceGifting, a, simcity.kRegionAdvisorText.gifting.neighborNeedMetal), simcity.ClearRegionAdvisorAlertForBoxID(simcity.kRegionDataLayer_ResourceGifting, a, simcity.kRegionAdvisorText.gifting.neighborNeedFuel), simcity.ClearRegionAdvisorAlertForBoxID(simcity.kRegionDataLayer_ResourceGifting,
            a, simcity.kRegionAdvisorText.gifting.neighborNeedComputers), simcity.ClearRegionAdvisorAlertForBoxID(simcity.kRegionDataLayer_ResourceGifting, a, simcity.kRegionAdvisorText.gifting.neighborNeedTelevisions)))
    }
  }
};
simcity.TestRegionConnectionValue = function (a, b, c, d, e) {
  function f(a, b, c) {
    if (">" === a) {
      if (b > c)
        return !0
    } else if (b < c)
      return !0;
    return !1
  }
  for (var a = simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData.mCityTradeData[a].connections, g = Object.keys(a), h = [], i = 0, j = g.length; i < j; i++) {
    var k = g[i],
    l = a[k];
    if (l) {
      var m = l.connectionData[b].data;
      if ("string" !== typeof c) {
        l = !1;
        if ("->" == d || "-<" == d || "+>" == d || "<+" == d) {
          for (var n = d, p = 0, q = 0, o = c.length; q < o; q++)
            p = "+>" == n || "+<" == n ? p + m[c[q]] : p - m[c[q]];
          n = "+>" == n || "->" == n ? ">" : "<";
          m = f(n, p, e) ? !0 : !1;
          m && (l = !0)
        } else {
          n = 0;
          for (p = c.length; n < p; n++)
            q = m[c[n]], f(d, q, e) && (l = !0)
        }
        l && h.push(k)
      } else
        q = m[c], f(d, q, e) && h.push(k)
    }
  }
  return h
};
simcity.GetServiceVehiclesSuppliedCount = function (a, b) {
  for (var c = 0, d = simcity.kRegionDataLayers_ContextPanels[a].getServiceVehicles(), e = simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData.mConnectedUnits[b], f = 0; f < d.length; f++) {
    var g = [d[f]],
    h = [],
    i = [];
    simcity.GenerateDataBindingQueries(g, h, {
      argumentList : [e]
    }, i, !1, "queries");
    simcity.RequestDataBindingData(h, g, i, !1, function (a) {
      c = c + a[0].outgoingVehicle
    })
  }
  return c
};
simcity.kRegionalAlerts = [simcity.kRegionalAlertsPower, simcity.kRegionalAlertsWater, simcity.kRegionalAlertsGarbage, simcity.kRegionalAlertsFire, simcity.kRegionalAlertsPolice, simcity.kRegionalAlertsUnemployed, simcity.kRegionalAlertsShoppers, simcity.kRegionalAlertsFreight, simcity.kRegionalAlertsHealth, simcity.kRegionalAlertsSewage, simcity.kRegionalAlertsStudents, simcity.kRegionalAlertsTransport, simcity.kRegionalAlertsTransport0, simcity.kRegionalAlertsTransport2, simcity.kRegionalAlertsTransport3, simcity.kRegionalAlertsGifting];
simcity.DataBindingUtilities = {};
simcity.kResourceTypeIDJavaScript = scrui.DecimalToHex(1735860060);
simcity.kResourceGroupIDLayout = scrui.DecimalToHex(185028186);
simcity.LayoutID = function (a) {
  return simcity.kResourceGroupIDLayout + "!" + scrui.DecimalToHex(scrui.IDFromName(a)) + "." + simcity.kResourceTypeIDJavaScript
};
simcity.GenerateDataBindingQueries = function (a, b, c, d, e, f) {
  for (var g = 0, h = a ? a.length : 0, i = 0; i < h; ++i) {
    var j = a[i];
    if (j.dynamic || !1 === e) {
      var k = null;
      c && (k = c.argumentList, c.hasOwnProperty("argumentLists") && (k = c.argumentLists[i]));
      var l = null;
      f || (f = "queries");
      j.hasOwnProperty(f) && (l = j[f].apply(j, k));
      d.push(l);
      for (var m in l)
        scrui.Assert(-1 === l[m].indexOf(void 0), m + " query contains invalid argument : " + l[m], !0), b.push(scrui.BuildRequestQuery(l[m])), g++
    }
  }
};
simcity.Private_BuildDataBindingResults = function (a, b, c, d) {
  for (var e = b ? b.length : 0, f = Array(e), g = 0, h = 0, i = 0; i < e; ++i) {
    f[i] = {};
    var j = b[i];
    if (j.dynamic || !1 === d) {
      var k = c[g++],
      l;
      for (l in k) {
        k = a[h];
        if (null === k && !j.allowNullResults)
          return scrui.Assert(!1, "Null data binding data: " + l + "\nPublishing scripts may fix this.", !0), null;
        f[i][l] = k;
        h++
      }
    }
  }
  return f
};
simcity.RequestDataBindingData = function (a, b, c, d, e) {
  scrui.RequestGameData(a, function (a) {
    (a = simcity.Private_BuildDataBindingResults(a, b, c, d)) && e(a)
  })
};
simcity.AddSimpleQueries = function (a, b) {
  for (var c in b) {
    var d = b[c];
    scrui.Assert(-1 === d.indexOf(void 0), c + " query contains invalid argument : " + d, !0);
    a.push(scrui.BuildRequestQuery(d))
  }
};
simcity.AddSimpleQueriesWithUnitRefReplacement = function (a, b, c) {
  for (var d in b) {
    var e = b[d],
    f = e.indexOf(simcity.kInvalidUnitRef);
    0 <= f && (e = e.slice(0), e[f] = c);
    scrui.Assert(-1 === e.indexOf(void 0), d + " query contains invalid argument : " + e, !0);
    a.push(scrui.BuildRequestQuery(e))
  }
};
simcity.Private_BuildDataBindingResultsSimple = function (a, b, c) {
  for (var d = Array(b.length), e = 0, f = 0, g = 0, h = b.length; g < h; ++g) {
    d[g] = {};
    for (var i = b[e++], j = 0, k = i.length; j < k; ++j) {
      var l = a[f],
      m = i[j];
      if (null === l && !c)
        return scrui.Assert(!1, "Null data binding data: " + m + "\nPublishing scripts may fix this.", !0), null;
      d[g][m] = l;
      f++
    }
  }
  return d
};
simcity.RequestDataBindingDataSimple = function (a, b, c, d) {
  scrui.RequestGameData(a, function (a) {
    (a = simcity.Private_BuildDataBindingResultsSimple(a, b, d)) && c(a)
  })
};
simcity.HandleDataBindingResults = function (a, b, c, d) {
  for (var e = 0; e < c.length; ++e) {
    var f = c[e];
    if (f.dynamic || !1 === d) {
      var g = null;
      f.controlID && (g = b.FindControlByID(f.controlID), scrui.Assert(null !== g, "HandleDataBindingResults: Control ID " + scrui.DecimalToHex(f.controlID) + " doesn't exist inside rollover layout for this unit."));
      (!f.controlID || null !== g) && f.action(b, g, a[e])
    }
  }
};
simcity.databindings.DataBindingsTutorialCallouts = {};
simcity.kDialogOkay = 0;
simcity.kDialogOkayCancel = 1;
simcity.kDialogTextOnly = 2;
simcity.kDialogNext = 3;
simcity.kDialogOpeningScreen = 4;
simcity.kDialogTutorialEnd = 5;
simcity.kDialogDemoEndScreen = 6;
simcity.kDialogTextOnlyLiftUp = 7;
simcity.kDialogOkayLiftUp = 8;
simcity.kDialogTextOnlyLiftMid = 9;
simcity.kDialogTextOnlyMidLow = 10;
simcity.kDialogOkayLiftMid = 11;
simcity.kDialogTextOnlyLow = 12;
simcity.kDialogOkayLow = 13;
simcity.kDialogTutorialCentered = 14;
simcity.kDialogCenteredDLC = 15;
simcity.TutorialCalloutStates = {};
simcity.kWinIDOpening = 238844901;
simcity.kWinIDClosing = 238845014;
simcity.kTutorialStateObjective1 = 0;
simcity.kTutorialStateObjective2 = 1;
simcity.kTutorialStateObjective3 = 2;
simcity.kTutorialStateObjective4 = 3;
simcity.kTutorialStateObjective5 = 4;
simcity.kTutorialStateObjective6 = 5;
simcity.kTutorialStateObjective7 = 6;
simcity.kTutorialStateObjective8 = 7;
simcity.kTutorialStateObjective9 = 8;
simcity.kTutorialStateOpeningDialog = 100;
simcity.kTutorialStateClosingDialog = 101;
simcity.kTutorialStateProgressToNextState = 102;
simcity.kLayerFireLight = 3468374487;
simcity.kLayerElectricLight = 540208464;
simcity.kBtnBudgetDeselect = 228931054;
simcity.persistentLayout = null;
simcity.cityLogTutorialStateCompleted = 1;
simcity.TutorialMaxisBurgBoxID = 1026;
simcity.TutorialLuckyShoresBoxID = 1027;
simcity.TutorialGreatWorksBoxID = 1030;
simcity.DemoExitButtonTxt = 246381575;
simcity.DemoAvailableReleaseDateTxt = 246381562;
simcity.DemoThanksForPlayingTxt = 246381543;
simcity.DemoPreOrderTxt = 246381551;
simcity.DemoNotFinalSoftwareTxt = 246381202;
simcity.BudgetUIExpensesTxt = 247678664;
simcity.BudgetUIIncomeTxt = 247679368;
simcity.BudgetUITaxesTxt = 247679401;
simcity.BudgetUILoansTxt = 247679425;
simcity.BudgetUIRecentTransactionsTxt = 247679451;
simcity.BudgetUITreasuryTxt = 247679476;
simcity.BudgetHighlightControl = 252080714;
simcity.IncomeHighlightControl = 252080715;
simcity.GetTutorialMissionInfo = function (a) {
  return simcity.gGlobalUIHandler.mMissionUI.MissionInfoFromID(a)
};
simcity.GetRegionalDataLayerButtons = function (a) {
  for (var b = 0; b < simcity.gGlobalUIHandler.mRegionViewUIHandler.mLayerButtons.length; b++) {
    var c = simcity.gGlobalUIHandler.mRegionViewUIHandler.mLayerButtons[b];
    if (c.mUserData == a)
      return c.FindControlByID(simcity.cLayerUIHandler.kBtnLayerToggleOnID)
  }
  return null
};
simcity.MiniTutorialStart = function () {
  simcity.ForceExitEditorMode();
  scrui.PostGameCommand(scrui.BuildCommand(["setspeed", simcity.kSpeedPaused]));
  var a = simcity.gGlobalUIHandler;
  a.mRegionViewUIHandler.ReturnToPlayingCity();
  simcity.ForcePuckUIState("city");
  scrui.PostGameCommand(scrui.BuildCommand(["deselectTool"]));
  gUIManager.FindControlByID(245433542).FindControlByID(simcity.kBtnIDBudget).SetSelected(!1);
  gUIManager.FindControlByID(248200384).FindControlByID(simcity.kBtnIDPopulation).SetSelected(!1);
  null !== a.mToolPaletteUIHandler && null !== a.mToolPaletteUIHandler.mSelectedCategoryButton && a.mToolPaletteUIHandler.CloseToolPanel()
};
simcity.GetAllDataLayersButton = function () {
  return gUIManager.FindControlByID(248193223)
};
simcity.GetRegionViewButton = function () {
  return simcity.gGlobalUIHandler.mRegionCameraButton
};
simcity.GetRegionViewReturnToCityButton = function () {
  return simcity.gGlobalUIHandler.mReturnToCityButton
};
simcity.GetRegionViewClaimCityButton = function () {
  return simcity.gGlobalUIHandler.mRegionViewUIHandler.mSelectedRegionViewItem.mActiveLayout.FindControlByID(235820702)
};
simcity.GetRegionView_ViewCityButton = function (a) {
  return simcity.gGlobalUIHandler.mRegionViewUIHandler.GetCityButton(246461222, a)
};
simcity.GetRegionView_LoadCityButton = function () {
  return simcity.gGlobalUIHandler.mRegionViewUIHandler.mSelectedRegionViewItem ? simcity.gGlobalUIHandler.mRegionViewUIHandler.mSelectedRegionViewItem.mActiveLayout.FindControlByID(235774183) : null
};
simcity.GetAgentButton = function () {
  return simcity.gGlobalUIHandler.mAgentQueryUIHandler.mFollowButtonControl
};
simcity.GetBulldozeButton = function () {
  return simcity.gGlobalUIHandler.mToolPaletteUIHandler.GetBulldozerButton()
};
simcity.GetBudgetButton = function () {
  return gUIManager.FindControlByID(simcity.kBtnIDBudget)
};
simcity.GetBudgetTaxDecrementButton = function () {
  return gUIManager.FindControlByID(212750336).FindControlByID(212691588)
};
simcity.GetDemandBars = function () {
  return gUIManager.FindControlByID(250250740)
};
simcity.GetDemandBarButton = function () {
  return gUIManager.FindControlByID(252673405)
};
simcity.GetRoadUpgradeButton = function () {
  return gUIManager.FindControlByID(251495679)
};
simcity.GetRoadUpgrade = function () {
  return gUIManager.FindControlByID(247762688)
};
simcity.GetRoadDowngrade = function () {
  return gUIManager.FindControlByID(247762686)
};
simcity.GetTradeLotButton = function () {
  var a = simcity.gGlobalUIHandler.mBuildingRolloverManager.mRolloverUI;
  if (a && a.mCurrentLayout) {
    var b = null;
    a.mCurrentLayout.WalkChildren(function (a) {
      if ("Layouts/Rollovers/RolloverItemButton.js" == a.mLayoutPath)
        return b = a, !0
    });
    if (b)
      return b.FindControlByID(simcity.cRolloverUI.kWinIDRolloverItemButton)
  }
  scrui.Assert(!1, "Cannot find import/emport handler.");
  return null
};
simcity.GetImportButton = function () {
  return gUIManager.FindControlByID(234002038)
};
simcity.GetImportOkayButton = function () {
  return gUIManager.FindControlByID(236790941)
};
simcity.GetWorkersW1button = function () {
  return gUIManager.FindControlByID(244739729)
};
simcity.GetBlueInfoButton = function () {
  var a = simcity.gGlobalUIHandler.mToolPaletteUIHandler;
  if (a.mPanelLayout)
    return a.mPanelLayout.FindControlByID(247237927)
};
simcity.GetBigBizButton = function () {
  return simcity.gGlobalUIHandler.mCitySpecializationButton
};
simcity.GetAvatarCityButton = function () {
  return gUIManager.FindControlByID(simcity.cBoundaryUIHandler.kBtnAvatar)
};
simcity.GetPopulationButton = function () {
  return gUIManager.FindControlByID(simcity.kBtnIDPopulation)
};
simcity.GetTradeSwitchButton = function () {
  return gUIManager.FindControlByID(242397758)
};
simcity.GetTabLayerButton = function () {
  return gUIManager.FindControlByID(247923006)
};
simcity.GetExitEditorButton = function () {
  return simcity.gGlobalUIHandler.mToolPaletteUIHandler.mEditorLayout.FindControlByID(simcity.cToolPaletteUIHandler.kBtnExitEditor)
};
simcity.ForceExitEditorMode = function () {
  var a = simcity.gGlobalUIHandler.mToolPaletteUIHandler;
  !0 == a.mEditorIsOpen && a.CloseEditorPanel()
};
simcity.GetPauseButton = function () {
  return simcity.gGlobalUIHandler.mSpeedUIHandler.mSpeedUILayout.FindControlByID(simcity.cSpeedUIHandler.kBtnIDPause)
};
simcity.GetSpeed3Button = function () {
  return simcity.gGlobalUIHandler.mSpeedUIHandler.mSpeedUILayout.FindControlByID(simcity.cSpeedUIHandler.kBtnIDCheetahSpeed)
};
simcity.GetSpeed2Button = function () {
  return simcity.gGlobalUIHandler.mSpeedUIHandler.mSpeedUILayout.FindControlByID(simcity.cSpeedUIHandler.kBtnIDRabbitSpeed)
};
simcity.GetSpeed1Button = function () {
  return simcity.gGlobalUIHandler.mSpeedUIHandler.mSpeedUILayout.FindControlByID(simcity.cSpeedUIHandler.kBtnIDTurtleSpeed)
};
simcity.GetOptionsMenuButton = function () {
  return gUIManager.FindControlByID(simcity.kBtnIDMainMenuToggle)
};
simcity.GetEditBuildingButton = function () {
  var a = simcity.gGlobalUIHandler.mBuildingRolloverManager.mRolloverUI.mBuildingPopupMenu;
  if (a)
    for (var b = 0, c = a.mItemInfo.length; b < c; ++b) {
      var d = a.mItemInfo[b];
      if ("Graphics/Common/Icons/icn-edit.png" === d.dataBinding.iconPath)
        return d.button
    }
  scrui.Assert(!1, "Cannot find edit building button in building rollover.");
  return null
};
simcity.GetOnOffToggleButton = function () {
  var a = simcity.gGlobalUIHandler.mBuildingRolloverManager.mRolloverUI.mBuildingPopupMenu;
  if (a)
    for (var b = 0, c = a.mItemInfo.length; b < c; ++b) {
      var d = a.mItemInfo[b];
      if ("Layouts/PopupMenu/PopupMenuItemToggle-onOff.js" === d.dataBinding.layoutPath)
        return d.button
    }
  scrui.Assert(!1, "Cannot find onoff toggle button in building rollover.");
  return null
};
simcity.GetDeliveryButton = function () {
  var a = simcity.gGlobalUIHandler.mBuildingRolloverManager.mRolloverUI;
  if (a && a.mCurrentLayout) {
    var b = null;
    a.mCurrentLayout.WalkChildren(function (a) {
      if ("Layouts/Rollovers/RolloverResourceGlobalMarketDelivery.js" == a.mLayoutPath)
        return b = a, !0
    });
    if (b)
      return b.FindControlByID(simcity.cRolloverUI.kWinIDRolloverItemButton)
  }
  scrui.Assert(!1, "Cannot find Delivery toggle button in building rollover.");
  return null
};
simcity.GetCameraPosition = function (a, b, c, d) {
  a = [scrui.RequestStringFromVector(a)];
  void 0 !== b && (a.push(b), void 0 !== c && (a.push(c), void 0 !== d && a.push(d)));
  return a
};
simcity.EndTutorialEarly = function () {
  simcity.gGlobalUIHandler.mSpeechBalloonHandler.RemoveAllSpeechBalloons();
  simcity.gGlobalUIHandler.mMissionUI.RemoveAllSimMissions();
  scrui.PostGameCommand(scrui.BuildCommand(["createUnit", scrui.IDFromName("Tutorial_End")]));
  simcity.EndTutorial(!1)
};
simcity.ShowTutorialSpeechBalloon = function (a) {
  var b = simcity.SpeechBalloonPolling.Tutorials.DataBindings[a],
  a = [scrui.BuildRequestQuery([simcity.kDataGetToyOfType, simcity.GetSpeechBalloonTarget(b)])];
  scrui.RequestGameData(a, function (a) {
    (a = a[0]) && simcity.gGlobalUIHandler.mSpeechBalloonHandler.AddSpeechBalloon(b, a)
  })
};
simcity.SetTutorialFlag = function (a) {
  scrui.gUIManager.mRequestManager.RequestConfigurationData(function (b) {
    var c = scrui.kBaseAPIPath + "/citylog";
    b && b.json.configurationValues && (c = b.json.configurationValues.citylog);
    b = scrui.BuildRequestQuery([c, "tutorial"]);
    scrui.gUIManager.mRequestManager.RequestData([b], [["tutorial_state", a]], "post")
  })
};
simcity.GetMayorRatingButton = function () {
  return gUIManager.FindControlByID(simcity.cMayorRating.kBtnMainHappyFace)
};
simcity.GetMayorRatingPanelElement = function (a) {
  return gUIManager.FindControlByID(simcity.cMayorRating.kWinMainContainer).FindControlByID(a)
};
simcity.HandleTutorialFlag = function () {};
simcity.EndTutorial = function (a) {
  gUIManager.mBlockMouseClick = !1;
  gUIManager.SetCaptureControl(null);
  a || simcity.AddTelemetry("SC_UI_END_TUTORIAL", 20);
  simcity.gGlobalUIHandler.mRegionViewUIHandler.allowViewCity = !0;
  simcity.gGlobalUIHandler.mTutorialManager.mTutorialActive = !1;
  simcity.gGlobalUIHandler.mTutorialManager.mTutorialState = simcity.cTutorialManager.kTutorialStateCompleted;
  scrui.PostGameCommand(scrui.BuildCommand(["tutorialActive", "false"]));
  scrui.PostGameCommand(scrui.BuildCommand(["enablePicking", "true"]));
  scrui.PostGameCommand(scrui.BuildCommand(["UnlockCamera"]));
  simcity.gGlobalUIHandler.mIsTutorialEnabled = !1;
  simcity.GetSpeed2Button().SetEnabled(!0);
  simcity.GetSpeed1Button().SetEnabled(!0);
  simcity.GetPauseButton().SetEnabled(!0);
  simcity.gGlobalUIHandler.mIsEditorEnabled = !0;
  simcity.EnableRollover();
  scrui.PostGameCommand(scrui.BuildCommand(["setspeed", simcity.kSpeedRabbit]));
  simcity.gGlobalUIHandler.mTutorialManager.UpdateUIVisibility();
  if (simcity.persistentLayout) {
    var b = simcity.persistentLayout.FindControlByID(simcity.cTutorialCalloutUI.kBtnIDSkip);
    b && b.SetVisibility(!1)
  }
  simcity.gGlobalUIHandler.mMissionUI.mTimeSinceLastMiniTutorialUpdate = 6E4;
  a || (simcity.gGlobalUIHandler.mGlobalUILayout.FindControlByID(241958979).SetVisibility(!0), simcity.ShowTutorialSurvey());
  a && (simcity.gGlobalUIHandler.mBoundaryUIHandler.mContainerControl.SetVisibility(!0), simcity.gGlobalUIHandler.mTutorialManager.ClearTutorialState())
};
simcity.QuitGameToMainMenu = function () {
  scrui.PostGameCommand(scrui.BuildCommand([simcity.kDataQuit]))
};
simcity.DemoCalloutWarningDatabinding = {
  dialogLayoutPath : simcity.kDialogTutorialCentered,
  dialogString : {
    tableID : "Tutorials.json",
    stringID : "0x0f1a5333",
    placeholder : ""
  },
  headerString : {
    tableID : "Tutorials.json",
    stringID : "0x0eaf7b4b",
    placeholder : ""
  },
  stepNumberString : {
    tableID : "Tutorials.json",
    stringID : "0x0e3b8d40",
    placeholder : "1/1"
  },
  onCompletion : function () {
    simcity.gGlobalUIHandler.mTutorialManager.ClearTutorialState()
  }
};
simcity.EndDemoCalloutDatabinding = {
  dialogLayoutPath : simcity.kDialogTutorialEnd,
  dialogString : {
    tableID : "Tutorials.json",
    stringID : "0x0f1a53d3",
    placeholder : ""
  },
  headerString : {
    tableID : "Tutorials.json",
    stringID : "0x0eaf7b4b",
    placeholder : ""
  },
  stepNumberString : {
    tableID : "Tutorials.json",
    stringID : "0x0e3b8d40",
    placeholder : "1/1"
  },
  lockUI : !0,
  init : function () {
    scrui.PostGameCommand(scrui.BuildCommand(["tutorialActive", "true"]));
    simcity.gGlobalUIHandler.mIsTutorialEnabled = !0;
    simcity.PauseGame()
  },
  onCompletion : function () {
    simcity.QuitGameToMainMenu()
  }
};
simcity.DemoWarning = function () {
  simcity.IsTutorialInProgress() && simcity.EndTutorial(!1);
  simcity.gGlobalUIHandler.mMissionUI.RemoveAllSimMissions();
  simcity.gGlobalUIHandler.mTutorialCallout.ShowCallout(simcity.DemoCalloutWarningDatabinding);
  simcity.gGlobalUIHandler.mTutorialManager.SetModalWindow(simcity.gGlobalUIHandler.mTutorialCallout.mCallout.mDialogLayout, !0)
};
simcity.EndDemoBegin = function () {
  simcity.IsTutorialInProgress() && (simcity.EndTutorial(!1), simcity.gGlobalUIHandler.mTutorialManager.ClearTutorialState(), simcity.gGlobalUIHandler.mTutorialDemo && scrui.PostGameCommand(scrui.BuildCommand(["createUnit", scrui.IDFromName("Tutorial_End")])));
  simcity.gGlobalUIHandler.mMissionUI.RemoveAllSimMissions();
  simcity.gGlobalUIHandler.mLayerUIHandler.DeactivateLayer();
  simcity.gGlobalUIHandler.mToolPaletteUIHandler.CloseEditorPanel();
  null !== simcity.gGlobalUIHandler.mToolPaletteUIHandler.mSelectedCategoryButton &&
  simcity.gGlobalUIHandler.mToolPaletteUIHandler.CloseToolPanel();
  scrui.PostGameCommand(scrui.BuildCommand(["deselectTool"]));
  simcity.gGlobalUIHandler.mTutorialCallout.ShowCallout(simcity.EndDemoCalloutDatabinding);
  simcity.gGlobalUIHandler.mTutorialManager.SetModalWindow(simcity.gGlobalUIHandler.mTutorialCallout.mCallout.mDialogLayout, !0)
};
simcity.SetAgentPickingType = function (a) {
  scrui.PostGameCommand(scrui.BuildCommand(["agentPickingType", a]))
};
simcity.EndDemoSCWireEnd = function () {
  simcity.gGlobalUIHandler.HandleGameEvent(simcity.kGameMessageHideGlobalUI, null)
};
simcity.EnableRollover = function () {
  simcity.gGlobalUIHandler.mBuildingRolloverManager && (simcity.gGlobalUIHandler.mBuildingRolloverManager.mRolloverUI.mDisableRollover = !1)
};
simcity.DisableRollover = function () {
  simcity.gGlobalUIHandler.mBuildingRolloverManager && (simcity.gGlobalUIHandler.mBuildingRolloverManager.mRolloverUI.mDisableRollover = !0)
};
simcity.SetTextOnElement = function (a, b) {
  var c = gUIManager.FindControlByID(a);
  c && b && c.SetLocaleText(b)
};
simcity.GetFriendsListButton = function () {
  return gUIManager.FindControlByID(simcity.kBtnFriendList).mParentControl
};
simcity.PreTutorialSetup = function () {
  scrui.PostGameCommand(scrui.BuildCommand(["tutorialActive", "true"]));
  simcity.PauseGame();
  simcity.gGlobalUIHandler.HandleGameEvent(simcity.kGameMessageHideGlobalUI, null);
  simcity.GetRegionViewReturnToCityButton().SetVisibility(!1);
  simcity.GetRegionViewButton().SetVisibility(!1);
  simcity.GetFriendsListButton().SetVisibility(!1);
  simcity.gGlobalUIHandler.mTutorialCallout.mCallout.mTutorialParentWin.SetVisibility(!1);
  simcity.SetTutorialFlag(simcity.cityLogTutorialStateCompleted);
  simcity.GetSpeed2Button().SetEnabled(!1);
  simcity.GetSpeed1Button().SetEnabled(!1);
  simcity.GetPauseButton().SetEnabled(!1);
  simcity.DisableRollover();
  simcity.gGlobalUIHandler.mIsEditorEnabled = !1;
  if (simcity.gGlobalUIHandler.mIsDemo && this.mTutorialDemo)
    simcity.SetUpDemoScreen(), scrui.PostGameCommand(scrui.BuildCommand(["PlayCinematic", 233223628]));
  else {
    simcity.gGlobalUIHandler.mTutorialManager.HideCalloutHelper();
    simcity.TutorialStart();
    scrui.PostGameCommand(scrui.BuildCommand(["setspeed", simcity.kSpeedTurtle]));
    var a = simcity.GetTutorialMissionInfo(scrui.IDFromName("MSCivicWelcometoSimCity"));
    simcity.gGlobalUIHandler.mTutorialManager.SetTutorialState(a, simcity.kTutorialStateProgressToNextState)
  }
};
simcity.SetUpDemoScreen = function () {
  simcity.persistentLayout = gUIManager.LoadLayout("Layouts/PersistentPreAlpha.js", gUIManager.GetRootWindow());
  simcity.SetTextOnElement(simcity.DemoExitButtonTxt, new scrui.cLocaleString("Tutorials.json", "0x0eaf7bc9", "EXIT"));
  simcity.SetTextOnElement(simcity.DemoAvailableReleaseDateTxt, new scrui.cLocaleString("Tutorials.json", "0x0eaf7bb2", "AVAILABLE FEBRUARY 2013"));
  simcity.SetTextOnElement(simcity.DemoThanksForPlayingTxt, new scrui.cLocaleString("Tutorials.json", "0x0eaf7b4b",
      "THANKS for PLAYING"));
  simcity.SetTextOnElement(simcity.DemoPreOrderTxt, new scrui.cLocaleString("Tutorials.json", "0x0eaf7bb1", "PRE-ORDER AT SIMCITY.COM"));
  simcity.SetTextOnElement(simcity.DemoNotFinalSoftwareTxt, new scrui.cLocaleString("Tutorials.json", "0x0eaf7b3c", "Not Final Software"))
};
simcity.SkipTutorial = function () {
  simcity.EndTutorialEarly()
};
simcity.EnableTutorialSkipButton = function () {
  if (simcity.persistentLayout && simcity.gGlobalUIHandler.mIsDemo && simcity.gGlobalUIHandler.mIsTimed && simcity.gGlobalUIHandler.mTutorialDemo) {
    var a = simcity.persistentLayout.FindControlByID(simcity.cTutorialCalloutUI.kBtnIDSkip);
    a.SetVisibility(!0);
    simcity.gEventManager.AddEventListener(simcity.gEventTypes.CLICK, a.GetControlID(), function () {
      simcity.gGlobalUIHandler.mTutorialManager.ClearTutorialState();
      simcity.EndTutorialEarly()
    })
  }
};
simcity.BeginDemoStart = function () {
  simcity.StartDemoTimer()
};
simcity.TutorialStart = function () {
  simcity.gGlobalUIHandler.mIsDemo && this.mTutorialDemo && simcity.BeginDemoStart();
  simcity.gGlobalUIHandler.mRegionViewUIHandler.allowViewCity = !1;
  simcity.gGlobalUIHandler.HandleGameEvent(simcity.kGameMessageShowGlobalUI, null);
  simcity.GetRegionViewReturnToCityButton().SetVisibility(!0);
  simcity.GetRegionViewButton().SetVisibility(!0);
  simcity.GetFriendsListButton().SetVisibility(!0);
  simcity.gGlobalUIHandler.mTutorialCallout.mCallout.mTutorialParentWin.SetVisibility(!0)
};
simcity.TutorialFakeUserData = {};
simcity.TutorialFakeUserData.creator = {
  uri : "/rest/user/0",
  tutorialState : 1,
  id : 0,
  screenName : "Chet Keno",
  email : "mayorkeno@simcity.com",
  nucleusId : 0,
  lastLogin : 0,
  isOnline : "true",
  avatarImage : "Graphics/Tutorial/tutorial_avatar_keno.png",
  cities_count : 1
};
simcity.AssignFakeTutorialUserData = function (a) {
  if (a && a.boxes)
    for (var b = 0; b < a.boxes.length; b++) {
      var c = a.boxes[b];
      if ("1027" == c.uid) {
        c.creator = simcity.TutorialFakeUserData.creator;
        c.name = (new scrui.cLocaleString("AutomatedRegionTemplates.json", "0x144f287b", "Lucky Shores Unlocalized")).LoadAndGetTextSynchronous();
        c.description = "";
        c.creatorId = 0;
        c.creatorName = "Mayor Keno";
        for (b = 0; b < a.claimedBoxes.length; b++)
          a.claimedBoxes[b] && (a.claimedBoxes[b] = c);
        break
      }
    }
  return a
};
simcity.EndDemoEnd = function () {
  simcity.gGlobalUIHandler.mTutorialCallout.mCallout.SetDialogLayout(simcity.kDialogDemoEndScreen)
};
simcity.PauseGame = function () {
  simcity.gGlobalUIHandler.mSpeedUIHandler.GetGameSpeed() != simcity.kSpeedPaused && scrui.PostGameCommand(scrui.BuildCommand(["setspeed", simcity.kSpeedPaused]))
};
simcity.UnpauseGame = function () {
  scrui.PostGameCommand(scrui.BuildCommand(["unpause"]))
};
simcity.StartDemoTimer = function () {
  scrui.PostGameCommand(scrui.BuildCommand(["demotimerstart"]))
};
simcity.TutorialCalloutStates[scrui.IDFromName("MSCivicWelcometoSimCity")] = function (a) {
  var b = [];
  b[simcity.kTutorialStateOpeningDialog] = {
    dialogLayoutPath : simcity.kDialogOpeningScreen,
    dialogString : {
      tableID : "Tutorials.json",
      stringID : "0x0c526d7d",
      placeholder : "tutorial welcome"
    },
    headerString : {
      tableID : "Tutorials.json",
      stringID : "0x0e3b8f10",
      placeholder : "WELCOME!"
    },
    stepNumberString : {
      tableID : "Tutorials.json",
      stringID : "0x0e3b94bb",
      placeholder : "1/2"
    },
    hideAllButtons : !0,
    init : function () {
      simcity.PreTutorialSetup()
    },
    onCompletion : function () {
      var a = simcity.GetTutorialMissionInfo(scrui.IDFromName("MSCivicWelcometoSimCity"));
      simcity.gGlobalUIHandler.mTutorialManager.SetTutorialState(a, simcity.kTutorialStateProgressToNextState)
    },
    onCancelled : function () {
      var a = simcity.gGlobalUIHandler.mMissionUI.MissionInfoFromID(scrui.IDFromName("MSCivicWelcometoSimCity"));
      simcity.ManuallyDestroyMissionUnit(a);
      simcity.gGlobalUIHandler.mMissionUI.RemoveActiveSimMission();
      simcity.gGlobalUIHandler.mTutorialManager.ClearTutorialState();
      simcity.EndTutorial(!1)
    }
  };
  b[simcity.kTutorialStateProgressToNextState] = {
    customCompletionCheck : function () {
      var a = simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData;
      if (0 < simcity.gGlobalUIHandler.mActiveBoxUID)
        for (var b in a.mPlayers) {
          if (0 < a.mPlayers[b].id) {
            var e = simcity.GetTutorialMissionInfo(scrui.IDFromName("MSCivicWelcometoSimCity"));
            simcity.gGlobalUIHandler.mTutorialManager.SetTutorialState(e, simcity.kTutorialStateObjective1)
          }
        }
      else
        e = simcity.GetTutorialMissionInfo(scrui.IDFromName("MSCivicWelcometoSimCity")),
        simcity.gGlobalUIHandler.mTutorialManager.SetTutorialState(e, simcity.kTutorialStateObjective1)
    }
  };
  b[simcity.kTutorialStateObjective1] = {
    dialogLayoutPath : simcity.kDialogOkay,
    dialogString : {
      tableID : "Tutorials.json",
      stringID : "0x0e41c2df",
      placeholder : "tutorial welcome"
    },
    dialogStringTokens : function () {
      var a = simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData,
      b;
      for (b in a.mPlayers)
        if (0 < a.mPlayers[b].id)
          return {
            player_name : a.mPlayers[b].screenName
          }
    },
    headerString : {
      tableID : "Tutorials.json",
      stringID : "0x0e3b8f10",
      placeholder : "WELCOME!"
    },
    stepNumberString : {
      tableID : "Tutorials.json",
      stringID : "0x0e3b8d40",
      placeholder : "1/1"
    },
    hideAllButtons : !0,
    init : function () {
      simcity.UnpauseGame();
      simcity.TutorialStart();
      scrui.PostGameCommand(scrui.BuildCommand(["setspeed", simcity.kSpeedTurtle]));
      var a = new scrui.cLocaleString("AutomatedRegionTemplates.json", "0x3ec84615", "Summer Shores Unlocalized");
      a.LoadString();
      simcity.RenameCity(a.mRawString)
    },
    customCompletionCheck : function () {
      scrui.PostGameCommand(scrui.BuildCommand(["LockCamera"]))
    },
    onCompletion : function () {
      simcity.gGlobalUIHandler.mTutorialManager.CompleteTutorialStep();
      var a = simcity.gGlobalUIHandler.mMissionUI.MissionInfoFromID(scrui.IDFromName("MSCivicWelcometoSimCity"));
      simcity.ManuallyDestroyMissionUnit(a);
      scrui.PostGameCommand(scrui.BuildCommand(["createUnit", scrui.IDFromName("MSTutorialCameraControls")]))
    }
  };
  return b[a] || null
};
simcity.TutorialCalloutStates[scrui.IDFromName("MSTutorialCameraControls")] = function (a) {
  var b = [];
  b[simcity.kTutorialStateClosingDialog] = {
    hideAllButtons : !0,
    onCompletion : function () {
      var a = simcity.gGlobalUIHandler;
      null !== a.mToolPaletteUIHandler && null !== a.mToolPaletteUIHandler.mSelectedCategoryButton && a.mToolPaletteUIHandler.CloseToolPanel();
      scrui.PostGameCommand(scrui.BuildCommand(["deselectTool"]));
      simcity.gGlobalUIHandler.mTutorialManager.SetTutorialState(scrui.IDFromName("MSTutorialCameraControls"),
        simcity.kTutorialStateProgressToNextState)
    }
  };
  b[simcity.kTutorialStateProgressToNextState] = {
    hideAllButtons : !0,
    onCompletion : function () {
      simcity.gGlobalUIHandler.mTutorialManager.ClearTutorialState();
      var a = simcity.gGlobalUIHandler.mMissionUI.MissionInfoFromID(scrui.IDFromName("MSTutorialCameraControls"));
      simcity.ManuallyDestroyMissionUnit(a);
      scrui.PostGameCommand(scrui.BuildCommand(["createUnit", scrui.IDFromName("MSCivicClickSpeechBubble")]))
    }
  };
  b[simcity.kTutorialStateObjective1] = {
    dialogLayoutPath : simcity.kDialogTextOnly,
    dialogString : {
      tableID : "Tutorials.json",
      stringID : "0x0e8d56dc",
      placeholder : "tutorial welcome"
    },
    headerString : {
      tableID : "Tutorials.json",
      stringID : "0x0e8e6a7d",
      placeholder : "CAMERA!"
    },
    stepNumberString : {
      tableID : "Tutorials.json",
      stringID : "0x0e7ea05c",
      placeholder : "1/3"
    },
    hideAllButtons : !0,
    init : function () {
      scrui.PostGameCommand(scrui.BuildCommand(["UnlockCamera"]))
    },
    customCompletionCheck : function () {
      var a = scrui.BuildRequestQuery(["camera"]);
      scrui.RequestGameData([a], function (a) {
        a = a[0];
        null == simcity.gGlobalUIHandler.mTutorialManager.mCameraInfoState ||
        simcity.gGlobalUIHandler.mTutorialManager.mCameraInfoState && simcity.gGlobalUIHandler.mTutorialManager.mCameraInfoState.targetZoomLevel < a.targetZoomLevel ? simcity.gGlobalUIHandler.mTutorialManager.mCameraInfoState = a : simcity.gGlobalUIHandler.mTutorialManager.mCameraInfoState && a.targetZoomLevel < simcity.gGlobalUIHandler.mTutorialManager.mCameraInfoState.targetZoomLevel && (simcity.gGlobalUIHandler.mTutorialManager.mCameraInfoState = null, simcity.gGlobalUIHandler.mTutorialManager.CompleteTutorialStep())
      })
    }
  };
  b[simcity.kTutorialStateObjective2] = {
    dialogLayoutPath : simcity.kDialogTextOnly,
    dialogString : {
      tableID : "Tutorials.json",
      stringID : "0x0e8d56dd",
      placeholder : "tutorial welcome"
    },
    headerString : {
      tableID : "Tutorials.json",
      stringID : "0x0e8e6a7d",
      placeholder : "CAMERA"
    },
    stepNumberString : {
      tableID : "Tutorials.json",
      stringID : "0x0e7ea05d",
      placeholder : "2/3"
    },
    hideAllButtons : !0,
    customCompletionCheck : function () {
      var a = scrui.BuildRequestQuery(["camera"]);
      scrui.RequestGameData([a], function (a) {
        var b = a[0];
        null == simcity.gGlobalUIHandler.mTutorialManager.mCameraInfoState ||
        simcity.gGlobalUIHandler.mTutorialManager.mCameraInfoState.orientation != b.orientation || simcity.gGlobalUIHandler.mTutorialManager.mCameraInfoState.targetZoomLevel != b.targetZoomLevel || simcity.gGlobalUIHandler.mTutorialManager.mCameraInfoState.distance != b.distance ? simcity.gGlobalUIHandler.mTutorialManager.mCameraInfoState = b : simcity.gGlobalUIHandler.mTutorialManager.mCameraInfoState && (a = simcity.gGlobalUIHandler.mTutorialManager.mCameraInfoState.position, b = b.position, 200 < Math.sqrt(Math.pow(b[0] - a[0], 2) +
              Math.pow(b[1] - a[1], 2) + Math.pow(b[2] - a[2], 2)) && (simcity.gGlobalUIHandler.mTutorialManager.mCameraInfoState = null, simcity.gGlobalUIHandler.mTutorialManager.CompleteTutorialStep()))
      })
    }
  };
  b[simcity.kTutorialStateObjective3] = {
    dialogLayoutPath : simcity.kDialogTextOnly,
    dialogString : {
      tableID : "Tutorials.json",
      stringID : "0x0e8d56de",
      placeholder : "tutorial welcome"
    },
    headerString : {
      tableID : "Tutorials.json",
      stringID : "0x0e8e6a7d",
      placeholder : "CAMERA"
    },
    stepNumberString : {
      tableID : "Tutorials.json",
      stringID : "0x0e8e6b26",
      placeholder : "3/3"
    },
    hideAllButtons : !0,
    customCompletionCheck : function () {
      var a = scrui.BuildRequestQuery(["camera"]);
      scrui.RequestGameData([a], function (a) {
        a = a[0];
        null == simcity.gGlobalUIHandler.mTutorialManager.mCameraInfoState ? simcity.gGlobalUIHandler.mTutorialManager.mCameraInfoState = a : simcity.gGlobalUIHandler.mTutorialManager.mCameraInfoState && 0.2 < Math.abs((simcity.gGlobalUIHandler.mTutorialManager.mCameraInfoState.orientation - a.orientation) / (simcity.gGlobalUIHandler.mTutorialManager.mCameraInfoState.orientation %
              360)) && (simcity.gGlobalUIHandler.mTutorialManager.mCameraInfoState = null, a = simcity.gGlobalUIHandler.mTutorialManager, simcity.CompleteObjective(a.mMissionInfo, a.mObjectiveIndex, !0))
      })
    }
  };
  return b[a] || null
};
simcity.TutorialCalloutStates[scrui.IDFromName("MSCivicClickSpeechBubble")] = function (a) {
  var b = [];
  b[simcity.kTutorialStateObjective1] = {
    dialogLayoutPath : simcity.kDialogTextOnly,
    dialogString : {
      tableID : "Tutorials.json",
      stringID : "0x0e094212",
      placeholder : "tutorial welcome"
    },
    headerString : {
      tableID : "Tutorials.json",
      stringID : "0x0e388456",
      placeholder : "ROADS"
    },
    stepNumberString : {
      tableID : "Tutorials.json",
      stringID : "0x0e69c1fd",
      placeholder : "1/7"
    },
    hideAllButtons : !0,
    init : function () {
      simcity.ShowTutorialSpeechBalloon(3532182867)
    }
  };
  return b[a] || null
};
simcity.TutorialCalloutStates[scrui.IDFromName("MSCivicBuildRoad")] = function (a) {
  var b = [];
  b[simcity.kTutorialStateClosingDialog] = {
    dialogLayoutPath : simcity.kDialogOkay,
    dialogString : {
      tableID : "Tutorials.json",
      stringID : "0x0e37070b",
      placeholder : '"Great! Now Sims can come and go over the highway!'
    },
    headerString : {
      tableID : "Tutorials.json",
      stringID : "0x0e388456",
      placeholder : "ROADS"
    },
    stepNumberString : {
      tableID : "Tutorials.json",
      stringID : "0x0e69c201",
      placeholder : "5/7"
    },
    hideAllButtons : !0,
    init : function () {
      var a = simcity.gGlobalUIHandler;
      null !== a.mToolPaletteUIHandler && null !== a.mToolPaletteUIHandler.mSelectedCategoryButton && a.mToolPaletteUIHandler.CloseToolPanel();
      scrui.PostGameCommand(scrui.BuildCommand(["deselectTool"]))
    },
    onCompletion : function () {
      simcity.gGlobalUIHandler.mTutorialManager.SetTutorialState(scrui.IDFromName("MSCivicBuildRoad"), simcity.kTutorialStateProgressToNextState)
    }
  };
  b[simcity.kTutorialStateProgressToNextState] = {
    dialogLayoutPath : simcity.kDialogOkay,
    dialogString : {
      tableID : "Tutorials.json",
      stringID : "0x0f091eb6",
      placeholder : "As your city grows, you can control traffic and building density by choosing which roads to lay and by upgrading your existing roads."
    },
    headerString : {
      tableID : "Tutorials.json",
      stringID : "0x0e388456",
      placeholder : "ROADS"
    },
    stepNumberString : {
      tableID : "Tutorials.json",
      stringID : "0x0e69c202",
      placeholder : "6/7"
    },
    hideAllButtons : !0,
    onCompletion : function () {
      simcity.gGlobalUIHandler.mTutorialManager.ClearTutorialState();
      simcity.EnableTutorialSkipButton();
      scrui.PostGameCommand(scrui.BuildCommand(["createUnit", scrui.IDFromName("MSCivicClickSpeechBubble5")]))
    }
  };
  b[simcity.kTutorialStateObjective1] = {
    dialogLayoutPath : simcity.kDialogTextOnly,
    dialogString : {
      tableID : "Tutorials.json",
      stringID : "0x0c44d318",
      placeholder : "Roads are purchased from the Roads menu."
    },
    headerString : {
      tableID : "Tutorials.json",
      stringID : "0x0e388456",
      placeholder : "ROADS"
    },
    stepNumberString : {
      tableID : "Tutorials.json",
      stringID : "0x0e69c1fe",
      placeholder : "2/7"
    },
    hideAllButtons : !0,
    camera : simcity.GetCameraPosition([-801.497, 66.3, -788.19], 210.1, 1117.39, 25.14),
    showButtons : [simcity.gGlobalUIHandler.mToolPaletteUIHandler.GetButtonFromCategory(simcity.kCategoryIDTransport)],
    targetControl : function () {
      return simcity.gGlobalUIHandler.mToolPaletteUIHandler.GetButtonFromCategory(simcity.kCategoryIDTransport)
    },
    init : function () {
      scrui.PostGameCommand(scrui.BuildCommand(["setspeed", simcity.kSpeedRabbit]));
      var a = simcity.gGlobalUIHandler.mToolPaletteUIHandler.GetButtonFromCategory(simcity.kCategoryIDTransport).GetControlID();
      simcity.gGlobalUIHandler.mToolPaletteUIHandler.UpdateAlert(simcity.kCategoryIDTransport, simcity.kAlertLevelCritical);
      simcity.ForceUpdateCategory(simcity.kCategoryIDTransport, !0);
      var b = function () {
        simcity.gEventManager.RemoveEventListener(simcity.gEventTypes.CLICK, a, b);
        simcity.gGlobalUIHandler.mTutorialManager.CompleteTutorialStep()
      };
      simcity.gEventManager.AddEventListener(simcity.gEventTypes.CLICK, a, b)
    }
  };
  b[simcity.kTutorialStateObjective2] = {
    dialogLayoutPath : simcity.kDialogTextOnlyLiftUp,
    dialogString : {
      tableID : "Tutorials.json",
      stringID : "0x0d781dd9",
      placeholder : "Wider roads like Avenues can handle more traffic."
    },
    headerString : {
      tableID : "Tutorials.json",
      stringID : "0x0e388456",
      placeholder : "ROADS"
    },
    stepNumberString : {
      tableID : "Tutorials.json",
      stringID : "0x0e69c1ff",
      placeholder : "3/7"
    },
    hideAllButtons : !0,
    showButtons : [simcity.gGlobalUIHandler.mToolPaletteUIHandler.GetButtonFromToolID(simcity.kToolIDRoadDraw_Path_Main_MainStreet_N)],
    targetControl : function () {
      return simcity.gGlobalUIHandler.mToolPaletteUIHandler.GetButtonFromToolID(simcity.kToolIDRoadDraw_Path_Main_MainStreet_N)
    },
    init : function () {
      var a = simcity.gGlobalUIHandler.mToolPaletteUIHandler.GetButtonFromToolID(simcity.kToolIDRoadDraw_Path_Main_MainStreet_N).GetControlID(),
      b = function () {
        simcity.gEventManager.RemoveEventListener(simcity.gEventTypes.CLICK, a, b);
        simcity.gGlobalUIHandler.mTutorialManager.CompleteTutorialStep()
      };
      simcity.gEventManager.AddEventListener(simcity.gEventTypes.CLICK,
        a, b)
    }
  };
  b[simcity.kTutorialStateObjective3] = {
    dialogLayoutPath : simcity.kDialogTextOnlyMidLow,
    dialogString : {
      tableID : "Tutorials.json",
      stringID : "0x0d781f9b",
      placeholder : '"Now youre using the road tool!'
    },
    headerString : {
      tableID : "Tutorials.json",
      stringID : "0x0e388456",
      placeholder : "ROADS"
    },
    stepNumberString : {
      tableID : "Tutorials.json",
      stringID : "0x0e69c200",
      placeholder : "4/7"
    },
    targetToy : scrui.IDFromName("Tutorial_City_Connect"),
    hideAllButtons : !0,
    init : function () {
      simcity.gGlobalUIHandler.mTutorialManager.WaitForObjective();
      simcity.GetTutorialMissionInfo(scrui.IDFromName("MSCivicBuildRoad"));
      scrui.IDFromName("Tutorial_City_Connect")
    }
  };
  return b[a] || null
};
simcity.TutorialCalloutStates[scrui.IDFromName("MSCivicClickSpeechBubble5")] = function (a) {
  var b = [];
  b[simcity.kTutorialStateOpeningDialog] = {
    dialogLayoutPath : simcity.kDialogTextOnly,
    dialogString : {
      tableID : "Tutorials.json",
      stringID : "0x0e3b9fb7",
      placeholder : "Eva wants to thank you."
    },
    headerString : {
      tableID : "Tutorials.json",
      stringID : "0x0e388456",
      placeholder : "ROADS"
    },
    stepNumberString : {
      tableID : "Tutorials.json",
      stringID : "0x0e69c203",
      placeholder : "7/7"
    },
    hideAllButtons : !0,
    camera : simcity.GetCameraPosition([-255.83,
        -95.25, -792.52], 520.2, 2747.2, 13.8),
    init : function () {
      simcity.ShowTutorialSpeechBalloon(3873710182);
      scrui.PostGameCommand(scrui.BuildCommand(["setspeed", simcity.kSpeedTurtle]));
      simcity.gGlobalUIHandler.mToolPaletteUIHandler.UpdateAlert(simcity.kCategoryIDTransport, simcity.kAlertLevelNormal)
    }
  };
  return b[a] || null
};
simcity.TutorialCalloutStates[scrui.IDFromName("MSTutorialResidentialDemand")] = function (a) {
  var b = [];
  b[simcity.kTutorialStateOpeningDialog] = {
    dialogLayoutPath : simcity.kDialogOkay,
    dialogString : {
      tableID : "Tutorials.json",
      stringID : "0x0ee3e0fe",
      placeholder : "Now that youre connected to the highway, theres demand for more houses in your city."
    },
    headerString : {
      tableID : "Tutorials.json",
      stringID : "0x0e38845d",
      placeholder : "ZONES (RESIDENTIAL)"
    },
    stepNumberString : {
      tableID : "Tutorials.json",
      stringID : "0x0e69c1fd",
      placeholder : "1/7"
    },
    targetControl : function () {
      return simcity.GetDemandBars()
    },
    hideAllButtons : !0,
    customCompletionCheck : function () {
      simcity.GetDemandBarButton().SetEnabled(!1)
    },
    onCompletion : function () {
      simcity.gGlobalUIHandler.mTutorialManager.CompleteTutorialStep();
      var a = simcity.gGlobalUIHandler.mMissionUI.MissionInfoFromID(scrui.IDFromName("MSTutorialResidentialDemand"));
      simcity.ManuallyDestroyMissionUnit(a);
      scrui.PostGameCommand(scrui.BuildCommand(["createUnit", scrui.IDFromName("MSCivicClickSpeechBubble2")]))
    }
  };
  return b[a] ||
  null
};
simcity.TutorialCalloutStates[scrui.IDFromName("MSCivicClickSpeechBubble2")] = function (a) {
  var b = [];
  b[simcity.kTutorialStateObjective1] = {
    dialogLayoutPath : simcity.kDialogTextOnly,
    dialogString : {
      tableID : "Tutorials.json",
      stringID : "0x0e161e42",
      placeholder : "Sometimes your residents will ask for help."
    },
    headerString : {
      tableID : "Tutorials.json",
      stringID : "0x0e38845d",
      placeholder : "ZONES (RESIDENTIAL)"
    },
    stepNumberString : {
      tableID : "Tutorials.json",
      stringID : "0x0e69c1fe",
      placeholder : "2/7"
    },
    camera : simcity.GetCameraPosition([-498.4, 432.6,
        -793.9], -161, 1266, 30),
    hideAllButtons : !0,
    init : function () {
      simcity.ShowTutorialSpeechBalloon(3061392386);
      scrui.PostGameCommand(scrui.BuildCommand(["setspeed", simcity.kSpeedRabbit]))
    }
  };
  return b[a] || null
};
simcity.TutorialCalloutStates[scrui.IDFromName("MSCivicCreateResidential")] = function (a) {
  var b = [];
  b[simcity.kTutorialStateClosingDialog] = {
    hideAllButtons : !0,
    onCompletion : function () {
      simcity.gGlobalUIHandler.mToolPaletteUIHandler.UpdateAlert(simcity.kCategoryIDZones, simcity.kAlertLevelNormal);
      simcity.gGlobalUIHandler.mTutorialManager.SetTutorialState(scrui.IDFromName("MSCivicCreateResidential"), simcity.kTutorialStateProgressToNextState)
    }
  };
  b[simcity.kTutorialStateProgressToNextState] = {
    onCompletion : function () {
      simcity.ForceUpdateCategory(simcity.kCategoryIDDemolish,
        !0);
      simcity.gGlobalUIHandler.mToolPaletteUIHandler.UpdateAlert(simcity.kCategoryIDDemolish, simcity.kAlertLevelCritical);
      simcity.gGlobalUIHandler.mTutorialManager.ClearTutorialState();
      var a = simcity.gGlobalUIHandler.mMissionUI.MissionInfoFromID(scrui.IDFromName("MSCivicCreateResidential"));
      simcity.ManuallyDestroyMissionUnit(a);
      scrui.PostGameCommand(scrui.BuildCommand(["createUnit", scrui.IDFromName("MSTutorialResidential")]))
    }
  };
  b[simcity.kTutorialStateObjective1] = {
    dialogLayoutPath : simcity.kDialogTextOnly,
    dialogString : {
      tableID : "Tutorials.json",
      stringID : "0x0c48fe41",
      placeholder : "By Zoning, you control what types of buildings can develop."
    },
    headerString : {
      tableID : "Tutorials.json",
      stringID : "0x0e38845d",
      placeholder : "ZONES (RESIDENTIAL)"
    },
    stepNumberString : {
      tableID : "Tutorials.json",
      stringID : "0x0e69c1ff",
      placeholder : "3/7"
    },
    targetControl : function () {
      return simcity.gGlobalUIHandler.mToolPaletteUIHandler.GetButtonFromCategory(simcity.kCategoryIDZones)
    },
    updateCategoryInfo : function (a) {
      simcity.UpdateContextualInfo(a,
        simcity.kPaletteInfoPanelText, simcity.kTextHeaderZoneResidential, simcity.kTextBodyZoneResidential)
    },
    hideAllButtons : !0,
    showButtons : [simcity.gGlobalUIHandler.mToolPaletteUIHandler.GetButtonFromCategory(simcity.kCategoryIDZones)],
    init : function () {
      var a = simcity.gGlobalUIHandler.mToolPaletteUIHandler.GetButtonFromCategory(simcity.kCategoryIDZones).GetControlID(),
      b = function () {
        simcity.gEventManager.RemoveEventListener(simcity.gEventTypes.CLICK, a, b);
        simcity.gGlobalUIHandler.mTutorialManager.CompleteTutorialStep()
      };
      simcity.gEventManager.AddEventListener(simcity.gEventTypes.CLICK, a, b)
    }
  };
  b[simcity.kTutorialStateObjective2] = {
    dialogLayoutPath : simcity.kDialogTextOnlyLiftUp,
    dialogString : {
      tableID : "Tutorials.json",
      stringID : "0x0c48fe44",
      placeholder : "Residential zones will attract Sims to build houses in your city."
    },
    updateCategoryInfo : function (a) {
      simcity.UpdateContextualInfo(a, simcity.kPaletteInfoPanelText, simcity.kTextHeaderZoneResidential, simcity.kTextBodyZoneResidential)
    },
    headerString : {
      tableID : "Tutorials.json",
      stringID : "0x0e38845d",
      placeholder : "ZONES (RESIDENTIAL)"
    },
    stepNumberString : {
      tableID : "Tutorials.json",
      stringID : "0x0e69c200",
      placeholder : "4/7"
    },
    hideAllButtons : !0,
    showButtons : [simcity.gGlobalUIHandler.mToolPaletteUIHandler.GetButtonFromToolID(simcity.kToolIDLotZoneResidential)],
    targetControl : function () {
      return simcity.gGlobalUIHandler.mToolPaletteUIHandler.GetButtonFromToolID(simcity.kToolIDLotZoneResidential)
    },
    init : function () {
      var a = simcity.gGlobalUIHandler.mToolPaletteUIHandler.GetButtonFromToolID(simcity.kToolIDLotZoneResidential).GetControlID(),
      b = function () {
        simcity.gEventManager.RemoveEventListener(simcity.gEventTypes.CLICK, a, b);
        simcity.gGlobalUIHandler.mTutorialManager.CompleteTutorialStep()
      };
      simcity.gEventManager.AddEventListener(simcity.gEventTypes.CLICK, a, b)
    }
  };
  b[simcity.kTutorialStateObjective3] = {
    dialogLayoutPath : simcity.kDialogTextOnlyLiftUp,
    dialogString : {
      tableID : "Tutorials.json",
      stringID : "0x0c5a2c82",
      placeholder : "Now youre using the zone tool!"
    },
    updateCategoryInfo : function (a) {
      simcity.UpdateContextualInfo(a, simcity.kPaletteInfoPanelText,
        simcity.kTextHeaderZoneResidential, simcity.kTextBodyZoneResidential)
    },
    headerString : {
      tableID : "Tutorials.json",
      stringID : "0x0e38845d",
      placeholder : "ZONES (RESIDENTIAL)"
    },
    stepNumberString : {
      tableID : "Tutorials.json",
      stringID : "0x0e69c201",
      placeholder : "5/7"
    },
    hideAllButtons : !0,
    customCompletionCheck : function () {
      var a = scrui.BuildRequestQuery(["tools", simcity.cTutorialManager.kToolMetaZoneResidential, "toolZoneLots"]);
      scrui.RequestGameData([a], function (a) {
        var b = simcity.gGlobalUIHandler.mTutorialManager;
        1 < a[0].residentialLots &&
        (simcity.gGlobalUIHandler.mMissionUI.MissionInfoFromID(scrui.IDFromName("MSCivicCreateResidential")), simcity.CompleteObjective(b.mMissionInfo, b.mObjectiveIndex, !0), a = simcity.gGlobalUIHandler, null !== a.mToolPaletteUIHandler && null !== a.mToolPaletteUIHandler.mSelectedCategoryButton && a.mToolPaletteUIHandler.CloseToolPanel(), scrui.PostGameCommand(scrui.BuildCommand(["deselectTool"])))
      })
    }
  };
  return b[a] || null
};
simcity.TutorialCalloutStates[scrui.IDFromName("MSTutorialResidential")] = function (a) {
  var b = [];
  b[simcity.kTutorialStateClosingDialog] = {
    hideAllButtons : !0,
    onCompletion : function () {
      simcity.gGlobalUIHandler.mTutorialManager.SetTutorialState(scrui.IDFromName("MSTutorialResidential"), simcity.kTutorialStateProgressToNextState)
    }
  };
  b[simcity.kTutorialStateProgressToNextState] = {
    onCompletion : function () {
      simcity.gGlobalUIHandler.mTutorialManager.ClearTutorialState();
      var a = simcity.gGlobalUIHandler.mMissionUI.MissionInfoFromID(scrui.IDFromName("MSTutorialResidential"));
      simcity.ManuallyDestroyMissionUnit(a);
      scrui.PostGameCommand(scrui.BuildCommand(["createUnit", scrui.IDFromName("MSTutorialCreateResidentialPt2")]))
    }
  };
  b[simcity.kTutorialStateObjective1] = {
    dialogLayoutPath : simcity.kDialogOkay,
    dialogString : {
      tableID : "Tutorials.json",
      stringID : "0x0ee3e946",
      placeholder : "Here comes a construction truck now to build new low wealth houses!"
    },
    headerString : {
      tableID : "Tutorials.json",
      stringID : "0x0e38845d",
      placeholder : "ZONES (RESIDENTIAL)"
    },
    stepNumberString : {
      tableID : "Tutorials.json",
      stringID : "0x0e69c202",
      placeholder : "6/7"
    },
    hideAllButtons : !0,
    init : function () {
      scrui.PostGameCommand(scrui.BuildCommand(["setspeed", simcity.kSpeedTurtle]))
    },
    onCompletion : function () {
      simcity.gGlobalUIHandler.mTutorialManager.CompleteTutorialStep()
    }
  };
  b[simcity.kTutorialStateObjective2] = {
    dialogLayoutPath : simcity.kDialogOkay,
    dialogString : {
      tableID : "Tutorials.json",
      stringID : "0x0ee3ea06",
      placeholder : "Remember: to get Sims to move into your city, you need to connect to the highway and zone residential."
    },
    headerString : {
      tableID : "Tutorials.json",
      stringID : "0x0e38845d",
      placeholder : "ZONES (RESIDENTIAL)"
    },
    stepNumberString : {
      tableID : "Tutorials.json",
      stringID : "0x0e69c203",
      placeholder : "7/7"
    },
    hideAllButtons : !0,
    onCompletion : function () {
      simcity.gGlobalUIHandler.mTutorialManager.CompleteTutorialStep()
    }
  };
  return b[a] || null
};
simcity.TutorialCalloutStates[scrui.IDFromName("MSTutorialCreateResidentialPt2")] = function (a) {
  var b = [];
  b[simcity.kTutorialStateClosingDialog] = {
    hideAllButtons : !0,
    onCompletion : function () {
      simcity.gGlobalUIHandler.mToolPaletteUIHandler.UpdateAlert(simcity.kCategoryIDZones, simcity.kAlertLevelNormal);
      simcity.gGlobalUIHandler.mTutorialManager.SetTutorialState(scrui.IDFromName("MSTutorialCreateResidentialPt2"), simcity.kTutorialStateProgressToNextState)
    }
  };
  b[simcity.kTutorialStateProgressToNextState] = {
    dialogLayoutPath : simcity.kDialogOkay,
    dialogString : {
      tableID : "Tutorials.json",
      stringID : "0x0e0d6bbf",
      placeholder : "Well Mayor, Sims are moving to Summer Shoals, but they wont want to live next to this!"
    },
    headerString : {
      tableID : "Tutorials.json",
      stringID : "0x0e388472",
      placeholder : "DEMOLITION"
    },
    stepNumberString : {
      tableID : "Tutorials.json",
      stringID : "0x0e3b946c",
      placeholder : "1/4"
    },
    targetToy : scrui.IDFromName("Tutorial_Rubble"),
    camera : simcity.GetCameraPosition([-75.87, -324.68, -792.11], -161.2, 850, 30.2),
    hideAllButtons : !0,
    onCompletion : function () {
      simcity.ForceUpdateCategory(simcity.kCategoryIDDemolish,
        !0);
      simcity.gGlobalUIHandler.mToolPaletteUIHandler.UpdateAlert(simcity.kCategoryIDDemolish, simcity.kAlertLevelCritical);
      simcity.gGlobalUIHandler.mTutorialManager.ClearTutorialState();
      var a = simcity.gGlobalUIHandler.mMissionUI.MissionInfoFromID(scrui.IDFromName("MSTutorialCreateResidentialPt2"));
      simcity.ManuallyDestroyMissionUnit(a);
      scrui.PostGameCommand(scrui.BuildCommand(["createUnit", scrui.IDFromName("MSCivicTutorialDemolishTool")]))
    }
  };
  b[simcity.kTutorialStateObjective1] = {
    dialogLayoutPath : simcity.kDialogOkay,
    dialogString : {
      tableID : "Tutorials.json",
      stringID : "0x0ee2d8cd",
      placeholder : "Your Sims will occasionally share their thoughts with you."
    },
    headerString : {
      tableID : "Tutorials.json",
      stringID : "0x0eec43de",
      placeholder : "SIM THOUGHTS"
    },
    stepNumberString : {
      tableID : "Tutorials.json",
      stringID : "0x0e3b94bb",
      placeholder : "1/2"
    },
    hideAllButtons : !0,
    camera : simcity.GetCameraPosition([-498.4, 432.6, -793.9], -161, 1266, 30),
    onCompletion : function () {
      simcity.gGlobalUIHandler.mTutorialManager.CompleteTutorialStep()
    }
  };
  b[simcity.kTutorialStateObjective2] = {
    dialogLayoutPath : simcity.kDialogOkay,
    dialogString : {
      tableID : "Tutorials.json",
      stringID : "0x0ed56db5",
      placeholder : "Zoom in to see your Sims thoughts."
    },
    headerString : {
      tableID : "Tutorials.json",
      stringID : "0x0eec43de",
      placeholder : "SIM THOUGHTS"
    },
    stepNumberString : {
      tableID : "Tutorials.json",
      stringID : "0x0e3b94c0",
      placeholder : "2/2"
    },
    hideAllButtons : !0,
    onCompletion : function () {
      simcity.gGlobalUIHandler.mTutorialManager.CompleteTutorialStep()
    },
    init : function () {
      simcity.ShowTutorialSpeechBalloon(3225239201);
      simcity.ShowTutorialSpeechBalloon(1097439041);
      simcity.ShowTutorialSpeechBalloon(1097439040);
      simcity.ShowTutorialSpeechBalloon(1097439047);
      simcity.ShowTutorialSpeechBalloon(1097439046);
      scrui.PostGameCommand(scrui.BuildCommand(["setspeed", simcity.kSpeedRabbit]))
    }
  };
  return b[a] || null
};
simcity.TutorialCalloutStates[scrui.IDFromName("MSCivicTutorialDemolishTool")] = function (a) {
  var b = [];
  b[simcity.kTutorialStateClosingDialog] = {
    hideAllButtons : !0,
    allowUnitPicking : !0,
    onCompletion : function () {
      simcity.gGlobalUIHandler.mTutorialManager.EnableCallout();
      simcity.gGlobalUIHandler.mTutorialManager.SetTutorialState(scrui.IDFromName("MSCivicTutorialDemolishTool"), simcity.kTutorialStateProgressToNextState);
      scrui.PostGameCommand(scrui.BuildCommand(["deselectTool"]));
      var a = simcity.gGlobalUIHandler;
      null !== a.mToolPaletteUIHandler && null !== a.mToolPaletteUIHandler.mSelectedCategoryButton && a.mToolPaletteUIHandler.CloseToolPanel()
    }
  };
  b[simcity.kTutorialStateProgressToNextState] = {
    dialogLayoutPath : simcity.kDialogOkay,
    dialogString : {
      tableID : "Tutorials.json",
      stringID : "0x0e415b2e",
      placeholder : "There we go! Things are looking better already."
    },
    headerString : {
      tableID : "Tutorials.json",
      stringID : "0x0e388472",
      placeholder : "DEMOLITION"
    },
    stepNumberString : {
      tableID : "Tutorials.json",
      stringID : "0x0e3b947d",
      placeholder : "4/4"
    },
    hideAllButtons : !0,
    allowUnitPicking : !0,
    onCompletion : function () {
      simcity.gGlobalUIHandler.mToolPaletteUIHandler.UpdateAlert(simcity.kCategoryIDDemolish, simcity.kAlertLevelNormal);
      simcity.gGlobalUIHandler.mTutorialManager.ClearTutorialState();
      scrui.PostGameCommand(scrui.BuildCommand(["createUnit", scrui.IDFromName("MSCivicTutorialPopulation")]))
    }
  };
  b[simcity.kTutorialStateObjective1] = {
    dialogLayoutPath : simcity.kDialogTextOnlyLiftUp,
    dialogString : {
      tableID : "Tutorials.json",
      stringID : "0x0e0d6bc0",
      placeholder : "Rubble lowers residential land value and is a fire risk, too!"
    },
    headerString : {
      tableID : "Tutorials.json",
      stringID : "0x0e388472",
      placeholder : "DEMOLITION"
    },
    stepNumberString : {
      tableID : "Tutorials.json",
      stringID : "0x0e3b9472",
      placeholder : "2/4"
    },
    hideAllButtons : !0,
    showButtons : [simcity.GetBulldozeButton()],
    camera : simcity.GetCameraPosition([148.12, -292.65, -793.82], 927.7, 560.7, 17.9),
    targetControl : function () {
      return simcity.GetBulldozeButton()
    },
    init : function () {
      simcity.ForceUpdateCategory(simcity.kCategoryIDDemolish, !0);
      var a = simcity.GetBulldozeButton().GetControlID(),
      b = function () {
        simcity.gEventManager.RemoveEventListener(simcity.gEventTypes.CLICK,
          a, b);
        simcity.gGlobalUIHandler.mTutorialManager.CompleteTutorialStep();
        simcity.gGlobalUIHandler.mTutorialManager.ClearTutorialState()
      };
      simcity.gEventManager.AddEventListener(simcity.gEventTypes.CLICK, a, b)
    }
  };
  b[simcity.kTutorialStateObjective2] = {
    dialogLayoutPath : simcity.kDialogTextOnlyLiftUp,
    dialogString : {
      tableID : "Tutorials.json",
      stringID : "0x0e0d6bc1",
      placeholder : "Bulldozing is essential to keep your city developing and your residents happy."
    },
    headerString : {
      tableID : "Tutorials.json",
      stringID : "0x0e388472",
      placeholder : "DEMOLITION"
    },
    stepNumberString : {
      tableID : "Tutorials.json",
      stringID : "0x0e3b9478",
      placeholder : "3/4"
    },
    targetToy : scrui.IDFromName("Tutorial_Rubble"),
    hideAllButtons : !0,
    allowUnitPicking : !0,
    init : function () {
      simcity.gGlobalUIHandler.mTutorialManager.WaitForObjective()
    },
    onCompletion : function () {
      scrui.PostGameCommand(scrui.BuildCommand(["deselectTool"]));
      var a = simcity.gGlobalUIHandler;
      null !== a.mToolPaletteUIHandler && null !== a.mToolPaletteUIHandler.mSelectedCategoryButton && a.mToolPaletteUIHandler.CloseToolPanel()
    }
  };
  return b[a] || null
};
simcity.TutorialCalloutStates[scrui.IDFromName("MSCivicTutorialPopulation")] = function (a) {
  var b = [];
  b[simcity.kTutorialStateClosingDialog] = {
    hideAllButtons : !0,
    onCompletion : function () {
      simcity.gGlobalUIHandler.mTutorialManager.EnableCallout();
      simcity.gGlobalUIHandler.mTutorialManager.SetTutorialState(scrui.IDFromName("MSCivicTutorialPopulation"), simcity.kTutorialStateProgressToNextState)
    },
    onNext : function () {}

  };
  b[simcity.kTutorialStateProgressToNextState] = {
    hideAllButtons : !0,
    onCompletion : function () {
      simcity.gGlobalUIHandler.mTutorialManager.ClearTutorialState();
      var a =
        simcity.gGlobalUIHandler.mMissionUI.MissionInfoFromID(scrui.IDFromName("MSCivicTutorialPopulation"));
      simcity.ManuallyDestroyMissionUnit(a);
      scrui.PostGameCommand(scrui.BuildCommand(["createUnit", scrui.IDFromName("MSCivicClickSpeechBubble4")]))
    }
  };
  b[simcity.kTutorialStateObjective1] = {
    dialogLayoutPath : simcity.kDialogTextOnly,
    dialogString : {
      tableID : "Tutorials.json",
      stringID : "0x0e8bfdd9",
      placeholder : "With new residential development and new shops opening up, Sims are moving in."
    },
    headerString : {
      tableID : "Tutorials.json",
      stringID : "0x0e90caa8",
      placeholder : "POPULATION"
    },
    stepNumberString : {
      tableID : "Tutorials.json",
      stringID : "0x0e3b94bb",
      placeholder : "1/2"
    },
    hideAllButtons : !0,
    showButtons : [simcity.GetPopulationButton()],
    targetControl : function () {
      return gUIManager.FindControlByID(248200384)
    },
    init : function () {
      var a = simcity.GetPopulationButton().GetControlID(),
      b = function () {
        simcity.gEventManager.RemoveEventListener(simcity.gEventTypes.CLICK, a, b);
        simcity.gGlobalUIHandler.mTutorialManager.CompleteTutorialStep();
        gUIManager.mBlockMouseClick =
          !0
      };
      simcity.gEventManager.AddEventListener(simcity.gEventTypes.CLICK, a, b)
    }
  };
  b[simcity.kTutorialStateObjective2] = {
    dialogLayoutPath : simcity.kDialogTextOnlyLow,
    dialogString : {
      tableID : "Tutorials.json",
      stringID : "0x0e8bfdda",
      placeholder : "It looks like your residential population has increased!"
    },
    headerString : {
      tableID : "Tutorials.json",
      stringID : "0x0e90caa8",
      placeholder : "POPULATION"
    },
    stepNumberString : {
      tableID : "Tutorials.json",
      stringID : "0x0e3b94c0",
      placeholder : "2/2"
    },
    hideAllButtons : !0,
    targetControl : function () {
      return simcity.gGlobalUIHandler.mPopulationUIContainer.FindControlByID(simcity.kBTNClosePopulation)
    },
    init : function () {
      var a = simcity.gGlobalUIHandler.mPopulationUIContainer;
      simcity.gGlobalUIHandler.mTutorialManager.SetModalWindow(a.FindControlByID(243706039), !0);
      simcity.gGlobalUIHandler.mTutorialManager.SetModalWindow(a.FindControlByID(243706042), !0);
      var b = a.FindControlByID(simcity.kBTNClosePopulation).GetControlID(),
      e = function () {
        simcity.gEventManager.RemoveEventListener(simcity.gEventTypes.CLICK, b, e);
        simcity.gGlobalUIHandler.mTutorialManager.CompleteTutorialStep()
      };
      simcity.gEventManager.AddEventListener(simcity.gEventTypes.CLICK,
        b, e)
    }
  };
  return b[a] || null
};
simcity.TutorialCalloutStates[scrui.IDFromName("MSCivicClickSpeechBubble4")] = function (a) {
  var b = [];
  b[simcity.kTutorialStateOpeningDialog] = {
    dialogLayoutPath : simcity.kDialogTextOnly,
    dialogString : {
      tableID : "Tutorials.json",
      stringID : "0x0e1006c4",
      placeholder : "Theres a factory manager who wants to talk to you about bringing more jobs to Summer Shoals."
    },
    headerString : {
      tableID : "Tutorials.json",
      stringID : "0x0e388497",
      placeholder : "ZONES (INDUSTRIAL)"
    },
    stepNumberString : {
      tableID : "Tutorials.json",
      stringID : "0x0e3b8d4a",
      placeholder : "1/5"
    },
    camera : simcity.GetCameraPosition([22.7, -473.71, -791.76], 103.8, 690.7, 16.9),
    init : function () {
      simcity.gGlobalUIHandler.mToolPaletteUIHandler.UpdateAlert(simcity.kCategoryIDZones, simcity.kAlertLevelAlert);
      simcity.ShowTutorialSpeechBalloon(3255461995)
    },
    hideAllButtons : !0
  };
  return b[a] || null
};
simcity.TutorialCalloutStates[scrui.IDFromName("MSCivicZoneIndustrial")] = function (a) {
  var b = [];
  b[simcity.kTutorialStateClosingDialog] = {
    dialogLayoutPath : simcity.kDialogOkayLiftUp,
    dialogString : {
      tableID : "Tutorials.json",
      stringID : "0x0ee18e0f",
      placeholder : "Nice work! Remember, zone industrial to attract factories."
    },
    headerString : {
      tableID : "Tutorials.json",
      stringID : "0x0e388497",
      placeholder : "ZONES (INDUSTRIAL)"
    },
    stepNumberString : {
      tableID : "Tutorials.json",
      stringID : "0x0e3b8d6a",
      placeholder : "5/5"
    },
    hideAllButtons : !0,
    updateCategoryInfo : function (a) {
      simcity.UpdateContextualInfo(a, simcity.Zones.kPaletteInfoPanelText, simcity.Zones.kTextHeaderNotEnoughShops, simcity.Zones.kTextBodyNotEnoughShops)
    },
    init : function () {
      scrui.PostGameCommand(scrui.BuildCommand(["deselectTool"]))
    },
    onCompletion : function () {
      simcity.gGlobalUIHandler.mTutorialManager.EnableCallout();
      var a = simcity.gGlobalUIHandler.mMissionUI.MissionInfoFromID(scrui.IDFromName("MSCivicZoneIndustrial"));
      simcity.ManuallyDestroyMissionUnit(a);
      simcity.gGlobalUIHandler.mTutorialManager.SetTutorialState(scrui.IDFromName("MSCivicZoneIndustrial"),
        simcity.kTutorialStateProgressToNextState)
    }
  };
  b[simcity.kTutorialStateProgressToNextState] = {
    hideAllButtons : !0,
    onCompletion : function () {
      simcity.gGlobalUIHandler.mTutorialManager.ClearTutorialState();
      scrui.PostGameCommand(scrui.BuildCommand(["createUnit", scrui.IDFromName("MSCivicZoneCommercial")]))
    }
  };
  b[simcity.kTutorialStateObjective1] = {
    dialogLayoutPath : simcity.kDialogTextOnly,
    dialogString : {
      tableID : "Tutorials.json",
      stringID : "0x0e3c7927",
      placeholder : "Industrial and Commercial Zoning tools are also found in the Zones menu."
    },
    headerString : {
      tableID : "Tutorials.json",
      stringID : "0x0e388497",
      placeholder : "ZONES (INDUSTRIAL)"
    },
    stepNumberString : {
      tableID : "Tutorials.json",
      stringID : "0x0e3b8d54",
      placeholder : "2/5"
    },
    updateCategoryInfo : function (a) {
      simcity.UpdateContextualInfo(a, simcity.Zones.kPaletteInfoPanelText, simcity.Zones.kTextHeaderTooManyWorkers, simcity.Zones.kTextBodyTooManyWorkers)
    },
    targetControl : function () {
      return simcity.gGlobalUIHandler.mToolPaletteUIHandler.GetButtonFromCategory(simcity.kCategoryIDZones)
    },
    hideAllButtons : !0,
    camera : simcity.GetCameraPosition([339.42, -167.78, -796.2], 0.66, 937.3, 23.9),
    showButtons : [simcity.gGlobalUIHandler.mToolPaletteUIHandler.GetButtonFromCategory(simcity.kCategoryIDZones)],
    init : function () {
      var a = simcity.gGlobalUIHandler.mToolPaletteUIHandler.GetButtonFromCategory(simcity.kCategoryIDZones).GetControlID(),
      b = function () {
        simcity.gEventManager.RemoveEventListener(simcity.gEventTypes.CLICK, a, b);
        simcity.gGlobalUIHandler.mTutorialManager.CompleteTutorialStep()
      };
      simcity.gEventManager.AddEventListener(simcity.gEventTypes.CLICK,
        a, b)
    }
  };
  b[simcity.kTutorialStateObjective2] = {
    dialogLayoutPath : simcity.kDialogTextOnlyLiftUp,
    dialogString : {
      tableID : "Tutorials.json",
      stringID : "0x0e59f1ca",
      placeholder : "Industry provides jobs for your residents and lots of tax income for the city coffers."
    },
    headerString : {
      tableID : "Tutorials.json",
      stringID : "0x0e388497",
      placeholder : "ZONES (INDUSTRIAL)"
    },
    stepNumberString : {
      tableID : "Tutorials.json",
      stringID : "0x0e3b8d5d",
      placeholder : "3/5"
    },
    hideAllButtons : !0,
    showButtons : [simcity.gGlobalUIHandler.mToolPaletteUIHandler.GetButtonFromToolID(simcity.kToolIDLotZoneIndustrial)],
    updateCategoryInfo : function (a) {
      simcity.UpdateContextualInfo(a, simcity.Zones.kPaletteInfoPanelText, simcity.Zones.kTextHeaderTooManyWorkers, simcity.Zones.kTextBodyTooManyWorkers)
    },
    targetControl : function () {
      return simcity.gGlobalUIHandler.mToolPaletteUIHandler.GetButtonFromToolID(simcity.kToolIDLotZoneIndustrial)
    },
    init : function () {
      var a = simcity.gGlobalUIHandler.mToolPaletteUIHandler.GetButtonFromToolID(simcity.kToolIDLotZoneIndustrial).GetControlID(),
      b = function () {
        simcity.gEventManager.RemoveEventListener(simcity.gEventTypes.CLICK,
          a, b);
        simcity.gGlobalUIHandler.mTutorialManager.CompleteTutorialStep()
      };
      simcity.gEventManager.AddEventListener(simcity.gEventTypes.CLICK, a, b)
    }
  };
  b[simcity.kTutorialStateObjective3] = {
    dialogLayoutPath : simcity.kDialogTextOnlyLiftUp,
    dialogString : {
      tableID : "Tutorials.json",
      stringID : "0x0d91171f",
      placeholder : "Factories create freight that it ships to shops."
    },
    headerString : {
      tableID : "Tutorials.json",
      stringID : "0x0e388497",
      placeholder : "ZONES (INDUSTRIAL)"
    },
    stepNumberString : {
      tableID : "Tutorials.json",
      stringID : "0x0e3b8d63",
      placeholder : "4/5"
    },
    hideAllButtons : !0,
    updateCategoryInfo : function (a) {
      simcity.UpdateContextualInfo(a, simcity.Zones.kPaletteInfoPanelText, simcity.Zones.kTextHeaderTooManyWorkers, simcity.Zones.kTextBodyTooManyWorkers)
    },
    onCompletion : function () {
      simcity.gGlobalUIHandler.mTutorialManager.ClearTutorialState()
    },
    customCompletionCheck : function () {
      var a = scrui.BuildRequestQuery(["tools", simcity.cTutorialManager.kToolMetaZoneIndustrial, "toolZoneLots"]);
      scrui.RequestGameData([a], function (a) {
        var b = simcity.gGlobalUIHandler.mTutorialManager;
        1 < a[0].industrialLots && simcity.CompleteObjective(b.mMissionInfo, b.mObjectiveIndex, !0)
      })
    }
  };
  return b[a] || null
};
simcity.TutorialCalloutStates[scrui.IDFromName("MSCivicZoneCommercial")] = function (a) {
  var b = [];
  b[simcity.kTutorialStateClosingDialog] = {
    dialogLayoutPath : simcity.kDialogOkayLiftMid,
    dialogString : {
      tableID : "Tutorials.json",
      stringID : "0x0ee18e2a",
      placeholder : "That was easy! Remember to zone commercial to attract shops."
    },
    headerString : {
      tableID : "Tutorials.json",
      stringID : "0x0e3884a0",
      placeholder : "ZONES (COMMERCIAL)"
    },
    stepNumberString : {
      tableID : "Tutorials.json",
      stringID : "0x0e8e6b26",
      placeholder : "3/3"
    },
    hideAllButtons : !0,
    onCompletion : function () {
      var a = simcity.gGlobalUIHandler;
      null !== a.mToolPaletteUIHandler && null !== a.mToolPaletteUIHandler.mSelectedCategoryButton && a.mToolPaletteUIHandler.CloseToolPanel();
      scrui.PostGameCommand(scrui.BuildCommand(["deselectTool"]));
      a = simcity.gGlobalUIHandler.mMissionUI.MissionInfoFromID(scrui.IDFromName("MSCivicZoneCommercial"));
      simcity.ManuallyDestroyMissionUnit(a);
      simcity.gGlobalUIHandler.mTutorialManager.SetTutorialState(scrui.IDFromName("MSCivicZoneCommercial"), simcity.kTutorialStateProgressToNextState)
    }
  };
  b[simcity.kTutorialStateProgressToNextState] = {
    hideAllButtons : !0,
    onCompletion : function () {
      simcity.gGlobalUIHandler.mToolPaletteUIHandler.UpdateAlert(simcity.kCategoryIDZones, simcity.kAlertLevelAlert);
      simcity.GetPauseButton().SetEnabled(!0);
      simcity.gGlobalUIHandler.mTutorialManager.ClearTutorialState();
      scrui.PostGameCommand(scrui.BuildCommand(["setspeed", simcity.kSpeedRabbit]));
      scrui.PostGameCommand(scrui.BuildCommand(["createUnit", scrui.IDFromName("MSCivicTutorialSpeedControls")]))
    }
  };
  b[simcity.kTutorialStateOpeningDialog] = {
    hideAllButtons : !0,
    onCompletion : function () {
      var a = simcity.GetTutorialMissionInfo(scrui.IDFromName("MSCivicZoneCommercial"));
      simcity.gGlobalUIHandler.mTutorialManager.SetTutorialState(a, simcity.kTutorialStateObjective1)
    }
  };
  b[simcity.kTutorialStateObjective1] = {
    dialogLayoutPath : simcity.kDialogTextOnlyLiftUp,
    dialogString : {
      tableID : "Tutorials.json",
      stringID : "0x0d8d8656",
      placeholder : "Commercial zones are where your Sims shop and work."
    },
    headerString : {
      tableID : "Tutorials.json",
      stringID : "0x0e3884a0",
      placeholder : "ZONES (COMMERCIAL)"
    },
    stepNumberString : {
      tableID : "Tutorials.json",
      stringID : "0x0e7ea05c",
      placeholder : "1/3"
    },
    hideAllButtons : !0,
    showButtons : [simcity.gGlobalUIHandler.mToolPaletteUIHandler.GetButtonFromToolID(simcity.kToolIDLotZoneCommercial)],
    camera : simcity.GetCameraPosition([-618.92, -96.39, -788.26], -161, 466, 23.9),
    updateCategoryInfo : function (a) {
      simcity.UpdateContextualInfo(a, simcity.Zones.kPaletteInfoPanelText, simcity.Zones.kTextHeaderNotEnoughShops, simcity.Zones.kTextBodyNotEnoughShops)
    },
    targetControl : function () {
      return simcity.gGlobalUIHandler.mToolPaletteUIHandler.GetButtonFromToolID(simcity.kToolIDLotZoneCommercial)
    },
    init : function () {
      simcity.ForceUpdateCategory(simcity.kCategoryIDZones, !1);
      var a = simcity.gGlobalUIHandler.mToolPaletteUIHandler.GetButtonFromToolID(simcity.kToolIDLotZoneCommercial).GetControlID(),
      b = function () {
        simcity.gEventManager.RemoveEventListener(simcity.gEventTypes.CLICK, a, b);
        simcity.gGlobalUIHandler.mTutorialManager.CompleteTutorialStep()
      };
      simcity.gEventManager.AddEventListener(simcity.gEventTypes.CLICK, a, b)
    }
  };
  b[simcity.kTutorialStateObjective2] = {
    dialogLayoutPath : simcity.kDialogNext,
    dialogString : {
      tableID : "Tutorials.json",
      stringID : "0x0d8d8814",
      placeholder : "Commercial shops take freight deliveries from factories and sell goods to residents and tourists."
    },
    headerString : {
      tableID : "Tutorials.json",
      stringID : "0x0e3884a0",
      placeholder : "ZONES (COMMERCIAL)"
    },
    stepNumberString : {
      tableID : "Tutorials.json",
      stringID : "0x0e7ea05d",
      placeholder : "2/3"
    },
    hideAllButtons : !0,
    onCompletion : function () {
      simcity.gGlobalUIHandler.mTutorialManager.ClearTutorialState()
    },
    customCompletionCheck : function () {
      var a = scrui.BuildRequestQuery(["tools", simcity.cTutorialManager.kToolMetaZoneCommercial,
            "toolZoneLots"]);
      scrui.RequestGameData([a], function (a) {
        var b = simcity.gGlobalUIHandler.mTutorialManager;
        2 < a[0].commercialLots && (simcity.CompleteObjective(b.mMissionInfo, b.mObjectiveIndex, !0), a = simcity.gGlobalUIHandler, null !== a.mToolPaletteUIHandler && null !== a.mToolPaletteUIHandler.mSelectedCategoryButton && a.mToolPaletteUIHandler.CloseToolPanel(), scrui.PostGameCommand(scrui.BuildCommand(["deselectTool"])))
      })
    }
  };
  return b[a] || null
};
simcity.TutorialCalloutStates[scrui.IDFromName("MSCivicTutorialSpeedControls")] = function (a) {
  var b = [];
  b[simcity.kTutorialStateClosingDialog] = {
    hideAllButtons : !0,
    onCompletion : function () {
      simcity.gGlobalUIHandler.mTutorialManager.SetTutorialState(scrui.IDFromName("MSCivicTutorialSpeedControls"), simcity.kTutorialStateProgressToNextState)
    }
  };
  b[simcity.kTutorialStateProgressToNextState] = {
    dialogLayoutPath : simcity.kDialogTextOnly,
    dialogString : {
      tableID : "Tutorials.json",
      stringID : "0x0e8ceb48",
      placeholder : "\u2026and then click one more time to return to Llama Speed."
    },
    headerString : {
      tableID : "Tutorials.json",
      stringID : "0x0e388468",
      placeholder : "SPEED CONTROL"
    },
    stepNumberString : {
      tableID : "Tutorials.json",
      stringID : "0x0e8e6b26",
      placeholder : "3/3"
    },
    hideAllButtons : !0,
    targetControl : function () {
      return simcity.GetSpeed1Button()
    },
    init : function () {
      var a = simcity.GetSpeed1Button().GetControlID();
      simcity.GetSpeed1Button().SetEnabled(!0);
      simcity.GetSpeed2Button().SetEnabled(!1);
      simcity.GetSpeed3Button().SetEnabled(!1);
      scrui.PostGameCommand(scrui.BuildCommand(["setspeed", simcity.kSpeedTurtle]));
      var b = function () {
        simcity.gEventManager.RemoveEventListener(simcity.gEventTypes.CLICK, a, b);
        simcity.gGlobalUIHandler.mTutorialManager.ClearTutorialState();
        var e = simcity.gGlobalUIHandler.mMissionUI.MissionInfoFromID(scrui.IDFromName("MSCivicTutorialSpeedControls"));
        simcity.ManuallyDestroyMissionUnit(e);
        simcity.GetSpeed1Button().SetEnabled(!1);
        simcity.GetSpeed2Button().SetEnabled(!1);
        simcity.GetSpeed3Button().SetEnabled(!1);
        simcity.GetPauseButton().SetEnabled(!1);
        scrui.PostGameCommand(scrui.BuildCommand(["setspeed",
              simcity.kSpeedTurtle]));
        scrui.PostGameCommand(scrui.BuildCommand(["createUnit", scrui.IDFromName("MSTutorialBudget")]))
      };
      simcity.gEventManager.AddEventListener(simcity.gEventTypes.CLICK, a, b)
    }
  };
  b[simcity.kTutorialStateObjective1] = {
    dialogLayoutPath : simcity.kDialogTextOnly,
    dialogString : {
      tableID : "Tutorials.json",
      stringID : "0x0e8ceb46",
      placeholder : "You dont have to wait all day for businesses to develop."
    },
    headerString : {
      tableID : "Tutorials.json",
      stringID : "0x0e388468",
      placeholder : "SPEED CONTROL"
    },
    stepNumberString : {
      tableID : "Tutorials.json",
      stringID : "0x0e7ea05c",
      placeholder : "1/3"
    },
    camera : simcity.GetCameraPosition([-333.27, -20.63, -791.99], 210.3, 1020.3, 18.7),
    hideAllButtons : !0,
    targetControl : function () {
      return simcity.GetSpeed2Button()
    },
    init : function () {
      var a = simcity.GetSpeed2Button().GetControlID();
      simcity.GetSpeed1Button().SetEnabled(!1);
      simcity.GetSpeed2Button().SetEnabled(!0);
      simcity.GetSpeed3Button().SetEnabled(!1);
      var b = function () {
        simcity.gEventManager.RemoveEventListener(simcity.gEventTypes.CLICK, a, b);
        simcity.GetSpeed1Button().SetEnabled(!1);
        simcity.GetSpeed2Button().SetEnabled(!1);
        simcity.GetSpeed3Button().SetEnabled(!1);
        simcity.gGlobalUIHandler.mTutorialManager.CompleteTutorialStep()
      };
      simcity.gEventManager.AddEventListener(simcity.gEventTypes.CLICK, a, b)
    }
  };
  b[simcity.kTutorialStateObjective2] = {
    dialogLayoutPath : simcity.kDialogTextOnly,
    dialogString : {
      tableID : "Tutorials.json",
      stringID : "0x0e8ceb47",
      placeholder : "Whoa! Thats fast, right? This is useful for developing a city quickly."
    },
    headerString : {
      tableID : "Tutorials.json",
      stringID : "0x0e388468",
      placeholder : "SPEED CONTROL"
    },
    stepNumberString : {
      tableID : "Tutorials.json",
      stringID : "0x0e7ea05d",
      placeholder : "2/3"
    },
    hideAllButtons : !0,
    targetControl : function () {
      return simcity.GetSpeed3Button()
    },
    init : function () {
      var a = simcity.GetSpeed3Button().GetControlID();
      simcity.GetSpeed1Button().SetEnabled(!1);
      simcity.GetSpeed2Button().SetEnabled(!1);
      simcity.GetSpeed3Button().SetEnabled(!0);
      scrui.PostGameCommand(scrui.BuildCommand(["setspeed", simcity.kSpeedCheetah]));
      var b = function () {
        simcity.GetSpeed1Button().SetEnabled(!1);
        simcity.GetSpeed2Button().SetEnabled(!1);
        simcity.GetSpeed3Button().SetEnabled(!1);
        simcity.gEventManager.RemoveEventListener(simcity.gEventTypes.CLICK, a, b);
        simcity.gGlobalUIHandler.mTutorialManager.CompleteTutorialStep()
      };
      simcity.gEventManager.AddEventListener(simcity.gEventTypes.CLICK, a, b)
    }
  };
  return b[a] || null
};
simcity.TutorialCalloutStates[scrui.IDFromName("MSTutorialBudget")] = function (a) {
  var b = [];
  b[simcity.kTutorialStateClosingDialog] = {
    hideAllButtons : !0,
    onCompletion : function () {
      simcity.gGlobalUIHandler.mTutorialManager.EnableCallout();
      simcity.gGlobalUIHandler.mTutorialManager.SetTutorialState(scrui.IDFromName("MSTutorialBudget"), simcity.kTutorialStateProgressToNextState)
    }
  };
  b[simcity.kTutorialStateProgressToNextState] = {
    hideAllButtons : !0,
    onCompletion : function () {
      simcity.gGlobalUIHandler.mTutorialManager.ClearTutorialState();
      var a = simcity.gGlobalUIHandler.mMissionUI.MissionInfoFromID(scrui.IDFromName("MSTutorialBudget"));
      simcity.ManuallyDestroyMissionUnit(a);
      scrui.PostGameCommand(scrui.BuildCommand(["createUnit", scrui.IDFromName("MSCivicTutorialBudget")]))
    }
  };
  b[simcity.kTutorialStateObjective1] = {
    dialogLayoutPath : simcity.kDialogOkay,
    dialogString : {
      tableID : "Tutorials.json",
      stringID : "0x0e99059e",
      placeholder : "Now that youve got more businesses opening, lets look at your treasury."
    },
    headerString : {
      tableID : "Tutorials.json",
      stringID : "0x0e90c76f",
      placeholder : "BUDGET"
    },
    stepNumberString : {
      tableID : "Tutorials.json",
      stringID : "0x0e3b9488",
      placeholder : "1/6"
    },
    hideAllButtons : !0,
    targetControl : function () {
      return gUIManager.FindControlByID(simcity.kTxtIDMoney)
    },
    init : function () {
      gUIManager.FindControlByID(simcity.BudgetHighlightControl).SetVisibility(!0);
      gUIManager.FindControlByID(simcity.kTxtIDMoney).GetControlID()
    },
    onCompletion : function () {
      gUIManager.FindControlByID(simcity.BudgetHighlightControl).SetVisibility(!1);
      simcity.gGlobalUIHandler.mTutorialManager.CompleteTutorialStep()
    }
  };
  b[simcity.kTutorialStateObjective2] = {
    dialogLayoutPath : simcity.kDialogOkay,
    dialogString : {
      tableID : "Tutorials.json",
      stringID : "0x0e8bfdd8",
      placeholder : "Here is where you see your citys revenue."
    },
    headerString : {
      tableID : "Tutorials.json",
      stringID : "0x0e90c76f",
      placeholder : "BUDGET"
    },
    stepNumberString : {
      tableID : "Tutorials.json",
      stringID : "0x0e3b948e",
      placeholder : "2/6"
    },
    hideAllButtons : !0,
    targetControl : function () {
      return gUIManager.FindControlByID(simcity.kTxtIDIncome)
    },
    init : function () {
      gUIManager.FindControlByID(simcity.IncomeHighlightControl).SetVisibility(!0);
      gUIManager.FindControlByID(simcity.kTxtIDIncome).GetControlID()
    },
    onCompletion : function () {
      gUIManager.FindControlByID(simcity.IncomeHighlightControl).SetVisibility(!1);
      simcity.gGlobalUIHandler.mTutorialManager.CompleteTutorialStep()
    }
  };
  return b[a] || null
};
simcity.TutorialCalloutStates[scrui.IDFromName("MSCivicTutorialBudget")] = function (a) {
  var b = [];
  b[simcity.kTutorialStateClosingDialog] = {
    dialogLayoutPath : simcity.kDialogTextOnly,
    dialogString : {
      tableID : "Tutorials.json",
      stringID : "0x0e8cf65c",
      placeholder : "Everyone who was upset about high taxes should have one less thing to complain about now!"
    },
    headerString : {
      tableID : "Tutorials.json",
      stringID : "0x0e90c76f",
      placeholder : "BUDGET"
    },
    stepNumberString : {
      tableID : "Tutorials.json",
      stringID : "0x0e3b94a6",
      placeholder : "6/6"
    },
    hideAllButtons : !0,
    targetControl : function () {
      return gUIManager.FindControlByID(simcity.kBTNCloseBudget)
    },
    init : function () {
      var a = gUIManager.FindControlByID(simcity.kBTNCloseBudget).GetControlID(),
      b = function () {
        simcity.gEventManager.RemoveEventListener(simcity.gEventTypes.CLICK, a, b);
        simcity.gGlobalUIHandler.mTutorialManager.SetTutorialState(scrui.IDFromName("MSCivicTutorialBudget"), simcity.kTutorialStateProgressToNextState)
      };
      simcity.gEventManager.AddEventListener(simcity.gEventTypes.CLICK, a, b)
    }
  };
  b[simcity.kTutorialStateProgressToNextState] = {
    hideAllButtons : !0,
    onCompletion : function () {
      simcity.gGlobalUIHandler.mTutorialManager.ClearTutorialState();
      var a = simcity.gGlobalUIHandler.mMissionUI.MissionInfoFromID(scrui.IDFromName("MSCivicTutorialBudget"));
      simcity.ManuallyDestroyMissionUnit(a);
      scrui.PostGameCommand(scrui.BuildCommand(["createUnit", scrui.IDFromName("MSTutorialClickRegionSpeechBubble")]))
    }
  };
  b[simcity.kTutorialStateObjective1] = {
    dialogLayoutPath : simcity.kDialogTextOnly,
    dialogString : {
      tableID : "Tutorials.json",
      stringID : "0x0e8cf65b",
      placeholder : "With Sims moving in and businesses opening, you should see an increase in the city income."
    },
    headerString : {
      tableID : "Tutorials.json",
      stringID : "0x0e90c76f",
      placeholder : "BUDGET"
    },
    stepNumberString : {
      tableID : "Tutorials.json",
      stringID : "0x0e3b9493",
      placeholder : "3/6"
    },
    hideAllButtons : !0,
    showButtons : [simcity.GetBudgetButton()],
    targetControl : function () {
      return gUIManager.FindControlByID(245433542)
    },
    init : function () {
      var a = simcity.GetBudgetButton().GetControlID(),
      b = function () {
        simcity.gEventManager.RemoveEventListener(simcity.gEventTypes.CLICK, a, b);
        simcity.gGlobalUIHandler.mTutorialManager.CompleteTutorialStep();
        gUIManager.mBlockMouseClick = !0
      };
      simcity.gEventManager.AddEventListener(simcity.gEventTypes.CLICK, a, b)
    }
  };
  b[simcity.kTutorialStateObjective2] = {
    dialogLayoutPath : simcity.kDialogOkayLiftUp,
    lockUI : !0,
    dialogString : {
      tableID : "Tutorials.json",
      stringID : "0x0ee2daa3",
      placeholder : "Here you can see all of your income and expenses."
    },
    headerString : {
      tableID : "Tutorials.json",
      stringID : "0x0e90c76f",
      placeholder : "BUDGET"
    },
    stepNumberString : {
      tableID : "Tutorials.json",
      stringID : "0x0e3b9498",
      placeholder : "4/6"
    },
    hideAllButtons : !0,
    onCompletion : function () {
      simcity.gGlobalUIHandler.mTutorialManager.CompleteTutorialStep()
    }
  };
  b[simcity.kTutorialStateObjective3] = {
    dialogLayoutPath : simcity.kDialogTextOnly,
    dialogString : {
      tableID : "Tutorials.json",
      stringID : "0x0ed5a299",
      placeholder : "Some of those protestors have been grumbling that taxes are too high."
    },
    headerString : {
      tableID : "Tutorials.json",
      stringID : "0x0e90c76f",
      placeholder : "BUDGET"
    },
    stepNumberString : {
      tableID : "Tutorials.json",
      stringID : "0x0e3b949f",
      placeholder : "5/6"
    },
    hideAllButtons : !0,
    targetControl : function () {
      return simcity.GetBudgetTaxDecrementButton()
    },
    init : function () {
      var a = simcity.GetBudgetTaxDecrementButton().GetControlID(),
      b = function () {
        simcity.gEventManager.RemoveEventListener(simcity.gEventTypes.CLICK, a, b);
        simcity.gGlobalUIHandler.mTutorialManager.CompleteTutorialStep();
        gUIManager.mBlockMouseClick = !0
      };
      simcity.gEventManager.AddEventListener(simcity.gEventTypes.CLICK, a, b)
    }
  };
  return b[a] || null
};
simcity.TutorialCalloutStates[scrui.IDFromName("MSTutorialClickRegionSpeechBubble")] = function (a) {
  var b = [];
  b[simcity.kTutorialStateOpeningDialog] = {
    dialogLayoutPath : simcity.kDialogTextOnly,
    dialogString : {
      tableID : "Tutorials.json",
      stringID : "0x0e991d71",
      placeholder : "tutorial welcome"
    },
    headerString : {
      tableID : "Tutorials.json",
      stringID : "0x0e7ea05b",
      placeholder : "REGION"
    },
    stepNumberString : {
      tableID : "Tutorials.json",
      stringID : "0x0e3b9488",
      placeholder : "1/6"
    },
    camera : simcity.GetCameraPosition([281.3, 66.46, -793.7],
      539.2, 747.2, 33.8),
    init : function () {
      scrui.PostGameCommand(scrui.BuildCommand(["setspeed", simcity.kSpeedTurtle]));
      simcity.ShowTutorialSpeechBalloon(564585119)
    },
    hideAllButtons : !0
  };
  return b[a] || null
};
simcity.TutorialCalloutStates[scrui.IDFromName("MSTutorialReclaimCity")] = function (a) {
  var b = [];
  b[simcity.kTutorialStateClosingDialog] = {
    hideAllButtons : !0,
    allowUnitPicking : !0,
    showTradeArrows : !0,
    showCursorAttachment : !0,
    onCompletion : function () {
      var a = simcity.gGlobalUIHandler;
      null !== a.mToolPaletteUIHandler && null !== a.mToolPaletteUIHandler.mSelectedCategoryButton && a.mToolPaletteUIHandler.CloseToolPanel();
      simcity.gGlobalUIHandler.mTutorialManager.SetTutorialState(scrui.IDFromName("MSTutorialReclaimCity"), simcity.kTutorialStateProgressToNextState)
    }
  };
  b[simcity.kTutorialStateProgressToNextState] = {
    hideAllButtons : !0,
    showTradeArrows : !0,
    showCursorAttachment : !0,
    onCompletion : function () {
      simcity.gGlobalUIHandler.mTutorialManager.ClearTutorialState();
      var a = simcity.gGlobalUIHandler.mMissionUI.MissionInfoFromID(scrui.IDFromName("MSTutorialReclaimCity"));
      simcity.ManuallyDestroyMissionUnit(a);
      scrui.PostGameCommand(scrui.BuildCommand(["createUnit", scrui.IDFromName("MSTutorialTradeWater")]))
    }
  };
  b[simcity.kTutorialStateOpeningDialog] = {
    dialogLayoutPath : simcity.kDialogTextOnlyLiftUp,
    dialogString : {
      tableID : "Tutorials.json",
      stringID : "0x0e9dfee8",
      placeholder : "Summer Shoals is not the only city in the region."
    },
    headerString : {
      tableID : "Tutorials.json",
      stringID : "0x0e7ea05b",
      placeholder : "REGION"
    },
    stepNumberString : {
      tableID : "Tutorials.json",
      stringID : "0x0e3b948e",
      placeholder : "2/6"
    },
    hideAllButtons : !0,
    showButtons : [simcity.GetRegionViewButton()],
    targetControl : function () {
      return simcity.GetRegionViewButton()
    },
    init : function () {
      var a = simcity.GetRegionViewButton().GetControlID(),
      b = function () {
        simcity.gEventManager.RemoveEventListener(simcity.gEventTypes.CLICK,
          a, b);
        simcity.gGlobalUIHandler.mTutorialManager.HideCalloutHelper();
        var e = simcity.GetTutorialMissionInfo(scrui.IDFromName("MSTutorialReclaimCity"));
        simcity.gGlobalUIHandler.mTutorialManager.SetTutorialState(e, simcity.kTutorialStateObjective1)
      };
      simcity.gEventManager.AddEventListener(simcity.gEventTypes.CLICK, a, b)
    }
  };
  b[simcity.kTutorialStateObjective1] = {
    dialogLayoutPath : simcity.kDialogOkay,
    dialogInRegion : !0,
    lockUI : !0,
    dialogString : {
      tableID : "Tutorials.json",
      stringID : "0x0e938f3f",
      placeholder : "Whoa! You can see everything from up here!"
    },
    headerString : {
      tableID : "Tutorials.json",
      stringID : "0x0e7ea05b",
      placeholder : "REGION"
    },
    stepNumberString : {
      tableID : "Tutorials.json",
      stringID : "0x0e3b9493",
      placeholder : "3/6"
    },
    hideAllButtons : !0,
    init : function () {
      scrui.PostGameCommand(scrui.BuildCommand(["camera", "immediate", !1, "move", "0, 0, 0", "rotate", 60]))
    },
    onCompletion : function () {
      simcity.gGlobalUIHandler.mTutorialManager.CompleteTutorialStep()
    }
  };
  b[simcity.kTutorialStateObjective2] = {
    dialogLayoutPath : simcity.kDialogOkay,
    dialogInRegion : !0,
    lockUI : !0,
    dialogString : {
      tableID : "Tutorials.json",
      stringID : "0x0edea54e",
      placeholder : "This is your city, Summer Shoals."
    },
    headerString : {
      tableID : "Tutorials.json",
      stringID : "0x0e7ea05b",
      placeholder : "REGION"
    },
    stepNumberString : {
      tableID : "Tutorials.json",
      stringID : "0x0e3b9498",
      placeholder : "4/6"
    },
    hideAllButtons : !0,
    targetControl : function () {
      return simcity.GetRegionView_ViewCityButton(simcity.TutorialMaxisBurgBoxID)
    },
    onCompletion : function () {
      simcity.gGlobalUIHandler.mTutorialManager.CompleteTutorialStep()
    }
  };
  b[simcity.kTutorialStateObjective3] = {
    dialogLayoutPath : simcity.kDialogOkay,
    dialogInRegion : !0,
    lockUI : !0,
    dialogString : {
      tableID : "Tutorials.json",
      stringID : "0x0e9e0138",
      placeholder : "Each region has a Great Works site. Several of the cities in the region can collaborate on a massive project to benefit the region."
    },
    headerString : {
      tableID : "Tutorials.json",
      stringID : "0x0e7ea05b",
      placeholder : "REGION"
    },
    stepNumberString : {
      tableID : "Tutorials.json",
      stringID : "0x0e3b949f",
      placeholder : "5/6"
    },
    hideAllButtons : !0,
    targetControl : function () {
      return simcity.GetRegionView_ViewCityButton(simcity.TutorialGreatWorksBoxID)
    },
    onCompletion : function () {
      simcity.gGlobalUIHandler.mTutorialManager.CompleteTutorialStep()
    }
  };
  b[simcity.kTutorialStateObjective4] = {
    dialogLayoutPath : simcity.kDialogOkay,
    dialogInRegion : !0,
    lockUI : !0,
    dialogString : {
      tableID : "Tutorials.json",
      stringID : "0x0edea5c2",
      placeholder : "Off in the distance is Lucky Shores, the nearest big city."
    },
    headerString : {
      tableID : "Tutorials.json",
      stringID : "0x0e7ea05b",
      placeholder : "REGION"
    },
    stepNumberString : {
      tableID : "Tutorials.json",
      stringID : "0x0e3b94a6",
      placeholder : "6/6"
    },
    hideAllButtons : !0,
    targetControl : function () {
      return simcity.GetRegionView_ViewCityButton(simcity.TutorialLuckyShoresBoxID)
    },
    onCompletion : function () {
      simcity.gGlobalUIHandler.mTutorialManager.CompleteTutorialStep()
    }
  };
  return b[a] || null
};
simcity.TutorialCalloutStates[scrui.IDFromName("MSTutorialTradeWater")] = function (a) {
  var b = [];
  b[simcity.kTutorialStateClosingDialog] = {
    dialogLayoutPath : simcity.kDialogOkayLiftUp,
    dialogString : {
      tableID : "Tutorials.json",
      stringID : "0x0e9e43d3",
      placeholder : "There it is, flowing under the roads! Water is essential for your cities."
    },
    headerString : {
      tableID : "Tutorials.json",
      stringID : "0x0e388489",
      placeholder : "WATER"
    },
    stepNumberString : {
      tableID : "Tutorials.json",
      stringID : "0x0e3b8d6a",
      placeholder : "5/5"
    },
    camera : simcity.GetCameraPosition([-1014.54,
        -158.97, -775.37], 120.23, 3081.3, 40.78),
    hideAllButtons : !0,
    lockUI : !0,
    init : function () {
      scrui.PostGameCommand(scrui.BuildCommand(["setspeed", simcity.kSpeedRabbit]))
    },
    onCompletion : function () {
      var a = simcity.gGlobalUIHandler;
      null !== a.mToolPaletteUIHandler && null !== a.mToolPaletteUIHandler.mSelectedCategoryButton && a.mToolPaletteUIHandler.CloseToolPanel();
      simcity.gGlobalUIHandler.mTutorialManager.SetTutorialState(scrui.IDFromName("MSTutorialTradeWater"), simcity.kTutorialStateProgressToNextState)
    }
  };
  b[simcity.kTutorialStateProgressToNextState] = {
    hideAllButtons : !0,
    onCompletion : function () {
      simcity.gGlobalUIHandler.mTutorialManager.ClearTutorialState();
      var a = simcity.gGlobalUIHandler.mMissionUI.MissionInfoFromID(scrui.IDFromName("MSTutorialTradeWater"));
      simcity.ManuallyDestroyMissionUnit(a);
      scrui.PostGameCommand(scrui.BuildCommand(["createUnit", scrui.IDFromName("MSCivicTutorialDeselectDemolishTool")]))
    }
  };
  b[simcity.kTutorialStateOpeningDialog] = {
    dialogLayoutPath : simcity.kDialogTextOnly,
    dialogString : {
      tableID : "Tutorials.json",
      stringID : "0x0e8f702d",
      placeholder : "Lucky Shores has way more water than they need, so lets buy some of it."
    },
    headerString : {
      tableID : "Tutorials.json",
      stringID : "0x0e388489",
      placeholder : "WATER"
    },
    stepNumberString : {
      tableID : "Tutorials.json",
      stringID : "0x0e3b8d4a",
      placeholder : "1/5"
    },
    dialogInRegion : !0,
    targetControl : function () {
      return simcity.gGlobalUIHandler.mRegionViewUIHandler.GetDataLayerButton(simcity.kRegionDataLayer_Water)
    },
    hideAllButtons : !0,
    showButtons : [simcity.gGlobalUIHandler.mRegionViewUIHandler.GetDataLayerButton(simcity.kRegionDataLayer_Water)],
    customCompletionCheck : function () {
      if (simcity.GetTradeSwitchButton()) {
        simcity.gGlobalUIHandler.mTutorialManager.HideCalloutHelper();
        var a = simcity.GetTutorialMissionInfo(scrui.IDFromName("MSTutorialTradeWater"));
        simcity.gGlobalUIHandler.mTutorialManager.SetTutorialState(a, simcity.kTutorialStateObjective1)
      }
    }
  };
  b[simcity.kTutorialStateObjective1] = {
    dialogLayoutPath : simcity.kDialogTextOnlyLiftUp,
    dialogString : {
      tableID : "Tutorials.json",
      stringID : "0x0ec4a62a",
      placeholder : "Here you can manage neighbor deals for water. Lets buy our water from Lucky Shores."
    },
    dialogInRegion : !0,
    headerString : {
      tableID : "Tutorials.json",
      stringID : "0x0e388489",
      placeholder : "WATER"
    },
    stepNumberString : {
      tableID : "Tutorials.json",
      stringID : "0x0e3b8d54",
      placeholder : "2/5"
    },
    hideAllButtons : !0,
    targetControl : function () {
      return simcity.GetTradeSwitchButton()
    },
    init : function () {
      var a = simcity.GetTradeSwitchButton().GetControlID(),
      b = function () {
        simcity.gEventManager.RemoveEventListener(simcity.gEventTypes.CLICK, a, b);
        simcity.gGlobalUIHandler.mTutorialManager.HideCalloutHelper();
        simcity.gGlobalUIHandler.mTutorialManager.CompleteTutorialStep()
      };
      simcity.gEventManager.AddEventListener(simcity.gEventTypes.CLICK, a, b)
    }
  };
  b[simcity.kTutorialStateObjective2] = {
    dialogLayoutPath : simcity.kDialogOkayLiftUp,
    dialogString : {
      tableID : "Tutorials.json",
      stringID : "0x0edeabc8",
      placeholder : "Thats it! Now were buying the water we need from Lucky Shores."
    },
    showTradeArrows : !0,
    showCursorAttachment : !0,
    headerString : {
      tableID : "Tutorials.json",
      stringID : "0x0e388489",
      placeholder : "WATER"
    },
    stepNumberString : {
      tableID : "Tutorials.json",
      stringID : "0x0e3b8d5d",
      placeholder : "3/5"
    },
    hideAllButtons : !0,
    lockUI : !0,
    onCompletion : function () {
      simcity.gGlobalUIHandler.mTutorialManager.CompleteTutorialStep()
    }
  };
  b[simcity.kTutorialStateObjective3] = {
    dialogLayoutPath : simcity.kDialogTextOnlyLiftUp,
    dialogString : {
      tableID : "Tutorials.json",
      stringID : "0x0e9e41e6",
      placeholder : "Neighboring cities can sell or gift resources or services to each other."
    },
    showTradeArrows : !0,
    showCursorAttachment : !0,
    dialogInRegion : !0,
    showButtons : [simcity.GetRegionViewReturnToCityButton()],
    headerString : {
      tableID : "Tutorials.json",
      stringID : "0x0e388489",
      placeholder : "WATER"
    },
    stepNumberString : {
      tableID : "Tutorials.json",
      stringID : "0x0e3b8d63",
      placeholder : "4/5"
    },
    hideAllButtons : !0,
    targetControl : function () {
      return simcity.GetRegionViewReturnToCityButton()
    },
    init : function () {
      var a = simcity.GetRegionViewReturnToCityButton().GetControlID(),
      b = function () {
        simcity.gEventManager.RemoveEventListener(simcity.gEventTypes.CLICK, a, b);
        simcity.gGlobalUIHandler.mTutorialManager.HideCalloutHelper();
        simcity.gGlobalUIHandler.mTutorialManager.CompleteTutorialStep()
      };
      simcity.gEventManager.AddEventListener(simcity.gEventTypes.CLICK,
        a, b)
    }
  };
  return b[a] || null
};
simcity.TutorialCalloutStates[scrui.IDFromName("MSCivicTutorialDeselectDemolishTool")] = function (a) {
  var b = [];
  b[simcity.kTutorialStateOpeningDialog] = {
    dialogLayoutPath : simcity.kDialogTextOnly,
    dialogString : {
      tableID : "Tutorials.json",
      stringID : "0x0e9db9c1",
      placeholder : "Lucky Shores helped us with our water problem. Now Eva is dealing with a power shortage she thinks we can solve ourselves."
    },
    headerString : {
      tableID : "Tutorials.json",
      stringID : "0x0e38847a",
      placeholder : "POWER"
    },
    stepNumberString : {
      tableID : "Tutorials.json",
      stringID : "0x0e3b9488",
      placeholder : "1/6"
    },
    hideAllButtons : !0,
    allowUnitPicking : !0,
    camera : simcity.GetCameraPosition([281.3, 66.46, -793.7], 539.2, 747.2, 33.8),
    init : function () {
      simcity.ShowTutorialSpeechBalloon(2327285272);
      scrui.PostGameCommand(scrui.BuildCommand(["deselectTool"]));
      simcity.gGlobalUIHandler.mToolPaletteUIHandler.UpdateAlert(simcity.kCategoryIDZones, simcity.kAlertLevelNormal);
      simcity.gGlobalUIHandler.mToolPaletteUIHandler.UpdateAlert(simcity.kCategoryIDWater, simcity.kAlertLevelNormal);
      simcity.gGlobalUIHandler.mToolPaletteUIHandler.UpdateAlert(simcity.kCategoryIDPower,
        simcity.kAlertLevelCritical);
      simcity.ForceUpdateCategory(simcity.kCategoryIDPower, !1)
    }
  };
  return b[a] || null
};
simcity.TutorialCalloutStates[scrui.IDFromName("MSCivicTutorialCoalPower")] = function (a) {
  var b = [];
  b[simcity.kTutorialStateOpeningDialog] = {
    dialogLayoutPath : simcity.kDialogTextOnly,
    dialogString : {
      tableID : "Tutorials.json",
      stringID : "0x0e2f4133",
      placeholder : "This is the Coal Power Plant that provides power to Summer Shoals."
    },
    headerString : {
      tableID : "Tutorials.json",
      stringID : "0x0e38847a",
      placeholder : "POWER"
    },
    stepNumberString : {
      tableID : "Tutorials.json",
      stringID : "0x0e3b948e",
      placeholder : "2/6"
    },
    camera : simcity.GetCameraPosition([-456.91,
        -797.69, -711.29], 81.1, 615.4, 18),
    targetToy : scrui.IDFromName("T_Power_CoalT1_Base_01_01_N_Tutorial"),
    hideAllButtons : !0,
    allowUnitPicking : !0,
    init : function () {
      scrui.PostGameCommand(scrui.BuildCommand(["setspeed", simcity.kSpeedTurtle]));
      var a = scrui.IDFromName("T_Power_CoalT1_Base_01_01_N_Tutorial");
      simcity.EnableRollover();
      var b = function () {
        simcity.gEventManager.RemoveEventListener(simcity.gEventTypes.GENERICEVENT, a, b);
        simcity.gGlobalUIHandler.mTutorialManager.HideCalloutHelper();
        var e = simcity.GetTutorialMissionInfo(scrui.IDFromName("MSCivicTutorialCoalPower"));
        simcity.gGlobalUIHandler.mTutorialManager.SetTutorialState(e, simcity.kTutorialStateObjective1)
      };
      simcity.gEventManager.AddEventListener(simcity.gEventTypes.GENERICEVENT, a, b)
    }
  };
  b[simcity.kTutorialStateClosingDialog] = {
    hideAllButtons : !0,
    allowUnitPicking : !0,
    onCompletion : function () {
      simcity.gGlobalUIHandler.mTutorialManager.EnableCallout();
      simcity.gGlobalUIHandler.mTutorialManager.SetTutorialState(scrui.IDFromName("MSCivicTutorialCoalPower"), simcity.kTutorialStateProgressToNextState)
    }
  };
  b[simcity.kTutorialStateProgressToNextState] = {
    hideAllButtons : !0,
    allowUnitPicking : !0,
    onCompletion : function () {
      var a = simcity.gGlobalUIHandler.mMissionUI.MissionInfoFromID(scrui.IDFromName("MSCivicTutorialCoalPower"));
      simcity.ManuallyDestroyMissionUnit(a);
      simcity.DisableRollover();
      scrui.PostGameCommand(scrui.BuildCommand(["deselectUnit"]));
      simcity.gGlobalUIHandler.mTutorialManager.HideCalloutHelper();
      scrui.PostGameCommand(scrui.BuildCommand(["createUnit", scrui.IDFromName("MSCivicTutorialCoalPowerPt2")]))
    }
  };
  b[simcity.kTutorialStateObjective1] = {
    dialogLayoutPath : simcity.kDialogTextOnlyLow,
    dialogString : {
      tableID : "Tutorials.json",
      stringID : "0x0e9faaa7",
      placeholder : "The Coal Power Plant buys the coal it needs from the Global Market."
    },
    headerString : {
      tableID : "Tutorials.json",
      stringID : "0x0e38847a",
      placeholder : "POWER"
    },
    stepNumberString : {
      tableID : "Tutorials.json",
      stringID : "0x0e3b9493",
      placeholder : "3/6"
    },
    hideAllButtons : !0,
    allowUnitPicking : !0,
    calloutArrow : simcity.cTutorialCalloutUI.kWinIDArrowSE,
    targetControl : function () {
      return simcity.GetDeliveryButton()
    },
    init : function () {
      scrui.PostGameCommand(scrui.BuildCommand(["LockCamera"]));
      var a = simcity.GetDeliveryButton().GetControlID(),
      b = function () {
        simcity.gEventManager.RemoveEventListener(simcity.gEventTypes.CLICK, a, b);
        simcity.gGlobalUIHandler.mTutorialManager.CompleteTutorialStep();
        simcity.gGlobalUIHandler.mTutorialManager.SetModalWindow(null, !1);
        simcity.gGlobalUIHandler.mTutorialManager.SetModalWindow(simcity.gGlobalUIHandler.mTutorialCallout.mCallout.mDialogLayout, !0)
      };
      simcity.gEventManager.AddEventListener(simcity.gEventTypes.CLICK, a, b)
    }
  };
  return b[a] || null
};
simcity.TutorialCalloutStates[scrui.IDFromName("MSCivicTutorialCoalPowerPt2")] = function (a) {
  var b = [];
  b[simcity.kTutorialStateClosingDialog] = {
    dialogLayoutPath : simcity.kDialogOkayLow,
    dialogString : {
      tableID : "Tutorials.json",
      stringID : "0x0e9fab56",
      placeholder : "Now we have power! Were paying for the coal deliveries, but our city needs power!"
    },
    headerString : {
      tableID : "Tutorials.json",
      stringID : "0x0e38847a",
      placeholder : "POWER"
    },
    stepNumberString : {
      tableID : "Tutorials.json",
      stringID : "0x0e3b949f",
      placeholder : "5/6"
    },
    camera : simcity.GetCameraPosition([-198.99, -149.03, -793.12], 66, 1900, 25),
    hideAllButtons : !0,
    init : function () {
      simcity.gGlobalUIHandler.mLayerUIHandler.ActivateLayer(simcity.kLayerElectricLight);
      scrui.PostGameCommand(scrui.BuildCommand(["setspeed", simcity.kSpeedRabbit]));
      simcity.gGlobalUIHandler.mToolPaletteUIHandler.UpdateAlert(simcity.kCategoryIDPower, simcity.kAlertLevelNormal)
    },
    onCompletion : function () {
      simcity.gGlobalUIHandler.mTutorialManager.EnableCallout();
      simcity.gGlobalUIHandler.mTutorialManager.SetTutorialState(scrui.IDFromName("MSCivicTutorialCoalPowerPt2"),
        simcity.kTutorialStateProgressToNextState)
    },
    onNext : function () {
      simcity.gGlobalUIHandler.mLayerUIHandler.DeactivateLayer();
      simcity.gGlobalUIHandler.mTutorialManager.SetTutorialState(scrui.IDFromName("MSCivicTutorialCoalPowerPt2"), simcity.kTutorialStateProgressToNextState)
    }
  };
  b[simcity.kTutorialStateProgressToNextState] = {
    dialogLayoutPath : simcity.kDialogOkayLow,
    dialogString : {
      tableID : "Tutorials.json",
      stringID : "0x0ee2dbd7",
      placeholder : "Cities without power will stop working and Sims will abandon them."
    },
    headerString : {
      tableID : "Tutorials.json",
      stringID : "0x0e38847a",
      placeholder : "POWER"
    },
    stepNumberString : {
      tableID : "Tutorials.json",
      stringID : "0x0e3b94a6",
      placeholder : "6/6"
    },
    hideAllButtons : !0,
    onCompletion : function () {
      simcity.gGlobalUIHandler.mLayerUIHandler.DeactivateLayer();
      simcity.gGlobalUIHandler.mTutorialManager.ClearTutorialState();
      scrui.PostGameCommand(scrui.BuildCommand(["createUnit", scrui.IDFromName("MSTutorialClickPoliceSpeechBubble")]));
      simcity.DisableRollover()
    }
  };
  b[simcity.kTutorialStateObjective1] = {
    dialogLayoutPath : simcity.kDialogTextOnly,
    dialogString : {
      tableID : "Tutorials.json",
      stringID : "0x0e9faaff",
      placeholder : "There you go! This coal truck is arriving to deliver coal to our power plant."
    },
    headerString : {
      tableID : "Tutorials.json",
      stringID : "0x0e38847a",
      placeholder : "POWER"
    },
    stepNumberString : {
      tableID : "Tutorials.json",
      stringID : "0x0e3b9498",
      placeholder : "4/6"
    },
    hideAllButtons : !0,
    init : function () {
      scrui.PostGameCommand(scrui.BuildCommand(["setspeed", simcity.kSpeedTurtle]))
    }
  };
  return b[a] || null
};
simcity.TutorialCalloutStates[scrui.IDFromName("MSTutorialClickPoliceSpeechBubble")] = function (a) {
  var b = [];
  b[simcity.kTutorialStateOpeningDialog] = {
    dialogLayoutPath : simcity.kDialogTextOnly,
    dialogString : {
      tableID : "Tutorials.json",
      stringID : "0x0ebdc3ce",
      placeholder : "Were no longer in the dark, but now Evas worried about crime."
    },
    headerString : {
      tableID : "Tutorials.json",
      stringID : "0x0e8e776d",
      placeholder : "CRIME"
    },
    stepNumberString : {
      tableID : "Tutorials.json",
      stringID : "0x0e3b9488",
      placeholder : "1/6"
    },
    camera : simcity.GetCameraPosition([281.3,
        66.46, -793.7], 539.2, 747.2, 33.8),
    hideAllButtons : !0,
    allowUnitPicking : !0,
    init : function () {
      simcity.ShowTutorialSpeechBalloon(3963724186);
      scrui.PostGameCommand(scrui.BuildCommand(["UnlockCamera"]));
      scrui.PostGameCommand(scrui.BuildCommand(["setspeed", simcity.kSpeedTurtle]));
      scrui.PostGameCommand(scrui.BuildCommand(["deselectTool"]));
      simcity.gGlobalUIHandler.mToolPaletteUIHandler.UpdateAlert(simcity.kCategoryIDPolice, simcity.kAlertLevelCritical)
    }
  };
  return b[a] || null
};
simcity.TutorialCalloutStates[scrui.IDFromName("MSTutorialPoliceStation")] = function (a) {
  var b = [];
  b[simcity.kTutorialStateClosingDialog] = {
    hideAllButtons : !0,
    allowUnitPicking : !0,
    onCompletion : function () {
      simcity.gGlobalUIHandler.mTutorialManager.SetTutorialState(scrui.IDFromName("MSTutorialPoliceStation"), simcity.kTutorialStateProgressToNextState)
    }
  };
  b[simcity.kTutorialStateProgressToNextState] = {
    hideAllButtons : !0,
    onCompletion : function () {
      scrui.PostGameCommand(scrui.BuildCommand(["deselectUnit"]));
      var a = simcity.gGlobalUIHandler.mMissionUI.MissionInfoFromID(scrui.IDFromName("MSTutorialPoliceStation"));
      simcity.ManuallyDestroyMissionUnit(a);
      simcity.gGlobalUIHandler.mTutorialManager.ClearTutorialState();
      scrui.PostGameCommand(scrui.BuildCommand(["createUnit", scrui.IDFromName("MSTutorialPoliceStationPt2")]))
    }
  };
  b[simcity.kTutorialStateOpeningDialog] = {
    dialogLayoutPath : simcity.kDialogTextOnly,
    dialogString : {
      tableID : "Tutorials.json",
      stringID : "0x0ed78ad3",
      placeholder : "Theres nothing wrong with this old Police Station, its just closed to save a few Simoleons."
    },
    headerString : {
      tableID : "Tutorials.json",
      stringID : "0x0e8e776d",
      placeholder : "CRIME"
    },
    stepNumberString : {
      tableID : "Tutorials.json",
      stringID : "0x0e3b948e",
      placeholder : "2/6"
    },
    camera : simcity.GetCameraPosition([-164.27, 222.02, -793.45], 540.1, 215.4, 45),
    targetToy : scrui.IDFromName("T_Police_T1_Base_01_01_N"),
    hideAllButtons : !0,
    allowUnitPicking : !0,
    init : function () {
      scrui.PostGameCommand(scrui.BuildCommand(["setspeed", simcity.kSpeedRabbit]));
      var a = scrui.IDFromName("T_Police_T1_Base_01_01_N");
      simcity.EnableRollover();
      var b = function () {
        simcity.gEventManager.RemoveEventListener(simcity.gEventTypes.GENERICEVENT,
          a, b);
        simcity.gGlobalUIHandler.mTutorialManager.HideCalloutHelper();
        var e = simcity.GetTutorialMissionInfo(scrui.IDFromName("MSTutorialPoliceStation"));
        simcity.gGlobalUIHandler.mTutorialManager.SetTutorialState(e, simcity.kTutorialStateObjective1)
      };
      simcity.gEventManager.AddEventListener(simcity.gEventTypes.GENERICEVENT, a, b)
    }
  };
  b[simcity.kTutorialStateObjective1] = {
    dialogLayoutPath : simcity.kDialogTextOnlyLow,
    dialogString : {
      tableID : "Tutorials.json",
      stringID : "0x0ed78ad4",
      placeholder : "Alright! Once you open the Police Station, workers will arrive to serve as police."
    },
    headerString : {
      tableID : "Tutorials.json",
      stringID : "0x0e8e776d",
      placeholder : "POWER"
    },
    stepNumberString : {
      tableID : "Tutorials.json",
      stringID : "0x0e3b9493",
      placeholder : "3/6"
    },
    hideAllButtons : !0,
    allowUnitPicking : !0,
    startTimer : !1,
    timer1 : 300,
    targetControl : function () {
      return simcity.GetOnOffToggleButton()
    },
    customCompletionCheck : function (a) {
      this.startTimer && 0 < this.timer1 && (this.timer1 -= a, 0 >= this.timer1 && simcity.gGlobalUIHandler.mTutorialManager.CompleteTutorialStep())
    },
    init : function () {
      scrui.PostGameCommand(scrui.BuildCommand(["LockCamera"]));
      var a = simcity.GetOnOffToggleButton().GetControlID(),
      b = this,
      e = function () {
        simcity.gEventManager.RemoveEventListener(simcity.gEventTypes.CLICK, a, e);
        b.startTimer = !0
      };
      simcity.gEventManager.AddEventListener(simcity.gEventTypes.CLICK, a, e)
    }
  };
  return b[a] || null
};
simcity.TutorialCalloutStates[scrui.IDFromName("MSTutorialPoliceStationPt2")] = function (a) {
  var b = [];
  b[simcity.kTutorialStateClosingDialog] = {
    dialogLayoutPath : simcity.kDialogOkay,
    dialogString : {
      tableID : "Tutorials.json",
      stringID : "0x0f0a24a7",
      placeholder : "Uneducated and unemployed Sims may turn to a life of crime."
    },
    headerString : {
      tableID : "Tutorials.json",
      stringID : "0x0e8e776d",
      placeholder : "CRIME"
    },
    stepNumberString : {
      tableID : "Tutorials.json",
      stringID : "0x0e3b949f",
      placeholder : "5/6"
    },
    hideAllButtons : !0,
    allowUnitPicking : !0,
    init : function () {
      simcity.gGlobalUIHandler.mTutorialManager.mCustomTimer = 1E4
    },
    customCompletionCheck : function () {
      0 > simcity.gGlobalUIHandler.mTutorialManager.mCustomTimer && (simcity.gGlobalUIHandler.mTutorialManager.mCustomTimer = 1E6, simcity.gGlobalUIHandler.mTutorialCallout.mCallout.mTargetInfo.mPosition = null, simcity.gGlobalUIHandler.mTutorialManager.SetTutorialState(scrui.IDFromName("MSTutorialPoliceStationPt2"), simcity.kTutorialStateProgressToNextState))
    },
    onCompletion : function () {
      var a = simcity.gGlobalUIHandler;
      null !== a.mToolPaletteUIHandler && null !== a.mToolPaletteUIHandler.mSelectedCategoryButton && a.mToolPaletteUIHandler.CloseToolPanel();
      simcity.gGlobalUIHandler.mTutorialManager.SetTutorialState(scrui.IDFromName("MSTutorialPoliceStationPt2"), simcity.kTutorialStateProgressToNextState)
    }
  };
  b[simcity.kTutorialStateProgressToNextState] = {
    dialogLayoutPath : simcity.kDialogOkay,
    dialogString : {
      tableID : "Tutorials.json",
      stringID : "0x0ed78ad6",
      placeholder : "Get those crooks! Police respond to crimes in progress and patrol the neighborhood around the station to keep an eye out for criminals."
    },
    headerString : {
      tableID : "Tutorials.json",
      stringID : "0x0e8e776d",
      placeholder : "CRIME"
    },
    stepNumberString : {
      tableID : "Tutorials.json",
      stringID : "0x0e3b94a6",
      placeholder : "6/6"
    },
    hideAllButtons : !0,
    camera : simcity.GetCameraPosition([-265.88, -94.06, -792.45], 290.1, 158.45, 18),
    init : function () {
      scrui.PostGameCommand(scrui.BuildCommand(["setspeed", simcity.kSpeedRabbit]));
      scrui.PostGameCommand(scrui.BuildCommand(["UnlockCamera"]))
    },
    onCompletion : function () {
      var a = simcity.gGlobalUIHandler;
      null !== a.mToolPaletteUIHandler && null !==
      a.mToolPaletteUIHandler.mSelectedCategoryButton && a.mToolPaletteUIHandler.CloseToolPanel();
      a = simcity.gGlobalUIHandler.mMissionUI.MissionInfoFromID(scrui.IDFromName("MSTutorialPoliceStationPt2"));
      simcity.ManuallyDestroyMissionUnit(a);
      simcity.gGlobalUIHandler.mTutorialManager.ClearTutorialState();
      simcity.gGlobalUIHandler.mToolPaletteUIHandler.UpdateAlert(simcity.kCategoryIDPolice, simcity.kAlertLevelNormal);
      scrui.PostGameCommand(scrui.BuildCommand(["createUnit", scrui.IDFromName("MSTutorialClickGarbageSpeechBubble")]))
    }
  };
  b[simcity.kTutorialStateObjective1] = {
    dialogLayoutPath : simcity.kDialogTextOnly,
    dialogString : {
      tableID : "Tutorials.json",
      stringID : "0x0e90dfca",
      placeholder : "Good thing you got the Police Station working."
    },
    headerString : {
      tableID : "Tutorials.json",
      stringID : "0x0e8e776d",
      placeholder : "CRIME"
    },
    stepNumberString : {
      tableID : "Tutorials.json",
      stringID : "0x0e3b9498",
      placeholder : "4/6"
    },
    hideAllButtons : !0,
    camera : simcity.GetCameraPosition([-164.27, 252.02, -793.45], 240.1, 158.4, 20),
    init : function () {
      scrui.PostGameCommand(scrui.BuildCommand(["setspeed",
            simcity.kSpeedTurtle]));
      simcity.ForceUpdateCategory(simcity.kCategoryIDPolice, !1)
    },
    onCompletion : function () {
      simcity.gGlobalUIHandler.mTutorialManager.CompleteTutorialStep()
    }
  };
  return b[a] || null
};
simcity.TutorialCalloutStates[scrui.IDFromName("MSTutorialClickGarbageSpeechBubble")] = function (a) {
  var b = [];
  b[simcity.kTutorialStateOpeningDialog] = {
    dialogLayoutPath : simcity.kDialogTextOnly,
    dialogString : {
      tableID : "Tutorials.json",
      stringID : "0x0ea0e201",
      placeholder : "Hey, whats that smell? Eva has an idea. Head to Town Hall."
    },
    headerString : {
      tableID : "Tutorials.json",
      stringID : "0x0ea0e251",
      placeholder : "GARBAGE"
    },
    stepNumberString : {
      tableID : "Tutorials.json",
      stringID : "0x0e3b9488",
      placeholder : "1/6"
    },
    hideAllButtons : !0,
    camera : simcity.GetCameraPosition([281.3, 66.46, -793.7], 539.2, 747.2, 33.8),
    init : function () {
      simcity.ShowTutorialSpeechBalloon(2750499773);
      simcity.SetAgentPickingType(scrui.IDFromName("GarbageTruck"));
      scrui.PostGameCommand(scrui.BuildCommand(["setspeed", simcity.kSpeedTurtle]));
      simcity.gGlobalUIHandler.mToolPaletteUIHandler.UpdateAlert(simcity.kCategoryIDGarbage, simcity.kAlertLevelCritical);
      simcity.ForceUpdateCategory(simcity.kCategoryIDGarbage, !1)
    }
  };
  return b[a] || null
};
simcity.TutorialCalloutStates[scrui.IDFromName("MSCivicTutorialModules")] = function (a) {
  var b = [];
  b[simcity.kTutorialStateOpeningDialog] = {
    dialogLayoutPath : simcity.kDialogTextOnly,
    dialogString : {
      tableID : "Tutorials.json",
      stringID : "0x0ea0f0bf",
      placeholder : "Here it comes! Neighboring cities can share system coverage for city services like Fire, Health, Crime and Garbage."
    },
    headerString : {
      tableID : "Tutorials.json",
      stringID : "0x0ea0e251",
      placeholder : "GARBAGE"
    },
    stepNumberString : {
      tableID : "Tutorials.json",
      stringID : "0x0e3b948e",
      placeholder : "2/6"
    },
    camera : simcity.GetCameraPosition([-743.24, 70.59, -789.83], 140.1, 330.4, 18),
    targetTransport : scrui.IDFromName("GarbageTruck"),
    hideAllButtons : !0,
    allowUnitPicking : !0,
    customCompletionCheck : function () {
      0 > simcity.gGlobalUIHandler.mTutorialManager.mCustomTimer && !simcity.gGlobalUIHandler.mSpeedUIHandler.IsPaused() && simcity.PauseGame()
    },
    init : function () {
      simcity.gGlobalUIHandler.mTutorialManager.mCustomTimer = 1E3;
      simcity.GetTutorialMissionInfo(scrui.IDFromName("MSCivicTutorialModules"));
      var a =
        scrui.IDFromName("GarbageTruck");
      simcity.GetExitEditorButton().SetEnabled(!1);
      simcity.EnableRollover();
      var b = function () {
        simcity.gEventManager.RemoveEventListener(simcity.gEventTypes.GENERICEVENT, a, b);
        simcity.gGlobalUIHandler.mTutorialManager.HideCalloutHelper();
        var e = simcity.GetTutorialMissionInfo(scrui.IDFromName("MSCivicTutorialModules"));
        simcity.gGlobalUIHandler.mTutorialManager.SetTutorialState(e, simcity.kTutorialStateObjective1);
        simcity.DisableRollover()
      };
      simcity.gEventManager.AddEventListener(simcity.gEventTypes.GENERICEVENT,
        a, b)
    },
    onCompletion : function () {
      var a = simcity.GetTutorialMissionInfo(scrui.IDFromName("MSCivicTutorialModules"));
      simcity.gGlobalUIHandler.mTutorialManager.SetTutorialState(a, simcity.kTutorialStateObjective1)
    }
  };
  b[simcity.kTutorialStateClosingDialog] = {
    dialogLayoutPath : simcity.kDialogOkayLiftUp,
    dialogString : {
      tableID : "Tutorials.json",
      stringID : "0x0ee83c48",
      placeholder : '"We dont need our own Garbage Dump thanks to Lucky Shores'
    },
    headerString : {
      tableID : "Tutorials.json",
      stringID : "0x0ea0e251",
      placeholder : "GARBAGE"
    },
    stepNumberString : {
      tableID : "Tutorials.json",
      stringID : "0x0e3b94a6",
      placeholder : "6/6"
    },
    hideAllButtons : !0,
    allowUnitPicking : !0,
    onCompletion : function () {
      simcity.SetAgentPickingType(0);
      simcity.gGlobalUIHandler.mTutorialManager.EnableCallout();
      simcity.gGlobalUIHandler.mTutorialManager.SetTutorialState(scrui.IDFromName("MSCivicTutorialModules"), simcity.kTutorialStateProgressToNextState)
    }
  };
  b[simcity.kTutorialStateProgressToNextState] = {
    hideAllButtons : !0,
    onCompletion : function () {
      var a = simcity.gGlobalUIHandler;
      null !== a.mToolPaletteUIHandler && null !== a.mToolPaletteUIHandler.mSelectedCategoryButton && a.mToolPaletteUIHandler.CloseToolPanel();
      a = simcity.gGlobalUIHandler.mMissionUI.MissionInfoFromID(scrui.IDFromName("MSCivicTutorialModules"));
      simcity.ManuallyDestroyMissionUnit(a);
      simcity.gGlobalUIHandler.mTutorialManager.ClearTutorialState();
      scrui.PostGameCommand(scrui.BuildCommand(["createUnit", scrui.IDFromName("MSTutorialClickSewageSpeechBubble")]))
    }
  };
  b[simcity.kTutorialStateObjective1] = {
    dialogLayoutPath : simcity.kDialogTextOnly,
    dialogString : {
      tableID : "Tutorials.json",
      stringID : "0x0ea102c8",
      placeholder : "Ew, its kinda sticky. Anyways, you can follow vehicles or Sims to see where they go."
    },
    headerString : {
      tableID : "Tutorials.json",
      stringID : "0x0e3884a8",
      placeholder : "MODULES"
    },
    stepNumberString : {
      tableID : "Tutorials.json",
      stringID : "0x0e3b9493",
      placeholder : "3/6"
    },
    hideAllButtons : !0,
    allowUnitPicking : !0,
    targetControl : function () {
      return simcity.GetAgentButton()
    },
    init : function () {
      var a = simcity.GetAgentButton().GetControlID();
      scrui.PostGameCommand(scrui.BuildCommand(["LockCamera"]));
      var b = function () {
        scrui.PostGameCommand(scrui.BuildCommand(["setspeed", simcity.kSpeedTurtle]));
        simcity.gEventManager.RemoveEventListener(simcity.gEventTypes.CLICK, a, b);
        simcity.gGlobalUIHandler.mTutorialManager.CompleteTutorialStep();
        scrui.PostGameCommand(scrui.BuildCommand(["UnlockCamera"]))
      };
      simcity.gEventManager.AddEventListener(simcity.gEventTypes.CLICK, a, b)
    }
  };
  b[simcity.kTutorialStateObjective2] = {
    dialogLayoutPath : simcity.kDialogTextOnly,
    dialogString : {
      tableID : "Tutorials.json",
      stringID : "0x0ea1036d",
      placeholder : "Were fortunate that Lucky Shores has provided us with one of their garbage trucks."
    },
    headerString : {
      tableID : "Tutorials.json",
      stringID : "0x0ea0e251",
      placeholder : "GARBAGE"
    },
    stepNumberString : {
      tableID : "Tutorials.json",
      stringID : "0x0e3b9498",
      placeholder : "4/6"
    },
    hideAllButtons : !0,
    allowUnitPicking : !0,
    showButtons : [simcity.gGlobalUIHandler.mToolPaletteUIHandler.GetButtonFromCategory(simcity.kCategoryIDGarbage)],
    targetControl : function () {
      return simcity.gGlobalUIHandler.mToolPaletteUIHandler.GetButtonFromCategory(simcity.kCategoryIDGarbage)
    },
    init : function () {
      var a = simcity.gGlobalUIHandler.mToolPaletteUIHandler.GetButtonFromCategory(simcity.kCategoryIDGarbage).GetControlID(),
      b = function () {
        simcity.gEventManager.RemoveEventListener(simcity.gEventTypes.CLICK, a, b);
        simcity.gGlobalUIHandler.mTutorialManager.CompleteTutorialStep()
      };
      simcity.gEventManager.AddEventListener(simcity.gEventTypes.CLICK, a, b)
    }
  };
  b[simcity.kTutorialStateObjective3] = {
    dialogLayoutPath : simcity.kDialogOkayLiftUp,
    dialogString : {
      tableID : "Tutorials.json",
      stringID : "0x0ea103f3",
      placeholder : "Here you can see that Lucky Shores provides our Garbage coverage."
    },
    headerString : {
      tableID : "Tutorials.json",
      stringID : "0x0ea0e251",
      placeholder : "GARBAGE"
    },
    stepNumberString : {
      tableID : "Tutorials.json",
      stringID : "0x0e3b949f",
      placeholder : "5/6"
    },
    hideAllButtons : !0,
    allowUnitPicking : !0,
    onCompletion : function () {
      simcity.gGlobalUIHandler.mTutorialManager.CompleteTutorialStep()
    }
  };
  return b[a] || null
};
simcity.TutorialCalloutStates[scrui.IDFromName("MSTutorialClickSewageSpeechBubble")] = function (a) {
  var b = [];
  b[simcity.kTutorialStateOpeningDialog] = {
    dialogLayoutPath : simcity.kDialogTextOnly,
    dialogString : {
      tableID : "Tutorials.json",
      stringID : "0x0ea5f1e1",
      placeholder : "There still seems to be a foul scent in the air. You should check in with Eva."
    },
    headerString : {
      tableID : "Tutorials.json",
      stringID : "0x0ec874ac",
      placeholder : "SEWAGE"
    },
    stepNumberString : {
      tableID : "Tutorials.json",
      stringID : "0x0e3b9488",
      placeholder : "1/6"
    },
    hideAllButtons : !0,
    camera : simcity.GetCameraPosition([281.3, 66.46, -793.7], 539.2, 747.2, 33.8),
    init : function () {
      simcity.ShowTutorialSpeechBalloon(2999946052);
      scrui.PostGameCommand(scrui.BuildCommand(["setspeed", simcity.kSpeedTurtle]));
      simcity.gGlobalUIHandler.mToolPaletteUIHandler.UpdateAlert(simcity.kCategoryIDSewage, simcity.kAlertLevelCritical);
      simcity.ForceUpdateCategory(simcity.kCategoryIDSewage, !1);
      simcity.gGlobalUIHandler.mToolPaletteUIHandler.UpdateAlert(simcity.kCategoryIDGarbage, simcity.kAlertLevelNormal)
    }
  };
  return b[a] || null
};
simcity.TutorialCalloutStates[scrui.IDFromName("MSTutorialSewage")] = function (a) {
  var b = [];
  b[simcity.kTutorialStateClosingDialog] = {
    hideAllButtons : !0,
    onCompletion : function () {
      simcity.gGlobalUIHandler.mTutorialManager.EnableCallout();
      simcity.gGlobalUIHandler.mTutorialManager.SetTutorialState(scrui.IDFromName("MSTutorialSewage"), simcity.kTutorialStateProgressToNextState)
    }
  };
  b[simcity.kTutorialStateProgressToNextState] = {
    hideAllButtons : !0,
    onCompletion : function () {
      var a = simcity.gGlobalUIHandler.mMissionUI.MissionInfoFromID(scrui.IDFromName("MSTutorialSewage"));
      simcity.ManuallyDestroyMissionUnit(a);
      simcity.gGlobalUIHandler.mTutorialManager.ClearTutorialState();
      scrui.PostGameCommand(scrui.BuildCommand(["createUnit", scrui.IDFromName("MSTutorialSewagePt2")]))
    }
  };
  b[simcity.kTutorialStateOpeningDialog] = {
    dialogLayoutPath : simcity.kDialogTextOnly,
    dialogString : {
      tableID : "Tutorials.json",
      stringID : "0x0ea623d1",
      placeholder : "Lets get a Sewage Outflow Pipe as soon as we can."
    },
    headerString : {
      tableID : "Tutorials.json",
      stringID : "0x0ec874ac",
      placeholder : "SEWAGE"
    },
    stepNumberString : {
      tableID : "Tutorials.json",
      stringID : "0x0e3b948e",
      placeholder : "2/6"
    },
    updateCategoryInfo : function (a) {
      simcity.UpdateContextualInfo(a, simcity.Sewage.kPaletteInfoPanelText, simcity.Sewage.kTextHeaderPoorSewageSystem, simcity.Sewage.kTextBodyPoorSewageSystem)
    },
    targetControl : function () {
      return simcity.gGlobalUIHandler.mToolPaletteUIHandler.GetButtonFromCategory(simcity.kCategoryIDSewage)
    },
    camera : simcity.GetCameraPosition([-478.1, -760.9, -713], 235, 1109.9, 25),
    hideAllButtons : !0,
    showButtons : [simcity.gGlobalUIHandler.mToolPaletteUIHandler.GetButtonFromCategory(simcity.kCategoryIDSewage)],
    init : function () {
      scrui.PostGameCommand(scrui.BuildCommand(["setspeed", simcity.kSpeedRabbit]));
      var a = simcity.gGlobalUIHandler.mToolPaletteUIHandler.GetButtonFromCategory(simcity.kCategoryIDSewage).GetControlID(),
      b = function () {
        simcity.gEventManager.RemoveEventListener(simcity.gEventTypes.CLICK, a, b);
        var e = simcity.GetTutorialMissionInfo(scrui.IDFromName("MSTutorialSewage"));
        simcity.gGlobalUIHandler.mTutorialManager.SetTutorialState(e, simcity.kTutorialStateObjective1);
        simcity.gGlobalUIHandler.mTutorialManager.HideCalloutHelper()
      };
      simcity.gEventManager.AddEventListener(simcity.gEventTypes.CLICK, a, b)
    }
  };
  b[simcity.kTutorialStateObjective1] = {
    dialogLayoutPath : simcity.kDialogTextOnlyLiftUp,
    dialogString : {
      tableID : "Tutorials.json",
      stringID : "0x0ea6234c",
      placeholder : "Ew! You can see all of the \u201cwaste\u201d just sloshing around in the pipes in this view."
    },
    headerString : {
      tableID : "Tutorials.json",
      stringID : "0x0ec874ac",
      placeholder : "SEWAGE"
    },
    stepNumberString : {
      tableID : "Tutorials.json",
      stringID : "0x0e3b9493",
      placeholder : "3/6"
    },
    hideAllButtons : !0,
    showButtons : [simcity.gGlobalUIHandler.mToolPaletteUIHandler.GetButtonFromToolID(simcity.kToolIDPlop_T_Sewage_T1_Base_01_01_N)],
    targetControl : function () {
      return simcity.gGlobalUIHandler.mToolPaletteUIHandler.GetButtonFromToolID(simcity.kToolIDPlop_T_Sewage_T1_Base_01_01_N)
    },
    init : function () {
      var a = simcity.gGlobalUIHandler.mToolPaletteUIHandler.GetButtonFromToolID(simcity.kToolIDPlop_T_Sewage_T1_Base_01_01_N).GetControlID(),
      b = function () {
        simcity.gEventManager.RemoveEventListener(simcity.gEventTypes.CLICK,
          a, b);
        simcity.gGlobalUIHandler.mTutorialManager.CompleteTutorialStep()
      };
      simcity.gEventManager.AddEventListener(simcity.gEventTypes.CLICK, a, b)
    }
  };
  b[simcity.kTutorialStateObjective2] = {
    dialogLayoutPath : simcity.kDialogTextOnlyLiftUp,
    dialogString : {
      tableID : "Tutorials.json",
      stringID : "0x0ea62525",
      placeholder : "This basically dumps sewage out into a steaming pile, so its best to put it in a remote corner of town."
    },
    headerString : {
      tableID : "Tutorials.json",
      stringID : "0x0ec874ac",
      placeholder : "SEWAGE"
    },
    stepNumberString : {
      tableID : "Tutorials.json",
      stringID : "0x0e3b9498",
      placeholder : "4/6"
    },
    hideAllButtons : !0,
    init : function () {
      simcity.gGlobalUIHandler.mTutorialManager.WaitForObjective()
    }
  };
  return b[a] || null
};
simcity.TutorialCalloutStates[scrui.IDFromName("MSTutorialSewagePt2")] = function (a) {
  var b = [];
  b[simcity.kTutorialStateClosingDialog] = {
    hideAllButtons : !0,
    onCompletion : function () {
      simcity.gGlobalUIHandler.mTutorialManager.EnableCallout();
      simcity.gGlobalUIHandler.mTutorialManager.SetTutorialState(scrui.IDFromName("MSTutorialSewagePt2"), simcity.kTutorialStateProgressToNextState)
    }
  };
  b[simcity.kTutorialStateProgressToNextState] = {
    hideAllButtons : !0,
    onCompletion : function () {
      var a = simcity.gGlobalUIHandler;
      null !==
      a.mToolPaletteUIHandler && null !== a.mToolPaletteUIHandler.mSelectedCategoryButton && a.mToolPaletteUIHandler.CloseToolPanel();
      a = simcity.gGlobalUIHandler.mMissionUI.MissionInfoFromID(scrui.IDFromName("MSTutorialSewagePt2"));
      simcity.ManuallyDestroyMissionUnit(a);
      simcity.gGlobalUIHandler.mTutorialManager.ClearTutorialState();
      scrui.PostGameCommand(scrui.BuildCommand(["createUnit", scrui.IDFromName("MSCivicClickSpeechBubble3")]))
    }
  };
  b[simcity.kTutorialStateObjective1] = {
    dialogLayoutPath : simcity.kDialogTextOnlyLiftUp,
    dialogString : {
      tableID : "Tutorials.json",
      stringID : "0x0ec743ab",
      placeholder : "Ugh. Look at it all go. Every system has data maps that graphically show you information about your city."
    },
    headerString : {
      tableID : "Tutorials.json",
      stringID : "0x0ec874ac",
      placeholder : "SEWAGE"
    },
    stepNumberString : {
      tableID : "Tutorials.json",
      stringID : "0x0e3b949f",
      placeholder : "5/6"
    },
    targetControl : function () {
      return simcity.gGlobalUIHandler.mToolPaletteUIHandler.GetLayerToggleButton(simcity.Sewage.kHeavyLayerGroundPollution, simcity.cLayerUIHandler.kBtnLayerToggleOnID)
    },
    hideAllButtons : !0,
    init : function () {
      var a = simcity.gGlobalUIHandler.mToolPaletteUIHandler.GetLayerToggleButton(simcity.Sewage.kHeavyLayerGroundPollution, simcity.cLayerUIHandler.kBtnLayerToggleOnID).GetControlID(),
      b = function () {
        simcity.gEventManager.RemoveEventListener(simcity.gEventTypes.CLICK, a, b);
        simcity.gGlobalUIHandler.mTutorialManager.CompleteTutorialStep()
      };
      simcity.gEventManager.AddEventListener(simcity.gEventTypes.CLICK, a, b)
    }
  };
  b[simcity.kTutorialStateObjective2] = {
    dialogLayoutPath : simcity.kDialogTextOnlyLiftMid,
    dialogString : {
      tableID : "Tutorials.json",
      stringID : "0x0ea627a2",
      placeholder : '"The Sewage Outflow Pipe is adding ground pollution here.'
    },
    headerString : {
      tableID : "Tutorials.json",
      stringID : "0x0ec874ac",
      placeholder : "SEWAGE"
    },
    stepNumberString : {
      tableID : "Tutorials.json",
      stringID : "0x0e3b94a6",
      placeholder : "6/6"
    },
    showCursorAttachment : !0,
    targetControl : function () {
      return gUIManager.FindControlByID(186684633)
    },
    hideAllButtons : !0,
    init : function () {
      simcity.gGlobalUIHandler.mToolPaletteUIHandler.UpdateAlert(simcity.kCategoryIDSewage,
        simcity.kAlertLevelNormal);
      var a = gUIManager.FindControlByID(186684633).GetControlID(),
      b = function () {
        simcity.gEventManager.RemoveEventListener(simcity.gEventTypes.CLICK, a, b);
        simcity.gGlobalUIHandler.mTutorialManager.HideCalloutHelper();
        simcity.gGlobalUIHandler.mTutorialManager.CompleteTutorialStep()
      };
      simcity.gEventManager.AddEventListener(simcity.gEventTypes.CLICK, a, b)
    }
  };
  return b[a] || null
};
simcity.TutorialCalloutStates[scrui.IDFromName("MSCivicClickSpeechBubble3")] = function (a) {
  var b = [];
  b[simcity.kTutorialStateOpeningDialog] = {
    dialogLayoutPath : simcity.kDialogTextOnly,
    dialogString : {
      tableID : "Tutorials.json",
      stringID : "0x0e16b5f2",
      placeholder : "Uh-oh! It looks like youre needed, Mayor!"
    },
    headerString : {
      tableID : "Tutorials.json",
      stringID : "0x0e46de31",
      placeholder : "FIRE"
    },
    stepNumberString : {
      tableID : "Tutorials.json",
      stringID : "0x0e3b9488",
      placeholder : "1/6"
    },
    camera : simcity.GetCameraPosition([-24.76,
        -91.13, -793.22], 581.1, 215.4, 18),
    hideAllButtons : !0,
    init : function () {
      simcity.ShowTutorialSpeechBalloon(1831196792);
      scrui.PostGameCommand(scrui.BuildCommand(["setspeed", simcity.kSpeedTurtle]));
      simcity.gGlobalUIHandler.mToolPaletteUIHandler.UpdateAlert(simcity.kCategoryIDFire, simcity.kAlertLevelCritical);
      simcity.ForceUpdateCategory(simcity.kCategoryIDFire, !1)
    }
  };
  return b[a] || null
};
simcity.TutorialCalloutStates[scrui.IDFromName("MSCivicTutorialCreateFireStation")] = function (a) {
  var b = [];
  b[simcity.kTutorialStateClosingDialog] = {
    hideAllButtons : !0,
    allowUnitPicking : !0,
    init : function () {
      simcity.gGlobalUIHandler.mLayerUIHandler.DeactivateLayer()
    },
    onCompletion : function () {
      var a = simcity.gGlobalUIHandler;
      null !== a.mToolPaletteUIHandler && null !== a.mToolPaletteUIHandler.mSelectedCategoryButton && a.mToolPaletteUIHandler.CloseToolPanel();
      scrui.PostGameCommand(scrui.BuildCommand(["deselectTool"]));
      simcity.gGlobalUIHandler.mTutorialManager.ClearTutorialState();
      scrui.PostGameCommand(scrui.BuildCommand(["createUnit", scrui.IDFromName("MSTutorialFireStationPt2")]))
    }
  };
  b[simcity.kTutorialStateObjective1] = {
    dialogLayoutPath : simcity.kDialogTextOnly,
    dialogString : {
      tableID : "Tutorials.json",
      stringID : "0x0e17b925",
      placeholder : "We need to put this fire out before it spreads. We need a Fire Station, quick!"
    },
    headerString : {
      tableID : "Tutorials.json",
      stringID : "0x0e46de31",
      placeholder : "FIRE"
    },
    stepNumberString : {
      tableID : "Tutorials.json",
      stringID : "0x0e3b948e",
      placeholder : "2/6"
    },
    targetControl : function () {
      return simcity.gGlobalUIHandler.mToolPaletteUIHandler.GetButtonFromCategory(simcity.kCategoryIDFire)
    },
    hideAllButtons : !0,
    showButtons : [simcity.gGlobalUIHandler.mToolPaletteUIHandler.GetButtonFromCategory(simcity.kCategoryIDFire)],
    init : function () {
      var a = simcity.gGlobalUIHandler.mToolPaletteUIHandler.GetButtonFromCategory(simcity.kCategoryIDFire).GetControlID(),
      b = function () {
        simcity.gEventManager.RemoveEventListener(simcity.gEventTypes.CLICK,
          a, b);
        simcity.gGlobalUIHandler.mTutorialManager.CompleteTutorialStep()
      };
      simcity.gEventManager.AddEventListener(simcity.gEventTypes.CLICK, a, b)
    }
  };
  b[simcity.kTutorialStateObjective2] = {
    dialogLayoutPath : simcity.kDialogTextOnlyLiftUp,
    dialogString : {
      tableID : "Tutorials.json",
      stringID : "0x0e17b926",
      placeholder : "Click to select the Fire Station."
    },
    headerString : {
      tableID : "Tutorials.json",
      stringID : "0x0e46de31",
      placeholder : "FIRE"
    },
    stepNumberString : {
      tableID : "Tutorials.json",
      stringID : "0x0e3b9493",
      placeholder : "3/6"
    },
    hideAllButtons : !0,
    camera : simcity.GetCameraPosition([-157, -218, -791.8], -150, 945, 45),
    showButtons : [simcity.gGlobalUIHandler.mToolPaletteUIHandler.GetButtonFromToolID(simcity.kToolIDPlop_T_Fire_T1_Base)],
    targetControl : function () {
      return simcity.gGlobalUIHandler.mToolPaletteUIHandler.GetButtonFromToolID(simcity.kToolIDPlop_T_Fire_T1_Base)
    },
    init : function () {
      var a = simcity.gGlobalUIHandler.mToolPaletteUIHandler.GetButtonFromToolID(simcity.kToolIDPlop_T_Fire_T1_Base).GetControlID(),
      b = function () {
        simcity.gEventManager.RemoveEventListener(simcity.gEventTypes.CLICK,
          a, b);
        simcity.gGlobalUIHandler.mTutorialManager.CompleteTutorialStep()
      };
      simcity.gEventManager.AddEventListener(simcity.gEventTypes.CLICK, a, b)
    }
  };
  b[simcity.kTutorialStateObjective3] = {
    dialogLayoutPath : simcity.kDialogTextOnlyLiftUp,
    dialogString : {
      tableID : "Tutorials.json",
      stringID : "0x0e17b927",
      placeholder : "The green along your roads shows areas your fire truck can reach before buildings burn down."
    },
    headerString : {
      tableID : "Tutorials.json",
      stringID : "0x0e46de31",
      placeholder : "FIRE"
    },
    stepNumberString : {
      tableID : "Tutorials.json",
      stringID : "0x0e3b9498",
      placeholder : "4/6"
    },
    hideAllButtons : !0
  };
  return b[a] || null
};
simcity.TutorialCalloutStates[scrui.IDFromName("MSTutorialFireStationPt2")] = function (a) {
  var b = [];
  b[simcity.kTutorialStateObjective1] = {
    dialogLayoutPath : simcity.kDialogOkay,
    dialogString : {
      tableID : "Tutorials.json",
      stringID : "0x0eb1c423",
      placeholder : "Thats a good spot! As soon as your Fire Station is staffed up, firefighters will hop in a fire truck and rush to put that fire out!"
    },
    headerString : {
      tableID : "Tutorials.json",
      stringID : "0x0e46de31",
      placeholder : "FIRE"
    },
    stepNumberString : {
      tableID : "Tutorials.json",
      stringID : "0x0e3b949f",
      placeholder : "5/6"
    },
    hideAllButtons : !0,
    allowUnitPicking : !0,
    camera : simcity.GetCameraPosition([43.24, -63.83, -793.44], 581.1, 215.4, 18),
    init : function () {
      scrui.PostGameCommand(scrui.BuildCommand(["setspeed", simcity.kSpeedRabbit]));
      var a = simcity.gGlobalUIHandler;
      null !== a.mToolPaletteUIHandler && null !== a.mToolPaletteUIHandler.mSelectedCategoryButton && a.mToolPaletteUIHandler.CloseToolPanel()
    },
    onCompletion : function () {
      simcity.gGlobalUIHandler.mLayerUIHandler.DeactivateLayer();
      simcity.gGlobalUIHandler.mTutorialManager.EnableCallout();
      simcity.gGlobalUIHandler.mTutorialManager.CompleteTutorialStep()
    }
  };
  b[simcity.kTutorialStateClosingDialog] = {
    dialogLayoutPath : simcity.kDialogOkay,
    dialogString : {
      tableID : "Tutorials.json",
      stringID : "0x0ee83c8b",
      placeholder : "Industrial, abandoned or rubbled buildings and accumulated garbage increase fire risk."
    },
    headerString : {
      tableID : "Tutorials.json",
      stringID : "0x0e46de31",
      placeholder : "FIRE"
    },
    stepNumberString : {
      tableID : "Tutorials.json",
      stringID : "0x0e3b94a6",
      placeholder : "6/6"
    },
    hideAllButtons : !0,
    init : function () {
      simcity.gGlobalUIHandler.mLayerUIHandler.DeactivateLayer()
    },
    onCompletion : function () {
      simcity.gGlobalUIHandler.mToolPaletteUIHandler.UpdateAlert(simcity.kCategoryIDFire, simcity.kAlertLevelNormal);
      var a = simcity.gGlobalUIHandler;
      null !== a.mToolPaletteUIHandler && null !== a.mToolPaletteUIHandler.mSelectedCategoryButton && a.mToolPaletteUIHandler.CloseToolPanel();
      scrui.PostGameCommand(scrui.BuildCommand(["deselectTool"]));
      simcity.gGlobalUIHandler.mTutorialManager.ClearTutorialState();
      a = simcity.gGlobalUIHandler.mMissionUI.MissionInfoFromID(scrui.IDFromName("MSTutorialFireStationPt2"));
      simcity.ManuallyDestroyMissionUnit(a);
      scrui.PostGameCommand(scrui.BuildCommand(["createUnit", scrui.IDFromName("MSTutorialClickSchoolSpeechBubble")]))
    }
  };
  return b[a] || null
};
simcity.TutorialCalloutStates[scrui.IDFromName("MSTutorialClickSchoolSpeechBubble")] = function (a) {
  var b = [];
  b[simcity.kTutorialStateObjective1] = {
    dialogLayoutPath : simcity.kDialogNext,
    dialogString : {
      tableID : "Tutorials.json",
      stringID : "0x0e8d26c1",
      placeholder : "Seems there are less protesters, but some of them are shouting about schools now."
    },
    headerString : {
      tableID : "Tutorials.json",
      stringID : "0x0e3884a8",
      placeholder : "0x0e3884a8"
    },
    stepNumberString : {
      tableID : "Tutorials.json",
      stringID : "0x0e69c1fd",
      placeholder : "1/7"
    },
    camera : simcity.GetCameraPosition([281.3, 66.46, -793.7], 539.2, 747.2, 33.8),
    hideAllButtons : !0,
    init : function () {
      simcity.ShowTutorialSpeechBalloon(2639090193);
      scrui.PostGameCommand(scrui.BuildCommand(["setspeed", simcity.kSpeedTurtle]));
      simcity.gGlobalUIHandler.mToolPaletteUIHandler.UpdateAlert(simcity.kCategoryIDEducation, simcity.kAlertLevelCritical);
      simcity.ForceUpdateCategory(simcity.kCategoryIDEducation, !1)
    }
  };
  return b[a] || null
};
simcity.TutorialCalloutStates[scrui.IDFromName("MSCivicTutorialCreateSchool")] = function (a) {
  var b = [];
  b[simcity.kTutorialStateOpeningDialog] = {
    dialogLayoutPath : simcity.kDialogTextOnly,
    dialogString : {
      tableID : "Tutorials.json",
      stringID : "0x0e8d26c2",
      placeholder : "The towns Grade School doesnt have enough classrooms."
    },
    headerString : {
      tableID : "Tutorials.json",
      stringID : "0x0e3884a8",
      placeholder : "MODULES"
    },
    stepNumberString : {
      tableID : "Tutorials.json",
      stringID : "0x0e69c1fe",
      placeholder : "2/7"
    },
    camera : simcity.GetCameraPosition([271.53,
        -93.96, -793.7], 140, 384.1, 25),
    targetToy : scrui.IDFromName("T_Edu_T1_GradeSchoolBase_01_01_N"),
    hideAllButtons : !0,
    allowUnitPicking : !0,
    init : function () {
      simcity.EnableRollover();
      simcity.gGlobalUIHandler.mIsEditorEnabled = !0;
      simcity.GetExitEditorButton().SetEnabled(!0);
      simcity.GetTutorialMissionInfo(scrui.IDFromName("MSCivicTutorialCreateSchool"));
      var a = scrui.IDFromName("T_Edu_T1_GradeSchoolBase_01_01_N"),
      b = function () {
        simcity.gEventManager.RemoveEventListener(simcity.gEventTypes.GENERICEVENT, a, b);
        simcity.gGlobalUIHandler.mTutorialManager.HideCalloutHelper();
        var e = simcity.GetTutorialMissionInfo(scrui.IDFromName("MSCivicTutorialCreateSchool"));
        simcity.gGlobalUIHandler.mTutorialManager.SetTutorialState(e, simcity.kTutorialStateObjective1);
        simcity.DisableRollover()
      };
      simcity.gEventManager.AddEventListener(simcity.gEventTypes.GENERICEVENT, a, b)
    }
  };
  b[simcity.kTutorialStateClosingDialog] = {
    dialogLayoutPath : simcity.kDialogTextOnlyLiftMid,
    dialogString : {
      tableID : "Tutorials.json",
      stringID : "0x0e8d26c6",
      placeholder : "Nice! Educated kids will be more responsible. They will commit fewer crimes, cause less fires and get injured less often."
    },
    headerString : {
      tableID : "Tutorials.json",
      stringID : "0x0e3884a8",
      placeholder : "MODULES"
    },
    stepNumberString : {
      tableID : "Tutorials.json",
      stringID : "0x0e69c202",
      placeholder : "6/7"
    },
    hideAllButtons : !0,
    targetControl : function () {
      return simcity.GetExitEditorButton()
    },
    init : function () {
      var a = simcity.GetExitEditorButton().GetControlID();
      simcity.GetExitEditorButton().SetEnabled(!0);
      var b = function () {
        simcity.gEventManager.RemoveEventListener(simcity.gEventTypes.CLICK, a, b);
        simcity.gGlobalUIHandler.mTutorialManager.HideCalloutHelper();
        simcity.gGlobalUIHandler.mTutorialManager.SetTutorialState(scrui.IDFromName("MSCivicTutorialCreateSchool"), simcity.kTutorialStateProgressToNextState);
        simcity.gGlobalUIHandler.mToolPaletteUIHandler.UpdateAlert(simcity.kCategoryIDEducation, simcity.kAlertLevelNormal)
      };
      simcity.gEventManager.AddEventListener(simcity.gEventTypes.CLICK, a, b)
    }
  };
  b[simcity.kTutorialStateProgressToNextState] = {
    dialogLayoutPath : simcity.kDialogOkay,
    dialogString : {
      tableID : "Tutorials.json",
      stringID : "0x0ee83cc6",
      placeholder : "Kids living in each house can go to grade schools for primary education."
    },
    headerString : {
      tableID : "Tutorials.json",
      stringID : "0x0e3884a8",
      placeholder : "MODULES"
    },
    stepNumberString : {
      tableID : "Tutorials.json",
      stringID : "0x0e69c203",
      placeholder : "7/7"
    },
    hideAllButtons : !0,
    onCompletion : function () {
      simcity.gGlobalUIHandler.mTutorialManager.ClearTutorialState();
      scrui.PostGameCommand(scrui.BuildCommand(["createUnit", scrui.IDFromName("MSCivicTutorialSims")]))
    }
  };
  b[simcity.kTutorialStateObjective1] = {
    dialogLayoutPath : simcity.kDialogTextOnlyLow,
    dialogString : {
      tableID : "Tutorials.json",
      stringID : "0x0e8d26c3",
      placeholder : "You can use modules to improve your buildings."
    },
    headerString : {
      tableID : "Tutorials.json",
      stringID : "0x0e3884a8",
      placeholder : "MODULES"
    },
    stepNumberString : {
      tableID : "Tutorials.json",
      stringID : "0x0e69c1ff",
      placeholder : "3/7"
    },
    hideAllButtons : !0,
    allowUnitPicking : !0,
    calloutArrow : simcity.cTutorialCalloutUI.kWinIDArrowNW,
    targetControl : function () {
      return simcity.GetEditBuildingButton()
    },
    init : function () {
      var a = simcity.GetEditBuildingButton().GetControlID(),
      b = function () {
        simcity.gEventManager.RemoveEventListener(simcity.gEventTypes.CLICK,
          a, b);
        simcity.gGlobalUIHandler.mTutorialManager.CompleteTutorialStep()
      };
      simcity.gEventManager.AddEventListener(simcity.gEventTypes.CLICK, a, b)
    }
  };
  b[simcity.kTutorialStateObjective2] = {
    dialogLayoutPath : simcity.kDialogTextOnlyLiftMid,
    dialogString : {
      tableID : "Tutorials.json",
      stringID : "0x0e8d26c4",
      placeholder : "This classroom will add some capacity to your school. Itll require more staff, but new jobs are great!"
    },
    headerString : {
      tableID : "Tutorials.json",
      stringID : "0x0e3884a8",
      placeholder : "MODULES"
    },
    stepNumberString : {
      tableID : "Tutorials.json",
      stringID : "0x0e69c200",
      placeholder : "4/7"
    },
    hideAllButtons : !0,
    showButtons : [simcity.gGlobalUIHandler.mToolPaletteUIHandler.GetButtonFromToolID(simcity.kToolIDPlop_T_Edu_T1_GradeSchoolClassroom_01_01_N)],
    targetControl : function () {
      return simcity.gGlobalUIHandler.mToolPaletteUIHandler.GetButtonFromToolID(simcity.kToolIDPlop_T_Edu_T1_GradeSchoolClassroom_01_01_N)
    },
    init : function () {
      var a = simcity.gGlobalUIHandler.mToolPaletteUIHandler.GetButtonFromToolID(simcity.kToolIDPlop_T_Edu_T1_GradeSchoolClassroom_01_01_N).GetControlID();
      simcity.GetExitEditorButton().SetEnabled(!1);
      var b = function () {
        simcity.gEventManager.RemoveEventListener(simcity.gEventTypes.CLICK, a, b);
        simcity.gGlobalUIHandler.mTutorialManager.CompleteTutorialStep()
      };
      simcity.gEventManager.AddEventListener(simcity.gEventTypes.CLICK, a, b)
    }
  };
  b[simcity.kTutorialStateObjective3] = {
    dialogLayoutPath : simcity.kDialogTextOnly,
    dialogString : {
      tableID : "Tutorials.json",
      stringID : "0x0e8d26c5",
      placeholder : "Now youll need to plop the classroom right next to the school."
    },
    headerString : {
      tableID : "Tutorials.json",
      stringID : "0x0e3884a8",
      placeholder : "MODULES"
    },
    stepNumberString : {
      tableID : "Tutorials.json",
      stringID : "0x0e69c201",
      placeholder : "5/7"
    },
    hideAllButtons : !0
  };
  return b[a] || null
};
simcity.TutorialCalloutStates[scrui.IDFromName("MSCivicTutorialSims")] = function (a) {
  var b = [];
  b[simcity.kTutorialStateClosingDialog] = {
    hideAllButtons : !0,
    onCompletion : function () {
      simcity.gGlobalUIHandler.mTutorialManager.SetTutorialState(scrui.IDFromName("MSCivicTutorialSims"), simcity.kTutorialStateProgressToNextState)
    }
  };
  b[simcity.kTutorialStateProgressToNextState] = {
    hideAllButtons : !0,
    onCompletion : function () {
      simcity.gGlobalUIHandler.mTutorialManager.ClearTutorialState();
      scrui.PostGameCommand(scrui.BuildCommand(["createUnit",
            scrui.IDFromName("MSTutorialGovernment")]));
      var a = simcity.gGlobalUIHandler.mMissionUI.MissionInfoFromID(scrui.IDFromName("MSCivicTutorialSims"));
      simcity.ManuallyDestroyMissionUnit(a)
    }
  };
  b[simcity.kTutorialStateObjective1] = {
    dialogLayoutPath : simcity.kDialogOkay,
    dialogString : {
      tableID : "Tutorials.json",
      stringID : "0x0e52cb78",
      placeholder : "All of your Sims have their own homes, go to work and try to make themselves happy."
    },
    headerString : {
      tableID : "Tutorials.json",
      stringID : "0x0e423f8b",
      placeholder : "SIMS"
    },
    stepNumberString : {
      tableID : "Tutorials.json",
      stringID : "0x0e3b8d40",
      placeholder : "1/1"
    },
    hideAllButtons : !0,
    allowUnitPicking : !0,
    camera : simcity.GetCameraPosition([36.62, 111.49, -793.39], 280.3, 191.3, 8.7),
    init : function () {
      scrui.PostGameCommand(scrui.BuildCommand(["setspeed", simcity.kSpeedTurtle]))
    },
    onCompletion : function () {
      simcity.gGlobalUIHandler.mTutorialManager.CompleteTutorialStep()
    }
  };
  return b[a] || null
};
simcity.TutorialCalloutStates[scrui.IDFromName("MSTutorialGovernment")] = function (a) {
  var b = [];
  b[simcity.kTutorialStateClosingDialog] = {
    dialogLayoutPath : simcity.kDialogTextOnly,
    dialogString : {
      tableID : "Tutorials.json",
      stringID : "0x0eb9ca39",
      placeholder : "On menus throughout SimCity youll find these information icons."
    },
    headerString : {
      tableID : "Tutorials.json",
      stringID : "0x0eec4e0b",
      placeholder : "SYSTEM INFORMATION"
    },
    stepNumberString : {
      tableID : "Tutorials.json",
      stringID : "0x0e3b94bb",
      placeholder : "1/2"
    },
    targetControl : function () {
      return simcity.GetBlueInfoButton()
    },
    hideAllButtons : !0,
    init : function () {
      var a = simcity.GetBlueInfoButton().GetControlID(),
      b = function () {
        simcity.gEventManager.RemoveEventListener(simcity.gEventTypes.MOUSEOVER, a, b);
        simcity.gEventManager.RemoveEventListener(simcity.gEventTypes.CLICK, a, null);
        simcity.gGlobalUIHandler.mTutorialManager.HideCalloutHelper();
        simcity.gGlobalUIHandler.mTutorialManager.SetTutorialState(scrui.IDFromName("MSTutorialGovernment"), simcity.kTutorialStateProgressToNextState)
      };
      simcity.gEventManager.AddEventListener(simcity.gEventTypes.MOUSEOVER,
        a, b)
    }
  };
  b[simcity.kTutorialStateProgressToNextState] = {
    dialogLayoutPath : simcity.kDialogOkayLiftUp,
    dialogString : {
      tableID : "Tutorials.json",
      stringID : "0x0eb9c103",
      placeholder : "These information bubbles provide help with the menu you find them in."
    },
    headerString : {
      tableID : "Tutorials.json",
      stringID : "0x0eec4e0b",
      placeholder : "SYSTEM INFORMATION"
    },
    stepNumberString : {
      tableID : "Tutorials.json",
      stringID : "0x0e3b94c0",
      placeholder : "2/2"
    },
    hideAllButtons : !0,
    lockUI : !0,
    onCompletion : function () {
      var a = simcity.gGlobalUIHandler;
      null !== a.mToolPaletteUIHandler && null !== a.mToolPaletteUIHandler.mSelectedCategoryButton && a.mToolPaletteUIHandler.CloseToolPanel();
      scrui.PostGameCommand(scrui.BuildCommand(["deselectTool"]));
      a = simcity.gGlobalUIHandler.mMissionUI.MissionInfoFromID(scrui.IDFromName("MSTutorialGovernment"));
      simcity.ManuallyDestroyMissionUnit(a);
      simcity.gGlobalUIHandler.mTutorialManager.ClearTutorialState();
      scrui.PostGameCommand(scrui.BuildCommand(["createUnit", scrui.IDFromName("MSTutorialClickGreatWorkSpeechBubble")]))
    }
  };
  b[simcity.kTutorialStateOpeningDialog] = {
    dialogLayoutPath : simcity.kDialogTextOnly,
    dialogString : {
      tableID : "Tutorials.json",
      stringID : "0x0eb9bbcf",
      placeholder : "Your improvements have really turned this town around. Lets have a look at just how happy everyone is."
    },
    headerString : {
      tableID : "Tutorials.json",
      stringID : "0x0ecc7e0f",
      placeholder : "HAPPINESS"
    },
    stepNumberString : {
      tableID : "Tutorials.json",
      stringID : "0x0e3b946c",
      placeholder : "1/4"
    },
    targetControl : function () {
      return simcity.gGlobalUIHandler.mToolPaletteUIHandler.GetButtonFromCategory(simcity.kCategoryIDCivic)
    },
    hideAllButtons : !0,
    showButtons : [simcity.gGlobalUIHandler.mToolPaletteUIHandler.GetButtonFromCategory(simcity.kCategoryIDCivic)],
    init : function () {
      var a = simcity.gGlobalUIHandler.mToolPaletteUIHandler.GetButtonFromCategory(simcity.kCategoryIDCivic).GetControlID(),
      b = function () {
        simcity.gEventManager.RemoveEventListener(simcity.gEventTypes.CLICK, a, b);
        simcity.gGlobalUIHandler.mTutorialManager.HideCalloutHelper();
        var e = simcity.GetTutorialMissionInfo(scrui.IDFromName("MSTutorialGovernment"));
        simcity.gGlobalUIHandler.mTutorialManager.SetTutorialState(e,
          simcity.kTutorialStateObjective1)
      };
      simcity.gEventManager.AddEventListener(simcity.gEventTypes.CLICK, a, b)
    }
  };
  b[simcity.kTutorialStateObjective1] = {
    dialogLayoutPath : simcity.kDialogTextOnlyLiftUp,
    dialogString : {
      tableID : "Tutorials.json",
      stringID : "0x0eb9bc37",
      placeholder : "Like all systems, Government has its own set of data maps."
    },
    headerString : {
      tableID : "Tutorials.json",
      stringID : "0x0ecc7e0f",
      placeholder : "HAPPINESS"
    },
    stepNumberString : {
      tableID : "Tutorials.json",
      stringID : "0x0e3b9472",
      placeholder : "2/4"
    },
    targetControl : function () {
      return simcity.gGlobalUIHandler.mToolPaletteUIHandler.GetLayerToggleButton(simcity.Government.kHeavyLayerHappiness,
        simcity.cLayerUIHandler.kBtnLayerToggleOnID)
    },
    hideAllButtons : !0,
    init : function () {
      var a = simcity.gGlobalUIHandler.mToolPaletteUIHandler.GetLayerToggleButton(simcity.Government.kHeavyLayerHappiness, simcity.cLayerUIHandler.kBtnLayerToggleOnID).GetControlID(),
      b = function () {
        simcity.gEventManager.RemoveEventListener(simcity.gEventTypes.CLICK, a, b);
        simcity.gGlobalUIHandler.mTutorialManager.CompleteTutorialStep()
      };
      simcity.gEventManager.AddEventListener(simcity.gEventTypes.CLICK, a, b)
    }
  };
  b[simcity.kTutorialStateObjective2] = {
    dialogLayoutPath : simcity.kDialogOkayLiftMid,
    dialogString : {
      tableID : "Tutorials.json",
      stringID : "0x0eb9bd2c",
      placeholder : "Wow! Not perfect, but certainly much better than before."
    },
    headerString : {
      tableID : "Tutorials.json",
      stringID : "0x0ecc7e0f",
      placeholder : "HAPPINESS"
    },
    stepNumberString : {
      tableID : "Tutorials.json",
      stringID : "0x0e3b9478",
      placeholder : "3/4"
    },
    hideAllButtons : !0,
    lockUI : !0,
    camera : simcity.GetCameraPosition([-24.24, 96.28, -794.88], 170, 2109.9, 20),
    onCompletion : function () {
      simcity.gGlobalUIHandler.mTutorialManager.CompleteTutorialStep()
    }
  };
  b[simcity.kTutorialStateObjective3] = {
    dialogLayoutPath : simcity.kDialogTextOnlyLiftMid,
    dialogString : {
      tableID : "Tutorials.json",
      stringID : "0x0ee2dc2d",
      placeholder : "Happy Sims will stay in your city to work and pay taxes."
    },
    headerString : {
      tableID : "Tutorials.json",
      stringID : "0x0ecc7e0f",
      placeholder : "HAPPINESS"
    },
    stepNumberString : {
      tableID : "Tutorials.json",
      stringID : "0x0e3b947d",
      placeholder : "4/4"
    },
    targetControl : function () {
      return gUIManager.FindControlByID(186684633)
    },
    hideAllButtons : !0,
    init : function () {
      var a = gUIManager.FindControlByID(186684633).GetControlID(),
      b = function () {
        simcity.gEventManager.RemoveEventListener(simcity.gEventTypes.CLICK, a, b);
        simcity.gGlobalUIHandler.mTutorialManager.CompleteTutorialStep()
      };
      simcity.gEventManager.AddEventListener(simcity.gEventTypes.CLICK, a, b)
    }
  };
  return b[a] || null
};
simcity.TutorialCalloutStates[scrui.IDFromName("MSTutorialClickGreatWorkSpeechBubble")] = function (a) {
  var b = [];
  b[simcity.kTutorialStateOpeningDialog] = {
    dialogLayoutPath : simcity.kDialogTextOnly,
    dialogString : {
      tableID : "Tutorials.json",
      stringID : "0x0eb873a1",
      placeholder : "Looks like most of the protesters have dispersed now. Evas got one last favor to ask."
    },
    headerString : {
      tableID : "Tutorials.json",
      stringID : "0x0eec115d",
      placeholder : "COMMUTING WORKERS"
    },
    stepNumberString : {
      tableID : "Tutorials.json",
      stringID : "0x0e3b8d4a",
      placeholder : "1/5"
    },
    hideAllButtons : !0,
    camera : simcity.GetCameraPosition([281.3, 66.46, -793.7], 539.2, 747.2, 33.8),
    init : function () {
      simcity.ShowTutorialSpeechBalloon(3547586552);
      scrui.PostGameCommand(scrui.BuildCommand(["setspeed", simcity.kSpeedTurtle]))
    }
  };
  return b[a] || null
};
simcity.TutorialCalloutStates[scrui.IDFromName("MSTutorialGreatWorks")] = function (a) {
  var b = [];
  b[simcity.kTutorialStateClosingDialog] = {
    hideAllButtons : !0,
    onCompletion : function () {
      var a = simcity.gGlobalUIHandler.mMissionUI.MissionInfoFromID(scrui.IDFromName("MSTutorialGreatWorks"));
      simcity.ManuallyDestroyMissionUnit(a);
      simcity.gGlobalUIHandler.mTutorialManager.SetTutorialState(scrui.IDFromName("MSTutorialGreatWorks"), simcity.kTutorialStateProgressToNextState)
    }
  };
  b[simcity.kTutorialStateProgressToNextState] = {
    hideAllButtons : !0,
    onCompletion : function () {
      simcity.gGlobalUIHandler.mMissionUI.blockMissions = !0;
      simcity.gGlobalUIHandler.mTutorialManager.ClearTutorialState();
      scrui.PostGameCommand(scrui.BuildCommand(["createUnit", scrui.IDFromName("MSCivicClickSpeechBubble6")]))
    }
  };
  b[simcity.kTutorialStateOpeningDialog] = {
    dialogLayoutPath : simcity.kDialogTextOnlyLiftUp,
    dialogString : {
      tableID : "Tutorials.json",
      stringID : "0x0eb5c0ae",
      placeholder : "First, lets have a look at how many workers we have commuting to Lucky Shores."
    },
    headerString : {
      tableID : "Tutorials.json",
      stringID : "0x0eec115d",
      placeholder : "COMMUTING WORKERS"
    },
    stepNumberString : {
      tableID : "Tutorials.json",
      stringID : "0x0e3b8d54",
      placeholder : "2/5"
    },
    hideAllButtons : !0,
    showButtons : [simcity.GetRegionViewButton()],
    targetControl : function () {
      return simcity.GetRegionViewButton()
    },
    init : function () {
      simcity.gGlobalUIHandler.mRegionViewUIHandler.allowViewCity = !0;
      var a = simcity.GetRegionViewButton().GetControlID(),
      b = function () {
        simcity.gEventManager.RemoveEventListener(simcity.gEventTypes.CLICK,
          a, b);
        simcity.gGlobalUIHandler.mTutorialManager.HideCalloutHelper();
        var e = simcity.GetTutorialMissionInfo(scrui.IDFromName("MSTutorialGreatWorks"));
        simcity.gGlobalUIHandler.mTutorialManager.SetTutorialState(e, simcity.kTutorialStateObjective1)
      };
      simcity.gEventManager.AddEventListener(simcity.gEventTypes.CLICK, a, b)
    }
  };
  b[simcity.kTutorialStateObjective1] = {
    dialogLayoutPath : simcity.kDialogTextOnlyLiftUp,
    dialogInRegion : !0,
    dialogString : {
      tableID : "Tutorials.json",
      stringID : "0x0ee18f20",
      placeholder : "The Workers menu can show you how many workers are commuting."
    },
    headerString : {
      tableID : "Tutorials.json",
      stringID : "0x0eec115d",
      placeholder : "COMMUTING WORKERS"
    },
    stepNumberString : {
      tableID : "Tutorials.json",
      stringID : "0x0e3b8d5d",
      placeholder : "3/5"
    },
    hideAllButtons : !0,
    showButtons : [simcity.gGlobalUIHandler.mRegionViewUIHandler.GetDataLayerButton(simcity.kRegionDataLayer_Workers)],
    targetControl : function () {
      return simcity.gGlobalUIHandler.mRegionViewUIHandler.GetDataLayerButton(simcity.kRegionDataLayer_Workers)
    },
    init : function () {
      scrui.PostGameCommand(scrui.BuildCommand(["camera",
            "immediate", !1, "move", "0, 0, 0", "rotate", 60]));
      var a = simcity.gGlobalUIHandler.mRegionViewUIHandler.GetDataLayerButton(simcity.kRegionDataLayer_Workers).GetControlID(),
      b = function () {
        simcity.gGlobalUIHandler.mTutorialManager.HideCalloutHelper();
        simcity.gEventManager.RemoveEventListener(simcity.gEventTypes.CLICK, a, b);
        simcity.gGlobalUIHandler.mTutorialManager.CompleteTutorialStep()
      };
      simcity.gEventManager.AddEventListener(simcity.gEventTypes.CLICK, a, b)
    }
  };
  b[simcity.kTutorialStateObjective2] = {
    dialogLayoutPath : simcity.kDialogTextOnlyLiftUp,
    dialogInRegion : !0,
    dialogString : {
      tableID : "Tutorials.json",
      stringID : "0x0eec1125",
      placeholder : "There are data maps in Region View, too."
    },
    headerString : {
      tableID : "Tutorials.json",
      stringID : "0x0eec115d",
      placeholder : "COMMUTING WORKERS"
    },
    stepNumberString : {
      tableID : "Tutorials.json",
      stringID : "0x0e3b8d63",
      placeholder : "4/5"
    },
    hideAllButtons : !0,
    showTradeArrows : !0,
    showCursorAttachment : !0,
    targetControl : function () {
      return simcity.GetRegionalDataLayerButtons(simcity.kRegionDataLayer_WorkerLevels[0])
    },
    init : function () {
      var a =
        simcity.GetRegionalDataLayerButtons(simcity.kRegionDataLayer_WorkerLevels[0]).GetControlID(),
      b = function () {
        simcity.gGlobalUIHandler.mTutorialManager.HideCalloutHelper();
        simcity.gEventManager.RemoveEventListener(simcity.gEventTypes.CLICK, a, b);
        simcity.gGlobalUIHandler.mTutorialManager.CompleteTutorialStep()
      };
      simcity.gEventManager.AddEventListener(simcity.gEventTypes.CLICK, a, b)
    }
  };
  b[simcity.kTutorialStateObjective3] = {
    allowUnitPicking : !0,
    dialogLayoutPath : simcity.kDialogOkay,
    lockUI : !0,
    dialogInRegion : !0,
    showTradeArrows : !0,
    showCursorAttachment : !0,
    dialogString : {
      tableID : "Tutorials.json",
      stringID : "0x0ec311e0",
      placeholder : "The large arrow shows the direction our commuting workers are traveling to Lucky Shores."
    },
    headerString : {
      tableID : "Tutorials.json",
      stringID : "0x0eec115d",
      placeholder : "COMMUTING WORKERS"
    },
    stepNumberString : {
      tableID : "Tutorials.json",
      stringID : "0x0e3b8d6a",
      placeholder : "5/5"
    },
    hideAllButtons : !0,
    onCompletion : function () {
      simcity.gGlobalUIHandler.mTutorialManager.CompleteTutorialStep()
    }
  };
  b[simcity.kTutorialStateObjective4] = {
    dialogLayoutPath : simcity.kDialogTextOnly,
    dialogInRegion : !0,
    dialogString : {
      tableID : "Tutorials.json",
      stringID : "0x0ec5e47d",
      placeholder : "Lets go check out Lucky Shores and see how mayor Chet Keno has laid out his city."
    },
    headerString : {
      tableID : "Tutorials.json",
      stringID : "0x0ecc8209",
      placeholder : "SPECTATING CITIES"
    },
    stepNumberString : {
      tableID : "Tutorials.json",
      stringID : "0x0e69c1fd",
      placeholder : "1/7"
    },
    hideAllButtons : !0,
    targetRegionBox : simcity.TutorialLuckyShoresBoxID,
    init : function () {
      simcity.gGlobalUIHandler.mRegionViewUIHandler.allowViewCity =
        !0;
      var a = function () {
        simcity.gEventManager.RemoveEventListener(simcity.gEventTypes.GENERICEVENT, simcity.TutorialLuckyShoresBoxID, a);
        simcity.gGlobalUIHandler.mTutorialManager.CompleteTutorialStep()
      };
      simcity.gEventManager.AddEventListener(simcity.gEventTypes.GENERICEVENT, simcity.TutorialLuckyShoresBoxID, a)
    }
  };
  b[simcity.kTutorialStateObjective5] = {
    dialogLayoutPath : simcity.kDialogTextOnly,
    dialogInRegion : !0,
    dialogString : {
      tableID : "Tutorials.json",
      stringID : "0x0ec5e4f9",
      placeholder : "You can visit any neighboring city to see how theyve built their city."
    },
    headerString : {
      tableID : "Tutorials.json",
      stringID : "0x0ecc8209",
      placeholder : "SPECTATING CITIES"
    },
    stepNumberString : {
      tableID : "Tutorials.json",
      stringID : "0x0e69c1fe",
      placeholder : "2/7"
    },
    hideAllButtons : !0,
    targetControl : function () {
      return simcity.GetRegionView_LoadCityButton()
    },
    init : function () {
      var a = simcity.GetRegionView_LoadCityButton().GetControlID(),
      b = function () {
        simcity.gEventManager.RemoveEventListener(simcity.gEventTypes.CLICK, a, b);
        simcity.gGlobalUIHandler.mTutorialManager.SetTutorialState(scrui.IDFromName("MSTutorialGreatWorks"),
          simcity.kTutorialStateClosingDialog)
      };
      simcity.gEventManager.AddEventListener(simcity.gEventTypes.CLICK, a, b)
    }
  };
  return b[a] || null
};
simcity.TutorialCalloutStates[scrui.IDFromName("MSTutorialReclaimCityPt2")] = function (a) {
  var b = [];
  b[simcity.kTutorialStateClosingDialog] = {
    hideAllButtons : !0,
    allowUnitPicking : !0,
    onCompletion : function () {
      var a = simcity.gGlobalUIHandler;
      null !== a.mToolPaletteUIHandler && null !== a.mToolPaletteUIHandler.mSelectedCategoryButton && a.mToolPaletteUIHandler.CloseToolPanel();
      simcity.gGlobalUIHandler.mTutorialManager.SetTutorialState(scrui.IDFromName("MSTutorialReclaimCityPt2"), simcity.kTutorialStateProgressToNextState)
    }
  };
  b[simcity.kTutorialStateProgressToNextState] = {
    hideAllButtons : !0,
    onCompletion : function () {
      simcity.gGlobalUIHandler.mTutorialManager.ClearTutorialState();
      var a = simcity.gGlobalUIHandler.mMissionUI.MissionInfoFromID(scrui.IDFromName("MSTutorialReclaimCityPt2"));
      simcity.ManuallyDestroyMissionUnit(a)
    }
  };
  b[simcity.kTutorialStateOpeningDialog] = {
    allowUnitPicking : !0,
    dialogLayoutPath : simcity.kDialogOkay,
    dialogString : {
      tableID : "Tutorials.json",
      stringID : "0x0ebb07f9",
      placeholder : "Nice city, huh? Lucky Shores is a tourist hotspot."
    },
    headerString : {
      tableID : "Tutorials.json",
      stringID : "0x0ecc8209",
      placeholder : "SPECTATING CITIES"
    },
    stepNumberString : {
      tableID : "Tutorials.json",
      stringID : "0x0e69c1ff",
      placeholder : "3/7"
    },
    hideAllButtons : !0,
    camera : simcity.GetCameraPosition([43.03, 172.39, -637.39], 539.2, 2840.476, 33.8),
    init : function () {
      scrui.PostGameCommand(scrui.BuildCommand(["tutorialActive", "true"]));
      simcity.gGlobalUIHandler.mIsEditorEnabled = !1;
      scrui.PostGameCommand(scrui.BuildCommand(["setspeed", simcity.kSpeedCheetah]));
      simcity.gGlobalUIHandler.mIsDemo &&
      this.mTutorialDemo && simcity.SetUpDemoScreen();
      var a = new scrui.cLocaleString("AutomatedRegionTemplates.json", "0x144f287b", "Lucky Shores Unlocalized");
      a.LoadString();
      simcity.RenameCity(a.mRawString);
      simcity.gGlobalUIHandler.mIsSpectatorMode = !0;
      simcity.gGlobalUIHandler.EnableSpectatorMode()
    },
    onCompletion : function () {
      var a = simcity.GetTutorialMissionInfo(scrui.IDFromName("MSTutorialReclaimCityPt2"));
      simcity.gGlobalUIHandler.mTutorialManager.SetTutorialState(a, simcity.kTutorialStateObjective1)
    }
  };
  b[simcity.kTutorialStateObjective1] = {
    allowUnitPicking : !0,
    dialogLayoutPath : simcity.kDialogOkay,
    dialogString : {
      tableID : "Tutorials.json",
      stringID : "0x0ee2dcc8",
      placeholder : "Mayor Keno has made Lucky Shores a gambling city."
    },
    headerString : {
      tableID : "Tutorials.json",
      stringID : "0x0ecc8209",
      placeholder : "SPECTATING CITIES"
    },
    stepNumberString : {
      tableID : "Tutorials.json",
      stringID : "0x0e69c200",
      placeholder : "4/7"
    },
    hideAllButtons : !0,
    camera : simcity.GetCameraPosition([59.03, -185.09, -638.23], 550.2, 740.476, 23.8),
    onCompletion : function () {
      simcity.gGlobalUIHandler.mTutorialManager.CompleteTutorialStep()
    }
  };
  b[simcity.kTutorialStateObjective2] = {
    allowUnitPicking : !0,
    dialogLayoutPath : simcity.kDialogOkay,
    dialogString : {
      tableID : "Tutorials.json",
      stringID : "0x0f0b9a22",
      placeholder : "Any mayor can elect to specialize to improve both their city and help the region."
    },
    headerString : {
      tableID : "Tutorials.json",
      stringID : "0x0ecc8209",
      placeholder : "SPECTATING CITIES"
    },
    stepNumberString : {
      tableID : "Tutorials.json",
      stringID : "0x0e69c201",
      placeholder : "5/7"
    },
    hideAllButtons : !0,
    camera : simcity.GetCameraPosition([567.12, -374.99, -759.82],
      330.2, 2040.476, 5.8),
    onCompletion : function () {
      simcity.gGlobalUIHandler.mTutorialManager.CompleteTutorialStep()
    }
  };
  b[simcity.kTutorialStateObjective3] = {
    allowUnitPicking : !0,
    dialogLayoutPath : simcity.kDialogTextOnly,
    dialogString : {
      tableID : "Tutorials.json",
      stringID : "0x0ebb09bc",
      placeholder : "Lets not gawk like a tourist. Wed better talk to Ch... Wait! Whats that in the sky?"
    },
    headerString : {
      tableID : "Tutorials.json",
      stringID : "0x0ecc8209",
      placeholder : "VISITING NEIGHBORS"
    },
    stepNumberString : {
      tableID : "Tutorials.json",
      stringID : "0x0e69c202",
      placeholder : "6/7"
    },
    hideAllButtons : !0,
    camera : simcity.GetCameraPosition([333.54, 416.66, -637.62], 380.2, 2040.476, 5.8),
    meteorstrike1 : !1,
    timer1 : 3E3,
    timer2 : 2500,
    timer3 : 2500,
    customCompletionCheck : function (a) {
      !simcity.IsDisasterInProgress() && this.meteorstrike1 ? simcity.gGlobalUIHandler.mTutorialManager.CompleteTutorialStep() : !simcity.IsDisasterInProgress() && !this.meteorstrike1 && 0 <= this.timer1 ? (this.timer1 -= a, 0 > this.timer1 && (a = [scrui.BuildRequestQuery(["getToyOfType", scrui.IDFromName("C_Gen_W3D3_Office_01_02_N_Tutorial")])],
          scrui.RequestGameData(a, function (a) {
            (a = a[0]) && scrui.PostGameCommand(scrui.BuildCommand(["createUnit", scrui.IDFromName("MeteorStrike"), "unitref", scrui.RequestStringFromUnitRef(a)]))
          }))) : !simcity.IsDisasterInProgress() && (!this.meteorstrike1 && 0 > this.timer1 && 0 <= this.timer3) && (this.timer3 -= a, 0 > this.timer3 && (this.meteorstrike1 = !0))
    },
    init : function () {
      scrui.PostGameCommand(scrui.BuildCommand(["createUnit", scrui.IDFromName("MeteorShower"), "[-27, 275, 389]"]));
      simcity.ShowTutorialSpeechBalloon(2555441351)
    }
  };
  b[simcity.kTutorialStateObjective4] = {
    allowUnitPicking : !0,
    dialogLayoutPath : simcity.kDialogTextOnlyLiftUp,
    dialogString : {
      tableID : "Tutorials.json",
      stringID : "0x0ebb0e12",
      placeholder : "Oh no! We better get out of here!"
    },
    headerString : {
      tableID : "Tutorials.json",
      stringID : "0x0ecc8209",
      placeholder : "SPECTATING CITIES"
    },
    stepNumberString : {
      tableID : "Tutorials.json",
      stringID : "0x0e69c203",
      placeholder : "7/7"
    },
    hideAllButtons : !0,
    showButtons : [simcity.GetRegionViewButton()],
    targetControl : function () {
      return simcity.GetRegionViewButton()
    },
    init : function () {
      var a = simcity.GetRegionViewButton().GetControlID(),
      b = function () {
        simcity.gEventManager.RemoveEventListener(simcity.gEventTypes.CLICK, a, b);
        simcity.gGlobalUIHandler.mTutorialManager.HideCalloutHelper();
        simcity.gGlobalUIHandler.mTutorialManager.CompleteTutorialStep()
      };
      simcity.gEventManager.AddEventListener(simcity.gEventTypes.CLICK, a, b)
    }
  };
  return b[a] || null
};
simcity.TutorialCalloutStates[scrui.IDFromName("MSCivicClickSpeechBubble6")] = function (a) {
  var b = [];
  b[simcity.kTutorialStateClosingDialog] = {
    hideAllButtons : !0,
    onCompletion : function () {
      simcity.gGlobalUIHandler.mTutorialManager.SetTutorialState(scrui.IDFromName("MSCivicClickSpeechBubble6"), simcity.kTutorialStateProgressToNextState)
    }
  };
  b[simcity.kTutorialStateProgressToNextState] = {
    hideAllButtons : !0,
    onCompletion : function () {
      simcity.gGlobalUIHandler.mTutorialManager.ClearTutorialState()
    }
  };
  b[simcity.kTutorialStateObjective1] = {
    dialogLayoutPath : simcity.kDialogTextOnly,
    dialogString : {
      tableID : "Tutorials.json",
      stringID : "0x0eb9b77f",
      placeholder : "Whew! That was close. You should talk to Eva. Click the speech bubble."
    },
    headerString : {
      tableID : "Tutorials.json",
      stringID : "0x0e4ac3b1",
      placeholder : "CONGRATULATIONS!"
    },
    stepNumberString : {
      tableID : "Tutorials.json",
      stringID : "0x0e3b94bb",
      placeholder : "1/2"
    },
    camera : simcity.GetCameraPosition([281.3, 66.46, -793.7], 539.2, 747.2, 33.8),
    hideAllButtons : !0,
    customCompletionCheck : function () {
      simcity.gGlobalUIHandler.mSpeechBalloonHandler.mSpeechBalloons &&
      0 == simcity.gGlobalUIHandler.mSpeechBalloonHandler.mSpeechBalloons.length && simcity.ShowTutorialSpeechBalloon(4165693587)
    },
    init : function () {
      simcity.gGlobalUIHandler.mIsDemo && this.mTutorialDemo && simcity.SetUpDemoScreen();
      scrui.PostGameCommand(scrui.BuildCommand(["setspeed", simcity.kSpeedTurtle]))
    }
  };
  return b[a] || null
};
simcity.TutorialCalloutStates[scrui.IDFromName("MSCivicTutorialEnd")] = function (a) {
  var b = [];
  b[simcity.kTutorialStateOpeningDialog] = {
    dialogLayoutPath : simcity.kDialogTutorialEnd,
    dialogString : {
      tableID : "Tutorials.json",
      stringID : "0x0e3ba01e",
      placeholder : "Well done! Youve completed the SimCity Getting Started scenario and made Summer Shoals a happy place to live."
    },
    headerString : {
      tableID : "Tutorials.json",
      stringID : "0x0e4ac3b1",
      placeholder : "CONGRATULATIONS!"
    },
    stepNumberString : {
      tableID : "Tutorials.json",
      stringID : "0x0e3b94c0",
      placeholder : "2/2"
    },
    hideAllButtons : !0,
    camera : simcity.GetCameraPosition([277.73, -42.36, -793.67], -20.2, 2466.2, 13.8),
    customCompletionCheck : function () {
      simcity.IsTutorialInProgress() && simcity.EndTutorial(!1)
    },
    onCompletion : function () {
      simcity.gGlobalUIHandler.mIsDemo && simcity.gGlobalUIHandler.mIsTimed && simcity.gGlobalUIHandler.mTutorialDemo ? simcity.gGlobalUIHandler.mTutorialManager.ClearTutorialState() : (simcity.gGlobalUIHandler.mTutorialManager.ClearTutorialState(), simcity.QuitGameToMainMenu())
    }
  };
  return b[a] ||
  null
};
simcity.TutorialCalloutStates[scrui.IDFromName("MSCongraduationsTutorial")] = function () {
  return {
    dialogLayoutPath : simcity.kDialogOkay,
    dialogString : {
      tableID : "Tutorials.json",
      stringID : "0x0c58e041",
      placeholder : "road congratulations"
    },
    onCompletion : function () {}

  }
};
simcity.SettingsUI = {};
simcity.cSettingsUIHandler = function () {
  this.UIHandler = scrui.cUIHandler;
  this.UIHandler();
  this.mTabItems = this.mSettingsQuery = this.mMainWindow = this.mConfirmWindow = this.mTabWindow = this.mSettingsUILayout = this.mParentControl = null;
  this.mItems = [];
  this.mCurrentTabIndex = -1;
  this.mDestroyOnHide = this.CloseAfterConfirm = this.mConfirmationMode = this.mLoadingOptions = !1;
  this.mActiveSlider = null;
  this.mControlIDs = {
    NETWORK_LOADING_ICON : 243717840
  }
};
goog.inherits(simcity.cSettingsUIHandler, scrui.cUIHandler);
simcity.cSettingsUIHandler.kBtnIDDone = 212607182;
simcity.cSettingsUIHandler.kWinIDTab = 241695581;
simcity.cSettingsUIHandler.kWinConfirm = 243955837;
simcity.cSettingsUIHandler.kWinMain = 243959537;
simcity.cSettingsUIHandler.kTextConfirm = 243955891;
simcity.cSettingsUIHandler.kBtnIDConfirmYes = 243955926;
simcity.cSettingsUIHandler.kBtnIDConfirmNo = 243955927;
simcity.cSettingsUIHandler.kBtnIDConfirmOkay = 252845427;
simcity.cSettingsUIHandler.kBtnIDOk = 244839050;
simcity.cSettingsUIHandler.kBtnIDCancel = 244839051;
simcity.cSettingsUIHandler.kBtnIDApply = 244839052;
simcity.cSettingsUIHandler.kOptionIDLightingMode = 73494694;
simcity.cSettingsUIHandler.kOptionIDGameCamera = 1885267805;
simcity.cSettingsUIHandler.kOptionIDDisasterClock = 228221024;
simcity.cSettingsUIHandler.kOptionIDTextures = 73494687;
simcity.cSettingsUIHandler.kOptionsIDShowTutorials = 3860869610;
simcity.cSettingsUIHandler.kOptionSettingDragMode = 0;
simcity.cSettingsUIHandler.kOptionSettingSlideMode = 1;
simcity.cSettingsUIHandler.kBtnIDTabs = [242569741, 242570353, 242570408];
simcity.cSettingsUIHandler.kDropdownStyle = 0;
simcity.cSettingsUIHandler.kSliderStyle = 1;
simcity.cSettingsUIHandler.kCheckboxStyle = 2;
simcity.cSettingsUIHandler.kCheckBoxWithButtonStyle = 3;
simcity.cSettingsUIHandler.kConfigManager = 0;
simcity.cSettingsUIHandler.kDirectProperty = 1;
simcity.cSettingsUIHandler.kServerSideProperty = 2;
simcity.cSettingsUIHandler.kDropDownItemsBeforeScroll = 10;
simcity.cSettingsUIHandler.kOptionStyleLayouts = ["Layouts/GlobalUI/SettingsDropdown.js", "Layouts/GlobalUI/SettingsSlider.js", "Layouts/GlobalUI/SettingsCheckbox.js", "Layouts/GlobalUI/SettingsCheckboxWithButton.js"];
simcity.cSettingsUIHandler.kServerSideSettingsCache = {};
simcity.cSettingsUIHandler.kDropdownIDOptions = 241695798;
simcity.cSettingsUIHandler.kLabelIDOptions = 241695679;
simcity.cSettingsUIHandler.kWindowIDDropdownOptions = 241696283;
simcity.cSettingsUIHandler.kSliderBar = 242839779;
simcity.cSettingsUIHandler.kSliderKnob = 242839808;
simcity.cSettingsUIHandler.kCheckboxIDOptions = 242995460;
simcity.cSettingsUIHandler.kButtonIDOptions = 252780574;
simcity.cSettingsUIHandler.kButtonTextIDOptions = 252782962;
simcity.cSettingsUIHandler.kMessageOptionUpdated = 253720291;
simcity.cSettingsUIHandler.prototype.Init = function (a, b) {
  scrui.Assert(null !== a);
  this.mParentControl = a;
  this.mSettingsUILayout = gUIManager.LoadAndCacheLayout("Layouts/SettingsPanel.js", this.mParentControl);
  this.mTabWindow = this.mSettingsUILayout.FindControlByID(simcity.cSettingsUIHandler.kWinIDTab);
  this.mNetworkAccessIcon = this.mSettingsUILayout.FindControlByID(this.mControlIDs.NETWORK_LOADING_ICON);
  this.mConfirmWindow = this.mSettingsUILayout.FindControlByID(simcity.cSettingsUIHandler.kWinConfirm);
  this.mMainWindow =
    this.mSettingsUILayout.FindControlByID(simcity.cSettingsUIHandler.kWinMain);
  this.mDestroyOnHide = !0 === b;
  this.mSettingsQuery = []
};
simcity.cSettingsUIHandler.prototype.DataBindingsFromTabIndex = function (a) {
  switch (a) {
  case 1:
    return simcity.OptionItems.kAudioTab;
  case 2:
    return simcity.OptionItems.kGameplayTab
  }
  return simcity.OptionItems.kGraphicsTab
};
simcity.cSettingsUIHandler.prototype.ShowTab = function (a) {
  scrui.Assert(null !== this.mTabWindow);
  if (this.mTabWindow) {
    a !== this.mCurrentTabIndex && this.CacheControlSettings(!0);
    this.mCurrentTabIndex = a;
    this.mTabWindow.DestroyChildren();
    for (var b = 0, c = this.mItems.length, d = 0; d < c; ++d) {
      var e = this.mItems[d];
      if (e.tabIndex == a) {
        var f = e.itemData,
        g = gUIManager.LoadAndCacheLayout(simcity.cSettingsUIHandler.kOptionStyleLayouts[f.style], this.mTabWindow);
        scrui.Assert(null !== g);
        if (g) {
          e.itemLayout = g;
          g.settingsItem = e;
          g.SetPosition(g.mLeft,
            b, g.mWidth, g.mHeight);
          b += g.mHeight;
          if (f.hasOwnProperty("labelString")) {
            var h = g.FindControlByID(simcity.cSettingsUIHandler.kLabelIDOptions);
            if (h) {
              var i = new scrui.cLocaleString("Settings.json", f.labelString, "");
              h.SetLocaleText(i);
              f.hasOwnProperty("tooltipString") && (i = new scrui.cLocaleString("Settings.json", f.tooltipString, ""), h.SetTooltipLocaleText(i), h.SetIgnoreMouse(!1))
            }
          }
          h = null;
          switch (f.style) {
          case simcity.cSettingsUIHandler.kDropdownStyle:
            g = g.FindControlByID(simcity.cSettingsUIHandler.kDropdownIDOptions);
            g.SetItemsBeforeScroll(simcity.cSettingsUIHandler.kDropDownItemsBeforeScroll);
            if (f.hasOwnProperty("optionStrings")) {
              i = [];
              for (h = 0; h < f.optionStrings.length; ++h) {
                var j = scrui.TextFromLocaleProperty({
                    tableID : "Settings.json",
                    stringID : f.optionStrings[h]
                  });
                i.push(j)
              }
              g.SetItemData(i)
            } else
              f.hasOwnProperty("populateDropdown") && f.populateDropdown(g);
            i = 0;
            f.hasOwnProperty("firstIndex") && (i = f.firstIndex);
            g.SetSelectedIndex(e.value - i);
            h = g;
            break;
          case simcity.cSettingsUIHandler.kSliderStyle:
            i = g.FindControlByID(simcity.cSettingsUIHandler.kSliderKnob);
            g = g.FindControlByID(simcity.cSettingsUIHandler.kSliderBar);
            i.SetPosition(g.mLeft + (e.value - f.sliderMin) / (f.sliderMax - f.sliderMin) * (g.mWidth - i.mWidth), i.mTop, i.mWidth, i.mHeight);
            h = i;
            break;
          case simcity.cSettingsUIHandler.kCheckboxStyle:
            i = g.FindControlByID(simcity.cSettingsUIHandler.kCheckboxIDOptions);
            i.SetSelected(0 !== e.value);
            h = i;
            break;
          case simcity.cSettingsUIHandler.kCheckBoxWithButtonStyle:
            if (i = g.FindControlByID(simcity.cSettingsUIHandler.kCheckboxIDOptions), i.SetSelected(0 !== e.value), h = i, (e = g.FindControlByID(simcity.cSettingsUIHandler.kButtonTextIDOptions)) &&
              f.hasOwnProperty("buttonString"))
              g = new scrui.cLocaleString("Settings.json", f.buttonString, ""), e.SetLocaleText(g), f.hasOwnProperty("buttonToolTipString") && (i = new scrui.cLocaleString("Settings.json", f.buttonToolTipString, ""), e.SetTooltipLocaleText(i))
          }
          h && (simcity.gGlobalUIHandler && simcity.IsTutorialInProgress() && f && f.hasOwnProperty("availableInTutorial")) && !f.availableInTutorial && (h.SetEnabled(!1), h.SetTooltipLocaleText(new scrui.cLocaleString("Tutorials.json", "0x0ef684a5", "Not Available In Tutorial")))
        }
      }
    }
  }
};
simcity.cSettingsUIHandler.prototype.UpdateEnabledOptions = function () {
  for (var a = this.mItems.length, b = 0; b < a; b++) {
    var c = this.mItems[b];
    if (c.itemData.hasOwnProperty("checkEnable")) {
      var d = c.itemData.checkEnable(this);
      c.itemLayout && (c = c.itemLayout.FindControlByID(simcity.cSettingsUIHandler.kDropdownIDOptions)) && c.SetEnabled(d)
    }
  }
};
simcity.cSettingsUIHandler.prototype.HandleUIMessage = function (a, b, c) {
  scrui.cUIHandler.prototype.HandleUIMessage.call(this, a, b, c);
  switch (a) {
  case scrui.kMsgTypeButtonClicked:
    switch (b) {
    case simcity.cSettingsUIHandler.kBtnIDDone:
    case simcity.cSettingsUIHandler.kBtnIDOk:
      this.CacheControlSettings(!1);
      this.RequiresConfirmation() ? this.StartConfirmationSequence(!0) : (this.ApplySettings(), this.Hide());
      break;
    case simcity.cSettingsUIHandler.kBtnIDApply:
      this.CacheControlSettings(!1);
      this.RequiresConfirmation() ?
      this.StartConfirmationSequence(!1) : this.ApplySettings();
      break;
    case simcity.cSettingsUIHandler.kBtnIDCancel:
      this.RestoreOriginalSettings();
      this.Hide();
      break;
    case simcity.cSettingsUIHandler.kCheckboxIDOptions:
      a = c.GetParentLayout().settingsItem;
      a.itemData.liveUpdate && (this.ReadControl(a), this.ApplyItemSetting(a));
      break;
    case simcity.cSettingsUIHandler.kButtonIDOptions:
      a = c.GetParentLayout().settingsItem;
      a.itemData.buttonCallback && a.itemData.buttonCallback();
      break;
    case simcity.cSettingsUIHandler.kBtnIDConfirmYes:
      this.EndConfirmationSequence();
      break;
    case simcity.cSettingsUIHandler.kBtnIDConfirmNo:
      this.AbortConfirmationSequence();
      break;
    case simcity.cSettingsUIHandler.kBtnIDConfirmOkay:
      this.mConfirmWindow.SetVisibility(!1),
      this.mMainWindow.SetVisibility(!0),
      this.mConfirmWindow.FindControlByID(simcity.cSettingsUIHandler.kBtnIDConfirmYes).SetVisibility(!0),
      this.mConfirmWindow.FindControlByID(simcity.cSettingsUIHandler.kBtnIDConfirmNo).SetVisibility(!0),
      this.mConfirmWindow.FindControlByID(simcity.cSettingsUIHandler.kBtnIDConfirmOkay).SetVisibility(!1)
    }
    for (a =
        0; a < simcity.cSettingsUIHandler.kBtnIDTabs.length; ++a)
      b == simcity.cSettingsUIHandler.kBtnIDTabs[a] && this.ShowTab(a);
    break;
  case scrui.kMsgTypeItemSelected:
    if (b != simcity.cSettingsUIHandler.kDropdownIDOptions || this.mLoadingOptions)
      break;
    a = c.GetParentLayout().settingsItem;
    this.ReadControl(a);
    a.itemData.liveUpdate && this.ApplyItemSetting(a);
    this.UpdateEnabledOptions();
    break;
  case scrui.kMsgTypeButtonDown:
    b == simcity.cSettingsUIHandler.kSliderKnob && (this.mActiveSlider = c);
    break;
  case scrui.kMsgTypeButtonUp:
    b ==
    simcity.cSettingsUIHandler.kSliderKnob && (this.mActiveSlider = null)
  }
};
simcity.cSettingsUIHandler.prototype.HandleGameEvent = function (a) {
  switch (a) {
  case simcity.kMessageToggleFullscreen:
    var b = this,
    a = [scrui.BuildRequestQuery(["options", 73494690])];
    scrui.RequestGameData(a, function (a) {
      for (var a = a[0], d = 0; d < b.mItems.length; ++d) {
        var e = b.mItems[d];
        if (73494690 == e.itemData.optionID) {
          e.value = a;
          e.itemLayout.FindControlByID(simcity.cSettingsUIHandler.kCheckboxIDOptions).SetSelected(e.value);
          break
        }
      }
    })
  }
};
simcity.cSettingsUIHandler.prototype.Show = function () {
  this.mSettingsUILayout.SetVisibility(!0);
  this.LoadCurrentSettings();
  this.mSettingsUILayout.FindControlByID(simcity.cSettingsUIHandler.kBtnIDTabs[0]).SetSelected(!0);
  this.ShowTab(0);
  this.UpdateEnabledOptions()
};
simcity.cSettingsUIHandler.prototype.Hide = function () {
  this.mDestroyOnHide ? (this.mSettingsUILayout.DestroyControl(), gUIManager.UnregisterUIHandler(this), delete simcity.gGlobalUIHandler.mSettingsUIHandler) : (this.mTabWindow && this.mTabWindow.DestroyChildren(), this.mSettingsUILayout.SetVisibility(!1))
};
simcity.cSettingsUIHandler.prototype.IsShowing = function () {
  return this.mSettingsUILayout.IsControlVisible()
};
simcity.cSettingsUIHandler.prototype.GetOptionValue = function (a) {
  for (var b = this.mItems.length, c = 0; c < b; c++) {
    var d = this.mItems[c];
    if (d.itemData.optionID === a)
      return d.value
  }
  return null
};
simcity.cSettingsUIHandler.prototype.LoadCurrentSettings = function () {
  var a = this;
  this.mItems = [];
  for (var b = 0, c = simcity.cSettingsUIHandler.kBtnIDTabs.length, d = 0; d < c; ++d) {
    var e = this.DataBindingsFromTabIndex(d),
    f;
    for (f in e) {
      var g = {
        itemData : e[f],
        itemLayout : null,
        itemIndex : b,
        value : null,
        tabIndex : d
      };
      this.mItems[b] = g;
      b++;
      g.itemData.hasOwnProperty("liveUpdate") || (g.itemData.liveUpdate = !1)
    }
  }
  for (var h = [], i = [], g = 0; g < this.mItems.length; ++g)
    switch (this.mItems[g].itemData.mechanism) {
    case simcity.cSettingsUIHandler.kConfigManager:
    case simcity.cSettingsUIHandler.kDirectProperty:
      h.push(this.mItems[g]);
      break;
    case simcity.cSettingsUIHandler.kServerSideProperty:
      i.push(this.mItems[g])
    }
  b = [];
  for (g = 0; g < h.length; ++g)
    switch (h[g].itemData.mechanism) {
    case simcity.cSettingsUIHandler.kConfigManager:
      b.push(scrui.BuildRequestQuery(["options", h[g].itemData.optionID]));
      break;
    case simcity.cSettingsUIHandler.kDirectProperty:
      b.push(scrui.BuildRequestQuery(["appproperties", h[g].itemData.optionID]))
    }
  scrui.RequestGameData(b, function (b) {
    a.mLoadingOptions = !0;
    scrui.Assert(b.length == h.length);
    for (var c = 0; c < b.length; ++c) {
      var d =
        h[c];
      d.value = "boolean" === typeof b[c] ? b[c] ? 1 : 0 : b[c];
      d.originalValue = d.value
    }
  });
  if (0 === i.length)
    a.mLoadingOptions = !1;
  else {
    b = function (b) {
      for (var c = 0; c < i.length; c++) {
        var d = i[c],
        e;
        e = b ? b[d.itemData.optionName] : d.itemData.defaultValue ? d.itemData.defaultValue : null;
        void 0 === e && (e = d.itemData.defaultValue ? d.itemData.defaultValue : null);
        d.value = "boolean" === typeof e ? e ? 1 : 0 : e;
        d.originalValue = d.value;
        simcity.cSettingsUIHandler.kServerSideSettingsCache[d.itemData.optionName] = e
      }
      a.mNetworkAccessIcon.SetVisibility(!1);
      a.mLoadingOptions = !1
    };
    c = function () {
      a.mNetworkAccessIcon.SetVisibility(!1);
      a.mLoadingOptions = !1
    };
    for (d = 0; d < i.length; d++)
      if (g = i[d], void 0 !== simcity.cSettingsUIHandler.kServerSideSettingsCache[g.itemData.optionName])
        e = simcity.cSettingsUIHandler.kServerSideSettingsCache[g.itemData.optionName], g.value = "boolean" === typeof e ? e ? 1 : 0 : e, g.originalValue = g.value, a.mLoadingOptions = !1;
      else {
        a.mNetworkAccessIcon.SetVisibility(!0);
        a.LoadSettingFromServer(b, c);
        break
      }
  }
};
simcity.cSettingsUIHandler.prototype.ReadControl = function (a) {
  switch (a.itemData.style) {
  case simcity.cSettingsUIHandler.kDropdownStyle:
    var b = 0;
    a.itemData.hasOwnProperty("firstIndex") && (b = a.itemData.firstIndex);
    var c = a.itemLayout.FindControlByID(simcity.cSettingsUIHandler.kDropdownIDOptions);
    c && (b = c.GetSelectedIndex() + b, a.value = b);
    break;
  case simcity.cSettingsUIHandler.kSliderStyle:
    b = a.itemLayout.FindControlByID(simcity.cSettingsUIHandler.kSliderKnob);
    c = a.itemLayout.FindControlByID(simcity.cSettingsUIHandler.kSliderBar);
    a.value = a.itemData.sliderMin + (a.itemData.sliderMax - a.itemData.sliderMin) * ((b.mLeft - c.mLeft) / (c.mWidth - b.mWidth));
    a.itemData.sliderRoundToInt && (a.value = Math.round(a.value));
    break;
  case simcity.cSettingsUIHandler.kCheckboxStyle:
  case simcity.cSettingsUIHandler.kCheckBoxWithButtonStyle:
    b = a.itemLayout.FindControlByID(simcity.cSettingsUIHandler.kCheckboxIDOptions),
    a.value = b.mIsSelected ? 1 : 0
  }
};
simcity.cSettingsUIHandler.prototype.CacheControlSettings = function (a) {
  for (var b = 0; b < this.mItems.length; ++b) {
    var c = this.mItems[b];
    c.tabIndex == this.mCurrentTabIndex && c.itemLayout && (this.ReadControl(c), a && (c.itemLayout = null))
  }
};
simcity.cSettingsUIHandler.prototype.ApplyItemSetting = function (a) {
  if (null !== a.value && null !== a.itemData.mechanism) {
    switch (a.itemData.mechanism) {
    case simcity.cSettingsUIHandler.kConfigManager:
      scrui.PostGameCommand(scrui.BuildCommand(["setOption", a.itemData.optionID, a.value]));
      break;
    case simcity.cSettingsUIHandler.kDirectProperty:
      scrui.PostGameCommand(scrui.BuildCommand(["SetAppProperty", a.itemData.optionID, a.value]));
      break;
    case simcity.cSettingsUIHandler.kServerSideProperty:
      this.SaveNetworkSettings(a.itemData.optionName,
        a.itemData.settingType && "boolean" === a.itemData.settingType ? 1 === a.value : a.value)
    }
    a.itemData.broadcast && scrui.gUIManager.SendMessage(simcity.cSettingsUIHandler.kMessageOptionUpdated, a, this)
  }
};
simcity.cSettingsUIHandler.prototype.ApplySettings = function () {
  for (var a = 0; a < this.mItems.length; ++a) {
    var b = this.mItems[a];
    this.ApplyItemSetting(b);
    b.originalValue = b.value
  }
};
simcity.cSettingsUIHandler.prototype.RestoreOriginalSettings = function () {
  for (var a = 0; a < this.mItems.length; ++a) {
    var b = this.mItems[a];
    b.value !== b.originalValue && (b.value = b.originalValue, this.ApplyItemSetting(b))
  }
  this.ShowTab(this.mCurrentTabIndex)
};
simcity.cSettingsUIHandler.prototype.RequiresConfirmation = function () {
  for (var a = 0; a < this.mItems.length; ++a) {
    var b = this.mItems[a];
    if (b.itemData.hasOwnProperty("requiresConfirmation") && b.itemData.requiresConfirmation && b.originalValue !== b.value)
      return !0
  }
  return !1
};
simcity.cSettingsUIHandler.prototype.InConfirmationSequence = function () {
  return this.mConfirmationMode
};
simcity.cSettingsUIHandler.prototype.StartConfirmationSequence = function (a) {
  for (var b = 0; b < this.mItems.length; ++b) {
    var c = this.mItems[b];
    c.itemData.hasOwnProperty("requiresConfirmation") && c.itemData.requiresConfirmation && c.originalValue !== c.value && c.itemData.hasOwnProperty("testConfirm") && c.itemData.testConfirm(c)
  }
  this.mConfirmationMode = !0;
  this.mCloseAfterConfirm = a;
  this.mMainWindow.SetVisibility(!1);
  this.mConfirmWindow.SetVisibility(!0);
  this.mConfirmTimer = 1E4;
  this.UpdateConfirmTimerText()
};
simcity.cSettingsUIHandler.prototype.AbortConfirmationSequence = function () {
  for (var a = 0; a < this.mItems.length; ++a) {
    var b = this.mItems[a];
    b.itemData.hasOwnProperty("requiresConfirmation") && b.itemData.requiresConfirmation && b.originalValue !== b.value && b.itemData.hasOwnProperty("undoConfirm") && b.itemData.undoConfirm(b)
  }
  this.mConfirmationMode = !1;
  this.mConfirmWindow.SetVisibility(!1);
  this.mMainWindow.SetVisibility(!0);
  this.ShowTab(this.mCurrentTabIndex)
};
simcity.cSettingsUIHandler.prototype.EndConfirmationSequence = function () {
  this.mConfirmationMode = !1;
  this.mConfirmWindow.SetVisibility(!1);
  this.mMainWindow.SetVisibility(!0);
  this.ApplySettings();
  this.mCloseAfterConfirm && this.Hide()
};
simcity.cSettingsUIHandler.prototype.UpdateConfirmTimerText = function () {
  var a = this.mSettingsUILayout.FindControlByID(simcity.cSettingsUIHandler.kTextConfirm),
  b = new scrui.cLocaleString("Settings.json", "0x0e8a777d");
  a.SetLocaleText(b, {
    remaining : Math.round(this.mConfirmTimer / 1E3)
  })
};
simcity.cSettingsUIHandler.prototype.Update = function (a) {
  this.mConfirmationMode && (this.mConfirmTimer -= a, 0 > this.mConfirmTimer ? this.AbortConfirmationSequence() : this.UpdateConfirmTimerText())
};
simcity.cSettingsUIHandler.prototype.LoadSettingFromServer = function (a, b) {
  var c = {
    url : scrui.GetRestPath().replace("/simcity/rest", "/citylog/json") + "userPreferenceService/getUserPreferences",
    onSuccess : function (b) {
      b = b.json && void 0 !== b.json.userPreferenceDto ? b.json.userPreferenceDto : null;
      a && "function" == typeof a && a(b)
    },
    onError : function (a) {
      b && "function" == typeof b && b(a)
    },
    method : "get"
  };
  scrui.XHR.Request(c)
};
simcity.cSettingsUIHandler.prototype.SaveNetworkSettings = function (a, b) {
  var c = [];
  if (void 0 == a || void 0 == b)
    for (var d = 0; d < this.mItems.length; d++) {
      var e = this.mItems[d];
      null === e.value || (null === e.itemData.mechanism || e.itemData.mechanism !== simcity.cSettingsUIHandler.kServerSideProperty) || (a = e.itemData.optionName, b = e.itemData.settingType && "boolean" === e.itemData.settingType ? 1 === e.value : e.value, void 0 !== simcity.cSettingsUIHandler.kServerSideSettingsCache[a] && simcity.cSettingsUIHandler.kServerSideSettingsCache[a] ===
        b || (c = c.concat([[a, b]])))
    }
  else
    void 0 !== simcity.cSettingsUIHandler.kServerSideSettingsCache[a] && simcity.cSettingsUIHandler.kServerSideSettingsCache[a] === b || (c = [[a, b]]);
  var f = this,
  d = function () {
    f.mNetworkAccessIcon && f.mNetworkAccessIcon.mRootElement && f.mNetworkAccessIcon.SetVisibility(!1);
    for (var a = 0; c && a < c.length; a++) {
      var b = c[a];
      simcity.cSettingsUIHandler.kServerSideSettingsCache[b[0]] = b[1]
    }
  },
  e = function () {
    f.mNetworkAccessIcon && f.mNetworkAccessIcon.mRootElement && f.mNetworkAccessIcon.SetVisibility(!1)
  };
  0 < c.length && (this.mNetworkAccessIcon.SetVisibility(!0), this.SaveSettingsToServer(c, d, e))
};
simcity.cSettingsUIHandler.prototype.SaveSettingsToServer = function (a, b, c) {
  a = {
    url : scrui.GetRestPath().replace("/simcity/rest", "/citylog/json") + "userPreferenceService/setUserPreferences",
    params : a,
    onSuccess : function (a) {
      b && "function" == typeof b && b(a)
    },
    onError : function (a) {
      c && "function" == typeof c && c(a.json)
    },
    method : "get"
  };
  scrui.XHR.Request(a)
};
simcity.cSettingsUIHandler.prototype.PurgeNetworkSettingsCache = function () {
  simcity.cSettingsUIHandler.kServerSideSettingsCache = {}

};
simcity.OptionShowMinitutorials = function () {
  return 1 == simcity.CheckOption(simcity.cSettingsUIHandler.kOptionsIDShowTutorials)
};
simcity.CheckOption = function (a) {
  var a = [scrui.BuildRequestQuery(["options", a])],
  b = null;
  scrui.RequestGameData(a, function (a) {
    b = a[0]
  });
  return b
};
simcity.CheckProperty = function (a) {
  var a = [scrui.BuildRequestQuery(["appproperties", a])],
  b = null;
  scrui.RequestGameData(a, function (a) {
    b = a[0]
  });
  return b
};
simcity.cSettingsUIHandler.prototype.OnMouseMove = function (a) {
  if (this.mActiveSlider) {
    var b = this.mActiveSlider.mParentControl.FindControlByID(simcity.cSettingsUIHandler.kSliderBar),
    c = b.GetAbsolutePosition()[0],
    a = Math.max(a, c),
    d = b.mWidth - this.mActiveSlider.mWidth,
    a = Math.min(a, c + d),
    e = this.mActiveSlider.GetParentLayout().settingsItem;
    e.itemData.sliderRoundToInt && (d /= e.itemData.sliderMax - e.itemData.sliderMin, a = Math.round((a - c) / d) * d + c);
    this.mActiveSlider.SetPosition(a - c + b.mLeft, this.mActiveSlider.mTop, this.mActiveSlider.mWidth,
      this.mActiveSlider.mHeight);
    e.itemData.liveUpdate && (this.ReadControl(e), this.ApplyItemSetting(e))
  }
};
simcity.MiniTutorialOptions = [scrui.IDFromName("tutorial_MSTutorialMyFirstCity"), scrui.IDFromName("tutorial_MSTutorialHappiness"), scrui.IDFromName("tutorial_MSTutorialLandValue"), scrui.IDFromName("tutorial_MSTutorialBudgetUI"), scrui.IDFromName("tutorial_MSTutorialDensity"), scrui.IDFromName("tutorial_MSTutorialRoadUpgrades"), scrui.IDFromName("tutorial_MSTutorialClaimCity"), scrui.IDFromName("tutorial_MSTutorialRegionMassTranist"), scrui.IDFromName("tutorial_MSTutorialTradingSims"), scrui.IDFromName("tutorial_MSTutorialTradingPower"),
  scrui.IDFromName("tutorial_MSTutorialTradingWater"), scrui.IDFromName("tutorial_MSTutorialTradingSewage"), scrui.IDFromName("tutorial_MSTutorialSharingGarbageServices"), scrui.IDFromName("tutorial_MSTutorialSharingFireServices"), scrui.IDFromName("tutorial_MSTutorialSharingHealthServices"), scrui.IDFromName("tutorial_MSTutorialSharingPoliceServices"), scrui.IDFromName("tutorial_MSTutorialGiftingCoal"), scrui.IDFromName("tutorial_MSTutorialGiftingOil"), scrui.IDFromName("tutorial_MSTutorialGiftingSimoleons"),
  scrui.IDFromName("tutorial_MSTutorialMiniGreatWorks"), scrui.IDFromName("tutorial_MSTutorialCoalMinePlacement"), scrui.IDFromName("tutorial_MSTutorialOilWellPlacement"), scrui.IDFromName("tutorial_MSTutorialTradeDepot"), scrui.IDFromName("tutorial_MSTutorialTradePort"), scrui.IDFromName("tutorial_MSCivicTutorialGamblingHall"), scrui.IDFromName("tutorial_MSCivicTutorialGamblingIncreasingProfit"), scrui.IDFromName("tutorial_MSCivicTutorialGamblingAirport"), scrui.IDFromName("tutorial_MSCivicTutorialGamblingPassengerTrains")];
simcity.ResetMiniTutorials = function () {
  for (var a in simcity.MiniTutorialOptions) {
    var b = simcity.MiniTutorialOptions[a];
    b && scrui.PostGameCommand(scrui.BuildCommand([simcity.kCommandSetAppProperty, b, 0]))
  }
  a = this;
  if (a = simcity.gGlobalUIHandler ? simcity.gGlobalUIHandler.mSettingsUIHandler : simcity.gOptionsUIHandler.mSettingsUIHandler) {
    var b = a.mSettingsUILayout.FindControlByID(simcity.cSettingsUIHandler.kTextConfirm),
    c = new scrui.cLocaleString("Settings.json", "0x0f121fad");
    b.SetLocaleText(c);
    a.mConfirmWindow.FindControlByID(simcity.cSettingsUIHandler.kBtnIDConfirmYes).SetVisibility(!1);
    a.mConfirmWindow.FindControlByID(simcity.cSettingsUIHandler.kBtnIDConfirmNo).SetVisibility(!1);
    a.mConfirmWindow.FindControlByID(simcity.cSettingsUIHandler.kBtnIDConfirmOkay).SetVisibility(!0);
    a.mMainWindow.SetVisibility(!1);
    a.mConfirmWindow.SetVisibility(!0)
  }
};
simcity.StandardOptionStrings = {};
simcity.StandardOptionStrings.LowHigh = ["0x0e680138", "0x0e68013a"];
simcity.StandardOptionStrings.LowMedHigh = ["0x0e680138", "0x0e680139", "0x0e68013a"];
simcity.StandardOptionStrings.LowMedHighUltra = ["0x0e680138", "0x0e680139", "0x0e68013a", "0x0e68013b"];
simcity.StandardOptionStrings.MinLowMedHighUltra = ["0x0e680137", "0x0e680138", "0x0e680139", "0x0e68013a", "0x0e68013b"];
simcity.StandardOptionStrings.OffLowMedHigh = ["0x0e756ad6", "0x0e680138", "0x0e680139", "0x0e68013a"];
simcity.StandardOptionStrings.OffLowMedHighUltra = ["0x0e756ad6", "0x0e680138", "0x0e680139", "0x0e68013a", "0x0e68013b"];
simcity.StandardOptionStrings.OffOn = ["0x0e756ad6", "0x0e756ad7"];
simcity.StandardOptionStrings.VideoCaptureResolutions = ["0x0ee96bac", "0x0ee96d05"];
simcity.StandardOptionStrings.DOFStrength = ["0x0eec1b5b", "0x0eec1b66", "0x0eec1b6e"];
simcity.OptionItems = {
  kGraphicsTab : {},
  kAudioTab : {},
  kGameplayTab : {}

};
simcity.OptionItems.kGraphicsTab.kScreenResolutions = {
  style : simcity.cSettingsUIHandler.kDropdownStyle,
  optionID : 73494689,
  labelString : "0x0e685e7e",
  mechanism : simcity.cSettingsUIHandler.kConfigManager,
  populateDropdown : function (a) {
    var b = [scrui.BuildRequestQuery(["resolutions"])];
    scrui.RequestGameData(b, function (b) {
      var d = b[0].length,
      e = new scrui.cLocaleString("Settings.json", "0x0e685c26");
      e.LoadString();
      for (var f = [], g = 0; g < d; ++g)
        f[g] = e.GetText(b[0][g]);
      a.SetItemData(f)
    })
  },
  availableInTutorial : !1,
  requiresConfirmation : !0,
  testConfirm : function (a) {
    scrui.PostGameCommand(scrui.BuildCommand(["tryResolution", a.itemData.optionID, a.value]))
  },
  undoConfirm : function (a) {
    scrui.PostGameCommand(scrui.BuildCommand(["tryResolution", a.itemData.optionID, a.originalValue]));
    a.value = a.originalValue
  }
};
simcity.OptionItems.kGraphicsTab.kFullscreen = {
  style : simcity.cSettingsUIHandler.kCheckboxStyle,
  optionID : 73494690,
  labelString : "0x0edf3091",
  mechanism : simcity.cSettingsUIHandler.kConfigManager,
  requiresConfirmation : !0,
  testConfirm : function (a) {
    scrui.PostGameCommand(scrui.BuildCommand(["tryFullscreen", a.itemData.optionID, a.value]))
  },
  undoConfirm : function (a) {
    scrui.PostGameCommand(scrui.BuildCommand(["tryFullscreen", a.itemData.optionID, a.originalValue]));
    a.value = a.originalValue
  }
};
simcity.OptionItems.kGraphicsTab.kLightingMode = {
  style : simcity.cSettingsUIHandler.kDropdownStyle,
  optionID : 73494694,
  optionStrings : simcity.StandardOptionStrings.MinLowMedHighUltra,
  labelString : "0x0e68019f",
  tooltipString : "0x0ee9949f",
  mechanism : simcity.cSettingsUIHandler.kConfigManager,
  firstIndex : 0
};
simcity.OptionItems.kGraphicsTab.kTextureDetail = {
  style : simcity.cSettingsUIHandler.kDropdownStyle,
  optionID : 73494687,
  optionStrings : simcity.StandardOptionStrings.LowMedHigh,
  labelString : "0x0e682f1f",
  tooltipString : "0x0ee994a0",
  mechanism : simcity.cSettingsUIHandler.kConfigManager,
  firstIndex : 1
};
simcity.OptionItems.kGraphicsTab.kShadowDetail = {
  style : simcity.cSettingsUIHandler.kDropdownStyle,
  optionID : 73494686,
  optionStrings : simcity.StandardOptionStrings.OffLowMedHighUltra,
  labelString : "0x0e8e809a",
  tooltipString : "0x0ee994a1",
  mechanism : simcity.cSettingsUIHandler.kConfigManager,
  firstIndex : 0,
  checkEnable : function (a) {
    return 0 !== a.GetOptionValue(simcity.OptionItems.kGraphicsTab.kLightingMode.optionID)
  }
};
simcity.OptionItems.kGraphicsTab.kGeometryDetail = {
  style : simcity.cSettingsUIHandler.kDropdownStyle,
  optionID : 249573050,
  optionStrings : simcity.StandardOptionStrings.LowMedHigh,
  labelString : "0x0ee6ab1e",
  tooltipString : "0x0ee994a2",
  mechanism : simcity.cSettingsUIHandler.kConfigManager,
  firstIndex : 1
};
simcity.OptionItems.kGraphicsTab.kOptionAnimationDetail = {
  style : simcity.cSettingsUIHandler.kDropdownStyle,
  optionID : 249997697,
  optionStrings : simcity.StandardOptionStrings.LowMedHigh,
  labelString : "0x0f14ce3e",
  tooltipString : "0x0f14ce51",
  mechanism : simcity.cSettingsUIHandler.kConfigManager,
  firstIndex : 1
};
simcity.OptionItems.kGraphicsTab.kOptionDOFStrength = {
  style : simcity.cSettingsUIHandler.kDropdownStyle,
  optionID : 250347083,
  optionStrings : simcity.StandardOptionStrings.DOFStrength,
  labelString : "0x0eec1c24",
  tooltipString : "0x0eec1c31",
  mechanism : simcity.cSettingsUIHandler.kConfigManager,
  firstIndex : 1
};
simcity.OptionItems.kGraphicsTab.kAntialiasing = {
  style : simcity.cSettingsUIHandler.kCheckboxStyle,
  optionID : 250192643,
  labelString : "0x0ee9a1f5",
  tooltipString : "0x0ee994a5",
  mechanism : simcity.cSettingsUIHandler.kConfigManager
};
simcity.OptionItems.kGraphicsTab.kOptionFramerateCap = {
  style : simcity.cSettingsUIHandler.kDropdownStyle,
  optionID : 253634897,
  optionStrings : ["0x0e756ad6", "0x0f1e2ace", "0x0f1e2ae1"],
  labelString : "0x0f1e2b24",
  tooltipString : "0x0f1e2aea",
  mechanism : simcity.cSettingsUIHandler.kConfigManager,
  firstIndex : 0
};
simcity.OptionItems.kGraphicsTab.kOptionVsync = {
  style : simcity.cSettingsUIHandler.kCheckboxStyle,
  optionID : 254489809,
  labelString : "0x0ee99418",
  tooltipString : "0x0ee994a9",
  mechanism : simcity.cSettingsUIHandler.kConfigManager,
  requiresConfirmation : !0,
  testConfirm : function (a) {
    scrui.PostGameCommand(scrui.BuildCommand(["tryVsync", a.itemData.optionID, a.value]))
  },
  undoConfirm : function (a) {
    scrui.PostGameCommand(scrui.BuildCommand(["tryVsync", a.itemData.optionID, a.originalValue]));
    a.value = a.originalValue
  }
};
simcity.OptionItems.kGraphicsTab.kGamma = {
  style : simcity.cSettingsUIHandler.kSliderStyle,
  optionID : 243003605,
  labelString : "0x0e7bf0d6",
  mechanism : simcity.cSettingsUIHandler.kConfigManager,
  sliderMin : 0,
  sliderMax : 10,
  sliderRoundToInt : !0,
  liveUpdate : !0
};
simcity.OptionItems.kGraphicsTab.kOptionPictureFilter = {
  style : simcity.cSettingsUIHandler.kDropdownStyle,
  optionID : 251544792,
  optionStrings : "0x0e756ad6 0x0efe477a 0x0efe4771 0x0efe4772 0x0efe477b 0x0efe4770 0x0efe4773 0x0efe477f 0x0efe4777 0x0efe477e 0x0efe4774 0x0efe477c 0x0efe4775 0x0efe4776 0x0efe4778 0x0efe4779 0x0efe477d 0x0efe478e 0x0efe478a 0x0efe478b 0x0efe478c".split(" "),
  labelString : "0x0efe476b",
  tooltipString : "0x0efe476c",
  mechanism : simcity.cSettingsUIHandler.kConfigManager,
  firstIndex : 0
};
simcity.OptionItems.kAudioTab.kMusicVolume = {
  style : simcity.cSettingsUIHandler.kSliderStyle,
  optionID : 179251522,
  labelString : "0x0e7977af",
  mechanism : simcity.cSettingsUIHandler.kDirectProperty,
  sliderMin : 0,
  sliderMax : 1,
  liveUpdate : !0
};
simcity.OptionItems.kAudioTab.kFxVolume = {
  style : simcity.cSettingsUIHandler.kSliderStyle,
  optionID : 179251523,
  labelString : "0x0e7a73ea",
  mechanism : simcity.cSettingsUIHandler.kDirectProperty,
  sliderMin : 0,
  sliderMax : 1,
  liveUpdate : !0
};
simcity.OptionItems.kAudioTab.kMuteAllAudio = {
  style : simcity.cSettingsUIHandler.kCheckboxStyle,
  optionID : 179251536,
  labelString : "0x0e756b93",
  liveUpdate : !0,
  mechanism : simcity.cSettingsUIHandler.kDirectProperty
};
simcity.OptionItems.kGameplayTab.kDisplayCityBoundary = {
  style : simcity.cSettingsUIHandler.kCheckboxStyle,
  optionID : 248978378,
  labelString : "0x0ed71cf5",
  tooltipString : "0x0efa7211",
  liveUpdate : !1,
  settingType : "boolean",
  mechanism : simcity.cSettingsUIHandler.kConfigManager
};
simcity.OptionItems.kGameplayTab.kVideoCaptureResolution = {
  style : simcity.cSettingsUIHandler.kDropdownStyle,
  optionStrings : simcity.StandardOptionStrings.VideoCaptureResolutions,
  optionID : 74692812,
  labelString : "0x0ee6cdcf",
  tooltipString : "0x0efa7317",
  liveUpdate : !1,
  mechanism : simcity.cSettingsUIHandler.kConfigManager,
  firstIndex : 3
};
simcity.OptionItems.kGameplayTab.kVideoCaptureHideUI = {
  style : simcity.cSettingsUIHandler.kCheckboxStyle,
  optionID : 250010890,
  labelString : "0x0ee6dd9d",
  tooltipString : "0x0efa7345",
  liveUpdate : !1,
  settingType : "boolean",
  mechanism : simcity.cSettingsUIHandler.kConfigManager
};
simcity.OptionItems.kGameplayTab.kFarCamera = {
  style : simcity.cSettingsUIHandler.kCheckboxStyle,
  optionID : 250710278,
  labelString : "0x0ef189b1",
  tooltipString : "0x0ef189b2",
  liveUpdate : !1,
  mechanism : simcity.cSettingsUIHandler.kConfigManager
};
simcity.OptionItems.kGameplayTab.kEdgeScroll = {
  style : simcity.cSettingsUIHandler.kSliderStyle,
  optionID : 252781149,
  labelString : "0x0efa737f",
  tooltipString : "0x0efa7388",
  mechanism : simcity.cSettingsUIHandler.kDirectProperty,
  liveUpdate : !1,
  sliderMin : 0,
  sliderMax : 1
};
simcity.OptionItems.kGameplayTab.kHideSpeechBubbles = {
  style : simcity.cSettingsUIHandler.kCheckboxStyle,
  optionID : 253718534,
  labelString : "0x0efa727c",
  tooltipString : "0x0efa728b",
  liveUpdate : !1,
  settingType : "boolean",
  broadcast : !0,
  mechanism : simcity.cSettingsUIHandler.kConfigManager
};
simcity.OptionItems.kGameplayTab.kHideThoughtBubbles = {
  style : simcity.cSettingsUIHandler.kCheckboxStyle,
  optionID : 253718551,
  labelString : "0x0efa72ad",
  tooltipString : "0x0efa72b7",
  liveUpdate : !1,
  settingType : "boolean",
  broadcast : !0,
  mechanism : simcity.cSettingsUIHandler.kConfigManager
};
simcity.OptionItems.kGameplayTab.kHideVehicleAvatars = {
  style : simcity.cSettingsUIHandler.kCheckboxStyle,
  optionID : 253980075,
  labelString : "0x0f23616c",
  tooltipString : "0x0f236198",
  settingType : "boolean",
  mechanism : simcity.cSettingsUIHandler.kConfigManager
};
simcity.OptionItems.kGameplayTab.kEnabledFeedBroadcast = {
  style : simcity.cSettingsUIHandler.kCheckboxStyle,
  optionName : "enableCitylogFeed",
  labelString : "0x7d6373b9",
  tooltipString : "0x0efa724c",
  liveUpdate : !0,
  defaultValue : !0,
  settingType : "boolean",
  mechanism : simcity.cSettingsUIHandler.kServerSideProperty
};
simcity.OptionItems.kGameplayTab.kShowTutorials = {
  style : simcity.cSettingsUIHandler.kCheckBoxWithButtonStyle,
  optionID : 3860869610,
  labelString : "0x0f0e45a5",
  tooltipString : "0x0f0e45b3",
  buttonString : "0x0efa72da",
  buttonToolTipString : "0x0efa72e3",
  buttonCallback : simcity.ResetMiniTutorials,
  liveUpdate : !0,
  settingType : "boolean",
  mechanism : simcity.cSettingsUIHandler.kConfigManager
};
simcity.databindings.DataBindingsSpeechBalloons = {};
simcity.SpeechBalloonPortraits = {
  kSpeechPortrait_SC_POLITICIAN_FEMALE_005 : "SC_POLITICIAN_FEMALE_005_small.png",
  kSpeechPortrait_SC_POLITICIAN_MALE_002 : "SC_POLITICIAN_MALE_002_small.png",
  kSpeechPortrait_SC_LAWYER_MALE_002 : "SC_LAWYER_MALE_002_small.png",
  kSpeechPortrait_SC_AIR_TRAFFIC_CONTROLLER_FEMALE_001 : "SC_AIR_TRAFFIC_CONTROLLER_FEMALE_001_small.png",
  kSpeechPortrait_SC_AIR_TRAFFIC_CONTROLLER_MALE_001 : "SC_AIR_TRAFFIC_CONTROLLER_MALE_001_small.png",
  kSpeechPortrait_SC_RESIDENT_Special_male_005 : "SC_RESIDENT_Special_male_005_small.png",
  kSpeechPortrait_Residential_Female_11 : "Residential_Female_11_small.png",
  kSpeechPortrait_Residential_Male_13 : "Residential_Male_13_small.png",
  kSpeechPortrait_SC_BUS_DRIVER_FEMALE_002 : "SC_BUS_DRIVER_FEMALE_002_small.png",
  kSpeechPortrait_SC_BUS_DRIVER_MALE_001 : "SC_BUS_DRIVER_MALE_001_small.png",
  kSpeechPortrait_SC_BUSINESS_PERSON_FEMALE_002 : "SC_BUSINESS_PERSON_FEMALE_002_small.png",
  kSpeechPortrait_SC_BUSINESS_PERSON_MALE_001 : "SC_BUSINESS_PERSON_MALE_001_small.png",
  kSpeechPortrait_SC_LAWYER_FEMALE_002 : "SC_LAWYER_FEMALE_002_small.png",
  kSpeechPortrait_SC_RESIDENT_03_001 : "SC_RESIDENT_03_001_small.png",
  kSpeechPortrait_SC_MINE_FOREMAN_FEMALE_002 : "SC_MINE_FOREMAN_FEMALE_002_small.png",
  kSpeechPortrait_SC_MINE_FOREMAN_MALE_004 : "SC_MINE_FOREMAN_MALE_004_small.png",
  kSpeechPortrait_SC_RESIDENT_Special_male_004 : "SC_RESIDENT_Special_male_004_small.png",
  kSpeechPortrait_SC_HEALTH_FEMALE_002 : "SC_HEALTH_FEMALE_002_small.png",
  kSpeechPortrait_Residential_Male_08 : "Residential_Male_08_small.png",
  kSpeechPortrait_SC_DrVu : "SC_DrVu_small.png",
  kSpeechPortrait_Tutorial_Female : "Tutorial_Female_small.png",
  kSpeechPortrait_SC_FIRE_FEMALE_001 : "SC_FIRE_FEMALE_001_small.png",
  kSpeechPortrait_SC_FIRE_MALE_001 : "SC_FIRE_MALE_001_small.png",
  kSpeechPortrait_Residential_Female_09 : "Residential_Female_09_small.png",
  kSpeechPortrait_Residential_Male_15 : "Residential_Male_15_small.png",
  kSpeechPortrait_SC_RESIDENT_Special_male_006 : "SC_RESIDENT_Special_male_006_small.png",
  kSpeechPortrait_SC_RESIDENT_Special_female_001 : "SC_RESIDENT_Special_female_001_small.png",
  kSpeechPortrait_SC_RESIDENT_Special_male_003 : "SC_RESIDENT_Special_male_003_small.png",
  kSpeechPortrait_SC_LIBRARIAN_FEMALE_001 : "SC_LIBRARIAN_FEMALE_001_small.png",
  kSpeechPortrait_SC_LIBRARIAN_MALE_003 : "SC_LIBRARIAN_MALE_003_small.png",
  kSpeechPortrait_SC_MaxisMan : "SC_MaxisMan_small.png",
  kSpeechPortrait_SC_RESIDENT_Special_male_001 : "SC_RESIDENT_Special_male_001_small.png",
  kSpeechPortrait_Residential_Male_06 : "Residential_Male_06_small.png",
  kSpeechPortrait_SC_RESIDENT_Special_female_002 : "SC_RESIDENT_Special_female_002_small.png",
  kSpeechPortrait_SC_RESIDENT_Special_female_003 : "SC_RESIDENT_Special_female_003_small.png",
  kSpeechPortrait_Residential_Male_09 : "Residential_Male_09_small.png",
  kSpeechPortrait_Residential_Female_10 : "Residential_Female_10_small.png",
  kSpeechPortrait_Residential_Male_10 : "Residential_Male_10_small.png",
  kSpeechPortrait_SC_RESIDENT_10_001 : "SC_RESIDENT_10_001_small.png",
  kSpeechPortrait_SC_RESIDENT_Special_male_002 : "SC_RESIDENT_Special_male_002_small.png",
  kSpeechPortrait_SC_POLICE_OFFICER_FEMALE_001 : "SC_POLICE_OFFICER_FEMALE_001_small.png",
  kSpeechPortrait_SC_POLICE_OFFICER_MALE_005 : "SC_POLICE_OFFICER_MALE_005_small.png",
  kSpeechPortrait_SC_RESIDENT_11_003 : "SC_RESIDENT_11_003_small.png",
  kSpeechPortrait_SC_RESIDENT_12_004 : "SC_RESIDENT_12_004_small.png",
  kSpeechPortrait_SC_RESIDENT_13_001 : "SC_RESIDENT_13_001_small.png",
  kSpeechPortrait_SC_RESIDENT_14_002 : "SC_RESIDENT_14_002_small.png",
  kSpeechPortrait_SC_RESIDENT_15_002 : "SC_RESIDENT_15_002_small.png",
  kSpeechPortrait_SC_RESIDENT_16_002 : "SC_RESIDENT_16_002_small.png",
  kSpeechPortrait_SC_RESIDENT_17_002 : "SC_RESIDENT_17_002_small.png",
  kSpeechPortrait_Residential_Female_08 : "Residential_Female_08_small.png",
  kSpeechPortrait_SC_RESIDENT_01_003 : "SC_RESIDENT_01_003_small.png",
  kSpeechPortrait_SC_RESIDENT_02_001 : "SC_RESIDENT_02_001_small.png",
  kSpeechPortrait_SC_RESIDENT_04_003 : "SC_RESIDENT_04_003_small.png",
  kSpeechPortrait_SC_RESIDENT_05_002 : "SC_RESIDENT_05_002_small.png",
  kSpeechPortrait_SC_RESIDENT_06_003 : "SC_RESIDENT_06_003_small.png",
  kSpeechPortrait_SC_RESIDENT_07_002 : "SC_RESIDENT_07_002_small.png",
  kSpeechPortrait_SC_RESIDENT_08_003 : "SC_RESIDENT_08_003_small.png",
  kSpeechPortrait_SC_RESIDENT_09_002 : "SC_RESIDENT_09_002_small.png",
  kSpeechPortrait_SC_SANITATION_WORKER_FEMALE_004 : "SC_SANITATION_WORKER_FEMALE_004_small.png",
  kSpeechPortrait_SC_SANITATION_WORKER_MALE_004 : "SC_SANITATION_WORKER_MALE_004_small.png",
  kSpeechPortrait_Residential_Female_06 : "Residential_Female_06_small.png",
  kSpeechPortrait_Residential_Male_14 : "Residential_Male_14_small.png",
  kSpeechPortrait_SC_TRAIN_DRIVER_FEMALE_004 : "SC_TRAIN_DRIVER_FEMALE_004_small.png",
  kSpeechPortrait_SC_TRAIN_DRIVER_MALE_002 : "SC_TRAIN_DRIVER_MALE_002_small.png"
};
simcity.SpeechBalloonPolling = {};
simcity.kLocalSpeechBalloonLocaleTable = 2113026203;
simcity.SpeechBalloonPolling.Global = {
  DataBindings : {
    2539986141 : {
      importance : 7,
      triggerTime : [60, 90],
      iconPath : "icn-balloons-air-profit.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiPageAcceptDismiss.js",
      speechBalloonTarget : 3403061518,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1141747013, 83023063]],
      expirationTime : [100, 500],
      missionUnitID : 696203982,
      vignetteActorPalette : 263967549,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_15_002,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json",
        "0xcedb98d4", "Mission title missing: MSCivicBuildTownHall"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 4042246182],
        HQ_CityHall_IsOn : [simcity.kDataResourceAmount, simcity.kResourceIDHQ_CityHall_IsOn],
        connectionComplete : [simcity.kDataResourceAmount, simcity.kResourceIDGlobalMission_MSCivicGettingStarted],
        unwateredbuildings : [simcity.kDataResourceAmount, simcity.kResourceIDWaterGlobals_UnwateredBuildings],
        unpoweredBuildings : [simcity.kDataBinAmount, simcity.kResourceIDPowerGlobals_UnpoweredBuildings]
      },
      test : function (a) {
        return !a ? !1 : 0 === a.HQ_CityHall_IsOn && 2 === a.connectionComplete && (0 < a.unwateredbuildings || 0 < a.unpoweredBuildings)
      }
    },
    3807831012 : {
      importance : 5,
      triggerTime : [100, 140],
      iconPath : "icn-balloons-bus.png",
      displayCountLimit : 5,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness2_AcceptOnlyTemplate.js",
      speechBalloonTarget : 3403061518,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 3449208862], [simcity.kLocalSpeechBalloonLocaleTable, 3449208863], [simcity.kLocalSpeechBalloonLocaleTable, 3449208860]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        congestion : [simcity.kDataPathCongestion],
        numberOfBusT1Stops : [simcity.kDataResourceAmount, simcity.kResourceIDNumberOfBusT1Stops],
        numberOfBusT2Stops : [simcity.kDataResourceAmount, simcity.kResourceIDBusT2],
        numberOfLightTrainT1Garages : [simcity.kDataResourceAmount, simcity.kResourceIDNumberOfLightTrainT1Garages]
      },
      test : function (a) {
        return !a ? !1 : 0.5 <= a.congestion && 0 === a.numberOfBusT1Stops && 0 === a.numberOfBusT2Stops && 0 === a.numberOfLightTrainT1Garages
      }
    }
  }
};
simcity.SpeechBalloonPolling.Tutorials = {
  unlockBin : simcity.kResourceIDTutorialEnabled,
  DataBindings : {
    1831196792 : {
      importance : 10,
      triggerTime : [1, 1],
      iconPath : "icn-balloons-fire.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiAcceptArrow.js",
      speechBalloonTarget : 3779045203,
      enableWhileBurning : !0,
      enableInTutorial : !0,
      enableInDisaster : !0,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 3521408930, 3490765948], [simcity.kLocalSpeechBalloonLocaleTable, 3521408931]],
      expirationTime : [-1,
        -1],
      bNoTransitionOut : !0,
      enableWithMaxMissions : !0,
      missionUnitID : 1904249601,
      vignetteActorPalette : 1432865102,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_Residential_Female_09,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x2734b0f1", "Mission title missing: MSCivicTutorialCreateFireStation"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 1614780409]
      },
      test : function (a) {
        return !a ? !1 : !0
      }
    },
    3061392386 : {
      importance : 10,
      triggerTime : [1, 5],
      iconPath : "icn-balloons-air-residential-desirability.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiAcceptArrow.js",
      speechBalloonTarget : 3781106737,
      enableWhileBurning : !0,
      enableInTutorial : !0,
      enableInDisaster : !0,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 525710492, 2731333012], [simcity.kLocalSpeechBalloonLocaleTable, 525710493], [simcity.kLocalSpeechBalloonLocaleTable, 525710494]],
      expirationTime : [-1, -1],
      enableWithMaxMissions : !0,
      missionUnitID : 2927025493,
      vignetteActorPalette : 112969037,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_02_001,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x3787b05d", "Mission title missing: MSCivicCreateResidential"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 3352395677]
      },
      test : function (a) {
        return !a ? !1 : !0
      }
    },
    4165693587 : {
      importance : 10,
      triggerTime : [1, 1],
      iconPath : "icn-balloons-government.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiAcceptArrow.js",
      unitID : 763908280,
      enableWhileBurning : !0,
      enableInTutorial : !0,
      enableInDisaster : !0,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable,
          1700818179, 3210655533], [simcity.kLocalSpeechBalloonLocaleTable, 1700818178], [simcity.kLocalSpeechBalloonLocaleTable, 1700818177]],
      expirationTime : [-1, -1],
      enableWithMaxMissions : !0,
      missionUnitID : 1446950514,
      vignetteActorPalette : 775769096,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_Tutorial_Female,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0xa9226dc0", "Mission title missing: MSCivicTutorialEnd"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 1570715066],
        Mission : [simcity.kDataResourceAmount,
          simcity.kResourceIDGlobalMission_MSCivicClickSpeechBubble6]
      },
      test : function (a) {
        return !a ? !1 : 1 === a.Mission
      }
    },
    2750499773 : {
      importance : 10,
      triggerTime : [1, 1],
      iconPath : "icn-balloons-garbage.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiAcceptArrow.js",
      unitID : 763908280,
      enableWhileBurning : !0,
      enableInTutorial : !0,
      enableInDisaster : !0,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 785972517, 3210655533], [simcity.kLocalSpeechBalloonLocaleTable, 785972516], [simcity.kLocalSpeechBalloonLocaleTable,
          785972519]],
      expirationTime : [-1, -1],
      bNoTransitionOut : !0,
      enableWithMaxMissions : !0,
      missionUnitID : 2128665114,
      vignetteActorPalette : 775769096,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_Tutorial_Female,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x7c6da378", "Mission title missing: MSCivicTutorialModules"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 476261186]
      },
      test : function (a) {
        return !a ? !1 : !0
      }
    },
    3532182867 : {
      importance : 10,
      triggerTime : [1, 1],
      iconPath : "icn-balloons-roads.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiAcceptArrow.js",
      unitID : 763908280,
      enableWhileBurning : !0,
      enableInTutorial : !0,
      enableInDisaster : !0,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 3935345475, 1153358816], [simcity.kLocalSpeechBalloonLocaleTable, 3935345474], [simcity.kLocalSpeechBalloonLocaleTable, 3935345473]],
      expirationTime : [-1, -1],
      bNoTransitionOut : !0,
      enableWithMaxMissions : !0,
      missionUnitID : 3610682113,
      vignetteActorPalette : 775769096,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_Tutorial_Female,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0xc990f8f1", "Mission title missing: MSCivicBuildRoad"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 2507435577]
      },
      test : function (a) {
        return !a ? !1 : !0
      }
    },
    3963724186 : {
      importance : 10,
      triggerTime : [1, 1],
      iconPath : "icn-balloons-police.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiAcceptArrow.js",
      unitID : 763908280,
      enableWhileBurning : !0,
      enableInTutorial : !0,
      enableInDisaster : !0,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable,
          2552604532, 3452307120], [simcity.kLocalSpeechBalloonLocaleTable, 2552604533], [simcity.kLocalSpeechBalloonLocaleTable, 2552604534]],
      expirationTime : [-1, -1],
      bNoTransitionOut : !0,
      enableWithMaxMissions : !0,
      missionUnitID : 1975956391,
      vignetteActorPalette : 775769096,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_Tutorial_Female,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x57cf0753", "Mission title missing: MSTutorialPoliceStation"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 4057625903]
      },
      test : function (a) {
        return !a ? !1 : !0
      }
    },
    2327285272 : {
      importance : 10,
      triggerTime : [1, 1],
      iconPath : "icn-balloons-power.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiAcceptArrow.js",
      unitID : 763908280,
      enableWhileBurning : !0,
      enableInTutorial : !0,
      enableInDisaster : !0,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2180721474, 935094770], [simcity.kLocalSpeechBalloonLocaleTable, 2180721475], [simcity.kLocalSpeechBalloonLocaleTable, 2180721472]],
      expirationTime : [-1, -1],
      bNoTransitionOut : !0,
      enableWithMaxMissions : !0,
      missionUnitID : 4182595085,
      vignetteActorPalette : 775769096,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_Tutorial_Female,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x26e2c505", "Mission title missing: MSCivicTutorialCoalPower"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 2693848181]
      },
      test : function (a) {
        return !a ? !1 : !0
      }
    },
    2639090193 : {
      importance : 10,
      triggerTime : [1, 1],
      iconPath : "icn-balloons-school.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiAcceptArrow.js",
      unitID : 763908280,
      enableWhileBurning : !0,
      enableInTutorial : !0,
      enableInDisaster : !0,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2191776889, 676314279], [simcity.kLocalSpeechBalloonLocaleTable, 2191776888], [simcity.kLocalSpeechBalloonLocaleTable, 2191776891]],
      expirationTime : [-1, -1],
      bNoTransitionOut : !0,
      enableWithMaxMissions : !0,
      missionUnitID : 518980591,
      vignetteActorPalette : 775769096,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_Tutorial_Female,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json",
        "0xa6f15aeb", "Mission title missing: MSCivicTutorialCreateSchool"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 2853402327]
      },
      test : function (a) {
        return !a ? !1 : !0
      }
    },
    2999946052 : {
      importance : 10,
      triggerTime : [1, 1],
      iconPath : "icn-balloons-sewage.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiAcceptArrow.js",
      unitID : 763908280,
      enableWhileBurning : !0,
      enableInTutorial : !0,
      enableInDisaster : !0,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1284331902, 3210655533], [simcity.kLocalSpeechBalloonLocaleTable,
          1284331903], [simcity.kLocalSpeechBalloonLocaleTable, 1284331900]],
      expirationTime : [-1, -1],
      bNoTransitionOut : !0,
      enableWithMaxMissions : !0,
      missionUnitID : 159494559,
      vignetteActorPalette : 775769096,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_Tutorial_Female,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x1ec7befb", "Mission title missing: MSTutorialSewage"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 3400847607]
      },
      test : function (a) {
        return !a ? !1 : !0
      }
    },
    3873710182 : {
      importance : 10,
      triggerTime : [1,
        1],
      iconPath : "icn-balloons-happiness.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiAcceptArrow.js",
      unitID : 763908280,
      enableWhileBurning : !0,
      enableInTutorial : !0,
      enableInDisaster : !0,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 4152058288, 1153358816], [simcity.kLocalSpeechBalloonLocaleTable, 4152058289], [simcity.kLocalSpeechBalloonLocaleTable, 4152058290]],
      expirationTime : [-1, -1],
      enableWithMaxMissions : !0,
      missionUnitID : 1234724326,
      vignetteActorPalette : 775769096,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_Tutorial_Female,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0xea7e97af", "Mission title missing: MSTutorialResidentialDemand"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 823080590]
      },
      test : function (a) {
        return !a ? !1 : !0
      }
    },
    3547586552 : {
      importance : 10,
      triggerTime : [1, 1],
      iconPath : "icn-balloons-air.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiAcceptArrow.js",
      unitID : 763908280,
      enableWhileBurning : !0,
      enableInTutorial : !0,
      enableInDisaster : !0,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable,
          1206429218, 1259362730], [simcity.kLocalSpeechBalloonLocaleTable, 1206429219]],
      expirationTime : [-1, -1],
      bNoTransitionOut : !0,
      enableWithMaxMissions : !0,
      missionUnitID : 2251537316,
      vignetteActorPalette : 775769096,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_Tutorial_Female,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x171fbe6e", "Mission title missing: MSTutorialGreatWorks"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 2930334364]
      },
      test : function (a) {
        return !a ? !1 : !0
      }
    },
    256765393 : {
      importance : 7,
      triggerTime : [3, 3],
      iconPath : "icn-balloons-power.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonAcceptDismissArrow.js",
      speechBalloonTarget : 3403061518,
      enableInTutorial : !0,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2839800761, 2848776338], [simcity.kLocalSpeechBalloonLocaleTable, 2839800760]],
      expirationTime : [60, 9E3],
      missionUnitID : 2232525413,
      vignetteActorPalette : 263967539,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_17_002,
      queries : {
        isMissionActive : [simcity.kDataBinAmount,
          121174061],
        GlobalMission_TutorialSpeechBubble : [simcity.kDataResourceAmount, simcity.kResourceIDGlobalMission_TutorialSpeechBubble],
        powerSupply : [simcity.kDataResourceAmount, simcity.kResourceIDPower]
      },
      test : function (a) {
        return !a ? !1 : 1 === a.GlobalMission_TutorialSpeechBubble && 0 === a.powerSupply
      }
    },
    564585119 : {
      importance : 10,
      triggerTime : [1, 1],
      iconPath : "icn-balloons-water.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiAcceptArrow.js",
      unitID : 763908280,
      enableWhileBurning : !0,
      enableInTutorial : !0,
      enableInDisaster : !0,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2765263311, 3722019663], [simcity.kLocalSpeechBalloonLocaleTable, 2765263310], [simcity.kLocalSpeechBalloonLocaleTable, 2765263309]],
      expirationTime : [-1, -1],
      enableWithMaxMissions : !0,
      missionUnitID : 4290004501,
      vignetteActorPalette : 775769096,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_Tutorial_Female,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x171fbe6e", "Mission title missing: MSTutorialReclaimCity"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount,
          2755963149]
      },
      test : function (a) {
        return !a ? !1 : !0
      }
    },
    3255461995 : {
      importance : 10,
      triggerTime : [1, 1],
      iconPath : "icn-balloons-air-industrial-desirability.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiAcceptArrow.js",
      speechBalloonTarget : 3916977195,
      enableWhileBurning : !0,
      enableInTutorial : !0,
      enableInDisaster : !0,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 3488798555, 3142223359], [simcity.kLocalSpeechBalloonLocaleTable, 3488798554], [simcity.kLocalSpeechBalloonLocaleTable, 3488798553]],
      expirationTime : [-1, -1],
      bNoTransitionOut : !0,
      enableWithMaxMissions : !0,
      missionUnitID : 522883686,
      vignetteActorPalette : 3941900653,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_MINE_FOREMAN_MALE_004,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x9836a17c", "Mission title missing: MSCivicZoneIndustrial"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 3870197806]
      },
      test : function (a) {
        return !a ? !1 : !0
      }
    },
    2555441351 : {
      importance : 10,
      triggerTime : [5, 10],
      iconPath : "icn-balloons-air-population.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Disasters_AcceptOnlyTemplate.js",
      speechBalloonTarget : 2801636846,
      enableWhileBurning : !0,
      enableInTutorial : !0,
      enableInDisaster : !0,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 3229923735], [simcity.kLocalSpeechBalloonLocaleTable, 3229923734], [simcity.kLocalSpeechBalloonLocaleTable, 3229923733], [simcity.kLocalSpeechBalloonLocaleTable, 3229923732]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {},
      test : function (a) {
        return !a ? !1 : !0
      }
    },
    3225239201 : {
      importance : 10,
      triggerTime : [1, 5],
      iconPath : "icn-balloons-happiness.png",
      displayCountLimit : 2,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness4_AcceptOnlyTemplate.js",
      speechBalloonTarget : 3781106737,
      enableWhileBurning : !0,
      enableInTutorial : !0,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 3419069449]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {},
      test : function (a) {
        return !a ? !1 : !0
      }
    },
    1097439041 : {
      importance : 5,
      triggerTime : [1, 5],
      iconPath : "icn-balloons-roads.png",
      displayCountLimit : 2,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness4_AcceptOnlyTemplate.js",
      speechBalloonTarget : 3403061518,
      enableWhileBurning : !0,
      enableInTutorial : !0,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2464306217]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {},
      test : function (a) {
        return !a ? !1 : !0
      }
    },
    1097439040 : {
      importance : 4,
      triggerTime : [1, 5],
      iconPath : "icn-balloons-zones.png",
      displayCountLimit : 2,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness4_AcceptOnlyTemplate.js",
      speechBalloonTarget : 1725103879,
      enableWhileBurning : !0,
      enableInTutorial : !0,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable,
          195545930]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {},
      test : function (a) {
        return !a ? !1 : !0
      }
    },
    1097439047 : {
      importance : 2,
      triggerTime : [1, 5],
      iconPath : "icn-balloons-air-industrial-desirability.png",
      displayCountLimit : 2,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness4_AcceptOnlyTemplate.js",
      speechBalloonTarget : 2343535945,
      enableWhileBurning : !0,
      enableInTutorial : !0,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 33099031]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {},
      test : function (a) {
        return !a ?
        !1 : !0
      }
    },
    1097439046 : {
      importance : 2,
      triggerTime : [1, 5],
      iconPath : "icn-balloons-air-population.png",
      displayCountLimit : 2,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness4_AcceptOnlyTemplate.js",
      speechBalloonTarget : 1725103879,
      enableWhileBurning : !0,
      enableInTutorial : !0,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 904071952]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {},
      test : function (a) {
        return !a ? !1 : !0
      }
    }
  }
};
simcity.SpeechBalloonPolling.CoalMineUnlocked = {
  unlockBin : simcity.kResourceIDCoalMineUnlocked,
  unlockEvent : simcity.kEventIDUnlock_CoalMineUnlocked,
  DataBindings : {
    3361854292 : {
      importance : 8,
      triggerTime : [60, 120],
      iconPath : "icn-balloons-coal.png",
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonEditor.js",
      unitID : 2242242908,
      unitBin : 928475780,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1906014478, 2957669422], [simcity.kLocalSpeechBalloonLocaleTable, 1906014479]],
      expirationTime : [100, 120],
      vignetteActorPalette : 3941900653,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_MINE_FOREMAN_FEMALE_002,
      queries : {
        coalHarvested : [simcity.kDataResourceAmount, simcity.kResourceIDCoalHarvested],
        coalMineT1 : [simcity.kDataBinAmount, simcity.kResourceIDCoalMinesBuilt_T1],
        coalMineShaft : [simcity.kDataBinAmount, simcity.kResourceIDCoalShaftsBuilt_T1],
        guided : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Guided]
      },
      test : function (a) {
        return !a ? !1 : 1E4 <= a.coalHarvested && 0 < a.coalMineT1 && 0 === a.coalMineShaft && 0 === a.guided
      }
    },
    4185770090 : {
      importance : 8,
      triggerTime : [60, 120],
      iconPath : "icn-balloons-coal.png",
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonEditor.js",
      unitID : 641598825,
      unitBin : 928475780,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2578964548, 3142223356], [simcity.kLocalSpeechBalloonLocaleTable, 1906014479]],
      expirationTime : [100, 120],
      vignetteActorPalette : 4092899163,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_Residential_Male_06,
      queries : {
        coalHarvested : [simcity.kDataResourceAmount, simcity.kResourceIDCoalHarvested],
        coalMineT2 : [simcity.kDataBinAmount, simcity.kResourceIDCoalMinesBuilt_T2],
        coalMineShaft : [simcity.kDataBinAmount, simcity.kResourceIDCoalShaftsBuilt_T2],
        guided : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Guided]
      },
      test : function (a) {
        return !a ? !1 : 2E4 <= a.coalHarvested && 0 < a.coalMineT2 && 0 === a.coalMineShaft && 0 === a.guided
      }
    },
    2701684165 : {
      importance : 8,
      triggerTime : [60, 120],
      iconPath : "icn-balloons-coal.png",
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonEditor.js",
      unitID : 1079865360,
      unitBin : 928475780,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 3787306061, 267576928]],
      expirationTime : [100, 120],
      vignetteActorPalette : 112969038,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_01_003,
      queries : {
        MiningResourcesSold : [simcity.kDataBinAmount, simcity.kResourceIDMiningResourcesSold],
        CoalHQIsPresent : [simcity.kDataBinAmount, simcity.kResourceIDHQ_Mining_IsOn],
        guided : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Guided]
      },
      test : function (a) {
        return !a ? !1 : 1E4 < a.MiningResourcesSold &&
        1 === a.CoalHQIsPresent && 0 === a.guided
      }
    },
    2207602089 : {
      importance : 8,
      triggerTime : [90, 120],
      iconPath : "icn-balloons-ore.png",
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonEditor.js",
      unitID : 3860400474,
      unitBin : 2098293145,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1663740209, 2731333015]],
      expirationTime : [100, 120],
      vignetteActorPalette : 112969038,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_01_003,
      queries : {
        oreMines : [simcity.kDataResourceAmount, simcity.kResourceIDOreMinesBuilt],
        OreHarvested : [simcity.kDataBinAmount,
          simcity.kResourceIDOreHarvested],
        guided : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Guided]
      },
      test : function (a) {
        return !a ? !1 : 5E3 * a.oreMines > a.OreHarvested && 0 === a.guided
      }
    },
    2037784229 : {
      importance : 8,
      triggerTime : [60, 120],
      iconPath : "icn-balloons-alloy.png",
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonEditor.js",
      unitID : 607748284,
      unitBin : 2098293146,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1176369453, 2731333015]],
      expirationTime : [100, 120],
      vignetteActorPalette : 112969038,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_01_003,
      queries : {
        NumSmelter : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfMetalManufacturingBases],
        alloyAssemblers : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfAlloyAssemblers],
        alloyConsumers : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfAlloyConsumers],
        guided : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Guided]
      },
      test : function (a) {
        return !a ? !1 : 1 < a.NumSmelter && 2 * a.alloyAssemblers < a.alloyConsumers && 0 === a.guided
      }
    },
    3213241377 : {
      importance : 7,
      triggerTime : [60, 120],
      iconPath : "icn-balloons-metal.png",
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonEditor.js",
      unitID : 607748284,
      unitBin : 928475780,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1756775561, 267576928]],
      expirationTime : [100, 120],
      vignetteActorPalette : 112969038,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_01_003,
      queries : {
        NumSmelter : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfMetalManufacturingBases],
        metalAssemblers : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfMetalAssemblers],
        metalConsumers : [simcity.kDataBinAmount,
          simcity.kResourceIDNumberOfMetalConsumers],
        guided : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Guided]
      },
      test : function (a) {
        return !a ? !1 : 1 < a.NumSmelter && 2 * a.metalAssemblers < a.metalConsumers && 0 === a.guided
      }
    },
    2624464944 : {
      importance : 8,
      triggerTime : [100, 120],
      iconPath : "icn-balloons-coal.png",
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonAcceptDismissTemplate.js",
      speechBalloonTarget : 11435360,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 538084218, 983513986]],
      expirationTime : [100, 120],
      missionUnitID : 3523193789,
      vignetteActorPalette : 3256005431,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_LIBRARIAN_FEMALE_001,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x943ec215", "Mission title missing: MSCoalPlaceCoalMine"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 3681260405],
        coalMines : [simcity.kDataResourceAmount, simcity.kResourceIDCoalMinesBuilt],
        people : [simcity.kDataBinAmount, simcity.kResourceIDTotalResidential],
        totalJobs : [simcity.kDataResourceAmount, simcity.kResourceIDTotalJobs],
        coal : [simcity.kDataMaps, simcity.kMapIDCoalDeposit, simcity.kDataSum],
        guided : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Guided]
      },
      test : function (a) {
        return !a ? !1 : 5E5 < a.coal && 1 > a.coalMines && 1E3 < a.people && 600 > a.totalJobs && 0 === a.guided
      }
    },
    1823858654 : {
      importance : 8,
      triggerTime : [60, 180],
      iconPath : "icn-balloons-coal.png",
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonAcceptDismissTemplate.js",
      speechBalloonTarget : 1953260309,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2938906280, 3055611887]],
      expirationTime : [100, 120],
      missionUnitID : 3408932027,
      vignetteActorPalette : 595613376,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_FIRE_FEMALE_001,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0xea2bf93f", "Mission title missing: MSCoalPlaceCoalMineT2"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 4098851443],
        CoalHarvested : [simcity.kDataBinAmount, simcity.kResourceIDCoalHarvested],
        HQEngineerWing : [simcity.kDataBinAmount, simcity.kResourceIDHQ_Mining_Engineering_Module_IsOn],
        coalT2 : [simcity.kDataResourceAmount, simcity.kResourceIDCoalMinesBuilt_T2],
        guided : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Guided]
      },
      test : function (a) {
        return !a ? !1 : 2E4 < a.CoalHarvested && 0 < a.HQEngineerWing && 1 > a.coalT2 && 0 === a.guided
      }
    },
    1527128649 : {
      importance : 8,
      triggerTime : [100, 600],
      iconPath : "icn-balloons-coal.png",
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonAcceptDismissTemplate.js",
      speechBalloonTarget : 1051852219,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1548970961, 2848776344]],
      expirationTime : [100, 120],
      missionUnitID : 1707715300,
      vignetteActorPalette : 263967545,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_12_004,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0xc1095eae", "Mission title missing: MSCoalPlaceHQ"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 231824156],
        StuffMinedPerDay : [simcity.kDataBinAmount, simcity.kResourceIDStuffMinedPerDay],
        CoalHQIsPresent : [simcity.kDataBinAmount, simcity.kResourceIDHQ_Mining_IsOn],
        guided : [simcity.kDataResourceAmount,
          simcity.kResourceIDSpecialization_Guided]
      },
      test : function (a) {
        return !a ? !1 : 5E4 < a.StuffMinedPerDay && 0 === a.CoalHQIsPresent && 0 === a.guided
      }
    },
    683090338 : {
      importance : 8,
      triggerTime : [30, 60],
      iconPath : "icn-balloons-upgrade.png",
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonAcceptDismissTemplate.js",
      speechBalloonTarget : 1953260309,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 245423036, 558531452]],
      expirationTime : [100, 200],
      missionUnitID : 2798807939,
      vignetteActorPalette : 745917125,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_MINE_FOREMAN_MALE_004,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x8e1d6477", "Mission title missing: MSCoalCoalHQToLevel2"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 56675115],
        HQLevel : [simcity.kDataBinAmount, simcity.kResourceIDHQ_Mining_Level],
        guided : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Guided]
      },
      test : function (a) {
        return !a ? !1 : 1 === a.HQLevel && 0 === a.guided
      }
    },
    683090339 : {
      importance : 6,
      triggerTime : [30, 60],
      iconPath : "icn-balloons-upgrade.png",
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonAcceptDismissTemplate.js",
      speechBalloonTarget : 1953260309,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 3778050067, 189263456]],
      expirationTime : [100, 200],
      missionUnitID : 2798807938,
      vignetteActorPalette : 662028964,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_MINE_FOREMAN_FEMALE_002,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x1350eff0", "Mission title missing: MSCoalCoalHQToLevel3"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 56675114],
        HQLevel : [simcity.kDataBinAmount, simcity.kResourceIDHQ_Mining_Level],
        guided : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Guided]
      },
      test : function (a) {
        return !a ? !1 : 2 === a.HQLevel && 0 === a.guided
      }
    },
    683090340 : {
      importance : 6,
      triggerTime : [30, 60],
      iconPath : "icn-balloons-upgrade.png",
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonAcceptDismissTemplate.js",
      speechBalloonTarget : 1953260309,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 745035614, 3001499379]],
      expirationTime : [100, 200],
      missionUnitID : 2798807941,
      vignetteActorPalette : 745917125,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_MINE_FOREMAN_MALE_004,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x9924faed", "Mission title missing: MSCoalCoalHQToLevel4"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 56675117],
        HQLevel : [simcity.kDataBinAmount, simcity.kResourceIDHQ_Mining_Level],
        guided : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Guided]
      },
      test : function (a) {
        return !a ? !1 : 3 === a.HQLevel && 0 === a.guided
      }
    },
    1746646196 : {
      importance : 3,
      triggerTime : [300, 900],
      iconPath : "icn-balloons-coal.png",
      displayCountLimit : 8,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness3_AcceptOnlyTemplate.js",
      speechBalloonTarget : 416754379,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1353518446], [simcity.kLocalSpeechBalloonLocaleTable, 1353518447], [simcity.kLocalSpeechBalloonLocaleTable, 1353518444], [simcity.kLocalSpeechBalloonLocaleTable, 1353518445]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        coalMine : [simcity.kDataBinAmount, simcity.kResourceIDCoalMinesBuilt],
        coalInMap : [simcity.kDataMaps, simcity.kMapIDCoalDeposit, simcity.kDataSum],
        people : [simcity.kDataBinAmount, simcity.kResourceIDTotalResidential],
        guided : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Guided]
      },
      test : function (a) {
        return !a ? !1 : 1 > a.coalMine && 5E5 < a.coalInMap && 600 < a.people && 1 > a.guided
      }
    },
    3571618762 : {
      importance : 3,
      triggerTime : [90, 120],
      iconPath : "icn-balloons-coal.png",
      displayCountLimit : 5,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness3_AcceptOnlyTemplate.js",
      speechBalloonTarget : 416754379,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 304796836], [simcity.kLocalSpeechBalloonLocaleTable, 304796837], [simcity.kLocalSpeechBalloonLocaleTable,
          304796838]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        coalMineT2 : [simcity.kDataBinAmount, simcity.kResourceIDCoalMinesBuilt_T2],
        coalMineT2Unlocked : [simcity.kDataBinAmount, simcity.kResourceIDCoalMineT2Unlocked],
        guided : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Guided]
      },
      test : function (a) {
        return !a ? !1 : 1 > a.coalMineT2 && 0 < a.coalMineT2Unlocked && 1 > a.guided
      }
    },
    4146856907 : {
      importance : 2,
      triggerTime : [90, 120],
      iconPath : "icn-balloons-coal.png",
      displayCountLimit : 5,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness4_AcceptOnlyTemplate.js",
      speechBalloonTarget : 416754379,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 3710340283], [simcity.kLocalSpeechBalloonLocaleTable, 3710340282], [simcity.kLocalSpeechBalloonLocaleTable, 3710340281], [simcity.kLocalSpeechBalloonLocaleTable, 3710340280], [simcity.kLocalSpeechBalloonLocaleTable, 3710340287]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        coalMineT1 : [simcity.kDataResourceAmount, simcity.kResourceIDCoalMinesBuilt_T1]
      },
      test : function (a) {
        return !a ? !1 : 0 < a.coalMineT1
      }
    },
    3966955402 : {
      importance : 2,
      triggerTime : [90, 120],
      iconPath : "icn-balloons-coal.png",
      displayCountLimit : 7,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness4_AcceptOnlyTemplate.js",
      speechBalloonTarget : 416754379,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1896856292], [simcity.kLocalSpeechBalloonLocaleTable, 1896856293], [simcity.kLocalSpeechBalloonLocaleTable, 1896856294], [simcity.kLocalSpeechBalloonLocaleTable, 1896856295], [simcity.kLocalSpeechBalloonLocaleTable, 1896856288], [simcity.kLocalSpeechBalloonLocaleTable, 1896856289]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        coalMineHQ : [simcity.kDataBinAmount, simcity.kResourceIDHQ_Mining_IsOn]
      },
      test : function (a) {
        return !a ? !1 : 0 < a.coalMineHQ
      }
    },
    3631403085 : {
      importance : 2,
      triggerTime : [90, 120],
      iconPath : "icn-balloons-coal.png",
      displayCountLimit : 3,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness4_AcceptOnlyTemplate.js",
      speechBalloonTarget : 416754379,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1630781429], [simcity.kLocalSpeechBalloonLocaleTable, 1630781428], [simcity.kLocalSpeechBalloonLocaleTable,
          1630781431]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        coalMineT2 : [simcity.kDataResourceAmount, simcity.kResourceIDCoalMinesBuilt_T2]
      },
      test : function (a) {
        return !a ? !1 : 0 < a.coalMineT2
      }
    }
  }
};
simcity.SpeechBalloonPolling.DisasterActive = {
  unlockBin : simcity.kResourceIDDisasterActive,
  unlockEvent : simcity.kEventIDUnlock_DisasterActive,
  DataBindings : {
    3031901043 : {
      importance : 10,
      triggerTime : [5, 10],
      iconPath : "icn-balloons-air-population.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Disasters_AcceptOnlyTemplate.js",
      speechBalloonTarget : 3403061518,
      enableInDisaster : !0,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1627998435], [simcity.kLocalSpeechBalloonLocaleTable, 1627998434], [simcity.kLocalSpeechBalloonLocaleTable,
          1627998433]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        DisasterMeltdown_Recent : [simcity.kDataResourceAmount, simcity.kResourceIDDisasterMeltdown_Recent],
        radiationInMap : [simcity.kDataMaps, simcity.kMapIDRadiation, simcity.kDataSum]
      },
      test : function (a) {
        return !a ? !1 : 0 < a.DisasterMeltdown_Recent && 5E4 < a.radiationInMap
      }
    },
    3574453247 : {
      importance : 10,
      triggerTime : [5, 10],
      iconPath : "icn-balloons-health.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Disasters_AcceptOnlyTemplate.js",
      speechBalloonTarget : 11435360,
      enableInDisaster : !0,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 4070583343], [simcity.kLocalSpeechBalloonLocaleTable, 4070583342], [simcity.kLocalSpeechBalloonLocaleTable, 4070583341], [simcity.kLocalSpeechBalloonLocaleTable, 4070583340]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        DisasterActivePlague : [simcity.kDataResourceAmount, simcity.kResourceIDDisasterActivePlague]
      },
      test : function (a) {
        return !a ? !1 : 0 < a.DisasterActivePlague
      }
    },
    3574453237 : {
      importance : 10,
      triggerTime : [5, 10],
      iconPath : "icn-balloons-air-industrial-desirability.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Disasters_AcceptOnlyTemplate.js",
      speechBalloonTarget : 416754379,
      enableInDisaster : !0,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1382758909], [simcity.kLocalSpeechBalloonLocaleTable, 1382758908], [simcity.kLocalSpeechBalloonLocaleTable, 1382758911], [simcity.kLocalSpeechBalloonLocaleTable, 1382758910], [simcity.kLocalSpeechBalloonLocaleTable, 1382758905]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        DisasterActivePlague : [simcity.kDataResourceAmount,
          simcity.kResourceIDDisasterActivePlague]
      },
      test : function (a) {
        return !a ? !1 : 0 < a.DisasterActivePlague
      }
    },
    3574453230 : {
      importance : 10,
      triggerTime : [5, 10],
      iconPath : "icn-balloons-health.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Disasters_AcceptOnlyTemplate.js",
      speechBalloonTarget : 3403061518,
      enableInDisaster : !0,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 976081656], [simcity.kLocalSpeechBalloonLocaleTable, 976081657], [simcity.kLocalSpeechBalloonLocaleTable, 976081658], [simcity.kLocalSpeechBalloonLocaleTable,
          976081659], [simcity.kLocalSpeechBalloonLocaleTable, 976081660]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        DisasterActivePlague : [simcity.kDataResourceAmount, simcity.kResourceIDDisasterActivePlague]
      },
      test : function (a) {
        return !a ? !1 : 0 < a.DisasterActivePlague
      }
    },
    152202267 : {
      importance : 10,
      triggerTime : [5, 10],
      iconPath : "icn-balloons-air-population.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Disasters_AcceptOnlyTemplate.js",
      speechBalloonTarget : 2801636846,
      enableInDisaster : !0,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable,
          1186935051], [simcity.kLocalSpeechBalloonLocaleTable, 1186935050], [simcity.kLocalSpeechBalloonLocaleTable, 1186935049]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        DisasterActivePlague : [simcity.kDataResourceAmount, simcity.kResourceIDDisasterActivePlague]
      },
      test : function (a) {
        return !a ? !1 : 0 < a.DisasterActivePlague
      }
    },
    662319844 : {
      importance : 10,
      triggerTime : [5, 10],
      iconPath : "icn-balloons-air-population.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Disasters_AcceptOnlyTemplate.js",
      speechBalloonTarget : 2801636846,
      enableInDisaster : !0,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 4052020510], [simcity.kLocalSpeechBalloonLocaleTable, 4052020511], [simcity.kLocalSpeechBalloonLocaleTable, 4052020508], [simcity.kLocalSpeechBalloonLocaleTable, 4052020509]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        DisasterActiveTornado : [simcity.kDataResourceAmount, simcity.kResourceIDDisasterActiveTornado]
      },
      test : function (a) {
        return !a ? !1 : 0 < a.DisasterActiveTornado
      }
    },
    2911389057 : {
      importance : 10,
      triggerTime : [5, 10],
      iconPath : "icn-balloons-air-population.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Disasters_AcceptOnlyTemplate.js",
      speechBalloonTarget : 2801636846,
      enableInDisaster : !0,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 3185460969], [simcity.kLocalSpeechBalloonLocaleTable, 3185460968], [simcity.kLocalSpeechBalloonLocaleTable, 3185460971], [simcity.kLocalSpeechBalloonLocaleTable, 3185460970]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        DisasterUFO : [simcity.kDataResourceAmount, simcity.kResourceIDDisasterActiveUFO]
      },
      test : function (a) {
        return !a ?
        !1 : 0 < a.DisasterUFO
      }
    },
    3091153926 : {
      importance : 10,
      triggerTime : [5, 10],
      iconPath : "icn-balloons-air-population.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Disasters_AcceptOnlyTemplate.js",
      speechBalloonTarget : 2801636846,
      enableInDisaster : !0,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 222652752], [simcity.kLocalSpeechBalloonLocaleTable, 222652753], [simcity.kLocalSpeechBalloonLocaleTable, 222652754], [simcity.kLocalSpeechBalloonLocaleTable, 222652755]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        DisasterActiveZombie : [simcity.kDataResourceAmount,
          simcity.kResourceIDDisasterActiveZombie]
      },
      test : function (a) {
        return !a ? !1 : 1 < a.DisasterActiveZombie
      }
    }
  }
};
simcity.SpeechBalloonPolling.ElectronicsBaseUnlocked = {
  unlockBin : simcity.kResourceIDElectronicsBaseUnlocked,
  unlockEvent : simcity.kEventIDUnlock_ElectronicsBaseUnlocked,
  DataBindings : {
    520823649 : {
      importance : 4,
      triggerTime : [300, 640],
      iconPath : "icn-balloons-electronics.png",
      displayCountLimit : 4,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonEditor.js",
      unitID : 2951125740,
      unitBin : 928475780,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 3733855561, 2731333015]],
      expirationTime : [100, 120],
      vignetteActorPalette : 112969038,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_01_003,
      queries : {
        alloy : [simcity.kDataResourceAmount, simcity.kResourceIDAlloy],
        plastic : [simcity.kDataResourceAmount, simcity.kResourceIDPlastic],
        T1 : [simcity.kDataResourceAmount, simcity.kResourceIDNumT1ElectronicsBase],
        guided : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Guided]
      },
      test : function (a) {
        return !a ? !1 : 1E3 < a.alloy && 1E3 < a.plastic && 0 < a.T1 && 0 === a.guided
      }
    },
    2523608254 : {
      importance : 4,
      triggerTime : [360, 480],
      iconPath : "icn-balloons-electronics.png",
      displayCountLimit : 4,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonEditor.js",
      unitID : 550074187,
      unitBin : 928475780,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 64682760, 267576928]],
      expirationTime : [60, 120],
      vignetteActorPalette : 112969038,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_01_003,
      queries : {
        T2 : [simcity.kDataResourceAmount, simcity.kResourceIDNumT2ElectronicsBase],
        alloy : [simcity.kDataResourceAmount, simcity.kResourceIDAlloy],
        plastic : [simcity.kDataResourceAmount, simcity.kResourceIDPlastic],
        guided : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Guided]
      },
      test : function (a) {
        return !a ? !1 : 1E3 < a.alloy && 1E3 < a.plastic && 0 < a.T2 && 0 === a.guided
      }
    },
    381799367 : {
      importance : 8,
      triggerTime : [60, 120],
      iconPath : "icn-balloons-electronics.png",
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonAcceptDismissTemplate.js",
      speechBalloonTarget : 2786031172,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 976784023, 1935129146]],
      expirationTime : [100, 120],
      missionUnitID : 613037132,
      vignetteActorPalette : 1256068118,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_Residential_Female_11,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x82211e26", "Mission title missing: MSBusinessElectronicsNeedElectronicsHQ"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 1272738100],
        HQLevel : [simcity.kDataBinAmount, simcity.kResourceIDHQ_Electronics_Level],
        chips : [simcity.kDataResourceAmount, simcity.kResourceIDHQ_Electronics_Unlocked],
        guided : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Guided]
      },
      test : function (a) {
        return !a ? !1 : 0 === a.HQLevel && 0 < a.chips && 0 === a.guided
      }
    },
    669780917 : {
      importance : 8,
      triggerTime : [100, 200],
      iconPath : "icn-balloons-electronics.png",
      displayCountLimit : 10,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonAcceptDismissTemplate.js",
      speechBalloonTarget : 3971508389,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 3445859133, 479875064]],
      expirationTime : [60, 120],
      missionUnitID : 1623399441,
      vignetteActorPalette : 1765993603,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_LIBRARIAN_FEMALE_001,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x075ae3a1", "Mission title missing: MSManufacturingAddT1ElectronicFactory"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 3440571369],
        industryW3 : [simcity.kDataResourceAmount, simcity.kResourceIDIndustrialW3],
        T1 : [simcity.kDataResourceAmount, simcity.kResourceIDNumT1ElectronicsBase],
        guided : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Guided],
        alloy : [simcity.kDataResourceAmount, simcity.kResourceIDAlloy],
        plastic : [simcity.kDataResourceAmount,
          simcity.kResourceIDPlastic]
      },
      test : function (a) {
        return !a ? !1 : 150 < a.industryW3 && 1 > a.T1 && 0 === a.guided && 1E3 < a.alloy && 1E3 < a.plastic
      }
    },
    1075853746 : {
      importance : 6,
      triggerTime : [200, 300],
      iconPath : "icn-balloons-electronics.png",
      displayCountLimit : 10,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonAcceptDismissTemplate.js",
      unitID : 2951125740,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 3375004044, 2931960962]],
      expirationTime : [60, 120],
      missionUnitID : 3302685040,
      vignetteActorPalette : 1883436934,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_06_003,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x075ae3a1", "Mission title missing: MSManufacturingAddT2ElectronicFactory"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 1916258696],
        chips : [simcity.kDataResourceAmount, simcity.kResourceIDTotalElectronicsAssembled],
        T2 : [simcity.kDataResourceAmount, simcity.kResourceIDNumT2ElectronicsBase],
        T1 : [simcity.kDataResourceAmount, simcity.kResourceIDNumT1ElectronicsBase],
        HQLevel : [simcity.kDataBinAmount, simcity.kResourceIDHQ_Electronics_Level],
        guided : [simcity.kDataResourceAmount,
          simcity.kResourceIDSpecialization_Guided]
      },
      test : function (a) {
        return !a ? !1 : 1500 < a.chips && 1 > a.T2 && 0 < a.T1 && 0 < a.HQLevel && 0 === a.guided
      }
    },
    2054294833 : {
      importance : 5,
      triggerTime : [100, 140],
      iconPath : "icn-balloons-upgrade.png",
      displayCountLimit : 10,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonAcceptDismissTemplate.js",
      unitID : 4143987461,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2092948377, 3082959727]],
      expirationTime : [100, 120],
      missionUnitID : 4099226164,
      vignetteActorPalette : 1765993603,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_LIBRARIAN_FEMALE_001,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0xf40faf1e", "Mission title missing: MSManufacturingElectronicsHQToLevel2"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 688534268],
        HQLevel : [simcity.kDataBinAmount, simcity.kResourceIDHQ_Electronics_Level],
        guided : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Guided]
      },
      test : function (a) {
        return !a ? !1 : 1 === a.HQLevel && 0 === a.guided
      }
    },
    2054294832 : {
      importance : 5,
      triggerTime : [100, 140],
      iconPath : "icn-balloons-upgrade.png",
      displayCountLimit : 10,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonAcceptDismissTemplate.js",
      unitID : 4143987461,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 3029135994, 3082959727]],
      expirationTime : [100, 120],
      missionUnitID : 4099226165,
      vignetteActorPalette : 1765993603,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_LIBRARIAN_FEMALE_001,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x532243bd", "Mission title missing: MSManufacturingElectronicsHQToLevel3"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount,
          688534269],
        HQLevel : [simcity.kDataBinAmount, simcity.kResourceIDHQ_Electronics_Level],
        guided : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Guided]
      },
      test : function (a) {
        return !a ? !1 : 2 === a.HQLevel && 0 === a.guided
      }
    },
    1980648035 : {
      importance : 3,
      triggerTime : [100, 120],
      iconPath : "icn-balloons-electronics.png",
      displayCountLimit : 5,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness3_AcceptOnlyTemplate.js",
      speechBalloonTarget : 11435360,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 23865683],
        [simcity.kLocalSpeechBalloonLocaleTable, 23865682], [simcity.kLocalSpeechBalloonLocaleTable, 23865681], [simcity.kLocalSpeechBalloonLocaleTable, 23865680]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        industryW3 : [simcity.kDataResourceAmount, simcity.kResourceIDIndustrialW3],
        factory : [simcity.kDataResourceAmount, simcity.kResourceIDNumT1ElectronicsBase]
      },
      test : function (a) {
        return !a ? !1 : 30 < a.industryW3 && 0 < a.factory
      }
    },
    1511354834 : {
      importance : 3,
      triggerTime : [30, 60],
      iconPath : "icn-balloons-electronics.png",
      displayCountLimit : 5,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness3_AcceptOnlyTemplate.js",
      speechBalloonTarget : 3971508389,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1942007852], [simcity.kLocalSpeechBalloonLocaleTable, 1942007853], [simcity.kLocalSpeechBalloonLocaleTable, 1942007854]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        eHQ : [simcity.kDataBinAmount, simcity.kResourceIDHQ_Electronics_Built],
        eHQu : [simcity.kDataBinAmount, simcity.kResourceIDHQ_Electronics_Unlocked]
      },
      test : function (a) {
        return !a ?
        !1 : 1 > a.eHQ && 0 < a.eHQu
      }
    },
    4123099102 : {
      importance : 3,
      triggerTime : [90, 120],
      iconPath : "icn-balloons-electronics.png",
      displayCountLimit : 4,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness5_AcceptOnlyTemplate.js",
      speechBalloonTarget : 11435360,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2892433064], [simcity.kLocalSpeechBalloonLocaleTable, 2892433065], [simcity.kLocalSpeechBalloonLocaleTable, 2892433066], [simcity.kLocalSpeechBalloonLocaleTable, 2892433067]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        factory : [simcity.kDataBinAmount, simcity.kResourceIDNumT1ElectronicsBase]
      },
      test : function (a) {
        return !a ? !1 : 0 < a.factory
      }
    },
    2399705639 : {
      importance : 2,
      triggerTime : [30, 60],
      iconPath : "icn-balloons-electronics.png",
      displayCountLimit : 4,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness5_AcceptOnlyTemplate.js",
      speechBalloonTarget : 11435360,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 3601488631], [simcity.kLocalSpeechBalloonLocaleTable, 3601488630], [simcity.kLocalSpeechBalloonLocaleTable, 3601488629],
        [simcity.kLocalSpeechBalloonLocaleTable, 3601488628]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        eHQ : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfElectronicHQs]
      },
      test : function (a) {
        return !a ? !1 : 0 < a.eHQ
      }
    },
    2332595256 : {
      importance : 2,
      triggerTime : [90, 120],
      iconPath : "icn-balloons-electronics.png",
      displayCountLimit : 4,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness5_AcceptOnlyTemplate.js",
      speechBalloonTarget : 11435360,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2049368802], [simcity.kLocalSpeechBalloonLocaleTable,
          2049368803], [simcity.kLocalSpeechBalloonLocaleTable, 2049368800]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        factory : [simcity.kDataBinAmount, simcity.kResourceIDNumT2ElectronicsBase]
      },
      test : function (a) {
        return !a ? !1 : 0 < a.factory
      }
    }
  }
};
simcity.SpeechBalloonPolling.GamblingHallUnlocked = {
  unlockBin : simcity.kResourceIDGamblingHallUnlocked,
  unlockEvent : simcity.kEventIDUnlock_GamblingHallUnlocked,
  DataBindings : {
    222143168 : {
      importance : 4,
      triggerTime : [500, 800],
      iconPath : "icn-balloons-casino.png",
      displayCountLimit : 5,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonEditor.js",
      unitID : 565270209,
      unitBin : 928475780,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2648509898, 2731333015]],
      expirationTime : [60, 90],
      vignetteActorPalette : 112969038,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_01_003,
      queries : {
        casinos : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfCasinos],
        tourism : [simcity.kDataBinAmount, simcity.kResourceIDAttractionLevel],
        gamblers : [simcity.kDataBinAmount, simcity.kResourceIDGamblersSatisfiedTotal],
        guided : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Guided]
      },
      test : function (a) {
        return !a ? !1 : 0 < a.casinos && 150 < a.tourism && 20 < a.gamblers && 0 === a.guided
      }
    },
    1791241820 : {
      importance : 9,
      triggerTime : [100, 140],
      iconPath : "icn-balloons-casino.png",
      displayCountLimit : 10,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonAcceptDismissTemplate.js",
      speechBalloonTarget : 11435360,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2563341046, 151290895]],
      expirationTime : [60, 90],
      missionUnitID : 1341437059,
      vignetteActorPalette : 780344294,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_LAWYER_MALE_002,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x8479ff77", "Mission title missing: MSBusinessGamblingNeedGambling"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 2282367835],
        casinos : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfCasinos],
        tourism : [simcity.kDataBinAmount, simcity.kResourceIDAttractionLevel],
        simoleons : [simcity.kDataBinAmount, simcity.kResourceIDSimoleons],
        guided : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Guided]
      },
      test : function (a) {
        return !a ? !1 : 1 > a.casinos && 80 < a.tourism && 2E3 > a.simoleons && 0 === a.guided
      }
    },
    893826437 : {
      importance : 9,
      triggerTime : [100, 140],
      iconPath : "icn-balloons-casino.png",
      displayCountLimit : 10,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonAcceptDismissTemplate.js",
      speechBalloonTarget : 200935300,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1453261453, 151290895]],
      expirationTime : [60, 90],
      missionUnitID : 1550491122,
      vignetteActorPalette : 780344294,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_LAWYER_MALE_002,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x8e484440", "Mission title missing: MSBusinessGamblingNeedGamblingHQ"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 1703608570],
        casinos : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfCasinos],
        casinoHQs : [simcity.kDataBinAmount,
          simcity.kResourceIDNumberOfCasinoHQs],
        tourism : [simcity.kDataBinAmount, simcity.kResourceIDAttractionLevel],
        gamblers : [simcity.kDataBinAmount, simcity.kResourceIDGamblersSatisfiedTotal],
        casinoincome : [simcity.kDataBinAmount, simcity.kResourceIDCasinoSpecialtyIncomeDisplay],
        guided : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Guided]
      },
      test : function (a) {
        return !a ? !1 : 5E5 < a.casinoincome && 0 < a.casinos && 1 > a.casinoHQs && 100 < a.tourism && 10 < a.gamblers && 0 === a.guided
      }
    },
    3352315850 : {
      importance : 8,
      triggerTime : [60,
        90],
      iconPath : "icn-balloons-casino.png",
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonAcceptDismissTemplate.js",
      speechBalloonTarget : 1482763029,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1982263460, 641318770]],
      expirationTime : [60, 90],
      missionUnitID : 147091970,
      vignetteActorPalette : 2445099597,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_03_001,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x0bf96370", "Mission title missing: MSBusinessGamblingUpgradeGamblingHQ"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 3030068874],
        HQLevel : [simcity.kDataBinAmount, simcity.kResourceIDHQ_Casino_Level],
        guided : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Guided]
      },
      test : function (a) {
        return !a ? !1 : 1 === a.HQLevel && 0 === a.guided
      }
    },
    3214511629 : {
      importance : 3,
      triggerTime : [200, 500],
      iconPath : "icn-balloons-casino.png",
      displayCountLimit : 6,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness3_AcceptOnlyTemplate.js",
      speechBalloonTarget : 11435360,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable,
          1494028597], [simcity.kLocalSpeechBalloonLocaleTable, 1494028596], [simcity.kLocalSpeechBalloonLocaleTable, 1494028599], [simcity.kLocalSpeechBalloonLocaleTable, 1494028598], [simcity.kLocalSpeechBalloonLocaleTable, 1494028593]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        casinos : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfCasinos],
        tourism : [simcity.kDataBinAmount, simcity.kResourceIDAttractionLevel],
        simoleons : [simcity.kDataBinAmount, simcity.kResourceIDSimoleons],
        guided : [simcity.kDataResourceAmount,
          simcity.kResourceIDSpecialization_Guided]
      },
      test : function (a) {
        return !a ? !1 : 1 > a.casinos && 60 < a.tourism && 5E3 > a.simoleons && 0 === a.guided
      }
    },
    1966717961 : {
      importance : 4,
      triggerTime : [60, 100],
      iconPath : "icn-balloons-casino.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness3_AcceptOnlyTemplate.js",
      unitID : 565270209,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2400141585], [simcity.kLocalSpeechBalloonLocaleTable, 2400141584], [simcity.kLocalSpeechBalloonLocaleTable, 2400141587], [simcity.kLocalSpeechBalloonLocaleTable,
          2400141586], [simcity.kLocalSpeechBalloonLocaleTable, 2400141589]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        casinoincome : [simcity.kDataBinAmount, simcity.kResourceIDIncomeFromCasinosTotal],
        cHQs : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfCasinoHQs],
        guided : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Guided]
      },
      test : function (a) {
        return !a ? !1 : 1E3 < a.casinoincome && 1 > a.cHQs && 0 === a.guided
      }
    },
    3457083966 : {
      importance : 3,
      triggerTime : [60, 90],
      iconPath : "icn-balloons-casino.png",
      displayCountLimit : 6,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness5_AcceptOnlyTemplate.js",
      speechBalloonTarget : 11435360,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 862239624], [simcity.kLocalSpeechBalloonLocaleTable, 862239625], [simcity.kLocalSpeechBalloonLocaleTable, 862239626], [simcity.kLocalSpeechBalloonLocaleTable, 862239627], [simcity.kLocalSpeechBalloonLocaleTable, 862239628], [simcity.kLocalSpeechBalloonLocaleTable, 862239629]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        casinos : [simcity.kDataBinAmount,
          simcity.kResourceIDNumberOfCasinos]
      },
      test : function (a) {
        return !a ? !1 : 0 < a.casinos
      }
    },
    242297382 : {
      importance : 3,
      triggerTime : [60, 90],
      iconPath : "icn-balloons-casino.png",
      displayCountLimit : 5,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness5_AcceptOnlyTemplate.js",
      speechBalloonTarget : 11435360,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 4032178672], [simcity.kLocalSpeechBalloonLocaleTable, 4032178673], [simcity.kLocalSpeechBalloonLocaleTable, 4032178674]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        cHQ : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfCasinoHQs]
      },
      test : function (a) {
        return !a ? !1 : 0 < a.cHQ
      }
    }
  }
};
simcity.SpeechBalloonPolling.HQ_CityHall_Level2_IsOn = {
  unlockBin : simcity.kResourceIDHQ_CityHall_Level2_IsOn,
  unlockEvent : simcity.kEventIDUnlock_HQ_CityHall_Level2_IsOn,
  DataBindings : {
    275904726 : {
      importance : 7,
      triggerTime : [100, 300],
      iconPath : "icn-balloons-air.png",
      displayCountLimit : 4,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonEditor.js",
      speechBalloonTarget : 1858623465,
      enableWhileBurning : !0,
      unitBin : 2098293145,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 3637106144, 267576928]],
      expirationTime : [100,
        150],
      vignetteActorPalette : 112969038,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_01_003,
      queries : {
        Airport : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfAirports],
        freightProducedToday : [simcity.kDataBinAmount, simcity.kResourceIDFreightProducedToday],
        freightCap : [simcity.kDataBinAmount, simcity.kResourceIDFreightCapacityGlobal]
      },
      test : function (a) {
        return !a ? !1 : a.freightProducedToday > a.freightCap && 0 < a.Airport
      }
    },
    1514100222 : {
      importance : 5,
      triggerTime : [150, 600],
      iconPath : "icn-balloons-air.png",
      displayCountLimit : 5,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonEditor.js",
      speechBalloonTarget : 1858623465,
      unitBin : 2098293144,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 275066312, 2731333015]],
      expirationTime : [100, 150],
      vignetteActorPalette : 112969038,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_01_003,
      queries : {
        TouristsAllowedW3 : [simcity.kDataBinAmount, simcity.kResourceIDTouristsAllowedW3],
        Airport : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfAirports]
      },
      test : function (a) {
        return !a ?
        !1 : 500100 < a.TouristsAllowedW3 && 0 < a.Airport
      }
    },
    1215289198 : {
      importance : 9,
      triggerTime : [60, 300],
      iconPath : "icn-balloons-air.png",
      displayCountLimit : 5,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiPageAcceptDismiss.js",
      speechBalloonTarget : 1858623465,
      unitBin : 2098293146,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2504981880, 549333830], [simcity.kLocalSpeechBalloonLocaleTable, 2504981881], [simcity.kLocalSpeechBalloonLocaleTable, 2504981882]],
      expirationTime : [100, 150],
      missionUnitID : 97048813,
      vignetteActorPalette : 2930569410,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_AIR_TRAFFIC_CONTROLLER_MALE_001,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x33c17a65", "Mission title missing: MSAirBuildRunway"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 4044293061],
        TouristsAllowedW1 : [simcity.kDataBinAmount, simcity.kResourceIDTouristsAllowedW1],
        TouristsAllowedW2 : [simcity.kDataBinAmount, simcity.kResourceIDTouristsAllowedW2],
        Airports : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfAirports]
      },
      test : function (a) {
        return !a ? !1 : 500100 < (a.TouristsAllowedW1 + a.TouristsAllowedW2) / 2 && 0 < a.Airports
      }
    },
    3985101327 : {
      importance : 6,
      triggerTime : [60, 160],
      iconPath : "icn-balloons-air.png",
      displayCountLimit : 10,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiPageAcceptDismiss.js",
      speechBalloonTarget : 11435360,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2096927551, 3015966651], [simcity.kLocalSpeechBalloonLocaleTable, 2096927550], [simcity.kLocalSpeechBalloonLocaleTable, 2096927549]],
      expirationTime : [100, 150],
      missionUnitID : 2018374934,
      vignetteActorPalette : 1152278309,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_BUSINESS_PERSON_FEMALE_002,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x9bddc04c", "Mission title missing: MSAirBuildAirport"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 3203647038],
        AttractionLevel : [simcity.kDataBinAmount, simcity.kResourceIDAttractionLevel],
        Airports : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfAirports]
      },
      test : function (a) {
        return !a ? !1 : 150 <
        a.AttractionLevel && 1 > a.Airports
      }
    },
    655401445 : {
      importance : 6,
      triggerTime : [900, 1800],
      iconPath : "icn-balloons-crime.png",
      displayCountLimit : 3,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonEditor.js",
      unitID : 3020739884,
      unitBin : 2098293145,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1941668589, 2693699976], [simcity.kLocalSpeechBalloonLocaleTable, 1941668588], [simcity.kLocalSpeechBalloonLocaleTable, 1941668591]],
      expirationTime : [100, 150],
      vignetteActorPalette : 3405125517,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_POLITICIAN_FEMALE_005,
      queries : {
        murders : [simcity.kDataResourceAmount, simcity.kResourceIDMurder],
        detective : [simcity.kDataResourceAmount, simcity.kResourceIDDetectiveWingsBuilt]
      },
      test : function (a) {
        return !a ? !1 : 0 < a.murders && 1 > a.detective
      }
    },
    443753537 : {
      importance : 6,
      triggerTime : [120, 600],
      iconPath : "icn-balloons-police.png",
      displayCountLimit : 10,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonEditor.js",
      speechBalloonTarget : 3020739884,
      unitBin : 2098293149,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2252585769, 151290895], [simcity.kLocalSpeechBalloonLocaleTable,
          2252585768], [simcity.kLocalSpeechBalloonLocaleTable, 2252585771]],
      expirationTime : [60, 120],
      vignetteActorPalette : 780344294,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_LAWYER_MALE_002,
      queries : {
        jailed : [simcity.kDataResourceAmount, simcity.kResourceIDCriminalsIncarcerated],
        rehabbed : [simcity.kDataResourceAmount, simcity.kResourceIDCriminalsRehabilitated],
        Outreach : [simcity.kDataResourceAmount, simcity.kResourceIDOutreachWingsBuilt]
      },
      test : function (a) {
        return !a ? !1 : a.rehabbed < a.jailed && 1 > a.Outreach
      }
    },
    1903172236 : {
      importance : 8,
      triggerTime : [60, 90],
      iconPath : "icn-balloons-police.png",
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiPageAcceptDismiss.js",
      speechBalloonTarget : 416508457,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 4253874534, 469439538], [simcity.kLocalSpeechBalloonLocaleTable, 4253874535], [simcity.kLocalSpeechBalloonLocaleTable, 4253874532]],
      expirationTime : [60, 120],
      missionUnitID : 976965737,
      vignetteActorPalette : 263943756,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_POLICE_OFFICER_FEMALE_001,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x82ac8ca9", "Mission title missing: MSCrimeNeedPoliceT2"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 175814785],
        CriminalsAtLarge : [simcity.kDataResourceAmount, simcity.kResourceIDCriminalsAtLarge],
        PS1 : [simcity.kDataResourceAmount, simcity.kResourceIDPoliceStationsT1Built],
        PS2 : [simcity.kDataResourceAmount, simcity.kResourceIDPoliceStationsT2Built],
        DOS : [simcity.kDataBinAmount, simcity.kResourceIDHQ_CityHall_Safety_Module_IsOn]
      },
      test : function (a) {
        return !a ?
        !1 : 4 < a.CriminalsAtLarge && 0 < a.DOS && 0 < a.PS1 && 1 > a.PS2
      }
    },
    1726597408 : {
      importance : 5,
      triggerTime : [120, 1600],
      iconPath : "icn-balloons-school.png",
      displayCountLimit : 5,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonEditor.js",
      unitID : 1112583733,
      unitBin : 928475780,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1843876650, 2731333015]],
      expirationTime : [60, 90],
      vignetteActorPalette : 112969038,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_01_003,
      queries : {
        university : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfUniversities],
        guided : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Guided]
      },
      test : function (a) {
        return !a ? !1 : 0 < a.university && 0 === a.guided
      }
    },
    3494201336 : {
      importance : 8,
      triggerTime : [90, 180],
      iconPath : "icn-balloons-school.png",
      displayCountLimit : 8,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiPageAcceptDismiss.js",
      speechBalloonTarget : 3403061518,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 3343048226, 2731333012], [simcity.kLocalSpeechBalloonLocaleTable, 3343048227]],
      expirationTime : [60, 120],
      missionUnitID : 3164025707,
      vignetteActorPalette : 112969037,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_02_001,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0xa2bddd0f", "Mission title missing: MSEducationBuildUniversity"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 3210681379],
        university : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfUniversities],
        guided : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Guided],
        universityunlocked : [simcity.kDataBinAmount, simcity.kResourceIDHQ_CityHall_Education_Module_IsOn],
        students_yesterday : [simcity.kDataBinAmount, simcity.kResourceIDLocalStudentsYesterday],
        gradeschools : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfGradeSchoolBases],
        highschools : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfHighSchoolBases],
        colleges : [simcity.kDataResourceAmount, simcity.kResourceIDNumberOfCollegeBases]
      },
      test : function (a) {
        return !a ? !1 : 0 < a.universityunlocked && 1 > a.university && 0 === a.guided && 1 <= a.gradeschools && 1 <= a.highschools && 1 <= a.colleges && 500 <= a.students_yesterday
      }
    },
    3120861599 : {
      importance : 6,
      triggerTime : [60, 120],
      iconPath : "icn-balloons-fire.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonEditor.js",
      speechBalloonTarget : 2796572562,
      unitBin : 2098293146,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 3635928783, 507215973], [simcity.kLocalSpeechBalloonLocaleTable, 3635928782], [simcity.kLocalSpeechBalloonLocaleTable, 3635928781]],
      expirationTime : [60, 120],
      vignetteActorPalette : 1068390148,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_BUSINESS_PERSON_MALE_001,
      queries : {
        HazmatUnlocked : [simcity.kDataResourceAmount,
          simcity.kResourceIDHazmatGarageUnlocked],
        HazmatTrucks : [simcity.kDataResourceAmount, simcity.kResourceIDHazMatFireTrucksAvailable]
      },
      test : function (a) {
        return !a ? !1 : 0 < a.HazmatUnlocked && 1 > a.HazmatTrucks
      }
    },
    3614325628 : {
      importance : 7,
      triggerTime : [120, 180],
      iconPath : "icn-balloons-garbage.png",
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiPageAcceptDismiss.js",
      speechBalloonTarget : 1725103878,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1563385110, 2245694934], [simcity.kLocalSpeechBalloonLocaleTable, 1563385111],
        [simcity.kLocalSpeechBalloonLocaleTable, 1563385108]],
      expirationTime : [60, 120],
      missionUnitID : 2194033723,
      vignetteActorPalette : 1583863611,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_Residential_Male_15,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0xf0c277bf", "Mission title missing: MSGarbageBuildRecyclingCenter"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 357025891],
        RecyclingPlant : [simcity.kDataResourceAmount, simcity.kResourceIDAvailableRecyclingCenter],
        DeptOfUtilities : [simcity.kDataResourceAmount,
          simcity.kResourceIDHQ_CityHall_Utilities_Module_IsOn]
      },
      test : function (a) {
        return !a ? !1 : 0 === a.RecyclingPlant && 0 < a.DeptOfUtilities
      }
    },
    2892833379 : {
      importance : 5,
      triggerTime : [500, 1E3],
      iconPath : "icn-balloons-air-money.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonAcceptDismissTemplate.js",
      speechBalloonTarget : 442264791,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2710745427, 2467393894]],
      expirationTime : [60, 120],
      missionUnitID : 2933389585,
      vignetteActorPalette : 1899635592,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_POLITICIAN_MALE_002,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x758a3aa1", "Mission title missing: MSGovernmentBuildDepartmentOfFinance"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 3897861497],
        HQ_CityHall_Level : [simcity.kDataResourceAmount, simcity.kResourceIDHQ_CityHall_Level],
        people : [simcity.kDataResourceAmount, simcity.kResourceIDTotalResidential],
        HQ_CityHall_Finance_Module_IsOn : [simcity.kDataResourceAmount, simcity.kResourceIDHQ_CityHall_Finance_Module_IsOn],
        HQ_CityHall_OpenModules : [simcity.kDataBinAmount,
          simcity.kResourceIDHQ_CityHall_OpenModules]
      },
      test : function (a) {
        return !a ? !1 : 1400 < a.people && 1 < a.HQ_CityHall_Level && 0 === a.HQ_CityHall_Finance_Module_IsOn && 1 <= a.HQ_CityHall_OpenModules
      }
    },
    1602406244 : {
      importance : 8,
      triggerTime : [300, 500],
      iconPath : "icn-balloons-air.png",
      displayCountLimit : 3,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiPageAcceptDismiss.js",
      unitID : 1858623465,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 3770518174, 397798760], [simcity.kLocalSpeechBalloonLocaleTable, 3770518175]],
      expirationTime : [60,
        180],
      missionUnitID : 105354811,
      vignetteActorPalette : 1258331781,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_Residential_Male_08,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x3dc3d5bf", "Mission title missing: MSGreatWorksInternationalAirportUnlock"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 1402223795],
        airports : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfAirports],
        air_tourists_yesterday : [simcity.kDataResourceAmount, simcity.kResourceIDNumberOfAirTouristsYesterday],
        open_greatwork_slots : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfGreatWorksAvailable]
      },
      test : function (a) {
        return !a ? !1 : 1 <= a.open_greatwork_slots && 1 <= a.airports && 50 <= a.air_tourists_yesterday
      }
    },
    1191898728 : {
      importance : 8,
      triggerTime : [300, 500],
      iconPath : "icn-balloons-power.png",
      displayCountLimit : 3,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiPageAcceptDismiss.js",
      unitID : 1112583733,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 3543549970, 267576930], [simcity.kLocalSpeechBalloonLocaleTable,
          3543549971], [simcity.kLocalSpeechBalloonLocaleTable, 3543549968]],
      expirationTime : [60, 180],
      missionUnitID : 2860828081,
      vignetteActorPalette : 112969036,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_03_001,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0xf1f2c3c1", "Mission title missing: MSGreatWorksSolarFarmUnlock"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 2847638201],
        scienceWing : [simcity.kDataBinAmount, simcity.kResourceIDHQ_University_Science_Module_IsOn],
        open_greatwork_slots : [simcity.kDataBinAmount,
          simcity.kResourceIDNumberOfGreatWorksAvailable]
      },
      test : function (a) {
        return !a ? !1 : 1 <= a.open_greatwork_slots && 1 > a.scienceWing
      }
    },
    557569990 : {
      importance : 8,
      triggerTime : [300, 500],
      iconPath : "icn-balloons-electronics.png",
      displayCountLimit : 3,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiPageAcceptDismiss.js",
      unitID : 4143987461,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 376286352, 3082959727], [simcity.kLocalSpeechBalloonLocaleTable, 376286353], [simcity.kLocalSpeechBalloonLocaleTable, 376286354]],
      expirationTime : [60,
        180],
      missionUnitID : 1801901355,
      vignetteActorPalette : 1765993603,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_LIBRARIAN_FEMALE_001,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x6d3f15cf", "Mission title missing: MSGreatWorksSpaceCenterUnlock"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 1563035251],
        electronics_HQ_built : [simcity.kDataBinAmount, simcity.kResourceIDHQ_Electronics_IsOn],
        open_greatwork_slots : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfGreatWorksAvailable]
      },
      test : function (a) {
        return !a ? !1 : 1 <= a.open_greatwork_slots && 1 === a.electronics_HQ_built
      }
    },
    647043176 : {
      importance : 8,
      triggerTime : [60, 90],
      iconPath : "icn-balloons-health.png",
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonAcceptDismissTemplate.js",
      unitID : 807628145,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2987279890, 3379666235]],
      expirationTime : [90, 120],
      missionUnitID : 1613958395,
      vignetteActorPalette : 2462799717,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_Residential_Male_08,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json",
        "0x22d66f7f", "Mission title missing: MSHealthNeedHospitalT2"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 1272600835],
        HospitalsBuilt : [simcity.kDataBinAmount, simcity.kResourceIDHospitalsBuilt],
        T2HospitalsBuilt : [simcity.kDataBinAmount, simcity.kResourceIDT2HospitalsBuilt],
        Sick : [simcity.kDataResourceAmount, simcity.kResourceIDSick],
        Injured : [simcity.kDataResourceAmount, simcity.kResourceIDInjury]
      },
      test : function (a) {
        return !a ? !1 : 1 > a.T2HospitalsBuilt && 0 < a.HospitalsBuilt && 5 < a.Sick && 5 < a.Injured
      }
    },
    3241359227 : {
      importance : 8,
      triggerTime : [60, 120],
      iconPath : "icn-balloons-tourism.png",
      displayCountLimit : 8,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonAcceptDismissTemplate.js",
      speechBalloonTarget : 11435360,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 107357547, 3195171532]],
      expirationTime : [60, 120],
      missionUnitID : 611399925,
      vignetteActorPalette : 3922400218,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_BUS_DRIVER_FEMALE_002,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x8ce4757d", "Mission title missing: MSTourismBuildALandmark"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 1739647997],
        t1 : [simcity.kDataResourceAmount, simcity.kResourceIDTouristW1],
        t2 : [simcity.kDataResourceAmount, simcity.kResourceIDTouristW2],
        t3 : [simcity.kDataResourceAmount, simcity.kResourceIDTouristW3],
        simoleons : [simcity.kDataResourceAmount, simcity.kResourceIDSimoleons],
        people : [simcity.kDataBinAmount, simcity.kResourceIDTotalResidential],
        landmarks_unlocked : [simcity.kDataResourceAmount, simcity.kResourceIDLandmarksUnlocked],
        hasLandmark : [simcity.kDataResourceAmount,
          simcity.kResourceIDHasLandmark]
      },
      test : function (a) {
        return !a ? !1 : 150 <= a.t1 + a.t2 + a.t3 && 12E4 <= a.simoleons && 1E4 <= a.people && 0 <= a.landmarks_unlocked && 1 > a.hasLandmark
      }
    },
    407498851 : {
      importance : 2,
      triggerTime : [100, 140],
      iconPath : "icn-balloons-air.png",
      displayCountLimit : 5,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness4_AcceptOnlyTemplate.js",
      speechBalloonTarget : 11435360,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1776655187], [simcity.kLocalSpeechBalloonLocaleTable, 1776655186], [simcity.kLocalSpeechBalloonLocaleTable,
          1776655185], [simcity.kLocalSpeechBalloonLocaleTable, 1776655184], [simcity.kLocalSpeechBalloonLocaleTable, 1776655191]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        Runways : [simcity.kDataResourceAmount, simcity.kResourceIDRunway]
      },
      test : function (a) {
        return !a ? !1 : 0 < a.Runways
      }
    },
    3614870808 : {
      importance : 6,
      triggerTime : [100, 140],
      iconPath : "icn-balloons-air.png",
      displayCountLimit : 5,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness3_AcceptOnlyTemplate.js",
      speechBalloonTarget : 11435360,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable,
          1227909186], [simcity.kLocalSpeechBalloonLocaleTable, 1227909187], [simcity.kLocalSpeechBalloonLocaleTable, 1227909184], [simcity.kLocalSpeechBalloonLocaleTable, 1227909185]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        AttractionLevel : [simcity.kDataBinAmount, simcity.kResourceIDAttractionLevel],
        Runways : [simcity.kDataResourceAmount, simcity.kResourceIDRunway],
        DOT : [simcity.kDataBinAmount, simcity.kResourceIDHQ_CityHall_Transportation_Module_IsOn]
      },
      test : function (a) {
        return !a ? !1 : 0 === a.Runways && 100 < a.AttractionLevel &&
        0 < a.DOT
      }
    },
    3438776734 : {
      importance : 3,
      triggerTime : [30, 60],
      iconPath : "icn-balloons-police.png",
      displayCountLimit : 3,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness5_AcceptOnlyTemplate.js",
      speechBalloonTarget : 3403061518,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 3477881832], [simcity.kLocalSpeechBalloonLocaleTable, 3477881833], [simcity.kLocalSpeechBalloonLocaleTable, 3477881834]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        policeStationT2 : [simcity.kDataBinAmount, simcity.kResourceIDPoliceStationsT2Built]
      },
      test : function (a) {
        return !a ? !1 : 0 < a.policeStationT2
      }
    },
    4115539511 : {
      importance : 4,
      triggerTime : [120, 300],
      iconPath : "icn-balloons-school.png",
      displayCountLimit : 5,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness3_AcceptOnlyTemplate.js",
      speechBalloonTarget : 3403061518,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 3026212743], [simcity.kLocalSpeechBalloonLocaleTable, 3026212742], [simcity.kLocalSpeechBalloonLocaleTable, 3026212741], [simcity.kLocalSpeechBalloonLocaleTable, 3026212740]],
      expirationTime : [60,
        90],
      isThoughtBubble : !0,
      queries : {
        NumberOfUCs : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfUniversities],
        universityunlocked : [simcity.kDataBinAmount, simcity.kResourceIDHQ_CityHall_Education_Module_IsOn],
        guided : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Guided]
      },
      test : function (a) {
        return !a ? !1 : 1 > a.NumberOfUCs && 0 < a.universityunlocked && 0 === a.guided
      }
    },
    2244367452 : {
      importance : 3,
      triggerTime : [60, 120],
      iconPath : "icn-balloons-school.png",
      displayCountLimit : 6,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness4_AcceptOnlyTemplate.js",
      speechBalloonTarget : 3403061518,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2381737206], [simcity.kLocalSpeechBalloonLocaleTable, 2381737207], [simcity.kLocalSpeechBalloonLocaleTable, 2381737204], [simcity.kLocalSpeechBalloonLocaleTable, 2381737205], [simcity.kLocalSpeechBalloonLocaleTable, 2381737202]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        NumberOfUCs : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfUniversities]
      },
      test : function (a) {
        return !a ? !1 : 0 < a.NumberOfUCs
      }
    },
    2044277122 : {
      importance : 6,
      triggerTime : [45, 60],
      iconPath : "icn-balloons-fire.png",
      displayCountLimit : 10,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness5_AcceptOnlyTemplate.js",
      speechBalloonTarget : 3403061518,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1673428252], [simcity.kLocalSpeechBalloonLocaleTable, 1673428253], [simcity.kLocalSpeechBalloonLocaleTable, 1673428254]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        fireStationT2 : [simcity.kDataResourceAmount, simcity.kResourceIDNumberOfT2FireStations]
      },
      test : function (a) {
        return !a ?
        !1 : 0 < a.fireStationT2
      }
    },
    3658481656 : {
      importance : 5,
      triggerTime : [30, 90],
      iconPath : "icn-balloons-garbage.png",
      displayCountLimit : 10,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness2_AcceptOnlyTemplate.js",
      speechBalloonTarget : 1725103878,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2109015586], [simcity.kLocalSpeechBalloonLocaleTable, 2109015587], [simcity.kLocalSpeechBalloonLocaleTable, 2109015584]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        RecyclingPlant : [simcity.kDataResourceAmount,
          simcity.kResourceIDAvailableRecyclingCenter],
        knowledgeLevel : [simcity.kDataResourceAmount, simcity.kResourceIDKnowledgeLevel],
        GarbagePollutionToday : [simcity.kDataResourceAmount, simcity.kResourceIDGarbagePollutionToday],
        HQ_CityHall_Level : [simcity.kDataResourceAmount, simcity.kResourceIDHQ_CityHall_Level]
      },
      test : function (a) {
        return !a ? !1 : 0 === a.RecyclingPlant && 20 < a.GarbagePollutionToday && 20 < a.knowledgeLevel && 1 < a.HQ_CityHall_Level
      }
    },
    741764451 : {
      importance : 3,
      triggerTime : [30, 60],
      iconPath : "icn-balloons-garbage.png",
      displayCountLimit : 10,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness5_AcceptOnlyTemplate.js",
      speechBalloonTarget : 3403061518,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 3098792531], [simcity.kLocalSpeechBalloonLocaleTable, 3098792530], [simcity.kLocalSpeechBalloonLocaleTable, 3098792529], [simcity.kLocalSpeechBalloonLocaleTable, 3098792528]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        RecyclingPlant : [simcity.kDataResourceAmount, simcity.kResourceIDAvailableRecyclingCenter],
        recyclingPickedUpToday : [simcity.kDataResourceAmount,
          simcity.kResourceIDRecyclablesPickedUpToday]
      },
      test : function (a) {
        return !a ? !1 : 0 < a.RecyclingPlant && 100 < a.recyclingPickedUpToday
      }
    },
    1591697453 : {
      importance : 4,
      triggerTime : [30, 80],
      iconPath : "icn-balloons-school.png",
      displayCountLimit : 5,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness3_AcceptOnlyTemplate.js",
      speechBalloonTarget : 3403061518,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2047560277], [simcity.kLocalSpeechBalloonLocaleTable, 2047560276], [simcity.kLocalSpeechBalloonLocaleTable, 2047560279]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        RecyclingPlant : [simcity.kDataResourceAmount, simcity.kResourceIDAvailableRecyclingCenter],
        knowledgeLevel : [simcity.kDataResourceAmount, simcity.kResourceIDKnowledgeLevel]
      },
      test : function (a) {
        return !a ? !1 : 0 < a.RecyclingPlant && 20 > a.knowledgeLevel
      }
    },
    4115839302 : {
      importance : 2,
      triggerTime : [60, 120],
      iconPath : "icn-balloons-health.png",
      displayCountLimit : 5,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness4_AcceptOnlyTemplate.js",
      speechBalloonTarget : 3403061518,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 384168208], [simcity.kLocalSpeechBalloonLocaleTable, 384168209], [simcity.kLocalSpeechBalloonLocaleTable, 384168210], [simcity.kLocalSpeechBalloonLocaleTable, 384168211]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        T2hospitalsBuilt : [simcity.kDataResourceAmount, simcity.kResourceIDT2HospitalsBuilt]
      },
      test : function (a) {
        return !a ? !1 : 0 < a.T2hospitalsBuilt
      }
    }
  }
};
simcity.SpeechBalloonPolling.NumberOfConnections = {
  unlockBin : simcity.kResourceIDNumberOfConnections,
  unlockEvent : simcity.kEventIDUnlock_NumberOfConnections,
  DataBindings : {
    1043374785 : {
      importance : 8,
      triggerTime : [60, 90],
      iconPath : "icn-balloons-trade.png",
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonAcceptDismissTemplate.js",
      unitID : 3976243695,
      unitBin : 2098293151,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 3543176873, 2184015186]],
      expirationTime : [60, 90],
      missionUnitID : 4065456649,
      vignetteActorPalette : 1174443876,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_Residential_Female_11,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0xb4fe36c9", "Mission title missing: MSImExAddCargoBoatModule"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 610696593],
        NumImExT2 : [simcity.kDataBinAmount, simcity.kResourceIDNumImExT2],
        NumberOfImExModulesBoat : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfImExModulesBoat],
        NumberOfBoatConnections : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfBoatConnections],
        guided : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Guided]
      },
      test : function (a) {
        return !a ? !1 : 1 <= a.NumImExT2 && 0 === a.NumberOfImExModulesBoat && 1 <= a.NumberOfBoatConnections && 0 === a.guided
      }
    },
    3860005846 : {
      importance : 8,
      triggerTime : [60, 90],
      iconPath : "icn-balloons-trade.png",
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonAcceptDismissTemplate.js",
      unitID : 3976243695,
      unitBin : 2098293144,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1770141408, 2335013695]],
      expirationTime : [60, 90],
      missionUnitID : 1383306982,
      vignetteActorPalette : 1258331781,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_Residential_Male_08,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0xd8948efc", "Mission title missing: MSImExAddFreightRailModule"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 3547056174],
        NumImExT2 : [simcity.kDataBinAmount, simcity.kResourceIDNumImExT2],
        NumberOfImExModulesRail : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfImExModulesRail],
        NumberOfRailConnections : [simcity.kDataBinAmount,
          simcity.kResourceIDNumberOfRailConnections],
        guided : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Guided]
      },
      test : function (a) {
        return !a ? !1 : 1 <= a.NumImExT2 && 0 === a.NumberOfImExModulesRail && 1 <= a.NumberOfRailConnections && 0 === a.guided
      }
    },
    256015422 : {
      importance : 8,
      triggerTime : [60, 90],
      iconPath : "icn-balloons-trade.png",
      displayCountLimit : 5,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonAcceptDismissTemplate.js",
      unitID : 3976243695,
      unitBin : 2098293145,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable,
          1764422024, 2639478588]],
      expirationTime : [60, 90],
      missionUnitID : 1334081878,
      vignetteActorPalette : 798812438,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_TRAIN_DRIVER_MALE_002,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x4d48c48c", "Mission title missing: MSImExAddGarageModule"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 2600224046],
        NumImExT2 : [simcity.kDataBinAmount, simcity.kResourceIDNumImExT2],
        NumberOfImExModulesGarage : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfImExModulesGarage],
        guided : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Guided]
      },
      test : function (a) {
        return !a ? !1 : 1 <= a.NumImExT2 && 0 === a.NumberOfImExModulesGarage && 0 === a.guided
      }
    },
    2582840791 : {
      importance : 8,
      triggerTime : [60, 90],
      iconPath : "icn-balloons-trade.png",
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonAcceptDismissTemplate.js",
      unitID : 3411310402,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 3531117479, 946396086]],
      expirationTime : [60, 90],
      missionUnitID : 4181372920,
      vignetteActorPalette : 681369107,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_TRAIN_DRIVER_FEMALE_004,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x9c94d9da", "Mission title missing: MSImExNeedT2ImExLot"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 1272490976],
        HQ_Trade_Built : [simcity.kDataBinAmount, simcity.kResourceIDHQ_Trade_Built],
        NumImExT2 : [simcity.kDataBinAmount, simcity.kResourceIDNumImExT2],
        guided : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Guided]
      },
      test : function (a) {
        return !a ? !1 : 1 <= a.HQ_Trade_Built && 0 === a.NumImExT2 && 0 === a.guided
      }
    },
    2561768396 : {
      importance : 8,
      triggerTime : [60, 120],
      iconPath : "icn-balloons-trade.png",
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiPageAcceptDismiss.js",
      unitID : 1806257718,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 454471206, 2639478588], [simcity.kLocalSpeechBalloonLocaleTable, 454471207]],
      expirationTime : [100, 120],
      missionUnitID : 4009919591,
      vignetteActorPalette : 798812438,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_TRAIN_DRIVER_MALE_002,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0xfcc10c13",
        "Mission title missing: MSImExUnlockTradeHQ"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 919958591],
        HQ_Trade_Unlocked : [simcity.kDataResourceAmount, simcity.kResourceIDHQ_Trade_Unlocked],
        HQBuilt : [simcity.kDataResourceAmount, simcity.kResourceIDHQ_Trade_Built],
        guided : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Guided]
      },
      test : function (a) {
        return !a ? !1 : 0 < a.HQ_Trade_Unlocked && 0 === a.guided && 1 > a.HQBuilt
      }
    },
    1026113616 : {
      importance : 8,
      triggerTime : [50, 100],
      iconPath : "icn-balloons-air-shoppers.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonAcceptDismissTemplate.js",
      speechBalloonTarget : 3403061518,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1212369050, 2731333013]],
      expirationTime : [-1, -1],
      missionUnitID : 4268812968,
      vignetteActorPalette : 112969036,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_03_001,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0xd47e80aa", "Mission title missing: MSCivicZoningCommercial"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount,
          4030449984],
        R : [simcity.kDataResourceAmount, simcity.kResourceIDNumberOfResidential],
        C : [simcity.kDataResourceAmount, simcity.kResourceIDNumberOfCommercial],
        I : [simcity.kDataResourceAmount, simcity.kResourceIDNumberOfIndustrial]
      },
      test : function (a) {
        return !a ? !1 : 0 < a.R && 1 > a.I && 1 > a.C
      }
    },
    2155381360 : {
      importance : 8,
      triggerTime : [50, 100],
      iconPath : "icn-balloons-air-industrial-desirability.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonAcceptDismissTemplate.js",
      speechBalloonTarget : 3403061518,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 176176954, 2731333010]],
      expirationTime : [-1, -1],
      missionUnitID : 3622518440,
      vignetteActorPalette : 112969035,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_04_003,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x35f87caa", "Mission title missing: MSCivicZoningIndustry"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 1897112544],
        R : [simcity.kDataResourceAmount, simcity.kResourceIDNumberOfResidential],
        C : [simcity.kDataResourceAmount,
          simcity.kResourceIDNumberOfCommercial],
        I : [simcity.kDataResourceAmount, simcity.kResourceIDNumberOfIndustrial]
      },
      test : function (a) {
        return !a ? !1 : 0 < a.R && 0 < a.C && 1 > a.I
      }
    },
    1761274668 : {
      importance : 5,
      triggerTime : [60, 120],
      iconPath : "icn-balloons-parks.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonAcceptDismissTemplate.js",
      speechBalloonTarget : 11435360,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2200866310, 2731333015]],
      expirationTime : [60, 120],
      missionUnitID : 1323530179,
      vignetteActorPalette : 112969038,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_01_003,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0xc302b5b7", "Mission title missing: MSResidentialIncreaseW2Housing"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 3705408971],
        people : [simcity.kDataResourceAmount, simcity.kResourceIDTotalResidential],
        residentialHappinessW2 : [simcity.kDataResourceAmount, simcity.kResourceIDHappinessTokenW2]
      },
      test : function (a) {
        return !a ? !1 : 350 < a.people && 50 < a.residentialHappinessW2
      }
    },
    2421050719 : {
      importance : 8,
      triggerTime : [1800, 3600],
      iconPath : "icn-balloons-parks.png",
      displayCountLimit : 3,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiPageAcceptDismiss.js",
      unitID : 763908280,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2330573583, 423327812], [simcity.kLocalSpeechBalloonLocaleTable, 2330573582], [simcity.kLocalSpeechBalloonLocaleTable, 2330573581]],
      expirationTime : [60, 120],
      missionUnitID : 4205805924,
      vignetteActorPalette : 1152278309,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_BUSINESS_PERSON_FEMALE_002,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0xd819422e", "Mission title missing: MSCivicWalkInThePark"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 40394220],
        NumberOfParks : [simcity.kDataResourceAmount, 3919575048],
        people : [simcity.kDataResourceAmount, simcity.kResourceIDTotalResidential],
        residentialHappinessW1 : [simcity.kDataResourceAmount, simcity.kResourceIDHappinessTokenW1]
      },
      test : function (a) {
        return !a ? !1 : 0 < a.NumberOfParks && 1E3 < a.people && 50 > a.residentialHappinessW1
      }
    },
    1172010041 : {
      importance : 8,
      triggerTime : [60, 90],
      iconPath : "icn-balloons-air-population.png",
      displayCountLimit : 3,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiPageAcceptDismiss.js",
      speechBalloonTarget : 442264791,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 3811852097, 267576928], [simcity.kLocalSpeechBalloonLocaleTable, 3811852096], [simcity.kLocalSpeechBalloonLocaleTable, 3811852099]],
      expirationTime : [60, 180],
      missionUnitID : 35305210,
      vignetteActorPalette : 112969038,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_01_003,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x617b5ad8", "Mission title missing: MSGreatWorksArcologyUnlock"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 1878279010],
        open_greatwork_slots : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfGreatWorksAvailable]
      },
      test : function (a) {
        return !a ? !1 : 1 <= a.open_greatwork_slots && 29E3 < simcity.GetFudgedPopulation()
      }
    },
    1617167092 : {
      importance : 8,
      triggerTime : [100, 250],
      iconPath : "icn-balloons-power.png",
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonAcceptDismissTemplate.js",
      speechBalloonTarget : 416754379,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 758560302, 2731333022]],
      expirationTime : [60, 120],
      missionUnitID : 1854695541,
      vignetteActorPalette : 112969031,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_08_003,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x864623fd", "Mission title missing: MSPowerNeedMorePowerForIndustry"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 4179444541],
        powerPlants : [simcity.kDataBinAmount, simcity.kResourceIDPowerGlobals_NumberOfPowerPlants],
        unpoweredbuildings : [simcity.kDataBinAmount, simcity.kResourceIDPowerGlobals_UnpoweredBuildings],
        powerConsumers : [simcity.kDataBinAmount, simcity.kResourceIDPowerGlobals_NumberOfPowerConsumers],
        powerTransmitted : [simcity.kDataBinAmount, simcity.kResourceIDPowerGlobals_TotalPowerTransmittedPerHour]
      },
      test : function (a) {
        return !a ? !1 : 0.2 < a.unpoweredbuildings / a.powerConsumers && 0 < a.powerPlants && 0 < a.powerTransmitted
      }
    },
    3715724280 : {
      importance : 9,
      triggerTime : [60, 120],
      iconPath : "icn-balloons-power.png",
      displayCountLimit : 5,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiPageAcceptDismiss.js",
      speechBalloonTarget : 2801636846,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 36987426, 2904613122], [simcity.kLocalSpeechBalloonLocaleTable, 36987427], [simcity.kLocalSpeechBalloonLocaleTable, 36987424]],
      expirationTime : [-1, -1],
      missionUnitID : 748643151,
      vignetteActorPalette : 411059505,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_FIRE_MALE_001,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0xd7b555cb",
        "Mission title missing: MSPowerNeedPower"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 2101463207],
        TotalPowerPlants : [simcity.kDataBinAmount, simcity.kResourceIDPowerGlobals_NumberOfPowerPlants],
        unpoweredBuildings : [simcity.kDataBinAmount, simcity.kResourceIDPowerGlobals_UnpoweredBuildings],
        powerCon : [simcity.kDataBinAmount, simcity.kResourceIDPowerGlobals_NumberOfPowerConsumers]
      },
      test : function (a) {
        return !a ? !1 : 1 > a.TotalPowerPlants && a.unpoweredBuildings > 0.5 * a.powerCon
      }
    },
    980737901 : {
      importance : 8,
      triggerTime : [30,
        60],
      iconPath : "icn-balloons-power.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonEditor.js",
      unitID : 3666327442,
      unitBin : 2098293146,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 3190995733, 4223761893]],
      expirationTime : [60, 120],
      vignetteActorPalette : 206760215,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_AIR_TRAFFIC_CONTROLLER_MALE_001,
      queries : {
        Unlocked : [simcity.kDataBinAmount, simcity.kResourceIDPower_Nuclear_Unlocked],
        unpoweredBuildings : [simcity.kDataBinAmount,
          simcity.kResourceIDPowerGlobals_UnpoweredBuildings]
      },
      test : function (a) {
        return !a ? !1 : 0 < a.Unlocked && 0 < a.unpoweredBuildings
      }
    },
    3959363363 : {
      importance : 8,
      triggerTime : [30, 60],
      iconPath : "icn-balloons-power.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiPageAcceptDismiss.js",
      speechBalloonTarget : 3403061518,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 3164010643, 2848776336], [simcity.kLocalSpeechBalloonLocaleTable, 3164010642], [simcity.kLocalSpeechBalloonLocaleTable, 3164010641]],
      expirationTime : [60, 120],
      missionUnitID : 2199160345,
      vignetteActorPalette : 263967537,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_Residential_Female_08,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x68c8ccf9", "Mission title missing: MSPowerNuclearNeedsEducation"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 4052592433],
        UhOh : [simcity.kDataResourceAmount, simcity.kResourceIDNuclearReactor_LowSkill]
      },
      test : function (a) {
        return !a ? !1 : 0 < a.UhOh
      }
    },
    1330902610 : {
      importance : 8,
      triggerTime : [240,
        600],
      iconPath : "icn-balloons-power.png",
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiPageAcceptDismiss.js",
      speechBalloonTarget : 3971508389,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 144645548, 479875064], [simcity.kLocalSpeechBalloonLocaleTable, 144645549]],
      expirationTime : [60, 120],
      missionUnitID : 3989085629,
      vignetteActorPalette : 1765993603,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_LIBRARIAN_FEMALE_001,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x38611815",
        "Mission title missing: MSPowerNuclearUnlocked"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 476200661],
        NumberOfPlants : [simcity.kDataBinAmount, simcity.kResourceIDPower_NumberOfNuclearPowerPlants],
        Unlocked : [simcity.kDataBinAmount, simcity.kResourceIDPower_Nuclear_Unlocked],
        industryW3 : [simcity.kDataResourceAmount, simcity.kResourceIDIndustrialW3]
      },
      test : function (a) {
        return !a ? !1 : 1 > a.NumberOfPlants && 0 < a.Unlocked && 50 < a.industryW3
      }
    },
    3408740887 : {
      importance : 5,
      triggerTime : [30, 90],
      iconPath : "icn-balloons-power.png",
      displayCountLimit : 5,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonEditor.js",
      unitID : 2434975821,
      unitBin : 2098293145,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1317365863, 4223761893]],
      expirationTime : [60, 120],
      vignetteActorPalette : 206760215,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_AIR_TRAFFIC_CONTROLLER_MALE_001,
      queries : {
        unpoweredbuildings : [simcity.kDataResourceAmount, simcity.kResourceIDPowerGlobals_UnpoweredBuildings],
        solarpanels : [simcity.kDataBinAmount, simcity.kResourceIDPower_NumberOfSolarUnits],
        Hour : [simcity.kDataResourceAmount, simcity.kResourceIDHour]
      },
      test : function (a) {
        return !a ? !1 : 5 < a.unpoweredbuildings && 1 >= a.solarpanels && 20 > a.Hour
      }
    },
    2066385147 : {
      importance : 9,
      triggerTime : [60, 120],
      iconPath : "icn-balloons-power.png",
      displayCountLimit : 5,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonEditor.js",
      unitID : 3046256953,
      unitBin : 2098293144,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1877195243, 267576930], [simcity.kLocalSpeechBalloonLocaleTable, 1877195242]],
      expirationTime : [60, 120],
      vignetteActorPalette : 112969036,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_03_001,
      queries : {
        unpoweredbuildings : [simcity.kDataResourceAmount, simcity.kResourceIDPowerGlobals_UnpoweredBuildings],
        turbines : [simcity.kDataBinAmount, simcity.kResourceIDPower_NumberOfWindTurbines],
        powerCon : [simcity.kDataBinAmount, simcity.kResourceIDPowerGlobals_NumberOfPowerConsumers]
      },
      test : function (a) {
        return !a ? !1 : 0 < a.turbines && 5 > a.turbines && a.unpoweredbuildings > 0.25 * a.powerCon
      }
    },
    1597327504 : {
      importance : 7,
      triggerTime : [15, 30],
      iconPath : "icn-balloons-power.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiPageAcceptDismiss.js",
      speechBalloonTarget : 3403061518,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2474221402, 2731333008]],
      expirationTime : [60, 9E3],
      missionUnitID : 2954145132,
      vignetteActorPalette : 112969033,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_06_003,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x7d6ed7c6", "Mission title missing: MSPowerBuildWindPowerPlant"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount,
          3356824916],
        residentialShopperW3 : [simcity.kDataResourceAmount, simcity.kResourceIDResidentialShopperW3],
        residentialWorkerW3 : [simcity.kDataResourceAmount, simcity.kResourceIDResidentialWorkerW3],
        powerSupply : [simcity.kDataResourceAmount, simcity.kResourceIDPower],
        windPowerPerHour : [simcity.kDataResourceAmount, simcity.kResourceIDPowerGlobals_TotalWindPowerPerHour],
        GlobalMission_TutorialSpeechBubble : [simcity.kDataResourceAmount, simcity.kResourceIDGlobalMission_TutorialSpeechBubble],
        numberOfWindTurbines : [simcity.kDataResourceAmount,
          simcity.kResourceIDPower_NumberOfWindTurbines]
      },
      test : function (a) {
        return !a ? !1 : 0 === a.numberOfWindTurbines && 30 <= a.residentialShopperW3 + a.residentialWorkerW3 && 0 === a.powerSupply && 0 === a.windPowerPerHour && 0 === a.GlobalMission_TutorialSpeechBubble
      }
    },
    1104813373 : {
      importance : 6,
      triggerTime : [60, 120],
      iconPath : "icn-balloons-sewage.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiPageAcceptDismiss.js",
      speechBalloonTarget : 2801636846,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 3016429989,
          3931230455]],
      expirationTime : [60, 120],
      missionUnitID : 1106649880,
      vignetteActorPalette : 3849227582,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_SANITATION_WORKER_MALE_004,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x78d3b67a", "Mission title missing: MSSewageBuildSewageSystem"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 1125665104],
        SewagePlants : [simcity.kDataBinAmount, simcity.kResourceIDSewagePlants],
        SewageDumped_ThisHour : [simcity.kDataBinAmount, simcity.kResourceIDSewageDumped_ThisHour],
        waterConsumed : [simcity.kDataBinAmount, simcity.kResourceIDWaterGlobals_TotalWaterConsumed]
      },
      test : function (a) {
        return !a ? !1 : 0 < a.waterConsumed && 0 === a.SewagePlants && 200 < a.SewageDumped_ThisHour
      }
    },
    1550191151 : {
      importance : 7,
      triggerTime : [90, 120],
      iconPath : "icn-balloons-trade.png",
      displayCountLimit : 5,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiPageAcceptDismiss.js",
      unitID : 1806257718,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1204729951, 3966731567], [simcity.kLocalSpeechBalloonLocaleTable, 1204729950]],
      expirationTime : [60, 120],
      missionUnitID : 335148946,
      vignetteActorPalette : 1688042546,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_Residential_Male_09,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0xdf0eec60", "Mission title missing: MSTradeIncreaseTotalExports"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 3690002890],
        tradeLotT1 : [simcity.kDataDoesUnitExist, "0x6ba94e36"],
        globalImports : [simcity.kDataBinAmount, simcity.kResourceIDTotalGlobalMarketImports],
        globalExports : [simcity.kDataBinAmount,
          simcity.kResourceIDTotalGlobalMarketExports],
        guided : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Guided]
      },
      test : function (a) {
        return !a ? !1 : a.tradeLotT1 && a.globalImports > a.globalExports + 10 && 10 < a.globalImports && 10 < a.globalExports && 0 === a.guided
      }
    },
    2021152584 : {
      importance : 7,
      triggerTime : [90, 120],
      iconPath : "icn-balloons-trade.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiPageAcceptDismiss.js",
      unitID : 1806257718,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable,
          4134094834, 2992301821], [simcity.kLocalSpeechBalloonLocaleTable, 4134094835]],
      expirationTime : [60, 120],
      missionUnitID : 402782241,
      vignetteActorPalette : 2930569410,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_AIR_TRAFFIC_CONTROLLER_MALE_001,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x2a0b3491", "Mission title missing: MSTradeIncreaseTotalImports"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 4206410185],
        tradeLotT1 : [simcity.kDataDoesUnitExist, "0x6ba94e36"],
        globalImports : [simcity.kDataBinAmount,
          simcity.kResourceIDTotalGlobalMarketImports],
        globalExports : [simcity.kDataBinAmount, simcity.kResourceIDTotalGlobalMarketExports],
        guided : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Guided]
      },
      test : function (a) {
        return !a ? !1 : a.tradeLotT1 && a.globalExports > a.globalImports + 10 && 10 < a.globalImports && 10 < a.globalExports && 0 === a.guided
      }
    },
    680347171 : {
      importance : 5,
      triggerTime : [300, 600],
      iconPath : "icn-balloons-fire.png",
      displayCountLimit : 3,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiPageAcceptOnly.js",
      speechBalloonTarget : 442264791,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 4109223315, 267576928], [simcity.kLocalSpeechBalloonLocaleTable, 4109223314]],
      expirationTime : [60, 120],
      vignetteActorPalette : 112969038,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_01_003,
      queries : {
        fireTokenGranted : [simcity.kDataResourceAmount, simcity.kResourceIDFireServiceTokenGranted]
      },
      test : function (a) {
        return !a ? !1 : 1 <= a.fireTokenGranted
      }
    },
    2949516193 : {
      importance : 8,
      triggerTime : [30, 60],
      iconPath : "icn-balloons-police.png",
      displayCountLimit : 5,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiPageAcceptOnly.js",
      speechBalloonTarget : 442264791,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 720503561, 1445721464], [simcity.kLocalSpeechBalloonLocaleTable, 720503560]],
      expirationTime : [60, 120],
      vignetteActorPalette : 3589679452,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_POLITICIAN_MALE_002,
      queries : {
        policeTokenGranted : [simcity.kDataResourceAmount, simcity.kResourceIDPoliceServiceTokenGranted]
      },
      test : function (a) {
        return !a ?
        !1 : 1 <= a.policeTokenGranted
      }
    },
    3773302580 : {
      importance : 7,
      triggerTime : [30, 60],
      iconPath : "icn-balloons-water.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonAcceptDismissTemplate.js",
      speechBalloonTarget : 416754379,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 3501286638, 2731333015]],
      expirationTime : [60, 120],
      missionUnitID : 746245733,
      vignetteActorPalette : 112969038,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_01_003,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json",
        "0x5698d54d", "Mission title missing: MSWaterNeedMoreWaterForIndustry"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 1855077613],
        people : [simcity.kDataResourceAmount, simcity.kResourceIDTotalResidential],
        unwateredbuildings : [simcity.kDataResourceAmount, simcity.kResourceIDWaterGlobals_UnwateredBuildings]
      },
      test : function (a) {
        return !a ? !1 : 700 < a.people && 10 < a.unwateredbuildings
      }
    },
    1639120192 : {
      importance : 9,
      triggerTime : [60, 120],
      iconPath : "icn-balloons-water.png",
      displayCountLimit : 5,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonAcceptDismissTemplate.js",
      speechBalloonTarget : 11435360,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2296020298, 267576930]],
      expirationTime : [-1, -1],
      missionUnitID : 1948000915,
      vignetteActorPalette : 112969036,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_03_001,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x5acf8627", "Mission title missing: MSWaterNeedWater"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 3422757611],
        unwateredbuildings : [simcity.kDataResourceAmount, simcity.kResourceIDWaterGlobals_UnwateredBuildings],
        waterconsumers : [simcity.kDataResourceAmount, simcity.kResourceIDWaterGlobals_NumberOfWaterConsumers],
        WaterBaseT2 : [simcity.kDataDoesUnitExist, "0x244f51db"],
        WaterTower : [simcity.kDataDoesUnitExist, "0xbbf240b9"]
      },
      test : function (a) {
        return !a ? !1 : a.unwateredbuildings > 0.5 * a.waterconsumers && !a.WaterTower && !a.WaterBaseT2
      }
    },
    1393609696 : {
      importance : 7,
      triggerTime : [30, 30],
      iconPath : "icn-balloons-water.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonAcceptDismissTemplate.js",
      speechBalloonTarget : 3403061518,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2002311018, 824718915]],
      expirationTime : [60, 120],
      missionUnitID : 1929126095,
      vignetteActorPalette : 3373448762,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_LAWYER_MALE_002,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0xc7682e4b", "Mission title missing: MSWaterNeedWaterFilterT2"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 1494676583],
        WaterBaseT2 : [simcity.kDataDoesUnitExist, "0x244f51db"],
        germs : [simcity.kDataResourceAmount,
          simcity.kResourceIDWaterGlobals_TotalGermsTransmittedPerHour],
        germsTotal : [simcity.kDataResourceAmount, simcity.kResourceIDWaterGlobals_TotalGermsPossiblePerHour]
      },
      test : function (a) {
        return !a ? !1 : a.WaterBaseT2 && 0.6 < a.germs / a.germsTotal
      }
    },
    3449441390 : {
      importance : 7,
      triggerTime : [30, 30],
      iconPath : "icn-balloons-water.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonAcceptDismissTemplate.js",
      speechBalloonTarget : 3403061518,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 504962168, 2992301821]],
      expirationTime : [60, 120],
      missionUnitID : 3542729877,
      vignetteActorPalette : 2930569410,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_AIR_TRAFFIC_CONTROLLER_MALE_001,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x2cebc59d", "Mission title missing: MSWaterNeedWaterT2"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 3888293485],
        unwateredbuildings : [simcity.kDataResourceAmount, simcity.kResourceIDWaterGlobals_UnwateredBuildings],
        WaterBaseT2 : [simcity.kDataDoesUnitExist, "0x244f51db"]
      },
      test : function (a) {
        return !a ? !1 : 10 < a.unwateredbuildings && a.WaterBaseT2
      }
    },
    601272057 : {
      importance : 6,
      triggerTime : [60, 90],
      iconPath : "icn-balloons-trade.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness3_AcceptOnlyTemplate.js",
      speechBalloonTarget : 416754379,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1444503169], [simcity.kLocalSpeechBalloonLocaleTable, 1444503168], [simcity.kLocalSpeechBalloonLocaleTable, 1444503171], [simcity.kLocalSpeechBalloonLocaleTable, 1444503170], [simcity.kLocalSpeechBalloonLocaleTable,
          1444503173]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        coalHarvested : [simcity.kDataResourceAmount, simcity.kResourceIDCoalHarvested],
        oreHarvested : [simcity.kDataResourceAmount, simcity.kResourceIDOreHarvested],
        oilPumped : [simcity.kDataResourceAmount, simcity.kResourceIDOilCrudePumped],
        tradeLot : [simcity.kDataBinAmount, simcity.kResourceIDNumImEx],
        tradeLotT2 : [simcity.kDataBinAmount, simcity.kResourceIDNumImExT2]
      },
      test : function (a) {
        return !a ? !1 : 1 > a.tradeLot + a.tradeLotT2 && (200 < a.coalHarvested || 200 < a.oreHarvested ||
          200 < a.oilPumped)
      }
    },
    3652591561 : {
      importance : 8,
      triggerTime : [180, 900],
      iconPath : "icn-balloons-air-money.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness2_AcceptOnlyTemplate.js",
      speechBalloonTarget : 442264791,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 170918993], [simcity.kLocalSpeechBalloonLocaleTable, 170918992], [simcity.kLocalSpeechBalloonLocaleTable, 170918995]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        people : [simcity.kDataResourceAmount, simcity.kResourceIDTotalResidential],
        totalExpense : [simcity.kDataResourceAmount, simcity.kResourceIDExpenses],
        totalIncome : [simcity.kDataResourceAmount, simcity.kResourceIDIncome]
      },
      test : function (a) {
        return !a ? !1 : 100 < a.people && 0 > a.totalIncome - a.totalExpense
      }
    },
    2073733306 : {
      importance : 6,
      triggerTime : [100, 100],
      iconPath : "icn-balloons-air-industrial-desirability.png",
      displayCountLimit : 4,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness2_AcceptOnlyTemplate.js",
      speechBalloonTarget : 1725103876,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable,
          1697352340], [simcity.kLocalSpeechBalloonLocaleTable, 1697352341]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        jobsW1 : [simcity.kDataResourceAmount, simcity.kResourceIDJobsW1],
        residentialWorkerW1 : [simcity.kDataResourceAmount, simcity.kResourceIDResidentialWorkerW1],
        powerSupply : [simcity.kDataResourceAmount, simcity.kResourceIDPower],
        waterSupply : [simcity.kDataResourceAmount, simcity.kResourceIDWater]
      },
      test : function (a) {
        return !a ? !1 : 50 < a.residentialWorkerW1 && a.jobsW1 < 0.8 * a.residentialWorkerW1 && 0 < a.powerSupply &&
        0 < a.waterSupply
      }
    },
    2073733305 : {
      importance : 6,
      triggerTime : [110, 110],
      iconPath : "icn-balloons-air-industrial-desirability.png",
      displayCountLimit : 4,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness2_AcceptOnlyTemplate.js",
      speechBalloonTarget : 1725103879,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 451460289], [simcity.kLocalSpeechBalloonLocaleTable, 451460288]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        jobsW2 : [simcity.kDataResourceAmount, simcity.kResourceIDJobsW2],
        residentialWorkerW2 : [simcity.kDataResourceAmount,
          simcity.kResourceIDResidentialWorkerW2]
      },
      test : function (a) {
        return !a ? !1 : 25 < a.residentialWorkerW2 && a.jobsW2 < 0.8 * a.residentialWorkerW2
      }
    },
    2073733304 : {
      importance : 6,
      triggerTime : [120, 120],
      iconPath : "icn-balloons-air-industrial-desirability.png",
      displayCountLimit : 4,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness2_AcceptOnlyTemplate.js",
      speechBalloonTarget : 1725103878,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2627469410], [simcity.kLocalSpeechBalloonLocaleTable, 2627469411], [simcity.kLocalSpeechBalloonLocaleTable,
          2627469408]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        jobsW3 : [simcity.kDataResourceAmount, simcity.kResourceIDJobsW3],
        residentialWorkerW3 : [simcity.kDataResourceAmount, simcity.kResourceIDResidentialWorkerW3]
      },
      test : function (a) {
        return !a ? !1 : 10 < a.residentialWorkerW3 && a.jobsW3 < 0.8 * a.residentialWorkerW3
      }
    },
    1330754760 : {
      importance : 2,
      triggerTime : [160, 160],
      iconPath : "icn-balloons-air-population.png",
      displayCountLimit : 4,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness4_AcceptOnlyTemplate.js",
      speechBalloonTarget : 3403061518,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 3848929394]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        jobsW1 : [simcity.kDataResourceAmount, simcity.kResourceIDJobsW1],
        residentialShopperW1 : [simcity.kDataResourceAmount, simcity.kResourceIDResidentialShopperW1],
        residentialWorkerW1 : [simcity.kDataResourceAmount, simcity.kResourceIDResidentialWorkerW1],
        GlobalMission_MSCivicCreateTownHall : [simcity.kDataResourceAmount, simcity.kResourceIDGlobalMission_MSCivicCreateTownHall]
      },
      test : function (a) {
        return !a ? !1 : 50 < a.residentialShopperW1 + a.residentialWorkerW1 && a.jobsW1 > 1.2 * (a.residentialShopperW1 + a.residentialWorkerW1) && 1 === a.GlobalMission_MSCivicCreateTownHall
      }
    },
    1330754763 : {
      importance : 2,
      triggerTime : [170, 170],
      iconPath : "icn-balloons-air-population.png",
      displayCountLimit : 2,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness4_AcceptOnlyTemplate.js",
      speechBalloonTarget : 3403061518,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 3975421883]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        jobsW2 : [simcity.kDataResourceAmount, simcity.kResourceIDJobsW2],
        residentialShopperW2 : [simcity.kDataResourceAmount, simcity.kResourceIDResidentialShopperW2],
        residentialWorkerW2 : [simcity.kDataResourceAmount, simcity.kResourceIDResidentialWorkerW2]
      },
      test : function (a) {
        return !a ? !1 : 25 < a.residentialShopperW2 + a.residentialWorkerW2 && a.jobsW2 > 1.2 * (a.residentialShopperW2 + a.residentialWorkerW2)
      }
    },
    1330754762 : {
      importance : 2,
      triggerTime : [180, 180],
      iconPath : "icn-balloons-air-population.png",
      displayCountLimit : 4,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness4_AcceptOnlyTemplate.js",
      speechBalloonTarget : 3403061518,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2918709156]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        jobsW3 : [simcity.kDataResourceAmount, simcity.kResourceIDJobsW3],
        residentialShopperW3 : [simcity.kDataResourceAmount, simcity.kResourceIDResidentialShopperW3],
        residentialWorkerW3 : [simcity.kDataResourceAmount, simcity.kResourceIDResidentialWorkerW3]
      },
      test : function (a) {
        return !a ? !1 :
        10 < a.residentialShopperW3 + a.residentialWorkerW3 && a.jobsW3 > 1.2 * (a.residentialShopperW3 + a.residentialWorkerW3)
      }
    },
    1309222779 : {
      importance : 2,
      triggerTime : [60, 120],
      iconPath : "icn-balloons-happiness.png",
      displayCountLimit : 2,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness4_AcceptOnlyTemplate.js",
      speechBalloonTarget : 3403061518,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 854324587], [simcity.kLocalSpeechBalloonLocaleTable, 854324586]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        Regional_HQ_CityHall_IsOn : [simcity.kDataResourceAmount,
          simcity.kResourceIDRegional_HQ_CityHall_IsOn]
      },
      test : function (a) {
        return !a ? !1 : 0 < a.Regional_HQ_CityHall_IsOn
      }
    },
    3106949694 : {
      importance : 4,
      triggerTime : [130, 130],
      iconPath : "icn-balloons-air-industrial-desirability.png",
      displayCountLimit : 4,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness2_AcceptOnlyTemplate.js",
      speechBalloonTarget : 416754379,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 795925384], [simcity.kLocalSpeechBalloonLocaleTable, 795925385]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        jobsW1 : [simcity.kDataResourceAmount,
          simcity.kResourceIDJobsW1],
        residentialShopperW1 : [simcity.kDataResourceAmount, simcity.kResourceIDResidentialShopperW1],
        residentialWorkerW1 : [simcity.kDataResourceAmount, simcity.kResourceIDResidentialWorkerW1]
      },
      test : function (a) {
        return !a ? !1 : 50 < a.residentialShopperW1 + a.residentialWorkerW1 && a.jobsW1 > 1.2 * (a.residentialShopperW1 + a.residentialWorkerW1)
      }
    },
    3106949693 : {
      importance : 4,
      triggerTime : [140, 140],
      iconPath : "icn-balloons-air-industrial-desirability.png",
      displayCountLimit : 4,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness2_AcceptOnlyTemplate.js",
      speechBalloonTarget : 416754379,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 3689568421], [simcity.kLocalSpeechBalloonLocaleTable, 3689568420]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        jobsW2 : [simcity.kDataResourceAmount, simcity.kResourceIDJobsW2],
        residentialShopperW2 : [simcity.kDataResourceAmount, simcity.kResourceIDResidentialShopperW2],
        residentialWorkerW2 : [simcity.kDataResourceAmount, simcity.kResourceIDResidentialWorkerW2]
      },
      test : function (a) {
        return !a ? !1 : 25 < a.residentialShopperW2 + a.residentialWorkerW2 &&
        a.jobsW2 > 1.2 * (a.residentialShopperW2 + a.residentialWorkerW2)
      }
    },
    3106949692 : {
      importance : 4,
      triggerTime : [150, 150],
      iconPath : "icn-balloons-air-industrial-desirability.png",
      displayCountLimit : 4,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness2_AcceptOnlyTemplate.js",
      speechBalloonTarget : 416754379,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 983711830], [simcity.kLocalSpeechBalloonLocaleTable, 983711831]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        jobsW3 : [simcity.kDataResourceAmount, simcity.kResourceIDJobsW3],
        residentialShopperW3 : [simcity.kDataResourceAmount, simcity.kResourceIDResidentialShopperW3],
        residentialWorkerW3 : [simcity.kDataResourceAmount, simcity.kResourceIDResidentialWorkerW3]
      },
      test : function (a) {
        return !a ? !1 : 10 < a.residentialShopperW3 + a.residentialWorkerW3 && a.jobsW3 > 1.2 * (a.residentialShopperW3 + a.residentialWorkerW3)
      }
    },
    1108060734 : {
      importance : 2,
      triggerTime : [130, 130],
      iconPath : "icn-balloons-trade.png",
      displayCountLimit : 4,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness3_AcceptOnlyTemplate.js",
      speechBalloonTarget : 416754379,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 3861576584], [simcity.kLocalSpeechBalloonLocaleTable, 3861576585], [simcity.kLocalSpeechBalloonLocaleTable, 3861576586]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        connected : [simcity.kDataResourceAmount, simcity.kResourceIDConnected],
        residentialShopperW1 : [simcity.kDataResourceAmount, simcity.kResourceIDResidentialShopperW1],
        residentialWorkerW1 : [simcity.kDataResourceAmount, simcity.kResourceIDResidentialWorkerW1],
        jobsW1 : [simcity.kDataResourceAmount,
          simcity.kResourceIDJobsW1]
      },
      test : function (a) {
        return !a ? !1 : a.connected && 50 < a.residentialShopperW1 + a.residentialWorkerW1 && a.jobsW1 > 1.2 * (a.residentialShopperW1 + a.residentialWorkerW1)
      }
    },
    3795526037 : {
      importance : 3,
      triggerTime : [100, 140],
      iconPath : "icn-balloons-crime.png",
      displayCountLimit : 5,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness2_AcceptOnlyTemplate.js",
      speechBalloonTarget : 11435360,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 3576713373]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        neighborCrimeToday : [simcity.kDataBinAmount,
          simcity.kResourceIDRegionalCrimesCommitted_ThisDay],
        neighborCrimePerDay : [simcity.kDataBinAmount, simcity.kResourceIDRegionalCrimesCommitted_PerDay]
      },
      test : function (a) {
        return !a ? !1 : 2 < a.neighborCrimeToday + a.neighborCrimePerDay
      }
    },
    2717730880 : {
      importance : 3,
      triggerTime : [100, 140],
      iconPath : "icn-balloons-crime.png",
      displayCountLimit : 5,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness2_AcceptOnlyTemplate.js",
      speechBalloonTarget : 3403061518,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 155098698],
        [simcity.kLocalSpeechBalloonLocaleTable, 155098699]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        nearArson : [simcity.kDataResourceAmount, simcity.kResourceIDNearArson]
      },
      test : function (a) {
        return !a ? !1 : 2 < a.nearArson
      }
    },
    3224483809 : {
      importance : 4,
      triggerTime : [40, 60],
      iconPath : "icn-balloons-crime.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness2_AcceptOnlyTemplate.js",
      speechBalloonTarget : 3403061518,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 832617161], [simcity.kLocalSpeechBalloonLocaleTable,
          832617160], [simcity.kLocalSpeechBalloonLocaleTable, 832617163], [simcity.kLocalSpeechBalloonLocaleTable, 832617162]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        Police : [simcity.kDataResourceAmount, simcity.kResourceIDPolice],
        Criminals : [simcity.kDataBinAmount, simcity.kResourceIDCriminalsAtLarge]
      },
      test : function (a) {
        return !a ? !1 : a.Criminals > 2 * a.Police
      }
    },
    2163703639 : {
      importance : 3,
      triggerTime : [100, 140],
      iconPath : "icn-balloons-parks.png",
      displayCountLimit : 5,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness3_AcceptOnlyTemplate.js",
      speechBalloonTarget : 3403061518,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1259577383], [simcity.kLocalSpeechBalloonLocaleTable, 1259577382], [simcity.kLocalSpeechBalloonLocaleTable, 1259577381], [simcity.kLocalSpeechBalloonLocaleTable, 1259577380]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        residentialHappinessW1 : [simcity.kDataResourceAmount, simcity.kResourceIDHappinessTokenW1],
        NumberOfParks : [simcity.kDataResourceAmount, 3919575048],
        people : [simcity.kDataResourceAmount, simcity.kResourceIDTotalResidential]
      },
      test : function (a) {
        return !a ? !1 : 50 > a.residentialHappinessW1 && 0 === a.NumberOfParks && 100 < a.people
      }
    },
    3773553906 : {
      importance : 2,
      triggerTime : [600, 900],
      iconPath : "icn-balloons-crime.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness1_AcceptOnlyTemplate.js",
      unitID : 2821126718,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 3037843532], [simcity.kLocalSpeechBalloonLocaleTable, 3037843533], [simcity.kLocalSpeechBalloonLocaleTable, 3037843534], [simcity.kLocalSpeechBalloonLocaleTable, 3037843535], [simcity.kLocalSpeechBalloonLocaleTable,
          3037843528]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        NumberOfColleges : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfCollegeBases],
        CriminalsAtLarge : [simcity.kDataResourceAmount, simcity.kResourceIDCriminalsAtLarge]
      },
      test : function (a) {
        return !a ? !1 : 0 < a.NumberOfColleges && 10 < a.CriminalsAtLarge
      }
    },
    3051302089 : {
      importance : 3,
      triggerTime : [90, 120],
      iconPath : "icn-balloons-fire.png",
      displayCountLimit : 5,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness1_AcceptOnlyTemplate.js",
      speechBalloonTarget : 3403061518,
      enableWhileBurning : !0,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2601511761], [simcity.kLocalSpeechBalloonLocaleTable, 2601511760]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        NumberOfGradeSchoolBases : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfGradeSchoolBases],
        activeFires1 : [simcity.kDataResourceAmount, simcity.kResourceIDNumberOfFiresExtinguishedPerDay],
        activeFires2 : [simcity.kDataResourceAmount, simcity.kResourceIDNumberOfBuildingsBurnedDownPerDay]
      },
      test : function (a) {
        return !a ? !1 :
        0 < a.NumberOfGradeSchoolBases && 8 < a.activeFires1 + a.activeFires2
      }
    },
    1288632439 : {
      importance : 5,
      triggerTime : [100, 300],
      iconPath : "icn-balloons-school.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness1_AcceptOnlyTemplate.js",
      speechBalloonTarget : 3403061518,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2617689671], [simcity.kLocalSpeechBalloonLocaleTable, 2617689670], [simcity.kLocalSpeechBalloonLocaleTable, 2617689669]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        NumberOfGradeSchoolBases : [simcity.kDataBinAmount,
          simcity.kResourceIDNumberOfGradeSchoolBases],
        people : [simcity.kDataResourceAmount, simcity.kResourceIDTotalResidential],
        Kid : [simcity.kDataBinAmount, simcity.kResourceIDTotalKids],
        Crimes : [simcity.kDataResourceAmount, simcity.kResourceIDCrimesCommitted_PerDay]
      },
      test : function (a) {
        return !a ? !1 : 0 === a.NumberOfGradeSchoolBases && 1E3 < a.people && 500 < a.Kid && 10 < a.Crimes
      }
    },
    2600733633 : {
      importance : 3,
      triggerTime : [200, 500],
      iconPath : "icn-balloons-school.png",
      displayCountLimit : 5,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness2_AcceptOnlyTemplate.js",
      speechBalloonTarget : 3971508389,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2841153961], [simcity.kLocalSpeechBalloonLocaleTable, 2841153960], [simcity.kLocalSpeechBalloonLocaleTable, 2841153963]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        NumberOfGradeSchoolBases : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfGradeSchoolBases],
        people : [simcity.kDataResourceAmount, simcity.kResourceIDTotalResidential]
      },
      test : function (a) {
        return !a ? !1 : 0 === a.NumberOfGradeSchoolBases && 2E3 < a.people
      }
    },
    1780777812 : {
      importance : 3,
      triggerTime : [180, 300],
      iconPath : "icn-balloons-school.png",
      displayCountLimit : 2,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness4_AcceptOnlyTemplate.js",
      speechBalloonTarget : 3971508389,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2008516878]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        studentsE3 : [simcity.kDataBinAmount, simcity.kResourceIDStudentE3]
      },
      test : function (a) {
        return !a ? !1 : 500 <= a.studentsE3
      }
    },
    3177386252 : {
      importance : 6,
      triggerTime : [45, 60],
      iconPath : "icn-balloons-fire.png",
      displayCountLimit : 10,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness5_AcceptOnlyTemplate.js",
      speechBalloonTarget : 3403061518,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 125582566], [simcity.kLocalSpeechBalloonLocaleTable, 125582567], [simcity.kLocalSpeechBalloonLocaleTable, 125582564], [simcity.kLocalSpeechBalloonLocaleTable, 125582565]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        fireStationT1 : [simcity.kDataResourceAmount, simcity.kResourceIDNumberOfT1FireStations]
      },
      test : function (a) {
        return !a ? !1 : 0 < a.fireStationT1
      }
    },
    4057202035 : {
      importance : 10,
      triggerTime : [60, 120],
      iconPath : "icn-balloons-fire.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness1_AcceptOnlyTemplate.js",
      speechBalloonTarget : 11435360,
      enableInDisaster : !0,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 611931875], [simcity.kLocalSpeechBalloonLocaleTable, 611931874], [simcity.kLocalSpeechBalloonLocaleTable, 611931873], [simcity.kLocalSpeechBalloonLocaleTable, 611931872], [simcity.kLocalSpeechBalloonLocaleTable, 611931879]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        activeFires : [simcity.kDataResourceAmount, simcity.kResourceIDNumberOfFires]
      },
      test : function (a) {
        return !a ? !1 : 3 < a.activeFires
      }
    },
    4072295171 : {
      importance : 2,
      triggerTime : [90, 120],
      iconPath : "icn-balloons-garbage.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness1_AcceptOnlyTemplate.js",
      speechBalloonTarget : 11435360,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1515652723]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        garbageCans : [simcity.kDataResourceAmount,
          simcity.kResourceIDGarbageDisplay],
        activeFires : [simcity.kDataResourceAmount, simcity.kResourceIDNumberOfFires]
      },
      test : function (a) {
        return !a ? !1 : 60 < a.garbageCans && 2 < a.activeFires
      }
    },
    2041588913 : {
      importance : 2,
      triggerTime : [90, 120],
      iconPath : "icn-balloons-garbage.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness2_AcceptOnlyTemplate.js",
      speechBalloonTarget : 3971508388,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2957924889], [simcity.kLocalSpeechBalloonLocaleTable, 2957924888]],
      expirationTime : [60,
        90],
      isThoughtBubble : !0,
      queries : {
        garbageCans : [simcity.kDataResourceAmount, simcity.kResourceIDGarbageDisplay],
        totalInjury : [simcity.kDataResourceAmount, simcity.kResourceIDInjury]
      },
      test : function (a) {
        return !a ? !1 : 60 < a.garbageCans && 5 < a.totalInjury
      }
    },
    2456982345 : {
      importance : 2,
      triggerTime : [90, 120],
      iconPath : "icn-balloons-garbage.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness1_AcceptOnlyTemplate.js",
      speechBalloonTarget : 2343535945,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1581547217]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        garbageCans : [simcity.kDataResourceAmount, simcity.kResourceIDGarbageDisplay],
        ProtestGarbage : [simcity.kDataResourceAmount, simcity.kResourceIDSadnessFromGarbage]
      },
      test : function (a) {
        return !a ? !1 : 60 < a.garbageCans && a.ProtestGarbage
      }
    },
    4213188963 : {
      importance : 2,
      triggerTime : [90, 120],
      iconPath : "icn-balloons-garbage.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness2_AcceptOnlyTemplate.js",
      speechBalloonTarget : 1725103879,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable,
          3420587603], [simcity.kLocalSpeechBalloonLocaleTable, 3420587602]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        garbageCans : [simcity.kDataResourceAmount, simcity.kResourceIDGarbageDisplay],
        totalSick : [simcity.kDataResourceAmount, simcity.kResourceIDSick]
      },
      test : function (a) {
        return !a ? !1 : 60 < a.garbageCans && 5 < a.totalSick
      }
    },
    2562286151 : {
      importance : 8,
      triggerTime : [45, 60],
      iconPath : "icn-balloons-garbage.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness1_AcceptOnlyTemplate.js",
      speechBalloonTarget : 1145013416,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 302886423], [simcity.kLocalSpeechBalloonLocaleTable, 302886422], [simcity.kLocalSpeechBalloonLocaleTable, 302886421]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        GarbagePollutionToday : [simcity.kDataResourceAmount, simcity.kResourceIDGarbagePollutionToday],
        garbageCans : [simcity.kDataResourceAmount, simcity.kResourceIDGarbageDisplay]
      },
      test : function (a) {
        return !a ? !1 : 10 < a.GarbagePollutionToday && 40 < a.garbageCans
      }
    },
    128445057 : {
      importance : 2,
      triggerTime : [60,
        120],
      iconPath : "icn-balloons-power.png",
      displayCountLimit : 4,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness5_AcceptOnlyTemplate.js",
      speechBalloonTarget : 3403061518,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 3451647465], [simcity.kLocalSpeechBalloonLocaleTable, 3451647464], [simcity.kLocalSpeechBalloonLocaleTable, 3451647467], [simcity.kLocalSpeechBalloonLocaleTable, 3451647466]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        people : [simcity.kDataResourceAmount, simcity.kResourceIDTotalResidential],
        NumberOfWindTurbines : [simcity.kDataResourceAmount, simcity.kResourceIDPower_NumberOfWindTurbines],
        NumberOfT1CoalPowerPlants : [simcity.kDataResourceAmount, simcity.kResourceIDPower_NumberOfT1CoalPowerPlants],
        unpoweredbuildings : [simcity.kDataResourceAmount, simcity.kResourceIDPowerGlobals_UnpoweredBuildings]
      },
      test : function (a) {
        return !a ? !1 : 0 < a.people && 4 <= a.NumberOfWindTurbines && 0 === a.NumberOfT1CoalPowerPlants && 5 > a.unpoweredbuildings
      }
    },
    1733533008 : {
      importance : 2,
      triggerTime : [60, 120],
      iconPath : "icn-balloons-power.png",
      displayCountLimit : 4,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness3_AcceptOnlyTemplate.js",
      speechBalloonTarget : 11435360,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 3511885722], [simcity.kLocalSpeechBalloonLocaleTable, 3511885723], [simcity.kLocalSpeechBalloonLocaleTable, 3511885720]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        people : [simcity.kDataResourceAmount, simcity.kResourceIDTotalResidential],
        NumberOfWindTurbines : [simcity.kDataResourceAmount, simcity.kResourceIDPower_NumberOfWindTurbines],
        NumberOfT1CoalPowerPlants : [simcity.kDataResourceAmount, simcity.kResourceIDPower_NumberOfT1CoalPowerPlants]
      },
      test : function (a) {
        return !a ? !1 : 0 < a.people && 0 < a.NumberOfWindTurbines && 0 < a.NumberOfT1CoalPowerPlants
      }
    },
    3381944214 : {
      importance : 5,
      triggerTime : [100, 140],
      iconPath : "icn-balloons-power.png",
      displayCountLimit : 5,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness3_AcceptOnlyTemplate.js",
      speechBalloonTarget : 2801636846,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 331327520], [simcity.kLocalSpeechBalloonLocaleTable,
          331327521]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        NumLowSkill : [simcity.kDataResourceAmount, simcity.kResourceIDNuclearReactor_LowSkill]
      },
      test : function (a) {
        return !a ? !1 : 0 < a.NumLowSkill
      }
    },
    2886265729 : {
      importance : 2,
      triggerTime : [60, 120],
      iconPath : "icn-balloons-power.png",
      displayCountLimit : 4,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness5_AcceptOnlyTemplate.js",
      speechBalloonTarget : 416754379,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2447816937], [simcity.kLocalSpeechBalloonLocaleTable,
          2447816936], [simcity.kLocalSpeechBalloonLocaleTable, 2447816939]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        wastedPower : [simcity.kDataBinAmount, simcity.kResourceIDPowerGlobals_TotalPowerWastedPerHour],
        transmittedPower : [simcity.kDataBinAmount, simcity.kResourceIDPowerGlobals_TotalPowerTransmittedPerHour],
        people : [simcity.kDataResourceAmount, simcity.kResourceIDTotalResidential],
        unpoweredbuildings : [simcity.kDataResourceAmount, simcity.kResourceIDPowerGlobals_UnpoweredBuildings]
      },
      test : function (a) {
        return !a ?
        !1 : 0 < a.people && a.wastedPower >= 0.5 * a.transmittedPower && 3 > a.unpoweredbuildings
      }
    },
    3278894307 : {
      importance : 2,
      triggerTime : [60, 120],
      iconPath : "icn-balloons-power.png",
      displayCountLimit : 3,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness5_AcceptOnlyTemplate.js",
      speechBalloonTarget : 416754379,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1117423827], [simcity.kLocalSpeechBalloonLocaleTable, 1117423826], [simcity.kLocalSpeechBalloonLocaleTable, 1117423825]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        NumberOfT1CoalPowerPlants : [simcity.kDataResourceAmount, simcity.kResourceIDPower_NumberOfT1CoalPowerPlants],
        unpoweredbuildings : [simcity.kDataResourceAmount, simcity.kResourceIDPowerGlobals_UnpoweredBuildings]
      },
      test : function (a) {
        return !a ? !1 : 0 < a.NumberOfT1CoalPowerPlants && 0 === a.unpoweredbuildings
      }
    },
    1574184388 : {
      importance : 2,
      triggerTime : [20, 40],
      iconPath : "icn-balloons-power.png",
      displayCountLimit : 10,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness4_AcceptOnlyTemplate.js",
      speechBalloonTarget : 3403061518,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2707982590], [simcity.kLocalSpeechBalloonLocaleTable, 2707982591], [simcity.kLocalSpeechBalloonLocaleTable, 2707982588], [simcity.kLocalSpeechBalloonLocaleTable, 2707982589], [simcity.kLocalSpeechBalloonLocaleTable, 2707982586]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        NumberOfPlants : [simcity.kDataResourceAmount, simcity.kResourceIDPower_NumberOfNuclearPowerPlants]
      },
      test : function (a) {
        return !a ? !1 : 0 < a.NumberOfPlants
      }
    },
    3120639254 : {
      importance : 2,
      triggerTime : [60,
        120],
      iconPath : "icn-balloons-power.png",
      displayCountLimit : 4,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness5_AcceptOnlyTemplate.js",
      speechBalloonTarget : 11435360,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1914613920], [simcity.kLocalSpeechBalloonLocaleTable, 1914613921], [simcity.kLocalSpeechBalloonLocaleTable, 1914613922], [simcity.kLocalSpeechBalloonLocaleTable, 1914613923]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        people : [simcity.kDataResourceAmount, simcity.kResourceIDTotalResidential],
        NumberOfT1OilPowerPlants : [simcity.kDataResourceAmount, simcity.kResourceIDPower_NumberOfT1OilPowerPlants]
      },
      test : function (a) {
        return !a ? !1 : 0 < a.people && 0 < a.NumberOfT1OilPowerPlants
      }
    },
    3275687401 : {
      importance : 3,
      triggerTime : [20, 40120],
      iconPath : "icn-balloons-power.png",
      displayCountLimit : 4,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness5_AcceptOnlyTemplate.js",
      speechBalloonTarget : 3403061518,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1616384241], [simcity.kLocalSpeechBalloonLocaleTable, 1616384240],
        [simcity.kLocalSpeechBalloonLocaleTable, 1616384243], [simcity.kLocalSpeechBalloonLocaleTable, 1616384242]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        people : [simcity.kDataResourceAmount, simcity.kResourceIDTotalResidential],
        NumberOfSolarPlants : [simcity.kDataResourceAmount, simcity.kResourceIDPower_NumberOfSolarUnits]
      },
      test : function (a) {
        return !a ? !1 : 0 < a.people && 0 < a.NumberOfSolarPlants
      }
    },
    2699992446 : {
      importance : 3,
      triggerTime : [20, 40],
      iconPath : "icn-balloons-power.png",
      displayCountLimit : 4,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness5_AcceptOnlyTemplate.js",
      speechBalloonTarget : 3403061518,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 691872840], [simcity.kLocalSpeechBalloonLocaleTable, 691872841], [simcity.kLocalSpeechBalloonLocaleTable, 691872842], [simcity.kLocalSpeechBalloonLocaleTable, 691872843]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        people : [simcity.kDataResourceAmount, simcity.kResourceIDTotalResidential],
        NumberOfWindTurbines : [simcity.kDataResourceAmount, simcity.kResourceIDPower_NumberOfWindTurbines]
      },
      test : function (a) {
        return !a ? !1 : 0 < a.people &&
        1 < a.NumberOfWindTurbines
      }
    },
    626863114 : {
      importance : 4,
      triggerTime : [60, 120],
      iconPath : "icn-balloons-power.png",
      displayCountLimit : 10,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness3_AcceptOnlyTemplate.js",
      speechBalloonTarget : 3403061518,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 969101412], [simcity.kLocalSpeechBalloonLocaleTable, 969101413], [simcity.kLocalSpeechBalloonLocaleTable, 969101414]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        powerToSend : [simcity.kDataResourceAmount, simcity.kResourceIDPowerToSend],
        people : [simcity.kDataResourceAmount, simcity.kResourceIDTotalResidential],
        unpoweredbuildings : [simcity.kDataResourceAmount, simcity.kResourceIDPowerGlobals_UnpoweredBuildings]
      },
      test : function (a) {
        return !a ? !1 : 1 > a.powerToSend && 1E3 < a.people && 5 < a.unpoweredbuildings
      }
    },
    3308461894 : {
      importance : 5,
      triggerTime : [60, 120],
      iconPath : "icn-balloons-power.png",
      displayCountLimit : 4,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness2_AcceptOnlyTemplate.js",
      speechBalloonTarget : 2801636846,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable,
          891134736], [simcity.kLocalSpeechBalloonLocaleTable, 891134737], [simcity.kLocalSpeechBalloonLocaleTable, 891134738], [simcity.kLocalSpeechBalloonLocaleTable, 891134739]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        people : [simcity.kDataResourceAmount, simcity.kResourceIDTotalResidential],
        powerSupply : [simcity.kDataResourceAmount, simcity.kResourceIDPower],
        unpoweredbuildings : [simcity.kDataResourceAmount, simcity.kResourceIDPowerGlobals_UnpoweredBuildings],
        powercustomers : [simcity.kDataResourceAmount, simcity.kResourceIDPowerGlobals_NumberOfPowerConsumers]
      },
      test : function (a) {
        return !a ? !1 : 0 < a.people && 0 < a.powerSupply && 0.8 < a.unpoweredbuildings / a.powercustomers
      }
    },
    4212446599 : {
      importance : 2,
      triggerTime : [15, 120],
      iconPath : "icn-balloons-air-industrial-desirability.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness3_AcceptOnlyTemplate.js",
      speechBalloonTarget : 416754379,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 762386647], [simcity.kLocalSpeechBalloonLocaleTable, 762386646], [simcity.kLocalSpeechBalloonLocaleTable, 762386645], [simcity.kLocalSpeechBalloonLocaleTable,
          762386644], [simcity.kLocalSpeechBalloonLocaleTable, 762386643]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {}

    },
    4212446596 : {
      importance : 2,
      triggerTime : [15, 120],
      iconPath : "icn-balloons-air-residential-desirability.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness4_AcceptOnlyTemplate.js",
      speechBalloonTarget : 3403061518,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2020702270], [simcity.kLocalSpeechBalloonLocaleTable, 2020702271], [simcity.kLocalSpeechBalloonLocaleTable, 2020702268],
        [simcity.kLocalSpeechBalloonLocaleTable, 2020702269], [simcity.kLocalSpeechBalloonLocaleTable, 2020702266], [simcity.kLocalSpeechBalloonLocaleTable, 2020702267]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {}

    },
    4212446597 : {
      importance : 2,
      triggerTime : [15, 120],
      iconPath : "icn-balloons-commerical-desirability.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness4_AcceptOnlyTemplate.js",
      speechBalloonTarget : 11435360,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 226583181], [simcity.kLocalSpeechBalloonLocaleTable,
          226583180], [simcity.kLocalSpeechBalloonLocaleTable, 226583183], [simcity.kLocalSpeechBalloonLocaleTable, 226583182], [simcity.kLocalSpeechBalloonLocaleTable, 226583177]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {}

    },
    4212446594 : {
      importance : 2,
      triggerTime : [15, 120],
      iconPath : "icn-balloons-air-population.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness4_AcceptOnlyTemplate.js",
      speechBalloonTarget : 1016473780,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1520986396], [simcity.kLocalSpeechBalloonLocaleTable,
          1520986397], [simcity.kLocalSpeechBalloonLocaleTable, 1520986398], [simcity.kLocalSpeechBalloonLocaleTable, 1520986399], [simcity.kLocalSpeechBalloonLocaleTable, 1520986392]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {}

    },
    152323540 : {
      importance : 3,
      triggerTime : [100, 140],
      iconPath : "icn-balloons-sewage.png",
      displayCountLimit : 3,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness4_AcceptOnlyTemplate.js",
      speechBalloonTarget : 3403061518,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 3905564814],
        [simcity.kLocalSpeechBalloonLocaleTable, 3905564815], [simcity.kLocalSpeechBalloonLocaleTable, 3905564812]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        SewageProcessed : [simcity.kDataBinAmount, simcity.kResourceIDSewageProcessed_ThisHour],
        SewageFull : [simcity.kDataResourceAmount, simcity.kResourceIDSewageMainStorage_Full],
        SewagePlants_T1 : [simcity.kDataBinAmount, simcity.kResourceIDSewagePlants_T1],
        SewagePlants_T2 : [simcity.kDataBinAmount, simcity.kResourceIDSewagePlants_T2]
      },
      test : function (a) {
        return !a ?
        !1 : 0 < a.SewageProcessed && a.SewageFull < a.SewagePlants_T1 + a.SewagePlants_T2
      }
    },
    917114456 : {
      importance : 5,
      triggerTime : [100, 140],
      iconPath : "icn-balloons-sewage.png",
      displayCountLimit : 5,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness2_AcceptOnlyTemplate.js",
      speechBalloonTarget : 1145013416,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 143528962], [simcity.kLocalSpeechBalloonLocaleTable, 143528963]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        SewageProcessed : [simcity.kDataBinAmount, simcity.kResourceIDSewageProcessed_ThisHour],
        SewageFull : [simcity.kDataResourceAmount, simcity.kResourceIDSewageMainStorage_Full],
        SewagePlants_T1 : [simcity.kDataBinAmount, simcity.kResourceIDSewagePlants_T1],
        SewagePlants_T2 : [simcity.kDataBinAmount, simcity.kResourceIDSewagePlants_T2]
      },
      test : function (a) {
        return !a ? !1 : 0 < a.SewageProcessed && a.SewageFull >= a.SewagePlants_T1 + a.SewagePlants_T2
      }
    },
    3970973892 : {
      importance : 5,
      triggerTime : [60, 120],
      iconPath : "icn-balloons-water.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness2_AcceptOnlyTemplate.js",
      speechBalloonTarget : 3403061518,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 462297598], [simcity.kLocalSpeechBalloonLocaleTable, 462297599], [simcity.kLocalSpeechBalloonLocaleTable, 462297596]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        germs : [simcity.kDataResourceAmount, simcity.kResourceIDWaterGlobals_TotalGermsTransmittedPerHour],
        germsTotal : [simcity.kDataResourceAmount, simcity.kResourceIDWaterGlobals_TotalGermsPossiblePerHour]
      },
      test : function (a) {
        return !a ? !1 : 0.3 < a.germs / a.germsTotal
      }
    },
    3612925824 : {
      importance : 5,
      triggerTime : [60, 120],
      iconPath : "icn-balloons-water.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness1_AcceptOnlyTemplate.js",
      speechBalloonTarget : 3403061518,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1248537866], [simcity.kLocalSpeechBalloonLocaleTable, 1248537867], [simcity.kLocalSpeechBalloonLocaleTable, 1248537864]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        germs : [simcity.kDataResourceAmount, simcity.kResourceIDWaterGlobals_TotalGermsTransmittedPerHour],
        germsTotal : [simcity.kDataResourceAmount,
          simcity.kResourceIDWaterGlobals_TotalGermsPossiblePerHour]
      },
      test : function (a) {
        return !a ? !1 : 0.5 < a.germs / a.germsTotal
      }
    },
    2043007419 : {
      importance : 3,
      triggerTime : [1200, 1600],
      iconPath : "icn-balloons-water.png",
      displayCountLimit : 5,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness5_AcceptOnlyTemplate.js",
      speechBalloonTarget : 3403061518,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1583232043], [simcity.kLocalSpeechBalloonLocaleTable, 1583232042], [simcity.kLocalSpeechBalloonLocaleTable, 1583232041]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        waterSupply : [simcity.kDataResourceAmount, simcity.kResourceIDWater],
        pollutedwater : [simcity.kDataResourceAmount, simcity.kResourceIDGerms]
      },
      test : function (a) {
        return !a ? !1 : 0 < a.waterSupply && 5 > a.pollutedwater
      }
    },
    3170285480 : {
      importance : 4,
      triggerTime : [30, 60],
      iconPath : "icn-balloons-water.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness4_AcceptOnlyTemplate.js",
      speechBalloonTarget : 3403061518,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 3408274386],
        [simcity.kLocalSpeechBalloonLocaleTable, 3408274387]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        unwateredbuildings : [simcity.kDataResourceAmount, simcity.kResourceIDWaterGlobals_UnwateredBuildings],
        waterSupply : [simcity.kDataResourceAmount, simcity.kResourceIDWater]
      },
      test : function (a) {
        return !a ? !1 : 0 === a.unwateredbuildings && 1 < a.waterSupply
      }
    },
    3716713775 : {
      importance : 4,
      triggerTime : [60, 120],
      iconPath : "icn-balloons-water.png",
      displayCountLimit : 4,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness3_AcceptOnlyTemplate.js",
      speechBalloonTarget : 2801636846,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2892857695], [simcity.kLocalSpeechBalloonLocaleTable, 2892857694]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        unwateredbuildings : [simcity.kDataResourceAmount, simcity.kResourceIDWaterGlobals_UnwateredBuildings],
        WaterBaseT2 : [simcity.kDataDoesUnitExist, "0x244f51db"]
      },
      test : function (a) {
        return !a ? !1 : 5 < a.unwateredbuildings && 0 < a.WaterBaseT2
      }
    },
    2750086638 : {
      importance : 4,
      triggerTime : [60, 120],
      iconPath : "icn-balloons-water.png",
      displayCountLimit : 4,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness2_AcceptOnlyTemplate.js",
      speechBalloonTarget : 3403061518,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2303381752], [simcity.kLocalSpeechBalloonLocaleTable, 2303381753]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        WaterBaseT2 : [simcity.kDataDoesUnitExist, "0x244f51db"],
        germs : [simcity.kDataResourceAmount, simcity.kResourceIDWaterGlobals_TotalGermsTransmittedPerHour],
        germsTotal : [simcity.kDataResourceAmount, simcity.kResourceIDWaterGlobals_TotalGermsPossiblePerHour]
      },
      test : function (a) {
        return !a ? !1 : a.WaterBaseT2 && 0.6 < a.germs / a.germsTotal
      }
    },
    741817892 : {
      importance : 4,
      triggerTime : [60, 120],
      iconPath : "icn-balloons-water.png",
      displayCountLimit : 4,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness4_AcceptOnlyTemplate.js",
      speechBalloonTarget : 11435360,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 4133850334], [simcity.kLocalSpeechBalloonLocaleTable, 4133850335]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        people : [simcity.kDataResourceAmount, simcity.kResourceIDTotalResidential],
        unwateredbuildings : [simcity.kDataResourceAmount, simcity.kResourceIDWaterGlobals_UnwateredBuildings]
      },
      test : function (a) {
        return !a ? !1 : 1100 < a.people && 20 < a.unwateredbuildings
      }
    }
  }
};
simcity.SpeechBalloonPolling.OilT1BaseUnlocked = {
  unlockBin : simcity.kResourceIDOilT1BaseUnlocked,
  unlockEvent : simcity.kEventIDUnlock_OilT1BaseUnlocked,
  DataBindings : {
    2844820076 : {
      importance : 6,
      triggerTime : [90, 600],
      iconPath : "icn-balloons-oil.png",
      displayCountLimit : 5,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonEditor.js",
      speechBalloonTarget : 1953260309,
      unitBin : 928475780,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1737142214, 267576928]],
      expirationTime : [100, 120],
      vignetteActorPalette : 112969038,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_01_003,
      queries : {
        NumOilHQ : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfOilManufacturingBases],
        OilCrudePumpedPerDay : [simcity.kDataResourceAmount, simcity.kResourceIDOilCrudePumpedDisplay],
        guided : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Guided]
      },
      test : function (a) {
        return !a ? !1 : 55E3 < a.OilCrudePumpedPerDay && 1 > a.NumOilHQ && 0 === a.guided
      }
    },
    1748157720 : {
      importance : 8,
      triggerTime : [120, 600],
      iconPath : "icn-balloons-oil.png",
      displayCountLimit : 2,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonEditor.js",
      unitID : 359333168,
      unitBin : 2098293146,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1142362178, 267576928]],
      expirationTime : [120, 180],
      vignetteActorPalette : 112969038,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_01_003,
      queries : {
        oilBase : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfOilWells],
        OilCrudePumpedPerDay : [simcity.kDataResourceAmount, simcity.kResourceIDOilCrudePumpedDisplay],
        guided : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Guided]
      },
      test : function (a) {
        return !a ?
        !1 : 24E3 > a.OilCrudePumpedPerDay && 0 < a.oilBase && 0 === a.guided
      }
    },
    523790084 : {
      importance : 8,
      triggerTime : [130, 600],
      iconPath : "icn-balloons-oilrefine.png",
      displayCountLimit : 6,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonEditor.js",
      unitID : 2769275175,
      unitBin : 2098293146,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 3345206462, 2731333015]],
      expirationTime : [100, 120],
      vignetteActorPalette : 112969038,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_01_003,
      queries : {
        NumOilRefinery : [simcity.kDataBinAmount,
          simcity.kResourceIDNumberOfOilManufacturingBases],
        fuelConsumers : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfFuelConsumers],
        fuelAssemblers : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfFuelAssemblers],
        guided : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Guided]
      },
      test : function (a) {
        return !a ? !1 : 0 < a.NumOilRefinery && a.fuelAssemblers < a.fuelConsumers && 0 === a.guided
      }
    },
    2334548704 : {
      importance : 8,
      triggerTime : [130, 600],
      iconPath : "icn-balloons-oilrefine.png",
      displayCountLimit : 6,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonEditor.js",
      unitID : 2769275175,
      unitBin : 2098293145,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2913721450, 2731333015]],
      expirationTime : [100, 120],
      vignetteActorPalette : 112969038,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_01_003,
      queries : {
        NumOilRefinery : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfOilManufacturingBases],
        plasticConsumers : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfPlasticConsumers],
        plasticAssemblers : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfPlasticAssemblers],
        guided : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Guided]
      },
      test : function (a) {
        return !a ? !1 : 0 < a.NumOilRefinery && a.plasticAssemblers < a.plasticConsumers && 0 === a.guided
      }
    },
    2947831709 : {
      importance : 8,
      triggerTime : [60, 120],
      iconPath : "icn-balloons-oil.png",
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiPageAcceptDismiss.js",
      unitID : 359333168,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2637028741, 1290223984], [simcity.kLocalSpeechBalloonLocaleTable, 2637028740]],
      expirationTime : [100, 120],
      missionUnitID : 715163088,
      vignetteActorPalette : 3941900653,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_MINE_FOREMAN_MALE_004,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0xf46118a2", "Mission title missing: MSOilBuildHQ"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 2862277496],
        NumOilHQ : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfOilHQs],
        OilCrudePumpedPerDay : [simcity.kDataResourceAmount, simcity.kResourceIDOilCrudePumpedDisplay],
        guided : [simcity.kDataResourceAmount,
          simcity.kResourceIDSpecialization_Guided]
      },
      test : function (a) {
        return !a ? !1 : 5E4 <= a.OilCrudePumpedPerDay && 1 > a.NumOilHQ && 0 === a.guided
      }
    },
    2279487492 : {
      importance : 8,
      triggerTime : [60, 600],
      iconPath : "icn-balloons-oil.png",
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiPageAcceptDismiss.js",
      speechBalloonTarget : 416754379,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 3517513662, 1070871097]],
      expirationTime : [120, 180],
      missionUnitID : 3291961973,
      vignetteActorPalette : 1839041055,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_AIR_TRAFFIC_CONTROLLER_FEMALE_001,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x0e9a79fd", "Mission title missing: MSOilDrillingSubsidy"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 2555254717],
        oilBase : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfOilWells],
        oil : [simcity.kDataMaps, simcity.kMapIDOilReservoir, simcity.kDataSum],
        people : [simcity.kDataBinAmount, simcity.kResourceIDTotalResidential],
        totalJobs : [simcity.kDataResourceAmount, simcity.kResourceIDTotalJobs],
        guided : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Guided]
      },
      test : function (a) {
        return !a ? !1 : 1E3 < a.oil && 1 > a.oilBase && 1E3 < a.people && 500 > a.totalJobs && 0 === a.guided
      }
    },
    543834556 : {
      importance : 5,
      triggerTime : [100, 600],
      iconPath : "icn-balloons-oilrefine.png",
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiPageAcceptDismiss.js",
      unitID : 359333168,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1676560086, 267576931], [simcity.kLocalSpeechBalloonLocaleTable, 1676560087]],
      expirationTime : [100, 120],
      missionUnitID : 3297960088,
      vignetteActorPalette : 112969037,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_02_001,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x0d468efa", "Mission title missing: MSOilPlasticSubsidy"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 1973902304],
        NumOilRefinery : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfOilManufacturingBases],
        OilCrudePumpedPerDay : [simcity.kDataResourceAmount, simcity.kResourceIDOilCrudePumpedDisplay],
        guided : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Guided]
      },
      test : function (a) {
        return !a ? !1 : 6E4 < a.OilCrudePumpedPerDay && 1 >
        a.NumOilRefinery && 0 === a.guided
      }
    },
    859602073 : {
      importance : 5,
      triggerTime : [100, 130],
      iconPath : "icn-balloons-oil.png",
      displayCountLimit : 4,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness4_AcceptOnlyTemplate.js",
      speechBalloonTarget : 416754379,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 3043489185], [simcity.kLocalSpeechBalloonLocaleTable, 3043489184], [simcity.kLocalSpeechBalloonLocaleTable, 3043489187]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        oilWell : [simcity.kDataResourceAmount, simcity.kResourceIDNumberOfOilWells],
        oilInMap : [simcity.kDataMaps, simcity.kMapIDOilReservoir, simcity.kDataSum],
        people : [simcity.kDataBinAmount, simcity.kResourceIDTotalResidential],
        guided : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Guided]
      },
      test : function (a) {
        return !a ? !1 : 1 > a.oilWell && 5E5 < a.oilInMap && 600 < a.people && 0 === a.guided
      }
    },
    1583465912 : {
      importance : 4,
      triggerTime : [200, 500],
      iconPath : "icn-balloons-oil.png",
      displayCountLimit : 5,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness3_AcceptOnlyTemplate.js",
      speechBalloonTarget : 11435360,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2119309154], [simcity.kLocalSpeechBalloonLocaleTable, 2119309155], [simcity.kLocalSpeechBalloonLocaleTable, 2119309152], [simcity.kLocalSpeechBalloonLocaleTable, 2119309153]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        oilHQ : [simcity.kDataBinAmount, simcity.kResourceIDHQ_Oil_Built],
        oilHQUnlocked : [simcity.kDataBinAmount, simcity.kResourceIDHQ_Oil_Unlocked],
        guided : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Guided]
      },
      test : function (a) {
        return !a ?
        !1 : 1 > a.oilHQ && 0 < a.oilHQUnlocked && 0 === a.guided
      }
    },
    1232800769 : {
      importance : 3,
      triggerTime : [60, 90],
      iconPath : "icn-balloons-oilrefine.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness3_AcceptOnlyTemplate.js",
      speechBalloonTarget : 416754379,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1515780713], [simcity.kLocalSpeechBalloonLocaleTable, 1515780712], [simcity.kLocalSpeechBalloonLocaleTable, 1515780715], [simcity.kLocalSpeechBalloonLocaleTable, 1515780714], [simcity.kLocalSpeechBalloonLocaleTable,
          1515780717]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        NumOilRefinery : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfOilManufacturingBases],
        OilCrudePumped : [simcity.kDataBinAmount, simcity.kResourceIDOilCrudePumped],
        guided : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Guided]
      },
      test : function (a) {
        return !a ? !1 : 500 < a.OilCrudePumped && 1 > a.NumOilRefinery && 0 === a.guided
      }
    },
    3560008808 : {
      importance : 2,
      triggerTime : [90, 120],
      iconPath : "icn-balloons-oil.png",
      displayCountLimit : 4,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness4_AcceptOnlyTemplate.js",
      speechBalloonTarget : 416754379,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 913981970], [simcity.kLocalSpeechBalloonLocaleTable, 913981971], [simcity.kLocalSpeechBalloonLocaleTable, 913981968], [simcity.kLocalSpeechBalloonLocaleTable, 913981969]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        oilWell : [simcity.kDataResourceAmount, simcity.kResourceIDNumberOfOilWells]
      },
      test : function (a) {
        return !a ? !1 : 0 < a.oilWell
      }
    },
    4139723777 : {
      importance : 2,
      triggerTime : [30, 60],
      iconPath : "icn-balloons-oil.png",
      displayCountLimit : 3,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness5_AcceptOnlyTemplate.js",
      speechBalloonTarget : 11435360,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 438131305], [simcity.kLocalSpeechBalloonLocaleTable, 438131304], [simcity.kLocalSpeechBalloonLocaleTable, 438131307]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        oilHQ : [simcity.kDataBinAmount, simcity.kResourceIDHQ_Oil_Built]
      },
      test : function (a) {
        return !a ? !1 : 0 < a.oilHQ
      }
    },
    410084208 : {
      importance : 2,
      triggerTime : [60, 90],
      iconPath : "icn-balloons-oilrefine.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness3_AcceptOnlyTemplate.js",
      speechBalloonTarget : 416754379,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2591728186], [simcity.kLocalSpeechBalloonLocaleTable, 2591728187], [simcity.kLocalSpeechBalloonLocaleTable, 2591728184], [simcity.kLocalSpeechBalloonLocaleTable, 2591728185]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        NumOilRefinery : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfOilManufacturingBases]
      },
      test : function (a) {
        return !a ? !1 :
        0 < a.NumOilRefinery
      }
    }
  }
};
simcity.SpeechBalloonPolling.OreMineUnlocked = {
  unlockBin : simcity.kResourceIDOreMineUnlocked,
  unlockEvent : simcity.kEventIDUnlock_OreMineUnlocked,
  DataBindings : {
    3022123485 : {
      importance : 8,
      triggerTime : [100, 120],
      iconPath : "icn-balloons-ore.png",
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonAcceptDismissTemplate.js",
      speechBalloonTarget : 416754379,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2046225477, 3001499379]],
      expirationTime : [100, 120],
      missionUnitID : 3861659190,
      vignetteActorPalette : 4228375006,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_Residential_Male_10,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0xebb2e9ec", "Mission title missing: MSCoalPlaceOreMine"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 2830941326],
        oreMines : [simcity.kDataResourceAmount, simcity.kResourceIDOreMinesBuilt],
        people : [simcity.kDataBinAmount, simcity.kResourceIDTotalResidential],
        totalJobs : [simcity.kDataResourceAmount, simcity.kResourceIDTotalJobs],
        ore : [simcity.kDataMaps, simcity.kMapIDOreDeposit, simcity.kDataSum],
        guided : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Guided]
      },
      test : function (a) {
        return !a ? !1 : 5E5 < a.ore && 1 > a.oreMines && 1E3 < a.people && 600 > a.totalJobs && 0 === a.guided
      }
    },
    1240534364 : {
      importance : 8,
      triggerTime : [30, 60],
      iconPath : "icn-balloons-ore.png",
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiPageAcceptDismiss.js",
      speechBalloonTarget : 1953260309,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2194692086, 2848776351], [simcity.kLocalSpeechBalloonLocaleTable, 2194692087]],
      expirationTime : [100, 120],
      missionUnitID : 810734343,
      vignetteActorPalette : 263967550,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_13_001,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0xabc20833", "Mission title missing: MSCoalPlaceSmelter"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 3612147327],
        NumSmelter : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfMetalManufacturingBases],
        CoalHarvested : [simcity.kDataBinAmount, simcity.kResourceIDCoalHarvested],
        OreHarvested : [simcity.kDataBinAmount, simcity.kResourceIDOreHarvested],
        CoalHQIsPresent : [simcity.kDataBinAmount, simcity.kResourceIDHQ_Mining_IsOn],
        guided : [simcity.kDataResourceAmount,
          simcity.kResourceIDSpecialization_Guided]
      },
      test : function (a) {
        return !a ? !1 : (15E3 < a.OreHarvested || 15E3 < a.CoalHarvested) && 0 < a.CoalHQIsPresent && 1 > a.NumSmelter && 0 === a.guided
      }
    },
    1132091371 : {
      importance : 2,
      triggerTime : [90, 120],
      iconPath : "icn-balloons-metal.png",
      displayCountLimit : 4,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness4_AcceptOnlyTemplate.js",
      speechBalloonTarget : 416754379,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2955068891], [simcity.kLocalSpeechBalloonLocaleTable, 2955068890], [simcity.kLocalSpeechBalloonLocaleTable,
          2955068889]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        oreMines : [simcity.kDataResourceAmount, simcity.kResourceIDOreMinesBuilt],
        ore : [simcity.kDataMaps, simcity.kMapIDOreDeposit, simcity.kDataSum],
        people : [simcity.kDataBinAmount, simcity.kResourceIDTotalResidential],
        guided : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Guided]
      },
      test : function (a) {
        return !a ? !1 : 5E5 < a.ore && 1 > a.oreMines && 600 < a.people && 0 === a.guided
      }
    },
    3152173535 : {
      importance : 4,
      triggerTime : [90, 120],
      iconPath : "icn-balloons-coal.png",
      displayCountLimit : 5,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness3_AcceptOnlyTemplate.js",
      speechBalloonTarget : 416754379,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 4087791759], [simcity.kLocalSpeechBalloonLocaleTable, 4087791758], [simcity.kLocalSpeechBalloonLocaleTable, 4087791757]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        smelter : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfMetalManufacturingBases],
        CoalHarvested : [simcity.kDataBinAmount, simcity.kResourceIDCoalHarvested],
        OreHarvested : [simcity.kDataBinAmount, simcity.kResourceIDOreHarvested],
        guided : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Guided]
      },
      test : function (a) {
        return !a ? !1 : 1 > a.smelter && (1E4 < a.OreHarvested || 1E4 < a.CoalHarvested) && 0 === a.guided
      }
    },
    576295682 : {
      importance : 2,
      triggerTime : [90, 120],
      iconPath : "icn-balloons-ore.png",
      displayCountLimit : 4,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness4_AcceptOnlyTemplate.js",
      speechBalloonTarget : 416754379,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable,
          4078125468], [simcity.kLocalSpeechBalloonLocaleTable, 4078125469], [simcity.kLocalSpeechBalloonLocaleTable, 4078125470], [simcity.kLocalSpeechBalloonLocaleTable, 4078125471]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        oreMine : [simcity.kDataResourceAmount, simcity.kResourceIDOreMinesBuilt]
      },
      test : function (a) {
        return !a ? !1 : 0 < a.oreMine
      }
    },
    2349960218 : {
      importance : 2,
      triggerTime : [90, 120],
      iconPath : "icn-balloons-metal.png",
      displayCountLimit : 4,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness4_AcceptOnlyTemplate.js",
      speechBalloonTarget : 416754379,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 4144940788], [simcity.kLocalSpeechBalloonLocaleTable, 4144940789], [simcity.kLocalSpeechBalloonLocaleTable, 4144940790], [simcity.kLocalSpeechBalloonLocaleTable, 4144940791]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        smelter : [simcity.kDataResourceAmount, simcity.kResourceIDNumberOfMetalManufacturingBases]
      },
      test : function (a) {
        return !a ? !1 : 0 < a.smelter
      }
    }
  }
};
simcity.SpeechBalloonPolling.Specialization_Education = {
  unlockBin : simcity.kResourceIDSpecialization_Education,
  unlockEvent : simcity.kEventIDUnlock_Specialization_Education,
  DataBindings : {
    1754599595 : {
      importance : 10,
      triggerTime : [5, 10],
      iconPath : "icn-balloons-school.png",
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiAcceptSpecialization.js",
      speechBalloonTarget : 3403061518,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2247953947, 2731333022], [simcity.kLocalSpeechBalloonLocaleTable, 2247953946], [simcity.kLocalSpeechBalloonLocaleTable,
          2247953945]],
      expirationTime : [-1, -1],
      missionUnitID : 412039076,
      vignetteActorPalette : 112969031,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_08_003,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x13826e6e", "Mission title missing: MSEducationBackToSchool1"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 3895237884],
        NumGradeSchoolBases : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfGradeSchoolBases],
        education_specialized : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Education],
        deptOfEducation : [simcity.kDataBinAmount, simcity.kResourceIDHQ_CityHall_Education_Module_IsOn]
      },
      test : function (a) {
        return !a ? !1 : 1 === a.education_specialized && 0 === a.NumGradeSchoolBases && 0 === a.deptOfEducation
      }
    },
    1302936833 : {
      importance : 10,
      triggerTime : [5, 10],
      iconPath : "icn-balloons-disaster-radiation.png",
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiAcceptSpecialization.js",
      speechBalloonTarget : 442264791,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1344228713, 2286546766], [simcity.kLocalSpeechBalloonLocaleTable,
          1344228712], [simcity.kLocalSpeechBalloonLocaleTable, 1344228715]],
      expirationTime : [-1, -1],
      missionUnitID : 1299486492,
      vignetteActorPalette : 206760215,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_AIR_TRAFFIC_CONTROLLER_MALE_001,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0xfc54b196", "Mission title missing: MSEducationBackToSchool10"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 2050695300],
        education_specialized : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Education],
        NumberOfUniversities : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfUniversities],
        examsPassedE3 : [simcity.kDataResourceAmount, simcity.kResourceIDExamsPassedE3]
      },
      test : function (a) {
        return !a ? !1 : 1 === a.education_specialized && 1 <= a.NumberOfUniversities && 180 <= a.examsPassedE3
      }
    },
    1754599592 : {
      importance : 10,
      triggerTime : [5, 10],
      iconPath : "icn-balloons-school.png",
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiAcceptSpecialization.js",
      speechBalloonTarget : 3261375080,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable,
          2121461458, 1576428417], [simcity.kLocalSpeechBalloonLocaleTable, 2121461459], [simcity.kLocalSpeechBalloonLocaleTable, 2121461456], [simcity.kLocalSpeechBalloonLocaleTable, 2121461457]],
      expirationTime : [-1, -1],
      missionUnitID : 412039079,
      vignetteActorPalette : 1607066185,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_Special_female_003,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x0f279353", "Mission title missing: MSEducationBackToSchool2"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount,
          3895237887],
        education_specialized : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Education],
        NumGradeSchoolBases : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfGradeSchoolBases],
        NumberOfGradeSchoolLots : [simcity.kDataResourceAmount, simcity.kResourceIDNumberOfGradeSchoolLots],
        students_in_school : [simcity.kDataResourceAmount, simcity.kResourceIDStudentStudyingE2]
      },
      test : function (a) {
        return !a ? !1 : 1 === a.education_specialized && 1 <= a.NumGradeSchoolBases && 4 >= a.NumberOfGradeSchoolLots && 10 <= a.students_in_school
      }
    },
    1754599593 : {
      importance : 10,
      triggerTime : [5, 10],
      iconPath : "icn-balloons-school.png",
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiAcceptSpecialization.js",
      speechBalloonTarget : 3261375080,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 3151174193, 57557130], [simcity.kLocalSpeechBalloonLocaleTable, 3151174192], [simcity.kLocalSpeechBalloonLocaleTable, 3151174195]],
      expirationTime : [-1, -1],
      missionUnitID : 412039078,
      vignetteActorPalette : 1607066185,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_Special_female_003,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0xbbbfa7bc", "Mission title missing: MSEducationBackToSchool3"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 3895237886],
        education_specialized : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Education],
        NumberOfGradeSchoolLots : [simcity.kDataResourceAmount, simcity.kResourceIDNumberOfGradeSchoolLots],
        NumberOfGradeSchoolBusStops : [simcity.kDataResourceAmount, simcity.kResourceIDNumberOfGradeSchoolBusStops]
      },
      test : function (a) {
        return !a ?
        !1 : 1 === a.education_specialized && 2 <= a.NumberOfGradeSchoolLots && 2 <= a.NumberOfGradeSchoolBusStops
      }
    },
    1754599598 : {
      importance : 10,
      triggerTime : [5, 10],
      iconPath : "icn-balloons-school.png",
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiAcceptSpecialization.js",
      speechBalloonTarget : 3261375080,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 890186040, 1576428417], [simcity.kLocalSpeechBalloonLocaleTable, 890186041], [simcity.kLocalSpeechBalloonLocaleTable, 890186042]],
      expirationTime : [-1, -1],
      missionUnitID : 412039073,
      vignetteActorPalette : 1607066185,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_Special_female_003,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x2ebf1311", "Mission title missing: MSEducationBackToSchool4"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 3895237881],
        education_specialized : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Education],
        deptOfEducation : [simcity.kDataBinAmount, simcity.kResourceIDHQ_CityHall_Education_Module_IsOn]
      },
      test : function (a) {
        return !a ?
        !1 : 1 === a.education_specialized && 0 === a.deptOfEducation
      }
    },
    1754599599 : {
      importance : 10,
      triggerTime : [5, 10],
      iconPath : "icn-balloons-school.png",
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiAcceptSpecialization.js",
      speechBalloonTarget : 3261375080,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 3622710239, 57557130], [simcity.kLocalSpeechBalloonLocaleTable, 3622710238], [simcity.kLocalSpeechBalloonLocaleTable, 3622710237]],
      expirationTime : [-1, -1],
      missionUnitID : 412039072,
      vignetteActorPalette : 1607066185,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_Special_female_003,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x8ffbcc52", "Mission title missing: MSEducationBackToSchool5"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 3895237880],
        education_specialized : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Education],
        deptOfEducation : [simcity.kDataBinAmount, simcity.kResourceIDHQ_CityHall_Education_Module_IsOn],
        NumberOfHighSchoolBases : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfHighSchoolBases]
      },
      test : function (a) {
        return !a ? !1 : 1 ===
        a.education_specialized && 1 <= a.deptOfEducation && 0 === a.NumberOfHighSchoolBases
      }
    },
    1754599596 : {
      importance : 10,
      triggerTime : [5, 10],
      iconPath : "icn-balloons-school.png",
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiAcceptSpecialization.js",
      speechBalloonTarget : 1693929698,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1820302982, 57557130], [simcity.kLocalSpeechBalloonLocaleTable, 1820302983], [simcity.kLocalSpeechBalloonLocaleTable, 1820302980]],
      expirationTime : [-1, -1],
      missionUnitID : 412039075,
      vignetteActorPalette : 1607066185,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_Special_female_003,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0xfbc3c317", "Mission title missing: MSEducationBackToSchool6"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 3895237883],
        education_specialized : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Education],
        NumberOfHighSchoolBases : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfHighSchoolBases],
        NumberOfHighSchoolLots : [simcity.kDataResourceAmount,
          simcity.kResourceIDNumberOfHighSchoolLots],
        numberOfHighSchoolGyms : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfHighSchoolGyms]
      },
      test : function (a) {
        return !a ? !1 : 1 === a.education_specialized && 1 <= a.NumberOfHighSchoolBases && 2 <= a.NumberOfHighSchoolLots && 0 === a.numberOfHighSchoolGyms
      }
    },
    1754599597 : {
      importance : 10,
      triggerTime : [5, 10],
      iconPath : "icn-balloons-school.png",
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiAcceptSpecialization.js",
      speechBalloonTarget : 4055465475,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable,
          1726233557, 4225835328], [simcity.kLocalSpeechBalloonLocaleTable, 1726233556], [simcity.kLocalSpeechBalloonLocaleTable, 1726233559]],
      expirationTime : [-1, -1],
      missionUnitID : 412039074,
      vignetteActorPalette : 1607066185,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_Special_female_003,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x9a459690", "Mission title missing: MSEducationBackToSchool7"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 3895237882],
        education_specialized : [simcity.kDataResourceAmount,
          simcity.kResourceIDSpecialization_Education],
        HQ_CityHall_IsOn : [simcity.kDataBinAmount, simcity.kResourceIDHQ_CityHall_IsOn],
        students : [simcity.kDataResourceAmount, simcity.kResourceIDTotalStudents],
        NumberOfCollegeBases : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfCollegeBases]
      },
      test : function (a) {
        return !a ? !1 : 1 === a.education_specialized && 1 === a.HQ_CityHall_IsOn && 800 <= a.students && 0 === a.NumberOfCollegeBases
      }
    },
    1754599586 : {
      importance : 10,
      triggerTime : [5, 10],
      iconPath : "icn-balloons-school.png",
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiAcceptSpecialization.js",
      speechBalloonTarget : 4055465475,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 720824508, 57557130], [simcity.kLocalSpeechBalloonLocaleTable, 720824509]],
      expirationTime : [-1, -1],
      missionUnitID : 412039085,
      vignetteActorPalette : 1607066185,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_Special_female_003,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0xb0609825", "Mission title missing: MSEducationBackToSchool8"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 3895237877],
        education_specialized : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Education],
        deptOfEducation : [simcity.kDataBinAmount, simcity.kResourceIDHQ_CityHall_Education_Module_IsOn],
        students : [simcity.kDataResourceAmount, simcity.kResourceIDTotalStudents],
        NumberOfUniversities : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfUniversities]
      },
      test : function (a) {
        return !a ? !1 : 1 === a.education_specialized && 1 === a.deptOfEducation && 1200 <= a.students && 0 === a.NumberOfUniversities
      }
    },
    1754599587 : {
      importance : 10,
      triggerTime : [5, 10],
      iconPath : "icn-balloons-school.png",
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiAcceptSpecialization.js",
      unitID : 1112583733,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 4253451539, 57557130], [simcity.kLocalSpeechBalloonLocaleTable, 4253451538], [simcity.kLocalSpeechBalloonLocaleTable, 4253451537]],
      expirationTime : [-1, -1],
      missionUnitID : 412039084,
      vignetteActorPalette : 1607066185,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_Special_female_003,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json",
        "0x9adb9806", "Mission title missing: MSEducationBackToSchool9"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 3895237876],
        education_specialized : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Education],
        NumberOfUniversities : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfUniversities],
        examsPassedE3 : [simcity.kDataResourceAmount, simcity.kResourceIDExamsPassedE3]
      },
      test : function (a) {
        return !a ? !1 : 1 === a.education_specialized && 1 <= a.NumberOfUniversities && 100 <= a.examsPassedE3
      }
    }
  }
};
simcity.SpeechBalloonPolling.Specialization_Electronics = {
  unlockBin : simcity.kResourceIDSpecialization_Electronics,
  unlockEvent : simcity.kEventIDUnlock_Specialization_Electronics,
  DataBindings : {
    4252009208 : {
      importance : 9,
      triggerTime : [5, 10],
      iconPath : "icn-balloons-electronics.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiAcceptSpecialization.js",
      speechBalloonTarget : 3403061518,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2844643106, 366279859], [simcity.kLocalSpeechBalloonLocaleTable,
          2844643107], [simcity.kLocalSpeechBalloonLocaleTable, 2844643104]],
      expirationTime : [-1, -1],
      missionUnitID : 3769112005,
      vignetteActorPalette : 2236387519,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_Special_male_001,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x9a654e2d", "Mission title missing: MSBusinessElectronicsZTronix1"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 2069738957],
        electronics_specialized : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Electronics],
        imEx : [simcity.kDataBinAmount, simcity.kResourceIDNumImEx],
        electronicsBuiltT1 : [simcity.kDataResourceAmount, simcity.kResourceIDNumT1ElectronicsBase]
      },
      test : function (a) {
        return !a ? !1 : 1 === a.electronics_specialized && 0 === a.imEx && 0 === a.electronicsBuiltT1
      }
    },
    4028509272 : {
      importance : 9,
      triggerTime : [5, 10],
      iconPath : "icn-balloons-trade.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiAcceptSpecialization.js",
      speechBalloonTarget : 4262121095,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable,
          307424770, 366279859], [simcity.kLocalSpeechBalloonLocaleTable, 307424771], [simcity.kLocalSpeechBalloonLocaleTable, 307424768]],
      expirationTime : [-1, -1],
      missionUnitID : 1838826799,
      vignetteActorPalette : 2236387519,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_Special_male_001,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0xff38ed2b", "Mission title missing: MSBusinessElectronicsZTronix10"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 25506183],
        electronics_specialized : [simcity.kDataResourceAmount,
          simcity.kResourceIDSpecialization_Electronics],
        electronics_HQLevel : [simcity.kDataBinAmount, simcity.kResourceIDHQ_Electronics_Level],
        imExT2 : [simcity.kDataBinAmount, simcity.kResourceIDNumImExT2],
        processors_exported : [simcity.kDataResourceAmount, simcity.kResourceIDTradeTrackingPlasticImported]
      },
      test : function (a) {
        return !a ? !1 : 1 === a.electronics_specialized && 3 === a.electronics_HQLevel && 1 <= a.imExT2 && 1E5 <= a.processors_exported
      }
    },
    4028509273 : {
      importance : 9,
      triggerTime : [5, 10],
      iconPath : "icn-balloons-trade.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiAcceptSpecialization.js",
      speechBalloonTarget : 4262121095,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1960245729, 2046130610], [simcity.kLocalSpeechBalloonLocaleTable, 1960245728], [simcity.kLocalSpeechBalloonLocaleTable, 1960245731]],
      expirationTime : [-1, -1],
      missionUnitID : 1838826798,
      vignetteActorPalette : 2236387519,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_Special_male_001,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json",
        "0xae9989b4", "Mission title missing: MSBusinessElectronicsZTronix11"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 25506182],
        electronics_specialized : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Electronics],
        electronics_HQLevel : [simcity.kDataBinAmount, simcity.kResourceIDHQ_Electronics_Level],
        imExT2 : [simcity.kDataBinAmount, simcity.kResourceIDNumImExT2],
        NumberOfImExModulesRail : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfImExModulesRail],
        NumberOfRailConnections : [simcity.kDataBinAmount,
          simcity.kResourceIDNumberOfRailConnections]
      },
      test : function (a) {
        return !a ? !1 : 1 === a.electronics_specialized && 3 === a.electronics_HQLevel && 1 <= a.imExT2 && 0 === a.NumberOfImExModulesRail && 1 <= a.NumberOfRailConnections
      }
    },
    4028509274 : {
      importance : 9,
      triggerTime : [5, 10],
      iconPath : "icn-balloons-trade.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiAcceptSpecialization.js",
      speechBalloonTarget : 4262121095,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 3672275124, 366279859], [simcity.kLocalSpeechBalloonLocaleTable,
          3672275125]],
      expirationTime : [-1, -1],
      missionUnitID : 1838826797,
      vignetteActorPalette : 2236387519,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_Special_male_001,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x570a60a5", "Mission title missing: MSBusinessElectronicsZTronix12"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 25506181],
        electronics_specialized : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Electronics],
        electronics_HQLevel : [simcity.kDataBinAmount,
          simcity.kResourceIDHQ_Electronics_Level],
        imExT2 : [simcity.kDataBinAmount, simcity.kResourceIDNumImExT2],
        NumberOfImExModulesBoat : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfImExModulesBoat],
        NumberOfBoatConnections : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfBoatConnections]
      },
      test : function (a) {
        return !a ? !1 : 1 === a.electronics_specialized && 3 === a.electronics_HQLevel && 1 <= a.imExT2 && 0 === a.NumberOfImExModulesBoat && 1 <= a.NumberOfBoatConnections
      }
    },
    4028509275 : {
      importance : 9,
      triggerTime : [5, 10],
      iconPath : "icn-balloons-electronics.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiAcceptSpecialization.js",
      speechBalloonTarget : 4262121095,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1753821643, 2046130610], [simcity.kLocalSpeechBalloonLocaleTable, 1753821642], [simcity.kLocalSpeechBalloonLocaleTable, 1753821641]],
      expirationTime : [-1, -1],
      missionUnitID : 1838826796,
      vignetteActorPalette : 2236387519,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_Special_male_001,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json",
        "0x41856086", "Mission title missing: MSBusinessElectronicsZTronix13"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 25506180],
        electronics_specialized : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Electronics],
        electronics_HQLevel : [simcity.kDataBinAmount, simcity.kResourceIDHQ_Electronics_Level],
        imExT2 : [simcity.kDataBinAmount, simcity.kResourceIDNumImExT2],
        NumberOfImExModulesGarage : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfImExModulesGarage],
        TVs_exported : [simcity.kDataResourceAmount,
          simcity.kResourceIDTradeTrackingTelevisionExported],
        processors_exported : [simcity.kDataResourceAmount, simcity.kResourceIDTradeTrackingElectronicsExported]
      },
      test : function (a) {
        return !a ? !1 : 1 === a.electronics_specialized && 3 === a.electronics_HQLevel && 1 <= a.imExT2 && 2 <= a.NumberOfImExModulesGarage && 1E5 <= a.TVs_exported && 1E5 <= a.processors_exported
      }
    },
    4252009211 : {
      importance : 9,
      triggerTime : [5, 10],
      iconPath : "icn-balloons-electronics.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiAcceptSpecialization.js",
      speechBalloonTarget : 2786031172,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 696723435, 762145929], [simcity.kLocalSpeechBalloonLocaleTable, 696723434]],
      expirationTime : [-1, -1],
      missionUnitID : 3769112006,
      vignetteActorPalette : 2236387519,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_Special_male_001,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x3885bd5c", "Mission title missing: MSBusinessElectronicsZTronix2"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 2069738958],
        electronics_specialized : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Electronics],
        electronicsBuiltT1 : [simcity.kDataBinAmount, simcity.kResourceIDNumT1ElectronicsBase],
        imEx : [simcity.kDataBinAmount, simcity.kResourceIDNumImEx]
      },
      test : function (a) {
        return !a ? !1 : 1 === a.electronics_specialized && 1 <= a.electronicsBuiltT1 && 1 <= a.imEx
      }
    },
    4252009210 : {
      importance : 9,
      triggerTime : [5, 10],
      iconPath : "icn-balloons-trade.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiAcceptSpecialization.js",
      speechBalloonTarget : 2786031172,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2615176788, 2046130610], [simcity.kLocalSpeechBalloonLocaleTable, 2615176789]],
      expirationTime : [-1, -1],
      missionUnitID : 3769112007,
      vignetteActorPalette : 2236387519,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_Special_male_001,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x8974d2f3", "Mission title missing: MSBusinessElectronicsZTronix3"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount,
          2069738959],
        electronics_specialized : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Electronics],
        electronicsBuiltT1 : [simcity.kDataBinAmount, simcity.kResourceIDNumT1ElectronicsBase],
        electronicsLot : [simcity.kDataBinAmount, simcity.kResourceIDNumImExElectronicsLots],
        electronics_HQ_built : [simcity.kDataResourceAmount, simcity.kResourceIDHQ_Electronics_Built]
      },
      test : function (a) {
        return !a ? !1 : 1 === a.electronics_specialized && 1 <= a.electronicsBuiltT1 && 0 === a.electronics_HQ_built && 0 === a.electronicsLot
      }
    },
    4252009213 : {
      importance : 9,
      triggerTime : [5, 10],
      iconPath : "icn-balloons-electronics.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiAcceptSpecialization.js",
      speechBalloonTarget : 2786031172,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 206237157, 1702887097], [simcity.kLocalSpeechBalloonLocaleTable, 206237156], [simcity.kLocalSpeechBalloonLocaleTable, 206237159]],
      expirationTime : [-1, -1],
      missionUnitID : 3769112E3,
      vignetteActorPalette : 2236387519,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_Special_male_001,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x0a490bf2", "Mission title missing: MSBusinessElectronicsZTronix4"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 2069738952],
        electronics_specialized : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Electronics],
        electronics_HQ_built : [simcity.kDataResourceAmount, simcity.kResourceIDHQ_Electronics_Built],
        electronicsLot : [simcity.kDataBinAmount, simcity.kResourceIDNumImExElectronicsLots],
        processors_income : [simcity.kDataResourceAmount,
          simcity.kResourceIDIncomeFromTradingGlobalMarketElectronics]
      },
      test : function (a) {
        return !a ? !1 : 1 === a.electronics_specialized && 0 === a.electronics_HQ_built && 1 <= a.electronicsLot && 2E4 <= a.processors_income
      }
    },
    4252009212 : {
      importance : 9,
      triggerTime : [5, 10],
      iconPath : "icn-balloons-electronics.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiAcceptSpecialization.js",
      speechBalloonTarget : 4262121095,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2537575318, 366279859], [simcity.kLocalSpeechBalloonLocaleTable,
          2537575319]],
      expirationTime : [-1, -1],
      missionUnitID : 3769112001,
      vignetteActorPalette : 2236387519,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_Special_male_001,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0xc25907b1", "Mission title missing: MSBusinessElectronicsZTronix5"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 2069738953],
        electronics_specialized : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Electronics],
        electronics_HQLevel : [simcity.kDataBinAmount,
          simcity.kResourceIDHQ_Electronics_Level],
        electronics_consumerelectronics_division : [simcity.kDataBinAmount, simcity.kResourceIDHQ_Electronics_ConsumerElectronics_Module_IsOn]
      },
      test : function (a) {
        return !a ? !1 : 1 === a.electronics_specialized && 1 === a.electronics_HQLevel && 0 === a.electronics_consumerelectronics_division
      }
    },
    4252009215 : {
      importance : 9,
      triggerTime : [5, 10],
      iconPath : "icn-balloons-televisions.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiAcceptSpecialization.js",
      speechBalloonTarget : 4262121095,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1028946223, 2046130610], [simcity.kLocalSpeechBalloonLocaleTable, 1028946222]],
      expirationTime : [-1, -1],
      missionUnitID : 3769112002,
      vignetteActorPalette : 2236387519,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_Special_male_001,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0xeace2e30", "Mission title missing: MSBusinessElectronicsZTronix6"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 2069738954],
        electronics_specialized : [simcity.kDataResourceAmount,
          simcity.kResourceIDSpecialization_Electronics],
        electronics_HQLevel : [simcity.kDataBinAmount, simcity.kResourceIDHQ_Electronics_Level],
        electronics_consumerelectronics_division : [simcity.kDataBinAmount, simcity.kResourceIDHQ_Electronics_ConsumerElectronics_Module_IsOn],
        electronicsBuiltT2 : [simcity.kDataBinAmount, simcity.kResourceIDNumT2ElectronicsBase]
      },
      test : function (a) {
        return !a ? !1 : 1 === a.electronics_specialized && 2 === a.electronics_HQLevel && 1 <= a.electronics_consumerelectronics_division && 0 === a.electronicsBuiltT2
      }
    },
    4252009214 : {
      importance : 9,
      triggerTime : [5, 10],
      iconPath : "icn-balloons-computers.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiAcceptSpecialization.js",
      speechBalloonTarget : 4262121095,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1565881544, 366279859], [simcity.kLocalSpeechBalloonLocaleTable, 1565881545], [simcity.kLocalSpeechBalloonLocaleTable, 1565881546]],
      expirationTime : [-1, -1],
      missionUnitID : 3769112003,
      vignetteActorPalette : 2236387519,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_Special_male_001,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x65990fb7", "Mission title missing: MSBusinessElectronicsZTronix7"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 2069738955],
        electronics_specialized : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Electronics],
        electronics_HQLevel : [simcity.kDataBinAmount, simcity.kResourceIDHQ_Electronics_Level],
        computers_researched : [simcity.kDataResourceAmount, simcity.kResourceIDComputerResearched]
      },
      test : function (a) {
        return !a ? !1 : 1 === a.electronics_specialized &&
        2 === a.electronics_HQLevel && 0 === a.computers_researched
      }
    },
    4252009201 : {
      importance : 9,
      triggerTime : [5, 10],
      iconPath : "icn-balloons-electronics.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiAcceptSpecialization.js",
      speechBalloonTarget : 4262121095,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 99767513, 2046130610], [simcity.kLocalSpeechBalloonLocaleTable, 99767512], [simcity.kLocalSpeechBalloonLocaleTable, 99767515]],
      expirationTime : [-1, -1],
      missionUnitID : 3769112012,
      vignetteActorPalette : 2236387519,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_Special_male_001,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x30ee62a6", "Mission title missing: MSBusinessElectronicsZTronix8"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 2069738948],
        electronics_specialized : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Electronics],
        electronics_HQLevel : [simcity.kDataBinAmount, simcity.kResourceIDHQ_Electronics_Level],
        computer_income : [simcity.kDataResourceAmount,
          simcity.kResourceIDIncomeFromTradingGlobalMarketComputer]
      },
      test : function (a) {
        return !a ? !1 : 1 === a.electronics_specialized && 2 === a.electronics_HQLevel && 1E3 <= a.computer_income
      }
    },
    4252009200 : {
      importance : 9,
      triggerTime : [5, 10],
      iconPath : "icn-balloons-trade.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiAcceptSpecialization.js",
      speechBalloonTarget : 4262121095,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1460412602, 2046130610], [simcity.kLocalSpeechBalloonLocaleTable, 1460412603],
        [simcity.kLocalSpeechBalloonLocaleTable, 1460412600]],
      expirationTime : [-1, -1],
      missionUnitID : 3769112013,
      vignetteActorPalette : 2236387519,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_Special_male_001,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0xff38ed2b", "Mission title missing: MSBusinessElectronicsZTronix9"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 2069738949],
        electronics_specialized : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Electronics],
        electronics_HQLevel : [simcity.kDataBinAmount, simcity.kResourceIDHQ_Electronics_Level],
        imExT2 : [simcity.kDataBinAmount, simcity.kResourceIDNumImExT2],
        electronics_commerce_division : [simcity.kDataBinAmount, simcity.kResourceIDHQ_Electronics_Commerce_Module_IsOn]
      },
      test : function (a) {
        return !a ? !1 : 1 === a.electronics_specialized && 3 === a.electronics_HQLevel && 0 === a.imExT2 && 1 <= a.electronics_commerce_division
      }
    }
  }
};
simcity.SpeechBalloonPolling.Specialization_Gambling = {
  unlockBin : simcity.kResourceIDSpecialization_Gambling,
  unlockEvent : simcity.kEventIDUnlock_Specialization_Gambling,
  DataBindings : {
    4255844230 : {
      importance : 9,
      triggerTime : [30, 45],
      iconPath : "icn-balloons-casino.png",
      displayCountLimit : 3,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiAcceptSpecialization.js",
      speechBalloonTarget : 11435360,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1511248848, 1790307499], [simcity.kLocalSpeechBalloonLocaleTable, 1511248849],
        [simcity.kLocalSpeechBalloonLocaleTable, 1511248850]],
      expirationTime : [-1, -1],
      missionUnitID : 826664369,
      vignetteActorPalette : 4187961950,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_Special_male_006,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x06ee23c1", "Mission title missing: MSBusinessGamblingBigGamble1"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 1642057161],
        gambling_specialized : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Gambling],
        casinos : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfCasinos]
      },
      test : function (a) {
        return !a ? !1 : 1 === a.gambling_specialized && 0 === a.casinos
      }
    },
    3661420482 : {
      importance : 9,
      triggerTime : [5, 10],
      iconPath : "icn-balloons-casino.png",
      displayCountLimit : 3,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiAcceptSpecialization.js",
      speechBalloonTarget : 1482763029,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1115656668, 4179190740], [simcity.kLocalSpeechBalloonLocaleTable, 1115656669], [simcity.kLocalSpeechBalloonLocaleTable,
          1115656670]],
      expirationTime : [-1, -1],
      missionUnitID : 1107858835,
      vignetteActorPalette : 4187961950,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_Special_male_006,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0xced01f27", "Mission title missing: MSBusinessGamblingBigGamble10"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 3696292699],
        gambling_specialized : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Gambling],
        casino_robbery : [simcity.kDataResourceAmount,
          simcity.kResourceIDGlobalMission_MSBusinessGamblingBigGamble10_EventStarted]
      },
      test : function (a) {
        return !a ? !1 : 1 === a.gambling_specialized && 1 === a.casino_robbery
      }
    },
    3661420483 : {
      importance : 9,
      triggerTime : [5, 10],
      iconPath : "icn-balloons-casino.png",
      displayCountLimit : 3,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiAcceptSpecialization.js",
      speechBalloonTarget : 1482763029,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 394893235, 1790307499], [simcity.kLocalSpeechBalloonLocaleTable, 394893234]],
      expirationTime : [-1,
        -1],
      missionUnitID : 1107858834,
      vignetteActorPalette : 4187961950,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_Special_male_006,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x14034660", "Mission title missing: MSBusinessGamblingBigGamble11"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 3696292698],
        gambling_specialized : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Gambling],
        CasinoHQLevel : [simcity.kDataBinAmount, simcity.kResourceIDHQ_Casino_Level],
        gambling_entertainment_division : [simcity.kDataBinAmount, simcity.kResourceIDHQ_Casino_Entertainment_Module_Built],
        numberOfStripCasinoAs : [simcity.kDataResourceAmount, simcity.kResourceIDNumberOfStripCasinoAs],
        casino_income : [simcity.kDataResourceAmount, simcity.kResourceIDIncomeFromCasinosTotal]
      },
      test : function (a) {
        return !a ? !1 : 1 === a.gambling_specialized && 2 === a.CasinoHQLevel && 0 === a.gambling_entertainment_division && 1 <= a.numberOfStripCasinoAs && 1E4 <= a.casino_income
      }
    },
    3661420480 : {
      importance : 9,
      triggerTime : [5,
        10],
      iconPath : "icn-balloons-casino.png",
      displayCountLimit : 3,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiAcceptSpecialization.js",
      speechBalloonTarget : 1482763029,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 519400650, 1790307499], [simcity.kLocalSpeechBalloonLocaleTable, 519400651], [simcity.kLocalSpeechBalloonLocaleTable, 519400648]],
      expirationTime : [-1, -1],
      missionUnitID : 1107858833,
      vignetteActorPalette : 4187961950,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_Special_male_006,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x2678f021", "Mission title missing: MSBusinessGamblingBigGamble12"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 3696292697],
        gambling_specialized : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Gambling],
        CasinoHQLevel : [simcity.kDataBinAmount, simcity.kResourceIDHQ_Casino_Level],
        gambling_entertainment_division : [simcity.kDataBinAmount, simcity.kResourceIDHQ_Casino_Entertainment_Module_IsOn]
      },
      test : function (a) {
        return !a ? !1 :
        1 === a.gambling_specialized && 3 === a.CasinoHQLevel && 1 === a.gambling_entertainment_division
      }
    },
    3661420481 : {
      importance : 9,
      triggerTime : [5, 10],
      iconPath : "icn-balloons-air.png",
      displayCountLimit : 3,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiAcceptSpecialization.js",
      speechBalloonTarget : 442264791,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2788160937, 209423289], [simcity.kLocalSpeechBalloonLocaleTable, 2788160936], [simcity.kLocalSpeechBalloonLocaleTable, 2788160939]],
      expirationTime : [-1, -1],
      missionUnitID : 1107858832,
      vignetteActorPalette : 1474136044,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_Special_male_002,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x737e8862", "Mission title missing: MSBusinessGamblingBigGamble13"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 3696292696],
        gambling_specialized : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Gambling],
        hasDeptOfTrans : [simcity.kDataResourceAmount, simcity.kResourceIDHQ_CityHall_Transportation_Module_IsOn],
        gamblers_satisfied : [simcity.kDataResourceAmount, simcity.kResourceIDGamblerW1Satisfied]
      },
      test : function (a) {
        return !a ? !1 : 1 === a.gambling_specialized && 1 === a.hasDeptOfTrans && 1500 <= a.gamblers_satisfied
      }
    },
    3661420486 : {
      importance : 9,
      triggerTime : [5, 10],
      iconPath : "icn-balloons-casino.png",
      displayCountLimit : 3,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiAcceptSpecialization.js",
      speechBalloonTarget : 1482763029,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1227926672, 1790307499], [simcity.kLocalSpeechBalloonLocaleTable,
          1227926673], [simcity.kLocalSpeechBalloonLocaleTable, 1227926674]],
      expirationTime : [-1, -1],
      missionUnitID : 1107858839,
      vignetteActorPalette : 4187961950,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_Special_male_006,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x06e17063", "Mission title missing: MSBusinessGamblingBigGamble14"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 3696292703],
        gambling_specialized : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Gambling],
        CasinoHQLevel : [simcity.kDataBinAmount, simcity.kResourceIDHQ_Casino_Level],
        comedyclubs : [simcity.kDataResourceAmount, simcity.kResourceIDNumberOfCasinoComedyClubs]
      },
      test : function (a) {
        return !a ? !1 : 1 === a.gambling_specialized && 3 === a.CasinoHQLevel && 1 <= a.comedyclubs
      }
    },
    3661420487 : {
      importance : 9,
      triggerTime : [5, 10],
      iconPath : "icn-balloons-casino.png",
      displayCountLimit : 3,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiAcceptSpecialization.js",
      speechBalloonTarget : 1482763029,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable,
          356953751, 1790307499], [simcity.kLocalSpeechBalloonLocaleTable, 356953750]],
      expirationTime : [-1, -1],
      missionUnitID : 1107858838,
      vignetteActorPalette : 4187961950,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_Special_male_006,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0xbb0981cc", "Mission title missing: MSBusinessGamblingBigGamble15"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 3696292702],
        gambling_specialized : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Gambling],
        CasinoHQLevel : [simcity.kDataBinAmount, simcity.kResourceIDHQ_Casino_Level],
        gambling_lodging_division : [simcity.kDataBinAmount, simcity.kResourceIDHQ_Casino_Lodging_Module_IsOn]
      },
      test : function (a) {
        return !a ? !1 : 1 === a.gambling_specialized && 4 === a.CasinoHQLevel && 1 <= a.gambling_lodging_division
      }
    },
    3661420484 : {
      importance : 9,
      triggerTime : [5, 10],
      iconPath : "icn-balloons-casino.png",
      displayCountLimit : 3,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiAcceptSpecialization.js",
      speechBalloonTarget : 1482763029,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable,
          2357599998, 1790307499], [simcity.kLocalSpeechBalloonLocaleTable, 2357599999]],
      expirationTime : [-1, -1],
      missionUnitID : 1107858837,
      vignetteActorPalette : 4187961950,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_Special_male_006,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0xc39bf89d", "Mission title missing: MSBusinessGamblingBigGamble16"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 3696292701],
        gambling_specialized : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Gambling],
        CasinoHQLevel : [simcity.kDataBinAmount, simcity.kResourceIDHQ_Casino_Level],
        gambling_lodging_division : [simcity.kDataBinAmount, simcity.kResourceIDHQ_Casino_Lodging_Module_IsOn],
        numberOfElegantCasinos : [simcity.kDataResourceAmount, simcity.kResourceIDNumberOfElegantCasinos]
      },
      test : function (a) {
        return !a ? !1 : 1 === a.gambling_specialized && 4 === a.CasinoHQLevel && 1 <= a.gambling_lodging_division && 1 <= a.numberOfElegantCasinos
      }
    },
    3661420485 : {
      importance : 9,
      triggerTime : [5, 10],
      iconPath : "icn-balloons-casino.png",
      displayCountLimit : 10,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiAcceptSpecialization.js",
      speechBalloonTarget : 1482763029,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 605057613, 1790307499], [simcity.kLocalSpeechBalloonLocaleTable, 605057612], [simcity.kLocalSpeechBalloonLocaleTable, 605057615]],
      expirationTime : [-1, -1],
      missionUnitID : 1107858836,
      vignetteActorPalette : 4187961950,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_Special_male_006,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json",
        "0x1efd9efe", "Mission title missing: MSBusinessGamblingBigGamble17"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 3696292700],
        gambling_specialized : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Gambling],
        CasinoHQLevel : [simcity.kDataBinAmount, simcity.kResourceIDHQ_Casino_Level],
        gambling_lodging_division : [simcity.kDataBinAmount, simcity.kResourceIDHQ_Casino_Lodging_Module_IsOn],
        numberOfElegantCasinos : [simcity.kDataResourceAmount, simcity.kResourceIDNumberOfElegantCasinos],
        numberOfExclusiveClubs : [simcity.kDataResourceAmount,
          simcity.kResourceIDNumberOfCasinoExclusiveClubs],
        numberOfRouletteRooms : [simcity.kDataResourceAmount, simcity.kResourceIDNumberOfCasinoRouletteRooms]
      },
      test : function (a) {
        return !a ? !1 : 1 === a.gambling_specialized && 4 === a.CasinoHQLevel && 1 <= a.gambling_lodging_division && 1 <= a.numberOfElegantCasinos && 1 <= a.numberOfExclusiveClubs && 1 <= a.numberOfRouletteRooms
      }
    },
    4255844229 : {
      importance : 9,
      triggerTime : [30, 45],
      iconPath : "icn-balloons-bus.png",
      displayCountLimit : 3,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiAcceptSpecialization.js",
      speechBalloonTarget : 442264791,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1271363725, 2556729762], [simcity.kLocalSpeechBalloonLocaleTable, 1271363724]],
      expirationTime : [-1, -1],
      missionUnitID : 826664370,
      vignetteActorPalette : 1474136044,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_Special_male_002,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0xf4787900", "Mission title missing: MSBusinessGamblingBigGamble2"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 1642057162],
        gambling_specialized : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Gambling],
        casinos : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfCasinos],
        gamblers_satisfied : [simcity.kDataResourceAmount, simcity.kResourceIDGamblerW1Satisfied]
      },
      test : function (a) {
        return !a ? !1 : 1 === a.gambling_specialized && 1 <= a.casinos && 80 <= a.gamblers_satisfied
      }
    },
    4255844228 : {
      importance : 9,
      triggerTime : [5, 10],
      iconPath : "icn-balloons-casino.png",
      displayCountLimit : 3,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiAcceptSpecialization.js",
      speechBalloonTarget : 565270209,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 3065482814, 1790307499], [simcity.kLocalSpeechBalloonLocaleTable, 3065482815], [simcity.kLocalSpeechBalloonLocaleTable, 3065482812]],
      expirationTime : [-1, -1],
      missionUnitID : 826664371,
      vignetteActorPalette : 4187961950,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_Special_male_006,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x95f70ac7", "Mission title missing: MSBusinessGamblingBigGamble3"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 1642057163],
        gambling_specialized : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Gambling],
        casinos : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfCasinos],
        casinoSigns : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfCasinoSigns]
      },
      test : function (a) {
        return !a ? !1 : 1 === a.gambling_specialized && 1 <= a.casinos && 0 === a.casinoSigns
      }
    },
    4255844227 : {
      importance : 9,
      triggerTime : [5, 10],
      iconPath : "icn-balloons-casino.png",
      displayCountLimit : 3,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiAcceptSpecialization.js",
      speechBalloonTarget : 565270209,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1803426803, 1790307499], [simcity.kLocalSpeechBalloonLocaleTable, 1803426802], [simcity.kLocalSpeechBalloonLocaleTable, 1803426801]],
      expirationTime : [-1, -1],
      missionUnitID : 826664372,
      vignetteActorPalette : 4187961950,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_Special_male_006,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0xff72d19e", "Mission title missing: MSBusinessGamblingBigGamble4"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 1642057164],
        gambling_specialized : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Gambling],
        casinoHQ_built : [simcity.kDataResourceAmount, simcity.kResourceIDHQ_Casino_Built],
        casinos : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfCasinos],
        gamblers_satisfied : [simcity.kDataResourceAmount, simcity.kResourceIDGamblerW1Satisfied]
      },
      test : function (a) {
        return !a ? !1 : 1 === a.gambling_specialized && 0 === a.casinoHQ_built && 1 <= a.casinos && 120 <= a.gamblers_satisfied
      }
    },
    4255844226 : {
      importance : 9,
      triggerTime : [5, 10],
      iconPath : "icn-balloons-casino.png",
      displayCountLimit : 3,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiAcceptSpecialization.js",
      speechBalloonTarget : 1482763029,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2565766940, 1790307499], [simcity.kLocalSpeechBalloonLocaleTable, 2565766941]],
      expirationTime : [-1, -1],
      missionUnitID : 826664373,
      vignetteActorPalette : 4187961950,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_Special_male_006,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json",
        "0x5e85663d", "Mission title missing: MSBusinessGamblingBigGamble5"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 1642057165],
        gambling_specialized : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Gambling],
        lady_mugged : [simcity.kDataResourceAmount, simcity.kResourceIDGlobalMission_MSBusinessGamblingBigGamble5_Event]
      },
      test : function (a) {
        return !a ? !1 : 1 === a.gambling_specialized && 1 === a.lady_mugged
      }
    },
    4255844225 : {
      importance : 9,
      triggerTime : [5, 10],
      iconPath : "icn-balloons-casino.png",
      displayCountLimit : 3,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiAcceptSpecialization.js",
      speechBalloonTarget : 1482763029,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 4196797673, 1790307499], [simcity.kLocalSpeechBalloonLocaleTable, 4196797672], [simcity.kLocalSpeechBalloonLocaleTable, 4196797675]],
      expirationTime : [-1, -1],
      missionUnitID : 826664374,
      vignetteActorPalette : 4187961950,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_Special_male_006,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json",
        "0x8232006c", "Mission title missing: MSBusinessGamblingBigGamble6"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 1642057166],
        gambling_specialized : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Gambling],
        CasinoHQLevel : [simcity.kDataBinAmount, simcity.kResourceIDHQ_Casino_Level],
        gambling_games_division_built : [simcity.kDataBinAmount, simcity.kResourceIDHQ_Casino_Games_Module_Built]
      },
      test : function (a) {
        return !a ? !1 : 1 === a.gambling_specialized && 1 === a.CasinoHQLevel && 0 === a.gambling_games_division_built
      }
    },
    4255844224 : {
      importance : 9,
      triggerTime : [5, 10],
      iconPath : "icn-balloons-casino.png",
      displayCountLimit : 3,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiAcceptSpecialization.js",
      speechBalloonTarget : 1482763029,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1545053450, 1790307499], [simcity.kLocalSpeechBalloonLocaleTable, 1545053451], [simcity.kLocalSpeechBalloonLocaleTable, 1545053448]],
      expirationTime : [-1, -1],
      missionUnitID : 826664375,
      vignetteActorPalette : 4187961950,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_Special_male_006,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0xce09ee03", "Mission title missing: MSBusinessGamblingBigGamble7"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 1642057167],
        gambling_specialized : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Gambling],
        CasinoHQLevel : [simcity.kDataBinAmount, simcity.kResourceIDHQ_Casino_Level],
        gambling_games_division : [simcity.kDataBinAmount, simcity.kResourceIDHQ_Casino_Games_Module_IsOn]
      },
      test : function (a) {
        return !a ? !1 : 1 === a.gambling_specialized &&
        2 === a.CasinoHQLevel && 1 <= a.gambling_games_division
      }
    },
    4255844239 : {
      importance : 9,
      triggerTime : [5, 10],
      iconPath : "icn-balloons-trains.png",
      displayCountLimit : 3,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiAcceptSpecialization.js",
      speechBalloonTarget : 442264791,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1915016127, 2556729762], [simcity.kLocalSpeechBalloonLocaleTable, 1915016126]],
      expirationTime : [-1, -1],
      missionUnitID : 826664376,
      vignetteActorPalette : 1474136044,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_Special_male_002,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x1d4aeb9a", "Mission title missing: MSBusinessGamblingBigGamble8"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 1642057152],
        gambling_specialized : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Gambling],
        rail_in_box : [simcity.kDataResourceAmount, simcity.kResourceIDNumberOfRailConnections],
        numberOfTrains : [simcity.kDataResourceAmount, simcity.kResourceIDNumberOfTrainT2Stops],
        numberOfBusT2Garages : [simcity.kDataResourceAmount,
          simcity.kResourceIDNumberOfBusT2Garages]
      },
      test : function (a) {
        return !a ? !1 : 1 === a.gambling_specialized && 1 <= a.rail_in_box && 0 === a.numberOfTrains && 1 <= a.numberOfBusT2Garages
      }
    },
    4255844238 : {
      importance : 9,
      triggerTime : [5, 10],
      iconPath : "icn-balloons-casino.png",
      displayCountLimit : 3,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiAcceptSpecialization.js",
      speechBalloonTarget : 1482763029,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 3053001624, 1790307499], [simcity.kLocalSpeechBalloonLocaleTable, 3053001625], [simcity.kLocalSpeechBalloonLocaleTable,
          3053001626]],
      expirationTime : [-1, -1],
      missionUnitID : 826664377,
      vignetteActorPalette : 4187961950,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_Special_male_006,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x70a40619", "Mission title missing: MSBusinessGamblingBigGamble9"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 1642057153],
        gambling_specialized : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Gambling],
        CasinoHQLevel : [simcity.kDataBinAmount, simcity.kResourceIDHQ_Casino_Level],
        gambling_games_division : [simcity.kDataBinAmount, simcity.kResourceIDHQ_Casino_Games_Module_IsOn],
        numberOfStripCasinoAs : [simcity.kDataResourceAmount, simcity.kResourceIDNumberOfStripCasinoAs],
        casino_income : [simcity.kDataResourceAmount, simcity.kResourceIDIncomeFromCasinosTotal]
      },
      test : function (a) {
        return !a ? !1 : 1 === a.gambling_specialized && 2 === a.CasinoHQLevel && 1 <= a.gambling_games_division && 0 === a.numberOfStripCasinoAs && 5E3 <= a.casino_income
      }
    }
  }
};
simcity.SpeechBalloonPolling.Specialization_Metals = {
  unlockBin : simcity.kResourceIDSpecialization_Metals,
  unlockEvent : simcity.kEventIDUnlock_Specialization_Metals,
  DataBindings : {
    4280103498 : {
      importance : 9,
      triggerTime : [5, 10],
      iconPath : "icn-balloons-coal.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiAcceptSpecialization.js",
      speechBalloonTarget : 416754379,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 3829862436, 2070619713], [simcity.kLocalSpeechBalloonLocaleTable, 3829862437],
        [simcity.kLocalSpeechBalloonLocaleTable, 3829862438]],
      expirationTime : [-1, -1],
      missionUnitID : 2332427503,
      vignetteActorPalette : 1225280358,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_Special_male_003,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x04be1deb", "Mission title missing: MSBusinessMetalsCoalTown1"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 995763111],
        metals_specialized : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Metals],
        coalmines_built : [simcity.kDataBinAmount,
          simcity.kResourceIDCoalMinesBuilt_T1]
      },
      test : function (a) {
        return !a ? !1 : 1 === a.metals_specialized && 0 === a.coalmines_built
      }
    },
    3841337934 : {
      importance : 9,
      triggerTime : [5, 10],
      iconPath : "icn-balloons-coal.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiAcceptSpecialization.js",
      speechBalloonTarget : 1953260309,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 3680647896, 660906784], [simcity.kLocalSpeechBalloonLocaleTable, 3680647897], [simcity.kLocalSpeechBalloonLocaleTable, 3680647898]],
      expirationTime : [-1, -1],
      missionUnitID : 3380200461,
      vignetteActorPalette : 1225280358,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_Special_male_003,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0xcd3c8f05", "Mission title missing: MSBusinessMetalsCoalTown10"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 367402965],
        metals_specialized : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Metals],
        mining_HQ_level : [simcity.kDataResourceAmount, simcity.kResourceIDHQ_Mining_Level],
        SmeltingDivision : [simcity.kDataBinAmount, simcity.kResourceIDHQ_Mining_RnD_Module_IsOn]
      },
      test : function (a) {
        return !a ? !1 : 1 === a.metals_specialized && 3 === a.mining_HQ_level && 1 === a.SmeltingDivision
      }
    },
    3841337935 : {
      importance : 9,
      triggerTime : [5, 10],
      iconPath : "icn-balloons-coal.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiAcceptSpecialization.js",
      speechBalloonTarget : 1953260309,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2118204927, 2070619713], [simcity.kLocalSpeechBalloonLocaleTable,
          2118204926]],
      expirationTime : [-1, -1],
      missionUnitID : 3380200460,
      vignetteActorPalette : 1225280358,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_Special_male_003,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0xba31f8e6", "Mission title missing: MSBusinessMetalsCoalTown11"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 367402964],
        metals_specialized : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Metals],
        mining_HQ_level : [simcity.kDataResourceAmount,
          simcity.kResourceIDHQ_Mining_Level],
        commerce_division : [simcity.kDataBinAmount, simcity.kResourceIDHQ_Mining_Commerce_Module_IsOn],
        oreLot : [simcity.kDataBinAmount, simcity.kResourceIDNumImExOreRawLots]
      },
      test : function (a) {
        return !a ? !1 : 1 === a.metals_specialized && 3 === a.mining_HQ_level && 0 === a.commerce_division && 1 <= a.oreLot
      }
    },
    3841337932 : {
      importance : 9,
      triggerTime : [5, 10],
      iconPath : "icn-balloons-coal.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiAcceptSpecialization.js",
      speechBalloonTarget : 1953260309,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 357374374, 2070619713], [simcity.kLocalSpeechBalloonLocaleTable, 357374375], [simcity.kLocalSpeechBalloonLocaleTable, 357374372]],
      expirationTime : [-1, -1],
      missionUnitID : 3380200463,
      vignetteActorPalette : 1225280358,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_Special_male_003,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0xa424958b", "Mission title missing: MSBusinessMetalsCoalTown12"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount,
          367402967],
        metals_specialized : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Metals],
        mining_HQ_level : [simcity.kDataResourceAmount, simcity.kResourceIDHQ_Mining_Level],
        SmeltingDivision : [simcity.kDataBinAmount, simcity.kResourceIDHQ_Mining_RnD_Module_IsOn],
        oreLot : [simcity.kDataBinAmount, simcity.kResourceIDNumImExOreRawLots]
      },
      test : function (a) {
        return !a ? !1 : 1 === a.metals_specialized && 3 === a.mining_HQ_level && 1 === a.SmeltingDivision && 1 <= a.oreLot
      }
    },
    3841337933 : {
      importance : 9,
      triggerTime : [5, 10],
      iconPath : "icn-balloons-coal.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiAcceptSpecialization.js",
      speechBalloonTarget : 1953260309,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 221728245, 3654894696], [simcity.kLocalSpeechBalloonLocaleTable, 221728244], [simcity.kLocalSpeechBalloonLocaleTable, 221728247]],
      expirationTime : [-1, -1],
      missionUnitID : 3380200462,
      vignetteActorPalette : 1225280358,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_Special_male_003,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json",
        "0x510c5c14", "Mission title missing: MSBusinessMetalsCoalTown13"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 367402966],
        metals_specialized : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Metals],
        mining_HQ_level : [simcity.kDataResourceAmount, simcity.kResourceIDHQ_Mining_Level],
        commerce_division : [simcity.kDataBinAmount, simcity.kResourceIDHQ_Mining_Commerce_Module_IsOn]
      },
      test : function (a) {
        return !a ? !1 : 1 === a.metals_specialized && 4 === a.mining_HQ_level && 1 === a.commerce_division
      }
    },
    3841337930 : {
      importance : 9,
      triggerTime : [5, 10],
      iconPath : "icn-balloons-coal.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiAcceptSpecialization.js",
      speechBalloonTarget : 1953260309,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 3981703204, 2070619713], [simcity.kLocalSpeechBalloonLocaleTable, 3981703205]],
      expirationTime : [-1, -1],
      missionUnitID : 3380200457,
      vignetteActorPalette : 1225280358,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_Special_male_003,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json",
        "0xa1912cc9", "Mission title missing: MSBusinessMetalsCoalTown14"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 367402961],
        metals_specialized : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Metals],
        mining_HQ_level : [simcity.kDataResourceAmount, simcity.kResourceIDHQ_Mining_Level],
        NumImExT2 : [simcity.kDataBinAmount, simcity.kResourceIDNumImExT2]
      },
      test : function (a) {
        return !a ? !1 : 1 === a.metals_specialized && 4 === a.mining_HQ_level && 1 <= a.NumImExT2
      }
    },
    3841337931 : {
      importance : 9,
      triggerTime : [5, 10],
      iconPath : "icn-balloons-coal.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiAcceptSpecialization.js",
      speechBalloonTarget : 1953260309,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 743448635, 660906784]],
      expirationTime : [-1, -1],
      missionUnitID : 3380200456,
      vignetteActorPalette : 1225280358,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_Special_male_003,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x8e36e38a", "Mission title missing: MSBusinessMetalsCoalTown15"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 367402960],
        metals_specialized : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Metals],
        mining_HQ_level : [simcity.kDataResourceAmount, simcity.kResourceIDHQ_Mining_Level],
        NumImExT2 : [simcity.kDataBinAmount, simcity.kResourceIDNumImExT2],
        NumberOfRailConnections : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfRailConnections],
        NumberOfImExModulesRail : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfImExModulesRail]
      },
      test : function (a) {
        return !a ?
        !1 : 1 === a.metals_specialized && 4 === a.mining_HQ_level && 0 === a.NumberOfImExModulesRail && 1 <= a.NumImExT2 && 1 <= a.NumberOfRailConnections
      }
    },
    3841337928 : {
      importance : 9,
      triggerTime : [5, 10],
      iconPath : "icn-balloons-coal.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiAcceptSpecialization.js",
      speechBalloonTarget : 1953260309,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 616956146, 2070619713], [simcity.kLocalSpeechBalloonLocaleTable, 616956147]],
      expirationTime : [-1, -1],
      missionUnitID : 3380200459,
      vignetteActorPalette : 1225280358,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_Special_male_003,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0xe4af942f", "Mission title missing: MSBusinessMetalsCoalTown16"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 367402963],
        metals_specialized : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Metals],
        mining_HQ_level : [simcity.kDataResourceAmount, simcity.kResourceIDHQ_Mining_Level],
        NumImExT2 : [simcity.kDataBinAmount,
          simcity.kResourceIDNumImExT2],
        NumberOfBoatConnections : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfBoatConnections],
        NumberOfImExModulesBoat : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfImExModulesBoat]
      },
      test : function (a) {
        return !a ? !1 : 1 === a.metals_specialized && 4 === a.mining_HQ_level && 1 <= a.NumImExT2 && 1 <= a.NumberOfBoatConnections && 0 === a.NumberOfImExModulesBoat
      }
    },
    4280103497 : {
      importance : 9,
      triggerTime : [5, 10],
      iconPath : "icn-balloons-coal.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiAcceptSpecialization.js",
      unitID : 2242242908,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 794074065, 918828913], [simcity.kLocalSpeechBalloonLocaleTable, 794074064], [simcity.kLocalSpeechBalloonLocaleTable, 794074067]],
      expirationTime : [-1, -1],
      missionUnitID : 2332427500,
      vignetteActorPalette : 2708212569,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_Special_female_002,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x4708fe46", "Mission title missing: MSBusinessMetalsCoalTown2"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount,
          995763108],
        metals_specialized : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Metals],
        HospitalsBuilt : [simcity.kDataBinAmount, simcity.kResourceIDHospitalsBuilt]
      },
      test : function (a) {
        return !a ? !1 : 1 === a.metals_specialized && 0 === a.HospitalsBuilt
      }
    },
    4280103496 : {
      importance : 9,
      triggerTime : [5, 10],
      iconPath : "icn-balloons-coal.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiAcceptSpecialization.js",
      unitID : 2242242908,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 465115378,
          660906784], [simcity.kLocalSpeechBalloonLocaleTable, 465115379]],
      expirationTime : [-1, -1],
      missionUnitID : 2332427501,
      vignetteActorPalette : 1225280358,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_Special_male_003,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x5c8dfe65", "Mission title missing: MSBusinessMetalsCoalTown3"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 995763109],
        metals_specialized : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Metals],
        coalMines : [simcity.kDataResourceAmount, simcity.kResourceIDCoalMinesBuilt],
        imEx : [simcity.kDataBinAmount, simcity.kResourceIDNumImEx],
        coalHarvested : [simcity.kDataBinAmount, simcity.kResourceIDCoalHarvested]
      },
      test : function (a) {
        return !a ? !1 : 1 === a.metals_specialized && 1 <= a.coalMines && 1 <= a.coalHarvested && 0 === a.imEx
      }
    },
    4280103503 : {
      importance : 9,
      triggerTime : [5, 10],
      iconPath : "icn-balloons-coal.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiAcceptSpecialization.js",
      unitID : 2242242908,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1966364159, 660906784], [simcity.kLocalSpeechBalloonLocaleTable, 1966364158], [simcity.kLocalSpeechBalloonLocaleTable, 1966364157]],
      expirationTime : [-1, -1],
      missionUnitID : 2332427498,
      vignetteActorPalette : 1225280358,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_Special_male_003,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x4a4ec828", "Mission title missing: MSBusinessMetalsCoalTown4"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount,
          995763106],
        metals_specialized : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Metals],
        coalmines_built : [simcity.kDataBinAmount, simcity.kResourceIDCoalMinesBuilt_T1],
        mining_HQ_built : [simcity.kDataResourceAmount, simcity.kResourceIDHQ_Mining_Built],
        imEx : [simcity.kDataBinAmount, simcity.kResourceIDNumImEx],
        stuffMined : [simcity.kDataBinAmount, simcity.kResourceIDStuffMinedPerDay]
      },
      test : function (a) {
        return !a ? !1 : 1 === a.metals_specialized && 1 <= a.coalmines_built && 0 === a.mining_HQ_built && 1 <= a.imEx &&
        48E3 <= a.stuffMined
      }
    },
    4280103502 : {
      importance : 9,
      triggerTime : [5, 10],
      iconPath : "icn-balloons-coal.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiAcceptSpecialization.js",
      speechBalloonTarget : 442264791,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 3528807128, 918828913], [simcity.kLocalSpeechBalloonLocaleTable, 3528807129], [simcity.kLocalSpeechBalloonLocaleTable, 3528807130]],
      expirationTime : [-1, -1],
      missionUnitID : 2332427499,
      vignetteActorPalette : 2708212569,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_Special_female_002,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x47c1f18f", "Mission title missing: MSBusinessMetalsCoalTown5"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 995763107],
        metals_specialized : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Metals],
        DOS : [simcity.kDataBinAmount, simcity.kResourceIDHQ_CityHall_Safety_Module_IsOn],
        HospitalsBuilt : [simcity.kDataBinAmount, simcity.kResourceIDHospitalsBuilt]
      },
      test : function (a) {
        return !a ? !1 : 1 === a.metals_specialized && 0 === a.DOS && 1 <= a.HospitalsBuilt
      }
    },
    4280103501 : {
      importance : 9,
      triggerTime : [5, 10],
      iconPath : "icn-balloons-coal.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiAcceptSpecialization.js",
      unitID : 2242242908,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 69887477, 988096843], [simcity.kLocalSpeechBalloonLocaleTable, 69887476]],
      expirationTime : [-1, -1],
      missionUnitID : 2332427496,
      vignetteActorPalette : 2708212569,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_Special_female_002,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json",
        "0xeeced8ea", "Mission title missing: MSBusinessMetalsCoalTown6"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 995763104],
        metals_specialized : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Metals],
        mine_collapsed : [simcity.kDataResourceAmount, simcity.kResourceIDGlobalMission_MSBusinessMetalsCoalTown6_EventStarted]
      },
      test : function (a) {
        return !a ? !1 : 1 === a.metals_specialized && 1 === a.mine_collapsed
      }
    },
    4280103500 : {
      importance : 9,
      triggerTime : [5, 10],
      iconPath : "icn-balloons-coal.png",
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiAcceptSpecialization.js",
      speechBalloonTarget : 1953260309,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 205533606, 660906784], [simcity.kLocalSpeechBalloonLocaleTable, 205533607], [simcity.kLocalSpeechBalloonLocaleTable, 205533604]],
      expirationTime : [-1, -1],
      missionUnitID : 2332427497,
      vignetteActorPalette : 1225280358,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_Special_male_003,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x04a38a29", "Mission title missing: MSBusinessMetalsCoalTown7"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount,
          995763105],
        metals_specialized : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Metals],
        metals_HQLevel : [simcity.kDataResourceAmount, simcity.kResourceIDHQ_Mining_Level],
        metals_HQEngineeringDivision : [simcity.kDataBinAmount, simcity.kResourceIDHQ_Mining_Engineering_Module_IsOn]
      },
      test : function (a) {
        return !a ? !1 : 1 === a.metals_specialized && 1 === a.metals_HQLevel && 0 === a.metals_HQEngineeringDivision
      }
    },
    4280103491 : {
      importance : 9,
      triggerTime : [5, 10],
      iconPath : "icn-balloons-coal.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiAcceptSpecialization.js",
      speechBalloonTarget : 1953260309,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1896351539, 2070619713], [simcity.kLocalSpeechBalloonLocaleTable, 1896351538]],
      expirationTime : [-1, -1],
      missionUnitID : 2332427494,
      vignetteActorPalette : 1225280358,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_Special_male_003,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x4ea058fc", "Mission title missing: MSBusinessMetalsCoalTown8"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 995763118],
        metals_specialized : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Metals],
        mining_HQ_level : [simcity.kDataResourceAmount, simcity.kResourceIDHQ_Mining_Level],
        EngineeringDivision : [simcity.kDataBinAmount, simcity.kResourceIDHQ_Mining_Engineering_Module_IsOn]
      },
      test : function (a) {
        return !a ? !1 : 1 === a.metals_specialized && 2 === a.mining_HQ_level && 1 === a.EngineeringDivision
      }
    },
    4280103490 : {
      importance : 9,
      triggerTime : [5, 10],
      iconPath : "icn-balloons-coal.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiAcceptSpecialization.js",
      speechBalloonTarget : 1953260309,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2617114972, 2070619713], [simcity.kLocalSpeechBalloonLocaleTable, 2617114973], [simcity.kLocalSpeechBalloonLocaleTable, 2617114974]],
      expirationTime : [-1, -1],
      missionUnitID : 2332427495,
      vignetteActorPalette : 1225280358,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_Special_male_003,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x9f8f6d93", "Mission title missing: MSBusinessMetalsCoalTown9"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 995763119],
        metals_specialized : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Metals],
        mining_HQ_level : [simcity.kDataResourceAmount, simcity.kResourceIDHQ_Mining_Level],
        SmeltingDivision : [simcity.kDataBinAmount, simcity.kResourceIDHQ_Mining_RnD_Module_IsOn],
        coalT2 : [simcity.kDataResourceAmount, simcity.kResourceIDCoalMinesBuilt_T2]
      },
      test : function (a) {
        return !a ? !1 : 1 === a.metals_specialized && 2 === a.mining_HQ_level && 0 === a.SmeltingDivision && 1 <= a.coalT2
      }
    }
  }
};
simcity.SpeechBalloonPolling.Specialization_Petroleum = {
  unlockBin : simcity.kResourceIDSpecialization_Petroleum,
  unlockEvent : simcity.kEventIDUnlock_Specialization_Petroleum,
  DataBindings : {
    3411992100 : {
      importance : 9,
      triggerTime : [5, 10],
      iconPath : "icn-balloons-oil.png",
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiAcceptSpecialization.js",
      speechBalloonTarget : 416754379,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2398383326, 2289557600], [simcity.kLocalSpeechBalloonLocaleTable, 2398383327], [simcity.kLocalSpeechBalloonLocaleTable,
          2398383324]],
      expirationTime : [-1, -1],
      missionUnitID : 1266731061,
      vignetteActorPalette : 1036112034,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_Special_female_001,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x6fb16dbd", "Mission title missing: MSBusinessOilOilFields1"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 892324973],
        petroleum_specialized : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Petroleum],
        oilwells_built : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfOilWells]
      },
      test : function (a) {
        return !a ? !1 : 1 === a.petroleum_specialized && 0 === a.oilwells_built
      }
    },
    1247261340 : {
      importance : 9,
      triggerTime : [5, 10],
      iconPath : "icn-balloons-oil.png",
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiAcceptSpecialization.js",
      unitID : 501883312,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 3113698742, 3461138857], [simcity.kLocalSpeechBalloonLocaleTable, 3113698743], [simcity.kLocalSpeechBalloonLocaleTable, 3113698740]],
      expirationTime : [-1, -1],
      missionUnitID : 280701791,
      vignetteActorPalette : 1036112034,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_Special_female_001,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x9e1d33bb", "Mission title missing: MSBusinessOilOilFields10"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 658427815],
        petroleum_specialized : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Petroleum],
        oilHQ_level : [simcity.kDataResourceAmount, simcity.kResourceIDHQ_Oil_Level],
        NumOilRefinery : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfOilManufacturingBases],
        fuelAssemblers : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfFuelAssemblers]
      },
      test : function (a) {
        return !a ? !1 : 1 === a.petroleum_specialized && 2 === a.oilHQ_level && 1 <= a.NumOilRefinery && 1 <= a.fuelAssemblers
      }
    },
    1247261341 : {
      importance : 9,
      triggerTime : [5, 10],
      iconPath : "icn-balloons-trade.png",
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiAcceptSpecialization.js",
      unitID : 501883312,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 316223109, 3461138857], [simcity.kLocalSpeechBalloonLocaleTable, 316223108], [simcity.kLocalSpeechBalloonLocaleTable,
          316223111]],
      expirationTime : [-1, -1],
      missionUnitID : 280701790,
      vignetteActorPalette : 1036112034,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_Special_female_001,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x0d079e04", "Mission title missing: MSBusinessOilOilFields11"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 658427814],
        petroleum_specialized : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Petroleum],
        oilHQ_level : [simcity.kDataResourceAmount,
          simcity.kResourceIDHQ_Oil_Level],
        oil_commerce_built : [simcity.kDataBinAmount, simcity.kResourceIDHQ_Oil_Commerce_Module_Built]
      },
      test : function (a) {
        return !a ? !1 : 1 === a.petroleum_specialized && 3 === a.oilHQ_level && 1 === a.oil_commerce_built
      }
    },
    1247261342 : {
      importance : 9,
      triggerTime : [5, 10],
      iconPath : "icn-balloons-rail.png",
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiAcceptSpecialization.js",
      unitID : 501883312,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2142004968, 2289557600], [simcity.kLocalSpeechBalloonLocaleTable,
          2142004969], [simcity.kLocalSpeechBalloonLocaleTable, 2142004970]],
      expirationTime : [-1, -1],
      missionUnitID : 280701789,
      vignetteActorPalette : 1036112034,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_Special_female_001,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0xd13f9335", "Mission title missing: MSBusinessOilOilFields12"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 658427813],
        petroleum_specialized : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Petroleum],
        oilHQ_level : [simcity.kDataResourceAmount, simcity.kResourceIDHQ_Oil_Level],
        NumImExT2 : [simcity.kDataBinAmount, simcity.kResourceIDNumImExT2],
        NumberOfImExModulesRail : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfImExModulesRail],
        rail_in_box : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfRailConnections]
      },
      test : function (a) {
        return !a ? !1 : 1 === a.petroleum_specialized && 3 === a.oilHQ_level && 1 <= a.NumImExT2 && 0 === a.NumberOfImExModulesRail && 1 <= a.rail_in_box
      }
    },
    1247261343 : {
      importance : 9,
      triggerTime : [5, 10],
      iconPath : "icn-balloons-trade.png",
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiAcceptSpecialization.js",
      unitID : 501883312,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1563492815, 3461138857], [simcity.kLocalSpeechBalloonLocaleTable, 1563492814], [simcity.kLocalSpeechBalloonLocaleTable, 1563492813]],
      expirationTime : [-1, -1],
      missionUnitID : 280701788,
      vignetteActorPalette : 1036112034,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_Special_female_001,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json",
        "0x7bba2ed6", "Mission title missing: MSBusinessOilOilFields13"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 658427812],
        petroleum_specialized : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Petroleum],
        oilHQ_level : [simcity.kDataResourceAmount, simcity.kResourceIDHQ_Oil_Level],
        NumImExT2 : [simcity.kDataBinAmount, simcity.kResourceIDNumImExT2],
        NumberOfImExModulesBoat : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfImExModulesBoat],
        water_in_box : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfBoatConnections]
      },
      test : function (a) {
        return !a ? !1 : 1 === a.petroleum_specialized && 3 === a.oilHQ_level && 1 <= a.NumImExT2 && 0 === a.NumberOfImExModulesBoat && 1 <= a.water_in_box
      }
    },
    3411992103 : {
      importance : 9,
      triggerTime : [5, 10],
      iconPath : "icn-balloons-oil.png",
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiAcceptSpecialization.js",
      unitID : 359333168,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 356263671, 3461138857], [simcity.kLocalSpeechBalloonLocaleTable, 356263670], [simcity.kLocalSpeechBalloonLocaleTable, 356263669]],
      expirationTime : [-1,
        -1],
      missionUnitID : 1266731062,
      vignetteActorPalette : 1036112034,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_Special_female_001,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x935e07ec", "Mission title missing: MSBusinessOilOilFields2"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 892324974],
        petroleum_specialized : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Petroleum],
        oilwells_built : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfOilWells],
        oilHQs_built : [simcity.kDataBinAmount, simcity.kResourceIDHQ_Oil_Built]
      },
      test : function (a) {
        return !a ? !1 : 1 === a.petroleum_specialized && 1 <= a.oilwells_built && 0 === a.oilHQs_built
      }
    },
    3411992102 : {
      importance : 9,
      triggerTime : [5, 10],
      iconPath : "icn-balloons-oil.png",
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiAcceptSpecialization.js",
      unitID : 359333168,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 844252656, 2289557600], [simcity.kLocalSpeechBalloonLocaleTable, 844252657], [simcity.kLocalSpeechBalloonLocaleTable,
          844252658]],
      expirationTime : [-1, -1],
      missionUnitID : 1266731063,
      vignetteActorPalette : 1036112034,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_Special_female_001,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0xdf35f583", "Mission title missing: MSBusinessOilOilFields3"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 892324975],
        petroleum_specialized : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Petroleum],
        oilHQs_built : [simcity.kDataBinAmount, simcity.kResourceIDHQ_Oil_Built],
        oilwells_built : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfOilWells],
        oil_income : [simcity.kDataResourceAmount, simcity.kResourceIDTotalIncomeFromTradingGlobalMarketOilCrude]
      },
      test : function (a) {
        return !a ? !1 : 1 === a.petroleum_specialized && 0 === a.oilHQs_built && 1 <= a.oilwells_built && 6E4 <= a.oil_income
      }
    },
    3411992097 : {
      importance : 9,
      triggerTime : [5, 10],
      iconPath : "icn-balloons-oil.png",
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiAcceptSpecialization.js",
      unitID : 501883312,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable,
          2787367561, 2289557600], [simcity.kLocalSpeechBalloonLocaleTable, 2787367560], [simcity.kLocalSpeechBalloonLocaleTable, 2787367563]],
      expirationTime : [-1, -1],
      missionUnitID : 1266731056,
      vignetteActorPalette : 1036112034,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_Special_female_001,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x651fc282", "Mission title missing: MSBusinessOilOilFields4"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 892324968],
        petroleum_specialized : [simcity.kDataResourceAmount,
          simcity.kResourceIDSpecialization_Petroleum],
        oilHQ_level : [simcity.kDataResourceAmount, simcity.kResourceIDHQ_Oil_Level]
      },
      test : function (a) {
        return !a ? !1 : 1 === a.petroleum_specialized && 1 === a.oilHQ_level
      }
    },
    3411992096 : {
      importance : 9,
      triggerTime : [5, 10],
      iconPath : "icn-balloons-government.png",
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiAcceptSpecialization.js",
      speechBalloonTarget : 442264791,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 518607402, 151290895], [simcity.kLocalSpeechBalloonLocaleTable, 518607403],
        [simcity.kLocalSpeechBalloonLocaleTable, 518607400]],
      expirationTime : [-1, -1],
      missionUnitID : 1266731057,
      vignetteActorPalette : 3589679452,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_POLITICIAN_MALE_002,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x181a2b41", "Mission title missing: MSBusinessOilOilFields5"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 892324969],
        petroleum_specialized : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Petroleum],
        oilHQ_level : [simcity.kDataResourceAmount,
          simcity.kResourceIDHQ_Oil_Level],
        oil_pumpjacks : [simcity.kDataResourceAmount, simcity.kResourceIDNumberOfOilPumpjacks]
      },
      test : function (a) {
        return !a ? !1 : 1 === a.petroleum_specialized && 1 === a.oilHQ_level && 10 <= a.oil_pumpjacks
      }
    },
    3411992099 : {
      importance : 9,
      triggerTime : [5, 10],
      iconPath : "icn-balloons-fire.png",
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiAcceptSpecialization.js",
      speechBalloonTarget : 442264791,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1136430483, 1710235946], [simcity.kLocalSpeechBalloonLocaleTable,
          1136430482], [simcity.kLocalSpeechBalloonLocaleTable, 1136430481]],
      expirationTime : [-1, -1],
      missionUnitID : 1266731058,
      vignetteActorPalette : 3589679452,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_POLITICIAN_MALE_002,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x05a48080", "Mission title missing: MSBusinessOilOilFields6"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 892324970],
        petroleum_specialized : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Petroleum],
        safety_dept : [simcity.kDataResourceAmount, simcity.kResourceIDHQ_CityHall_Safety_Module_IsOn],
        fire_started : [simcity.kDataResourceAmount, simcity.kResourceIDGlobalMission_MSBusinessOilOilFields6_EventStarted]
      },
      test : function (a) {
        return !a ? !1 : 1 === a.petroleum_specialized && 1 === a.safety_dept && 1 === a.fire_started
      }
    },
    3411992098 : {
      importance : 9,
      triggerTime : [300, 300],
      iconPath : "icn-balloons-oil.png",
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiAcceptSpecialization.js",
      unitID : 501883312,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable,
          1898770748, 2289557600], [simcity.kLocalSpeechBalloonLocaleTable, 1898770749], [simcity.kLocalSpeechBalloonLocaleTable, 1898770750]],
      expirationTime : [-1, -1],
      missionUnitID : 1266731059,
      vignetteActorPalette : 1036112034,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_Special_female_001,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0xa7231247", "Mission title missing: MSBusinessOilOilFields7"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 892324971],
        petroleum_specialized : [simcity.kDataResourceAmount,
          simcity.kResourceIDSpecialization_Petroleum],
        oilHQ_level : [simcity.kDataResourceAmount, simcity.kResourceIDHQ_Oil_Level]
      },
      test : function (a) {
        return !a ? !1 : 1 === a.petroleum_specialized && 1 === a.oilHQ_level
      }
    },
    3411992109 : {
      importance : 9,
      triggerTime : [5, 10],
      iconPath : "icn-balloons-plastic.png",
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiAcceptSpecialization.js",
      unitID : 501883312,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2904179797, 3461138857], [simcity.kLocalSpeechBalloonLocaleTable, 2904179796]],
      expirationTime : [-1,
        -1],
      missionUnitID : 1266731068,
      vignetteActorPalette : 1036112034,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_Special_female_001,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x063a8236", "Mission title missing: MSBusinessOilOilFields8"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 892324964],
        petroleum_specialized : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Petroleum],
        oilHQ_level : [simcity.kDataResourceAmount, simcity.kResourceIDHQ_Oil_Level],
        oil_RnDModules_on : [simcity.kDataBinAmount, simcity.kResourceIDHQ_Oil_RnD_Module_IsOn]
      },
      test : function (a) {
        return !a ? !1 : 1 === a.petroleum_specialized && 2 === a.oilHQ_level && 1 === a.oil_RnDModules_on
      }
    },
    3411992108 : {
      importance : 9,
      triggerTime : [5, 10],
      iconPath : "icn-balloons-oilrefine.png",
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiAcceptSpecialization.js",
      unitID : 501883312,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2998249222, 3461138857], [simcity.kLocalSpeechBalloonLocaleTable, 2998249223]],
      expirationTime : [-1,
        -1],
      missionUnitID : 1266731069,
      vignetteActorPalette : 1036112034,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_Special_female_001,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x87fef795", "Mission title missing: MSBusinessOilOilFields9"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 892324965],
        petroleum_specialized : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Petroleum],
        oilHQ_level : [simcity.kDataResourceAmount, simcity.kResourceIDHQ_Oil_Level],
        NumOilRefinery : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfOilManufacturingBases],
        plastic_assembled : [simcity.kDataResourceAmount, simcity.kResourceIDTotalPlasticAssembled]
      },
      test : function (a) {
        return !a ? !1 : 1 === a.petroleum_specialized && 2 === a.oilHQ_level && 1 <= a.NumOilRefinery && 24E3 <= a.plastic_assembled
      }
    }
  }
};
simcity.SpeechBalloonPolling.Specialization_Trade = {
  unlockBin : simcity.kResourceIDSpecialization_Trade,
  unlockEvent : simcity.kEventIDUnlock_Specialization_Trade,
  DataBindings : {
    666467957 : {
      importance : 9,
      triggerTime : [5, 10],
      iconPath : "icn-balloons-trade.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiAcceptSpecialization.js",
      speechBalloonTarget : 416754379,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 553097597, 2033302346], [simcity.kLocalSpeechBalloonLocaleTable, 553097596], [simcity.kLocalSpeechBalloonLocaleTable,
          553097599]],
      expirationTime : [-1, -1],
      missionUnitID : 3240744198,
      vignetteActorPalette : 3099101859,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_Special_male_004,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x71e9fa9c", "Mission title missing: MSBusinessTradeFreeMarket1"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 3400979246],
        trade_specialized : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Trade],
        imEx : [simcity.kDataBinAmount, simcity.kResourceIDNumImEx]
      },
      test : function (a) {
        return !a ? !1 : 1 === a.trade_specialized && 0 === a.imEx
      }
    },
    4261548575 : {
      importance : 9,
      triggerTime : [5, 10],
      iconPath : "icn-balloons-trade.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiAcceptSpecialization.js",
      unitID : 3411310402,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 3304341583, 2731333010], [simcity.kLocalSpeechBalloonLocaleTable, 3304341582]],
      expirationTime : [-1, -1],
      missionUnitID : 450517058,
      vignetteActorPalette : 3871200127,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_Special_male_005,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x910855b0", "Mission title missing: MSBusinessTradeFreeMarket10"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 1271820634],
        trade_specialized : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Trade],
        tradeHQ_level : [simcity.kDataResourceAmount, simcity.kResourceIDHQ_Trade_Level],
        trade_ports : [simcity.kDataBinAmount, simcity.kResourceIDNumImExT2],
        trade_electronicsbuilt : [simcity.kDataBinAmount, simcity.kResourceIDHQ_Trade_Electronics_Module_Built]
      },
      test : function (a) {
        return !a ? !1 : 1 === a.trade_specialized && 3 === a.tradeHQ_level && 1 <= a.trade_ports && 1 === a.trade_electronicsbuilt
      }
    },
    4261548574 : {
      importance : 9,
      triggerTime : [5, 10],
      iconPath : "icn-balloons-trade.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiAcceptSpecialization.js",
      unitID : 3411310402,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 3882853736, 4279248888], [simcity.kLocalSpeechBalloonLocaleTable, 3882853737], [simcity.kLocalSpeechBalloonLocaleTable, 3882853738]],
      expirationTime : [-1,
        -1],
      missionUnitID : 450517059,
      vignetteActorPalette : 3099101859,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_Special_male_004,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x0bd33737", "Mission title missing: MSBusinessTradeFreeMarket11"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 1271820635],
        trade_specialized : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Trade],
        tradeHQ_level : [simcity.kDataResourceAmount, simcity.kResourceIDHQ_Trade_Level],
        trade_ports : [simcity.kDataBinAmount, simcity.kResourceIDNumImExT2],
        trade_petroleumbuilt : [simcity.kDataBinAmount, simcity.kResourceIDHQ_Trade_Petroleum_Module_Built]
      },
      test : function (a) {
        return !a ? !1 : 1 === a.trade_specialized && 3 === a.tradeHQ_level && 1 <= a.trade_ports && 0 === a.trade_petroleumbuilt
      }
    },
    4261548573 : {
      importance : 9,
      triggerTime : [5, 10],
      iconPath : "icn-balloons-trade.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiAcceptSpecialization.js",
      unitID : 3411310402,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable,
          2057071877, 4279248888], [simcity.kLocalSpeechBalloonLocaleTable, 2057071876], [simcity.kLocalSpeechBalloonLocaleTable, 2057071879]],
      expirationTime : [-1, -1],
      missionUnitID : 450517056,
      vignetteActorPalette : 3099101859,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_Special_male_004,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0xb0833372", "Mission title missing: MSBusinessTradeFreeMarket12"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 1271820632],
        trade_specialized : [simcity.kDataResourceAmount,
          simcity.kResourceIDSpecialization_Trade],
        tradeHQ_level : [simcity.kDataResourceAmount, simcity.kResourceIDHQ_Trade_Level],
        trade_ports : [simcity.kDataBinAmount, simcity.kResourceIDNumImExT2],
        trade_petroleumbuilt : [simcity.kDataBinAmount, simcity.kResourceIDHQ_Trade_Petroleum_Module_Built]
      },
      test : function (a) {
        return !a ? !1 : 1 === a.trade_specialized && 4 === a.tradeHQ_level && 1 <= a.trade_ports && 1 === a.trade_petroleumbuilt
      }
    },
    4261548572 : {
      importance : 9,
      triggerTime : [5, 10],
      iconPath : "icn-balloons-trade.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiAcceptSpecialization.js",
      unitID : 3411310402,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 559580214, 4279248888], [simcity.kLocalSpeechBalloonLocaleTable, 559580215]],
      expirationTime : [-1, -1],
      missionUnitID : 450517057,
      vignetteActorPalette : 3099101859,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_Special_male_004,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x68932f31", "Mission title missing: MSBusinessTradeFreeMarket13"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 1271820633],
        trade_specialized : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Trade],
        tradeHQ_level : [simcity.kDataResourceAmount, simcity.kResourceIDHQ_Trade_Level],
        trade_ports : [simcity.kDataBinAmount, simcity.kResourceIDNumImExT2]
      },
      test : function (a) {
        return !a ? !1 : 1 === a.trade_specialized && 4 === a.tradeHQ_level && 1 <= a.trade_ports
      }
    },
    666467958 : {
      importance : 9,
      triggerTime : [5, 10],
      iconPath : "icn-balloons-trade.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiAcceptSpecialization.js",
      unitID : 1806257718,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 4099585664, 212433793], [simcity.kLocalSpeechBalloonLocaleTable, 4099585665], [simcity.kLocalSpeechBalloonLocaleTable, 4099585666]],
      expirationTime : [-1, -1],
      missionUnitID : 3240744197,
      vignetteActorPalette : 3099101859,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_Special_male_004,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0xba7cd76d", "Mission title missing: MSBusinessTradeFreeMarket2"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount,
          3400979245],
        trade_specialized : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Trade],
        imEx : [simcity.kDataBinAmount, simcity.kResourceIDNumImEx],
        trade_uniquelots : [simcity.kDataBinAmount, simcity.kResourceIDNumImExUniqueLots],
        tradeHQ : [simcity.kDataBinAmount, simcity.kResourceIDHQ_Trade_Built]
      },
      test : function (a) {
        return !a ? !1 : 1 === a.trade_specialized && 1 <= a.imEx && 3 <= a.trade_uniquelots && 0 === a.tradeHQ
      }
    },
    666467959 : {
      importance : 9,
      triggerTime : [5, 10],
      iconPath : "icn-balloons-trade.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiAcceptSpecialization.js",
      unitID : 3411310402,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 3520387143, 212433793], [simcity.kLocalSpeechBalloonLocaleTable, 3520387142], [simcity.kLocalSpeechBalloonLocaleTable, 3520387141]],
      expirationTime : [-1, -1],
      missionUnitID : 3240744196,
      vignetteActorPalette : 3099101859,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_Special_male_004,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0xc732584e",
        "Mission title missing: MSBusinessTradeFreeMarket3"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 3400979244],
        trade_specialized : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Trade],
        tradeHQ_level : [simcity.kDataResourceAmount, simcity.kResourceIDHQ_Trade_Level],
        imExT2 : [simcity.kDataBinAmount, simcity.kResourceIDNumImExT2]
      },
      test : function (a) {
        return !a ? !1 : 1 === a.trade_specialized && 1 === a.tradeHQ_level && 0 === a.imExT2
      }
    },
    666467952 : {
      importance : 9,
      triggerTime : [5, 10],
      iconPath : "icn-balloons-trade.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiAcceptSpecialization.js",
      unitID : 3411310402,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 3672388410, 4279248888], [simcity.kLocalSpeechBalloonLocaleTable, 3672388411]],
      expirationTime : [-1, -1],
      missionUnitID : 3240744195,
      vignetteActorPalette : 3099101859,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_Special_male_004,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0xaf7540f7", "Mission title missing: MSBusinessTradeFreeMarket4"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 3400979243],
        trade_specialized : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Trade],
        tradeHQ_level : [simcity.kDataResourceAmount, simcity.kResourceIDHQ_Trade_Level],
        trade_port : [simcity.kDataBinAmount, simcity.kResourceIDNumImExT2]
      },
      test : function (a) {
        return !a ? !1 : 1 === a.trade_specialized && 1 === a.tradeHQ_level && 1 <= a.trade_port
      }
    },
    666467953 : {
      importance : 9,
      triggerTime : [5, 10],
      iconPath : "icn-balloons-trade.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiAcceptSpecialization.js",
      unitID : 3411310402,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2311743321, 4279248888], [simcity.kLocalSpeechBalloonLocaleTable, 2311743320], [simcity.kLocalSpeechBalloonLocaleTable, 2311743323]],
      expirationTime : [-1, -1],
      missionUnitID : 3240744194,
      vignetteActorPalette : 3099101859,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_Special_male_004,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x34a8cc70", "Mission title missing: MSBusinessTradeFreeMarket5"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount,
          3400979242],
        trade_specialized : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Trade],
        tradeHQ_level : [simcity.kDataResourceAmount, simcity.kResourceIDHQ_Trade_Level],
        trade_metals_module : [simcity.kDataBinAmount, simcity.kResourceIDHQ_Trade_Metals_Module_Built]
      },
      test : function (a) {
        return !a ? !1 : 1 === a.trade_specialized && 2 === a.tradeHQ_level && 1 === a.trade_metals_module
      }
    },
    666467954 : {
      importance : 9,
      triggerTime : [5, 10],
      iconPath : "icn-balloons-trade.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiAcceptSpecialization.js",
      unitID : 3411310402,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 100553932, 2731333010], [simcity.kLocalSpeechBalloonLocaleTable, 100553933], [simcity.kLocalSpeechBalloonLocaleTable, 100553934]],
      expirationTime : [-1, -1],
      missionUnitID : 3240744193,
      vignetteActorPalette : 3871200127,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_Special_male_005,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x0eae0ef1", "Mission title missing: MSBusinessTradeFreeMarket6"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount,
          3400979241],
        trade_specialized : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Trade],
        tradeHQ_level : [simcity.kDataResourceAmount, simcity.kResourceIDHQ_Trade_Level],
        trade_ports : [simcity.kDataBinAmount, simcity.kResourceIDNumImExT2],
        tradeHQ_metal_division : [simcity.kDataBinAmount, simcity.kResourceIDHQ_Trade_Metals_Module_Built],
        imex_oreLots : [simcity.kDataBinAmount, simcity.kResourceIDNumImExOreRawLots]
      },
      test : function (a) {
        return !a ? !1 : 1 === a.trade_specialized && 2 === a.tradeHQ_level && 1 <= a.trade_ports &&
        1 <= a.tradeHQ_metal_division && 1 <= a.imex_oreLots
      }
    },
    666467955 : {
      importance : 9,
      triggerTime : [5, 10],
      iconPath : "icn-balloons-trade.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiAcceptSpecialization.js",
      unitID : 3411310402,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1153507, 2731333010], [simcity.kLocalSpeechBalloonLocaleTable, 1153506], [simcity.kLocalSpeechBalloonLocaleTable, 1153505]],
      expirationTime : [-1, -1],
      missionUnitID : 3240744192,
      vignetteActorPalette : 3871200127,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_Special_male_005,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x569e1232", "Mission title missing: MSBusinessTradeFreeMarket7"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 3400979240],
        trade_specialized : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Trade],
        tradeHQ_level : [simcity.kDataResourceAmount, simcity.kResourceIDHQ_Trade_Level],
        imExT2 : [simcity.kDataBinAmount, simcity.kResourceIDNumImExT2],
        NumImExMetalLots : [simcity.kDataBinAmount, simcity.kResourceIDNumImExMetalLots],
        rail_in_box : [simcity.kDataBinAmount,
          simcity.kResourceIDNumberOfRailConnections],
        NumberOfImExModulesRail : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfImExModulesRail]
      },
      test : function (a) {
        return !a ? !1 : 1 === a.trade_specialized && 2 === a.tradeHQ_level && 1 <= a.imExT2 && 1 <= a.NumImExMetalLots && 1 <= a.rail_in_box && 0 === a.NumberOfImExModulesRail
      }
    },
    666467964 : {
      importance : 9,
      triggerTime : [5, 10],
      iconPath : "icn-balloons-trade.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiAcceptSpecialization.js",
      unitID : 3411310402,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable,
          454583830, 4279248888], [simcity.kLocalSpeechBalloonLocaleTable, 454583831], [simcity.kLocalSpeechBalloonLocaleTable, 454583828]],
      expirationTime : [-1, -1],
      missionUnitID : 3240744207,
      vignetteActorPalette : 3099101859,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_Special_male_004,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x3af8888b", "Mission title missing: MSBusinessTradeFreeMarket8"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 3400979239],
        trade_specialized : [simcity.kDataResourceAmount,
          simcity.kResourceIDSpecialization_Trade],
        tradeHQ_level : [simcity.kDataResourceAmount, simcity.kResourceIDHQ_Trade_Level],
        trade_ports : [simcity.kDataBinAmount, simcity.kResourceIDNumImExT2],
        water_in_box : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfBoatConnections],
        NumberOfImExModulesBoat : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfImExModulesBoat],
        NumImExOilCrudeLots : [simcity.kDataBinAmount, simcity.kResourceIDNumImExOilCrudeLots]
      },
      test : function (a) {
        return !a ? !1 : 1 === a.trade_specialized && 2 ===
        a.tradeHQ_level && 1 <= a.trade_ports && 1 <= a.NumImExOilCrudeLots && 1 <= a.water_in_box && 0 === a.NumberOfImExModulesBoat
      }
    },
    666467965 : {
      importance : 9,
      triggerTime : [5, 10],
      iconPath : "icn-balloons-trade.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiAcceptSpecialization.js",
      unitID : 3411310402,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2418212965, 4279248888], [simcity.kLocalSpeechBalloonLocaleTable, 2418212964]],
      expirationTime : [-1, -1],
      missionUnitID : 3240744206,
      vignetteActorPalette : 3099101859,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_Special_male_004,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0xe7e04f14", "Mission title missing: MSBusinessTradeFreeMarket9"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 3400979238],
        trade_specialized : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Trade],
        tradeHQ_level : [simcity.kDataResourceAmount, simcity.kResourceIDHQ_Trade_Level],
        trade_ports : [simcity.kDataBinAmount, simcity.kResourceIDNumImExT2],
        trade_electronicsbuilt : [simcity.kDataBinAmount, simcity.kResourceIDHQ_Trade_Electronics_Module_Built]
      },
      test : function (a) {
        return !a ? !1 : 1 === a.trade_specialized && 2 === a.tradeHQ_level && 1 <= a.trade_ports && 0 === a.trade_electronicsbuilt
      }
    }
  }
};
simcity.SpeechBalloonPolling.TownHallBubbles = {
  unlockBin : simcity.kResourceIDTownHallBubbles,
  unlockEvent : simcity.kEventIDUnlock_TownHallBubbles,
  DataBindings : {
    3897145442 : {
      importance : 8,
      triggerTime : [60, 140],
      iconPath : "icn-balloons-alloy.png",
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonAcceptDismissTemplate.js",
      speechBalloonTarget : 3815051420,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1448414972, 558531452]],
      expirationTime : [60, 120],
      missionUnitID : 1090244662,
      vignetteActorPalette : 4228375006,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_Residential_Male_10,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0xe74d1fec", "Mission title missing: MSImExAddAlloyStorageAndExport"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 3426974798],
        NumImExAlloyLots : [simcity.kDataBinAmount, simcity.kResourceIDNumImExAlloyLots],
        Alloy : [simcity.kDataResourceAmount, simcity.kResourceIDAlloy],
        guided : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Guided]
      },
      test : function (a) {
        return !a ? !1 : 1E3 < a.Alloy && 1 > a.NumImExAlloyLots && 0 === a.guided
      }
    },
    779127896 : {
      importance : 8,
      triggerTime : [60, 120],
      iconPath : "icn-balloons-coal.png",
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonAcceptDismissTemplate.js",
      speechBalloonTarget : 3540362602,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 62000642, 1407667317]],
      expirationTime : [100, 120],
      missionUnitID : 3475819008,
      vignetteActorPalette : 3941900653,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_MINE_FOREMAN_FEMALE_002,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0xa7d1b132", "Mission title missing: MSImExAddCoalStorageAndExport"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 3531182824],
        NumImExCoalLots : [simcity.kDataBinAmount, simcity.kResourceIDNumImExCoalLots],
        Coal : [simcity.kDataResourceAmount, simcity.kResourceIDCoal],
        guided : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Guided]
      },
      test : function (a) {
        return !a ? !1 : 5E4 < a.Coal && 1 > a.NumImExCoalLots && 0 === a.guided
      }
    },
    3789077673 : {
      importance : 8,
      triggerTime : [60, 120],
      iconPath : "icn-balloons-electronics.png",
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonAcceptDismissTemplate.js",
      speechBalloonTarget : 2786031172,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 320020017, 2931960962]],
      expirationTime : [100, 120],
      missionUnitID : 693237162,
      vignetteActorPalette : 1883436934,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_06_003,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x9f304be8", "Mission title missing: MSImExAddComputerStorageAndExport"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 3186154130],
        NumImExComputerLots : [simcity.kDataBinAmount, simcity.kResourceIDNumImExComputerLots],
        Computer : [simcity.kDataResourceAmount, simcity.kResourceIDComputer],
        guided : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Guided]
      },
      test : function (a) {
        return !a ? !1 : 1E3 < a.Computer && 1 > a.NumImExComputerLots && 0 === a.guided
      }
    },
    2389370218 : {
      importance : 8,
      triggerTime : [60, 120],
      iconPath : "icn-balloons-oil.png",
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonAcceptDismissTemplate.js",
      speechBalloonTarget : 2638237266,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 3093296964, 986982936]],
      expirationTime : [100,
        120],
      missionUnitID : 3662254699,
      vignetteActorPalette : 1688042546,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_Residential_Male_09,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0xb2f53a0f", "Mission title missing: MSImExAddOilStorageAndExport"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 1876555955],
        NumImExOilCrudeLots : [simcity.kDataBinAmount, simcity.kResourceIDNumImExOilCrudeLots],
        OilCrude : [simcity.kDataResourceAmount, simcity.kResourceIDOilCrude],
        guided : [simcity.kDataResourceAmount,
          simcity.kResourceIDSpecialization_Guided]
      },
      test : function (a) {
        return !a ? !1 : 5E4 < a.OilCrude && 1 > a.NumImExOilCrudeLots && 0 === a.guided
      }
    },
    1252252658 : {
      importance : 8,
      triggerTime : [60, 120],
      iconPath : "icn-balloons-electronics.png",
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonAcceptDismissTemplate.js",
      speechBalloonTarget : 2786031172,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2633108812, 479875064]],
      expirationTime : [60, 120],
      missionUnitID : 2650138406,
      vignetteActorPalette : 1765993603,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_LIBRARIAN_FEMALE_001,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x5023d63c", "Mission title missing: MSImExAddElectronicsStorageAndExport"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 4051069694],
        NumImExElectronicsLots : [simcity.kDataBinAmount, simcity.kResourceIDNumImExElectronicsLots],
        Electronics : [simcity.kDataResourceAmount, simcity.kResourceIDElectronics],
        guided : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Guided]
      },
      test : function (a) {
        return !a ? !1 : 1E3 < a.Electronics && 1 > a.NumImExElectronicsLots &&
        0 === a.guided
      }
    },
    1339349357 : {
      importance : 8,
      triggerTime : [60, 120],
      iconPath : "icn-balloons-oilrefine.png",
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonAcceptDismissTemplate.js",
      speechBalloonTarget : 1061335151,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 3131320597, 1070871097]],
      expirationTime : [100, 120],
      missionUnitID : 2817884265,
      vignetteActorPalette : 1839041055,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_AIR_TRAFFIC_CONTROLLER_FEMALE_001,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json",
        "0x0acf1ca9", "Mission title missing: MSImExAddFuelStorageAndExport"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 3958418593],
        NumImExFuelLots : [simcity.kDataBinAmount, simcity.kResourceIDNumImExFuelLots],
        Fuel : [simcity.kDataResourceAmount, simcity.kResourceIDFuel],
        guided : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Guided]
      },
      test : function (a) {
        return !a ? !1 : 1E3 < a.Fuel && 1 > a.NumImExFuelLots && 0 === a.guided
      }
    },
    1231412850 : {
      importance : 8,
      triggerTime : [60, 120],
      iconPath : "icn-balloons-metal.png",
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonAcceptDismissTemplate.js",
      speechBalloonTarget : 1217790564,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 451638476, 3082959727]],
      expirationTime : [100, 120],
      missionUnitID : 3923644838,
      vignetteActorPalette : 1765993603,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_LIBRARIAN_FEMALE_001,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x3f45b5bc", "Mission title missing: MSImExAddMetalStorageAndExport"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount,
          1879013182],
        NumImExMetalLots : [simcity.kDataBinAmount, simcity.kResourceIDNumImExMetalLots],
        Metal : [simcity.kDataResourceAmount, simcity.kResourceIDMetal],
        guided : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Guided]
      },
      test : function (a) {
        return !a ? !1 : 500 < a.Metal && 1 > a.NumImExMetalLots && 0 === a.guided
      }
    },
    1110497767 : {
      importance : 8,
      triggerTime : [60, 120],
      iconPath : "icn-balloons-ore.png",
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonAcceptDismissTemplate.js",
      speechBalloonTarget : 4205211741,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable,
          2990766135, 558531452]],
      expirationTime : [100, 120],
      missionUnitID : 3401545567,
      vignetteActorPalette : 4228375006,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_Residential_Male_10,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x147717bb", "Mission title missing: MSImExAddOreStorageAndExport"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 1626830791],
        NumImExOreRawLots : [simcity.kDataBinAmount, simcity.kResourceIDNumImExOreRawLots],
        OreRaw : [simcity.kDataResourceAmount, simcity.kResourceIDOreRaw],
        guided : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Guided]
      },
      test : function (a) {
        return !a ? !1 : 1E4 < a.OreRaw && 1 > a.NumImExOreRawLots && 0 === a.guided
      }
    },
    1109324175 : {
      importance : 8,
      triggerTime : [60, 120],
      iconPath : "icn-balloons-oilrefine.png",
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonAcceptDismissTemplate.js",
      speechBalloonTarget : 3480346497,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1649807807, 2931960962]],
      expirationTime : [100, 120],
      missionUnitID : 876381927,
      vignetteActorPalette : 1883436934,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_06_003,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x70227393", "Mission title missing: MSImExAddPlasticStorageAndExport"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 3182684255],
        NumImExPlasticLots : [simcity.kDataBinAmount, simcity.kResourceIDNumImExPlasticLots],
        Plastic : [simcity.kDataResourceAmount, simcity.kResourceIDPlastic],
        guided : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Guided]
      },
      test : function (a) {
        return !a ?
        !1 : 1E4 < a.Plastic && 1 > a.NumImExPlasticLots && 0 === a.guided
      }
    },
    3659233172 : {
      importance : 8,
      triggerTime : [60, 120],
      iconPath : "icn-balloons-electronics.png",
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonAcceptDismissTemplate.js",
      speechBalloonTarget : 2786031172,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 4073287886, 2931960962]],
      expirationTime : [100, 120],
      missionUnitID : 1318853753,
      vignetteActorPalette : 1883436934,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_06_003,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json",
        "0xc83715d9", "Mission title missing: MSImExAddTelevisionStorageAndExport"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 2764214545],
        NumImExTelevisionLots : [simcity.kDataBinAmount, simcity.kResourceIDNumImExTelevisionLots],
        Television : [simcity.kDataResourceAmount, simcity.kResourceIDTelevision],
        guided : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Guided]
      },
      test : function (a) {
        return !a ? !1 : 1E3 < a.Television && 1 > a.NumImExTelevisionLots && 0 === a.guided
      }
    },
    1806816622 : {
      importance : 6,
      triggerTime : [120,
        300],
      iconPath : "icn-balloons-air-money.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiPageAcceptDismiss.js",
      speechBalloonTarget : 442264791,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1879406456, 151290895], [simcity.kLocalSpeechBalloonLocaleTable, 1879406457], [simcity.kLocalSpeechBalloonLocaleTable, 1879406458]],
      expirationTime : [60, 120],
      missionUnitID : 703788087,
      vignetteActorPalette : 3589679452,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_POLITICIAN_MALE_002,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0xae617983", "Mission title missing: MSCivicBalanceTheBudget"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 602089599],
        people : [simcity.kDataResourceAmount, simcity.kResourceIDTotalResidential],
        totalExpense : [simcity.kDataResourceAmount, simcity.kResourceIDExpenses],
        totalIncome : [simcity.kDataResourceAmount, simcity.kResourceIDIncome],
        simoleons : [simcity.kDataResourceAmount, simcity.kResourceIDSimoleons]
      },
      test : function (a) {
        return !a ? !1 : 100 < a.people &&
        0 > a.totalIncome - a.totalExpense && 5E3 > a.simoleons
      }
    },
    2951245853 : {
      importance : 7,
      triggerTime : [900, 1800],
      iconPath : "icn-balloons-happiness.png",
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonAcceptDismissTemplate.js",
      speechBalloonTarget : 3403061518,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 858261253, 83023058]],
      expirationTime : [100, 120],
      missionUnitID : 3644913372,
      vignetteActorPalette : 263967544,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_11_003,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json",
        "0x1594b156", "Mission title missing: MSCivicBuildMayorsHouse"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 728854500],
        HasMayorsHouse : [simcity.kDataResourceAmount, simcity.kResourceIDHasMayorsHouseSmall],
        people : [simcity.kDataResourceAmount, simcity.kResourceIDTotalResidential],
        mayorRating : [simcity.kDataBinAmount, simcity.kResourceIDHappinessGlobals_MayorRating],
        MayorsMansionUnlocked : [simcity.kDataResourceAmount, simcity.kResourceIDMayorsHouseSmallUnlocked]
      },
      test : function (a) {
        return !a ? !1 : 0 === a.HasMayorsHouse &&
        0 === a.MayorsMansionUnlocked && 1E3 < a.people && 70 > a.mayorRating && 50 < a.mayorRating
      }
    },
    2266298462 : {
      importance : 8,
      triggerTime : [150, 600],
      iconPath : "icn-balloons-air-population.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonAcceptDismissTemplate.js",
      speechBalloonTarget : 442264791,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 552030248, 1445721464]],
      expirationTime : [-1, -1],
      missionUnitID : 3605930290,
      vignetteActorPalette : 780344294,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_LAWYER_MALE_002,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x9c9e4b80", "Mission title missing: MSCivicGrowPopulation1"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 198558202]
      },
      test : function (a) {
        return !a ? !1 : 1E3 < simcity.GetFudgedPopulation() && 2500 > simcity.GetFudgedPopulation()
      }
    },
    3598908502 : {
      importance : 8,
      triggerTime : [150, 600],
      iconPath : "icn-balloons-air-population.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonAcceptDismissTemplate.js",
      speechBalloonTarget : 442264791,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable,
          3090677856, 1445721464]],
      expirationTime : [-1, -1],
      missionUnitID : 3605930289,
      vignetteActorPalette : 780344294,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_LAWYER_MALE_002,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0xaf13f641", "Mission title missing: MSCivicGrowPopulation2"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 198558201]
      },
      test : function (a) {
        return !a ? !1 : 1E4 < simcity.GetFudgedPopulation() && 15E3 > simcity.GetFudgedPopulation()
      }
    },
    3088383464 : {
      importance : 8,
      triggerTime : [150,
        600],
      iconPath : "icn-balloons-air-population.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonAcceptDismissTemplate.js",
      speechBalloonTarget : 442264791,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 3568080530, 151290895]],
      expirationTime : [-1, -1],
      missionUnitID : 3605930288,
      vignetteActorPalette : 780344294,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_LAWYER_MALE_002,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0xfc198d82", "Mission title missing: MSCivicGrowPopulation3"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 198558200]
      },
      test : function (a) {
        return !a ? !1 : 3E4 < simcity.GetFudgedPopulation() && 4E4 > simcity.GetFudgedPopulation()
      }
    },
    3872453537 : {
      importance : 8,
      triggerTime : [150, 600],
      iconPath : "icn-balloons-air-population.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonAcceptDismissTemplate.js",
      speechBalloonTarget : 442264791,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 947960585, 151290895]],
      expirationTime : [-1, -1],
      missionUnitID : 3605930295,
      vignetteActorPalette : 780344294,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_LAWYER_MALE_002,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x762fc083", "Mission title missing: MSCivicGrowPopulation4"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 198558207]
      },
      test : function (a) {
        return !a ? !1 : 7E4 < simcity.GetFudgedPopulation() && 8E4 > simcity.GetFudgedPopulation()
      }
    },
    3545991387 : {
      importance : 8,
      triggerTime : [150, 1200],
      iconPath : "icn-balloons-air-population.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonAcceptDismissTemplate.js",
      speechBalloonTarget : 442264791,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 3698206539, 1445721464]],
      expirationTime : [-1, -1],
      missionUnitID : 3605930294,
      vignetteActorPalette : 780344294,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_LAWYER_MALE_002,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x2a57d2ec", "Mission title missing: MSCivicGrowPopulation5"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 198558206]
      },
      test : function (a) {
        return !a ? !1 : 85E3 < simcity.GetFudgedPopulation() &&
        1E5 > simcity.GetFudgedPopulation()
      }
    },
    3713467486 : {
      importance : 8,
      triggerTime : [150, 600],
      iconPath : "icn-balloons-air-population.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonAcceptDismissTemplate.js",
      speechBalloonTarget : 442264791,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 4203377704, 1445721464]],
      expirationTime : [-1, -1],
      missionUnitID : 3605930293,
      vignetteActorPalette : 780344294,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_LAWYER_MALE_002,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json",
        "0x06ab38bd", "Mission title missing: MSCivicGrowPopulation6"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 198558205]
      },
      test : function (a) {
        return !a ? !1 : 15E4 < simcity.GetFudgedPopulation() && 2E5 > simcity.GetFudgedPopulation()
      }
    },
    1451066358 : {
      importance : 8,
      triggerTime : [150, 600],
      iconPath : "icn-balloons-air-population.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonAcceptDismissTemplate.js",
      speechBalloonTarget : 442264791,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2276550400, 1445721464]],
      expirationTime : [-1, -1],
      missionUnitID : 3605930292,
      vignetteActorPalette : 780344294,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_LAWYER_MALE_002,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0xa798a41e", "Mission title missing: MSCivicGrowPopulation7"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 198558204]
      },
      test : function (a) {
        return !a ? !1 : 3E5 < simcity.GetFudgedPopulation() && 4E5 > simcity.GetFudgedPopulation()
      }
    },
    4235192192 : {
      importance : 8,
      triggerTime : [150, 600],
      iconPath : "icn-balloons-air-population.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonAcceptDismissTemplate.js",
      speechBalloonTarget : 442264791,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 640566538, 151290895]],
      expirationTime : [-1, -1],
      missionUnitID : 3605930299,
      vignetteActorPalette : 780344294,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_LAWYER_MALE_002,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x0a2cb6bf", "Mission title missing: MSCivicGrowPopulation8"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount,
          198558195]
      },
      test : function (a) {
        return !a ? !1 : 5E5 < simcity.GetFudgedPopulation() && 6E5 > simcity.GetFudgedPopulation()
      }
    },
    3355001387 : {
      importance : 8,
      triggerTime : [150, 600],
      iconPath : "icn-balloons-air-population.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonAcceptDismissTemplate.js",
      speechBalloonTarget : 442264791,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1133068955, 151290895]],
      expirationTime : [-1, -1],
      missionUnitID : 3605930298,
      vignetteActorPalette : 780344294,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_LAWYER_MALE_002,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0xe605dd18", "Mission title missing: MSCivicGrowPopulation9"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 198558194]
      },
      test : function (a) {
        return !a ? !1 : 8E5 < simcity.GetFudgedPopulation() && 1E6 > simcity.GetFudgedPopulation()
      }
    },
    328142582 : {
      importance : 7,
      triggerTime : [60, 90],
      iconPath : "icn-balloons-happiness.png",
      displayCountLimit : 6,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonAcceptDismissTemplate.js",
      speechBalloonTarget : 1200495631,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable,
          379275264, 267576928]],
      expirationTime : [-1, -1],
      missionUnitID : 1591302534,
      vignetteActorPalette : 112969038,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_01_003,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0xabdb681c", "Mission title missing: MSCivicMayorOfTheYear"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 1722198686],
        HasMayorsHouse : [simcity.kDataResourceAmount, simcity.kResourceIDHasMayorsHouseSmall],
        people : [simcity.kDataResourceAmount, simcity.kResourceIDTotalResidential],
        HasMayorsMansion : [simcity.kDataResourceAmount, simcity.kResourceIDHasMayorsMansion],
        MayorsMansionUnlocked : [simcity.kDataResourceAmount, simcity.kResourceIDMayorsMansionUnlocked],
        MayorRating : [simcity.kDataBinAmount, simcity.kResourceIDHappinessGlobals_MayorRating]
      },
      test : function (a) {
        return !a ? !1 : 0 === a.HasMayorsMansion && 5E3 < a.people && 1 === a.HasMayorsHouse && 0 === a.MayorsMansionUnlocked && 70 < a.MayorRating && 80 > a.MayorRating
      }
    },
    2800028758 : {
      importance : 8,
      triggerTime : [60, 120],
      iconPath : "icn-balloons-crime.png",
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonEditor.js",
      speechBalloonTarget : 2756344273,
      unitBin : 2098293144,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 358232160, 3874080791], [simcity.kLocalSpeechBalloonLocaleTable, 358232161]],
      expirationTime : [60, 120],
      vignetteActorPalette : 3415854180,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_POLICE_OFFICER_MALE_005,
      queries : {
        CriminalsAtLarge : [simcity.kDataResourceAmount, simcity.kResourceIDCriminalsAtLarge],
        NumberOfPoliceCars : [simcity.kDataResourceAmount, simcity.kResourceIDNumberOfPoliceCars]
      },
      test : function (a) {
        return !a ?
        !1 : a.CriminalsAtLarge > a.NumberOfPoliceCars
      }
    },
    1990858570 : {
      importance : 10,
      triggerTime : [600, 900],
      iconPath : "icn-balloons-police.png",
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiPageAcceptDismiss.js",
      speechBalloonTarget : 11435360,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1797029668, 292386], [simcity.kLocalSpeechBalloonLocaleTable, 1797029669]],
      expirationTime : [60, 120],
      missionUnitID : 2896951039,
      vignetteActorPalette : 3405125517,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_POLITICIAN_FEMALE_005,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x1d7ca0db", "Mission title missing: MSCrimeNeedPolice"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 2801189047],
        CriminalsAtLarge : [simcity.kDataResourceAmount, simcity.kResourceIDCriminalsAtLarge],
        Police : [simcity.kDataResourceAmount, simcity.kResourceIDPoliceStationsBuilt],
        HQ_CityHall_IsOn : [simcity.kDataBinAmount, simcity.kResourceIDHQ_CityHall_IsOn]
      },
      test : function (a) {
        return !a ? !1 : 1 > a.Police && 0 < a.CriminalsAtLarge && 0 < a.HQ_CityHall_IsOn
      }
    },
    2760669664 : {
      importance : 8,
      triggerTime : [60, 120],
      iconPath : "icn-balloons-school.png",
      displayCountLimit : 5,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiPageAcceptDismiss.js",
      speechBalloonTarget : 3261375080,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1473274218, 1288197224], [simcity.kLocalSpeechBalloonLocaleTable, 1473274219]],
      expirationTime : [60, 120],
      missionUnitID : 1163693173,
      vignetteActorPalette : 1632810615,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_Residential_Female_06,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json",
        "0x5ccd8ffd", "Mission title missing: MSEducationAttendanceE2"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 2154473149],
        studentsE2 : [simcity.kDataResourceAmount, simcity.kResourceIDStudentE2],
        guided : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Guided]
      },
      test : function (a) {
        return !a ? !1 : 45 <= a.studentsE2 && 0 === a.guided
      }
    },
    498767862 : {
      importance : 5,
      triggerTime : [120, 600],
      iconPath : "icn-balloons-school.png",
      displayCountLimit : 5,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonEditor.js",
      unitID : 2821126718,
      unitBin : 2098293146,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1204003584, 2731333015]],
      expirationTime : [60, 120],
      vignetteActorPalette : 112969038,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_01_003,
      queries : {
        Kid : [simcity.kDataBinAmount, simcity.kResourceIDTotalKids],
        NumberOfCollegeBases : [simcity.kDataResourceAmount, simcity.kResourceIDNumberOfCollegeBases],
        guided : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Guided]
      },
      test : function (a) {
        return !a ? !1 : 600 < a.Kid && 0 <
        a.NumberOfCollegeBases && 0 === a.guided
      }
    },
    1898159680 : {
      importance : 8,
      triggerTime : [60, 120],
      iconPath : "icn-balloons-school.png",
      displayCountLimit : 5,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiPageAcceptDismiss.js",
      speechBalloonTarget : 1693929698,
      unitBin : 2098293150,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2404130890, 408732803], [simcity.kLocalSpeechBalloonLocaleTable, 2404130891], [simcity.kLocalSpeechBalloonLocaleTable, 2404130888]],
      expirationTime : [60, 120],
      missionUnitID : 1633223732,
      vignetteActorPalette : 3922400218,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_BUS_DRIVER_FEMALE_002,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0xd0f88d1e", "Mission title missing: MSEducationBuildHighSchoolGym"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 1270855916],
        studentsE2 : [simcity.kDataResourceAmount, simcity.kResourceIDStudentStudyingE2],
        numberOfHighSchoolGyms : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfHighSchoolGyms],
        guided : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Guided]
      },
      test : function (a) {
        return !a ? !1 : 0 === a.numberOfHighSchoolGyms && 100 <= a.studentsE2 && 0 === a.guided
      }
    },
    1342593611 : {
      importance : 5,
      triggerTime : [60, 120],
      iconPath : "icn-balloons-bus.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiPageAcceptDismiss.js",
      speechBalloonTarget : 3261375080,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2264182843, 2576720730], [simcity.kLocalSpeechBalloonLocaleTable, 2264182842]],
      expirationTime : [60, 120],
      missionUnitID : 229847388,
      vignetteActorPalette : 1632810612,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_LIBRARIAN_FEMALE_001,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0xe050c0d6", "Mission title missing: MSEducationCreateGradeSchoolBuses"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 2775901988],
        NumberOfGradeSchoolBases : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfGradeSchoolBases],
        NumberOfGradeSchoolBusStops : [simcity.kDataResourceAmount, simcity.kResourceIDNumberOfGradeSchoolBusStops],
        NumberOfGradeSchoolLots : [simcity.kDataResourceAmount,
          simcity.kResourceIDNumberOfGradeSchoolLots],
        guided : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Guided]
      },
      test : function (a) {
        return !a ? !1 : 0 < a.NumberOfGradeSchoolBases && 0 === a.NumberOfGradeSchoolLots && 0 === a.NumberOfGradeSchoolBusStops && 0 === a.guided
      }
    },
    1483070234 : {
      importance : 8,
      triggerTime : [60, 90],
      iconPath : "icn-balloons-school.png",
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonAcceptDismissTemplate.js",
      speechBalloonTarget : 3403061518,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2251289588,
          2731333015]],
      expirationTime : [60, 120],
      missionUnitID : 85346069,
      vignetteActorPalette : 112969038,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_01_003,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0xedc4ad1d", "Mission title missing: MSEducationBuildCommunityCollege"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 1665410589],
        Kid : [simcity.kDataBinAmount, simcity.kResourceIDTotalKids],
        NumGradeSchoolBases : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfGradeSchoolBases],
        NumberOfHighSchoolBases : [simcity.kDataResourceAmount, simcity.kResourceIDNumberOfHighSchoolBases],
        NumberOfCollegeBases : [simcity.kDataResourceAmount, simcity.kResourceIDNumberOfCollegeBases],
        HQ_CityHall_IsOn : [simcity.kDataResourceAmount, simcity.kResourceIDHQ_CityHall_IsOn],
        guided : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Guided],
        MayorRating : [simcity.kDataResourceAmount, simcity.kResourceIDHappinessGlobals_MayorRating]
      },
      test : function (a) {
        return !a ? !1 : 1500 < a.Kid && 70 > a.MayorRating && (1 <=
          a.NumGradeSchoolBases || 1 <= a.NumberOfHighSchoolBases) && 0 === a.NumberOfCollegeBases && 0 < a.HQ_CityHall_IsOn && 0 === a.guided
      }
    },
    3212720141 : {
      importance : 8,
      triggerTime : [60, 120],
      iconPath : "icn-balloons-school.png",
      displayCountLimit : 8,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonAcceptDismissTemplate.js",
      speechBalloonTarget : 3403061518,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2506133301, 83023060]],
      expirationTime : [60, 120],
      missionUnitID : 2654688192,
      vignetteActorPalette : 263967550,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_13_001,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0xb9a345f2", "Mission title missing: MSEducationBuildGradeSchool"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 3937056744],
        Kid : [simcity.kDataBinAmount, simcity.kResourceIDTotalKids],
        NumberOfGradeSchoolBases : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfGradeSchoolBases],
        HQ_CityHall_IsOn : [simcity.kDataResourceAmount, simcity.kResourceIDHQ_CityHall_IsOn],
        guided : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Guided],
        MayorRating : [simcity.kDataResourceAmount, simcity.kResourceIDHappinessGlobals_MayorRating]
      },
      test : function (a) {
        return !a ? !1 : 500 < a.Kid && 70 > a.MayorRating && 0 === a.NumberOfGradeSchoolBases && 1 === a.HQ_CityHall_IsOn && 0 === a.guided
      }
    },
    629417003 : {
      importance : 5,
      triggerTime : [60, 120],
      iconPath : "icn-balloons-bus.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiPageAcceptDismiss.js",
      speechBalloonTarget : 1693929698,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1996581019, 1372085129], [simcity.kLocalSpeechBalloonLocaleTable,
          1996581018]],
      expirationTime : [60, 120],
      missionUnitID : 1151861141,
      vignetteActorPalette : 1750253946,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_LIBRARIAN_MALE_003,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0xe050c0d6", "Mission title missing: MSEducationCreateHighSchoolBuses"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 2463214717],
        NumberOfHighSchoolBases : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfHighSchoolBases],
        NumberOfHighSchoolBusStops : [simcity.kDataResourceAmount,
          simcity.kResourceIDNumberOfGradeSchoolBusStops],
        NumberOfHighSchoolLots : [simcity.kDataResourceAmount, simcity.kResourceIDNumberOfHighSchoolLots],
        guided : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Guided]
      },
      test : function (a) {
        return !a ? !1 : 0 < a.NumberOfHighSchoolBases && 0 === a.NumberOfHighSchoolLots && 0 === a.NumberOfHighSchoolBusStops && 0 === a.guided
      }
    },
    945737569 : {
      importance : 8,
      triggerTime : [60, 120],
      iconPath : "icn-balloons-school.png",
      displayCountLimit : 8,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonAcceptDismissTemplate.js",
      speechBalloonTarget : 3403061518,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2449350985, 1445721464]],
      expirationTime : [60, 120],
      missionUnitID : 1435874086,
      vignetteActorPalette : 3589679452,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_POLITICIAN_MALE_002,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x94703a3c", "Mission title missing: MSEducationBuildT2PublicSchool"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 1865003678],
        Kid : [simcity.kDataBinAmount, simcity.kResourceIDTotalKids],
        MayorRating : [simcity.kDataResourceAmount, simcity.kResourceIDHappinessGlobals_MayorRating],
        NumberOfHighSchoolBases : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfHighSchoolBases],
        guided : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Guided],
        T2HighSchoolBaseUnlocked : [simcity.kDataResourceAmount, simcity.kResourceIDT2HighSchoolBaseUnlocked]
      },
      test : function (a) {
        return !a ? !1 : 1E3 <= a.Kid && 80 > a.MayorRating && 1 === a.T2HighSchoolBaseUnlocked && 0 === a.NumberOfHighSchoolBases && 0 === a.guided
      }
    },
    642332425 : {
      importance : 5,
      triggerTime : [60, 120],
      iconPath : "icn-balloons-school.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonAcceptDismissTemplate.js",
      speechBalloonTarget : 4083489610,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 4126601745, 267576933]],
      expirationTime : [60, 120],
      missionUnitID : 416063246,
      vignetteActorPalette : 1750253945,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_Residential_Male_14,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x94e62d14", "Mission title missing: MSEducationPublicSchoolsFull"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 3469850374],
        examsPassedYesterdayE2 : [simcity.kDataResourceAmount, simcity.kResourceIDExamsPassedYesterdayE2],
        NumberOfGradeSchoolBases : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfGradeSchoolBases],
        NumberOfGradeSchoolClassrooms : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfGradeSchoolClassrooms],
        guided : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Guided]
      },
      test : function (a) {
        return !a ? !1 : a.examsPassedYesterdayE2 >= 60 * a.NumberOfGradeSchoolBases +
        30 * a.NumberOfGradeSchoolClassrooms && 0 === a.guided
      }
    },
    3451795818 : {
      importance : 6,
      triggerTime : [60, 120],
      iconPath : "icn-balloons-fire.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiPageAcceptDismiss.js",
      speechBalloonTarget : 3403061518,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 3710186308, 2846638376], [simcity.kLocalSpeechBalloonLocaleTable, 3710186309], [simcity.kLocalSpeechBalloonLocaleTable, 3710186310]],
      expirationTime : [60, 60],
      missionUnitID : 219752097,
      vignetteActorPalette : 3405125517,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_POLITICIAN_FEMALE_005,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x9e192011", "Mission title missing: MSFireBuildFireStation"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 3743811193],
        people : [simcity.kDataResourceAmount, simcity.kResourceIDTotalResidential],
        fireStation : [simcity.kDataResourceAmount, simcity.kResourceIDNumberOfFireStations],
        HQ_CityHall_IsOn : [simcity.kDataResourceAmount, simcity.kResourceIDHQ_CityHall_IsOn],
        activeFires : [simcity.kDataResourceAmount, simcity.kResourceIDNumberOfFires],
        fireRisk : [simcity.kDataResourceAmount, simcity.kResourceIDFireRisk]
      },
      test : function (a) {
        return !a ? !1 : 1 > a.fireStation && 500 < a.fireRisk && 1 > a.activeFires && 100 < a.people && 1 === a.HQ_CityHall_IsOn
      }
    },
    2677126268 : {
      importance : 8,
      triggerTime : [900, 1200],
      iconPath : "icn-balloons-fire.png",
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiPageAcceptDismiss.js",
      unitID : 3910608796,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2512619542, 3165171450],
        [simcity.kLocalSpeechBalloonLocaleTable, 2512619543], [simcity.kLocalSpeechBalloonLocaleTable, 2512619540]],
      expirationTime : [120, 150],
      missionUnitID : 1385502851,
      vignetteActorPalette : 2719706269,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_FIRE_MALE_001,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x3c622b77", "Mission title missing: MSFireBuildT2FireStation"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 1559912731],
        fireStation : [simcity.kDataResourceAmount, simcity.kResourceIDNumberOfFireStations],
        T2FireStationUnlocked : [simcity.kDataResourceAmount, simcity.kResourceIDHQ_CityHall_Safety_Module_IsOn],
        NumberOfT2FireStations : [simcity.kDataResourceAmount, simcity.kResourceIDNumberOfT2FireStations]
      },
      test : function (a) {
        return !a ? !1 : 0 < a.fireStation && 1 === a.T2FireStationUnlocked && 0 === a.NumberOfT2FireStations
      }
    },
    2242620409 : {
      importance : 8,
      triggerTime : [60, 120],
      iconPath : "icn-balloons-fire.png",
      displayCountLimit : 5,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiPageAcceptDismiss.js",
      speechBalloonTarget : 3910608796,
      enableInDisaster : !0,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 4169209217, 3628211584], [simcity.kLocalSpeechBalloonLocaleTable, 4169209216], [simcity.kLocalSpeechBalloonLocaleTable, 4169209219]],
      expirationTime : [120, 240],
      missionUnitID : 684769345,
      vignetteActorPalette : 1256068118,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_Residential_Male_13,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x3a1c6731", "Mission title missing: MSFireKindlingtheFlame"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount,
          1510008745],
        numFiresExtinguished : [simcity.kDataResourceAmount, simcity.kResourceIDNumberOfFiresExtinguished],
        HQ_CityHall_IsOn : [simcity.kDataResourceAmount, simcity.kResourceIDHQ_CityHall_IsOn],
        AmountOfRubble : [simcity.kDataResourceAmount, simcity.kResourceIDAmountOfRubble]
      },
      test : function (a) {
        return !a ? !1 : 0 === a.AmountOfRubble && 2 < a.numFiresExtinguished && 1 === a.HQ_CityHall_IsOn
      }
    },
    1165941123 : {
      importance : 10,
      triggerTime : [60, 90],
      iconPath : "icn-balloons-fire.png",
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiPageAcceptDismiss.js",
      speechBalloonTarget : 1200495631,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 3742700019, 1333857265], [simcity.kLocalSpeechBalloonLocaleTable, 3742700018]],
      expirationTime : [120, 240],
      missionUnitID : 2230786278,
      vignetteActorPalette : 2719706269,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_FIRE_MALE_001,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x99ce94fc", "Mission title missing: MSFireTooMuchFire"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 1837751006],
        AmountOfRubble : [simcity.kDataBinAmount,
          simcity.kResourceIDAmountOfRubble]
      },
      test : function (a) {
        return !a ? !1 : 10 < a.AmountOfRubble
      }
    },
    410560969 : {
      importance : 8,
      triggerTime : [15, 30],
      iconPath : "icn-balloons-garbage.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonEditor.js",
      unitID : 1380229285,
      unitBin : 2098293146,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 3534037585, 4048673786]],
      expirationTime : [60, 100],
      vignetteActorPalette : 4000226283,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_SANITATION_WORKER_FEMALE_004,
      queries : {
        NumberOfDumpDocks : [simcity.kDataResourceAmount, simcity.kResourceIDNumberOfDumpDocks],
        garbageDumpCapacity : [simcity.kDataResourceAmount, simcity.kResourceIDGarbageDumpCapacity],
        garbageInDump : [simcity.kDataResourceAmount, simcity.kResourceIDGarbageInDump]
      },
      test : function (a) {
        return !a ? !1 : 3 > a.NumberOfDumpDocks && 0.95 < a.garbageInDump / a.garbageDumpCapacity
      }
    },
    4073545272 : {
      importance : 8,
      triggerTime : [15, 30],
      iconPath : "icn-balloons-garbage.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonEditor.js",
      unitID : 1380229285,
      unitBin : 2098293145,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 3742548194, 1488365632]],
      expirationTime : [60, 100],
      vignetteActorPalette : 3849227582,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_SANITATION_WORKER_MALE_004,
      queries : {
        NumberOfDumpDocks : [simcity.kDataResourceAmount, simcity.kResourceIDNumberOfDumpDocks],
        garbageDumpCapacity : [simcity.kDataResourceAmount, simcity.kResourceIDGarbageDumpCapacity],
        garbageInDump : [simcity.kDataResourceAmount, simcity.kResourceIDGarbageInDump],
        NumIncinerators : [simcity.kDataResourceAmount, simcity.kResourceIDNumIncinerators]
      },
      test : function (a) {
        return !a ? !1 : 2 < a.NumberOfDumpDocks && 0.95 < a.garbageInDump / a.garbageDumpCapacity && 0 === a.NumIncinerators
      }
    },
    630136258 : {
      importance : 9,
      triggerTime : [150, 1E3],
      iconPath : "icn-balloons-garbage.png",
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiPageAcceptDismiss.js",
      speechBalloonTarget : 3403061518,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 496296924, 2846638376], [simcity.kLocalSpeechBalloonLocaleTable,
          496296925], [simcity.kLocalSpeechBalloonLocaleTable, 496296926]],
      localeTokenQueries : function () {
        return {
          lastGarbageRecord : [simcity.kDataResourceAmount, simcity.kResourceIDGarbagePickedUpRecord]
        }
      },
      getLocaleTokens : function (a) {
        return {
          lastGarbageRecord : a.lastGarbageRecord
        }
      },
      expirationTime : [120, 240],
      missionUnitID : 687494203,
      vignetteActorPalette : 3405125517,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_POLITICIAN_FEMALE_005,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x309c8fbf",
        "Mission title missing: MSGarbageGarbageDay"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 4276522307],
        lastGarbageRecord : [simcity.kDataResourceAmount, simcity.kResourceIDGarbagePickedUpRecord],
        Hour : [simcity.kDataResourceAmount, simcity.kResourceIDHour],
        dumpdocks : [simcity.kDataResourceAmount, simcity.kResourceIDNumberOfDumpDocks]
      },
      test : function (a) {
        return !a ? !1 : 6 === a.Hour && 50 < a.lastGarbageRecord && 0 < a.dumpdocks
      }
    },
    3789602521 : {
      importance : 6,
      triggerTime : [120, 600],
      iconPath : "icn-balloons-health.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonEditor.js",
      unitID : 807628145,
      unitBin : 2098293146,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 606998881, 462914181]],
      expirationTime : [60, 120],
      vignetteActorPalette : 2378911556,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_HEALTH_FEMALE_002,
      queries : {
        injured : [simcity.kDataResourceAmount, simcity.kResourceIDInjury],
        sick : [simcity.kDataResourceAmount, simcity.kResourceIDSick],
        ambulances : [simcity.kDataResourceAmount, simcity.kResourceIDAmbulance]
      },
      test : function (a) {
        return !a ? !1 : 4 * a.ambulances < a.sick + a.injured
      }
    },
    3093966862 : {
      importance : 9,
      triggerTime : [60, 90],
      iconPath : "icn-balloons-health.png",
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonAcceptDismissTemplate.js",
      speechBalloonTarget : 3403061518,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1699771672, 2848776339]],
      expirationTime : [90, 120],
      missionUnitID : 3391060367,
      vignetteActorPalette : 263967538,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_16_002,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json",
        "0x7e34560b", "Mission title missing: MSHealthNeedHospitalSick"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 3575606199],
        HospitalsBuilt : [simcity.kDataBinAmount, simcity.kResourceIDHospitalsBuilt],
        Sick : [simcity.kDataResourceAmount, simcity.kResourceIDSick]
      },
      test : function (a) {
        return !a ? !1 : 1 > a.HospitalsBuilt && 5 < a.Sick
      }
    },
    1114457335 : {
      importance : 5,
      triggerTime : [900, 1800],
      iconPath : "icn-balloons-tourism.png",
      displayCountLimit : 5,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonAcceptDismissTemplate.js",
      speechBalloonTarget : 1725103876,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2186447815, 423327812]],
      expirationTime : [60, 120],
      missionUnitID : 2480232461,
      vignetteActorPalette : 1152278309,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_BUSINESS_PERSON_FEMALE_002,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0xe30a4b05", "Mission title missing: MSTourismBuildAT1Stadium"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 3271230021],
        people : [simcity.kDataResourceAmount, simcity.kResourceIDTotalResidential],
        T1stadiums : [simcity.kDataResourceAmount,
          simcity.kResourceIDNumberOfT1Stadiums],
        commercial_W2 : [simcity.kDataResourceAmount, simcity.kResourceIDCommercialW2]
      },
      test : function (a) {
        return !a ? !1 : 1200 < a.people && 0 === a.T1stadiums && 100 <= a.commercial_W2
      }
    },
    3772011542 : {
      importance : 5,
      triggerTime : [100, 140],
      iconPath : "icn-balloons-tourism.png",
      displayCountLimit : 5,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonAcceptDismissTemplate.js",
      speechBalloonTarget : 1725103879,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 96888224, 2731333015]],
      expirationTime : [60, 120],
      missionUnitID : 2480232461,
      vignetteActorPalette : 112969038,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_01_003,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0xe30a4b05", "Mission title missing: MSTourismBuildAT1Stadium"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 3271230021],
        people : [simcity.kDataResourceAmount, simcity.kResourceIDTotalResidential],
        T2stadiums : [simcity.kDataResourceAmount, simcity.kResourceIDNumberOfT2Stadiums],
        commercial : [simcity.kDataResourceAmount,
          simcity.kResourceIDNumberOfCommercial]
      },
      test : function (a) {
        return !a ? !1 : 2750 < a.people && 0 === a.T2stadiums && 300 <= a.commercial
      }
    },
    3488782442 : {
      importance : 5,
      triggerTime : [600, 800],
      iconPath : "icn-balloons-tourism.png",
      displayCountLimit : 5,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonAcceptDismissTemplate.js",
      speechBalloonTarget : 11435360,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 174215236, 636079518]],
      expirationTime : [60, 120],
      missionUnitID : 2779218339,
      vignetteActorPalette : 1899635595,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_LAWYER_MALE_002,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x77ca2117", "Mission title missing: MSTourismIncreaseAttraction"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 3795605819],
        people : [simcity.kDataResourceAmount, simcity.kResourceIDTotalResidential],
        attraction : [simcity.kDataBinAmount, simcity.kResourceIDAttractionLevel]
      },
      test : function (a) {
        return !a ? !1 : 1500 < a.people && 25 > a.attraction
      }
    },
    671954794 : {
      importance : 8,
      triggerTime : [60, 120],
      iconPath : "icn-balloons-bus.png",
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonAcceptDismissTemplate.js",
      unitID : 67319677,
      unitBin : 2098293146,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1103260996, 408732803]],
      expirationTime : [60, 120],
      missionUnitID : 319149818,
      vignetteActorPalette : 3922400218,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_BUS_DRIVER_FEMALE_002,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x5a74bad8", "Mission title missing: MSTransportationBusAddGarages"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 3942627330],
        numberOfT1Buses : [simcity.kDataResourceAmount,
          simcity.kResourceIDBusT1],
        notPickedUpByBus : [simcity.kDataResourceAmount, simcity.kResourceIDNotPickedUpByBus]
      },
      test : function (a) {
        return !a ? !1 : 1 <= a.numberOfT1Buses && 1 <= a.notPickedUpByBus
      }
    },
    2963795116 : {
      importance : 8,
      triggerTime : [60, 120],
      iconPath : "icn-balloons-bus.png",
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonAcceptDismissTemplate.js",
      unitID : 1193454477,
      unitBin : 2098293146,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 299971206, 3010617661]],
      expirationTime : [60, 120],
      missionUnitID : 3419208380,
      vignetteActorPalette : 3804956887,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_BUS_DRIVER_MALE_001,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0xd3c679b6", "Mission title missing: MSTransportationBusAddGaragesT2"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 681030180],
        numberOfT2Buses : [simcity.kDataResourceAmount, simcity.kResourceIDBusT2],
        notPickedUpByBus : [simcity.kDataResourceAmount, simcity.kResourceIDNotPickedUpByBus]
      },
      test : function (a) {
        return !a ? !1 : 1 <= a.numberOfT2Buses && 1 <= a.notPickedUpByBus
      }
    },
    762347502 : {
      importance : 8,
      triggerTime : [60, 120],
      iconPath : "icn-balloons-bus.png",
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonAcceptDismissTemplate.js",
      speechBalloonTarget : 3403061518,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 520804088, 408732803]],
      expirationTime : [60, 120],
      missionUnitID : 1154819623,
      vignetteActorPalette : 3922400218,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_BUS_DRIVER_FEMALE_002,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0xc311bed3", "Mission title missing: MSTransportationNeedBus"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 266792671],
        numberOfBusT1Stops : [simcity.kDataResourceAmount, simcity.kResourceIDNumberOfBusT1Stops],
        HQ_CityHall_IsOn : [simcity.kDataResourceAmount, simcity.kResourceIDHQ_CityHall_IsOn],
        congestion : [simcity.kDataPathCongestion],
        people : [simcity.kDataBinAmount, simcity.kResourceIDTotalResidential],
        commercial : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfCommercial],
        residential : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfResidential]
      },
      test : function (a) {
        return !a ?
        !1 : 0 === a.numberOfBusT1Stops && 0 < a.HQ_CityHall_IsOn && 0.75 < a.congestion && 1500 <= a.people && a.residential >= a.commercial
      }
    },
    3354932808 : {
      importance : 8,
      triggerTime : [60, 120],
      iconPath : "icn-balloons-bus.png",
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonAcceptDismissTemplate.js",
      speechBalloonTarget : 416754379,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1957242098, 3015966651]],
      expirationTime : [60, 120],
      missionUnitID : 2447947761,
      vignetteActorPalette : 1152278309,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_BUSINESS_PERSON_FEMALE_002,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x4f002901", "Mission title missing: MSTransportationNeedBusT2"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 4149012809],
        numberOfBusT2Garages : [simcity.kDataResourceAmount, simcity.kResourceIDNumberOfBusT2Garages],
        hasDeptOfTrans : [simcity.kDataResourceAmount, simcity.kResourceIDHQ_CityHall_Transportation_Module_IsOn],
        congestion : [simcity.kDataPathCongestion]
      },
      test : function (a) {
        return !a ? !1 : 0 === a.numberOfBusT2Garages && 1 === a.hasDeptOfTrans &&
        0.9 < a.congestion && 8E3 < simcity.GetFudgedPopulation()
      }
    },
    147869200 : {
      importance : 8,
      triggerTime : [60, 120],
      iconPath : "icn-balloons-roads.png",
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonAcceptDismissTemplate.js",
      unitID : 3334793175,
      unitBin : 2098293146,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1502957530, 828952755]],
      expirationTime : [60, 120],
      missionUnitID : 2910173359,
      vignetteActorPalette : 798812438,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_TRAIN_DRIVER_MALE_002,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json",
        "0xd8ea67ab", "Mission title missing: MSTransportationFerriesAddDock"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 3330788343],
        ferries : [simcity.kDataResourceAmount, simcity.kResourceIDNumberOfFerryT1Garages],
        notPickedUpByFerry : [simcity.kDataResourceAmount, simcity.kResourceIDNotPickedUpByFerry]
      },
      test : function (a) {
        return !a ? !1 : 1 <= a.ferries && 1 <= a.notPickedUpByFerry
      }
    },
    226591236 : {
      importance : 8,
      triggerTime : [600, 900],
      iconPath : "icn-balloons-roads.png",
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonAcceptDismissTemplate.js",
      speechBalloonTarget : 11435360,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 747658686, 2864968142]],
      expirationTime : [60, 120],
      missionUnitID : 2772491436,
      vignetteActorPalette : 1068390148,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_BUSINESS_PERSON_MALE_001,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0xadef4706", "Mission title missing: MSTransportationAddFerry"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 1290029076],
        ferries : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfFerryT1Stops],
        hasDeptOfTrans : [simcity.kDataBinAmount, simcity.kResourceIDHQ_CityHall_Transportation_Module_IsOn],
        waterinbox : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfBoatConnections]
      },
      test : function (a) {
        return !a ? !1 : 1 > a.ferries && 0 < a.hasDeptOfTrans && 0 < a.waterinbox && 1E4 < simcity.GetFudgedPopulation()
      }
    },
    926964425 : {
      importance : 8,
      triggerTime : [60, 120],
      iconPath : "icn-balloons-rail.png",
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonAcceptDismissTemplate.js",
      unitID : 2203564159,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable,
          500692305, 828952755]],
      expirationTime : [60, 120],
      missionUnitID : 4056978352,
      vignetteActorPalette : 798812438,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_TRAIN_DRIVER_MALE_002,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0xf5d84502", "Mission title missing: MSTransportationExpandHeavyRail"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 2861494424],
        numberOfTrains : [simcity.kDataResourceAmount, simcity.kResourceIDTrainT2],
        notPickedUpByTrain : [simcity.kDataResourceAmount, simcity.kResourceIDNotPickedUpByTrain]
      },
      test : function (a) {
        return !a ? !1 : 1 <= a.numberOfTrains && 1 <= a.notPickedUpByTrain
      }
    },
    2701002381 : {
      importance : 8,
      triggerTime : [900, 1800],
      iconPath : "icn-balloons-rail.png",
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonAcceptDismissTemplate.js",
      speechBalloonTarget : 3403061518,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2172672693, 267576933]],
      expirationTime : [60, 120],
      missionUnitID : 2211749404,
      vignetteActorPalette : 112969035,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_04_003,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json",
        "0x9a6b0696", "Mission title missing: MSTransportationNeedHeavyRail"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 262534644],
        TrainT2Stops : [simcity.kDataResourceAmount, simcity.kResourceIDNumberOfTrainT2Stops],
        TrainStationUnlocked : [simcity.kDataResourceAmount, simcity.kResourceIDHQ_CityHall_Transportation_Module_IsOn],
        trainInBox : [simcity.kDataResourceAmount, simcity.kResourceIDNumberOfRailConnections]
      },
      test : function (a) {
        return !a ? !1 : 0 === a.TrainT2Stops && 0 < a.TrainStationUnlocked && 0 < a.trainInBox
      }
    },
    3147342112 : {
      importance : 8,
      triggerTime : [60, 120],
      iconPath : "icn-balloons-rail.png",
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonAcceptDismissTemplate.js",
      unitID : 4151935972,
      unitBin : 2098293146,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1425922858, 526176134]],
      expirationTime : [60, 120],
      missionUnitID : 3611866645,
      vignetteActorPalette : 3804956887,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_BUS_DRIVER_MALE_001,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x6ff83a1d", "Mission title missing: MSTransportationLightRailAddGarage"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 4202595389],
        numberOfT1LightTrains : [simcity.kDataResourceAmount, simcity.kResourceIDLightTrainT1],
        notPickedUpByLightTrain : [simcity.kDataResourceAmount, simcity.kResourceIDNotPickedUpByLightTrain]
      },
      test : function (a) {
        return !a ? !1 : 1 <= a.numberOfT1LightTrains && 1 <= a.notPickedUpByLightTrain
      }
    },
    3696011284 : {
      importance : 8,
      triggerTime : [60, 120],
      iconPath : "icn-balloons-rail.png",
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonAcceptDismissTemplate.js",
      speechBalloonTarget : 11435360,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 3862225486, 2848776344], [simcity.kLocalSpeechBalloonLocaleTable, 3862225487]],
      expirationTime : [60, 120],
      missionUnitID : 2983966713,
      vignetteActorPalette : 263967545,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_12_004,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x764b0859", "Mission title missing: MSTransportationNeedLightRail"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 1416395457],
        numberOfLightTrainT1Garages : [simcity.kDataResourceAmount,
          simcity.kResourceIDNumberOfLightTrainT1Garages],
        HQ_CityHall_IsOn : [simcity.kDataResourceAmount, simcity.kResourceIDHQ_CityHall_IsOn],
        congestion : [simcity.kDataPathCongestion],
        people : [simcity.kDataBinAmount, simcity.kResourceIDTotalResidential],
        commercial : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfCommercial],
        residential : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfResidential]
      },
      test : function (a) {
        return !a ? !1 : 0 === a.numberOfLightTrainT1Garages && 0 < a.HQ_CityHall_IsOn && 0.75 < a.congestion && a.commercial >
        a.residential && 3E3 <= a.people
      }
    },
    1888595335 : {
      importance : 6,
      triggerTime : [50, 100],
      iconPath : "icn-balloons-trade.png",
      displayCountLimit : 5,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness3_AcceptOnlyTemplate.js",
      speechBalloonTarget : 11435360,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 863084759], [simcity.kLocalSpeechBalloonLocaleTable, 863084758], [simcity.kLocalSpeechBalloonLocaleTable, 863084757], [simcity.kLocalSpeechBalloonLocaleTable, 863084756], [simcity.kLocalSpeechBalloonLocaleTable, 863084755]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        tradeHQ : [simcity.kDataBinAmount, simcity.kResourceIDHQ_Trade_Built],
        HQ_Trade_Unlocked : [simcity.kDataBinAmount, simcity.kResourceIDHQ_Trade_Unlocked],
        guided : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Guided]
      },
      test : function (a) {
        return !a ? !1 : 1 > a.tradeHQ && 0 < a.HQ_Trade_Unlocked && 0 === a.guided
      }
    },
    2807722518 : {
      importance : 2,
      triggerTime : [50, 100],
      iconPath : "icn-balloons-trade.png",
      displayCountLimit : 5,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness5_AcceptOnlyTemplate.js",
      speechBalloonTarget : 11435360,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 37830560], [simcity.kLocalSpeechBalloonLocaleTable, 37830561], [simcity.kLocalSpeechBalloonLocaleTable, 37830562], [simcity.kLocalSpeechBalloonLocaleTable, 37830563], [simcity.kLocalSpeechBalloonLocaleTable, 37830564]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        tradeHQ : [simcity.kDataBinAmount, simcity.kResourceIDHQ_Trade_Built]
      },
      test : function (a) {
        return !a ? !1 : 0 < a.tradeHQ
      }
    },
    568116732 : {
      importance : 3,
      triggerTime : [90, 120],
      iconPath : "icn-balloons-coal.png",
      displayCountLimit : 5,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness3_AcceptOnlyTemplate.js",
      speechBalloonTarget : 1051852219,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 290217110], [simcity.kLocalSpeechBalloonLocaleTable, 290217111], [simcity.kLocalSpeechBalloonLocaleTable, 290217108]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        coalMineHQ : [simcity.kDataBinAmount, simcity.kResourceIDHQ_Mining_IsOn],
        coalMineHQUnlocked : [simcity.kDataBinAmount, simcity.kResourceIDHQ_Mining_Unlocked],
        guided : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Guided]
      },
      test : function (a) {
        return !a ? !1 : 1 > a.coalMineHQ && 0 < a.coalMineHQUnlocked && 1 > a.guided
      }
    },
    4282257967 : {
      importance : 4,
      triggerTime : [40, 40],
      iconPath : "icn-balloons-crime.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness1_AcceptOnlyTemplate.js",
      unitID : 763908280,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1955909727], [simcity.kLocalSpeechBalloonLocaleTable, 1955909726], [simcity.kLocalSpeechBalloonLocaleTable, 1955909725],
        [simcity.kLocalSpeechBalloonLocaleTable, 1955909724], [simcity.kLocalSpeechBalloonLocaleTable, 1955909723]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        ProtestNoCrime : [simcity.kDataResourceAmount, simcity.kResourceIDSadnessFromCrime],
        MSCivicProtestAboutCrime : [simcity.kDataBinAmount, simcity.kResourceIDGlobalMission_MSCivicProtestAboutCrime]
      },
      test : function (a) {
        return !a ? !1 : 0 < a.ProtestNoCrime && 0 === a.MSCivicProtestAboutCrime
      }
    },
    2973920508 : {
      importance : 4,
      triggerTime : [40, 40],
      iconPath : "icn-balloons-crime.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness3_AcceptOnlyTemplate.js",
      unitID : 763908280,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1846251926], [simcity.kLocalSpeechBalloonLocaleTable, 1846251927], [simcity.kLocalSpeechBalloonLocaleTable, 1846251924], [simcity.kLocalSpeechBalloonLocaleTable, 1846251925]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        ProtestNoCrime : [simcity.kDataResourceAmount, simcity.kResourceIDSadnessFromCrime],
        MSCivicProtestAboutCrime : [simcity.kDataBinAmount,
          simcity.kResourceIDGlobalMission_MSCivicProtestAboutCrime]
      },
      test : function (a) {
        return !a ? !1 : 0 < a.ProtestNoCrime && 1 === a.MSCivicProtestAboutCrime
      }
    },
    2280184380 : {
      importance : 4,
      triggerTime : [40, 40],
      iconPath : "icn-balloons-garbage.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness1_AcceptOnlyTemplate.js",
      unitID : 763908280,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 3509055574], [simcity.kLocalSpeechBalloonLocaleTable, 3509055575], [simcity.kLocalSpeechBalloonLocaleTable, 3509055572], [simcity.kLocalSpeechBalloonLocaleTable,
          3509055573], [simcity.kLocalSpeechBalloonLocaleTable, 3509055570]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        ProtestGarbage : [simcity.kDataResourceAmount, simcity.kResourceIDSadnessFromGarbage],
        MSCivicProtestAboutGarbage : [simcity.kDataBinAmount, simcity.kResourceIDGlobalMission_MSCivicProtestAboutGarbage]
      },
      test : function (a) {
        return !a ? !1 : 0 < a.ProtestGarbage && 0 === a.MSCivicProtestAboutGarbage
      }
    },
    3577545297 : {
      importance : 4,
      triggerTime : [40, 40],
      iconPath : "icn-balloons-garbage.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness3_AcceptOnlyTemplate.js",
      unitID : 763908280,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 479201593], [simcity.kLocalSpeechBalloonLocaleTable, 479201592], [simcity.kLocalSpeechBalloonLocaleTable, 479201595]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        ProtestGarbage : [simcity.kDataResourceAmount, simcity.kResourceIDSadnessFromGarbage],
        MSCivicProtestAboutGarbage : [simcity.kDataBinAmount, simcity.kResourceIDGlobalMission_MSCivicProtestAboutGarbage]
      },
      test : function (a) {
        return !a ? !1 : 0 < a.ProtestGarbage && 1 === a.MSCivicProtestAboutGarbage
      }
    },
    4153360383 : {
      importance : 4,
      triggerTime : [40, 40],
      iconPath : "icn-balloons-air-population.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness1_AcceptOnlyTemplate.js",
      unitID : 763908280,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2485743663], [simcity.kLocalSpeechBalloonLocaleTable, 2485743662], [simcity.kLocalSpeechBalloonLocaleTable, 2485743661], [simcity.kLocalSpeechBalloonLocaleTable, 2485743660], [simcity.kLocalSpeechBalloonLocaleTable, 2485743659]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        ProtestNoDesirability : [simcity.kDataResourceAmount, simcity.kResourceIDSadnessFromNoDesirability],
        MSCivicProtestAboutNoDesirability : [simcity.kDataBinAmount, simcity.kResourceIDGlobalMission_MSCivicProtestAboutNoDesirability]
      },
      test : function (a) {
        return !a ? !1 : 0 < a.ProtestNoDesirability && 0 === a.MSCivicProtestAboutNoDesirability
      }
    },
    351260556 : {
      importance : 4,
      triggerTime : [40, 40],
      iconPath : "icn-balloons-air-population.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness3_AcceptOnlyTemplate.js",
      unitID : 763908280,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 101111910], [simcity.kLocalSpeechBalloonLocaleTable, 101111911], [simcity.kLocalSpeechBalloonLocaleTable, 101111908], [simcity.kLocalSpeechBalloonLocaleTable, 101111909]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        ProtestNoDesirability : [simcity.kDataResourceAmount, simcity.kResourceIDSadnessFromNoDesirability],
        MSCivicProtestAboutNoDesirability : [simcity.kDataBinAmount, simcity.kResourceIDGlobalMission_MSCivicProtestAboutNoDesirability]
      },
      test : function (a) {
        return !a ? !1 : 0 < a.ProtestNoDesirability && 1 === a.MSCivicProtestAboutNoDesirability
      }
    },
    748791057 : {
      importance : 4,
      triggerTime : [40, 40],
      iconPath : "icn-balloons-power.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness1_AcceptOnlyTemplate.js",
      unitID : 763908280,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 937694585], [simcity.kLocalSpeechBalloonLocaleTable, 937694584], [simcity.kLocalSpeechBalloonLocaleTable, 937694587], [simcity.kLocalSpeechBalloonLocaleTable, 937694586], [simcity.kLocalSpeechBalloonLocaleTable,
          937694589]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        ProtestNoPower : [simcity.kDataResourceAmount, simcity.kResourceIDSadnessFromNoPower],
        MSCivicProtestAboutNoPower : [simcity.kDataBinAmount, simcity.kResourceIDGlobalMission_MSCivicProtestAboutNoPower]
      },
      test : function (a) {
        return !a ? !1 : 0 < a.ProtestNoPower && 0 === a.MSCivicProtestAboutNoPower
      }
    },
    2709137150 : {
      importance : 4,
      triggerTime : [40, 40],
      iconPath : "icn-balloons-power.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness3_AcceptOnlyTemplate.js",
      unitID : 763908280,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 4180238536], [simcity.kLocalSpeechBalloonLocaleTable, 101111911], [simcity.kLocalSpeechBalloonLocaleTable, 101111908], [simcity.kLocalSpeechBalloonLocaleTable, 101111909]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        ProtestNoPower : [simcity.kDataResourceAmount, simcity.kResourceIDSadnessFromNoPower],
        MSCivicProtestAboutNoPower : [simcity.kDataBinAmount, simcity.kResourceIDGlobalMission_MSCivicProtestAboutNoPower]
      },
      test : function (a) {
        return !a ?
        !1 : 0 < a.ProtestNoPower && 1 === a.MSCivicProtestAboutNoPower
      }
    },
    1828152887 : {
      importance : 4,
      triggerTime : [40, 40],
      iconPath : "icn-balloons-air-money.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness1_AcceptOnlyTemplate.js",
      unitID : 763908280,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2332825479], [simcity.kLocalSpeechBalloonLocaleTable, 2332825478], [simcity.kLocalSpeechBalloonLocaleTable, 2332825477], [simcity.kLocalSpeechBalloonLocaleTable, 2332825476], [simcity.kLocalSpeechBalloonLocaleTable, 2332825475]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        ProtestNoRent : [simcity.kDataResourceAmount, simcity.kResourceIDSadnessFromNoRent],
        MSCivicProtestAboutNoRent : [simcity.kDataBinAmount, simcity.kResourceIDGlobalMission_MSCivicProtestAboutNoRent]
      },
      test : function (a) {
        return !a ? !1 : 0 < a.ProtestNoRent && 0 === a.MSCivicProtestAboutNoRent
      }
    },
    2611588004 : {
      importance : 4,
      triggerTime : [40, 40],
      iconPath : "icn-balloons-air-money.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness3_AcceptOnlyTemplate.js",
      unitID : 763908280,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 91059550], [simcity.kLocalSpeechBalloonLocaleTable, 91059551], [simcity.kLocalSpeechBalloonLocaleTable, 91059548]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        ProtestNoRent : [simcity.kDataResourceAmount, simcity.kResourceIDSadnessFromNoRent],
        MSCivicProtestAboutNoRent : [simcity.kDataBinAmount, simcity.kResourceIDGlobalMission_MSCivicProtestAboutNoRent]
      },
      test : function (a) {
        return !a ? !1 : 0 < a.ProtestNoRent && 1 === a.MSCivicProtestAboutNoRent
      }
    },
    1668438831 : {
      importance : 4,
      triggerTime : [40, 40],
      iconPath : "icn-balloons-water.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness1_AcceptOnlyTemplate.js",
      unitID : 763908280,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 3886508895], [simcity.kLocalSpeechBalloonLocaleTable, 3886508894], [simcity.kLocalSpeechBalloonLocaleTable, 3886508893], [simcity.kLocalSpeechBalloonLocaleTable, 3886508892], [simcity.kLocalSpeechBalloonLocaleTable, 3886508891]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        ProtestNoWater : [simcity.kDataResourceAmount,
          simcity.kResourceIDSadnessFromNoWater],
        MSCivicProtestAboutNoWater : [simcity.kDataBinAmount, simcity.kResourceIDGlobalMission_MSCivicProtestAboutNoWater]
      },
      test : function (a) {
        return !a ? !1 : 0 < a.ProtestNoWater && 0 === a.MSCivicProtestAboutNoWater
      }
    },
    4156686332 : {
      importance : 4,
      triggerTime : [40, 40],
      iconPath : "icn-balloons-water.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness3_AcceptOnlyTemplate.js",
      unitID : 763908280,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1744669334], [simcity.kLocalSpeechBalloonLocaleTable,
          1744669335], [simcity.kLocalSpeechBalloonLocaleTable, 1744669332]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        ProtestNoWater : [simcity.kDataResourceAmount, simcity.kResourceIDSadnessFromNoWater],
        MSCivicProtestAboutNoWater : [simcity.kDataBinAmount, simcity.kResourceIDGlobalMission_MSCivicProtestAboutNoWater]
      },
      test : function (a) {
        return !a ? !1 : 0 < a.ProtestNoWater && 1 === a.MSCivicProtestAboutNoWater
      }
    },
    4075282587 : {
      importance : 4,
      triggerTime : [40, 40],
      iconPath : "icn-balloons-air-pollution.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness1_AcceptOnlyTemplate.js",
      unitID : 763908280,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2535878283], [simcity.kLocalSpeechBalloonLocaleTable, 2535878282], [simcity.kLocalSpeechBalloonLocaleTable, 2535878281], [simcity.kLocalSpeechBalloonLocaleTable, 2535878280], [simcity.kLocalSpeechBalloonLocaleTable, 2535878287], [simcity.kLocalSpeechBalloonLocaleTable, 2535878286]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        ProtestPollution : [simcity.kDataResourceAmount, simcity.kResourceIDSadnessFromPollution],
        MSCivicProtestAboutPollution : [simcity.kDataBinAmount,
          simcity.kResourceIDGlobalMission_MSCivicProtestAboutPollution]
      },
      test : function (a) {
        return !a ? !1 : 0 < a.ProtestPollution && 0 === a.MSCivicProtestAboutPollution
      }
    },
    1696771632 : {
      importance : 4,
      triggerTime : [40, 40],
      iconPath : "icn-balloons-air-pollution.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness3_AcceptOnlyTemplate.js",
      unitID : 763908280,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2092864890], [simcity.kLocalSpeechBalloonLocaleTable, 2092864891], [simcity.kLocalSpeechBalloonLocaleTable, 2092864888],
        [simcity.kLocalSpeechBalloonLocaleTable, 2092864889]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        ProtestPollution : [simcity.kDataResourceAmount, simcity.kResourceIDSadnessFromPollution],
        MSCivicProtestAboutPollution : [simcity.kDataBinAmount, simcity.kResourceIDGlobalMission_MSCivicProtestAboutPollution]
      },
      test : function (a) {
        return !a ? !1 : 0 < a.ProtestPollution && 1 === a.MSCivicProtestAboutPollution
      }
    },
    2234706624 : {
      importance : 4,
      triggerTime : [40, 40],
      iconPath : "icn-balloons-health.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness1_AcceptOnlyTemplate.js",
      unitID : 763908280,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 4239058378], [simcity.kLocalSpeechBalloonLocaleTable, 4239058379], [simcity.kLocalSpeechBalloonLocaleTable, 4239058376], [simcity.kLocalSpeechBalloonLocaleTable, 4239058377], [simcity.kLocalSpeechBalloonLocaleTable, 4239058382]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        ProtestSickness : [simcity.kDataResourceAmount, simcity.kResourceIDSadnessFromSickness],
        MSCivicProtestAboutSickness : [simcity.kDataBinAmount, simcity.kResourceIDGlobalMission_MSCivicProtestAboutSickness]
      },
      test : function (a) {
        return !a ? !1 : 0 < a.ProtestSickness && 0 === a.MSCivicProtestAboutSickness
      }
    },
    1923375453 : {
      importance : 4,
      triggerTime : [40, 40],
      iconPath : "icn-balloons-health.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness3_AcceptOnlyTemplate.js",
      unitID : 763908280,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2159958725], [simcity.kLocalSpeechBalloonLocaleTable, 2159958724], [simcity.kLocalSpeechBalloonLocaleTable, 2159958727], [simcity.kLocalSpeechBalloonLocaleTable, 2159958726]],
      expirationTime : [60,
        90],
      isThoughtBubble : !0,
      queries : {
        ProtestSickness : [simcity.kDataResourceAmount, simcity.kResourceIDSadnessFromSickness],
        MSCivicProtestAboutSickness : [simcity.kDataBinAmount, simcity.kResourceIDGlobalMission_MSCivicProtestAboutSickness]
      },
      test : function (a) {
        return !a ? !1 : 0 < a.ProtestSickness && 1 === a.MSCivicProtestAboutSickness
      }
    },
    203767750 : {
      importance : 4,
      triggerTime : [40, 40],
      iconPath : "icn-balloons-air-money.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness1_AcceptOnlyTemplate.js",
      unitID : 763908280,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2584732816], [simcity.kLocalSpeechBalloonLocaleTable, 2584732817], [simcity.kLocalSpeechBalloonLocaleTable, 2584732818], [simcity.kLocalSpeechBalloonLocaleTable, 2584732819], [simcity.kLocalSpeechBalloonLocaleTable, 2584732820]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        ProtestTaxes : [simcity.kDataResourceAmount, simcity.kResourceIDSadnessFromTaxes],
        MSCivicProtestAboutTaxes : [simcity.kDataBinAmount, simcity.kResourceIDGlobalMission_MSCivicProtestAboutTaxes]
      },
      test : function (a) {
        return !a ? !1 : 0 < a.ProtestTaxes && 0 === a.MSCivicProtestAboutTaxes
      }
    },
    1618378995 : {
      importance : 4,
      triggerTime : [40, 40],
      iconPath : "icn-balloons-air-money.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness3_AcceptOnlyTemplate.js",
      unitID : 763908280,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1161560419], [simcity.kLocalSpeechBalloonLocaleTable, 1161560418], [simcity.kLocalSpeechBalloonLocaleTable, 1161560417], [simcity.kLocalSpeechBalloonLocaleTable, 1161560416]],
      expirationTime : [60,
        90],
      isThoughtBubble : !0,
      queries : {
        ProtestTaxes : [simcity.kDataResourceAmount, simcity.kResourceIDSadnessFromTaxes],
        MSCivicProtestAboutTaxes : [simcity.kDataBinAmount, simcity.kResourceIDGlobalMission_MSCivicProtestAboutTaxes]
      },
      test : function (a) {
        return !a ? !1 : 0 < a.ProtestTaxes && 1 === a.MSCivicProtestAboutTaxes
      }
    },
    3546331337 : {
      importance : 2,
      triggerTime : [60, 120],
      iconPath : "icn-balloons-happiness.png",
      displayCountLimit : 2,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness4_AcceptOnlyTemplate.js",
      speechBalloonTarget : 3403061518,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1452379985], [simcity.kLocalSpeechBalloonLocaleTable, 1452379984]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        hasMayorsHouse : [simcity.kDataResourceAmount, simcity.kResourceIDHasMayorsHouseSmall]
      },
      test : function (a) {
        return !a ? !1 : 1 === a.hasMayorsHouse
      }
    },
    3523534265 : {
      importance : 3,
      triggerTime : [60, 120],
      iconPath : "icn-balloons-happiness.png",
      displayCountLimit : 2,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness4_AcceptOnlyTemplate.js",
      speechBalloonTarget : 3403061518,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 4118944705], [simcity.kLocalSpeechBalloonLocaleTable, 4118944704]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        HQ_CityHall_IsOn : [simcity.kDataResourceAmount, simcity.kResourceIDHQ_CityHall_IsOn],
        Regional_HQ_CityHall_IsOn : [simcity.kDataResourceAmount, simcity.kResourceIDRegional_HQ_CityHall_IsOn]
      },
      test : function (a) {
        return !a ? !1 : 1 === a.HQ_CityHall_IsOn && 0 === a.Regional_HQ_CityHall_IsOn
      }
    },
    1832723883 : {
      importance : 3,
      triggerTime : [100, 140],
      iconPath : "icn-balloons-police.png",
      displayCountLimit : 5,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness4_AcceptOnlyTemplate.js",
      speechBalloonTarget : 11435360,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1658326299], [simcity.kLocalSpeechBalloonLocaleTable, 1658326298], [simcity.kLocalSpeechBalloonLocaleTable, 1658326297], [simcity.kLocalSpeechBalloonLocaleTable, 1658326296]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        criminalsInJail : [simcity.kDataBinAmount, simcity.kResourceIDCriminalsIncarcerated]
      },
      test : function (a) {
        return !a ?
        !1 : 2 < a.criminalsInJail
      }
    },
    3331111693 : {
      importance : 3,
      triggerTime : [300, 500],
      iconPath : "icn-balloons-police.png",
      displayCountLimit : 4,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness3_AcceptOnlyTemplate.js",
      speechBalloonTarget : 3403061518,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1891850293]],
      localeTokenQueries : function () {
        return {
          criminalsInJail : [simcity.kDataResourceAmount, simcity.kResourceIDCriminalsIncarcerated]
        }
      },
      getLocaleTokens : function (a) {
        return {
          criminalsInJail : a.criminalsInJail
        }
      },
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        criminalsInJail : [simcity.kDataResourceAmount, simcity.kResourceIDCriminalsIncarcerated]
      },
      test : function (a) {
        return !a ? !1 : 6 < a.criminalsInJail
      }
    },
    4133824736 : {
      importance : 3,
      triggerTime : [30, 60],
      iconPath : "icn-balloons-police.png",
      displayCountLimit : 5,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness5_AcceptOnlyTemplate.js",
      speechBalloonTarget : 3403061518,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 4050038378], [simcity.kLocalSpeechBalloonLocaleTable,
          4050038379], [simcity.kLocalSpeechBalloonLocaleTable, 4050038376], [simcity.kLocalSpeechBalloonLocaleTable, 4050038377], [simcity.kLocalSpeechBalloonLocaleTable, 4050038382]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        policeStation : [simcity.kDataBinAmount, simcity.kResourceIDPoliceStationsBuilt]
      },
      test : function (a) {
        return !a ? !1 : 0 < a.policeStation
      }
    },
    2183215470 : {
      importance : 2,
      triggerTime : [100, 200],
      iconPath : "icn-balloons-school.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness4_AcceptOnlyTemplate.js",
      speechBalloonTarget : 3403061518,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2811929464], [simcity.kLocalSpeechBalloonLocaleTable, 2811929465], [simcity.kLocalSpeechBalloonLocaleTable, 2811929466]],
      localeTokenQueries : function () {
        return {
          studentsE3 : [simcity.kDataResourceAmount, simcity.kResourceIDStudentE3]
        }
      },
      getLocaleTokens : function (a) {
        return {
          studentsE3 : a.studentsE3
        }
      },
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        studentsE3 : [simcity.kDataResourceAmount, simcity.kResourceIDStudentE3]
      },
      test : function (a) {
        return !a ?
        !1 : 500 <= a.studentsE3
      }
    },
    2877535354 : {
      importance : 2,
      triggerTime : [100, 200],
      iconPath : "icn-balloons-school.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness4_AcceptOnlyTemplate.js",
      speechBalloonTarget : 3403061518,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 3518603988]],
      localeTokenQueries : function () {
        return {
          studentsE2 : [simcity.kDataResourceAmount, simcity.kResourceIDStudentE2]
        }
      },
      getLocaleTokens : function (a) {
        return {
          studentsE2 : a.studentsE2
        }
      },
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        studentsE2 : [simcity.kDataResourceAmount,
          simcity.kResourceIDStudentE2]
      },
      test : function (a) {
        return !a ? !1 : 10 <= a.studentsE2
      }
    },
    855752218 : {
      importance : 2,
      triggerTime : [60, 120],
      iconPath : "icn-balloons-school.png",
      displayCountLimit : 2,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness4_AcceptOnlyTemplate.js",
      speechBalloonTarget : 3403061518,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1541594356], [simcity.kLocalSpeechBalloonLocaleTable, 1541594357]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        NumberOfCommunityColleges : [simcity.kDataBinAmount,
          simcity.kResourceIDNumberOfCollegeBases]
      },
      test : function (a) {
        return !a ? !1 : 0 < a.NumberOfCommunityColleges
      }
    },
    1773639949 : {
      importance : 3,
      triggerTime : [60, 120],
      iconPath : "icn-balloons-school.png",
      displayCountLimit : 2,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness4_AcceptOnlyTemplate.js",
      speechBalloonTarget : 3403061518,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1878815285], [simcity.kLocalSpeechBalloonLocaleTable, 1878815284]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        NumberOfGradeSchoolBases : [simcity.kDataBinAmount,
          simcity.kResourceIDNumberOfGradeSchoolBases]
      },
      test : function (a) {
        return !a ? !1 : 0 < a.NumberOfGradeSchoolBases
      }
    },
    3279101199 : {
      importance : 2,
      triggerTime : [120, 150],
      iconPath : "icn-balloons-fire.png",
      displayCountLimit : 10,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness3_AcceptOnlyTemplate.js",
      speechBalloonTarget : 3403061518,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2651042879], [simcity.kLocalSpeechBalloonLocaleTable, 2651042878], [simcity.kLocalSpeechBalloonLocaleTable, 2651042877]],
      expirationTime : [60,
        90],
      isThoughtBubble : !0,
      queries : {
        AmountOfAbandoned : [simcity.kDataResourceAmount, simcity.kResourceIDAmountOfAbandoned],
        activeFires : [simcity.kDataResourceAmount, simcity.kResourceIDNumberOfFires],
        fireRisk : [simcity.kDataResourceAmount, simcity.kResourceIDFireRisk]
      },
      test : function (a) {
        return !a ? !1 : 10 < a.AmountOfAbandoned && 20 < a.fireRisk && 0 === a.activeFires
      }
    },
    801421568 : {
      importance : 2,
      triggerTime : [300, 500],
      iconPath : "icn-balloons-garbage.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness5_AcceptOnlyTemplate.js",
      speechBalloonTarget : 1145013416,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1885624714], [simcity.kLocalSpeechBalloonLocaleTable, 1885624715], [simcity.kLocalSpeechBalloonLocaleTable, 1885624712]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        NumberOfDumpDocks : [simcity.kDataResourceAmount, simcity.kResourceIDNumberOfDumpDocks],
        garbagePickedUpToday : [simcity.kDataResourceAmount, simcity.kResourceIDGarbagePickedUpToday]
      },
      test : function (a) {
        return !a ? !1 : 0 < a.NumberOfDumpDocks && 100 < a.garbagePickedUpToday
      }
    },
    1188635221 : {
      importance : 2,
      triggerTime : [150, 180],
      iconPath : "icn-balloons-garbage.png",
      displayCountLimit : 10,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness4_AcceptOnlyTemplate.js",
      speechBalloonTarget : 1725103876,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 620614877], [simcity.kLocalSpeechBalloonLocaleTable, 620614876], [simcity.kLocalSpeechBalloonLocaleTable, 620614879]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        NumIncinerators : [simcity.kDataResourceAmount, simcity.kResourceIDNumIncinerators]
      },
      test : function (a) {
        return !a ? !1 : 0 < a.NumIncinerators
      }
    },
    166400320 : {
      importance : 4,
      triggerTime : [150, 180],
      iconPath : "icn-balloons-garbage.png",
      displayCountLimit : 10,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness2_AcceptOnlyTemplate.js",
      speechBalloonTarget : 3971508388,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1159575882], [simcity.kLocalSpeechBalloonLocaleTable, 1159575883], [simcity.kLocalSpeechBalloonLocaleTable, 1159575880]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        NumIncinerators : [simcity.kDataResourceAmount,
          simcity.kResourceIDNumIncinerators],
        NumberOfDumpDocks : [simcity.kDataResourceAmount, simcity.kResourceIDNumberOfDumpDocks],
        garbageTotal : [simcity.kDataResourceAmount, simcity.kResourceIDGarbage]
      },
      test : function (a) {
        return !a ? !1 : 1 > a.NumIncinerators && 1 < a.NumberOfDumpDocks && 100 < a.garbageTotal
      }
    },
    1979877520 : {
      importance : 7,
      triggerTime : [60, 120],
      iconPath : "icn-balloons-garbage.png",
      displayCountLimit : 10,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness3_AcceptOnlyTemplate.js",
      unitID : 1380229285,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable,
          2660327258], [simcity.kLocalSpeechBalloonLocaleTable, 2660327259]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        NumberOfDumpDocks : [simcity.kDataResourceAmount, simcity.kResourceIDNumberOfDumpDocks],
        garbageDumpCapacity : [simcity.kDataResourceAmount, simcity.kResourceIDGarbageDumpCapacity],
        garbageInDump : [simcity.kDataResourceAmount, simcity.kResourceIDGarbageInDump]
      },
      test : function (a) {
        return !a ? !1 : 1 === a.NumberOfDumpDocks && 0.8 < a.garbageInDump / a.garbageDumpCapacity
      }
    },
    2820982194 : {
      importance : 3,
      triggerTime : [60,
        60],
      iconPath : "icn-balloons-air-residential-desirability.png",
      displayCountLimit : 10,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness4_AcceptOnlyTemplate.js",
      speechBalloonTarget : 3403061518,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2608143756], [simcity.kLocalSpeechBalloonLocaleTable, 2608143757], [simcity.kLocalSpeechBalloonLocaleTable, 2608143758]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        people : [simcity.kDataResourceAmount, simcity.kResourceIDTotalResidential],
        MayorHouseUnlocked : [simcity.kDataResourceAmount,
          simcity.kResourceIDMayorsHouseSmallUnlocked],
        HasMayorsHouse : [simcity.kDataResourceAmount, simcity.kResourceIDHasMayorsHouseSmall]
      },
      test : function (a) {
        return !a ? !1 : 200 < a.people && 1 === a.MayorHouseUnlocked && 0 === a.HasMayorsHouse
      }
    },
    618834573 : {
      importance : 2,
      triggerTime : [60, 120],
      iconPath : "icn-balloons-happiness.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness4_AcceptOnlyTemplate.js",
      speechBalloonTarget : 3403061518,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1579501237], [simcity.kLocalSpeechBalloonLocaleTable,
          1579501236], [simcity.kLocalSpeechBalloonLocaleTable, 1579501239], [simcity.kLocalSpeechBalloonLocaleTable, 1579501238], [simcity.kLocalSpeechBalloonLocaleTable, 1579501233]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        MayorRating : [simcity.kDataResourceAmount, simcity.kResourceIDHappinessGlobals_MayorRating]
      },
      test : function (a) {
        return !a ? !1 : 70 < a.MayorRating
      }
    },
    2598160231 : {
      importance : 2,
      triggerTime : [60, 120],
      iconPath : "icn-balloons-happiness.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness2_AcceptOnlyTemplate.js",
      speechBalloonTarget : 3403061518,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 3667386551], [simcity.kLocalSpeechBalloonLocaleTable, 3667386550], [simcity.kLocalSpeechBalloonLocaleTable, 3667386549], [simcity.kLocalSpeechBalloonLocaleTable, 3667386548], [simcity.kLocalSpeechBalloonLocaleTable, 3667386547]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        MayorRating : [simcity.kDataResourceAmount, simcity.kResourceIDHappinessGlobals_MayorRating]
      },
      test : function (a) {
        return !a ? !1 : 30 > a.MayorRating
      }
    },
    2918905650 : {
      importance : 4,
      triggerTime : [60, 120],
      iconPath : "icn-balloons-happiness.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness5_AcceptOnlyTemplate.js",
      speechBalloonTarget : 3403061518,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 3218559500], [simcity.kLocalSpeechBalloonLocaleTable, 3218559501], [simcity.kLocalSpeechBalloonLocaleTable, 3218559502], [simcity.kLocalSpeechBalloonLocaleTable, 3218559503], [simcity.kLocalSpeechBalloonLocaleTable, 3218559496]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        MayorRating : [simcity.kDataResourceAmount,
          simcity.kResourceIDHappinessGlobals_MayorRating]
      },
      test : function (a) {
        return !a ? !1 : 80 < a.MayorRating
      }
    },
    217574358 : {
      importance : 4,
      triggerTime : [60, 120],
      iconPath : "icn-balloons-happiness.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness1_AcceptOnlyTemplate.js",
      speechBalloonTarget : 3403061518,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 3728142048], [simcity.kLocalSpeechBalloonLocaleTable, 3728142049], [simcity.kLocalSpeechBalloonLocaleTable, 3728142050], [simcity.kLocalSpeechBalloonLocaleTable,
          3728142051], [simcity.kLocalSpeechBalloonLocaleTable, 3728142052]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        MayorRating : [simcity.kDataResourceAmount, simcity.kResourceIDHappinessGlobals_MayorRating]
      },
      test : function (a) {
        return !a ? !1 : 20 > a.MayorRating
      }
    },
    3350515828 : {
      importance : 4,
      triggerTime : [60, 60],
      iconPath : "icn-balloons-air-profit.png",
      displayCountLimit : 10,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness3_AcceptOnlyTemplate.js",
      speechBalloonTarget : 3403061518,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable,
          1463926446], [simcity.kLocalSpeechBalloonLocaleTable, 1463926447], [simcity.kLocalSpeechBalloonLocaleTable, 1463926444], [simcity.kLocalSpeechBalloonLocaleTable, 1463926445]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        HQ_CityHall_Level : [simcity.kDataResourceAmount, simcity.kResourceIDHQ_CityHall_Level],
        HQ_CityHall_IsOn : [simcity.kDataResourceAmount, simcity.kResourceIDHQ_CityHall_IsOn]
      },
      test : function (a) {
        return !a ? !1 : 2 > a.HQ_CityHall_Level && 1 === a.HQ_CityHall_IsOn
      }
    },
    3900841957 : {
      importance : 4,
      triggerTime : [60,
        120],
      iconPath : "icn-balloons-air-profit.png",
      displayCountLimit : 10,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness3_AcceptOnlyTemplate.js",
      speechBalloonTarget : 3403061518,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2032172269], [simcity.kLocalSpeechBalloonLocaleTable, 2032172268]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        people : [simcity.kDataResourceAmount, simcity.kResourceIDTotalResidential],
        HQ_CityHall_Unlocked : [simcity.kDataResourceAmount, simcity.kResourceIDHQ_CityHall_Unlocked],
        HQ_CityHall_Level : [simcity.kDataResourceAmount, simcity.kResourceIDHQ_CityHall_Level]
      },
      test : function (a) {
        return !a ? !1 : 20 < a.people && 0 < a.HQ_CityHall_Unlocked && 1 > a.HQ_CityHall_Level
      }
    },
    3004788376 : {
      importance : 2,
      triggerTime : [60, 120],
      iconPath : "icn-balloons-health.png",
      displayCountLimit : 3,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness4_AcceptOnlyTemplate.js",
      speechBalloonTarget : 3403061518,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 3712789698], [simcity.kLocalSpeechBalloonLocaleTable, 3712789699],
        [simcity.kLocalSpeechBalloonLocaleTable, 3712789696]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        hospitalsBuilt : [simcity.kDataResourceAmount, simcity.kResourceIDHospitalsBuilt]
      },
      test : function (a) {
        return !a ? !1 : 0 < a.hospitalsBuilt
      }
    },
    1999142234 : {
      importance : 2,
      triggerTime : [60, 120],
      iconPath : "icn-balloons-power.png",
      displayCountLimit : 4,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness5_AcceptOnlyTemplate.js",
      speechBalloonTarget : 416754379,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1798646708],
        [simcity.kLocalSpeechBalloonLocaleTable, 1798646709], [simcity.kLocalSpeechBalloonLocaleTable, 1798646710]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        people : [simcity.kDataResourceAmount, simcity.kResourceIDTotalResidential],
        NumberOfT1CoalPowerPlants : [simcity.kDataResourceAmount, simcity.kResourceIDPower_NumberOfT1CoalPowerPlants],
        unpoweredbuildings : [simcity.kDataResourceAmount, simcity.kResourceIDPowerGlobals_UnpoweredBuildings]
      },
      test : function (a) {
        return !a ? !1 : 0 < a.people && 1 < a.NumberOfT1CoalPowerPlants &&
        5 > a.unpoweredbuildings
      }
    },
    1999142209 : {
      importance : 2,
      triggerTime : [60, 120],
      iconPath : "icn-balloons-power.png",
      displayCountLimit : 4,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness2_AcceptOnlyTemplate.js",
      speechBalloonTarget : 3403061518,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2132117033], [simcity.kLocalSpeechBalloonLocaleTable, 2132117032], [simcity.kLocalSpeechBalloonLocaleTable, 2132117035]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        people : [simcity.kDataResourceAmount, simcity.kResourceIDTotalResidential],
        NumberOfWindTurbines : [simcity.kDataResourceAmount, simcity.kResourceIDPower_NumberOfWindTurbines],
        NumberOfT1CoalPowerPlants : [simcity.kDataResourceAmount, simcity.kResourceIDPower_NumberOfT1CoalPowerPlants]
      },
      test : function (a) {
        return !a ? !1 : 0 < a.people && 0 === a.NumberOfWindTurbines && 2 <= a.NumberOfT1CoalPowerPlants
      }
    },
    1046642060 : {
      importance : 2,
      triggerTime : [120, 500],
      iconPath : "icn-balloons-air-profit.png",
      displayCountLimit : 3,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness3_AcceptOnlyTemplate.js",
      speechBalloonTarget : 3403061518,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 3903021670], [simcity.kLocalSpeechBalloonLocaleTable, 3903021671], [simcity.kLocalSpeechBalloonLocaleTable, 3903021668]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        people : [simcity.kDataResourceAmount, simcity.kResourceIDTotalResidential]
      },
      test : function (a) {
        return !a ? !1 : 100 < a.people && 1E3 > a.people
      }
    },
    3531363907 : {
      importance : 3,
      triggerTime : [100, 140],
      iconPath : "icn-balloons-tourism.png",
      displayCountLimit : 5,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness3_AcceptOnlyTemplate.js",
      speechBalloonTarget : 1867605058,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1367110451]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        people : [simcity.kDataBinAmount, simcity.kResourceIDTotalResidential],
        attraction : [simcity.kDataBinAmount, simcity.kResourceIDAttractionLevel]
      },
      test : function (a) {
        return !a ? !1 : 5E3 < a.people && 25 > a.attraction
      }
    },
    497281959 : {
      importance : 4,
      triggerTime : [90, 120],
      iconPath : "icn-balloons-tourism.png",
      displayCountLimit : 4,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness3_AcceptOnlyTemplate.js",
      speechBalloonTarget : 11435360,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 3037982583]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        people : [simcity.kDataResourceAmount, simcity.kResourceIDTotalResidential],
        T1stadiums : [simcity.kDataResourceAmount, simcity.kResourceIDNumberOfT1Stadiums],
        commercial : [simcity.kDataResourceAmount, simcity.kResourceIDNumberOfCommercial],
        guided : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Guided]
      },
      test : function (a) {
        return !a ? !1 : 1E3 < a.people && 0 === a.T1stadiums &&
        200 <= a.commercial && 0 === a.guided
      }
    },
    1309096092 : {
      importance : 4,
      triggerTime : [90, 120],
      iconPath : "icn-balloons-tourism.png",
      displayCountLimit : 4,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness3_AcceptOnlyTemplate.js",
      speechBalloonTarget : 11435360,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2691979190]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        people : [simcity.kDataResourceAmount, simcity.kResourceIDTotalResidential],
        T2stadiums : [simcity.kDataResourceAmount, simcity.kResourceIDNumberOfT2Stadiums],
        commercial : [simcity.kDataResourceAmount, simcity.kResourceIDNumberOfCommercial],
        guided : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Guided]
      },
      test : function (a) {
        return !a ? !1 : 2500 < a.people && 0 === a.T2stadiums && 300 <= a.commercial && 0 === a.guided
      }
    },
    3335243481 : {
      importance : 2,
      triggerTime : [60, 120],
      iconPath : "icn-balloons-tourism.png",
      displayCountLimit : 2,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness4_AcceptOnlyTemplate.js",
      speechBalloonTarget : 11435360,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable,
          3933022561], [simcity.kLocalSpeechBalloonLocaleTable, 3933022560]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        T1stadiums : [simcity.kDataResourceAmount, simcity.kResourceIDNumberOfT1Stadiums]
      },
      test : function (a) {
        return !a ? !1 : 0 < a.T1stadiums
      }
    },
    1564754332 : {
      importance : 2,
      triggerTime : [60, 120],
      iconPath : "icn-balloons-tourism.png",
      displayCountLimit : 2,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness4_AcceptOnlyTemplate.js",
      speechBalloonTarget : 11435360,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable,
          141636278], [simcity.kLocalSpeechBalloonLocaleTable, 141636279], [simcity.kLocalSpeechBalloonLocaleTable, 141636276]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        T2stadiums : [simcity.kDataResourceAmount, simcity.kResourceIDNumberOfT2Stadiums]
      },
      test : function (a) {
        return !a ? !1 : 0 < a.T2stadiums
      }
    },
    424675553 : {
      importance : 7,
      triggerTime : [60, 120],
      iconPath : "icn-balloons-roads.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness3_AcceptOnlyTemplate.js",
      speechBalloonTarget : 11435360,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable,
          1395617225], [simcity.kLocalSpeechBalloonLocaleTable, 1395617224], [simcity.kLocalSpeechBalloonLocaleTable, 1395617227], [simcity.kLocalSpeechBalloonLocaleTable, 1395617226], [simcity.kLocalSpeechBalloonLocaleTable, 1395617229]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        numberOfBusT1Stops : [simcity.kDataResourceAmount, simcity.kResourceIDNumberOfBusT1Stops],
        HQ_CityHall_IsOn : [simcity.kDataResourceAmount, simcity.kResourceIDHQ_CityHall_IsOn],
        congestion : [simcity.kDataPathCongestion],
        people : [simcity.kDataBinAmount,
          simcity.kResourceIDTotalResidential]
      },
      test : function (a) {
        return !a ? !1 : 1 > a.numberOfBusT1Stops && 0 < a.HQ_CityHall_IsOn && 0.75 <= a.congestion && 1500 <= a.people
      }
    },
    4035659762 : {
      importance : 5,
      triggerTime : [60, 120],
      iconPath : "icn-balloons-roads.png",
      displayCountLimit : 5,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness4_AcceptOnlyTemplate.js",
      speechBalloonTarget : 3403061518,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2670547276], [simcity.kLocalSpeechBalloonLocaleTable, 2670547277], [simcity.kLocalSpeechBalloonLocaleTable,
          2670547278], [simcity.kLocalSpeechBalloonLocaleTable, 2670547279], [simcity.kLocalSpeechBalloonLocaleTable, 2670547272]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        numberOfBusT1Stops : [simcity.kDataResourceAmount, simcity.kResourceIDNumberOfBusT1Stops]
      },
      test : function (a) {
        return !a ? !1 : 1 < a.numberOfBusT1Stops
      }
    },
    70476047 : {
      importance : 7,
      triggerTime : [60, 120],
      iconPath : "icn-balloons-roads.png",
      displayCountLimit : 5,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness3_AcceptOnlyTemplate.js",
      speechBalloonTarget : 11435360,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2673049663], [simcity.kLocalSpeechBalloonLocaleTable, 2673049662], [simcity.kLocalSpeechBalloonLocaleTable, 2673049661], [simcity.kLocalSpeechBalloonLocaleTable, 2673049660], [simcity.kLocalSpeechBalloonLocaleTable, 2673049659]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        ferries : [simcity.kDataResourceAmount, simcity.kResourceIDNumberOfFerryT1Garages],
        hasDeptOfTrans : [simcity.kDataResourceAmount, simcity.kResourceIDHQ_CityHall_Transportation_Module_IsOn],
        waterinbox : [simcity.kDataResourceAmount, simcity.kResourceIDNumberOfBoatConnections]
      },
      test : function (a) {
        return !a ? !1 : 1 > a.ferries && 0 < a.hasDeptOfTrans && 0 < a.waterinbox
      }
    },
    3032113824 : {
      importance : 3,
      triggerTime : [30, 60],
      iconPath : "icn-balloons-roads.png",
      displayCountLimit : 5,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness5_AcceptOnlyTemplate.js",
      speechBalloonTarget : 3403061518,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2967388074], [simcity.kLocalSpeechBalloonLocaleTable, 2967388075], [simcity.kLocalSpeechBalloonLocaleTable,
          2967388072], [simcity.kLocalSpeechBalloonLocaleTable, 2967388073], [simcity.kLocalSpeechBalloonLocaleTable, 2967388078]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        ferries : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfFerryT1Garages]
      },
      test : function (a) {
        return !a ? !1 : 0 < a.ferries
      }
    },
    1394342498 : {
      importance : 7,
      triggerTime : [60, 120],
      iconPath : "icn-balloons-rail.png",
      displayCountLimit : 5,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness3_AcceptOnlyTemplate.js",
      speechBalloonTarget : 416754379,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable,
          315315452], [simcity.kLocalSpeechBalloonLocaleTable, 315315453], [simcity.kLocalSpeechBalloonLocaleTable, 315315454], [simcity.kLocalSpeechBalloonLocaleTable, 315315455], [simcity.kLocalSpeechBalloonLocaleTable, 315315448]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        TrainT2Stops : [simcity.kDataResourceAmount, simcity.kResourceIDNumberOfTrainT2Stops],
        TrainStationUnlocked : [simcity.kDataResourceAmount, simcity.kResourceIDHQ_CityHall_Transportation_Module_IsOn],
        trainInBox : [simcity.kDataResourceAmount, simcity.kResourceIDNumberOfRailConnections]
      },
      test : function (a) {
        return !a ? !1 : 0 === a.TrainT2Stops && 0 < a.TrainStationUnlocked && 0 < a.trainInBox
      }
    },
    2060322289 : {
      importance : 3,
      triggerTime : [60, 120],
      iconPath : "icn-balloons-rail.png",
      displayCountLimit : 2,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness4_AcceptOnlyTemplate.js",
      speechBalloonTarget : 3403061518,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 3900841433], [simcity.kLocalSpeechBalloonLocaleTable, 3900841432], [simcity.kLocalSpeechBalloonLocaleTable, 3900841435], [simcity.kLocalSpeechBalloonLocaleTable,
          3900841434], [simcity.kLocalSpeechBalloonLocaleTable, 3900841437]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        numberOfTrainT2Stops : [simcity.kDataResourceAmount, simcity.kResourceIDNumberOfTrainT2Stops]
      },
      test : function (a) {
        return !a ? !1 : 1 < a.numberOfTrainT2Stops
      }
    },
    3054313149 : {
      importance : 8,
      triggerTime : [60, 120],
      iconPath : "icn-balloons-rail.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness3_AcceptOnlyTemplate.js",
      speechBalloonTarget : 3403061518,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable,
          1452258853], [simcity.kLocalSpeechBalloonLocaleTable, 1452258852], [simcity.kLocalSpeechBalloonLocaleTable, 1452258855], [simcity.kLocalSpeechBalloonLocaleTable, 1452258854], [simcity.kLocalSpeechBalloonLocaleTable, 1452258849]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        numberOfLightTrainT1Garages : [simcity.kDataResourceAmount, simcity.kResourceIDNumberOfLightTrainT1Garages],
        HQ_CityHall_IsOn : [simcity.kDataResourceAmount, simcity.kResourceIDHQ_CityHall_IsOn],
        congestion : [simcity.kDataPathCongestion],
        people : [simcity.kDataBinAmount, simcity.kResourceIDTotalResidential]
      },
      test : function (a) {
        return !a ? !1 : 0 === a.numberOfLightTrainT1Garages && 0 < a.HQ_CityHall_IsOn && 0.75 <= a.congestion && 3E3 <= a.people
      }
    },
    352374126 : {
      importance : 3,
      triggerTime : [60, 120],
      iconPath : "icn-balloons-rail.png",
      displayCountLimit : 2,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness4_AcceptOnlyTemplate.js",
      speechBalloonTarget : 3403061518,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 368336760], [simcity.kLocalSpeechBalloonLocaleTable,
          368336761], [simcity.kLocalSpeechBalloonLocaleTable, 368336762], [simcity.kLocalSpeechBalloonLocaleTable, 368336763], [simcity.kLocalSpeechBalloonLocaleTable, 368336764]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        numberOfLightTrainT1Stops : [simcity.kDataResourceAmount, simcity.kResourceIDNumberOfLightTrainT1Stops]
      },
      test : function (a) {
        return !a ? !1 : 1 < a.numberOfLightTrainT1Stops
      }
    }
  }
};
simcity.SpeechBalloonEvents = {
  DataBindings : {
    555604848 : {
      importance : 9,
      triggerTime : [5, 10],
      iconPath : "icn-balloons-electronics.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiAcceptSpecialization.js",
      speechBalloonTarget : 4262121095,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1086991507, 2046130610], [simcity.kLocalSpeechBalloonLocaleTable, 1086991506], [simcity.kLocalSpeechBalloonLocaleTable, 1086991505]],
      expirationTime : [-1, -1],
      enableWithMaxMissions : !0,
      vignetteActorPalette : 2236387519,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_Special_male_001,
      queries : {
        electronics_specialized : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Electronics]
      },
      test : function (a) {
        return !a ? !1 : 1 === a.electronics_specialized
      }
    },
    1816067128 : {
      importance : 9,
      triggerTime : [5, 10],
      iconPath : "icn-balloons-casino.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiAcceptSpecialization.js",
      speechBalloonTarget : 1482763029,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable,
          2775205733, 2991265898], [simcity.kLocalSpeechBalloonLocaleTable, 2775205732], [simcity.kLocalSpeechBalloonLocaleTable, 2775205735]],
      expirationTime : [-1, -1],
      enableWithMaxMissions : !0,
      vignetteActorPalette : 4187961950,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_Special_male_006,
      queries : {
        gambling_specialized : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Gambling]
      },
      test : function (a) {
        return !a ? !1 : 1 === a.gambling_specialized
      }
    },
    974832851 : {
      importance : 8,
      triggerTime : [60, 120],
      iconPath : "icn-balloons-alloy.png",
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonAcceptDismissTemplate.js",
      speechBalloonTarget : 1183046830,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2903894074, 423327812]],
      expirationTime : [60, 90],
      missionUnitID : 2244724547,
      vignetteActorPalette : 1152278309,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_BUSINESS_PERSON_FEMALE_002,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0xe083c437", "Mission title missing: MSImExAddAlloyStorageAndImport"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount,
          613231691],
        alloyLot : [simcity.kDataBinAmount, simcity.kResourceIDNumImExAlloyLots],
        alloyBuilt : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfAlloyAssemblers]
      },
      test : function (a) {
        return !a ? !1 : 1 > a.alloyLot && 1 > a.alloyBuilt
      }
    },
    2512183165 : {
      importance : 8,
      triggerTime : [60, 120],
      iconPath : "icn-balloons-coal.png",
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonAcceptDismissTemplate.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 4113348192, 3142223359]],
      expirationTime : [60, 90],
      missionUnitID : 675371205,
      vignetteActorPalette : 3941900653,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_MINE_FOREMAN_MALE_004,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x5ab8572d", "Mission title missing: MSImExAddCoalStorageAndImport"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 1317935101],
        coalLot : [simcity.kDataBinAmount, simcity.kResourceIDNumImExCoalLots],
        coalBuilt : [simcity.kDataBinAmount, simcity.kResourceIDCoalMinesBuilt]
      },
      test : function (a) {
        return !a ? !1 : 1 > a.coalLot && 1 > a.coalBuilt
      }
    },
    1533473579 : {
      importance : 8,
      triggerTime : [60,
        120],
      iconPath : "icn-balloons-electronics.png",
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiPageAcceptDismiss.js",
      speechBalloonTarget : 667130774,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2247174214, 563762969], [simcity.kLocalSpeechBalloonLocaleTable, 2247174215]],
      expirationTime : [60, 90],
      missionUnitID : 2396562259,
      vignetteActorPalette : 1883436934,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_06_003,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0xa15d26e7",
        "Mission title missing: MSImExAddElectronicsStorageAndImport"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 3847941147],
        electronicsLot : [simcity.kDataBinAmount, simcity.kResourceIDNumImExElectronicsLots],
        electronicsBuiltT1 : [simcity.kDataBinAmount, simcity.kResourceIDNumT1ElectronicsBase],
        electronicsBuiltT2 : [simcity.kDataBinAmount, simcity.kResourceIDNumT2ElectronicsBase]
      },
      test : function (a) {
        return !a ? !1 : 1 > a.electronicsLot && 1 > a.electronicsBuiltT1 + a.electronicsBuiltT2
      }
    },
    3787294069 : {
      importance : 8,
      triggerTime : [60,
        120],
      iconPath : "icn-balloons-oil.png",
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonAcceptDismissTemplate.js",
      speechBalloonTarget : 383082304,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2677226844, 828952755]],
      expirationTime : [60, 90],
      missionUnitID : 2881608438,
      vignetteActorPalette : 798812438,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_TRAIN_DRIVER_MALE_002,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x885eaeac", "Mission title missing: MSImExAddOilStorageAndImport"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 3647917806],
        oilLot : [simcity.kDataBinAmount, simcity.kResourceIDNumImExOilCrudeLots],
        oilBuilt : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfOilWells]
      },
      test : function (a) {
        return !a ? !1 : 1 > a.oilLot && 1 > a.oilBuilt
      }
    },
    1154032570 : {
      importance : 8,
      triggerTime : [60, 120],
      iconPath : "icn-balloons-ore.png",
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonAcceptDismissTemplate.js",
      speechBalloonTarget : 3381141619,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2817989217,
          3118942710]],
      expirationTime : [60, 90],
      missionUnitID : 391821530,
      vignetteActorPalette : 84406155,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_Residential_Female_10,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x45865238", "Mission title missing: MSImExAddOreStorageAndImport"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 2826901170],
        oreLot : [simcity.kDataBinAmount, simcity.kResourceIDNumImExOreRawLots],
        oreBuilt : [simcity.kDataBinAmount, simcity.kResourceIDOreMinesBuilt]
      },
      test : function (a) {
        return !a ?
        !1 : 1 > a.oreLot && 1 > a.oreBuilt
      }
    },
    3308825294 : {
      importance : 8,
      triggerTime : [60, 120],
      iconPath : "icn-balloons-oilrefine.png",
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonAcceptDismissTemplate.js",
      speechBalloonTarget : 760214703,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1824096961, 479875064]],
      expirationTime : [60, 90],
      missionUnitID : 2076452306,
      vignetteActorPalette : 1765993603,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_LIBRARIAN_FEMALE_001,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json",
        "0xce2d5ea0", "Mission title missing: MSImExAddPlasticStorageAndImport"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 172960218],
        plasticLot : [simcity.kDataBinAmount, simcity.kResourceIDNumImExPlasticLots],
        plasticBuilt : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfPlasticAssemblers]
      },
      test : function (a) {
        return !a ? !1 : 1 > a.plasticLot && 1 > a.plasticBuilt
      }
    },
    1108413795 : {
      importance : 9,
      triggerTime : [5, 10],
      iconPath : "icn-balloons-coal.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiAcceptSpecialization.js",
      speechBalloonTarget : 1953260309,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2806121526, 2070619713], [simcity.kLocalSpeechBalloonLocaleTable, 2806121527], [simcity.kLocalSpeechBalloonLocaleTable, 2806121524]],
      expirationTime : [-1, -1],
      enableWithMaxMissions : !0,
      vignetteActorPalette : 1225280358,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_Special_male_003,
      queries : {
        metals_specialized : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Metals]
      },
      test : function (a) {
        return !a ? !1 :
        1 === a.metals_specialized
      }
    },
    2286869602 : {
      importance : 9,
      triggerTime : [5, 10],
      iconPath : "icn-balloons-oil.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiAcceptSpecialization.js",
      unitID : 501883312,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1991971533, 2289557600], [simcity.kLocalSpeechBalloonLocaleTable, 1991971532]],
      expirationTime : [-1, -1],
      enableWithMaxMissions : !0,
      vignetteActorPalette : 1036112034,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_Special_female_001,
      queries : {
        petroleum_specialized : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Petroleum]
      },
      test : function (a) {
        return !a ? !1 : 1 === a.petroleum_specialized
      }
    },
    530157819 : {
      importance : 9,
      triggerTime : [5, 10],
      iconPath : "icn-balloons-trade.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiAcceptSpecialization.js",
      unitID : 3411310402,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 735363712, 4279248888], [simcity.kLocalSpeechBalloonLocaleTable, 735363713]],
      expirationTime : [-1,
        -1],
      enableWithMaxMissions : !0,
      vignetteActorPalette : 3099101859,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_Special_male_004,
      queries : {
        trade_specialized : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Trade]
      },
      test : function (a) {
        return !a ? !1 : 1 === a.trade_specialized
      }
    },
    2569522831 : {
      importance : 1,
      triggerTime : [1, 1],
      iconPath : "icn-balloons-ground-pollution.png",
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonEditor.js",
      enableWhileBurning : !0,
      enableInTutorial : !0,
      enableInDisaster : !0,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2794448294, 2731333015], [simcity.kLocalSpeechBalloonLocaleTable, 2794448295]],
      expirationTime : [-1, -1],
      enableWithMaxMissions : !0,
      vignetteActorPalette : 112969038,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_01_003,
      queries : {}

    },
    1331151604 : {
      importance : 10,
      triggerTime : [5, 10],
      iconPath : "icn-balloons-upgrade.png",
      displayCountLimit : 10,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiPageAcceptDismiss.js",
      speechBalloonTarget : 4055465475,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable,
          2444840201, 1445721464], [simcity.kLocalSpeechBalloonLocaleTable, 2444840200]],
      expirationTime : [-1, -1],
      missionUnitID : 583114655,
      vignetteActorPalette : 3589679452,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_POLITICIAN_MALE_002,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x577c08fb", "Mission title missing: MSCivicUpgradeCityHall"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 3705823799],
        HQ_CityHall_Level : [simcity.kDataResourceAmount, simcity.kResourceIDHQ_CityHall_Level]
      },
      test : function (a) {
        return !a ? !1 : 1 === a.HQ_CityHall_Level && 3E3 <= simcity.GetFudgedPopulation()
      }
    },
    2007252102 : {
      importance : 7,
      triggerTime : [120, 600],
      iconPath : "icn-balloons-crime.png",
      displayCountLimit : 10,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonEditor.js",
      unitBin : 2098293146,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 590456625, 1526671339]],
      expirationTime : [60, 120],
      vignetteActorPalette : 2534289910,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_POLICE_OFFICER_MALE_005,
      queries : {}

    },
    1023867910 : {
      importance : 8,
      triggerTime : [500, 1E3],
      iconPath : "icn-balloons-crime.png",
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiPageAcceptDismiss.js",
      speechBalloonTarget : 3020739884,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1373534750, 969169974], [simcity.kLocalSpeechBalloonLocaleTable, 1373534751], [simcity.kLocalSpeechBalloonLocaleTable, 1373534748]],
      expirationTime : [60, 120],
      missionUnitID : 3002982005,
      vignetteActorPalette : 2416846579,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_POLICE_OFFICER_FEMALE_001,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x1a6d05fd", "Mission title missing: MSCrimeCityHallBomb"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 775537565],
        HQ_CityHall_Level : [simcity.kDataBinAmount, simcity.kResourceIDHQ_CityHall_Level],
        Simoleons : [simcity.kDataResourceAmount, simcity.kResourceIDSimoleons],
        DetectiveUnlocked : [simcity.kDataResourceAmount, simcity.kResourceIDDetectiveWingUnlocked]
      },
      test : function (a) {
        return !a ? !1 : 1E6 < a.Simoleons && 1 < a.HQ_CityHall_Level && 0 < a.DetectiveUnlocked
      }
    },
    1503012992 : {
      importance : 8,
      triggerTime : [5, 10],
      iconPath : "icn-balloons-school.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiAcceptSpecialization.js",
      unitID : 1112583733,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1978689241, 1576428417], [simcity.kLocalSpeechBalloonLocaleTable, 1978689240], [simcity.kLocalSpeechBalloonLocaleTable, 1978689243]],
      expirationTime : [-1, -1],
      enableWithMaxMissions : !0,
      vignetteActorPalette : 1607066185,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_Special_female_003,
      queries : {
        education_specialized : [simcity.kDataResourceAmount, simcity.kResourceIDSpecialization_Education]
      },
      test : function (a) {
        return !a ? !1 : 1 === a.education_specialized
      }
    },
    2883249331 : {
      importance : 8,
      triggerTime : [30, 60],
      iconPath : "icn-balloons-fire.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonAcceptDismissTemplate.js",
      enableWhileBurning : !0,
      enableInDisaster : !0,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 3418658235, 2731333015]],
      expirationTime : [60, 9E3],
      missionUnitID : 219752097,
      vignetteActorPalette : 112969038,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_01_003,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x9e192011", "Mission title missing: MSFireBuildFireStation"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 3743811193],
        activeFires : [simcity.kDataResourceAmount, simcity.kResourceIDNumberOfFires],
        fireStation : [simcity.kDataResourceAmount, simcity.kResourceIDNumberOfFireStations]
      },
      test : function (a) {
        return !a ? !1 : 1 > a.fireStation && 0 < a.activeFires
      }
    },
    1965778579 : {
      importance : 6,
      triggerTime : [30, 60],
      iconPath : "icn-balloons-fire.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiPageAcceptDismiss.js",
      speechBalloonTarget : 3910608796,
      unitBin : 2098293151,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1655494497, 2731333015], [simcity.kLocalSpeechBalloonLocaleTable, 1655494496]],
      expirationTime : [60, 120],
      missionUnitID : 3391143048,
      vignetteActorPalette : 112969038,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_01_003,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x77d1ad0a", "Mission title missing: MSFireBuildFireBell"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 3907284448],
        fireBell : [simcity.kDataDoesUnitExist, "0x83f6175e"]
      },
      test : function (a) {
        return !a ? !1 : !a.fireBell
      }
    },
    349812833 : {
      importance : 6,
      triggerTime : [30, 60],
      iconPath : "icn-balloons-fire.png",
      displayCountLimit : 6,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonEditor.js",
      speechBalloonTarget : 539922427,
      unitBin : 2098293146,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable,
          864433125, 3165171450]],
      expirationTime : [60, 120],
      vignetteActorPalette : 2719706269,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_FIRE_MALE_001,
      queries : {}

    },
    3636522598 : {
      importance : 9,
      triggerTime : [60, 120],
      iconPath : "icn-balloons-fire.png",
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiPageAcceptDismiss.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1650044826, 3628211584], [simcity.kLocalSpeechBalloonLocaleTable, 1650044827], [simcity.kLocalSpeechBalloonLocaleTable, 1650044824]],
      expirationTime : [120,
        240],
      missionUnitID : 3223617304,
      vignetteActorPalette : 1256068118,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_Residential_Male_13,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x75a7ca7a", "Mission title missing: MSFireHeatWave"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 2613467968]
      }
    },
    1801523300 : {
      importance : 8,
      triggerTime : [300, 600],
      iconPath : "icn-balloons-garbage.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonEditor.js",
      speechBalloonTarget : 1380229285,
      unitBin : 2098293144,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 810427806, 3931230455]],
      expirationTime : [60, 120],
      vignetteActorPalette : 3849227582,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_SANITATION_WORKER_MALE_004,
      queries : {
        garbageCans : [simcity.kDataResourceAmount, simcity.kResourceIDGarbagePickUpNeeded],
        garbageTrucks : [simcity.kDataResourceAmount, simcity.kResourceIDGarbageTruck]
      },
      test : function (a) {
        return !a ? !1 : a.garbageCans > 100 * a.garbageTrucks
      }
    },
    2353689678 : {
      importance : 9,
      triggerTime : [15,
        30],
      iconPath : "icn-balloons-garbage.png",
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiPageAcceptDismiss.js",
      speechBalloonTarget : 3403061518,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1105104519, 2245694934], [simcity.kLocalSpeechBalloonLocaleTable, 1105104518], [simcity.kLocalSpeechBalloonLocaleTable, 1105104517]],
      expirationTime : [120, 240],
      missionUnitID : 522024414,
      vignetteActorPalette : 1583863611,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_Residential_Male_15,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json",
        "0xde0fdd84", "Mission title missing: MSGarbageDayAfterNewYears"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 3639499430]
      }
    },
    2841375762 : {
      importance : 8,
      triggerTime : [15, 30],
      iconPath : "icn-balloons-garbage.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiPageAcceptDismiss.js",
      speechBalloonTarget : 1145013416,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 3516824300, 2848776345], [simcity.kLocalSpeechBalloonLocaleTable, 3516824301], [simcity.kLocalSpeechBalloonLocaleTable, 3516824302]],
      expirationTime : [60, 120],
      missionUnitID : 3104209049,
      vignetteActorPalette : 263967544,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_11_003,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0xcbd60479", "Mission title missing: MSGarbageBuildGarbageDump"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 1226597313],
        NumberOfDumpDocks : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfDumpDocks],
        garbageUnlocked : [simcity.kDataBinAmount, simcity.kResourceIDHQ_CityHall_IsOn]
      },
      test : function (a) {
        return !a ? !1 : 0 === a.NumberOfDumpDocks && 0 < a.garbageUnlocked
      }
    },
    201634002 : {
      importance : 9,
      triggerTime : [60, 90],
      iconPath : "icn-balloons-health.png",
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonAcceptDismissTemplate.js",
      enableInDisaster : !0,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1713892467, 2848776339]],
      expirationTime : [90, 120],
      missionUnitID : 178212733,
      vignetteActorPalette : 263967538,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_16_002,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json",
        "0x43cb91d5", "Mission title missing: MSHealthNeedHospital"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 2785881861],
        HospitalsBuilt : [simcity.kDataBinAmount, simcity.kResourceIDHospitalsBuilt],
        injured : [simcity.kDataResourceAmount, simcity.kResourceIDInjury]
      },
      test : function (a) {
        return !a ? !1 : 1 > a.HospitalsBuilt && 10 < a.injured
      }
    },
    4123946850 : {
      importance : 6,
      triggerTime : [120, 600],
      iconPath : "icn-balloons-health.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonEditor.js",
      unitID : 807628145,
      unitBin : 2098293145,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1384751981, 3379666235]],
      expirationTime : [60, 120],
      vignetteActorPalette : 2462799717,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_Residential_Male_08,
      queries : {}

    },
    2850001113 : {
      importance : 8,
      triggerTime : [30, 60],
      iconPath : "icn-balloons-crime.png",
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonAcceptDismissTemplate.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 3007861246, 526176134]],
      expirationTime : [60, 120],
      missionUnitID : 1653643585,
      vignetteActorPalette : 3804956887,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_BUS_DRIVER_MALE_001,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0xfb6db231", "Mission title missing: MSCivicProtestAboutCrime"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 3015720457],
        CriminalsAtLarge : [simcity.kDataResourceAmount, simcity.kResourceIDCriminalsAtLarge]
      },
      test : function (a) {
        return !a ? !1 : 5 < a.CriminalsAtLarge
      }
    },
    3522495174 : {
      importance : 8,
      triggerTime : [30, 60],
      iconPath : "icn-balloons-garbage.png",
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonAcceptDismissTemplate.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1861687779, 2848776338]],
      expirationTime : [60, 120],
      missionUnitID : 2682119278,
      vignetteActorPalette : 263967539,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_17_002,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x3d900ff4", "Mission title missing: MSCivicProtestAboutGarbage"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 2404482678],
        garbagePickUpNeeded : [simcity.kDataResourceAmount,
          simcity.kResourceIDGarbagePickUpNeeded]
      },
      test : function (a) {
        return !a ? !1 : 15 < a.garbagePickUpNeeded
      }
    },
    3726526121 : {
      importance : 8,
      triggerTime : [30, 60],
      iconPath : "icn-balloons-air-population.png",
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonAcceptDismissTemplate.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 301506108, 3137804066]],
      expirationTime : [60, 120],
      missionUnitID : 2933679473,
      vignetteActorPalette : 112969037,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_02_001,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json",
        "0x203bd181", "Mission title missing: MSCivicProtestAboutNoDesirability"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 3136214553],
        NumberOfParks : [simcity.kDataResourceAmount, 3919575048],
        people : [simcity.kDataResourceAmount, simcity.kResourceIDTotalResidential]
      },
      test : function (a) {
        return !a ? !1 : a.NumberOfParks < a.people / 500
      }
    },
    40611879 : {
      importance : 8,
      triggerTime : [30, 60],
      iconPath : "icn-balloons-power.png",
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonAcceptDismissTemplate.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable,
          1744212360, 3322358002]],
      expirationTime : [60, 120],
      missionUnitID : 1217173919,
      vignetteActorPalette : 263967545,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_12_004,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x826e76fb", "Mission title missing: MSCivicProtestAboutNoPower"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 3181212887],
        unpoweredBuildings : [simcity.kDataBinAmount, simcity.kResourceIDPowerGlobals_UnpoweredBuildings]
      },
      test : function (a) {
        return !a ? !1 : 5 < a.unpoweredBuildings
      }
    },
    285147549 : {
      importance : 8,
      triggerTime : [30, 60],
      iconPath : "icn-balloons-air-money.png",
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonAcceptDismissTemplate.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 189594908, 2731333021]],
      expirationTime : [60, 120],
      missionUnitID : 3885875301,
      vignetteActorPalette : 112969028,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_04_003,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x71552b4d", "Mission title missing: MSCivicProtestAboutNoRent"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 2970058381]
      }
    },
    91654425 : {
      importance : 8,
      triggerTime : [30, 60],
      iconPath : "icn-balloons-water.png",
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonAcceptDismissTemplate.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 471995030, 2848776345]],
      expirationTime : [60, 120],
      missionUnitID : 3231996129,
      vignetteActorPalette : 263967544,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_11_003,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json",
        "0x65599f51", "Mission title missing: MSCivicProtestAboutNoWater"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 3359132361],
        unwateredbuildings : [simcity.kDataResourceAmount, simcity.kResourceIDWaterGlobals_UnwateredBuildings]
      },
      test : function (a) {
        return !a ? !1 : 5 < a.unwateredbuildings
      }
    },
    488823017 : {
      importance : 8,
      triggerTime : [30, 60],
      iconPath : "icn-balloons-air-pollution.png",
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonAcceptDismissTemplate.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 3479145918,
          3322358006]],
      expirationTime : [60, 120],
      missionUnitID : 3128730769,
      vignetteActorPalette : 263967549,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_15_002,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0xe0095d21", "Mission title missing: MSCivicProtestAboutPollution"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 3659154265]
      }
    },
    3744163318 : {
      importance : 8,
      triggerTime : [30, 60],
      iconPath : "icn-balloons-health.png",
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonAcceptDismissTemplate.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2973500565, 83023059]],
      expirationTime : [60, 120],
      missionUnitID : 1148775806,
      vignetteActorPalette : 263967545,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_12_004,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x18f1a7a4", "Mission title missing: MSCivicProtestAboutSickness"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 3355307142],
        Sick : [simcity.kDataBinAmount, simcity.kResourceIDSickGlobal],
        Death : [simcity.kDataResourceAmount,
          simcity.kResourceIDDeath],
        Injured : [simcity.kDataBinAmount, simcity.kResourceIDInjuryGlobal]
      },
      test : function (a) {
        return !a ? !1 : 10 < a.Sick || 10 < a.Death || 10 < a.Injured
      }
    },
    1076190396 : {
      importance : 8,
      triggerTime : [30, 60],
      iconPath : "icn-balloons-air-profit.png",
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonAcceptDismissTemplate.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 3388129777, 3137804065]],
      expirationTime : [60, 120],
      missionUnitID : 1104393108,
      vignetteActorPalette : 112969038,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_01_003,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0xde0778fe", "Mission title missing: MSCivicProtestAboutTaxes"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 1164007788]
      }
    },
    1118327298 : {
      importance : 8,
      triggerTime : [60, 120],
      iconPath : "icn-balloons-roads.png",
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiPageAcceptDismiss.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 101495452, 397798760]],
      expirationTime : [-1, -1],
      missionUnitID : 4199014287,
      vignetteActorPalette : 1258331781,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_Residential_Male_08,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0xeb44080b", "Mission title missing: MSTradeConnectToNeighbour"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 2653492967],
        access : [simcity.kDataBinAmount, simcity.kResourceIDAccessToOutside],
        accessCap : [simcity.kDataBinAmount, simcity.kResourceIDAccessToOutsideCapacity]
      },
      test : function (a) {
        return !a ? !1 : a.access < 0.5 * a.accessCap
      }
    },
    472932684 : {
      importance : 6,
      triggerTime : [60, 120],
      iconPath : "icn-balloons-sewage.png",
      displayCountLimit : 5,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonEditor.js",
      unitBin : 2098293146,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1042082972, 2992301821]],
      expirationTime : [60, 120],
      vignetteActorPalette : 2930569410,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_AIR_TRAFFIC_CONTROLLER_MALE_001,
      queries : {}

    },
    654488091 : {
      importance : 6,
      triggerTime : [60, 120],
      iconPath : "icn-balloons-trade.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonRegion.js",
      unitID : 763908280,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1757441410, 267576928]],
      expirationTime : [60,
        120],
      vignetteActorPalette : 112969038,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_01_003,
      queries : {}

    },
    553803811 : {
      importance : 7,
      triggerTime : [60, 120],
      iconPath : "icn-balloons-air-population.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiPageAcceptDismiss.js",
      speechBalloonTarget : 442264791,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 3084538995, 151290895], [simcity.kLocalSpeechBalloonLocaleTable, 3084538994], [simcity.kLocalSpeechBalloonLocaleTable, 3084538993]],
      expirationTime : [120, 300],
      missionUnitID : 3374202427,
      vignetteActorPalette : 780344294,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_LAWYER_MALE_002,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0xc7ddcdbf", "Mission title missing: MSTradeBuildRegionArcology"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 627708403]
      }
    },
    2383687319 : {
      importance : 7,
      triggerTime : [60, 120],
      iconPath : "icn-balloons-air.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiPageAcceptDismiss.js",
      speechBalloonTarget : 442264791,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 4082437120, 3165171450], [simcity.kLocalSpeechBalloonLocaleTable, 4082437121], [simcity.kLocalSpeechBalloonLocaleTable, 4082437122]],
      expirationTime : [60, 120],
      missionUnitID : 1040886590,
      vignetteActorPalette : 2719706269,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_FIRE_MALE_001,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0xef10a164", "Mission title missing: MSTradeBuildRegionInternationalAirport"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 2540477126]
      }
    },
    353288034 : {
      importance : 7,
      triggerTime : [60, 60],
      iconPath : "icn-balloons-air.png",
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiPageAcceptDismiss.js",
      unitID : 1299348132,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2587733150, 2731333015], [simcity.kLocalSpeechBalloonLocaleTable, 2587733151], [simcity.kLocalSpeechBalloonLocaleTable, 2587733148]],
      expirationTime : [60, 120],
      missionUnitID : 1040886590,
      vignetteActorPalette : 112969038,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_01_003,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0xef10a164", "Mission title missing: MSTradeBuildRegionInternationalAirport"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 2540477126]
      }
    },
    2252877243 : {
      importance : 7,
      triggerTime : [60, 120],
      iconPath : "icn-balloons-power.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiPageAcceptDismiss.js",
      speechBalloonTarget : 442264791,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2095714044, 2731333013], [simcity.kLocalSpeechBalloonLocaleTable,
          2095714045], [simcity.kLocalSpeechBalloonLocaleTable, 2095714046]],
      expirationTime : [60, 120],
      missionUnitID : 2180167066,
      vignetteActorPalette : 112969036,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_03_001,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0xf76855f8", "Mission title missing: MSTradeBuildRegionSolarFarm"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 1892609746]
      }
    },
    3686013629 : {
      importance : 7,
      triggerTime : [60, 120],
      iconPath : "icn-balloons-power.png",
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiPageAcceptDismiss.js",
      unitID : 1299348132,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 34556354, 2731333015], [simcity.kLocalSpeechBalloonLocaleTable, 34556355], [simcity.kLocalSpeechBalloonLocaleTable, 34556352]],
      expirationTime : [60, 120],
      missionUnitID : 2180167066,
      vignetteActorPalette : 112969038,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_01_003,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0xf76855f8", "Mission title missing: MSTradeBuildRegionSolarFarm"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount,
          1892609746]
      }
    },
    3825521097 : {
      importance : 10,
      triggerTime : [60, 120],
      iconPath : "icn-balloons-air.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiPageAcceptDismiss.js",
      speechBalloonTarget : 442264791,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1357442530, 2184015186], [simcity.kLocalSpeechBalloonLocaleTable, 1357442531], [simcity.kLocalSpeechBalloonLocaleTable, 1357442528]],
      expirationTime : [60, 9E3],
      missionUnitID : 3738513840,
      vignetteActorPalette : 1174443876,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_Residential_Female_11,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0xda2e9f02", "Mission title missing: MSTradeBuildRegionSpaceCenter"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 327673352]
      }
    },
    3422206166 : {
      importance : 8,
      triggerTime : [3, 5],
      iconPath : "icn-balloons-fire.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonAcceptDismissTemplate.js",
      unitID : 402558892,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2767951807, 267576928]],
      expirationTime : [90, 120],
      missionUnitID : 219752097,
      vignetteActorPalette : 112969038,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_01_003,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x9e192011", "Mission title missing: MSFireBuildFireStation"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 3743811193]
      }
    },
    934194563 : {
      importance : 6,
      triggerTime : [30, 60],
      iconPath : "icn-balloons-health.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonAcceptDismissTemplate.js",
      unitID : 402558892,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable,
          3967957992, 2731333015]],
      expirationTime : [90, 120],
      missionUnitID : 178212733,
      vignetteActorPalette : 112969038,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_01_003,
      missionTitle : new scrui.cLocaleString("AutomatedMissions.json", "0x43cb91d5", "Mission title missing: MSHealthNeedHospital"),
      queries : {
        isMissionActive : [simcity.kDataBinAmount, 2785881861]
      }
    },
    3650409873 : {
      importance : 3,
      triggerTime : [-1, -1],
      iconPath : "icn-balloons-information.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiPageAcceptOnly.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 4206105331, 1988813979], [simcity.kLocalSpeechBalloonLocaleTable, 4206105330], [simcity.kLocalSpeechBalloonLocaleTable, 4206105329]],
      expirationTime : [15, 30],
      vignetteActorPalette : 2930569410,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_AIR_TRAFFIC_CONTROLLER_MALE_001,
      queries : {
        airports : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfAirports]
      },
      test : function (a) {
        return !a ? !1 : 1 >= a.airports
      }
    },
    3330843254 : {
      importance : 3,
      triggerTime : [-1, -1],
      iconPath : "icn-balloons-information.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiPageAcceptOnly.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 174634721, 397798760], [simcity.kLocalSpeechBalloonLocaleTable, 174634720], [simcity.kLocalSpeechBalloonLocaleTable, 174634723]],
      expirationTime : [15, 30],
      vignetteActorPalette : 1258331781,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_Residential_Male_08,
      queries : {
        busDepotsT1 : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfBusT1Garages]
      },
      test : function (a) {
        return !a ?
        !1 : 1 >= a.busDepotsT1
      }
    },
    3904912775 : {
      importance : 3,
      triggerTime : [-1, -1],
      iconPath : "icn-balloons-information.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiPageAcceptOnly.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 766121630, 481686665], [simcity.kLocalSpeechBalloonLocaleTable, 766121631], [simcity.kLocalSpeechBalloonLocaleTable, 766121628]],
      expirationTime : [15, 30],
      vignetteActorPalette : 1174443876,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_Residential_Female_11,
      queries : {
        busDepotsT2 : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfBusT2Garages]
      },
      test : function (a) {
        return !a ? !1 : 1 >= a.busDepotsT2
      }
    },
    3949915358 : {
      importance : 3,
      triggerTime : [-1, -1],
      iconPath : "icn-balloons-information.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiPageAcceptOnly.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2021554432, 641318770], [simcity.kLocalSpeechBalloonLocaleTable, 2021554433], [simcity.kLocalSpeechBalloonLocaleTable, 2021554434]],
      expirationTime : [15,
        30],
      vignetteActorPalette : 2445099597,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_03_001,
      queries : {
        CasinoHQ : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfCasinoHQs]
      },
      test : function (a) {
        return !a ? !1 : 1 >= a.CasinoHQ
      }
    },
    3074393098 : {
      importance : 3,
      triggerTime : [-1, -1],
      iconPath : "icn-balloons-information.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiPageAcceptOnly.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1177209354, 792317279], [simcity.kLocalSpeechBalloonLocaleTable,
          1177209355], [simcity.kLocalSpeechBalloonLocaleTable, 1177209352]],
      expirationTime : [15, 30],
      vignetteActorPalette : 2629653276,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_LAWYER_FEMALE_002,
      queries : {
        casinos : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfCasinos]
      },
      test : function (a) {
        return !a ? !1 : 1 >= a.casinos
      }
    },
    3328370019 : {
      importance : 3,
      triggerTime : [-1, -1],
      iconPath : "icn-balloons-information.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiPageAcceptOnly.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable,
          381729855, 641318770], [simcity.kLocalSpeechBalloonLocaleTable, 381729854], [simcity.kLocalSpeechBalloonLocaleTable, 381729853]],
      expirationTime : [15, 30],
      vignetteActorPalette : 2445099597,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_03_001,
      queries : {
        CoalMineT1 : [simcity.kDataBinAmount, simcity.kResourceIDCoalMinesBuilt_T1]
      },
      test : function (a) {
        return !a ? !1 : 1 >= a.CoalMineT1
      }
    },
    3970220736 : {
      importance : 3,
      triggerTime : [-1, -1],
      iconPath : "icn-balloons-information.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiPageAcceptOnly.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1707501798, 1739368791], [simcity.kLocalSpeechBalloonLocaleTable, 1707501799], [simcity.kLocalSpeechBalloonLocaleTable, 1707501796]],
      expirationTime : [15, 30],
      vignetteActorPalette : 662028964,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_MINE_FOREMAN_FEMALE_002,
      queries : {
        CoalMineT2 : [simcity.kDataBinAmount, simcity.kResourceIDCoalMinesBuilt_T2]
      },
      test : function (a) {
        return !a ? !1 : 1 >= a.CoalMineT2
      }
    },
    1802947514 : {
      importance : 3,
      triggerTime : [-1, -1],
      iconPath : "icn-balloons-information.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiPageAcceptOnly.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2677427879, 2848776338], [simcity.kLocalSpeechBalloonLocaleTable, 2677427878], [simcity.kLocalSpeechBalloonLocaleTable, 2677427877]],
      expirationTime : [15, 30],
      vignetteActorPalette : 1632810612,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_LIBRARIAN_FEMALE_001,
      queries : {
        College : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfCollegeBases]
      },
      test : function (a) {
        return !a ?
        !1 : 1 >= a.College
      }
    },
    944946312 : {
      importance : 3,
      triggerTime : [-1, -1],
      iconPath : "icn-balloons-information.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiPageAcceptOnly.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1514671021, 1288197224], [simcity.kLocalSpeechBalloonLocaleTable, 1514671020], [simcity.kLocalSpeechBalloonLocaleTable, 1514671023]],
      expirationTime : [15, 30],
      vignetteActorPalette : 1632810615,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_Residential_Female_06,
      queries : {
        GradeSchool : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfGradeSchoolBases]
      },
      test : function (a) {
        return !a ? !1 : 1 >= a.GradeSchool
      }
    },
    3987764129 : {
      importance : 3,
      triggerTime : [-1, -1],
      iconPath : "icn-balloons-information.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiPageAcceptOnly.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2707824038, 1372085129], [simcity.kLocalSpeechBalloonLocaleTable, 2707824039]],
      expirationTime : [15, 30],
      vignetteActorPalette : 1750253946,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_LIBRARIAN_MALE_003,
      queries : {
        HighSchool : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfHighSchoolBases]
      },
      test : function (a) {
        return !a ? !1 : 1 >= a.HighSchool
      }
    },
    2553590197 : {
      importance : 3,
      triggerTime : [-1, -1],
      iconPath : "icn-balloons-information.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiPageAcceptOnly.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 3044058686, 2731333010], [simcity.kLocalSpeechBalloonLocaleTable, 3044058687], [simcity.kLocalSpeechBalloonLocaleTable, 3044058684]],
      expirationTime : [15,
        30],
      vignetteActorPalette : 1750253945,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_Residential_Male_14,
      queries : {
        University : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfUniversities]
      },
      test : function (a) {
        return !a ? !1 : 1 >= a.University
      }
    },
    4170323517 : {
      importance : 3,
      triggerTime : [-1, -1],
      iconPath : "icn-balloons-information.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiPageAcceptOnly.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2321495504, 479875064], [simcity.kLocalSpeechBalloonLocaleTable,
          2321495505], [simcity.kLocalSpeechBalloonLocaleTable, 2321495506]],
      expirationTime : [15, 30],
      vignetteActorPalette : 1765993603,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_LIBRARIAN_FEMALE_001,
      queries : {
        ElectronicHQ : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfElectronicHQs]
      },
      test : function (a) {
        return !a ? !1 : 1 >= a.ElectronicHQ
      }
    },
    2476257921 : {
      importance : 3,
      triggerTime : [-1, -1],
      iconPath : "icn-balloons-information.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiPageAcceptOnly.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 4059780467, 481686665], [simcity.kLocalSpeechBalloonLocaleTable, 4059780466], [simcity.kLocalSpeechBalloonLocaleTable, 4059780465]],
      expirationTime : [15, 30],
      vignetteActorPalette : 1174443876,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_Residential_Female_11,
      queries : {
        FerryDocks : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfFerryT1Garages]
      },
      test : function (a) {
        return !a ? !1 : 1 >= a.FerryDocks
      }
    },
    3316582274 : {
      importance : 3,
      triggerTime : [-1, -1],
      iconPath : "icn-balloons-information.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiPageAcceptOnly.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 4191773543, 2904613122], [simcity.kLocalSpeechBalloonLocaleTable, 4191773542], [simcity.kLocalSpeechBalloonLocaleTable, 4191773541]],
      expirationTime : [15, 30],
      vignetteActorPalette : 411059505,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_FIRE_MALE_001,
      queries : {
        FirestationsT1 : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfT1FireStations]
      },
      test : function (a) {
        return !a ?
        !1 : 1 >= a.FirestationsT1
      }
    },
    332313251 : {
      importance : 3,
      triggerTime : [-1, -1],
      iconPath : "icn-balloons-information.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiPageAcceptOnly.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1196698446, 3055611887], [simcity.kLocalSpeechBalloonLocaleTable, 1196698447], [simcity.kLocalSpeechBalloonLocaleTable, 1196698444]],
      expirationTime : [15, 30],
      vignetteActorPalette : 595613376,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_FIRE_FEMALE_001,
      queries : {
        FirestationsT2 : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfT2FireStations]
      },
      test : function (a) {
        return !a ? !1 : 1 >= a.FirestationsT2
      }
    },
    2118563068 : {
      importance : 3,
      triggerTime : [-1, -1],
      iconPath : "icn-balloons-information.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiPageAcceptOnly.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 503173676, 3931230455], [simcity.kLocalSpeechBalloonLocaleTable, 503173677], [simcity.kLocalSpeechBalloonLocaleTable, 503173678]],
      expirationTime : [15,
        30],
      vignetteActorPalette : 3849227582,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_SANITATION_WORKER_MALE_004,
      queries : {
        garbageDumps : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfDumpDocks]
      },
      test : function (a) {
        return !a ? !1 : 1 >= a.garbageDumps
      }
    },
    2014355773 : {
      importance : 3,
      triggerTime : [-1, -1],
      iconPath : "icn-balloons-information.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiPageAcceptOnly.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2727129292, 3539966715],
        [simcity.kLocalSpeechBalloonLocaleTable, 2727129293], [simcity.kLocalSpeechBalloonLocaleTable, 2727129294]],
      expirationTime : [15, 30],
      vignetteActorPalette : 1152278309,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_BUSINESS_PERSON_FEMALE_002,
      queries : {
        HasArcology : [simcity.kDataBinAmount, simcity.kResourceIDHasArcology]
      },
      test : function (a) {
        return !a ? !1 : 1 >= a.HasArcology
      }
    },
    4079632590 : {
      importance : 3,
      triggerTime : [-1, -1],
      iconPath : "icn-balloons-information.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiPageAcceptOnly.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 3739084983, 946928150], [simcity.kLocalSpeechBalloonLocaleTable, 3739084982], [simcity.kLocalSpeechBalloonLocaleTable, 3739084981]],
      expirationTime : [15, 30],
      vignetteActorPalette : 2930569410,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_AIR_TRAFFIC_CONTROLLER_MALE_001,
      queries : {
        HasInternationalAirport : [simcity.kDataBinAmount, simcity.kResourceIDHasInternationalAirport]
      },
      test : function (a) {
        return !a ? !1 : 1 >= a.HasInternationalAirport
      }
    },
    1503866610 : {
      importance : 3,
      triggerTime : [-1, -1],
      iconPath : "icn-balloons-information.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiPageAcceptOnly.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 685108261, 2377043345], [simcity.kLocalSpeechBalloonLocaleTable, 685108260]],
      expirationTime : [15, 30],
      vignetteActorPalette : 206760215,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_AIR_TRAFFIC_CONTROLLER_MALE_001,
      queries : {
        HasSolarFarm : [simcity.kDataBinAmount, simcity.kResourceIDHasSolarFarm]
      },
      test : function (a) {
        return !a ? !1 : 1 >= a.HasSolarFarm
      }
    },
    4221569512 : {
      importance : 3,
      triggerTime : [-1, -1],
      iconPath : "icn-balloons-information.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiPageAcceptOnly.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 3469960279, 829484819], [simcity.kLocalSpeechBalloonLocaleTable, 3469960278], [simcity.kLocalSpeechBalloonLocaleTable, 3469960277]],
      expirationTime : [15, 30],
      vignetteActorPalette : 3081567919,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_AIR_TRAFFIC_CONTROLLER_FEMALE_001,
      queries : {
        HasSpaceCenter : [simcity.kDataBinAmount, simcity.kResourceIDHasSpaceCenter]
      },
      test : function (a) {
        return !a ? !1 : 1 >= a.HasSpaceCenter
      }
    },
    1325285769 : {
      importance : 3,
      triggerTime : [-1, -1],
      iconPath : "icn-balloons-information.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiPageAcceptOnly.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2159558825, 379026276], [simcity.kLocalSpeechBalloonLocaleTable, 2159558824], [simcity.kLocalSpeechBalloonLocaleTable, 2159558827]],
      expirationTime : [15,
        30],
      vignetteActorPalette : 2462799717,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_Residential_Male_08,
      queries : {
        HospitalsT1 : [simcity.kDataBinAmount, simcity.kResourceIDT1HospitalsBuilt]
      },
      test : function (a) {
        return !a ? !1 : 1 >= a.HospitalsT1
      }
    },
    1417368374 : {
      importance : 3,
      triggerTime : [-1, -1],
      iconPath : "icn-balloons-information.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiPageAcceptOnly.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 487054556, 462914181], [simcity.kLocalSpeechBalloonLocaleTable,
          487054557], [simcity.kLocalSpeechBalloonLocaleTable, 487054558]],
      expirationTime : [15, 30],
      vignetteActorPalette : 2378911556,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_HEALTH_FEMALE_002,
      queries : {
        HospitalsT2 : [simcity.kDataBinAmount, simcity.kResourceIDT2HospitalsBuilt]
      },
      test : function (a) {
        return !a ? !1 : 1 >= a.HospitalsT2
      }
    },
    2186527046 : {
      importance : 3,
      triggerTime : [-1, -1],
      iconPath : "icn-balloons-information.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiPageAcceptOnly.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1421037480, 828952755], [simcity.kLocalSpeechBalloonLocaleTable, 1421037481], [simcity.kLocalSpeechBalloonLocaleTable, 1421037482]],
      expirationTime : [15, 30],
      vignetteActorPalette : 798812438,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_TRAIN_DRIVER_MALE_002,
      queries : {
        imEx : [simcity.kDataBinAmount, simcity.kResourceIDNumImEx]
      },
      test : function (a) {
        return !a ? !1 : 1 >= a.imEx
      }
    },
    3529545772 : {
      importance : 3,
      triggerTime : [-1, -1],
      iconPath : "icn-balloons-information.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiPageAcceptOnly.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 19816261, 946396086], [simcity.kLocalSpeechBalloonLocaleTable, 19816260], [simcity.kLocalSpeechBalloonLocaleTable, 19816263]],
      expirationTime : [15, 30],
      vignetteActorPalette : 681369107,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_TRAIN_DRIVER_FEMALE_004,
      queries : {
        imExT2 : [simcity.kDataBinAmount, simcity.kResourceIDNumImExT2]
      },
      test : function (a) {
        return !a ? !1 : 1 >=
        a.imExT2
      }
    },
    3154861847 : {
      importance : 3,
      triggerTime : [-1, -1],
      iconPath : "icn-balloons-information.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiPageAcceptOnly.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 423157979, 2731333011], [simcity.kLocalSpeechBalloonLocaleTable, 423157978]],
      expirationTime : [15, 30],
      vignetteActorPalette : 112969034,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_05_002,
      queries : {
        bigBen : [simcity.kDataBinAmount, simcity.kResourceIDHasLandmarkBigBen]
      },
      test : function (a) {
        return !a ? !1 : 1 >= a.bigBen
      }
    },
    2875855283 : {
      importance : 3,
      triggerTime : [-1, -1],
      iconPath : "icn-balloons-information.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiPageAcceptOnly.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 239534495, 2848776351], [simcity.kLocalSpeechBalloonLocaleTable, 239534494]],
      expirationTime : [15, 30],
      vignetteActorPalette : 263967550,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_13_001,
      queries : {
        Brandenburggate : [simcity.kDataBinAmount,
          simcity.kResourceIDHasLandmarkBrandenburggate]
      },
      test : function (a) {
        return !a ? !1 : 1 >= a.Brandenburggate
      }
    },
    961530718 : {
      importance : 3,
      triggerTime : [-1, -1],
      iconPath : "icn-balloons-information.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiPageAcceptOnly.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1343397156, 2848776338], [simcity.kLocalSpeechBalloonLocaleTable, 1343397157]],
      expirationTime : [15, 30],
      vignetteActorPalette : 263967539,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_17_002,
      queries : {
        eiffelTower : [simcity.kDataBinAmount, simcity.kResourceIDHasLandmarkEiffelTower]
      },
      test : function (a) {
        return !a ? !1 : 1 >= a.eiffelTower
      }
    },
    73701380 : {
      importance : 3,
      triggerTime : [-1, -1],
      iconPath : "icn-balloons-information.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiPageAcceptOnly.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 3555588883, 3808968456], [simcity.kLocalSpeechBalloonLocaleTable, 3555588882], [simcity.kLocalSpeechBalloonLocaleTable, 3555588881]],
      expirationTime : [15,
        30],
      vignetteActorPalette : 3256005431,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_LIBRARIAN_FEMALE_001,
      queries : {
        libraries : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfLibraries]
      },
      test : function (a) {
        return !a ? !1 : 1 >= a.libraries
      }
    },
    1755779963 : {
      importance : 3,
      triggerTime : [-1, -1],
      iconPath : "icn-balloons-information.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiPageAcceptOnly.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 3917415268, 2184015186], [simcity.kLocalSpeechBalloonLocaleTable,
          3917415269]],
      expirationTime : [15, 30],
      vignetteActorPalette : 1174443876,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_Residential_Female_11,
      queries : {
        lightTrains : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfLightTrainT1Garages]
      },
      test : function (a) {
        return !a ? !1 : 1 >= a.lightTrains
      }
    },
    2259032198 : {
      importance : 3,
      triggerTime : [-1, -1],
      iconPath : "icn-balloons-information.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiPageAcceptOnly.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable,
          2933643544, 479875064], [simcity.kLocalSpeechBalloonLocaleTable, 2933643545]],
      expirationTime : [15, 30],
      vignetteActorPalette : 1765993603,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_LIBRARIAN_FEMALE_001,
      queries : {
        electronicsFactoryT1 : [simcity.kDataBinAmount, simcity.kResourceIDNumT1ElectronicsBase]
      },
      test : function (a) {
        return !a ? !1 : 1 >= a.electronicsFactoryT1
      }
    },
    2716562889 : {
      importance : 3,
      triggerTime : [-1, -1],
      iconPath : "icn-balloons-information.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiPageAcceptOnly.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 3027360565, 479875064], [simcity.kLocalSpeechBalloonLocaleTable, 3027360564]],
      expirationTime : [15, 30],
      vignetteActorPalette : 1765993603,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_LIBRARIAN_FEMALE_001,
      queries : {
        electronicsFactoryT2 : [simcity.kDataBinAmount, simcity.kResourceIDNumT2ElectronicsBase]
      },
      test : function (a) {
        return !a ? !1 : 1 >= a.electronicsFactoryT2
      }
    },
    2304013054 : {
      importance : 3,
      triggerTime : [-1, -1],
      iconPath : "icn-balloons-information.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiPageAcceptOnly.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 3721288391, 4223761893], [simcity.kLocalSpeechBalloonLocaleTable, 3721288390]],
      expirationTime : [15, 30],
      vignetteActorPalette : 206760215,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_AIR_TRAFFIC_CONTROLLER_MALE_001,
      queries : {
        metalSmelt : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfMetalManufacturingBases]
      },
      test : function (a) {
        return !a ? !1 : 1 >= a.metalSmelt
      }
    },
    1032354185 : {
      importance : 3,
      triggerTime : [-1, -1],
      iconPath : "icn-balloons-information.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiPageAcceptOnly.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2377032374, 2286546766], [simcity.kLocalSpeechBalloonLocaleTable, 2377032375]],
      expirationTime : [15, 30],
      vignetteActorPalette : 206760215,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_AIR_TRAFFIC_CONTROLLER_MALE_001,
      queries : {
        oilRef : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfOilManufacturingBases]
      },
      test : function (a) {
        return !a ? !1 : 1 >= a.oilRef
      }
    },
    2523864220 : {
      importance : 3,
      triggerTime : [-1, -1],
      iconPath : "icn-balloons-information.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiPageAcceptOnly.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1413945095, 636079517], [simcity.kLocalSpeechBalloonLocaleTable, 1413945094], [simcity.kLocalSpeechBalloonLocaleTable, 1413945093]],
      expirationTime : [15, 30],
      vignetteActorPalette : 1899635592,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_POLITICIAN_MALE_002,
      queries : {
        mayorshouse : [simcity.kDataBinAmount, simcity.kResourceIDHasMayorsHouseSmall]
      },
      test : function (a) {
        return !a ? !1 : 1 >= a.mayorshouse
      }
    },
    3939978431 : {
      importance : 3,
      triggerTime : [-1, -1],
      iconPath : "icn-balloons-information.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiPageAcceptOnly.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 436732974, 636079517], [simcity.kLocalSpeechBalloonLocaleTable, 436732975], [simcity.kLocalSpeechBalloonLocaleTable, 436732972]],
      expirationTime : [15,
        30],
      vignetteActorPalette : 1899635592,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_POLITICIAN_MALE_002,
      queries : {
        mayorshouse : [simcity.kDataBinAmount, simcity.kResourceIDHasMayorsMansion]
      },
      test : function (a) {
        return !a ? !1 : 1 >= a.mayorshouse
      }
    },
    363078358 : {
      importance : 3,
      triggerTime : [-1, -1],
      iconPath : "icn-balloons-information.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiPageAcceptOnly.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 145467983, 423327812], [simcity.kLocalSpeechBalloonLocaleTable,
          145467982], [simcity.kLocalSpeechBalloonLocaleTable, 145467981]],
      expirationTime : [15, 30],
      vignetteActorPalette : 1152278309,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_BUSINESS_PERSON_FEMALE_002,
      queries : {
        CoalHQ : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfCoalHQs]
      },
      test : function (a) {
        return !a ? !1 : 1 >= a.CoalHQ
      }
    },
    1551916546 : {
      importance : 3,
      triggerTime : [-1, -1],
      iconPath : "icn-balloons-information.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiPageAcceptOnly.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1695246043, 3966731567], [simcity.kLocalSpeechBalloonLocaleTable, 1695246042], [simcity.kLocalSpeechBalloonLocaleTable, 1695246041]],
      expirationTime : [15, 30],
      vignetteActorPalette : 1688042546,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_Residential_Male_09,
      queries : {
        oilWells : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfOilWells]
      },
      test : function (a) {
        return !a ? !1 : 1 >= a.oilWells
      }
    },
    18745931 : {
      importance : 3,
      triggerTime : [-1, -1],
      iconPath : "icn-balloons-information.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiPageAcceptOnly.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 402454051, 3815733058], [simcity.kLocalSpeechBalloonLocaleTable, 402454050], [simcity.kLocalSpeechBalloonLocaleTable, 402454049]],
      expirationTime : [15, 30],
      vignetteActorPalette : 1839041055,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_AIR_TRAFFIC_CONTROLLER_FEMALE_001,
      queries : {
        OilHQ : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfOilHQs]
      },
      test : function (a) {
        return !a ?
        !1 : 1 >= a.OilHQ
      }
    },
    997380803 : {
      importance : 3,
      triggerTime : [-1, -1],
      iconPath : "icn-balloons-information.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiPageAcceptOnly.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1446232411, 558531452], [simcity.kLocalSpeechBalloonLocaleTable, 1446232410]],
      expirationTime : [15, 30],
      vignetteActorPalette : 4228375006,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_Residential_Male_10,
      queries : {
        oreMines : [simcity.kDataBinAmount, simcity.kResourceIDOreMinesBuilt]
      },
      test : function (a) {
        return !a ? !1 : 1 >= a.oreMines
      }
    },
    3880294329 : {
      importance : 3,
      triggerTime : [-1, -1],
      iconPath : "icn-balloons-information.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiPageAcceptOnly.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1939119695, 151290895], [simcity.kLocalSpeechBalloonLocaleTable, 1939119694], [simcity.kLocalSpeechBalloonLocaleTable, 1939119693]],
      expirationTime : [15, 30],
      vignetteActorPalette : 780344294,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_LAWYER_MALE_002,
      queries : {
        parksT1 : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfT1Parks]
      },
      test : function (a) {
        return !a ? !1 : 1 >= a.parksT1
      }
    },
    1596170436 : {
      importance : 3,
      triggerTime : [-1, -1],
      iconPath : "icn-balloons-information.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonAcceptOnlyTemplate.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 3489325622, 2731333013]],
      expirationTime : [15, 30],
      vignetteActorPalette : 112969036,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_03_001,
      queries : {
        parksT2 : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfT2Parks]
      },
      test : function (a) {
        return !a ? !1 : 1 >= a.parksT2
      }
    },
    956796539 : {
      importance : 3,
      triggerTime : [-1, -1],
      iconPath : "icn-balloons-information.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonAcceptOnlyTemplate.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 691849989, 2848776339]],
      expirationTime : [15, 30],
      vignetteActorPalette : 263967538,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_16_002,
      queries : {
        parksT3 : [simcity.kDataBinAmount,
          simcity.kResourceIDNumberOfT3Parks]
      },
      test : function (a) {
        return !a ? !1 : 1 >= a.parksT3
      }
    },
    553514336 : {
      importance : 3,
      triggerTime : [-1, -1],
      iconPath : "icn-balloons-information.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiPageAcceptOnly.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2620355365, 2978190408], [simcity.kLocalSpeechBalloonLocaleTable, 2620355364], [simcity.kLocalSpeechBalloonLocaleTable, 2620355367]],
      expirationTime : [15, 30],
      vignetteActorPalette : 79389885,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_POLICE_OFFICER_MALE_005,
      queries : {
        policestationT1 : [simcity.kDataBinAmount, simcity.kResourceIDPoliceStationsT1Built]
      },
      test : function (a) {
        return !a ? !1 : 1 >= a.policestationT1
      }
    },
    3464105029 : {
      importance : 3,
      triggerTime : [-1, -1],
      iconPath : "icn-balloons-information.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiPageAcceptOnly.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 4021679624, 969169974], [simcity.kLocalSpeechBalloonLocaleTable, 4021679625], [simcity.kLocalSpeechBalloonLocaleTable, 4021679626]],
      expirationTime : [15,
        30],
      vignetteActorPalette : 2416846579,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_POLICE_OFFICER_FEMALE_001,
      queries : {
        policestationT2 : [simcity.kDataBinAmount, simcity.kResourceIDPoliceStationsT2Built]
      },
      test : function (a) {
        return !a ? !1 : 1 >= a.policestationT2
      }
    },
    2763119538 : {
      importance : 3,
      triggerTime : [-1, -1],
      iconPath : "icn-balloons-information.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiPageAcceptOnly.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1370656142,
          2286546766], [simcity.kLocalSpeechBalloonLocaleTable, 1370656143], [simcity.kLocalSpeechBalloonLocaleTable, 1370656140]],
      expirationTime : [15, 30],
      vignetteActorPalette : 206760215,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_AIR_TRAFFIC_CONTROLLER_MALE_001,
      queries : {
        coalPlants : [simcity.kDataBinAmount, simcity.kResourceIDPower_NumberOfT1CoalPowerPlants]
      },
      test : function (a) {
        return !a ? !1 : 1 >= a.coalPlants
      }
    },
    810647251 : {
      importance : 3,
      triggerTime : [-1, -1],
      iconPath : "icn-balloons-information.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiPageAcceptOnly.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 675890217, 2286546766], [simcity.kLocalSpeechBalloonLocaleTable, 675890216], [simcity.kLocalSpeechBalloonLocaleTable, 675890219]],
      expirationTime : [15, 30],
      vignetteActorPalette : 206760215,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_AIR_TRAFFIC_CONTROLLER_MALE_001,
      queries : {
        nuclearPlants : [simcity.kDataBinAmount, simcity.kResourceIDPower_NumberOfNuclearPowerPlants]
      },
      test : function (a) {
        return !a ?
        !1 : 1 >= a.nuclearPlants
      }
    },
    3853854589 : {
      importance : 3,
      triggerTime : [-1, -1],
      iconPath : "icn-balloons-information.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiPageAcceptOnly.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 3934141999, 2286546766], [simcity.kLocalSpeechBalloonLocaleTable, 3934141998], [simcity.kLocalSpeechBalloonLocaleTable, 3934141997]],
      expirationTime : [15, 30],
      vignetteActorPalette : 206760215,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_AIR_TRAFFIC_CONTROLLER_MALE_001,
      queries : {
        oilPlants : [simcity.kDataBinAmount, simcity.kResourceIDPower_NumberOfT1OilPowerPlants]
      },
      test : function (a) {
        return !a ? !1 : 1 >= a.oilPlants
      }
    },
    928274828 : {
      importance : 3,
      triggerTime : [-1, -1],
      iconPath : "icn-balloons-information.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiPageAcceptOnly.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2237879490, 4193729212], [simcity.kLocalSpeechBalloonLocaleTable, 2237879491]],
      expirationTime : [15, 30],
      vignetteActorPalette : 206760215,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_AIR_TRAFFIC_CONTROLLER_MALE_001,
      queries : {
        solarPlants : [simcity.kDataBinAmount, simcity.kResourceIDPower_NumberOfSolarPlants]
      },
      test : function (a) {
        return !a ? !1 : 1 >= a.solarPlants
      }
    },
    2527767176 : {
      importance : 3,
      triggerTime : [-1, -1],
      iconPath : "icn-balloons-information.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonAcceptOnlyTemplate.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 3114207275, 1529609369]],
      expirationTime : [15, 30],
      vignetteActorPalette : 3405125517,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_POLITICIAN_FEMALE_005,
      queries : {
        windFarms : [simcity.kDataBinAmount, simcity.kResourceIDPower_NumberOfWindFarms]
      },
      test : function (a) {
        return !a ? !1 : 1 >= a.windFarms
      }
    },
    3626887201 : {
      importance : 3,
      triggerTime : [-1, -1],
      iconPath : "icn-balloons-information.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiPageAcceptOnly.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 3428855440, 397798760], [simcity.kLocalSpeechBalloonLocaleTable, 3428855441], [simcity.kLocalSpeechBalloonLocaleTable, 3428855442]],
      expirationTime : [15,
        30],
      vignetteActorPalette : 1258331781,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_Residential_Male_08,
      queries : {
        trainStations : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfTrainT2Stops]
      },
      test : function (a) {
        return !a ? !1 : 1 >= a.trainStations
      }
    },
    395732005 : {
      importance : 3,
      triggerTime : [-1, -1],
      iconPath : "icn-balloons-information.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiPageAcceptOnly.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 3103736569, 4048673786], [simcity.kLocalSpeechBalloonLocaleTable,
          3103736568], [simcity.kLocalSpeechBalloonLocaleTable, 3103736571], [simcity.kLocalSpeechBalloonLocaleTable, 3103736570]],
      expirationTime : [15, 30],
      vignetteActorPalette : 4000226283,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_SANITATION_WORKER_FEMALE_004,
      queries : {
        recyclingCenters : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfRecyclingCenters]
      },
      test : function (a) {
        return !a ? !1 : 1 >= a.recyclingCenters
      }
    },
    1795807328 : {
      importance : 3,
      triggerTime : [-1, -1],
      iconPath : "icn-balloons-information.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiPageAcceptOnly.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1373500491, 3931230455], [simcity.kLocalSpeechBalloonLocaleTable, 1373500490], [simcity.kLocalSpeechBalloonLocaleTable, 1373500489]],
      expirationTime : [15, 30],
      vignetteActorPalette : 3849227582,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_SANITATION_WORKER_MALE_004,
      queries : {
        sewageT1 : [simcity.kDataBinAmount, simcity.kResourceIDSewagePlants_T1]
      },
      test : function (a) {
        return !a ? !1 : 1 >=
        a.sewageT1
      }
    },
    3393546525 : {
      importance : 3,
      triggerTime : [-1, -1],
      iconPath : "icn-balloons-information.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiPageAcceptOnly.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 4222070914, 4048673786], [simcity.kLocalSpeechBalloonLocaleTable, 4222070915], [simcity.kLocalSpeechBalloonLocaleTable, 4222070912]],
      expirationTime : [15, 30],
      vignetteActorPalette : 4000226283,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_SANITATION_WORKER_FEMALE_004,
      queries : {
        sewageT2 : [simcity.kDataBinAmount, simcity.kResourceIDSewagePlants_T2]
      },
      test : function (a) {
        return !a ? !1 : 1 >= a.sewageT2
      }
    },
    1789096728 : {
      importance : 3,
      triggerTime : [-1, -1],
      iconPath : "icn-balloons-information.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiPageAcceptOnly.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1284899680, 3003345255], [simcity.kLocalSpeechBalloonLocaleTable, 1284899681]],
      expirationTime : [15, 30],
      vignetteActorPalette : 112969031,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_08_003,
      queries : {
        StadiumT1 : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfT1Stadiums]
      },
      test : function (a) {
        return !a ? !1 : 1 >= a.StadiumT1
      }
    },
    1682801701 : {
      importance : 3,
      triggerTime : [-1, -1],
      iconPath : "icn-balloons-information.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiPageAcceptOnly.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2033378781, 3154343774], [simcity.kLocalSpeechBalloonLocaleTable, 2033378780], [simcity.kLocalSpeechBalloonLocaleTable, 2033378783]],
      expirationTime : [15,
        30],
      vignetteActorPalette : 263967550,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_RESIDENT_13_001,
      queries : {
        StadiumT2 : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfT2Stadiums]
      },
      test : function (a) {
        return !a ? !1 : 1 >= a.StadiumT2
      }
    },
    864724411 : {
      importance : 3,
      triggerTime : [-1, -1],
      iconPath : "icn-balloons-information.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiPageAcceptOnly.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2440236531, 292386], [simcity.kLocalSpeechBalloonLocaleTable,
          2440236530], [simcity.kLocalSpeechBalloonLocaleTable, 2440236529]],
      expirationTime : [15, 30],
      vignetteActorPalette : 3405125517,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_POLITICIAN_FEMALE_005,
      queries : {
        townHall : [simcity.kDataBinAmount, simcity.kResourceIDHQ_CityHall_IsOn]
      },
      test : function (a) {
        return !a ? !1 : 1 >= a.townHall
      }
    },
    528794525 : {
      importance : 3,
      triggerTime : [-1, -1],
      iconPath : "icn-balloons-information.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiPageAcceptOnly.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 200044669, 3001328198], [simcity.kLocalSpeechBalloonLocaleTable, 200044668], [simcity.kLocalSpeechBalloonLocaleTable, 200044671]],
      expirationTime : [15, 30],
      vignetteActorPalette : 3589679452,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_POLITICIAN_MALE_002,
      queries : {
        TradeHQ : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfTradeHQs]
      },
      test : function (a) {
        return !a ? !1 : 1 >= a.TradeHQ
      }
    },
    2238866005 : {
      importance : 3,
      triggerTime : [-1, -1],
      iconPath : "icn-balloons-information.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiPageAcceptOnly.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 3583503240, 4166077679], [simcity.kLocalSpeechBalloonLocaleTable, 3583503241], [simcity.kLocalSpeechBalloonLocaleTable, 3583503242]],
      expirationTime : [15, 30],
      vignetteActorPalette : 2702769693,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_SANITATION_WORKER_MALE_004,
      queries : {
        water1 : [simcity.kDataBinAmount, simcity.kResourceIDWaterGlobals_NumberOfT1WaterPlants]
      },
      test : function (a) {
        return !a ? !1 : 1 >= a.water1
      }
    },
    3100303298 : {
      importance : 3,
      triggerTime : [-1, -1],
      iconPath : "icn-balloons-information.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/SpeechBalloonMultiPageAcceptOnly.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2182178981, 4015078914], [simcity.kLocalSpeechBalloonLocaleTable, 2182178980], [simcity.kLocalSpeechBalloonLocaleTable, 2182178983]],
      expirationTime : [15, 30],
      vignetteActorPalette : 2887323564,
      portrait : simcity.SpeechBalloonPortraits.kSpeechPortrait_SC_SANITATION_WORKER_FEMALE_004,
      queries : {
        water2 : [simcity.kDataBinAmount, simcity.kResourceIDWaterGlobals_NumberOfT2WaterPlants]
      },
      test : function (a) {
        return !a ? !1 : 1 >= a.water2
      }
    },
    74495913 : {
      importance : 2,
      triggerTime : [100, 140],
      iconPath : "icn-balloons-air.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness4_AcceptOnlyTemplate.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2244854317], [simcity.kLocalSpeechBalloonLocaleTable, 2244854316], [simcity.kLocalSpeechBalloonLocaleTable, 2244854319], [simcity.kLocalSpeechBalloonLocaleTable,
          2244854318], [simcity.kLocalSpeechBalloonLocaleTable, 2244854313], [simcity.kLocalSpeechBalloonLocaleTable, 2244854312]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {}

    },
    3187921131 : {
      importance : 1,
      triggerTime : [20, 25],
      iconPath : "icn-balloons-casino.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness5_AcceptOnlyTemplate.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1110032860], [simcity.kLocalSpeechBalloonLocaleTable, 1110032861], [simcity.kLocalSpeechBalloonLocaleTable, 1110032862],
        [simcity.kLocalSpeechBalloonLocaleTable, 1110032863], [simcity.kLocalSpeechBalloonLocaleTable, 1110032856], [simcity.kLocalSpeechBalloonLocaleTable, 1110032857], [simcity.kLocalSpeechBalloonLocaleTable, 1110032858], [simcity.kLocalSpeechBalloonLocaleTable, 1110032859]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {}

    },
    2898299576 : {
      importance : 2,
      triggerTime : [100, 140],
      iconPath : "icn-balloons-trade.png",
      displayCountLimit : 5,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness5_AcceptOnlyTemplate.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable,
          3844201627]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {}

    },
    474926254 : {
      importance : 2,
      triggerTime : [100, 140],
      iconPath : "icn-balloons-trade.png",
      displayCountLimit : 5,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness5_AcceptOnlyTemplate.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2625906499]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {}

    },
    2924542324 : {
      importance : 2,
      triggerTime : [100, 140],
      iconPath : "icn-balloons-trade.png",
      displayCountLimit : 5,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness5_AcceptOnlyTemplate.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 460245075]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {}

    },
    3429900335 : {
      importance : 2,
      triggerTime : [100, 140],
      iconPath : "icn-balloons-trade.png",
      displayCountLimit : 5,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness5_AcceptOnlyTemplate.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1814987504]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {}

    },
    193037348 : {
      importance : 2,
      triggerTime : [100, 140],
      iconPath : "icn-balloons-trade.png",
      displayCountLimit : 5,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness5_AcceptOnlyTemplate.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 707141795]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {}

    },
    1029775850 : {
      importance : 2,
      triggerTime : [100, 140],
      iconPath : "icn-balloons-trade.png",
      displayCountLimit : 5,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness5_AcceptOnlyTemplate.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2545766151]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {}

    },
    1282177425 : {
      importance : 2,
      triggerTime : [100, 140],
      iconPath : "icn-balloons-trade.png",
      displayCountLimit : 5,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness5_AcceptOnlyTemplate.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 991835442]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {}

    },
    3348338849 : {
      importance : 2,
      triggerTime : [100, 140],
      iconPath : "icn-balloons-trade.png",
      displayCountLimit : 5,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness5_AcceptOnlyTemplate.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable,
          1729938548]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {}

    },
    1587183275 : {
      importance : 2,
      triggerTime : [100, 140],
      iconPath : "icn-balloons-trade.png",
      displayCountLimit : 5,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness5_AcceptOnlyTemplate.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1940749556]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {}

    },
    3107856713 : {
      importance : 2,
      triggerTime : [100, 140],
      iconPath : "icn-balloons-trade.png",
      displayCountLimit : 5,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness5_AcceptOnlyTemplate.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 3469307530]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {}

    },
    818873759 : {
      importance : 2,
      triggerTime : [100, 140],
      iconPath : "icn-balloons-trade.png",
      displayCountLimit : 5,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness5_AcceptOnlyTemplate.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 3700794884]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {}

    },
    80209500 : {
      importance : 2,
      triggerTime : [100, 140],
      iconPath : "icn-balloons-trade.png",
      displayCountLimit : 5,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness5_AcceptOnlyTemplate.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1054677965]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {}

    },
    4218081070 : {
      importance : 2,
      triggerTime : [100, 140],
      iconPath : "icn-balloons-trade.png",
      displayCountLimit : 5,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness5_AcceptOnlyTemplate.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 3469307530]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {}

    },
    4213085462 : {
      importance : 2,
      triggerTime : [100, 140],
      iconPath : "icn-balloons-trade.png",
      displayCountLimit : 5,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness5_AcceptOnlyTemplate.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1416112885]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {}

    },
    862426047 : {
      importance : 2,
      triggerTime : [100, 140],
      iconPath : "icn-balloons-trade.png",
      displayCountLimit : 5,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness5_AcceptOnlyTemplate.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable,
          1930034500]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {}

    },
    3896009489 : {
      importance : 2,
      triggerTime : [100, 140],
      iconPath : "icn-balloons-trade.png",
      displayCountLimit : 5,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness5_AcceptOnlyTemplate.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1416112885]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {}

    },
    2690450166 : {
      importance : 2,
      triggerTime : [100, 140],
      iconPath : "icn-balloons-trade.png",
      displayCountLimit : 5,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness5_AcceptOnlyTemplate.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 563159507]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {}

    },
    3108287611 : {
      importance : 2,
      triggerTime : [100, 140],
      iconPath : "icn-balloons-trade.png",
      displayCountLimit : 5,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness5_AcceptOnlyTemplate.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1438949079]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {}

    },
    1517578755 : {
      importance : 1,
      triggerTime : [130, 444],
      iconPath : "icn-balloons-air-population.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness3_AcceptOnlyTemplate.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1938429639], [simcity.kLocalSpeechBalloonLocaleTable, 1938429638], [simcity.kLocalSpeechBalloonLocaleTable, 1938429637], [simcity.kLocalSpeechBalloonLocaleTable, 1938429636]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {}

    },
    845090828 : {
      importance : 7,
      triggerTime : [130, 130],
      iconPath : "icn-balloons-commerical-desirability.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness4_AcceptOnlyTemplate.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2285188742], [simcity.kLocalSpeechBalloonLocaleTable, 2285188743], [simcity.kLocalSpeechBalloonLocaleTable, 2285188740], [simcity.kLocalSpeechBalloonLocaleTable, 2285188741]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {}

    },
    845090822 : {
      importance : 7,
      triggerTime : [130, 130],
      iconPath : "icn-balloons-air-industrial-desirability.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness4_AcceptOnlyTemplate.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable,
          131192176], [simcity.kLocalSpeechBalloonLocaleTable, 131192177], [simcity.kLocalSpeechBalloonLocaleTable, 131192178], [simcity.kLocalSpeechBalloonLocaleTable, 131192179]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {}

    },
    845090845 : {
      importance : 7,
      triggerTime : [130, 444],
      iconPath : "icn-balloons-air-residential-desirability.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness4_AcceptOnlyTemplate.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 32547877], [simcity.kLocalSpeechBalloonLocaleTable,
          32547876], [simcity.kLocalSpeechBalloonLocaleTable, 32547879], [simcity.kLocalSpeechBalloonLocaleTable, 32547878]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {}

    },
    3793775006 : {
      importance : 2,
      triggerTime : [130, 444],
      iconPath : "icn-balloons-air-population.png",
      displayCountLimit : 11,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness3_AcceptOnlyTemplate.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1342313368], [simcity.kLocalSpeechBalloonLocaleTable, 1342313369], [simcity.kLocalSpeechBalloonLocaleTable,
          1342313370]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {}

    },
    3793775007 : {
      importance : 2,
      triggerTime : [130, 444],
      iconPath : "icn-balloons-air-population.png",
      displayCountLimit : 11,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness3_AcceptOnlyTemplate.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1698119263], [simcity.kLocalSpeechBalloonLocaleTable, 1698119262], [simcity.kLocalSpeechBalloonLocaleTable, 1698119261]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {}

    },
    1396428347 : {
      importance : 1,
      triggerTime : [130, 444],
      iconPath : "icn-balloons-air-population.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness5_AcceptOnlyTemplate.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2596501035], [simcity.kLocalSpeechBalloonLocaleTable, 2596501034], [simcity.kLocalSpeechBalloonLocaleTable, 2596501033], [simcity.kLocalSpeechBalloonLocaleTable, 2596501032]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {}

    },
    4134375427 : {
      importance : 3,
      triggerTime : [130, 444],
      iconPath : "icn-balloons-air-population.png",
      displayCountLimit : 11,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness4_AcceptOnlyTemplate.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1448183829], [simcity.kLocalSpeechBalloonLocaleTable, 1448183828], [simcity.kLocalSpeechBalloonLocaleTable, 1448183831]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {}

    },
    2686547328 : {
      importance : 3,
      triggerTime : [130, 444],
      iconPath : "icn-balloons-air-industrial-desirability.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness3_AcceptOnlyTemplate.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2410704010], [simcity.kLocalSpeechBalloonLocaleTable, 2410704011], [simcity.kLocalSpeechBalloonLocaleTable, 2410704008], [simcity.kLocalSpeechBalloonLocaleTable, 2410704009]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {}

    },
    3862345688 : {
      importance : 3,
      triggerTime : [130, 444],
      iconPath : "icn-balloons-air-industrial-desirability.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness4_AcceptOnlyTemplate.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable,
          438265457], [simcity.kLocalSpeechBalloonLocaleTable, 438265456], [simcity.kLocalSpeechBalloonLocaleTable, 438265459], [simcity.kLocalSpeechBalloonLocaleTable, 438265458]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {}

    },
    2686740039 : {
      importance : 3,
      triggerTime : [130, 444],
      iconPath : "icn-balloons-air-shoppers.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness4_AcceptOnlyTemplate.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 3695603351], [simcity.kLocalSpeechBalloonLocaleTable, 3695603350],
        [simcity.kLocalSpeechBalloonLocaleTable, 3695603349], [simcity.kLocalSpeechBalloonLocaleTable, 3695603348]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {}

    },
    92148580 : {
      importance : 4,
      triggerTime : [130, 444],
      iconPath : "icn-balloons-happiness.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness4_AcceptOnlyTemplate.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1177473054], [simcity.kLocalSpeechBalloonLocaleTable, 1177473055], [simcity.kLocalSpeechBalloonLocaleTable, 1177473052], [simcity.kLocalSpeechBalloonLocaleTable,
          1177473053]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {}

    },
    1902448476 : {
      importance : 3,
      triggerTime : [130, 444],
      iconPath : "icn-balloons-air-industrial-desirability.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness4_AcceptOnlyTemplate.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 3830747766], [simcity.kLocalSpeechBalloonLocaleTable, 3830747767], [simcity.kLocalSpeechBalloonLocaleTable, 3830747764], [simcity.kLocalSpeechBalloonLocaleTable, 3830747765]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {}

    },
    7905069 : {
      importance : 3,
      triggerTime : [130, 444],
      iconPath : "icn-balloons-air-residential-desirability.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness4_AcceptOnlyTemplate.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 3762777782], [simcity.kLocalSpeechBalloonLocaleTable, 3762777783], [simcity.kLocalSpeechBalloonLocaleTable, 3762777780], [simcity.kLocalSpeechBalloonLocaleTable, 3762777781], [simcity.kLocalSpeechBalloonLocaleTable, 3762777778]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {}

    },
    2447198374 : {
      importance : 3,
      triggerTime : [130, 444],
      iconPath : "icn-balloons-air-shoppers.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness4_AcceptOnlyTemplate.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 857902473], [simcity.kLocalSpeechBalloonLocaleTable, 857902472], [simcity.kLocalSpeechBalloonLocaleTable, 857902475], [simcity.kLocalSpeechBalloonLocaleTable, 857902474]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {}

    },
    160683443 : {
      importance : 3,
      triggerTime : [130, 444],
      iconPath : "icn-balloons-air-industrial-desirability.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness4_AcceptOnlyTemplate.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2446375064], [simcity.kLocalSpeechBalloonLocaleTable, 2446375065], [simcity.kLocalSpeechBalloonLocaleTable, 2446375066], [simcity.kLocalSpeechBalloonLocaleTable, 2446375067]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {}

    },
    2176656392 : {
      importance : 2,
      triggerTime : [60, 120],
      iconPath : "icn-balloons-air-shoppers.png",
      displayCountLimit : 4,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness4_AcceptOnlyTemplate.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1782131745], [simcity.kLocalSpeechBalloonLocaleTable, 1782131744], [simcity.kLocalSpeechBalloonLocaleTable, 1782131747]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {}

    },
    1323246242 : {
      importance : 3,
      triggerTime : [180, 240],
      iconPath : "icn-balloons-air-shoppers.png",
      displayCountLimit : 5,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness2_AcceptOnlyTemplate.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 931211166], [simcity.kLocalSpeechBalloonLocaleTable,
          931211167], [simcity.kLocalSpeechBalloonLocaleTable, 931211164]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {}

    },
    3758054231 : {
      importance : 2,
      triggerTime : [120, 150],
      iconPath : "icn-balloons-crime.png",
      displayCountLimit : 5,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness2_AcceptOnlyTemplate.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2122249490], [simcity.kLocalSpeechBalloonLocaleTable, 2122249491]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {}

    },
    1947784394 : {
      importance : 2,
      triggerTime : [100,
        140],
      iconPath : "icn-balloons-crime.png",
      displayCountLimit : 5,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness1_AcceptOnlyTemplate.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2563157210]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {}

    },
    2410579423 : {
      importance : 2,
      triggerTime : [100, 140],
      iconPath : "icn-balloons-crime.png",
      displayCountLimit : 5,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness1_AcceptOnlyTemplate.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1256774529]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {}

    },
    565757787 : {
      importance : 2,
      triggerTime : [100, 140],
      iconPath : "icn-balloons-crime.png",
      displayCountLimit : 5,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness1_AcceptOnlyTemplate.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 3793537285]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {}

    },
    2704177719 : {
      importance : 2,
      triggerTime : [100, 140],
      iconPath : "icn-balloons-crime.png",
      displayCountLimit : 5,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness2_AcceptOnlyTemplate.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1241980785], [simcity.kLocalSpeechBalloonLocaleTable, 1241980784]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {}

    },
    4195652213 : {
      importance : 9,
      triggerTime : [1, 5],
      iconPath : "icn-balloons-police.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness5_AcceptOnlyTemplate.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 4054083973], [simcity.kLocalSpeechBalloonLocaleTable, 4054083972], [simcity.kLocalSpeechBalloonLocaleTable, 4054083975], [simcity.kLocalSpeechBalloonLocaleTable,
          4054083974]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {}

    },
    4039494608 : {
      importance : 3,
      triggerTime : [100, 140],
      iconPath : "icn-balloons-police.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness5_AcceptOnlyTemplate.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 3814432706], [simcity.kLocalSpeechBalloonLocaleTable, 3814432707], [simcity.kLocalSpeechBalloonLocaleTable, 3814432704], [simcity.kLocalSpeechBalloonLocaleTable, 3814432705]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {}

    },
    99434240 : {
      importance : 4,
      triggerTime : [100, 140],
      iconPath : "icn-balloons-crime.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness1_AcceptOnlyTemplate.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 946099822], [simcity.kLocalSpeechBalloonLocaleTable, 946099823], [simcity.kLocalSpeechBalloonLocaleTable, 946099820], [simcity.kLocalSpeechBalloonLocaleTable, 946099821], [simcity.kLocalSpeechBalloonLocaleTable, 946099818]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {}

    },
    99434243 : {
      importance : 3,
      triggerTime : [100, 140],
      iconPath : "icn-balloons-crime.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness1_AcceptOnlyTemplate.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2985805944], [simcity.kLocalSpeechBalloonLocaleTable, 2985805945], [simcity.kLocalSpeechBalloonLocaleTable, 2985805946], [simcity.kLocalSpeechBalloonLocaleTable, 2985805947], [simcity.kLocalSpeechBalloonLocaleTable, 2985805948]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {}

    },
    4201618457 : {
      importance : 3,
      triggerTime : [100,
        140],
      iconPath : "icn-balloons-crime.png",
      displayCountLimit : 5,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness2_AcceptOnlyTemplate.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2105110391], [simcity.kLocalSpeechBalloonLocaleTable, 2105110390], [simcity.kLocalSpeechBalloonLocaleTable, 2105110389]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {}

    },
    162369043 : {
      importance : 3,
      triggerTime : [100, 140],
      iconPath : "icn-balloons-crime.png",
      displayCountLimit : 5,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness2_AcceptOnlyTemplate.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2206460861], [simcity.kLocalSpeechBalloonLocaleTable, 2206460860]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        Homeless : [simcity.kDataResourceAmount, simcity.kResourceIDHomeless]
      },
      test : function (a) {
        return !a ? !1 : 50 <= a.Homeless
      }
    },
    3166558862 : {
      importance : 3,
      triggerTime : [100, 140],
      iconPath : "icn-balloons-crime.png",
      displayCountLimit : 5,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness2_AcceptOnlyTemplate.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable,
          1096098826], [simcity.kLocalSpeechBalloonLocaleTable, 1096098827]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {}

    },
    3026001164 : {
      importance : 3,
      triggerTime : [100, 140],
      iconPath : "icn-balloons-crime.png",
      displayCountLimit : 5,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness2_AcceptOnlyTemplate.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2095604144], [simcity.kLocalSpeechBalloonLocaleTable, 2095604145]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {}

    },
    606695216 : {
      importance : 3,
      triggerTime : [100,
        140],
      iconPath : "icn-balloons-crime.png",
      displayCountLimit : 5,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness2_AcceptOnlyTemplate.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 564185068], [simcity.kLocalSpeechBalloonLocaleTable, 564185069]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {}

    },
    4134455947 : {
      importance : 10,
      triggerTime : [5, 10],
      iconPath : "icn-balloons-air-industrial-desirability.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Disasters_AcceptOnlyTemplate.js",
      speechBalloonTarget : 416754379,
      enableInDisaster : !0,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 574614540], [simcity.kLocalSpeechBalloonLocaleTable, 574614541], [simcity.kLocalSpeechBalloonLocaleTable, 574614542], [simcity.kLocalSpeechBalloonLocaleTable, 574614543], [simcity.kLocalSpeechBalloonLocaleTable, 574614536]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        DisasterActiveEarthquake : [simcity.kDataResourceAmount, simcity.kResourceIDDisasterActiveEarthquake]
      },
      test : function (a) {
        return !a ? !1 : 0 < a.DisasterActiveEarthquake
      }
    },
    4134455944 : {
      importance : 10,
      triggerTime : [5, 10],
      iconPath : "icn-balloons-air-residential-desirability.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Disasters_AcceptOnlyTemplate.js",
      speechBalloonTarget : 3403061518,
      enableInDisaster : !0,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 3376244542], [simcity.kLocalSpeechBalloonLocaleTable, 3376244543], [simcity.kLocalSpeechBalloonLocaleTable, 3376244540], [simcity.kLocalSpeechBalloonLocaleTable, 3376244541]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        DisasterActiveEarthquake : [simcity.kDataResourceAmount,
          simcity.kResourceIDDisasterActiveEarthquake]
      },
      test : function (a) {
        return !a ? !1 : 0 < a.DisasterActiveEarthquake
      }
    },
    4134455945 : {
      importance : 10,
      triggerTime : [5, 10],
      iconPath : "icn-balloons-air-shoppers.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Disasters_AcceptOnlyTemplate.js",
      speechBalloonTarget : 11435360,
      enableInDisaster : !0,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1697805551], [simcity.kLocalSpeechBalloonLocaleTable, 1697805550], [simcity.kLocalSpeechBalloonLocaleTable, 1697805549]],
      expirationTime : [60,
        90],
      isThoughtBubble : !0,
      queries : {
        DisasterActiveEarthquake : [simcity.kDataResourceAmount, simcity.kResourceIDDisasterActiveEarthquake]
      },
      test : function (a) {
        return !a ? !1 : 0 < a.DisasterActiveEarthquake
      }
    },
    2946006796 : {
      importance : 10,
      triggerTime : [5, 10],
      iconPath : "icn-balloons-air-population.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Disasters_AcceptOnlyTemplate.js",
      enableInDisaster : !0,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 3388304187], [simcity.kLocalSpeechBalloonLocaleTable, 3388304186], [simcity.kLocalSpeechBalloonLocaleTable,
          3388304185]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        DisasterActiveEarthquake : [simcity.kDataResourceAmount, simcity.kResourceIDDisasterActiveEarthquake]
      },
      test : function (a) {
        return !a ? !1 : 0 < a.DisasterActiveEarthquake
      }
    },
    2208232020 : {
      importance : 10,
      triggerTime : [5, 10],
      iconPath : "icn-balloons-air-population.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Disasters_AcceptOnlyTemplate.js",
      speechBalloonTarget : 2801636846,
      enableInDisaster : !0,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 3229923735],
        [simcity.kLocalSpeechBalloonLocaleTable, 3229923734], [simcity.kLocalSpeechBalloonLocaleTable, 3229923733], [simcity.kLocalSpeechBalloonLocaleTable, 3229923732]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        DisasterActiveMeteor : [simcity.kDataResourceAmount, simcity.kResourceIDDisasterActiveMeteor]
      },
      test : function (a) {
        return !a ? !1 : 0 < a.DisasterActiveMeteor
      }
    },
    2504824928 : {
      importance : 10,
      triggerTime : [5, 10],
      iconPath : "icn-balloons-air-population.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Disasters_AcceptOnlyTemplate.js",
      unitID : 4108133169,
      enableInDisaster : !0,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 355769764], [simcity.kLocalSpeechBalloonLocaleTable, 355769765], [simcity.kLocalSpeechBalloonLocaleTable, 355769766], [simcity.kLocalSpeechBalloonLocaleTable, 355769767], [simcity.kLocalSpeechBalloonLocaleTable, 355769760]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        DisasterActiveBigLizard : [simcity.kDataResourceAmount, simcity.kResourceIDDisasterActiveBigLizard]
      },
      test : function (a) {
        return !a ? !1 : 0 < a.DisasterActiveBigLizard
      }
    },
    1921934112 : {
      importance : 10,
      triggerTime : [5, 10],
      iconPath : "icn-balloons-air-population.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Disasters_AcceptOnlyTemplate.js",
      enableInDisaster : !0,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 70712959], [simcity.kLocalSpeechBalloonLocaleTable, 70712958], [simcity.kLocalSpeechBalloonLocaleTable, 70712957], [simcity.kLocalSpeechBalloonLocaleTable, 70712956]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        DisasterActiveBigLizard : [simcity.kDataResourceAmount,
          simcity.kResourceIDDisasterActiveBigLizard]
      },
      test : function (a) {
        return !a ? !1 : 0 < a.DisasterActiveBigLizard
      }
    },
    2877148849 : {
      importance : 10,
      triggerTime : [5, 10],
      iconPath : "icn-balloons-electronics.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Disasters_AcceptOnlyTemplate.js",
      speechBalloonTarget : 3630491247,
      enableWhileBurning : !0,
      enableInDisaster : !0,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1058105538], [simcity.kLocalSpeechBalloonLocaleTable, 1058105539], [simcity.kLocalSpeechBalloonLocaleTable, 1058105536],
        [simcity.kLocalSpeechBalloonLocaleTable, 1058105537], [simcity.kLocalSpeechBalloonLocaleTable, 1058105542], [simcity.kLocalSpeechBalloonLocaleTable, 1058105543], [simcity.kLocalSpeechBalloonLocaleTable, 1058105540]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        DisasterActiveRobot : [simcity.kDataResourceAmount, simcity.kResourceIDDisasterActiveRobot]
      },
      test : function (a) {
        return !a ? !1 : 0 < a.DisasterActiveRobot
      }
    },
    2912361487 : {
      importance : 10,
      triggerTime : [5, 10],
      iconPath : "icn-balloons-air-population.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Disasters_AcceptOnlyTemplate.js",
      enableInDisaster : !0,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2169944510], [simcity.kLocalSpeechBalloonLocaleTable, 2169944511], [simcity.kLocalSpeechBalloonLocaleTable, 2169944508], [simcity.kLocalSpeechBalloonLocaleTable, 2169944509], [simcity.kLocalSpeechBalloonLocaleTable, 2169944506]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        DisasterActiveRobot : [simcity.kDataResourceAmount, simcity.kResourceIDDisasterActiveRobot]
      },
      test : function (a) {
        return !a ? !1 : 0 < a.DisasterActiveRobot
      }
    },
    2912361477 : {
      importance : 10,
      triggerTime : [5, 10],
      iconPath : "icn-balloons-air-population.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Disasters_AcceptOnlyTemplate.js",
      enableInDisaster : !0,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2157463320], [simcity.kLocalSpeechBalloonLocaleTable, 2157463321], [simcity.kLocalSpeechBalloonLocaleTable, 2157463322], [simcity.kLocalSpeechBalloonLocaleTable, 2157463323], [simcity.kLocalSpeechBalloonLocaleTable, 2157463324]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        DisasterActiveRobot : [simcity.kDataResourceAmount,
          simcity.kResourceIDDisasterActiveRobot]
      },
      test : function (a) {
        return !a ? !1 : 0 < a.DisasterActiveRobot
      }
    },
    2912361502 : {
      importance : 10,
      triggerTime : [5, 10],
      iconPath : "icn-balloons-air-population.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Disasters_AcceptOnlyTemplate.js",
      enableInDisaster : !0,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2564140573], [simcity.kLocalSpeechBalloonLocaleTable, 2564140572], [simcity.kLocalSpeechBalloonLocaleTable, 2564140575], [simcity.kLocalSpeechBalloonLocaleTable, 2564140574]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        DisasterActiveRobot : [simcity.kDataResourceAmount, simcity.kResourceIDDisasterActiveRobot]
      },
      test : function (a) {
        return !a ? !1 : 0 < a.DisasterActiveRobot
      }
    },
    1902641071 : {
      importance : 10,
      triggerTime : [5, 10],
      iconPath : "icn-balloons-air-population.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Disasters_AcceptOnlyTemplate.js",
      enableInDisaster : !0,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1178143638], [simcity.kLocalSpeechBalloonLocaleTable, 1178143639],
        [simcity.kLocalSpeechBalloonLocaleTable, 1697805549], [simcity.kLocalSpeechBalloonLocaleTable, 1178143637]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        DisasterActiveTornado : [simcity.kDataResourceAmount, simcity.kResourceIDDisasterActiveTornado]
      },
      test : function (a) {
        return !a ? !1 : 0 < a.DisasterActiveTornado
      }
    },
    1902641068 : {
      importance : 10,
      triggerTime : [5, 10],
      iconPath : "icn-balloons-air-industrial-desirability.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Disasters_AcceptOnlyTemplate.js",
      speechBalloonTarget : 416754379,
      enableInDisaster : !0,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2202287312], [simcity.kLocalSpeechBalloonLocaleTable, 2202287313], [simcity.kLocalSpeechBalloonLocaleTable, 574614542], [simcity.kLocalSpeechBalloonLocaleTable, 574614543], [simcity.kLocalSpeechBalloonLocaleTable, 574614536]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        DisasterActiveTornado : [simcity.kDataResourceAmount, simcity.kResourceIDDisasterActiveTornado]
      },
      test : function (a) {
        return !a ? !1 : 0 < a.DisasterActiveTornado
      }
    },
    1902641069 : {
      importance : 10,
      triggerTime : [5, 10],
      iconPath : "icn-balloons-air-residential-desirability.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Disasters_AcceptOnlyTemplate.js",
      speechBalloonTarget : 3403061518,
      enableInDisaster : !0,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2498205655], [simcity.kLocalSpeechBalloonLocaleTable, 2498205654], [simcity.kLocalSpeechBalloonLocaleTable, 2498205653], [simcity.kLocalSpeechBalloonLocaleTable, 2498205652], [simcity.kLocalSpeechBalloonLocaleTable, 2498205651], [simcity.kLocalSpeechBalloonLocaleTable,
          2498205650], [simcity.kLocalSpeechBalloonLocaleTable, 2498205649]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        DisasterActiveTornado : [simcity.kDataResourceAmount, simcity.kResourceIDDisasterActiveTornado]
      },
      test : function (a) {
        return !a ? !1 : 0 < a.DisasterActiveTornado
      }
    },
    1869765365 : {
      importance : 10,
      triggerTime : [5, 10],
      iconPath : "icn-balloons-air-population.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Disasters_AcceptOnlyTemplate.js",
      enableInDisaster : !0,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable,
          4259503939], [simcity.kLocalSpeechBalloonLocaleTable, 4259503938], [simcity.kLocalSpeechBalloonLocaleTable, 4259503937], [simcity.kLocalSpeechBalloonLocaleTable, 4259503936]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        DisasterUFO : [simcity.kDataResourceAmount, simcity.kResourceIDDisasterActiveUFO]
      },
      test : function (a) {
        return !a ? !1 : 0 < a.DisasterUFO
      }
    },
    316992591 : {
      importance : 10,
      triggerTime : [5, 10],
      iconPath : "icn-balloons-air-population.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Disasters_AcceptOnlyTemplate.js",
      enableInDisaster : !0,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 158253215], [simcity.kLocalSpeechBalloonLocaleTable, 158253214], [simcity.kLocalSpeechBalloonLocaleTable, 158253213]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        DisasterActiveZombie : [simcity.kDataResourceAmount, simcity.kResourceIDDisasterActiveZombie]
      },
      test : function (a) {
        return !a ? !1 : 1 < a.DisasterActiveZombie
      }
    },
    167732761 : {
      importance : 8,
      triggerTime : [30, 60],
      iconPath : "icn-balloons-bus.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness2_AcceptOnlyTemplate.js",
      unitID : 2441280121,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 4006930683], [simcity.kLocalSpeechBalloonLocaleTable, 4006930682]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {}

    },
    575657826 : {
      importance : 2,
      triggerTime : [30, 90],
      iconPath : "icn-balloons-fire.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness3_AcceptOnlyTemplate.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 4262490069], [simcity.kLocalSpeechBalloonLocaleTable, 4262490068], [simcity.kLocalSpeechBalloonLocaleTable,
          4262490071], [simcity.kLocalSpeechBalloonLocaleTable, 4262490070], [simcity.kLocalSpeechBalloonLocaleTable, 4262490065]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        fireRisk : [simcity.kDataResourceAmount, simcity.kResourceIDFireRisk],
        flammableBuilding : [simcity.kDataResourceAmount, simcity.kResourceIDFlammableBuilding]
      },
      test : function (a) {
        return !a ? !1 : 0 < a.fireRisk / a.flammableBuilding
      }
    },
    3378138762 : {
      importance : 3,
      triggerTime : [60, 100],
      iconPath : "icn-balloons-fire.png",
      displayCountLimit : 1,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness4_AcceptOnlyTemplate.js",
      speechBalloonTarget : 3403061518,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2914755737]],
      localeTokenQueries : function () {
        return {
          numberOfFiresExtinguished : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfFiresExtinguished]
        }
      },
      getLocaleTokens : function (a) {
        return {
          numberOfFiresExtinguished : a.numberOfFiresExtinguished
        }
      },
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        numberOfFiresExtinguished : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfFiresExtinguished]
      },
      test : function (a) {
        return !a ? !1 : 5 < a.numberOfFiresExtinguished
      }
    },
    3042872174 : {
      importance : 5,
      triggerTime : [30, 60],
      iconPath : "icn-balloons-fire.png",
      displayCountLimit : 50,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness1_AcceptOnlyTemplate.js",
      enableWhileBurning : !0,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2523758954], [simcity.kLocalSpeechBalloonLocaleTable, 2523758955], [simcity.kLocalSpeechBalloonLocaleTable, 2523758952], [simcity.kLocalSpeechBalloonLocaleTable, 2523758953], [simcity.kLocalSpeechBalloonLocaleTable, 2523758958], [simcity.kLocalSpeechBalloonLocaleTable,
          2523758959], [simcity.kLocalSpeechBalloonLocaleTable, 2523758956]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {}

    },
    253705106 : {
      importance : 10,
      triggerTime : [20, 30],
      iconPath : "icn-balloons-fire.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness1_AcceptOnlyTemplate.js",
      enableWhileBurning : !0,
      enableInDisaster : !0,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 3067321782], [simcity.kLocalSpeechBalloonLocaleTable, 3067321783], [simcity.kLocalSpeechBalloonLocaleTable, 3067321780], [simcity.kLocalSpeechBalloonLocaleTable,
          3067321781], [simcity.kLocalSpeechBalloonLocaleTable, 3067321778], [simcity.kLocalSpeechBalloonLocaleTable, 3067321779]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {}

    },
    2050669172 : {
      importance : 10,
      triggerTime : [120, 150],
      iconPath : "icn-balloons-fire.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness3_AcceptOnlyTemplate.js",
      enableWhileBurning : !0,
      enableInDisaster : !0,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2468913692], [simcity.kLocalSpeechBalloonLocaleTable, 2468913693], [simcity.kLocalSpeechBalloonLocaleTable,
          2468913694], [simcity.kLocalSpeechBalloonLocaleTable, 3067321780], [simcity.kLocalSpeechBalloonLocaleTable, 2468913688]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        activeFires : [simcity.kDataResourceAmount, simcity.kResourceIDNumberOfFires]
      },
      test : function (a) {
        return !a ? !1 : 1 < a.activeFires
      }
    },
    330100544 : {
      importance : 9,
      triggerTime : [120, 240],
      iconPath : "icn-balloons-garbage.png",
      displayCountLimit : 10,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness2_AcceptOnlyTemplate.js",
      speechBalloonTarget : 1145013416,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 3436229178], [simcity.kLocalSpeechBalloonLocaleTable, 3436229179], [simcity.kLocalSpeechBalloonLocaleTable, 3436229176], [simcity.kLocalSpeechBalloonLocaleTable, 3436229177], [simcity.kLocalSpeechBalloonLocaleTable, 3436229182], [simcity.kLocalSpeechBalloonLocaleTable, 3436229183]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        NumberOfDumpDocks : [simcity.kDataResourceAmount, simcity.kResourceIDNumberOfDumpDocks],
        garbageCans : [simcity.kDataResourceAmount, simcity.kResourceIDGarbageDisplay]
      },
      test : function (a) {
        return !a ? !1 : 0 === a.NumberOfDumpDocks && 20 < a.garbageCans
      }
    },
    3911881381 : {
      importance : 2,
      triggerTime : [100, 140],
      iconPath : "icn-balloons-garbage.png",
      displayCountLimit : 5,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness4_AcceptOnlyTemplate.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2284955836], [simcity.kLocalSpeechBalloonLocaleTable, 2284955837], [simcity.kLocalSpeechBalloonLocaleTable, 2284955838]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        NumberOfDumpDocks : [simcity.kDataResourceAmount,
          simcity.kResourceIDNumberOfDumpDocks]
      },
      test : function (a) {
        return !a ? !1 : 0 < a.NumberOfDumpDocks
      }
    },
    4234378480 : {
      importance : 2,
      triggerTime : [60, 120],
      iconPath : "icn-balloons-happiness.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness1_AcceptOnlyTemplate.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1358942564], [simcity.kLocalSpeechBalloonLocaleTable, 1358942565], [simcity.kLocalSpeechBalloonLocaleTable, 1358942566], [simcity.kLocalSpeechBalloonLocaleTable, 1358942567], [simcity.kLocalSpeechBalloonLocaleTable,
          1358942560]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {}

    },
    2683032218 : {
      importance : 2,
      triggerTime : [60, 120],
      iconPath : "icn-balloons-happiness.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness5_AcceptOnlyTemplate.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2570464014], [simcity.kLocalSpeechBalloonLocaleTable, 2570464015], [simcity.kLocalSpeechBalloonLocaleTable, 2570464012], [simcity.kLocalSpeechBalloonLocaleTable, 2570464013], [simcity.kLocalSpeechBalloonLocaleTable, 2570464010]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {}

    },
    1326186203 : {
      importance : 3,
      triggerTime : [60, 120],
      iconPath : "icn-balloons-health.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness1_AcceptOnlyTemplate.js",
      enableWhileBurning : !0,
      enableInDisaster : !0,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2216786125], [simcity.kLocalSpeechBalloonLocaleTable, 2216786124], [simcity.kLocalSpeechBalloonLocaleTable, 2216786127], [simcity.kLocalSpeechBalloonLocaleTable, 2216786126], [simcity.kLocalSpeechBalloonLocaleTable,
          2216786121]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        rooms : [simcity.kDataBinAmount, simcity.kResourceIDHospitalRooms],
        sickHealing : [simcity.kDataBinAmount, simcity.kResourceIDSickHealing],
        injuryHealing : [simcity.kDataBinAmount, simcity.kResourceIDInjuryHealing],
        HospitalsBuilt : [simcity.kDataBinAmount, simcity.kResourceIDHospitalsBuilt]
      },
      test : function (a) {
        return !a ? !1 : a.sickHealing + a.injuryHealing >= a.rooms || 1 > a.HospitalsBuilt
      }
    },
    2761019883 : {
      importance : 4,
      triggerTime : [60, 120],
      iconPath : "icn-balloons-health.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness2_AcceptOnlyTemplate.js",
      enableWhileBurning : !0,
      enableInDisaster : !0,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1440228054], [simcity.kLocalSpeechBalloonLocaleTable, 1440228055], [simcity.kLocalSpeechBalloonLocaleTable, 1440228052], [simcity.kLocalSpeechBalloonLocaleTable, 1440228053], [simcity.kLocalSpeechBalloonLocaleTable, 1440228050]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        rooms : [simcity.kDataBinAmount, simcity.kResourceIDHospitalRooms],
        injuryHealing : [simcity.kDataBinAmount, simcity.kResourceIDInjuryHealing],
        HospitalsBuilt : [simcity.kDataBinAmount, simcity.kResourceIDHospitalsBuilt]
      },
      test : function (a) {
        return !a ? !1 : 1 > a.HospitalsBuilt || 0.5 * a.injuryHealing < a.rooms
      }
    },
    718763212 : {
      importance : 4,
      triggerTime : [60, 120],
      iconPath : "icn-balloons-health.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness3_AcceptOnlyTemplate.js",
      enableWhileBurning : !0,
      enableInDisaster : !0,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1977566489], [simcity.kLocalSpeechBalloonLocaleTable,
          1977566488], [simcity.kLocalSpeechBalloonLocaleTable, 1977566491], [simcity.kLocalSpeechBalloonLocaleTable, 1977566490]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        rooms : [simcity.kDataBinAmount, simcity.kResourceIDHospitalRooms],
        sickHealing : [simcity.kDataBinAmount, simcity.kResourceIDSickHealing],
        HospitalsBuilt : [simcity.kDataBinAmount, simcity.kResourceIDHospitalsBuilt]
      },
      test : function (a) {
        return !a ? !1 : 1 > a.HospitalsBuilt || 0.5 * a.sickHealing < a.rooms
      }
    },
    2550243007 : {
      importance : 1,
      triggerTime : [130, 444],
      iconPath : "icn-balloons-health.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness4_AcceptOnlyTemplate.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 4270031385], [simcity.kLocalSpeechBalloonLocaleTable, 4270031384], [simcity.kLocalSpeechBalloonLocaleTable, 4270031387]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {}

    },
    1809375424 : {
      importance : 1,
      triggerTime : [130, 444],
      iconPath : "icn-balloons-hospital.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness4_AcceptOnlyTemplate.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable,
          4131432583], [simcity.kLocalSpeechBalloonLocaleTable, 4131432582], [simcity.kLocalSpeechBalloonLocaleTable, 4131432581], [simcity.kLocalSpeechBalloonLocaleTable, 4131432580]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {}

    },
    3751144848 : {
      importance : 1,
      triggerTime : [130, 444],
      iconPath : "icn-balloons-health.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness3_AcceptOnlyTemplate.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 3094762008], [simcity.kLocalSpeechBalloonLocaleTable, 3094762009],
        [simcity.kLocalSpeechBalloonLocaleTable, 3094762010], [simcity.kLocalSpeechBalloonLocaleTable, 3094762011]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {}

    },
    2401798432 : {
      importance : 1,
      triggerTime : [130, 444],
      iconPath : "icn-balloons-health.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness5_AcceptOnlyTemplate.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 3634122716], [simcity.kLocalSpeechBalloonLocaleTable, 3634122717], [simcity.kLocalSpeechBalloonLocaleTable, 3634122718]],
      expirationTime : [60,
        90],
      isThoughtBubble : !0,
      queries : {}

    },
    3332678242 : {
      importance : 1,
      triggerTime : [130, 444],
      iconPath : "icn-balloons-air-population.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness3_AcceptOnlyTemplate.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 3405320640], [simcity.kLocalSpeechBalloonLocaleTable, 3405320641], [simcity.kLocalSpeechBalloonLocaleTable, 3405320642], [simcity.kLocalSpeechBalloonLocaleTable, 3405320643]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {}

    },
    2953178983 : {
      importance : 2,
      triggerTime : [60, 120],
      iconPath : "icn-balloons-air-industrial-desirability.png",
      displayCountLimit : 4,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness4_AcceptOnlyTemplate.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1193239924], [simcity.kLocalSpeechBalloonLocaleTable, 1193239925], [simcity.kLocalSpeechBalloonLocaleTable, 1193239926]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {}

    },
    4152608629 : {
      importance : 3,
      triggerTime : [180, 240],
      iconPath : "icn-balloons-air-industrial-desirability.png",
      displayCountLimit : 5,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness2_AcceptOnlyTemplate.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 4254444831], [simcity.kLocalSpeechBalloonLocaleTable, 4254444830], [simcity.kLocalSpeechBalloonLocaleTable, 4254444829]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {}

    },
    2141225E3 : {
      importance : 2,
      triggerTime : [90, 90],
      iconPath : "icn-balloons-air-population.png",
      displayCountLimit : 10,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness4_AcceptOnlyTemplate.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1798057524], [simcity.kLocalSpeechBalloonLocaleTable, 1798057525], [simcity.kLocalSpeechBalloonLocaleTable, 1798057526]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {}

    },
    1233328681 : {
      importance : 2,
      triggerTime : [30, 90],
      iconPath : "icn-balloons-air.png",
      displayCountLimit : 5,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness2_AcceptOnlyTemplate.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 302304511], [simcity.kLocalSpeechBalloonLocaleTable,
          302304510], [simcity.kLocalSpeechBalloonLocaleTable, 302304509], [simcity.kLocalSpeechBalloonLocaleTable, 302304508], [simcity.kLocalSpeechBalloonLocaleTable, 302304507]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        NIMBY : [simcity.kDataBinAmount, simcity.kResourceIDNIMBY]
      },
      test : function (a) {
        return !a ? !1 : 9 === a.NIMBY
      }
    },
    1233328682 : {
      importance : 2,
      triggerTime : [30, 90],
      iconPath : "icn-balloons-crime.png",
      displayCountLimit : 5,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness2_AcceptOnlyTemplate.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable,
          181481079], [simcity.kLocalSpeechBalloonLocaleTable, 181481078], [simcity.kLocalSpeechBalloonLocaleTable, 181481077], [simcity.kLocalSpeechBalloonLocaleTable, 181481076], [simcity.kLocalSpeechBalloonLocaleTable, 181481075]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        NIMBY : [simcity.kDataBinAmount, simcity.kResourceIDNIMBY]
      },
      test : function (a) {
        return !a ? !1 : 3 === a.NIMBY
      }
    },
    1233328683 : {
      importance : 2,
      triggerTime : [30, 90],
      iconPath : "icn-balloons-coal.png",
      displayCountLimit : 5,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness2_AcceptOnlyTemplate.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1912124399], [simcity.kLocalSpeechBalloonLocaleTable, 1912124398], [simcity.kLocalSpeechBalloonLocaleTable, 1912124397], [simcity.kLocalSpeechBalloonLocaleTable, 1912124396], [simcity.kLocalSpeechBalloonLocaleTable, 1912124395]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        NIMBY : [simcity.kDataBinAmount, simcity.kResourceIDNIMBY]
      },
      test : function (a) {
        return !a ? !1 : 4 === a.NIMBY
      }
    },
    1233328684 : {
      importance : 2,
      triggerTime : [30, 90],
      iconPath : "icn-balloons-garbage.png",
      displayCountLimit : 5,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness2_AcceptOnlyTemplate.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 476506983], [simcity.kLocalSpeechBalloonLocaleTable, 476506982], [simcity.kLocalSpeechBalloonLocaleTable, 476506981], [simcity.kLocalSpeechBalloonLocaleTable, 476506980]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        NIMBY : [simcity.kDataBinAmount, simcity.kResourceIDNIMBY]
      },
      test : function (a) {
        return !a ? !1 : 5 === a.NIMBY
      }
    },
    1233328685 : {
      importance : 2,
      triggerTime : [30,
        90],
      iconPath : "icn-balloons-air-pollution.png",
      displayCountLimit : 5,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness2_AcceptOnlyTemplate.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1429225202], [simcity.kLocalSpeechBalloonLocaleTable, 1429225203], [simcity.kLocalSpeechBalloonLocaleTable, 1429225200], [simcity.kLocalSpeechBalloonLocaleTable, 1429225201], [simcity.kLocalSpeechBalloonLocaleTable, 1429225206]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        NIMBY : [simcity.kDataBinAmount,
          simcity.kResourceIDNIMBY]
      },
      test : function (a) {
        return !a ? !1 : 1 === a.NIMBY
      }
    },
    1233328686 : {
      importance : 2,
      triggerTime : [30, 90],
      iconPath : "icn-balloons-oil.png",
      displayCountLimit : 5,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness2_AcceptOnlyTemplate.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2233738548], [simcity.kLocalSpeechBalloonLocaleTable, 2233738549], [simcity.kLocalSpeechBalloonLocaleTable, 2233738550], [simcity.kLocalSpeechBalloonLocaleTable, 2233738551], [simcity.kLocalSpeechBalloonLocaleTable,
          2233738544]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        NIMBY : [simcity.kDataBinAmount, simcity.kResourceIDNIMBY]
      },
      test : function (a) {
        return !a ? !1 : 6 === a.NIMBY
      }
    },
    1233328687 : {
      importance : 2,
      triggerTime : [30, 90],
      iconPath : "icn-balloons-ore.png",
      displayCountLimit : 5,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness2_AcceptOnlyTemplate.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 3305225976], [simcity.kLocalSpeechBalloonLocaleTable, 3305225977], [simcity.kLocalSpeechBalloonLocaleTable, 3305225978],
        [simcity.kLocalSpeechBalloonLocaleTable, 3305225979], [simcity.kLocalSpeechBalloonLocaleTable, 3305225980]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        NIMBY : [simcity.kDataBinAmount, simcity.kResourceIDNIMBY]
      },
      test : function (a) {
        return !a ? !1 : 7 === a.NIMBY
      }
    },
    1233328672 : {
      importance : 2,
      triggerTime : [30, 90],
      iconPath : "icn-balloons-power.png",
      displayCountLimit : 5,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness2_AcceptOnlyTemplate.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 362702437], [simcity.kLocalSpeechBalloonLocaleTable,
          362702436], [simcity.kLocalSpeechBalloonLocaleTable, 362702439], [simcity.kLocalSpeechBalloonLocaleTable, 362702438], [simcity.kLocalSpeechBalloonLocaleTable, 362702433]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        NIMBY : [simcity.kDataBinAmount, simcity.kResourceIDNIMBY]
      },
      test : function (a) {
        return !a ? !1 : 8 === a.NIMBY
      }
    },
    1233328673 : {
      importance : 2,
      triggerTime : [30, 90],
      iconPath : "icn-balloons-ground-pollution.png",
      displayCountLimit : 5,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness2_AcceptOnlyTemplate.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 3535956504], [simcity.kLocalSpeechBalloonLocaleTable, 3535956505], [simcity.kLocalSpeechBalloonLocaleTable, 3535956506], [simcity.kLocalSpeechBalloonLocaleTable, 3535956507], [simcity.kLocalSpeechBalloonLocaleTable, 3535956508]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        NIMBY : [simcity.kDataBinAmount, simcity.kResourceIDNIMBY]
      },
      test : function (a) {
        return !a ? !1 : 2 === a.NIMBY
      }
    },
    728449172 : {
      importance : 2,
      triggerTime : [120, 240],
      iconPath : "icn-balloons-coal.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness5_AcceptOnlyTemplate.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 3888877473], [simcity.kLocalSpeechBalloonLocaleTable, 3888877472], [simcity.kLocalSpeechBalloonLocaleTable, 3888877475]],
      localeTokenQueries : function () {
        return {
          TotalCoalAtPowerStations : [simcity.kDataResourceAmount, simcity.kResourceIDGlobal_TotalCoalRemainingAtPowerStations]
        }
      },
      getLocaleTokens : function (a) {
        return {
          TotalCoalAtPowerStations : a.TotalCoalAtPowerStations
        }
      },
      expirationTime : [60,
        90],
      isThoughtBubble : !0,
      queries : {}

    },
    850563797 : {
      importance : 10,
      triggerTime : [15, 30],
      iconPath : "icn-balloons-power.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness1_AcceptOnlyTemplate.js",
      speechBalloonTarget : 2801636846,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 3251768851], [simcity.kLocalSpeechBalloonLocaleTable, 3251768850], [simcity.kLocalSpeechBalloonLocaleTable, 3251768849], [simcity.kLocalSpeechBalloonLocaleTable, 3251768848], [simcity.kLocalSpeechBalloonLocaleTable, 3251768855], [simcity.kLocalSpeechBalloonLocaleTable,
          3251768854], [simcity.kLocalSpeechBalloonLocaleTable, 3251768853]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        unpoweredbuildings : [simcity.kDataResourceAmount, simcity.kResourceIDPowerGlobals_UnpoweredBuildings],
        powercustomers : [simcity.kDataResourceAmount, simcity.kResourceIDPowerGlobals_NumberOfPowerConsumers]
      },
      test : function (a) {
        return !a ? !1 : a.unpoweredbuildings > 0.3 * a.powercustomers
      }
    },
    4144969792 : {
      importance : 3,
      triggerTime : [100, 500],
      iconPath : "icn-balloons-air-residential-desirability.png",
      displayCountLimit : 3,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness4_AcceptOnlyTemplate.js",
      speechBalloonTarget : 3403061518,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2885950527], [simcity.kLocalSpeechBalloonLocaleTable, 2885950526], [simcity.kLocalSpeechBalloonLocaleTable, 2885950525]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {}

    },
    1323230525 : {
      importance : 9,
      triggerTime : [30, 60],
      iconPath : "icn-balloons-sewage.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness2_AcceptOnlyTemplate.js",
      speechBalloonTarget : 1145013416,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2505716927], [simcity.kLocalSpeechBalloonLocaleTable, 2505716926], [simcity.kLocalSpeechBalloonLocaleTable, 2505716925], [simcity.kLocalSpeechBalloonLocaleTable, 2505716924]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        SewageDumped_PerHour : [simcity.kDataBinAmount, simcity.kResourceIDSewageDumped_PerHour]
      },
      test : function (a) {
        return !a ? !1 : 200 < a.SewageDumped_PerHour
      }
    },
    1954144673 : {
      importance : 5,
      triggerTime : [100, 140],
      iconPath : "icn-balloons-sewage.png",
      displayCountLimit : 5,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness2_AcceptOnlyTemplate.js",
      speechBalloonTarget : 1145013416,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 4141778267], [simcity.kLocalSpeechBalloonLocaleTable, 4141778266]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {}

    },
    2598631251 : {
      importance : 2,
      triggerTime : [100, 140],
      iconPath : "icn-balloons-tourism.png",
      displayCountLimit : 5,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness4_AcceptOnlyTemplate.js",
      speechBalloonTarget : 2321594729,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 3817169443], [simcity.kLocalSpeechBalloonLocaleTable, 3817169442], [simcity.kLocalSpeechBalloonLocaleTable, 3817169441], [simcity.kLocalSpeechBalloonLocaleTable, 3817169440]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {}

    },
    1829017362 : {
      importance : 5,
      triggerTime : [100, 140],
      iconPath : "icn-balloons-tourism.png",
      displayCountLimit : 5,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness2_AcceptOnlyTemplate.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable,
          1803903469], [simcity.kLocalSpeechBalloonLocaleTable, 1803903468]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        attractionLevel : [simcity.kDataBinAmount, simcity.kResourceIDAttractionLevel],
        commercialW1 : [simcity.kDataResourceAmount, simcity.kResourceIDCommercialW1],
        commercialW2 : [simcity.kDataResourceAmount, simcity.kResourceIDCommercialW2],
        commercialW3 : [simcity.kDataResourceAmount, simcity.kResourceIDCommercialW3],
        incomeFromLandMarks : [simcity.kDataResourceAmount, simcity.kResourceIDIncomeFromLandMarksTotal]
      },
      test : function (a) {
        return !a ? !1 : 20 < a.attractionLevel && 100 <= a.commercialW1 + a.commercialW2 + a.commercialW3 && 0 === a.incomeFromLandMarks
      }
    },
    1358237345 : {
      importance : 5,
      triggerTime : [100, 140],
      iconPath : "icn-balloons-tourism.png",
      displayCountLimit : 5,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness2_AcceptOnlyTemplate.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 3813698886], [simcity.kLocalSpeechBalloonLocaleTable, 3813698887]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {}

    },
    2772268824 : {
      importance : 5,
      triggerTime : [100, 140],
      iconPath : "icn-balloons-tourism.png",
      displayCountLimit : 5,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness2_AcceptOnlyTemplate.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1552672479], [simcity.kLocalSpeechBalloonLocaleTable, 1552672478]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {}

    },
    84390032 : {
      importance : 2,
      triggerTime : [90, 120],
      iconPath : "icn-balloons-tourism.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness5_AcceptOnlyTemplate.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable,
          2435046829], [simcity.kLocalSpeechBalloonLocaleTable, 2435046828], [simcity.kLocalSpeechBalloonLocaleTable, 2435046831], [simcity.kLocalSpeechBalloonLocaleTable, 2435046830]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {}

    },
    2739815955 : {
      importance : 5,
      triggerTime : [100, 140],
      iconPath : "icn-balloons-tourism.png",
      displayCountLimit : 5,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness5_AcceptOnlyTemplate.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 3971582830], [simcity.kLocalSpeechBalloonLocaleTable,
          3971582831]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {}

    },
    4013206523 : {
      importance : 4,
      triggerTime : [10, 20],
      iconPath : "icn-balloons-fire.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness4_AcceptOnlyTemplate.js",
      speechBalloonTarget : 2801636846,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1187156471]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {}

    },
    400378925 : {
      importance : 4,
      triggerTime : [10, 20],
      iconPath : "icn-balloons-fire.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness2_AcceptOnlyTemplate.js",
      speechBalloonTarget : 2801636846,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 3234644001]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {}

    },
    3256678384 : {
      importance : 4,
      triggerTime : [10, 20],
      iconPath : "icn-balloons-fire.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness5_AcceptOnlyTemplate.js",
      speechBalloonTarget : 2801636846,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 2000382358]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {}

    },
    28062150 : {
      importance : 4,
      triggerTime : [10, 20],
      iconPath : "icn-balloons-garbage.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness4_AcceptOnlyTemplate.js",
      speechBalloonTarget : 2801636846,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 592485724]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {}

    },
    911773884 : {
      importance : 4,
      triggerTime : [10, 20],
      iconPath : "icn-balloons-garbage.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness2_AcceptOnlyTemplate.js",
      speechBalloonTarget : 2801636846,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable,
          174271634]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {}

    },
    3514846415 : {
      importance : 4,
      triggerTime : [10, 20],
      iconPath : "icn-balloons-garbage.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness5_AcceptOnlyTemplate.js",
      speechBalloonTarget : 2801636846,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 4024487355]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {}

    },
    756796549 : {
      importance : 4,
      triggerTime : [60, 60],
      iconPath : "icn-balloons-power.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness5_AcceptOnlyTemplate.js",
      speechBalloonTarget : 3403061518,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1611671660], [simcity.kLocalSpeechBalloonLocaleTable, 1611671661], [simcity.kLocalSpeechBalloonLocaleTable, 1611671662]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {}

    },
    1892373565 : {
      importance : 1,
      triggerTime : [60, 60],
      iconPath : "icn-balloons-air-population.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness3_AcceptOnlyTemplate.js",
      unitID : 1770514921,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 4089662207],
        [simcity.kLocalSpeechBalloonLocaleTable, 4089662206], [simcity.kLocalSpeechBalloonLocaleTable, 4089662205]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {}

    },
    479664727 : {
      importance : 4,
      triggerTime : [10, 20],
      iconPath : "icn-balloons-air-population.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness3_AcceptOnlyTemplate.js",
      unitID : 1770514921,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 363890873], [simcity.kLocalSpeechBalloonLocaleTable, 363890872], [simcity.kLocalSpeechBalloonLocaleTable, 363890875]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {}

    },
    2174741945 : {
      importance : 4,
      triggerTime : [10, 20],
      iconPath : "icn-balloons-police.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness4_AcceptOnlyTemplate.js",
      speechBalloonTarget : 2801636846,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1445253685]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {}

    },
    3481063927 : {
      importance : 4,
      triggerTime : [10, 20],
      iconPath : "icn-balloons-police.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness2_AcceptOnlyTemplate.js",
      speechBalloonTarget : 2801636846,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 3956100299]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {}

    },
    2019190184 : {
      importance : 4,
      triggerTime : [10, 20],
      iconPath : "icn-balloons-police.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness5_AcceptOnlyTemplate.js",
      speechBalloonTarget : 2801636846,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 122157356]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {}

    },
    3302529954 : {
      importance : 4,
      triggerTime : [10, 20],
      iconPath : "icn-balloons-police.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness5_AcceptOnlyTemplate.js",
      speechBalloonTarget : 2801636846,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1801995712]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {}

    },
    1380747748 : {
      importance : 4,
      triggerTime : [10, 20],
      iconPath : "icn-balloons-police.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness5_AcceptOnlyTemplate.js",
      speechBalloonTarget : 2801636846,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable,
          2557374344]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {}

    },
    1507836080 : {
      importance : 5,
      triggerTime : [120, 180],
      iconPath : "icn-balloons-bus.png",
      displayCountLimit : 5,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness2_AcceptOnlyTemplate.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 890657951], [simcity.kLocalSpeechBalloonLocaleTable, 890657950], [simcity.kLocalSpeechBalloonLocaleTable, 890657949], [simcity.kLocalSpeechBalloonLocaleTable, 890657948]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {}

    },
    305698128 : {
      importance : 5,
      triggerTime : [120, 180],
      iconPath : "icn-balloons-bus.png",
      displayCountLimit : 5,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness2_AcceptOnlyTemplate.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 1549982305], [simcity.kLocalSpeechBalloonLocaleTable, 1549982304], [simcity.kLocalSpeechBalloonLocaleTable, 1549982307], [simcity.kLocalSpeechBalloonLocaleTable, 1549982306], [simcity.kLocalSpeechBalloonLocaleTable, 1549982309]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {}

    },
    3910910814 : {
      importance : 4,
      triggerTime : [30, 60],
      iconPath : "icn-balloons-roads.png",
      displayCountLimit : 5,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness2_AcceptOnlyTemplate.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 4039884685], [simcity.kLocalSpeechBalloonLocaleTable, 4039884684], [simcity.kLocalSpeechBalloonLocaleTable, 4039884687], [simcity.kLocalSpeechBalloonLocaleTable, 4039884686], [simcity.kLocalSpeechBalloonLocaleTable, 4039884681]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {}

    },
    292268636 : {
      importance : 5,
      triggerTime : [30, 60],
      iconPath : "icn-balloons-rail.png",
      displayCountLimit : 5,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness2_AcceptOnlyTemplate.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 250590232], [simcity.kLocalSpeechBalloonLocaleTable, 250590233], [simcity.kLocalSpeechBalloonLocaleTable, 250590234], [simcity.kLocalSpeechBalloonLocaleTable, 250590235], [simcity.kLocalSpeechBalloonLocaleTable, 250590236]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {}

    },
    2487889120 : {
      importance : 5,
      triggerTime : [30, 60],
      iconPath : "icn-balloons-rail.png",
      displayCountLimit : 5,
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness2_AcceptOnlyTemplate.js",
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 3492573021], [simcity.kLocalSpeechBalloonLocaleTable, 3492573020], [simcity.kLocalSpeechBalloonLocaleTable, 3492573023], [simcity.kLocalSpeechBalloonLocaleTable, 3492573022], [simcity.kLocalSpeechBalloonLocaleTable, 3492573017]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {}

    },
    4101975507 : {
      importance : 10,
      triggerTime : [15, 30],
      iconPath : "icn-balloons-water.png",
      layoutPath : "Layouts/SpeechBalloons/ThoughtBalloon_Happiness1_AcceptOnlyTemplate.js",
      speechBalloonTarget : 2801636846,
      messages : [[simcity.kLocalSpeechBalloonLocaleTable, 3174294671], [simcity.kLocalSpeechBalloonLocaleTable, 3174294670], [simcity.kLocalSpeechBalloonLocaleTable, 3174294669], [simcity.kLocalSpeechBalloonLocaleTable, 3174294668], [simcity.kLocalSpeechBalloonLocaleTable, 3174294667], [simcity.kLocalSpeechBalloonLocaleTable,
          3174294666]],
      expirationTime : [60, 90],
      isThoughtBubble : !0,
      queries : {
        unwateredbuildings : [simcity.kDataResourceAmount, simcity.kResourceIDWaterGlobals_UnwateredBuildings],
        watercustomers : [simcity.kDataResourceAmount, simcity.kResourceIDWaterGlobals_NumberOfWaterConsumers]
      },
      test : function (a) {
        return !a ? !1 : a.unwateredbuildings > 0.3 * a.watercustomers
      }
    }
  }
};
simcity.NameYourCityDialog = {};
simcity.cCityNameHandler = function () {
  this.UIHandler = scrui.cUIHandler;
  this.UIHandler();
  this.mLocaleImproperCharcters = this.mLocaleOops = this.mCityNameTextDecline = this.mCityNameTextAccept = this.mCityNameTextInput = this.mCityNameUILayout = null;
  this.mSetTextFocus = 0
};
goog.inherits(simcity.cCityNameHandler, scrui.cUIHandler);
simcity.cCityNameHandler.kBindingTypeName = 240257362;
simcity.cCityNameHandler.kLayoutAcceptButtonID = 240329402;
simcity.cCityNameHandler.kLayoutDeclineButtonID = 240329403;
simcity.cCityNameHandler.kLayoutInputText = 206792372;
simcity.cCityNameHandler.prototype.Init = function (a) {
  scrui.Assert(null !== a);
  this.mCityNameUILayout = gUIManager.LoadAndCacheLayout("Layouts/CityName.js", a);
  this.mCityNameTextAccept = this.mCityNameUILayout.FindControlByID(simcity.cCityNameHandler.kLayoutAcceptButtonID);
  this.mCityNameTextDecline = this.mCityNameUILayout.FindControlByID(simcity.cCityNameHandler.kLayoutDeclineButtonID);
  if (this.mCityNameTextInput = this.mCityNameUILayout.FindControlByID(simcity.cCityNameHandler.kLayoutInputText)) {
    var b = gUIManager.FindControlByID(simcity.kTxtBoxName);
    this.mCityNameTextInput.SetRawText(b.GetText())
  }
  b = simcity.gGlobalUIHandler.mAPIServerDataUIHandler.GetBoxByBoxUID(simcity.gGlobalUIHandler.mActiveBoxUID) || null;
  null !== b && this.mCityNameTextInput.SetRawText(b.name);
  var c = this;
  a.FindAnimationByID(249492938).RegisterEventCallback(scrui.cAnimation.kEventStopped, function () {
    if (!a.mIsVisible) {
      simcity.gGlobalUIHandler.mControlsToDestroy.push(c.mCityNameUILayout);
      var b = simcity.gGlobalUIHandler;
      gUIManager.UnregisterUIHandler(b.mCityNameUIHandler);
      delete b.mCityNameUIHandler
    }
  });
  this.mLocaleOops = new scrui.cLocaleString("ErrorMessages.json", "0x0e0d3def", "Oops!");
  this.mLocaleImproperCharcters = new scrui.cLocaleString("DialogMessages.json", "0x0ee2de8a", "City name must not contain invalid characters.");
  this.mSetTextFocus = 0
};
simcity.cCityNameHandler.prototype.Update = scrui.Client_ProfZone("cGlobalUIHandler.Update", function (a) {
    this.IsVisible() && 1E3 > this.mSetTextFocus && (this.mCityNameTextInput.Focus(), this.mSetTextFocus += a)
  });
simcity.cCityNameHandler.prototype.HandleUIMessage = function (a, b) {
  switch (a) {
  case scrui.kMsgTypeButtonClicked:
    switch (b) {
    case simcity.cCityNameHandler.kLayoutAcceptButtonID:
      this.Rename();
      break;
    case simcity.cCityNameHandler.kLayoutDeclineButtonID:
      this.Hide()
    }
  }
};
simcity.RenameCity = function (a) {
  var b = simcity.gGlobalUIHandler.mAPIServerDataUIHandler.GetBoxByBoxUID(simcity.gGlobalUIHandler.mActiveBoxID) || null;
  if (null !== b) {
    simcity.gGlobalUIHandler.mAPIServerDataUIHandler.SetBoxData(b, b);
    simcity.gGlobalUIHandler.mGlobalUILayout.FindControlByID(simcity.kTxtBoxName).SetRawText(a, !0);
    var c = {
      url : scrui.GetRestPath() + "/box/" + simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData.mPlayingBox.id + "/updateName/" + a + ".json",
      params : [["sessionid", simcity.gGlobalUIHandler.mUserSessionId]],
      onSuccess : function (c) {
        c = c.json.name;
        if (void 0 != a && "" != a) {
          simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData.mPlayingBox.name = c;
          var e = simcity.gGlobalUIHandler.mGlobalUILayout.FindControlByID(simcity.kTxtBoxName);
          b.name = c;
          e.SetRawText(c, !0);
          simcity.gGlobalUIHandler.mAPIServerDataUIHandler.RefreshRegionAPIData()
        }
      },
      onError : function () {},
      method : "post"
    };
    scrui.XHR.Request(c)
  }
};
simcity.cCityNameHandler.prototype.Rename = function () {
  var a = simcity.gGlobalUIHandler.mAPIServerDataUIHandler.GetBoxByBoxUID(simcity.gGlobalUIHandler.mActiveBoxID) || null;
  if (null !== a) {
    var b = this.mCityNameTextInput.GetText();
    if (simcity.gUIToolbox.HasHTML(b) || simcity.gUIToolbox.HasInvalidChars(b))
      b = simcity.gUIToolbox.Sanitize(b), simcity.gGlobalUIHandler.mDialogManager.ShowLocalizedModal(this.mLocaleOops, this.mLocaleImproperCharcters);
    simcity.gGlobalUIHandler.mAPIServerDataUIHandler.SetBoxData(a, a);
    var c =
      simcity.gGlobalUIHandler.mGlobalUILayout.FindControlByID(simcity.kTxtBoxName);
    if (void 0 != b && "" != b)
      if ("" != b.replace(/\s+/g, ""))
        c.SetRawText(b, !0);
      else {
        this.Hide();
        return
      }
    else {
      this.Hide();
      return
    }
    b = {
      url : scrui.GetRestPath() + "/box/" + simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData.mPlayingBox.id + "/updateName/" + b + ".json",
      params : [["sessionid", simcity.gGlobalUIHandler.mUserSessionId]],
      onSuccess : function (b) {
        b = b.json.name;
        if (void 0 != b && "" != b) {
          simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData.mPlayingBox.name =
            b;
          var c = simcity.gGlobalUIHandler.mGlobalUILayout.FindControlByID(simcity.kTxtBoxName);
          a.name = b;
          c.SetRawText(b, !0);
          simcity.gGlobalUIHandler.mAPIServerDataUIHandler.RefreshRegionAPIData()
        }
      },
      onError : function () {},
      method : "post"
    };
    scrui.XHR.Request(b)
  }
  this.Hide()
};
simcity.cCityNameHandler.prototype.Hide = function () {
  gUIManager.FindControlByID(simcity.kCityNameButton).SetSelected(!1);
  this.mSetTextFocus = !1
};
simcity.cCityNameHandler.prototype.IsVisible = function () {
  return gUIManager.FindControlByID(simcity.kCityNameButton).mIsSelected
};
simcity.CreateNameYourCityDialog = function () {
  var a = simcity.gGlobalUIHandler;
  a.mCityNameUIHandler || (a.mCityNameUIHandler = new simcity.cCityNameHandler, a.mCityNameUIHandler.Init(gUIManager.FindControlByID(simcity.kCityNameContainer)), gUIManager.RegisterUIHandler(a.mCityNameUIHandler))
};
simcity.Dialog = {};
simcity.gDialog = function (a) {
  this.mPageIDs = {
    MODAL_SCREEN : 240322066,
    MODAL_WINDOW : 226514731,
    MODAL_TITLE : 226515471,
    MODAL_MESSAGE : 226515502,
    MODAL_CLOSE_BUTTON : 226514822,
    MODAL_CUSTOM_CONTENT : 243597719,
    BUTTON_TEXT : 240592932,
    BUSY_WINDOW : 226585381,
    BUSY_TEXT : 226585400
  };
  this.mButtonHandlers = {
    mPromptOk : function () {},
    mPromptCancel : function () {}

  };
  this.mRootLayout = a;
  this.mUIToolBox = new simcity.gUIToolbox(this.mPageIDs, this.mRootLayout);
  this.mIsMsgTextSelectable = !1;
  this.mButtonIds = [243538380, 226514822]
};
simcity.gDialog.kButtonCancelText = new scrui.cLocaleString("GameEntry.json", "0x0e3b8b19");
simcity.gDialog.kButtonOk = {
  text : new scrui.cLocaleString("GameEntry.json", "0x6277173b"),
  onClick : null
};
simcity.gDialog.kButtonCancel = {
  text : simcity.gDialog.kButtonCancelText,
  onClick : null
};
simcity.gDialog.kButtonRetry = {
  text : new scrui.cLocaleString("GameEntry.json", "0xd06e93c5"),
  onClick : null
};
simcity.gDialog.kButtonQuit = {
  text : new scrui.cLocaleString("GameEntry.json", "0xea4b2998"),
  onClick : null
};
simcity.gDialog.kModalRoot = 236351187;
simcity.gDialog.kModalScreen = 240322066;
simcity.gDialog.kModalWindow = 226514731;
simcity.gDialog.kLocaleStrings = {
  kLoading : new scrui.cLocaleString("GameEntry.json", "0xd0e9b0e5", "Loading...")
};
simcity.gDialog.onClose = null;
simcity.gDialog.prototype.ShowPrompt = function (a) {
  var b = this.mPageIDs,
  c = this;
  this.mRootLayout.FindControlByID(b.MODAL_WINDOW).SetVisibility(!0);
  var d = this.mRootLayout.FindControlByID(b.MODAL_TITLE);
  this.SetControlText(d, a.title, a.titleParams);
  var d = this.mRootLayout.FindControlByID(b.MODAL_MESSAGE),
  e = this.mRootLayout.FindControlByID(b.MODAL_CUSTOM_CONTENT);
  "function" === typeof a.contentFunc ? (this.SetControlText(d), a.contentFunc(e)) : (e.DestroyChildren(), this.SetControlText(d, a.message, a.messageParams));
  this.mIsMsgTextSelectable ? d.SetSelectable(!0) : d.SetSelectable(!1);
  (a = a.buttons) || (a = [simcity.gDialog.kButtonOk]);
  for (d = 0; d < this.mButtonIds.length; ++d) {
    var e = a[d],
    f = this.mButtonIds[d],
    g = this.mRootLayout.FindControlByID(f);
    e ? (g.SetVisibility(!0), g.onClick = e.onClick, g.context = this, g = g.FindControlByID(b.BUTTON_TEXT), this.SetControlText(g, e.text, e.textParams), simcity.gEventManager.AddEventListener(simcity.gEventTypes.CLICK, f, function (a) {
        c.HandleButtonClick(a)
      })) : (g.SetVisibility(!1), g.onClick = void 0)
  }
  this.ShowScreen()
};
simcity.gDialog.prototype.HidePrompt = function () {
  this.mRootLayout.FindControlByID(this.mPageIDs.MODAL_WINDOW).SetVisibility(!1)
};
simcity.gDialog.prototype.OnEscapePressed = function () {
  if (0 < this.mButtonIds.length) {
    var a = this.mRootLayout.FindControlByID(this.mButtonIds[0]);
    this.HandleButtonClick(a)
  }
};
simcity.gDialog.prototype.HandleButtonClick = function (a) {
  for (var b = 0; b < this.mButtonIds.length; ++b)
    simcity.gEventManager.RemoveEventListener(simcity.gEventTypes.CLICK, this.mButtonIds[b]);
  a.context.mRootLayout.FindControlByID(simcity.gDialog.kModalScreen).SetVisibility(!1);
  a.context.mRootLayout.FindControlByID(simcity.gDialog.kModalWindow).SetVisibility(!1);
  if (a.onClick)
    a.onClick()
};
simcity.gDialog.prototype.ShowModal = function (a, b, c) {
  var d = goog.object.clone(simcity.gDialog.kButtonOk);
  d.onClick = c;
  this.ShowPrompt({
    title : a,
    message : b,
    buttons : [d]
  })
};
simcity.gDialog.prototype.ShowLocalizedModal = function (a, b, c, d, e) {
  var f = goog.object.clone(simcity.gDialog.kButtonOk);
  f.onClick = c;
  this.ShowPrompt({
    title : a,
    titleParams : d,
    message : b,
    messageParams : e,
    buttons : [f]
  })
};
simcity.gDialog.prototype.ShowLoading = function (a, b) {
  var c = this.mRootLayout.FindControlByID(this.mPageIDs.BUSY_TEXT);
  a || (a = simcity.gDialog.kLocaleStrings.kLoading);
  this.SetControlText(c, a, b);
  this.mUIToolBox.ShowByKey("BUSY_WINDOW");
  this.ShowScreen()
};
simcity.gDialog.prototype.HideLoading = function () {
  this.mUIToolBox.HideByKey("BUSY_WINDOW");
  this.HideScreen()
};
simcity.gDialog.prototype.HideScreen = function () {
  this.mUIToolBox.HideByKey("MODAL_SCREEN")
};
simcity.gDialog.prototype.ShowScreen = function () {
  this.mUIToolBox.ShowByKey("MODAL_SCREEN")
};
simcity.gDialog.prototype.HideAll = function () {
  this.HideScreen();
  this.mUIToolBox.HideByKey("MODAL_WINDOW");
  this.HideLoading()
};
simcity.gDialog.prototype.SetControlText = function (a, b, c) {
  b ? b instanceof scrui.cLocaleString ? a.SetLocaleText(b, c) : a.SetRawText(b) : a.SetRawText("")
};
simcity.GreatWorksLowerPanelUI = {};
simcity.kGWLowerPanelIDs = {
  mRollOverWindow : 253377966,
  mGreatWorkTitle : 246539410,
  mInnerPanelContainer : 241992393,
  mResourcePanelContainer : 242160975,
  mConnectedCityContainer : 242161690,
  mResourcePanelContainerP2 : 242430409,
  mConnectedCityContainerP2 : 242430404,
  mLowerPanelTitle : 240573479,
  mConstructionText : 255785407,
  mMainPanels : {
    mUnclaimed : 241892870,
    mPermitPhase : 241892867,
    mConstrPhase1 : 241893046,
    mConstrPhase2 : 241893049,
    mOperating : 241892879
  },
  mContextPanel : {
    mPhaseText : 242161693
  },
  mCatalogItem : {
    container : 249397800,
    thumbnail : 248541992,
    lockedImage : 248542490
  },
  mSellSheet : {
    DataContainer : 249562802,
    benefitsContainer : 249564531,
    benefitsTitle : 249564525,
    constructionMaterialsContainer : 249564529,
    constructionMaterialsTitle : 249564527,
    infoContainer : 249563976,
    infoIcon : 249564469,
    infoText : 249563978
  },
  mButtons : {
    mSelectGreatWork : 241884925,
    mStartContrib : 242324580,
    mStopContrib : 242324657
  },
  mResourcePanels : {
    mRoot : 242320692,
    mMainTitle : 242324860,
    mMainIcon : 242342501,
    mContentRoot : 242320681,
    mProgressBarRoot : 242321032,
    mProgressBarContainer : 242321174,
    mProgressBarForeground : 242323479,
    mStatusText : 248797471,
    mContribPanel : 242324553
  },
  mOperatingPanel : {
    mResources : 242485208,
    mBenefits : 242485227,
    mOperatingText : 242485343,
    mPlayingCityText : 248885767,
    mWorkingSpinner : 248873526,
    mStalledSpinner : 248873899,
    mPowerToggleContainer : 248876659,
    mPowerOnButton : 248876657,
    mPowerOffButton : 248876656,
    mMeterContainer : 253455128
  },
  mConstrPhase2 : {
    mLeftProgressBarPanel : 242425210,
    mRightProgressBarPanel : 242425350,
    mProgressBarRoot : 242321032,
    mProgressBarContainer : 242321174,
    mProgressBarForeground : 242323479,
    mProgressPercentText : 242864096,
    mStatusText : 242432207,
    mWorkerCountText : 242432207,
    mStalledText : 242859248,
    mConstructingText : 242859117,
    mConstructingSpinner : 248872080,
    mStalledSpinner : 248873152
  },
  mArcologyMeter : {
    populationText : 253457087,
    faceSlider : {},
    segmentBar : 246129002,
    segments : [0, 253289321, 253289323, 253289325, 253289326, 253289328, 253289330, 253289332, 253289334]
  },
  mResourceRowText : 242485758,
  mResourceRowIcon : 242483812
};
simcity.kLocaleResourcePanelStatusFull = new scrui.cLocaleString("RegionView.json", "0x0ed05415", "Full");
simcity.kLocaleResourcePanelStatusNeedsResources = new scrui.cLocaleString("RegionView.json", "0x0ed0541a", "Needs Resources");
simcity.BuildLayoutControlObject = function (a, b) {
  var c = Object.keys(b),
  d = {};
  d.mControl = a;
  for (var e = 0, f = c.length; e < f; e++)
    d[c[e]] = a.FindControlByID(b[c[e]]);
  return d
};
simcity.kGWLowerPanelLayouts = {
  mMiniResourcePanel : "Layouts/Region/GWConstructionUI_ResourcePanel.js",
  mStatusIcon : "Layouts/Region/TradeTokenStatusIcon.js",
  mOperatingResourceRow : "Layouts/Region/GWop_resource_row.js",
  mVertProgressBar : "Layouts/Region/ProgressBar_vertical.js",
  mGreatWorksCatelogItem : "Layouts/Region/GWLowerPanel_CatalogItem.js",
  mGreatWorksSellSheetData : "Layouts/Region/GWSellSheetData.js",
  mGreatWorksSellSheetDataItem : "Layouts/Region/GWSellSheetDataItem.js"
};
simcity.kGWCatelogItemUnlockEffect = 248542040;
simcity.cGreatWorksLowerPanelUI = function () {
  this.UIHandler = scrui.cUIHandler;
  this.UIHandler();
  this.mRegionViewUI = simcity.gGlobalUIHandler.mRegionViewUIHandler;
  this.mLowerPanel = {
    mControl : null,
    mGreatWorksTitle : null,
    mInnerPanelContainer : null,
    mInnerPanels : {
      mUnclaimed : {
        mControl : null
      },
      mPermitPhase : {
        mControl : null
      },
      mConstrPhase1 : {
        mControl : null
      },
      mConstrPhase2 : {
        mControl : null
      },
      mOperating : {
        mControl : null
      }
    },
    mArcologyMeter : {
      mMainControl : null,
      mPopulationText : null,
      mSegments : []
    }
  };
  this.mLocalUnitRef = this.mMainPanelState =
    null;
  this.mViewingGWBoxID = 0;
  this.mActiveRequirements = this.mActivePanel = null;
  this.mRequirementsPanels = [];
  this.mInPendingState = this.mGreatWorksChoicesContainer = this.mGreatWorksChooser = this.mCatalogItemContainer = this.mRolloverLayout = this.mRolloverContainer = this.mRegionViewItem = null;
  this.mTimeSinceLastUpdate = 0;
  this.mTotalArcologyLevels = 8
};
simcity.cGreatWorksLowerPanelUI.prototype.Init = function (a) {
  this.mRegionViewItem = a;
  this.mLowerPanel.mControl = gUIManager.FindControlByID(248180702);
  this.mLowerPanel.mControl.SetVisibility(!1);
  this.mGreatWorksChooser = this.mLowerPanel.mControl.FindControlByID(241892870);
  this.mGreatWorksChoicesContainer = this.mGreatWorksChooser.FindControlByID(248893071);
  this.mRolloverContainer = this.mGreatWorksChooser.FindControlByID(249402223);
  this.mRolloverLayout = gUIManager.LoadAndCacheLayout("Layouts/PaletteRolloverPreview.js",
      this.mRolloverContainer);
  this.mRolloverLayout.SetWidth(1.5 * this.mRolloverLayout.mWidth);
  this.mRolloverLayout.SetVisibility(!1);
  var b = this;
  simcity.gEventManager.AddEventListener(simcity.gEventTypes.MOUSEOVER, simcity.kGWLowerPanelIDs.mCatalogItem.container, function (a) {
    b.mCatalogItemContainer = a;
    b.ShowRollover(b.mRegionViewItem)
  });
  simcity.gEventManager.AddEventListener(simcity.gEventTypes.MOUSEOUT, simcity.kGWLowerPanelIDs.mCatalogItem.container, function () {
    b.HideRollover()
  });
  this.mLowerPanel.mInnerPanels.mUnclaimed.mControl =
    this.mLowerPanel.mControl.FindControlByID(simcity.kGWLowerPanelIDs.mMainPanels.mUnclaimed);
  this.mLowerPanel.mInnerPanels.mPermitPhase.mControl = this.mLowerPanel.mControl.FindControlByID(simcity.kGWLowerPanelIDs.mMainPanels.mPermitPhase);
  this.mLowerPanel.mInnerPanels.mConstrPhase1.mControl = this.mLowerPanel.mControl.FindControlByID(simcity.kGWLowerPanelIDs.mMainPanels.mConstrPhase1);
  this.mLowerPanel.mInnerPanels.mConstrPhase2.mControl = this.mLowerPanel.mControl.FindControlByID(simcity.kGWLowerPanelIDs.mMainPanels.mConstrPhase2);
  this.mLowerPanel.mInnerPanels.mOperating.mControl = this.mLowerPanel.mControl.FindControlByID(simcity.kGWLowerPanelIDs.mMainPanels.mOperating)
};
simcity.cGreatWorksLowerPanelUI.prototype.Update = function () {
  var a = this.mRegionViewUI.GetConnectedGWID(),
  b = this.mRegionViewUI.mRegionViewItems[a];
  if (this.mRegionViewUI.IsVisible() && b) {
    var c = this,
    d = this.mRegionViewUI.mRegionViewItems[a].mUnitRef;
    d && (a = [scrui.BuildRequestQuery(["units", d, "propKey"])], scrui.RequestGameData(a, function (a) {
        a[0] && a[0].instance && (c.mRegionViewUI.mRegionData.mGreatWorksLocal[d] && c.mRegionViewUI.mRegionData.mGreatWorksLocal[d].regionViewItem) && (c.mRegionViewUI.mRegionData.mGreatWorksLocal[d].regionViewItem.mUnitID =
            a[0].instance);
        c.mLowerPanel.mControl && c.mLowerPanel.mControl.mIsVisible && c.ShowGreatWorksLowerPanel(b);
        c.mTimeSinceLastUpdate = 0
      }))
  }
};
simcity.cGreatWorksLowerPanelUI.prototype.ShowGreatWorksLowerPanel = function (a) {
  this.HideGreatWorksChooser();
  this.mActivePanel && this.mActivePanel.SetVisibility(!0);
  if ((this.mRegionViewItem = a) && "greatwork" == this.mRegionViewItem.mViewUnitType)
    if ((this.mGWLocalInfo = this.mRegionViewItem ? this.mRegionViewItem.mDataBinding : null) && this.mGWLocalInfo.data)
      this.mGWData = this.mGWLocalInfo.data, this.mGWData.isSelected && 0 < this.mGWData.isSelected.amount || this.mGWData.greatWorksOperationalStage || null !== this.mInPendingState ?
      null !== this.mGWData.greatWorksOperationalStage ? (this.SetMainPanelState(simcity.kGWLowerPanelIDs.mMainPanels.mOperating), this.UpdateOperatingStatus()) : this.mGWData.constructionStage ? 1 === this.mGWData.constructionStage.amount ? (this.SetMainPanelState(simcity.kGWLowerPanelIDs.mMainPanels.mConstrPhase1), this.UpdateConstructionStatusP1()) : (this.SetMainPanelState(simcity.kGWLowerPanelIDs.mMainPanels.mConstrPhase2), this.UpdateConstructionStatusP2()) : (a = scrui.LocaleStringFromLocaleProperty(this.mGWData.name),
        this.mLowerPanel.mControl.FindControlByID(245165201).SetLocaleText(a), this.SetMainPanelState(simcity.kGWLowerPanelIDs.mMainPanels.mPermitPhase)) : this.mGWData.underConstruction || this.ShowGreatWorksChooser(this.mRegionViewItem)
};
simcity.cGreatWorksLowerPanelUI.prototype.HideGreatWorksLowerPanel = function () {
  this.mLowerPanel.mControl.SetVisibility(!1);
  this.mActivePanel && this.mActivePanel.SetVisibility(!1)
};
simcity.cGreatWorksLowerPanelUI.prototype.ShowJoinGreatWork = function () {
  this.mLowerPanel.mControl.SetVisibility(!0)
};
simcity.cGreatWorksLowerPanelUI.prototype.GetGWEnabledChoiceLayout = function () {
  for (var a = this.mGreatWorksChoicesContainer.mChildren || [], b = 0, c = simcity.GreatWorksSelectionChoices.length; b < c; ++b) {
    var d = a[b],
    e = d.FindControlByID(simcity.kGWLowerPanelIDs.mButtons.mSelectGreatWork);
    if (e && e.mIsVisible && e.mEnabled)
      return d
  }
};
simcity.cGreatWorksLowerPanelUI.prototype.ShowGreatWorksChooser = function (a) {
  this.mGreatWorksChooser.SetVisibility(!0);
  this.mLowerPanel.mControl.SetVisibility(!0);
  for (var b = this.mGreatWorksChoicesContainer.mChildren || [], c = simcity.GreatWorksSelectionChoices, d = 0, e = {
      argumentList : [this.mRegionViewItem ? this.mRegionViewItem.mUnitRef : null]
    }, f = 0, g = c.length; f < g; ++f) {
    var h = c[f],
    i = simcity.GreatWorksOptions[h],
    j = b[f];
    j || (j = gUIManager.LoadAndCacheLayout(simcity.kGWLowerPanelLayouts.mGreatWorksCatelogItem, this.mGreatWorksChoicesContainer));
    var k = j.FindControlByID(simcity.kGWCatelogItemUnlockEffect);
    k && !simcity.gGlobalUIHandler.mIsDemo && (this.DidThisGWUnlock(h) ? k.SetVisibility(!0) : k.SetVisibility(!1));
    j.FindControlByID(simcity.kGWLowerPanelIDs.mCatalogItem.container).mUserData = h;
    var l = j.FindControlByID(simcity.kGWLowerPanelIDs.mButtons.mSelectGreatWork);
    l.mUserData = h;
    i[0].hasOwnProperty("thumbnail") && j.FindControlByID(simcity.kGWLowerPanelIDs.mCatalogItem.thumbnail).SetWindowImage(i[0].thumbnail);
    var m = j.FindControlByID(simcity.kGWLowerPanelIDs.mCatalogItem.lockedImage);
    simcity.gGlobalUIHandler.mIsDemo && (j.FindControlByID(208).SetLocaleText(new scrui.cLocaleString("PaletteToolRollovers.json", "0x0f1a177b", "Not in Beta")), j.FindControlByID(253369746).SetLocaleText(new scrui.cLocaleString("PaletteToolRollovers.json", "0x0f1a177b", "Not in Beta")));
    a && !simcity.gGlobalUIHandler.mIsDemo ? (h = [], k = [], simcity.GenerateDataBindingQueries(i, h, e, k, !1), simcity.RequestDataBindingData(h, i, k, !1, function (a) {
        var b = i[0].test(a[0]),
        a = i[0].testbutton(a[0]);
        m.SetVisibility(!b && !simcity.gGlobalUIHandler.mIsDemo);
        l.SetEnabled(b && a && !simcity.gGlobalUIHandler.mIsDemo);
        (b = gUIManager.FindControlByID(173348034)) && (a ? b.SetTextColor("rgb(38,94,148)") : b.SetTextColor("rgb(200,0,0)"))
      })) : l.SetEnabled(!1);
    j.SetPosition(d, 0);
    d += j.mWidth
  }
};
simcity.cGreatWorksLowerPanelUI.prototype.HideGreatWorksChooser = function () {
  this.mGreatWorksChooser.SetVisibility(!1)
};
simcity.cGreatWorksLowerPanelUI.prototype.ChooseGreatWorks = function (a, b) {
  a && (this.mInPendingState = a.mRegionalBoxID, simcity.GreatWorksOptions[b.mUserData][0].onAccept(a.mUnitRef))
};
simcity.cGreatWorksLowerPanelUI.prototype.ShowRollover = function (a) {
  if (!this.mRolloverLayout.mIsVisible) {
    this.mRolloverLayout.DestroyControl();
    this.mRolloverLayout = gUIManager.LoadAndCacheLayout("Layouts/PaletteRolloverPreview.js", this.mRolloverContainer);
    this.mRolloverLayout.SetWidth(1.5 * this.mRolloverLayout.mWidth);
    var b = this.mCatalogItemContainer.mParentControl.GetAbsolutePosition()[0],
    c = this.mRolloverLayout.mWidth,
    d = scrui.GetClientWidth(),
    e = 0;
    b + c + this.mGreatWorksChoicesContainer.mLeft > d && (e = b + c -
        d + this.mGreatWorksChoicesContainer.mLeft, e += 10, (b = this.mRolloverLayout.FindControlByID(231594633)) && e && b.SetPosition(b.mLeft + e, b.mTop));
    var f = 0,
    e = this.mGreatWorksChoicesContainer.mLeft + this.mCatalogItemContainer.mParentControl.mLeft - e;
    this.mRolloverLayout.SetVisibility(!1);
    this.mRolloverLayout.SetVisibility(!0);
    var g = simcity.GreatWorksOptions[this.mCatalogItemContainer.mUserData];
    if (g && (this.mRolloverLayout.FindControlByID(simcity.cToolPaletteUIHandler.kTxtPaletteRolloverName).SetLocaleText(g[0].nameText),
        c = this.mRolloverLayout.FindControlByID(simcity.cToolPaletteUIHandler.kTxtPaletteRolloverDescription), b = this.mRolloverLayout.FindControlByID(simcity.cToolPaletteUIHandler.kWinContainerRolloverDescription), c.SetLocaleText(g[0].descriptionText), c = c.GetTextHeight(), b.SetHeight(c), b = this.mRolloverLayout.FindControlByID(simcity.cToolPaletteUIHandler.kWinPaletteRolloverMarqueeImage), b.mVerticalPinType = scrui.cControlBase.kPinLeft, g[0].hasOwnProperty("marqueeImage") && b.SetWindowImage(g[0].marqueeImage), this.mRolloverLayout.FindControlByID(simcity.kWinModulesFree).SetVisibility(!1),
        this.mRolloverLayout.FindControlByID(246655021).SetVisibility(!1), b = this.mRolloverLayout.FindControlByID(simcity.kGWLowerPanelIDs.mSellSheet.DataContainer), b = gUIManager.LoadAndCacheLayout(simcity.kGWLowerPanelLayouts.mGreatWorksSellSheetData, b), g[0].hasOwnProperty("benefitsArray") && (f += this.UpdateRolloverBenefits(g[0].benefitsArray, b, f)), g[0].hasOwnProperty("constructionMaterialsArray") && (f += this.UpdateRolloverConstructionMaterials(g[0].constructionMaterialsArray, b, f)), this.UpdateRolloverMaintenanceCost(g[0].maintenanceCost),
        a)) {
      var h = this,
      b = [],
      c = [];
      simcity.GenerateDataBindingQueries(g, b, {
        argumentList : [a.mUnitRef]
      }, c, !1);
      simcity.RequestDataBindingData(b, g, c, !1, function (a) {
        h.UpdateRolloverCost(a[0].money, a[0].cost);
        if (g[0].hasOwnProperty("getPrerequisiteList")) {
          a = g[0].getPrerequisiteList(a[0]);
          f = f + h.UpdateRolloverUnlockPrerequisites(a)
        }
      })
    }
    f += this.mRolloverLayout.mHeight;
    this.mRolloverLayout.SetPosition(e, -f, this.mRolloverLayout.mWidth, f)
  }
};
simcity.cGreatWorksLowerPanelUI.prototype.UpdateRolloverCost = function (a, b) {
  var c = this.mRolloverLayout.FindControlByID(simcity.cToolPaletteUIHandler.kTxtPaletteRolloverCost);
  0 < b ? (c.UpdateLocaleText({
      cost : b
    }), b >= a ? c.SetTextColor("red") : c.SetTextColor("#265e94")) : 0 === b ? c.SetLocaleText(new scrui.cLocaleString("PaletteToolRollovers.json", "0x0d96b40b", "PLACEHOLDER TEXT")) : -1 === b && c.SetLocaleText(new scrui.cLocaleString("PaletteToolRollovers.json", "0x0eb1f03b", "PLACEHOLDER TEXT"))
};
simcity.cGreatWorksLowerPanelUI.prototype.UpdateRolloverMaintenanceCost = function (a) {
  var b = this.mRolloverLayout.FindControlByID(simcity.cToolPaletteUIHandler.kTxtPaletteRolloverUpkeep);
  a ? 0 === a ? b.SetLocaleText(new scrui.cLocaleString("PaletteToolRollovers.json", "0x0d96b40c", "PLACEHOLDER TEXT")) : b.UpdateLocaleText({
    maintenance : a
  }) : b.SetVisibility(!1)
};
simcity.cGreatWorksLowerPanelUI.prototype.UpdateRolloverBenefits = function (a, b, c) {
  b = b.FindControlByID(simcity.kGWLowerPanelIDs.mSellSheet.benefitsContainer);
  b.SetPosition(0, c);
  var c = 0,
  d = a.length;
  if (0 < d) {
    b.SetVisibility(!0);
    for (var c = b.FindControlByID(simcity.kGWLowerPanelIDs.mSellSheet.benefitsTitle).mHeight, e = 0; e < d; e++)
      c += this.RolloverAppendSellSheetDataItem(a[e], b, c)
  }
  return c
};
simcity.cGreatWorksLowerPanelUI.prototype.UpdateRolloverConstructionMaterials = function (a, b, c) {
  b = b.FindControlByID(simcity.kGWLowerPanelIDs.mSellSheet.constructionMaterialsContainer);
  b.SetPosition(0, c);
  var c = 0,
  d = a.length;
  if (0 < d) {
    b.SetVisibility(!0);
    for (var c = b.FindControlByID(simcity.kGWLowerPanelIDs.mSellSheet.constructionMaterialsTitle).mHeight, e = 0; e < d; e++)
      c += this.RolloverAppendSellSheetDataItem(a[e], b, c)
  }
  return c
};
simcity.cGreatWorksLowerPanelUI.prototype.RolloverAppendSellSheetDataItem = function (a, b, c) {
  b = gUIManager.LoadAndCacheLayout(simcity.kGWLowerPanelLayouts.mGreatWorksSellSheetDataItem, b);
  b.SetPosition(0, c);
  c = b.FindControlByID(simcity.kGWLowerPanelIDs.mSellSheet.infoText);
  if (a.hasOwnProperty("localeObj")) {
    var d = 0;
    1 === a.resourceType ? d = simcity.FormatLargeNumberForTons(a.localeObj.objective_amount) : 2 === a.resourceType ? d = simcity.FormatLargeNumberForCrates(a.localeObj.objective_amount) : 3 === a.resourceType && (d =
          simcity.FormatLargeNumberForBarrels(a.localeObj.objective_amount));
    c.SetLocaleText(a.localeString, d)
  } else
    c.SetLocaleText(a.localeString);
  b.FindControlByID(simcity.kGWLowerPanelIDs.mSellSheet.infoIcon).SetWindowImage(a.icon);
  return b.mHeight
};
simcity.cGreatWorksLowerPanelUI.prototype.UpdateRolloverUnlockPrerequisites = function (a) {
  var b = this.mRolloverLayout.FindControlByID(simcity.cToolPaletteUIHandler.kWinPaletteRolloverLockedBackground),
  c = 0,
  d = a.length;
  if (0 < d) {
    for (var e = 0; e < d; e++) {
      var f = a[e],
      g = gUIManager.LoadAndCacheLayout("Layouts/Palette/ToolProgressBar.js", b),
      h = g.FindControlByID(simcity.cMissionUI.kTextObjective);
      f.hasOwnProperty("localeObj") ? h.SetLocaleText(f.localeString, f.localeObj) : h.SetLocaleText(f.localeString);
      g.FindControlByID(202394872).SetVisibility(f.hasBeenMet);
      g.FindControlByID(222882058).SetVisibility(!1);
      g.SetPosition(0, c);
      f = Math.floor(h.GetTextWidth() / h.mWidth);
      c += g.mHeight + f * g.mHeight
    }
    b.SetHeight(c)
  } else
    b.SetVisibility(!1);
  return c
};
simcity.cGreatWorksLowerPanelUI.prototype.HideRollover = function () {
  this.mRolloverLayout.SetVisibility(!1)
};
simcity.cGreatWorksLowerPanelUI.prototype.UpdateGreatWorksLowerPanel = function () {
  if (this.mRegionViewItem) {
    if ((this.mGWLocalInfo = this.mRegionViewItem ? this.mRegionViewItem.mDataBinding : null) && this.mGWLocalInfo.data)
      this.mGWData = this.mGWLocalInfo.data, this.mGWData.isSelected && 0 < this.mGWData.isSelected.amount && (null !== this.mGWData.greatWorksOperationalStage ? this.UpdateOperatingStatus() : this.mGWData.constructionStage && (1 === this.mGWData.constructionStage.amount ? this.UpdateConstructionStatusP1() : this.UpdateConstructionStatusP2()));
    this.mLowerPanel.mControl && (this.mGWLocalInfo && this.mGWLocalInfo.data) && (this.mGWData = this.mGWLocalInfo.data, this.mGWData.isSelected && 0 < this.mGWData.isSelected.amount && (null !== this.mGWData.greatWorksOperationalStage ? this.UpdateOperatingStatus() : this.mGWData.constructionStage && (1 === this.mGWData.constructionStage.amount ? this.UpdateConstructionStatusP1() : this.UpdateConstructionStatusP2())))
  }
};
simcity.cGreatWorksLowerPanelUI.prototype.SetMainPanelState = function (a) {
  this.mLowerPanel.mControl.SetVisibility(!0);
  if (a !== this.mMainPanelState) {
    for (var b = Object.keys(simcity.kGWLowerPanelIDs.mMainPanels), c = 0, d = b.length; c < d; c++) {
      var e = simcity.kGWLowerPanelIDs.mMainPanels[b[c]];
      this.mLowerPanel.mControl.FindControlByID(e).SetVisibility(!1)
    }
    c = 0;
    for (d = b.length; c < d; c++)
      if (e = simcity.kGWLowerPanelIDs.mMainPanels[b[c]]) {
        var f = this.mLowerPanel.mControl.FindControlByID(e);
        a == e ? (this.mActivePanel = f) ? (this.mActivePanel.SetVisibility(!0),
          this.mMainPanelState = a) : this.mActivePanel.SetVisibility(!1) : this.mLowerPanel.mInnerPanelContainer && f.SetVisibility(!1)
      }
  }
};
simcity.cGreatWorksLowerPanelUI.prototype.UpdateConstructionStatusP1 = function () {
  var a = this.mRegionViewItem,
  b = a.mDataBinding.data,
  c = a.mUnitRef;
  this.mActivePanel = this.mLowerPanel.mInnerPanels.mConstrPhase1.mControl;
  var d = this;
  if (c) {
    var e = b.constructionStage;
    (b = scrui.LocaleStringFromLocaleProperty(a.mUnitName)) && this.mActivePanel.FindControlByID(simcity.kGWLowerPanelIDs.mLowerPanelTitle).SetLocaleText(b);
    var b = new scrui.cLocaleString("RegionView.json", "0x0e9d184f", "Phase " + e.amount + " of " + e.capacity),
    e = {
      amount : e.amount,
      total : e.capacity
    },
    f = this.mActivePanel.FindControlByID(242161693);
    f.SetLocaleText(b);
    f.UpdateLocaleText(e);
    b = simcity.GreatWorksOptions[a.mDataBinding.data.unitID.instance];
    this.mLowerPanel.mControl.FindControlByID(248807076).SetWindowImage(b[0].headerIcon);
    b = this.mActivePanel.FindControlByID(simcity.kGWLowerPanelIDs.mConstructionText);
    e = new scrui.cLocaleString("RegionView.json", "0x0ed1a35d");
    b.SetLocaleText(e);
    if (a = a.mUnitID) {
      var b = !1,
      g = this.mActivePanel.FindControlByID(simcity.kGWLowerPanelIDs.mResourcePanelContainer);
      simcity.GreatWorksRequirements[a] !== this.mActiveRequirements && (this.mActiveRequirements = simcity.GreatWorksRequirements[a], b = !0);
      b && g.DestroyChildren();
      if (this.mActiveRequirements) {
        for (var h = this.mActiveRequirements.length, a = Array(h), i = {
            argumentLists : Array(h)
          }, e = b = 0; b < h; ++b) {
          f = this.mActiveRequirements[b].dataBinding;
          a[b] = f;
          var j = [c];
          2 === f.queries.length && j.push(e++);
          i.argumentLists[b] = j
        }
        c = [];
        b = [];
        d = this;
        simcity.GenerateDataBindingQueries(a, c, i, b, !1);
        simcity.RequestDataBindingData(c, a, b, !1, function (a) {
          for (var b =
              0; b < h; ++b) {
            var c = d.mActiveRequirements[b],
            e = c.title,
            f = a[b];
            if (f.resource) {
              e = new scrui.cLocaleString(e.mTableID, e.mStringID, "resource name");
              d.mRequirementsPanels[b] == null && (d.mRequirementsPanels[b] = gUIManager.LoadLayout(simcity.kGWLowerPanelLayouts.mMiniResourcePanel, g));
              var j = d.mRequirementsPanels[b];
              j.SetPosition(j.mWidth * (b - 2), 0);
              var o = j.FindControlByID(simcity.kGWLowerPanelIDs.mResourcePanels.mMainTitle);
              o && o.SetLocaleText(e, {
                objective_amount : ""
              });
              var r = j.FindControlByID(248805437),
              e = f.resource.amount,
              o = f.resource.capacity,
              s = d.mActiveRequirements[b].resourceType,
              t = e,
              u = o,
              v = "";
              if (s)
                if (s === 1) {
                  t = simcity.FormatLargeNumberForTons(e);
                  u = simcity.FormatLargeNumberForTons(o);
                  v = new scrui.cLocaleString("RegionView.json", "0x0f167049", "Tons")
                } else if (s === 2) {
                  t = simcity.FormatLargeNumberForCrates(e);
                  u = simcity.FormatLargeNumberForCrates(o);
                  v = new scrui.cLocaleString("RegionView.json", "0x0f167056", "Crates")
                } else if (s === 3) {
                  t = simcity.FormatLargeNumberForBarrels(e);
                  u = simcity.FormatLargeNumberForBarrels(o);
                  v = new scrui.cLocaleString("RegionView.json",
                      "0x0f167066", "Barrels")
                }
              v.LoadString(function () {
                r.SetRawText(scrui.LocalizeNumber(t.number) + t.exponent + "/" + scrui.LocalizeNumber(u.number) + u.exponent + " " + v.GetText())
              });
              j.FindControlByID(simcity.kGWLowerPanelIDs.mResourcePanels.mMainIcon).SetWindowImage(c.icon);
              var x = f.resource.amount / f.resource.capacity,
              f = j.FindControlByID(simcity.kGWLowerPanelIDs.mResourcePanels.mProgressBarForeground),
              e = j.FindControlByID(simcity.kGWLowerPanelIDs.mResourcePanels.mProgressBarContainer);
              f.SetPosition(f.mTop, f.mLeft,
                f.mWidth, x > 0 ? e.mHeight - e.mHeight * x : e.mHeight);
              f = j.FindControlByID(simcity.kGWLowerPanelIDs.mResourcePanels.mStatusText);
              x == 1 ? f.SetLocaleText(simcity.kLocaleResourcePanelStatusFull) : f.SetLocaleText(simcity.kLocaleResourcePanelStatusNeedsResources);
              var w = c.dataBindingSignup;
              if (w && w.queries) {
                c = [w];
                f = [];
                e = [];
                simcity.GenerateDataBindingQueries(c, f, i, e, false);
                simcity.RequestDataBindingData(f, c, e, false, function (a) {
                  w.update(a);
                  var a = w.data,
                  b = j.FindControlByID(simcity.kGWLowerPanelIDs.mButtons.mStartContrib),
                  c = j.FindControlByID(simcity.kGWLowerPanelIDs.mButtons.mStopContrib);
                  b.mDatabinding = c.mDatabinding = w;
                  if (a.hasToggle && x !== 1)
                    if (a.signup && a.signup.amount == a.signup.capacity) {
                      b.SetVisibility(false);
                      c.SetVisibility(true)
                    } else {
                      b.SetVisibility(true);
                      c.SetVisibility(false)
                    }
                  else {
                    b.SetVisibility(false);
                    c.SetVisibility(false)
                  }
                })
              }
            }
          }
        })
      }
    }
  }
};
simcity.cGreatWorksLowerPanelUI.prototype.UpdateConstructionStatusP2 = function () {
  var a = this.mRegionViewItem,
  b = a.mUnitRef;
  this.mActivePanel = this.mLowerPanel.mInnerPanels.mConstrPhase2.mControl;
  if (b) {
    (b = scrui.LocaleStringFromLocaleProperty(a.mUnitName)) && this.mActivePanel.FindControlByID(simcity.kGWLowerPanelIDs.mLowerPanelTitle).SetLocaleText(b);
    var b = a.mUnitID,
    c = a.mDataBinding.data,
    d = c.constructionStage,
    e = c.missionProgress,
    f = simcity.GreatWorksOptions[a.mDataBinding.data.unitID.instance],
    a = this.mLowerPanel.mControl.FindControlByID(248807076);
    a.SetWindowImage(f[0].headerIcon);
    a = new scrui.cLocaleString("RegionView.json", "0x0e9d184f", "Phase " + d.amount + " of " + d.capacity);
    d = {
      amount : d.amount,
      total : d.capacity
    };
    f = this.mActivePanel.FindControlByID(simcity.kGWLowerPanelIDs.mContextPanel.mPhaseText);
    f.SetLocaleText(a);
    f.UpdateLocaleText(d);
    a = this.mActivePanel.FindControlByID(simcity.kGWLowerPanelIDs.mConstructionText);
    d = new scrui.cLocaleString("RegionView.json", "0x0ed1a367");
    a.SetLocaleText(d);
    a = this.mActivePanel.FindControlByID(simcity.kGWLowerPanelIDs.mConstrPhase2.mRightProgressBarPanel);
    300 > c.regionalConstructionWorkersTotal.amount ? (this.mActivePanel.FindControlByID(simcity.kGWLowerPanelIDs.mConstrPhase2.mStalledText).SetVisibility(!0), this.mActivePanel.FindControlByID(simcity.kGWLowerPanelIDs.mConstrPhase2.mConstructingText).SetVisibility(!1), this.mActivePanel.FindControlByID(simcity.kGWLowerPanelIDs.mConstrPhase2.mStalledSpinner).SetVisibility(!0), this.mActivePanel.FindControlByID(simcity.kGWLowerPanelIDs.mConstrPhase2.mConstructingSpinner).SetVisibility(!1)) : (this.mActivePanel.FindControlByID(simcity.kGWLowerPanelIDs.mConstrPhase2.mStalledText).SetVisibility(!1),
      this.mActivePanel.FindControlByID(simcity.kGWLowerPanelIDs.mConstrPhase2.mConstructingText).SetVisibility(!0), this.mActivePanel.FindControlByID(simcity.kGWLowerPanelIDs.mConstrPhase2.mStalledSpinner).SetVisibility(!1), this.mActivePanel.FindControlByID(simcity.kGWLowerPanelIDs.mConstrPhase2.mConstructingSpinner).SetVisibility(!0));
    300 < c.regionalConstructionWorkersTotal.amount && (c.regionalConstructionWorkersTotal.amount = 300);
    this.mActivePanel.FindControlByID(simcity.kGWLowerPanelIDs.mConstrPhase2.mWorkerCountText).UpdateLocaleText({
      amount : c.regionalConstructionWorkersTotal.amount,
      capacity : 300
    });
    c = 10 * (e.amount / e.capacity);
    0 === c && (c = 0.0010);
    e = a.FindControlByID(simcity.kGWLowerPanelIDs.mConstrPhase2.mProgressBarForeground);
    a = a.FindControlByID(simcity.kGWLowerPanelIDs.mConstrPhase2.mProgressBarContainer);
    a = Math.round(0 < c ? a.mWidth * c : 0);
    e.SetPosition(e.mTop, e.mLeft, a);
    this.mActivePanel.FindControlByID(simcity.kGWLowerPanelIDs.mConstrPhase2.mProgressPercentText).SetRawText(Math.round(100 * c) + "%");
    if (b && (d = this.mActivePanel.FindControlByID(simcity.kGWLowerPanelIDs.mConstrPhase2.mLeftProgressBarPanel),
        simcity.GreatWorksRequirements[b] !== this.mActiveRequirements && (this.mActiveRequirements = simcity.GreatWorksRequirements[b]), d.DestroyChildren(), this.mActiveRequirements)) {
      b = 2;
      for (f = this.mActiveRequirements.length; b < f; ++b) {
        var e = this.mActiveRequirements[b],
        g = gUIManager.LoadLayout(simcity.kGWLowerPanelLayouts.mVertProgressBar, d);
        g.SetPosition(g.mWidth * (b - 2), 0, g.mWidth, d.mHeight);
        a = null;
        switch (b - 2) {
        case 0:
          a = d.mParentControl.FindControlByID(250197355);
          break;
        case 1:
          a = d.mParentControl.FindControlByID(250197353);
          break;
        case 2:
          a = d.mParentControl.FindControlByID(250197351)
        }
        a && a.SetWindowImage(e.icon);
        e = g.FindControlByID(simcity.kGWLowerPanelIDs.mResourcePanels.mProgressBarForeground);
        a = g.FindControlByID(simcity.kGWLowerPanelIDs.mResourcePanels.mProgressBarContainer);
        e.SetPosition(e.mTop, e.mLeft, e.mWidth, 0 < c ? a.mHeight * c : a.mHeight)
      }
    }
  }
};
simcity.cGreatWorksLowerPanelUI.prototype.UpdateOperatingStatus = function () {
  var a = this.mRegionViewItem,
  b = a.mDataBinding.data,
  c = a.mUnitRef;
  this.mActivePanel = this.mLowerPanel.mInnerPanels.mOperating.mControl;
  if (c && (c = null, (c = b.unitID && 4260807725 == b.unitID.instance ? new scrui.cLocaleString("Missions.json", "0x0edd9e98", "Space Center") : scrui.LocaleStringFromLocaleProperty(a.mUnitName)) && this.mActivePanel.FindControlByID(simcity.kGWLowerPanelIDs.mLowerPanelTitle).SetLocaleText(c), this.mActivePanel.FindControlByID(simcity.kGWLowerPanelIDs.mOperatingPanel.mPlayingCityText).UpdateLocaleText({
        cityname : this.mRegionViewUI.mRegionData.mPlayingBox.name
      }),
      b)) {
    var a = this.mActivePanel.FindControlByID(simcity.kGWLowerPanelIDs.mOperatingPanel.mOperatingText),
    d = this.mActivePanel.FindControlByID(simcity.kGWLowerPanelIDs.mOperatingPanel.mResources),
    e = this.mActivePanel.FindControlByID(simcity.kGWLowerPanelIDs.mOperatingPanel.mBenefits);
    d.DestroyChildren();
    e.DestroyChildren();
    var f = this.mActivePanel.FindControlByID(simcity.kGWLowerPanelIDs.mOperatingPanel.mPowerToggleContainer),
    g = this.mActivePanel.FindControlByID(simcity.kGWLowerPanelIDs.mOperatingPanel.mMeterContainer);
    if (b.unitID) {
      c = !1;
      switch (b.unitID.instance) {
      case 402558903:
        c = this.UpdateOperatingSolarFarm(a, d, e, f, b);
        break;
      case 1799192827:
        c = this.UpdateOperatingInternationalAirport(a, d, e, f, b);
        break;
      case 4260807725:
        c = this.UpdateOperatingSpaceCenter(a, d, e, f, b);
        break;
      case 65886006:
        c = this.UpdateOperatingArcology(a, d, e, f, b)
      }
      65886006 == b.unitID.instance ? g.SetVisibility(!0) : g.SetVisibility(!1);
      b = this.mActivePanel.FindControlByID(simcity.kGWLowerPanelIDs.mOperatingPanel.mWorkingSpinner);
      d = this.mActivePanel.FindControlByID(simcity.kGWLowerPanelIDs.mOperatingPanel.mStalledSpinner);
      c ? (a.SetTextColor("rgb(200,0,0)"), b.SetVisibility(!1), d.SetVisibility(!0)) : (a.SetTextColor("rgb(0,150,0)"), b.SetVisibility(!0), d.SetVisibility(!1))
    }
  }
};
simcity.cGreatWorksLowerPanelUI.prototype.AppendOperatingInfo = function (a, b, c, d, e) {
  var a = gUIManager.LoadAndCacheLayout(simcity.kGWLowerPanelLayouts.mOperatingResourceRow, a),
  f = a.FindControlByID(simcity.kGWLowerPanelIDs.mResourceRowText);
  c ? f.SetLocaleText(b, c) : f.SetLocaleText(b);
  a.FindControlByID(simcity.kGWLowerPanelIDs.mResourceRowIcon).SetWindowImage(d);
  a.SetPosition(0, e);
  return a.mHeight + e
};
simcity.cGreatWorksLowerPanelUI.prototype.UpdateOperatingSolarFarm = function (a, b, c, d, e) {
  var f = !0;
  1 == e.bypassOperational.amount && 0 == e.closedByMission.amount ? a.SetLocaleText(new scrui.cLocaleString("RegionView.json", "0x0e5f1134", "working - cheated")) : 0 == e.activeBuilding.amount && 0 == e.closedByMission.amount ? a.SetLocaleText(new scrui.cLocaleString("RegionView.json", "0x0ef15aa6", "needs workers")) : 1 == e.closedByMission.amount ? a.SetLocaleText(new scrui.cLocaleString("RegionView.json", "0x0e598d65", "mission closure - fire")) :
  (f = !1, a.SetLocaleText(new scrui.cLocaleString("RegionView.json", "0x0e1258ef", "working")));
  d.SetVisibility(!0);
  a = d.FindControlByID(simcity.kGWLowerPanelIDs.mOperatingPanel.mPowerOnButton);
  d = d.FindControlByID(simcity.kGWLowerPanelIDs.mOperatingPanel.mPowerOffButton);
  0 < e.powerToggle.amount && !f ? (a.SetVisibility(!0), d.SetVisibility(!1)) : (a.SetVisibility(!1), d.SetVisibility(!0));
  a.SetEnabled(!f);
  d.SetEnabled(!f);
  d = 300 >= e.workersUpkeep.amount ? e.workersUpkeep.amount : 300;
  this.AppendOperatingInfo(b, new scrui.cLocaleString("RegionView.json",
      "0x0e7d5ad0", "Workers: x"), {
    workersUpkeep : d
  }, "TradeIcons/icn-trade-workers.png", 0);
  b = simcity.FormatLargeNumberForPower(e.powerUsed.amount);
  this.AppendOperatingInfo(c, new scrui.cLocaleString("RegionView.json", "0x0e7d5ad1", "Power: x"), {
    powerGenerated : e.powerGenerated.amount / 1E3,
    power_rate : b.number,
    exponent : b.exponent
  }, "TradeIcons/icn-trade-power.png", 0);
  return f
};
simcity.cGreatWorksLowerPanelUI.prototype.HandlePowerButtonToggle = function () {
  if (this.mRegionViewItem) {
    var a = this.mRegionViewItem.mDataBinding.data;
    a.unitID && 402558903 == a.unitID.instance && simcity.CreateUnitCloseby("GreatWorks_ToggleSolarFarmPower", this.mRegionViewItem.mUnitRef)
  }
};
simcity.cGreatWorksLowerPanelUI.prototype.UpdateOperatingInternationalAirport = function (a, b, c, d, e) {
  d.SetVisibility(!1);
  d = !0;
  1 == e.bypassOperational.amount && 0 == e.closedByMission.amount ? a.SetLocaleText(new scrui.cLocaleString("RegionView.json", "0x0e5f1134", "working - cheated")) : 0 == e.activeBuilding.amount && 0 == e.closedByMission.amount ? a.SetLocaleText(new scrui.cLocaleString("RegionView.json", "0x0ef15aa6", "needs workers")) : 0 == e.powerOperational.amount && 0 == e.closedByMission.amount ? a.SetLocaleText(new scrui.cLocaleString("RegionView.json",
      "0x0e125921", "needs power")) : 100 > e.touristRating.amount && 0 == e.closedByMission.amount ? a.SetLocaleText(new scrui.cLocaleString("RegionView.json", "0x0e125923", "low attraction")) : 1 == e.closedByMission.amount ? a.SetLocaleText(new scrui.cLocaleString("RegionView.json", "0x0e5c82fa", "mission closure - crime")) : (d = !1, a.SetLocaleText(new scrui.cLocaleString("RegionView.json", "0x0e1258ef", "working")));
  var a = 300 >= e.workersUpkeep.amount ? e.workersUpkeep.amount : 300,
  a = this.AppendOperatingInfo(b, new scrui.cLocaleString("RegionView.json",
        "0x0e7d5ad0", "Workers: x"), {
      workersUpkeep : a
    }, "TradeIcons/icn-trade-workers.png", 0),
  f = simcity.FormatLargeNumberForPower(e.powerUpkeep.amount),
  a = this.AppendOperatingInfo(b, new scrui.cLocaleString("RegionView.json", "0x0e7d5aba", "Power: x of y"), {
      powerUpkeep : f.number,
      exponent : f.exponent,
      powerNeeded : 100
    }, "TradeIcons/icn-trade-power.png", a);
  this.AppendOperatingInfo(b, new scrui.cLocaleString("RegionView.json", "0x0f2390ac", "Tourists: x of y"), {
    tourists : e.touristW2.amount + e.touristW3.amount,
    capacity : e.potentialTouristW2.amount +
    e.potentialTouristW3.amount
  }, "TradeIcons/icn-trade-tourism.png", a);
  a = this.AppendOperatingInfo(c, new scrui.cLocaleString("RegionView.json", "0x0ef162b0", "Tourist W2: x"), {
      touristsGenerated : e.touristW2.amount
    }, "TradeIcons/icn-trade-tourism.png", 0);
  a = this.AppendOperatingInfo(c, new scrui.cLocaleString("RegionView.json", "0x0ef162b3", "Tourist W3: x"), {
      touristsGenerated : e.touristW3.amount
    }, "TradeIcons/icn-trade-tourism.png", a);
  this.AppendOperatingInfo(c, new scrui.cLocaleString("RegionView.json", "0x0ef160e3",
      "Freight: x/y"), {
    freight : e.freight.amount,
    capacity : 3240
  }, "TradeIcons/icn-trade-freight.png", a);
  return d
};
simcity.cGreatWorksLowerPanelUI.prototype.UpdateOperatingSpaceCenter = function (a, b, c, d, e) {
  d.SetVisibility(!1);
  d.SetVisibility(!1);
  d = !0;
  1 == e.bypassOperational.amount && 0 == e.closedByMission.amount ? a.SetLocaleText(new scrui.cLocaleString("RegionView.json", "0x0e5f1134", "working - cheated")) : 0 == e.activeBuilding.amount && 0 == e.closedByMission.amount ? a.SetLocaleText(new scrui.cLocaleString("RegionView.json", "0x0ef15aa6", "needs workers")) : 0 == e.powerOperational.amount && 0 == e.closedByMission.amount ? a.SetLocaleText(new scrui.cLocaleString("RegionView.json",
      "0x0e125921", "needs power")) : 1 == e.closedByMission.amount ? a.SetLocaleText(new scrui.cLocaleString("RegionView.json", "0x0e5c82fa", "mission closure - crime")) : (d = !1, a.SetLocaleText(new scrui.cLocaleString("RegionView.json", "0x0e1258ef", "working")));
  var a = this.mActivePanel.FindControlByID(255886343),
  f = this.mActivePanel.FindControlByID(255892403),
  g = 0;
  a.SetVisibility(!1);
  f.SetVisibility(!1);
  a && (a.SetVisibility(!0), 1 == e.spaceCenterOperatingPhase.amount ? (f = new scrui.cLocaleString("regionView.json", "0x0e9d1f53",
          "Launch"), g = e.spaceCenterLaunchTimer.amount, f.LoadString(), a.SetLocaleText(new scrui.cLocaleString("textFeedbackToyRollover.json", "0x0e72f0f0", "~Event~ starts in ~num~ hours"), {
        event : f.mRawString,
        num : g
      })) : (f.SetVisibility(!0), g = (96 - e.spaceCenterConstructionTimer.amount) / 2, a.SetLocaleText(new scrui.cLocaleString("regionView.json", "0x0e7ab1b1", "xBuilding Satellite")), f.SetLocaleText(new scrui.cLocaleString("missions.json", "0x0cb66b8b", "xYou have 99 hours left"), {
        current_time : g
      })));
  a = 300 >= e.workersUpkeep.amount ?
    e.workersUpkeep.amount : 300;
  a = this.AppendOperatingInfo(b, new scrui.cLocaleString("RegionView.json", "0x0e7d5ad0", "Workers: x"), {
      workersUpkeep : a
    }, "TradeIcons/icn-trade-workers.png", 0);
  g = simcity.FormatLargeNumberForPower(e.powerUpkeep.amount);
  this.AppendOperatingInfo(b, new scrui.cLocaleString("RegionView.json", "0x0e7d5aba", "Power: x of y"), {
    powerUpkeep : g.number,
    exponent : g.exponent,
    powerNeeded : 100
  }, "TradeIcons/icn-trade-power.png", a);
  b = e.spaceCenterTouristW1.amount + e.spaceCenterTouristW2.amount + e.spaceCenterTouristW3.amount;
  a = this.AppendOperatingInfo(c, new scrui.cLocaleString("RegionView.json", "0x0e7d5ad2", "Tourists : x"), {
      touristsGenerated : b
    }, "TradeIcons/icn-trade-tourism.png", 0);
  this.AppendOperatingInfo(c, new scrui.cLocaleString("resources.json", "0x0ec83f87", "Tech Level"), null, "balloonIcons/icn-balloons-tech-level3.png", a);
  return d
};
simcity.cGreatWorksLowerPanelUI.prototype.UpdateOperatingArcology = function (a, b, c, d, e) {
  d.SetVisibility(!1);
  d = !0;
  0 == e.powerOperational.amount ? a.SetLocaleText(new scrui.cLocaleString("RegionView.json", "0x0e125921", "needs power")) : 0 == e.waterOperational.amount ? a.SetLocaleText(new scrui.cLocaleString("RegionView.json", "0x0e212f83", "needs water")) : 1 == e.closedByMission.amount ? a.SetLocaleText(new scrui.cLocaleString("RegionView.json", "0x0ef17607", "Plague")) : (d = !1, a.SetLocaleText(new scrui.cLocaleString("RegionView.json",
        "0x0e1258ef", "working")));
  var a = e.workersW1.amount + e.workersW2.amount + e.workersW3.amount,
  f = e.shoppersW1.amount + e.shoppersW2.amount + e.shoppersW3.amount,
  g = simcity.GreatWorkArcology.benefitsArray,
  h = 0,
  i = simcity.FormatLargeNumberForPower(e.powerUpkeep.amount),
  h = this.AppendOperatingInfo(b, new scrui.cLocaleString("RegionView.json", "0x0e7d5aba", "Power: x of y"), {
      powerUpkeep : i.number,
      exponent : i.exponent,
      powerNeeded : 300
    }, "TradeIcons/icn-trade-power.png", h),
  i = simcity.FormatLargeNumberForFluid(e.waterUpkeep.amount);
  this.AppendOperatingInfo(b, new scrui.cLocaleString("RegionView.json", "0x0e7d5ab8", "Water: x of y"), {
    waterUpkeep : i.number,
    exponent : i.exponent,
    waterNeeded : 120
  }, "TradeIcons/icn-trade-water.png", h);
  h = this.AppendOperatingInfo(c, new scrui.cLocaleString("RegionView.json", "0x0e7d5ac9", "Shoppers: x"), {
      shoppersGenerated : f
    }, g[0].icon, 0);
  h = this.AppendOperatingInfo(c, new scrui.cLocaleString("RegionView.json", "0x0e7d5abc", "Workers: x"), {
      workersGenerated : a
    }, g[1].icon, h);
  this.AppendOperatingInfo(c, new scrui.cLocaleString("RegionView.json",
      "0x0ef160e4", "Students: x"), {
    studentsGenerated : e.kidsToSend.amount
  }, g[2].icon, h);
  this.UpdateArcologyMeter(simcity.GetFudgedPopulation(e.population.amount), e.level.amount);
  return d
};
simcity.cGreatWorksLowerPanelUI.prototype.UpdateArcologyMeter = function (a, b) {
  var c = simcity.kGWLowerPanelIDs.mArcologyMeter.segments.length;
  if (null === this.mLowerPanel.mArcologyMeter.mPopulationText) {
    this.mLowerPanel.mArcologyMeter.mPopulationText = this.mActivePanel.FindControlByID(simcity.kGWLowerPanelIDs.mArcologyMeter.populationText);
    for (var d = 1; d < c; d++)
      this.mLowerPanel.mArcologyMeter.mSegments[d] = this.mActivePanel.FindControlByID(simcity.kGWLowerPanelIDs.mArcologyMeter.segments[d])
  }
  this.mLowerPanel.mArcologyMeter.mPopulationText.SetLocaleText(new scrui.cLocaleString("RegionView.json",
      "0x0e2a29ee", "Polulation: x"), {
    population : a
  });
  for (d = 1; d < c; d++) {
    var e = d,
    f = b,
    g = this.mLowerPanel.mArcologyMeter.mSegments[e],
    h = g.mChildren[3],
    g = g.mChildren[1];
    f < e ? (h.SetVisibility(!1), g.SetVisibility(!1)) : (f == e ? h.SetVisibility(!0) : h.SetVisibility(!1), g.SetVisibility(!0))
  }
};
simcity.cGreatWorksLowerPanelUI.prototype.DidThisGWUnlock = function (a) {
  var b = this.mRegionViewUI.GetGWUnlocked();
  return b && !simcity.gGlobalUIHandler.mIsDemo && (a == simcity.kGreatWorksID_SolarFarm_n && b == simcity.kEventIDSolarFarmUnlockedLocal || a == simcity.kGreatWorksID_InternationalAirport_n && b == simcity.kEventIDInternationalAirportUnlockedLocal || a == simcity.kGreatWorksID_SpaceCenter_n && b == simcity.kEventIDSpaceCenterUnlockedLocal || a == simcity.kGreatWorksID_Arcology_n && b == simcity.kEventIDArcologyUnlockedLocal) ?
  !0 : !1
};
simcity.cGreatWorksLowerPanelUI.prototype.GetPhaseDetails = function () {
  var a = this.mRegionViewItem;
  return a && a.mDataBinding ? a.mDataBinding.data : null
};
simcity.AchievementsUI = {};
simcity.cAchievementsUIHandler = function () {
  this.UIHandler = scrui.cUIHandler;
  this.UIHandler();
  this.mPopup = this.mAchievementManager = this.mAchievementUILayout = this.mParentControl = null;
  this.mPageIDs = {
    CHALLENGE_ACHIVEMENTS_LABEL : 243028220,
    ACHIEVEMENT_TILE_BUTTON : 239917905,
    ACHIEVEMENT_NAME : 239800421,
    ACHIEVEMENT_DESCRIPTION : 250193224,
    ACHIEVEMENT_IMAGE : 239800486,
    CATEGORY_LABEL : 250193372,
    CATEGORY_COMPLETION : 250193376
  };
  this.mImagePaths = {
    LOCKED_ACHIEVEMENT_IMAGE : "Graphics/Achievements/icn-achievements-medalion-silver.png"
  };
  this.mPageLayouts = {
    ACHIEVEMENT_TILE : "Layouts/Profile_AchievementTile.js",
    ACHIEVEMENT_TILE_LOCKED : "Layouts/Profile_AchievementTile_Locked.js",
    ACHIEVEMENT_CATEGORY : "Layouts/Profile_Achievements_CategoryHeader.js"
  };
  this.mCategoryLabels = {
    CHALLENGE_ACHIEVEMENT_LABEL_Text : null
  }
};
goog.inherits(simcity.cAchievementsUIHandler, scrui.cUIHandler);
simcity.cAchievementsUIHandler.kBtnIDClose = 243435242;
simcity.cAchievementsUIHandler.kScrollingContainer = 239723576;
simcity.cAchievementsUIHandler.kTileTopPadding = 0;
simcity.cAchievementsUIHandler.kTileLeftPadding = 0;
simcity.cAchievementsUIHandler.kPaddingAboveCategory = 10;
simcity.cAchievementsUIHandler.kAchievementCategoryProgress = new scrui.cLocaleString("GameEntry.json", "0x0ee9bb97");
simcity.cAchievementsUIHandler.kSecretUnlockedAchievementDescr = new scrui.cLocaleString("GameEntry.json", "0x0f2b95b4");
simcity.cAchievementsUIHandler.prototype.Init = function (a) {
  scrui.Assert(null !== a);
  this.mParentControl = a;
  this.mAchievementUILayout = gUIManager.LoadLayout("Layouts/GlobalUI/AchievementsLayout.js", this.mParentControl);
  this.mCategoryLabels.CHALLENGE_ACHIEVEMENT_LABEL_TEXT = this.mAchievementUILayout.FindControlByID(this.mPageIDs.CHALLENGE_ACHIVEMENTS_LABEL)
};
simcity.cAchievementsUIHandler.prototype.HandleUIMessage = function (a, b, c) {
  scrui.cUIHandler.prototype.HandleUIMessage.call(this, a, b, c);
  switch (a) {
  case scrui.kMsgTypeButtonClicked:
    switch (b) {
    case simcity.cAchievementsUIHandler.kBtnIDClose:
      this.Hide()
    }
  }
};
simcity.cAchievementsUIHandler.prototype.Show = function () {
  this.mAchievementUILayout.SetVisibility(!0);
  this.LoadAchievements()
};
simcity.cAchievementsUIHandler.prototype.Hide = function () {
  simcity.gEventManager.RemoveEventListener(simcity.gEventTypes.CLICK, this.mPageIDs.ACHIEVEMENT_TILE_BUTTON);
  this.mAchievementUILayout.SetVisibility(!1)
};
simcity.cAchievementsUIHandler.prototype.IsShowing = function () {
  return this.mAchievementUILayout.IsControlVisible()
};
simcity.cAchievementsUIHandler.prototype.SetAchievementManager = function (a) {
  this.mAchievementManager = a;
  var b = this;
  this.mAchievementManager.SetShowCallback(function () {
    b.Show()
  })
};
simcity.cAchievementsUIHandler.prototype.LoadAchievements = function (a) {
  var b = this;
  this.mAchievementManager.GetAchievements(a, function (a) {
    var d = b.mAchievementUILayout.FindControlByID(simcity.cAchievementsUIHandler.kScrollingContainer);
    d.DestroyChildren();
    b.LoadAchivementTiles(a, d, simcity.cAchievementsUIHandler.kTileLeftPadding, simcity.cAchievementsUIHandler.kTileTopPadding)
  }, function () {})
};
simcity.cAchievementsUIHandler.prototype.LoadAchivementTiles = function (a, b, c, d, e) {
  if (a) {
    for (var f = this.mPageIDs, g, h = c, i = 0; i < a.length; ++i) {
      var j = a[i],
      k = scrui.ParseLocaleString(j.label),
      l = j.achievements ? j.achievements : [],
      m = "Secret" === j.id,
      n = gUIManager.LoadAndCacheLayout(this.mPageLayouts.ACHIEVEMENT_CATEGORY, b),
      c = h,
      d = d + simcity.cAchievementsUIHandler.kPaddingAboveCategory;
      n.SetPosition(c, d);
      var d = d + n.mHeight,
      p = simcity.cAchievementsUIHandler.kAchievementCategoryProgress;
      n.FindControlByID(f.CATEGORY_COMPLETION).SetLocaleText(p, {
        numAchieved : j.numUnlocked,
        total : l.length
      });
      n.FindControlByID(f.CATEGORY_LABEL).SetLocaleText(k);
      for (j = 0; j < l.length; j++)
        (p = l[j], k = p.isUnlocked || e ? gUIManager.LoadAndCacheLayout(this.mPageLayouts.ACHIEVEMENT_TILE, b) : gUIManager.LoadAndCacheLayout(this.mPageLayouts.ACHIEVEMENT_TILE_LOCKED, b), k.SetPosition(c, d), g || (g = Math.floor(b.mWidth / k.mWidth)), e ? (k.FindControlByID(f.ACHIEVEMENT_NAME).SetRawText(p.name), k.FindControlByID(f.ACHIEVEMENT_DESCRIPTION).SetRawText(""), k.FindControlByID(f.ACHIEVEMENT_IMAGE).SetWindowImage(p.image)) :
          (n = p.Icon, k.FindControlByID(f.ACHIEVEMENT_NAME).SetLocaleText(scrui.ParseLocaleString(p.Name)), m && !p.isUnlocked ? k.FindControlByID(f.ACHIEVEMENT_DESCRIPTION).SetLocaleText(simcity.cAchievementsUIHandler.kSecretUnlockedAchievementDescr) : (p = scrui.ParseLocaleStringWithValues(p.Desc), k.FindControlByID(f.ACHIEVEMENT_DESCRIPTION).SetLocaleText(p.text, p.tokens)), k.FindControlByID(f.ACHIEVEMENT_IMAGE).SetWindowImage(n)), 0 != (j + 1) % g && j != l.length - 1) ? c += k.mWidth : (c = h, d += k.mHeight)
    }
    return d
  }
};
simcity.cAchievementsUIHandler.prototype.OnMouseMove = function () {};
simcity.ErrorDialog = {};
simcity.gErrorDialog = function (a) {
  simcity.gDialog.call(this, a);
  this.mPageIDs = {
    MODAL_SCREEN : 240322066,
    MODAL_WINDOW : 226514731,
    MODAL_TITLE : 226515471,
    MODAL_MESSAGE : 226515502,
    MODAL_CLOSE_BUTTON : 226514822,
    MODAL_CUSTOM_CONTENT : 243597719,
    BUTTON_TEXT : 240592932,
    BUSY_WINDOW : 226585381,
    BUSY_TEXT : 226585400
  };
  this.mButtonIds = [250102232, 250102202];
  this.mControlIds = {
    ERROR_MSG_TEXT : 245525309,
    ERROR_MORE_INFO_LINK : 245526948
  };
  this.mPageLayouts = {
    ERROR_CONTENT_WINDOW : "Layouts/Updater/ErrorWindow.js"
  };
  this.mIsMsgTextSelectable =
    !0;
  this.mKnowledgeServiceUrl = null
};
goog.inherits(simcity.gErrorDialog, simcity.gDialog);
simcity.gErrorDialog.prototype.ShowPrompt = function (a) {
  if (!a.contentFunc && a.showMoreInfoLink) {
    var b = this;
    a.contentFunc = function (c) {
      var d = b.mControlIds;
      simcity.gEventManager.AddEventListener(simcity.gEventTypes.MOUSEUP, d.ERROR_MORE_INFO_LINK, function () {
        b.OpenErrorMoreInfoLink(a.wwceCode || a.errorCode)
      });
      c.DestroyChildren();
      var e = gUIManager.LoadLayout(b.mPageLayouts.ERROR_CONTENT_WINDOW, c),
      c = e.FindControlByID(d.ERROR_MSG_TEXT),
      d = e.FindControlByID(d.ERROR_MORE_INFO_LINK);
      b.SetControlText(c, a.message);
      b.mIsMsgTextSelectable ? c.SetSelectable(!0) : c.SetSelectable(!1);
      d.SetPosition(0, c.mTop + c.GetTextHeight() + 15)
    }
  }
  simcity.gDialog.prototype.ShowPrompt.call(this, a)
};
simcity.gErrorDialog.prototype.OpenErrorMoreInfoLink = function (a) {
  var b = function () {
    simcity.gUpdater ? simcity.gUIToolbox.OpenHelpArticleSite(!0) : simcity.gUIToolbox.OpenHelpArticleSite(!1)
  },
  a = {
    url : this.mKnowledgeServiceUrl,
    params : [["locale", simcity.gUIToolbox.GetLocale()], ["errorId", "SMCY-" + a], ["gameId", simcity.cConstants.kErrorHelp.kGameId], ["platform", simcity.cConstants.kErrorHelp.kPlatform]],
    withCredentials : !1,
    onSuccess : function (a) {
      a && a.json && a.json.response ? (a = a.json.response, simcity.gUpdater ? scrui.OpenExternalBrowser(a.url) :
        simcity.cOriginUtilities.OpenIgoBrowser(a.url)) : b()
    },
    onError : function () {
      b()
    },
    method : "get"
  };
  scrui.XHR.Request(a)
};
simcity.gErrorDialog.prototype.HandleButtonClick = function (a) {
  simcity.gEventManager.RemoveEventListener(simcity.gEventTypes.CLICK, this.mControlIds.ERROR_MORE_INFO_LINK);
  simcity.gDialog.prototype.HandleButtonClick.call(this, a)
};
simcity.gErrorDialog.prototype.SetKnowledgeServiceUrl = function (a) {
  this.mKnowledgeServiceUrl = a
};
simcity.gErrorDialog.prototype.ShowErrorModal = function (a) {
  var b = function (b) {
    gErrorManager.SendErrorResponse(b, a)
  };
  if (void 0 !== a.noRepeatModalSeconds && void 0 !== a.timeSinceLastModal && a.noRepeatModalSeconds > a.timeSinceLastModal)
    gErrorManager.SendErrorResponse(scrui.kErrorResponse_NotHandled, a);
  else {
    var c = function () {
      delete d[a.group]
    },
    d = gErrorManager.mErrorModalGroupPriorityMap;
    if (void 0 !== d[a.group]) {
      if (a.priority > d[a.group][0]) {
        gErrorManager.SendErrorResponse(scrui.kErrorResponse_NotHandled, a);
        return
      }
      clearTimeout(d[a.group][1])
    }
    c =
      setTimeout(c, 3E4);
    d[a.group] = [a.priority, c];
    var e = !1;
    switch (a.dialogType) {
    case scrui.kErrorDialogType_RetryCancelWithURL:
      e = !0;
      c = [{
          text : simcity.gDialog.kButtonCancel.text,
          onClick : function () {
            b(scrui.kErrorResponse_Cancel)
          }
        }, {
          text : simcity.gDialog.kButtonRetry.text,
          onClick : function () {
            b(scrui.kErrorResponse_Retry)
          }
        }
      ];
      break;
    case scrui.kErrorDialogType_QuitWithURL:
      e = !0;
      c = [{
          text : simcity.gDialog.kButtonQuit.text,
          onClick : function () {
            b(scrui.kErrorResponse_Quit)
          }
        }
      ];
      break;
    case scrui.kErrorDialogType_OkayButtonWithURL:
      e =
        !0;
      c = [{
          text : simcity.gDialog.kButtonOk.text,
          onClick : function () {
            b(scrui.kErrorResponse_Okay)
          }
        }
      ];
      break;
    case scrui.kErrorDialogType_RetryCancel:
      e = !1;
      c = [{
          text : simcity.gDialog.kButtonCancel.text,
          onClick : function () {
            b(scrui.kErrorResponse_Cancel)
          }
        }, {
          text : simcity.gDialog.kButtonRetry.text,
          onClick : function () {
            b(scrui.kErrorResponse_Retry)
          }
        }
      ];
      break;
    case scrui.kErrorDialogType_Quit:
      e = !1;
      c = [{
          text : simcity.gDialog.kButtonQuit.text,
          onClick : function () {
            b(scrui.kErrorResponse_Quit)
          }
        }
      ];
      break;
    case scrui.kErrorDialogType_ForceQuitToMenu:
      e =
        !1;
      c = [{
          text : simcity.gDialog.kButtonQuit.text,
          onClick : function () {
            b(scrui.kErrorResponse_Quit);
            simcity.gGlobalUIHandler.QuitToMainMenu()
          }
        }
      ];
      break;
    case scrui.kErrorDialogType_None:
      c = [];
      break;
    default:
      e = !1,
      c = [{
          text : simcity.gDialog.kButtonOk.text,
          onClick : function () {
            b(scrui.kErrorResponse_Okay)
          }
        }
      ]
    }
    c = {
      title : a.title ? a.title : new scrui.cLocaleString("ErrorMessages.json", "0x0f446dcd"),
      message : a.message,
      buttons : c,
      errorCode : a.code,
      wwceCode : a.wwceQueryCode,
      showMoreInfoLink : e
    };
    this.ShowPrompt(c)
  }
};
simcity.AchievementManager = {};
simcity.cAchievementManager = function () {
  this.mPageIDs = {
    ACHIEVEMENT_ANIMATION : 231004048,
    DESCRIPTION : 230911273,
    NAME : 230911271,
    WINDOW : 230911284,
    BTN_SHOW_ACHIEVEMENTS : 243525767,
    BTN_CLOSE : 249474171
  };
  this.mEventMap = {};
  this.mEventMap[simcity.kEventIDBuiltTownhall] = 1;
  this.mEventMap[simcity.kEventIDCaptureRobber] = 2;
  this.mEventMap[simcity.kEventIDInviteFriend] = 6;
  this.mEventMap[simcity.kEventIDStadiumEventSucceeded] = 3;
  this.mGameLoaded = this.mProcessingRulesEnabled = this.mInitialized = !1;
  this.mMsSinceUpdate = this.mShowPopupCountdown =
    0;
  this.mResourceMap = {};
  this.mAchievementMetaData = {};
  this.mAchievementCategories = [];
  this.mUserStatus = {};
  this.mShowAchievementsCallback = this.mAchievementLayout = null;
  this.mBindingData = {
    bindings : [],
    queries : [],
    queryObjects : []
  };
  this.mAchievementQueue = [];
  this.mRetryTimers = {};
  this.mSocketRegistered = !1
};
goog.inherits(simcity.cAchievementManager, scrui.cUIHandler);
simcity.cAchievementManager.kGrantRetryInterval = 3E4;
simcity.cAchievementManager.kUpdateInterval = 5E3;
simcity.cAchievementManager.kStayOpenTime = 6E3;
simcity.cAchievementManager.kPopupShowDelay = 4E3;
simcity.cAchievementManager.kBindingTypeResourceBin = 238091235;
simcity.cAchievementManager.kIsDynamicBinding = !1;
simcity.cAchievementManager.kAchievementLayout = "Layouts/AchievementPopup.js";
simcity.cAchievementManager.kLocaleFile = "AutomatedAchievements.json";
simcity.cAchievementManager.kIconPath = "Graphics/Achievements/";
simcity.cAchievementManager.kAchievementFilePath = "AutomatedAchievementData.json";
simcity.cAchievementManager.kAchievementCategoriesPath = "AchievementCategories.json";
simcity.cAchievementManager.kUserStatusUrl = "achievementService/getUserAchievementStatus";
simcity.cAchievementManager.kBoxStatusUrl = "achievementService/getBoxAchievementStatus";
simcity.cAchievementManager.kGrantUrl = "achievementService/grantAchievement";
simcity.cAchievementManager.kDefaultLockedIcon = "Graphics/Achievements/icn-achievements-medalion-silver.png";
simcity.cAchievementManager.kSocketAchievementMessageType = 2018877086;
simcity.cAchievementManager.kSocketGrantedEventId = 1086321538;
simcity.cAchievementManager.kSocketAchievementGuid = 251804717;
simcity.cAchievementManager.prototype.Init = function (a) {
  a && (this.mAchievementLayout = gUIManager.LoadLayout(simcity.cAchievementManager.kAchievementLayout, a));
  this.Private_GetAchievmentCategories();
  this.RequestAchievementSubscription();
  var b = this;
  simcity.gEventManager.AddEventListener(simcity.gEventTypes.CLICK, this.mPageIDs.BTN_SHOW_ACHIEVEMENTS, function () {
    b.mShowAchievementsCallback && b.mShowAchievementsCallback()
  });
  simcity.gEventManager.AddEventListener(simcity.gEventTypes.CLICK, this.mPageIDs.BTN_CLOSE,
    function () {
    b.CloseAchievementPopup()
  });
  gUIManager.RegisterUIHandler(this)
};
simcity.cAchievementManager.prototype.SetShowCallback = function (a) {
  this.mShowAchievementsCallback = "function" === typeof a ? a : null
};
simcity.cAchievementManager.prototype.IsUnlocked = function (a) {
  return !this.mUserStatus ? !1 : (a = (a = this.mUserStatus[a]) && a.isUnlocked) ? a : !1
};
simcity.cAchievementManager.prototype.GetAchievements = function (a, b, c) {
  var d = this,
  e = function (a) {
    var c = [],
    e;
    for (e in d.mAchievementCategories) {
      var f = d.mAchievementCategories[e];
      if (f) {
        var k = goog.object.clone(f);
        k.numUnlocked = 0;
        k.achievements = [];
        for (var l in f.achievements) {
          l = f.achievements[l];
          var m = scrui.IDFromName(l);
          if (m = d.mAchievementMetaData[m]) {
            m = goog.object.clone(m);
            m.Tests = void 0;
            var n = a[m.ID];
            m.isUnlocked = n ? n.isUnlocked || n.shown : !1;
            m.isUnlocked ? k.numUnlocked += 1 : (n = m.Icon.search(/.png$/i), m.Icon =
                -1 != n ? m.Icon.slice(0, n) + "-Locked.png" : simcity.cAchievementManager.kDefaultLockedIcon);
            k.achievements.push(m)
          }
        }
        c.push(k)
      }
    }
    "function" == typeof b && b(c)
  },
  f = null == a || void 0 == a || simcity.gSessionManager.mUserID == a;
  simcity.gSessionManager && f && this.mUserStatus ? e(this.mUserStatus) : this.Private_GetUserStatusMap(a, e, c)
};
simcity.cAchievementManager.prototype.SetVisible = function (a) {
  this.mAchievementLayout && this.mAchievementLayout.SetVisibility(a)
};
simcity.cAchievementManager.prototype.Private_GetAchievmentData = function () {
  var a = this,
  b = function (b) {
    a.Private_MergeUserStatusMap(b);
    a.mInitialized = !0
  };
  scrui.XHR.Request({
    url : simcity.cAchievementManager.kAchievementFilePath,
    onSuccess : function (c) {
      a.Private_ParseAchievements(c.json);
      a.Private_GetUserStatusMap(null, b)
    },
    onError : function () {},
    method : "get"
  })
};
simcity.cAchievementManager.prototype.Private_GetAchievmentCategories = function () {
  var a = this;
  scrui.XHR.Request({
    url : simcity.cAchievementManager.kAchievementCategoriesPath,
    onSuccess : function (b) {
      a.mAchievementCategories = b.json;
      a.Private_GetAchievmentData()
    },
    onError : function () {},
    method : "get"
  })
};
simcity.cAchievementManager.prototype.StartRuleProcessing = function () {
  this.mProcessingRulesEnabled = !0
};
simcity.cAchievementManager.prototype.Private_MergeUserStatusMap = function (a) {
  for (var b in a) {
    var c = a[b],
    d = this.mUserStatus[b];
    c.isUnlocked || (c.needUnachieve = !0);
    c.shown = c.isUnlocked;
    d && (c.shown = c.shown || d.shown || d.isUnlocked);
    this.mUserStatus[b] = c
  }
};
simcity.cAchievementManager.prototype.Private_GetUserStatusMap = function (a, b, c) {
  this.Private_GetAchievementStatusMap(simcity.cAchievementManager.kUserStatusUrl, null != a ? [["userId", a]] : null, b, c)
};
simcity.cAchievementManager.prototype.Private_GetAchievementStatusMap = function (a, b, c, d) {
  var e = this,
  f = function (a) {
    "function" == typeof d && d(a)
  },
  a = {
    url : scrui.GetRestPath().replace("/simcity/rest", "/citylog/json") + a,
    params : b,
    onSuccess : function (a) {
      if (a.json.error)
        f(a);
      else {
        var a = a.json,
        b = null;
        a && a.achievementStatusResponse && (b = a.achievementStatusResponse.achievementStatus);
        "function" == typeof c && (a = e.Private_GetStatusMap(b), c(a))
      }
    },
    onError : f,
    method : "get"
  };
  scrui.XHR.Request(a)
};
simcity.cAchievementManager.prototype.Private_GetStatusMap = function (a) {
  var b = {},
  c;
  for (c in a) {
    var d = a[c];
    d && (b[scrui.IDFromName(d.id)] = {
        isUnlocked : d.isUnlocked ? !0 : !1
      })
  }
  return b
};
simcity.cAchievementManager.prototype.HandleGameEvent = function (a) {
  try {
    switch (a) {
    case simcity.kGameMessageGameLoaded:
      var b = this;
      setTimeout(function () {
        b.mGameLoaded = !0
      }, simcity.cAchievementManager.kPopupShowDelay)
    }
  } catch (c) {
    scrui.DebugPrint("[cAchievementManager::HandleEvent] " + c)
  }
};
simcity.cAchievementManager.prototype.Update = scrui.Client_ProfZone("cAchievementManager.Update", function (a) {
    if (this.mInitialized && (0 <= this.mShowPopupCountdown && (this.mShowPopupCountdown -= a, 0 > this.mShowPopupCountdown && (this.mShowPopupCountdown = -1, this.CloseAchievementPopup())), this.mMsSinceUpdate += a, this.mMsSinceUpdate > simcity.cAchievementManager.kUpdateInterval))
      this.mMsSinceUpdate = 0, this.Private_UpdateAchievements(), this.mGameLoaded && (-1 == this.mShowPopupCountdown && 0 < this.mAchievementQueue.length &&
        !this.GetAnimation().IsPlaying()) && this.ShowAchievementPopup(this.mAchievementQueue.pop())
  });
simcity.cAchievementManager.prototype.QueueAchievementPopup = function (a) {
  var b = this.mUserStatus[a.ID];
  b.shown || (b.shown = !0, this.mAchievementQueue.push(a))
};
simcity.cAchievementManager.prototype.ShowAchievementPopup = function (a) {
  var b = this.GetAnimation();
  if (b && this.mAchievementLayout) {
    var c = scrui.ParseLocaleStringWithValues(a.Desc),
    d = scrui.ParseLocaleString(a.Name),
    a = simcity.cAchievementManager.kIconPath + a.Icon;
    this.mAchievementLayout.FindControlByID(this.mPageIDs.DESCRIPTION).SetLocaleText(c.text, c.tokens);
    this.mAchievementLayout.FindControlByID(this.mPageIDs.NAME).SetLocaleText(d);
    this.mAchievementLayout.FindControlByID(this.mPageIDs.WINDOW).SetWindowImage(a);
    this.mShowPopupCountdown = simcity.cAchievementManager.kStayOpenTime;
    this.mShowAchievementsCallback ? this.mAchievementLayout.FindControlByID(this.mPageIDs.BTN_SHOW_ACHIEVEMENTS).SetVisibility(!0) : this.mAchievementLayout.FindControlByID(this.mPageIDs.BTN_SHOW_ACHIEVEMENTS).SetVisibility(!1);
    simcity.SendSoundEvent(simcity.audio.kGlobalSoundObjectID, simcity.audio.kInstanceUIAchievementUnlocked);
    b.Start()
  }
};
simcity.cAchievementManager.prototype.CloseAchievementPopup = function () {
  var a = this.GetAnimation();
  a && (simcity.SendSoundEvent(simcity.audio.kGlobalSoundObjectID, simcity.audio.kInstanceUIAchievementClose), a.Start(scrui.cAnimation.kPlayReverse))
};
simcity.cAchievementManager.prototype.GetAnimation = function () {
  return null === this.mAchievementLayout ? null : this.mAchievementLayout.FindAnimationByID(this.mPageIDs.ACHIEVEMENT_ANIMATION)
};
simcity.cAchievementManager.prototype.Private_UpdateAchievements = function () {
  this.mMsSinceUpdate = 0;
  if (this.mProcessingRulesEnabled) {
    var a = this,
    b = this.mBindingData.bindings;
    simcity.RequestDataBindingData(this.mBindingData.queries, b, this.mBindingData.queryObjects, simcity.cAchievementManager.kIsDynamicBinding, function (c) {
      for (var d = 0; d < b.length; ++d) {
        var e = b[d];
        if (e.dynamic || !1 === simcity.cAchievementManager.kIsDynamicBinding)
          switch (e.bindingType) {
          case simcity.cAchievementManager.kBindingTypeResourceBin:
            e =
              Object.keys(c[d]),
            1280816427 == e[0] && (c[d][e[0]] = {
                amount : simcity.GetFudgedPopulation()
              }),
            a.Private_UpdateResource(c[d])
          }
      }
    });
    for (var c in this.mAchievementMetaData) {
      var d = this.mAchievementMetaData[c],
      e = this.mUserStatus[d.ID];
      if (e) {
        var f = this.Private_RunTests(d);
        f && !e.isUnlocked && !e.needUnachieve ? (this.QueueAchievementPopup(d), this.GrantAchievement(d)) : !f && e.needUnachieve && (this.mUserStatus[d.ID].isUnlocked = !1, this.mUserStatus[d.ID].needUnachieve = void 0)
      }
    }
  }
};
simcity.cAchievementManager.prototype.GrantAchievement = function (a) {
  var b = a.Key;
  if (!this.mRetryTimers[b]) {
    var c = this,
    d = function () {
      c.mRetryTimers[b] = setTimeout(function () {
          c.mRetryTimers[b] = null;
          c.GrantAchievement(a)
        }, simcity.cAchievementManager.kGrantRetryInterval)
    },
    e = {
      url : scrui.GetRestPath().replace("/simcity/rest", "/citylog/json") + simcity.cAchievementManager.kGrantUrl,
      params : [["achievementId", b]],
      onSuccess : function (b) {
        b.json.error ? d(b) : (b = c.mUserStatus[a.ID]) && (b.isUnlocked = !0)
      },
      onError : d,
      method : "get"
    };
    scrui.XHR.Request(e)
  }
};
simcity.cAchievementManager.prototype.Private_UpdateResource = function (a) {
  for (var b in a) {
    var c = a[b];
    this.mResourceMap[b] = c ? c.amount : null
  }
};
simcity.cAchievementManager.prototype.Private_RunTests = function (a) {
  if ("Local" !== a.Type)
    return !1;
  for (var b in a.Tests) {
    var c = a.Tests[b];
    if ("Local" !== c.Type)
      return !1;
    var d = this.mResourceMap[c.ResourceHex];
    if (!d || !c.doTest(d))
      return !1
  }
  return !0
};
simcity.cAchievementManager.prototype.Private_ParseAchievements = function (a) {
  this.mBindingData.bindings.length = 0;
  this.mBindingData.queries.length = 0;
  this.mBindingData.queryObjects.length = 0;
  delete this.mAchievementMetaData;
  this.mAchievementMetaData = {};
  for (var b in a) {
    var c = a[b];
    if (1 === c.Enabled) {
      "Local" == c.Type && this.Private_BuildTestFunctions(c);
      this.mBindingData.bindings = this.mBindingData.bindings.concat(this.Private_BuildBindings(c));
      var d = c.ID;
      c.Key = d;
      c.ID = scrui.IDFromName(d);
      this.mAchievementMetaData[c.ID] =
        c
    }
  }
  a = this.mBindingData.bindings.length;
  for (c = 0; c < a; ++c)
    for (b in d = this.mBindingData.bindings[c].queries, this.mBindingData.queryObjects.push(d), d)
      this.mBindingData.queries.push(scrui.BuildRequestQuery(d[b]))
};
simcity.cAchievementManager.prototype.Private_BuildBindings = function (a) {
  var b = [],
  c;
  for (c in a.Tests) {
    var d = a.Tests[c];
    "string" === typeof d.ResourceHex && (d.ResourceHex = parseInt(d.ResourceHex, 16));
    if (void 0 == this.mResourceMap[d.ResourceHex]) {
      this.mResourceMap[d.ResourceHex] = null;
      var e = {};
      e[d.ResourceHex] = [simcity.kDataBins, d.ResourceHex];
      d = {
        allowNullResults : !0,
        bindingType : simcity.cAchievementManager.kBindingTypeResourceBin,
        queries : goog.object.clone(e)
      };
      b.push(d)
    }
  }
  return b
};
simcity.cAchievementManager.prototype.Private_BuildTestFunctions = function (a) {
  for (var b in a.Tests) {
    var c = a.Tests[b];
    c.doTest = eval("(function(value){return (value " + c.Operator + " " + c.Value + ")})")
  }
};
simcity.cAchievementManager.OnSocket = function (a) {
  if (a && a.resourceRuleId) {
    var b = simcity.gAchievementManager,
    a = scrui.IDFromName(a.resourceRuleId);
    if ((a = b.mAchievementMetaData[a]) && !b.IsUnlocked(a.ID)) {
      var c = b.mUserStatus[a.ID];
      c && (c.isUnlocked = !0, b.QueueAchievementPopup(a))
    }
  }
};
simcity.cAchievementManager.prototype.RequestAchievementSubscription = function () {
  this.mSocketRegistered || (simcity.gSocketManager.AddSocketRequest("/subscriptions/user/" + simcity.gSessionManager.mUserID + "/messageType/" + Number(simcity.cAchievementManager.kSocketAchievementMessageType) + "/eventId/" + Number(simcity.cAchievementManager.kSocketGrantedEventId), Number(simcity.cAchievementManager.kSocketAchievementGuid), simcity.cAchievementManager.OnSocket, !1), this.mSocketRegistered = !0)
};
simcity.cAchievementManager.prototype.RemoveAchievementSubscription = function () {
  simcity.gSocketManager.RemoveSocketRequest("/subscriptions/user/" + simcity.gSessionManager.mUserID + "/messageType/" + Number(simcity.cAchievementManager.kSocketAchievementMessageType) + "/eventId/" + Number(simcity.cAchievementManager.kSocketGrantedEventId), Number(simcity.cAchievementManager.kSocketAchievementGuid), simcity.cAchievementManager.OnSocket, !1);
  this.mSocketRegistered = !1
};
simcity.gAchievementManager = new simcity.cAchievementManager;
simcity.Constants = {};
simcity.cConstants = {
  kNoRepeatNetworkAlertSeconds : 15,
  kNetDownForceQuitAfterMinutes : 20,
  kLeaderboardsUpdateFreqDisclaimerTime : 15,
  kPresenceAvatarFrames : {
    ONLINE : "Graphics/Common/Avatar_Frames/Avatar_Frame_Online.png",
    AWAY : "Graphics/Common/Avatar_Frames/Avatar_Frame_Player.png",
    OFFLINE : "Graphics/Common/Avatar_Frames/Avatar_Frame_Offline.png",
    LOGGED_IN_USER : "Graphics/Common/Avatar_Frames/Avatar_Frame_Normal.png"
  },
  kGameManualURL : "http://akamai.cdn.ea.com/eadownloads/u/f/manuals/GAME-SIMCITY/SimCity_Manual.pdf",
  kBannedUserSupportUrl : "https://help.ea.com/article/information-about-banned-or-suspended-accounts",
  kHelpSiteSsoURL : "https://help.ea.com/sso/login",
  kHelpSiteRedirectURL : "/simcity/simcity",
  kHelpSiteTokenKey : "atoken",
  kErrorHelp : {
    kGameId : "simcity",
    kPlatform : "pc"
  }
};
simcity.NetworkStateManager = {};
simcity.cNetworkStateManager = function () {
  this.mIsServerOnline = this.mIsNetworkOnline = !0;
  this.mTimeMSBetweenAlerts = 1E3 * simcity.cConstants.kNoRepeatNetworkAlertSeconds;
  this.mTimeMSForceQuitGame = 6E4 * simcity.cConstants.kNetDownForceQuitAfterMinutes;
  this.mTimeMSWaitBeforeServerAlert = 3E3;
  this.mIsServerDownAlertDisplayed = this.mIsNetworkDownAlertDisplayed = !1;
  this.mScheduledForceQuitTimeout = this.mScheduledServerAlertTimeout = this.mScheduledNetworkAlertTimeout = null
};
goog.inherits(simcity.cNetworkStateManager, scrui.cUIHandler);
simcity.cNetworkStateManager.prototype.HandleConnectionError = function (a) {
  var b = !1;
  if (a.messageType === scrui.cErrorManager.kMsgType_ErrorData)
    switch (a.code) {
    case scrui.kErrorCode_NetworkOffline:
      this.ShowNetworkDisconnectError(gErrorManager.mErrorsModalDisplayTimeMap[scrui.kErrorCode_NetworkOnline]);
      this.StartForceQuitCountDown();
      this.mIsNetworkOnline = !1;
      b = !0;
      break;
    case scrui.kErrorCode_NetworkOnline:
      this.ShowNetworkReconnectMessage();
      this.StopForceQuitCountDown();
      this.mIsNetworkOnline = !0;
      break;
    case scrui.kErrorCode_NetworkServicesOffline:
      this.mIsServerOnline =
        !1;
      this.ShowServerDisconnectError(gErrorManager.mErrorsModalDisplayTimeMap[scrui.kErrorCode_NetworkServicesOnline]);
      b = !0;
      break;
    case scrui.kErrorCode_NetworkServicesOnline:
      this.mIsServerOnline = !0,
      this.ShowServerReconnectMessage()
    }
  return b
};
simcity.cNetworkStateManager.prototype.StartForceQuitCountDown = function () {
  simcity.gGlobalUIHandler && null === this.mScheduledForceQuitTimeout && (this.mScheduledForceQuitTimeout = setTimeout(this.Private_ShowForceQuitDialog, this.mTimeMSForceQuitGame))
};
simcity.cNetworkStateManager.prototype.Private_ShowForceQuitDialog = function () {
  gErrorManager.TriggerError(scrui.kErrorCode_ForceQuitToMainMenu)
};
simcity.cNetworkStateManager.prototype.StopForceQuitCountDown = function () {
  clearTimeout(this.mScheduledForceQuitTimeout);
  this.mScheduledForceQuitTimeout = null
};
simcity.cNetworkStateManager.prototype.ShowNetworkDisconnectError = function (a) {
  var b = (new Date).getTime();
  if (!a || a + this.mTimeMSBetweenAlerts < b)
    this.Private_ShowNetworkDownAlert();
  else {
    var c = this;
    this.mScheduledNetworkAlertTimeout = setTimeout(function () {
        c.Private_ShowNetworkDownAlert()
      }, a + this.mTimeMSBetweenAlerts - b)
  }
};
simcity.cNetworkStateManager.prototype.Private_ShowNetworkDownAlert = function () {
  this.mIsNetworkDownAlertDisplayed || (gErrorManager.TriggerError(scrui.kErrorCode_NetworkDisconnectAlert), this.mIsNetworkDownAlertDisplayed = !0)
};
simcity.cNetworkStateManager.prototype.ShowNetworkReconnectMessage = function () {
  this.mIsNetworkDownAlertDisplayed && gErrorManager.TriggerError(scrui.kErrorCode_NetworkReconnectAlert);
  gErrorManager.mErrorsModalDisplayTimeMap[scrui.kErrorCode_NetworkOnline] = (new Date).getTime();
  clearTimeout(this.mScheduledNetworkAlertTimeout);
  this.mScheduledNetworkAlertTimeout = null;
  this.mIsNetworkDownAlertDisplayed = !1
};
simcity.cNetworkStateManager.prototype.ShowServerDisconnectError = function (a) {
  var b = this;
  setTimeout(function () {
    b.mIsServerOnline || b.Private_ShowServerDisconnectError(a)
  }, this.mTimeMSWaitBeforeServerAlert)
};
simcity.cNetworkStateManager.prototype.Private_ShowServerDisconnectError = function (a) {
  if (this.mIsNetworkOnline) {
    var b = (new Date).getTime();
    if (!a || a + this.mTimeMSBetweenAlerts < b)
      this.Private_ShowServerDownAlert();
    else {
      var c = this;
      this.mScheduledServerAlertTimeout = setTimeout(function () {
          c.Private_ShowServerDownAlert()
        }, a + this.mTimeMSBetweenAlerts - b)
    }
  }
};
simcity.cNetworkStateManager.prototype.Private_ShowServerDownAlert = function () {
  !this.mIsServerDownAlertDisplayed && (!this.mIsNetworkDownAlertDisplayed && !this.mIsServerOnline) && gErrorManager.TriggerError(scrui.kErrorCode_ServerDisconnectAlert)
};
simcity.cNetworkStateManager.prototype.ShowServerReconnectMessage = function () {
  clearTimeout(this.mScheduledServerAlertTimeout);
  this.mScheduledServerAlertTimeout = null;
  this.mIsServerDownAlertDisplayed && (gErrorManager.TriggerError(scrui.kErrorCode_ServerReconnectAlert), gErrorManager.mErrorsModalDisplayTimeMap[scrui.kErrorCode_NetworkServicesOnline] = (new Date).getTime())
};
simcity.cNetworkStateManager.prototype.CheckNetworkError = function (a) {
  var b = !1;
  if (!a || 0 === a.code)
    this.mIsNetworkOnline ? this.mIsServerOnline || (gErrorManager.TriggerError(scrui.kErrorCode_ServerUnreachableAjaxFailure), b = !0) : (gErrorManager.TriggerError(scrui.kErrorCode_NetworkDisconnectAjaxFailure), b = !0);
  return b
};
simcity.cNetworkStateManager.prototype.IsConnected = function () {
  return this.mIsNetworkOnline && this.mIsServerOnline
};
simcity.gNetworkStateManager = new simcity.cNetworkStateManager;
simcity.databindings.DataBindingsToyTaskPanel = {};
simcity.ToyTaskPanel = {};
simcity.kCostMotoCross = 15E3;
simcity.kCostIndoorSports = 3E4;
simcity.kCostRockConcert = 45E3;
simcity.kCostMonsterTrucks = 15E4;
simcity.kCostOutdoorSports = 225E3;
simcity.kCostRockLegends = 3E5;
simcity.kCostShakespeare = 6E3;
simcity.kCostOsloOperaHouse = 52E3;
simcity.kCostSydneyOperaHouse = 53E3;
simcity.kProfitMotoCross = 66E3;
simcity.kProfitIndoorSports = 111E3;
simcity.kProfitRockConcert = 156E3;
simcity.kProfitMonsterTrucks = 3E5;
simcity.kProfitOutdoorSports = 45E4;
simcity.kProfitRockLegends = 6E5;
simcity.kProfitShakespeare = 42E3;
simcity.kProfitOsloOperaHouse = 104E3;
simcity.kProfitSydneyOperaHouse = 106E3;
simcity.ToyTaskPanel.kEventMotoCross = {
  marqueeImage : "stadiumEvent_MotoCross.png",
  textHeader : new scrui.cLocaleString("ToyTaskPanel.json", "0x0e09699e", "Event Schedule"),
  textChooseType : new scrui.cLocaleString("ToyTaskPanel.json", "0x0e0969e6", "Choose type of event to schedule"),
  eventTitleText : new scrui.cLocaleString("ToyTaskPanel.json", "0x0ee176c0", "Motocross"),
  textDescription : new scrui.cLocaleString("ToyTaskPanel.json", "0x0ee176fe", "Motocross is so cool! [PT] <br><br><b>Attracts</b>: Low wealth residents and tourists."),
  playerRule : simcity.kRuleIDSCPlayerRuleCycleResearch,
  finalizePlayerRule : simcity.kRuleIDSCPlayerRuleStartResearch,
  eventCost : simcity.kCostMotoCross,
  eventProfit : simcity.kProfitMotoCross
};
simcity.ToyTaskPanel.kEventIndoorSports = {
  marqueeImage : "stadiumEvent_IndoorSports.png",
  textHeader : new scrui.cLocaleString("ToyTaskPanel.json", "0x0e09699e", "Event Schedule"),
  textChooseType : new scrui.cLocaleString("ToyTaskPanel.json", "0x0e0969e6", "Choose type of event to schedule"),
  eventTitleText : new scrui.cLocaleString("ToyTaskPanel.json", "0x0e0946c2", "Sports Event"),
  textDescription : new scrui.cLocaleString("ToyTaskPanel.json", "0x0ea88b3d", "Yeah, go local sports team! Woo!<br><br><b>Attracts</b>: Low and medium wealth residents and tourists."),
  playerRule : simcity.kRuleIDSCPlayerRuleCycleResearch,
  finalizePlayerRule : simcity.kRuleIDSCPlayerRuleStartResearch,
  eventCost : simcity.kCostIndoorSports,
  eventProfit : simcity.kProfitIndoorSports
};
simcity.ToyTaskPanel.kEventRockConcert = {
  marqueeImage : "stadiumEvent_RockConcert.png",
  textHeader : new scrui.cLocaleString("ToyTaskPanel.json", "0x0e09699e", "Event Schedule"),
  textChooseType : new scrui.cLocaleString("ToyTaskPanel.json", "0x0e0969e6", "Choose type of event to schedule"),
  eventTitleText : new scrui.cLocaleString("ToyTaskPanel.json", "0x0ee17755", "Rock Concert"),
  textDescription : new scrui.cLocaleString("ToyTaskPanel.json", "0x0ee17756", "Hopefully the show will be so awesome the band will destroy the set! [PT]<br><br><b>Attracts</b>: Low and medium wealth residents and tourists."),
  playerRule : simcity.kRuleIDSCPlayerRuleCycleResearch,
  finalizePlayerRule : simcity.kRuleIDSCPlayerRuleStartResearch,
  eventCost : simcity.kCostRockConcert,
  eventProfit : simcity.kProfitRockConcert
};
simcity.ToyTaskPanelDataBindingsExpoHall = [simcity.ToyTaskPanel.kEventMotoCross, simcity.ToyTaskPanel.kEventIndoorSports, simcity.ToyTaskPanel.kEventRockConcert];
simcity.ToyTaskPanel.kEventMonsterTruck = {
  marqueeImage : "stadiumEvent_MonsterTruck.png",
  textHeader : new scrui.cLocaleString("ToyTaskPanel.json", "0x0e09699e", "Event Schedule"),
  textChooseType : new scrui.cLocaleString("ToyTaskPanel.json", "0x0e0969e6", "Choose type of event to schedule"),
  eventTitleText : new scrui.cLocaleString("ToyTaskPanel.json", "0x0e0946d4", "Monster Truck Rally"),
  textDescription : new scrui.cLocaleString("ToyTaskPanel.json", "0x0ea88a0d", "High attraction for low income residents. Low attraction for mid wealth residents. No attraction for high wealth residents."),
  playerRule : simcity.kRuleIDSCPlayerRuleCycleResearch,
  finalizePlayerRule : simcity.kRuleIDSCPlayerRuleStartResearch,
  eventCost : simcity.kCostMonsterTrucks,
  eventProfit : simcity.kProfitMonsterTrucks
};
simcity.ToyTaskPanel.kEventWorldChampionship = {
  marqueeImage : "stadiumEvent_WorldChampionship.png",
  textHeader : new scrui.cLocaleString("ToyTaskPanel.json", "0x0e09699e", "Event Schedule"),
  textChooseType : new scrui.cLocaleString("ToyTaskPanel.json", "0x0e0969e6", "Choose type of event to schedule"),
  eventTitleText : new scrui.cLocaleString("ToyTaskPanel.json", "0x0ea7be73", "World Championship"),
  textDescription : new scrui.cLocaleString("ToyTaskPanel.json", "0x0ea894e4", "Um, its pronounced \u201cfooot-bawl\u201d. Please.<br><br><b>Attracts</b>: Medium and high wealth residents and tourists."),
  playerRule : simcity.kRuleIDSCPlayerRuleCycleResearch,
  finalizePlayerRule : simcity.kRuleIDSCPlayerRuleStartResearch,
  eventCost : simcity.kCostOutdoorSports,
  eventProfit : simcity.kProfitOutdoorSports
};
simcity.ToyTaskPanel.kEventLegendsOfRock = {
  marqueeImage : "stadiumEvent_LegendsOfRock.png",
  textHeader : new scrui.cLocaleString("ToyTaskPanel.json", "0x0e09699e", "Event Schedule"),
  textChooseType : new scrui.cLocaleString("ToyTaskPanel.json", "0x0e0969e6", "Choose type of event to schedule"),
  eventTitleText : new scrui.cLocaleString("ToyTaskPanel.json", "0x0e0946b2", "Legends of Rock"),
  textDescription : new scrui.cLocaleString("ToyTaskPanel.json", "0x0ea88a94", "Whats that? I cant hear you! Yeah, I got this T-shirt at the Legends of Rock show!<br><br><b>Attracts</b>: Low and medium wealth residents and tourists."),
  playerRule : simcity.kRuleIDSCPlayerRuleCycleResearch,
  finalizePlayerRule : simcity.kRuleIDSCPlayerRuleStartResearch,
  eventCost : simcity.kCostRockLegends,
  eventProfit : simcity.kProfitRockLegends
};
simcity.ToyTaskPanelDataBindingsStadium = [simcity.ToyTaskPanel.kEventMonsterTruck, simcity.ToyTaskPanel.kEventWorldChampionship, simcity.ToyTaskPanel.kEventLegendsOfRock];
simcity.ToyTaskPanel.kEventGlobeTheater = {
  marqueeImage : "stadiumEvent_Globe.png",
  textHeader : new scrui.cLocaleString("ToyTaskPanel.json", "0x0e09699e", "Event Schedule"),
  textChooseType : new scrui.cLocaleString("ToyTaskPanel.json", "0x0ee08fd5", "Schedule an event"),
  eventTitleText : new scrui.cLocaleString("ToyTaskPanel.json", "0x0ee08a57", "A play in Globe Theater"),
  textDescription : new scrui.cLocaleString("ToyTaskPanel.json", "0x0ee08a60", "Watch a play here in the famous Globe Theater! Or not, whatever."),
  playerRule : simcity.kRuleIDSCPlayerRuleCycleResearch,
  finalizePlayerRule : simcity.kRuleIDSCPlayerRuleStartResearch,
  eventCost : simcity.kCostShakespeare,
  eventProfit : simcity.kProfitShakespeare
};
simcity.ToyTaskPanelDataBindingsGlobeTheater = [simcity.ToyTaskPanel.kEventGlobeTheater];
simcity.ToyTaskPanel.kEventSydneyOperaHouse = {
  marqueeImage : "stadiumEvent_Sydney.png",
  textHeader : new scrui.cLocaleString("ToyTaskPanel.json", "0x0e09699e", "Event Schedule"),
  textChooseType : new scrui.cLocaleString("ToyTaskPanel.json", "0x0ee08fd5", "Schedule an event"),
  eventTitleText : new scrui.cLocaleString("ToyTaskPanel.json", "0x0ee08bf3", "Opera at Sydney Opera House"),
  textDescription : new scrui.cLocaleString("ToyTaskPanel.json", "0x0ee08bf4", "GDay mate, lets put some opera on the barbie. Fosters anyone? Kangaroos? ...sorry."),
  playerRule : simcity.kRuleIDSCPlayerRuleCycleResearch,
  finalizePlayerRule : simcity.kRuleIDSCPlayerRuleStartResearch,
  eventCost : simcity.kCostSydneyOperaHouse,
  eventProfit : simcity.kProfitSydneyOperaHouse
};
simcity.ToyTaskPanelDataBindingsSydneyOpera = [simcity.ToyTaskPanel.kEventSydneyOperaHouse];
simcity.ToyTaskPanel.kEventOsloOperaHouse = {
  marqueeImage : "stadiumEvent_Oslo.png",
  textHeader : new scrui.cLocaleString("ToyTaskPanel.json", "0x0e09699e", "Event Schedule"),
  textChooseType : new scrui.cLocaleString("ToyTaskPanel.json", "0x0ee08fd5", "Schedule an event"),
  eventTitleText : new scrui.cLocaleString("ToyTaskPanel.json", "0x0ee08bf5", "Opera at Oslo Opera House"),
  textDescription : new scrui.cLocaleString("ToyTaskPanel.json", "0x0ee08bf6", "We shall watch an opera in a building that looks far too cool to house opera!"),
  playerRule : simcity.kRuleIDSCPlayerRuleCycleResearch,
  finalizePlayerRule : simcity.kRuleIDSCPlayerRuleStartResearch,
  eventCost : simcity.kCostOsloOperaHouse,
  eventProfit : simcity.kProfitOsloOperaHouse
};
simcity.ToyTaskPanelDataBindingsOsloOpera = [simcity.ToyTaskPanel.kEventOsloOperaHouse];
simcity.ToyTaskPanel.kUniversityResearchPowerSolarAdvancedPanelModule = {
  marqueeImage : "solarPlantAdvancedPanelModule.png",
  eventTitleText : new scrui.cLocaleString("GlobalUI.json", "0x0e28fa01", "kUniversityResearchPowerSolarAdvancedPanelModule 0"),
  textHeader : new scrui.cLocaleString("GlobalUI.json", "0x0e28f400", "kUniversityResearchPowerSolarAdvancedPanelModule 1"),
  textDescription : new scrui.cLocaleString("GlobalUI.json", "0x0e28fa11", "kUniversityResearchPowerSolarAdvancedPanelModule 3"),
  textChooseType : new scrui.cLocaleString("GlobalUI.json",
    "0x0e28f401", "kUniversityResearchPowerSolarAdvancedPanelModule 2"),
  lockedTextDescription : new scrui.cLocaleString("GlobalUI.json", "0x0e4208bb", "kUniversityResearchPowerSolarAdvancedPanelModule 4"),
  lockedGlobalBin : simcity.kResourceIDNumberOfScienceWings,
  completedGlobalBin : simcity.kResourceIDPower_SolarAdvanced_Unlocked,
  researchCost : simcity.kPropResearch_Project1_ResearchCost,
  playerRule : simcity.kRuleIDSCPlayerRuleCycleResearch,
  finalizePlayerRule : simcity.kRuleIDSCPlayerRuleStartResearch
};
simcity.ToyTaskPanel.kUniversityResearchGreatWorksSolarPowerPlant = {
  marqueeImage : "greatWorksSolarPowerPlant.png",
  eventTitleText : new scrui.cLocaleString("GlobalUI.json", "0x0e28fa02", "kUniversityResearchGreatWorksSolarPowerPlant 0"),
  textHeader : new scrui.cLocaleString("GlobalUI.json", "0x0e28f400", "kUniversityResearchGreatWorksSolarPowerPlant 1"),
  textDescription : new scrui.cLocaleString("GlobalUI.json", "0x0e28fa12", "kUniversityResearchGreatWorksSolarPowerPlant 3"),
  textChooseType : new scrui.cLocaleString("GlobalUI.json",
    "0x0e28f401", "kUniversityResearchGreatWorksSolarPowerPlant 2"),
  lockedTextDescription : new scrui.cLocaleString("GlobalUI.json", "0x0e4208bb", "kUniversityResearchGreatWorksSolarPowerPlant 4"),
  lockedGlobalBin : simcity.kResourceIDNumberOfScienceWings,
  completedGlobalBin : simcity.kResourceIDPower_RegionalSolarPlant_Unlocked,
  researchCost : simcity.kPropResearch_Project2_ResearchCost,
  playerRule : simcity.kRuleIDSCPlayerRuleCycleResearch,
  finalizePlayerRule : simcity.kRuleIDSCPlayerRuleStartResearch
};
simcity.ToyTaskPanel.kUniversityResearchPowerWindLargeModule = {
  marqueeImage : "windPowerLargeTurbineModule.png",
  eventTitleText : new scrui.cLocaleString("GlobalUI.json", "0x0e704705", "kUniversityResearchPowerWindLargeModule 0"),
  textHeader : new scrui.cLocaleString("GlobalUI.json", "0x0e28f400", "kUniversityResearchPowerWindLargeModule 1"),
  textDescription : new scrui.cLocaleString("GlobalUI.json", "0x0e704715", "kUniversityResearchPowerWindLargeModule 3"),
  textChooseType : new scrui.cLocaleString("GlobalUI.json", "0x0e28f401",
    "kUniversityResearchPowerWindLargeModule 2"),
  lockedTextDescription : new scrui.cLocaleString("GlobalUI.json", "0x0e4208bc", "kUniversityResearchPowerWindLargeModule 4"),
  lockedGlobalBin : simcity.kResourceIDNumberOfEngineeringWings,
  completedGlobalBin : simcity.kResourceIDPowerGlobals_LargeTurbine_Unlocked,
  researchCost : simcity.kPropResearch_Project3_ResearchCost,
  playerRule : simcity.kRuleIDSCPlayerRuleCycleResearch,
  finalizePlayerRule : simcity.kRuleIDSCPlayerRuleStartResearch
};
simcity.ToyTaskPanel.kUniversityResearchPowerNuclearMediumGeneratorModule = {
  marqueeImage : "nuclearPowerMediumGeneratorModule.png",
  eventTitleText : new scrui.cLocaleString("GlobalUI.json", "0x0e28fa05", "kUniversityResearchPowerNuclearMediumGeneratorModule 0"),
  textHeader : new scrui.cLocaleString("GlobalUI.json", "0x0e28f400", "kUniversityResearchPowerNuclearMediumGeneratorModule 1"),
  textDescription : new scrui.cLocaleString("GlobalUI.json", "0x0e28fa15", "kUniversityResearchPowerNuclearMediumGeneratorModule 3"),
  textChooseType : new scrui.cLocaleString("GlobalUI.json", "0x0e28f401", "kUniversityResearchPowerNuclearMediumGeneratorModule 2"),
  lockedTextDescription : new scrui.cLocaleString("GlobalUI.json", "0x0e53285d", "kUniversityResearchPowerNuclearMediumGeneratorModule 4"),
  lockedGlobalBin : simcity.kResourceIDNumberOfScienceWings,
  completedGlobalBin : simcity.kResourceIDPower_Nuclear_Level2_Unlocked,
  researchCost : simcity.kPropResearch_Project4_ResearchCost,
  playerRule : simcity.kRuleIDSCPlayerRuleCycleResearch,
  finalizePlayerRule : simcity.kRuleIDSCPlayerRuleStartResearch
};
simcity.ToyTaskPanel.kUniversityResearchPowerNuclearLargeGeneratorModule = {
  marqueeImage : "nuclearPowerLargeGeneratorModule.png",
  eventTitleText : new scrui.cLocaleString("GlobalUI.json", "0x0e28fa06", "kUniversityResearchPowerNuclearLargeGeneratorModule 0"),
  textHeader : new scrui.cLocaleString("GlobalUI.json", "0x0e28f400", "kUniversityResearchPowerNuclearLargeGeneratorModule 1"),
  textDescription : new scrui.cLocaleString("GlobalUI.json", "0x0e28fa16", "kUniversityResearchPowerNuclearLargeGeneratorModule 3"),
  textChooseType : new scrui.cLocaleString("GlobalUI.json",
    "0x0e28f401", "kUniversityResearchPowerNuclearLargeGeneratorModule 2"),
  lockedTextDescription : new scrui.cLocaleString("GlobalUI.json", "0x0e53287e", "kUniversityResearchPowerNuclearLargeGeneratorModule 4"),
  lockedGlobalBin : simcity.kResourceIDPower_Nuclear_Level2_Unlocked,
  completedGlobalBin : simcity.kResourceIDPower_Nuclear_Level3_Unlocked,
  researchCost : simcity.kPropResearch_Project5_ResearchCost,
  playerRule : simcity.kRuleIDSCPlayerRuleCycleResearch,
  finalizePlayerRule : simcity.kRuleIDSCPlayerRuleStartResearch
};
simcity.ToyTaskPanel.kUniversityResearchPowerCoalCleanGeneratorModule = {
  marqueeImage : "PowerCoalCleanGeneratorModule.png",
  eventTitleText : new scrui.cLocaleString("GlobalUI.json", "0x0e28fa07", "kUniversityResearchPowerCoalCleanGeneratorModule 0"),
  textHeader : new scrui.cLocaleString("GlobalUI.json", "0x0e28f400", "kUniversityResearchPowerCoalCleanGeneratorModule 1"),
  textDescription : new scrui.cLocaleString("GlobalUI.json", "0x0e28fa17", "kUniversityResearchPowerCoalCleanGeneratorModule 3"),
  textChooseType : new scrui.cLocaleString("GlobalUI.json",
    "0x0e28f401", "kUniversityResearchPowerCoalCleanGeneratorModule 2"),
  lockedTextDescription : new scrui.cLocaleString("GlobalUI.json", "0x0e4208bc", "kUniversityResearchPowerCoalCleanGeneratorModule 4"),
  lockedGlobalBin : simcity.kResourceIDNumberOfEngineeringWings,
  completedGlobalBin : simcity.kResourceIDPower_Coal_Level3_Unlocked,
  researchCost : simcity.kPropResearch_Project6_ResearchCost,
  playerRule : simcity.kRuleIDSCPlayerRuleCycleResearch,
  finalizePlayerRule : simcity.kRuleIDSCPlayerRuleStartResearch
};
simcity.ToyTaskPanel.kUniversityResearchPowerOilCleanGeneratorModule = {
  marqueeImage : "PowerOilCleanGeneratorModule.png",
  eventTitleText : new scrui.cLocaleString("GlobalUI.json", "0x0e28fa09", "kUniversityResearchPowerOilCleanGeneratorModule 0"),
  textHeader : new scrui.cLocaleString("GlobalUI.json", "0x0e28f400", "kUniversityResearchPowerOilCleanGeneratorModule 1"),
  textDescription : new scrui.cLocaleString("GlobalUI.json", "0x0e28fa19", "kUniversityResearchPowerOilCleanGeneratorModule 3"),
  textChooseType : new scrui.cLocaleString("GlobalUI.json",
    "0x0e28f401", "kUniversityResearchPowerOilCleanGeneratorModule 2"),
  lockedTextDescription : new scrui.cLocaleString("GlobalUI.json", "0x0e4208bc", "kUniversityResearchPowerOilCleanGeneratorModule 4"),
  lockedGlobalBin : simcity.kResourceIDNumberOfEngineeringWings,
  completedGlobalBin : simcity.kResourceIDPower_OilCrude_Level3_Unlocked,
  researchCost : simcity.kPropResearch_Project7_ResearchCost,
  playerRule : simcity.kRuleIDSCPlayerRuleCycleResearch,
  finalizePlayerRule : simcity.kRuleIDSCPlayerRuleStartResearch
};
simcity.ToyTaskPanel.kUniversityResearchHealthSurgeryCenterModule = {
  marqueeImage : "HealthSurgeryCenterModule.png",
  eventTitleText : new scrui.cLocaleString("GlobalUI.json", "0x0e28fa0a", "kUniversityResearchHealthSurgeryCenterModule 0"),
  textHeader : new scrui.cLocaleString("GlobalUI.json", "0x0e28f400", "kUniversityResearchHealthSurgeryCenterModule 1"),
  textDescription : new scrui.cLocaleString("GlobalUI.json", "0x0e28fa1a", "kUniversityResearchHealthSurgeryCenterModule 3"),
  textChooseType : new scrui.cLocaleString("GlobalUI.json",
    "0x0e28f401", "kUniversityResearchHealthSurgeryCenterModule 2"),
  lockedTextDescription : new scrui.cLocaleString("GlobalUI.json", "0x0e4208bd", "kUniversityResearchHealthSurgeryCenterModule 4"),
  lockedGlobalBin : simcity.kResourceIDNumberOfMedicineWings,
  completedGlobalBin : simcity.kResourceIDSurgeryCenterUnlocked,
  researchCost : simcity.kPropResearch_Project8_ResearchCost,
  playerRule : simcity.kRuleIDSCPlayerRuleCycleResearch,
  finalizePlayerRule : simcity.kRuleIDSCPlayerRuleStartResearch
};
simcity.ToyTaskPanel.kUniversityResearchPoliceDetectiveWingModule = {
  marqueeImage : "PoliceDetectiveWingModule.png",
  eventTitleText : new scrui.cLocaleString("GlobalUI.json", "0x0e28fa0b", "kUniversityResearchPoliceDetectiveWingModule 0"),
  textHeader : new scrui.cLocaleString("GlobalUI.json", "0x0e28f400", "kUniversityResearchPoliceDetectiveWingModule 1"),
  textDescription : new scrui.cLocaleString("GlobalUI.json", "0x0e28fa1b", "kUniversityResearchPoliceDetectiveWingModule 3"),
  textChooseType : new scrui.cLocaleString("GlobalUI.json",
    "0x0e28f401", "kUniversityResearchPoliceDetectiveWingModule 2"),
  lockedTextDescription : new scrui.cLocaleString("GlobalUI.json", "0x0e4208be", "kUniversityResearchPoliceDetectiveWingModule 4"),
  lockedGlobalBin : simcity.kResourceIDNumberOfLawWings,
  completedGlobalBin : simcity.kResourceIDDetectiveWingUnlocked,
  researchCost : simcity.kPropResearch_Project9_ResearchCost,
  playerRule : simcity.kRuleIDSCPlayerRuleCycleResearch,
  finalizePlayerRule : simcity.kRuleIDSCPlayerRuleStartResearch
};
simcity.ToyTaskPanel.kUniversityResearchGreatWorksSpaceCenter = {
  marqueeImage : "greatWorksSpaceCenter.png",
  eventTitleText : new scrui.cLocaleString("GlobalUI.json", "0x0e74218d", "kUniversityResearchGreatWorksSpaceCenter1 0"),
  textHeader : new scrui.cLocaleString("GlobalUI.json", "0x0e28f400", "kUniversityResearchGreatWorksSpaceCenter1"),
  textDescription : new scrui.cLocaleString("GlobalUI.json", "0x0e74219d", "kUniversityResearchGreatWorksSpaceCenter2"),
  textChooseType : new scrui.cLocaleString("GlobalUI.json", "0x0e28f401",
    "kUniversityResearchGreatWorksSpaceCenter3"),
  lockedTextDescription : new scrui.cLocaleString("GlobalUI.json", "0x0e4208bc", "kUniversityResearchGreatWorksSpaceCenter4"),
  lockedGlobalBin : simcity.kResourceIDNumberOfEngineeringWings,
  completedGlobalBin : simcity.kResourceIDSpaceCenterUnlocked,
  researchCost : simcity.kPropResearch_Project10_ResearchCost,
  playerRule : simcity.kRuleIDSCPlayerRuleCycleResearch,
  finalizePlayerRule : simcity.kRuleIDSCPlayerRuleStartResearch
};
simcity.ToyTaskPanel.kMiningHQResearchImEx = {
  marqueeImage : "MiningHQResearch_ImEX.png",
  eventTitleText : new scrui.cLocaleString("GlobalUI.json", "0x0ed47bc0", "kMiningHQResearchImEx 0"),
  textHeader : new scrui.cLocaleString("GlobalUI.json", "0x0e28f400", "kMiningHQResearchImEx 1"),
  textDescription : new scrui.cLocaleString("GlobalUI.json", "0x0ed47bc1", "kMiningHQResearchImEx 3"),
  textChooseType : new scrui.cLocaleString("GlobalUI.json", "0x0e2a36d1", "kMiningHQResearchImEx 2"),
  lockedTextDescription : new scrui.cLocaleString("GlobalUI.json",
    "0x0e2a5567", "kMiningHQResearchImEx 4"),
  lockedGlobalBin : simcity.kResourceIDHQ_Mining_Commerce_Module_IsOn,
  researchCost : simcity.kPropResearch_Project1_ResearchCost,
  playerRule : simcity.kRuleIDSCPlayerRuleCycleResearch,
  finalizePlayerRule : simcity.kRuleIDSCPlayerRuleStartResearch
};
simcity.ToyTaskPanel.kMiningHQResearchAlloySmelting = {
  marqueeImage : "greatWorksStripMine.png",
  eventTitleText : new scrui.cLocaleString("GlobalUI.json", "0x0e76dfc6", "kMiningHQResearchAlloySmelting 0"),
  textHeader : new scrui.cLocaleString("GlobalUI.json", "0x0e28f400", "kMiningHQResearchAlloySmelting 1"),
  textDescription : new scrui.cLocaleString("GlobalUI.json", "0x0e76dfc7", "kMiningHQResearchAlloySmelting 3"),
  textChooseType : new scrui.cLocaleString("GlobalUI.json", "0x0e2a36d1", "kMiningHQResearchAlloySmelting 2"),
  lockedTextDescription : new scrui.cLocaleString("GlobalUI.json", "0x0e76dfc8", "kMiningHQResearchAlloySmelting 4"),
  lockedGlobalBin : simcity.kResourceIDHQ_Mining_RnD_Module_IsOn,
  researchCost : simcity.kPropResearch_Project2_ResearchCost,
  playerRule : simcity.kRuleIDSCPlayerRuleCycleResearch,
  finalizePlayerRule : simcity.kRuleIDSCPlayerRuleStartResearch
};
simcity.ToyTaskPanel.kOilHQResearchImEx = {
  marqueeImage : "OilHQResearch_ImEX.png",
  eventTitleText : new scrui.cLocaleString("GlobalUI.json", "0x0e2a5566", "kOilHQResearchImEx 0"),
  textHeader : new scrui.cLocaleString("GlobalUI.json", "0x0e28f400", "kOilHQResearchImEx 1"),
  textDescription : new scrui.cLocaleString("GlobalUI.json", "0x0e2a5568", "kOilHQResearchImEx 3"),
  textChooseType : new scrui.cLocaleString("GlobalUI.json", "0x0e2a36d1", "kOilHQResearchImEx 2"),
  lockedTextDescription : new scrui.cLocaleString("GlobalUI.json",
    "0x0e2a5567", "kOilHQResearchImEx 4"),
  lockedGlobalBin : simcity.kResourceIDHQ_Oil_Commerce_Module_IsOn,
  researchCost : simcity.kPropResearch_Project1_ResearchCost,
  playerRule : simcity.kRuleIDSCPlayerRuleCycleResearch,
  finalizePlayerRule : simcity.kRuleIDSCPlayerRuleStartResearch
};
simcity.ToyTaskPanel.kOilHQResearchPlastic = {
  marqueeImage : "OilHQResearch_Plastic.png",
  eventTitleText : new scrui.cLocaleString("GlobalUI.json", "0x0e2a5555", "kOilHQResearchPlastic 0"),
  textHeader : new scrui.cLocaleString("GlobalUI.json", "0x0e28f400", "kOilHQResearchPlastic 1"),
  textDescription : new scrui.cLocaleString("GlobalUI.json", "0x0e2a5557", "kOilHQResearchPlastic 3"),
  textChooseType : new scrui.cLocaleString("GlobalUI.json", "0x0e2a36d1", "kOilHQResearchPlastic 2"),
  lockedTextDescription : new scrui.cLocaleString("GlobalUI.json",
    "0x0e2a5556", "kOilHQResearchPlastic 4"),
  lockedGlobalBin : simcity.kResourceIDHQ_Oil_RnD_Module_IsOn,
  researchCost : simcity.kPropResearch_Project2_ResearchCost,
  playerRule : simcity.kRuleIDSCPlayerRuleCycleResearch,
  finalizePlayerRule : simcity.kRuleIDSCPlayerRuleStartResearch
};
simcity.ToyTaskPanel.kElectronicsHQResearchImEx = {
  marqueeImage : "ElectronicsHQResearch_ImEX.png",
  eventTitleText : new scrui.cLocaleString("GlobalUI.json", "0x0ed47b10", "kElectronicsHQResearchImEx 0"),
  textHeader : new scrui.cLocaleString("GlobalUI.json", "0x0e28f400", "kElectronicsHQResearchImEx 1"),
  textDescription : new scrui.cLocaleString("GlobalUI.json", "0x0ed47b11", "kElectronicsHQResearchImEx 3"),
  textChooseType : new scrui.cLocaleString("GlobalUI.json", "0x0e2a36d1", "kElectronicsHQResearchImEx 2"),
  lockedTextDescription : new scrui.cLocaleString("GlobalUI.json",
    "0x0e2a5567", "kElectronicsHQResearchImEx 4"),
  lockedGlobalBin : simcity.kResourceIDHQ_Electronics_Commerce_Module_IsOn,
  researchCost : simcity.kPropResearch_Project1_ResearchCost,
  playerRule : simcity.kRuleIDSCPlayerRuleCycleResearch,
  finalizePlayerRule : simcity.kRuleIDSCPlayerRuleStartResearch
};
simcity.ToyTaskPanel.kElectronicsHQResearchComputer = {
  marqueeImage : "hqElectronicsComputerAssembly.png",
  eventTitleText : new scrui.cLocaleString("GlobalUI.json", "0x0e30dfb0", "kElectronicsHQResearchComputer 0"),
  textHeader : new scrui.cLocaleString("GlobalUI.json", "0x0e28f400", "kElectronicsHQResearchComputer 1"),
  textDescription : new scrui.cLocaleString("GlobalUI.json", "0x0e30dfb2", "kElectronicsHQResearchComputer 3"),
  textChooseType : new scrui.cLocaleString("GlobalUI.json", "0x0e30dfb1", "kElectronicsHQResearchComputer 2"),
  lockedTextDescription : new scrui.cLocaleString("GlobalUI.json", "0x0e4208bf", "kElectronicsHQResearchComputer 4"),
  lockedGlobalBin : simcity.kResourceIDNumberOfElectronicHQsConsumerElectronicsWings,
  researchCost : simcity.kPropResearch_Project2_ResearchCost,
  playerRule : simcity.kRuleIDSCPlayerRuleCycleResearch,
  finalizePlayerRule : simcity.kRuleIDSCPlayerRuleStartResearch
};
simcity.ToyTaskPanel.GreatWorksArchology = {
  marqueeImage : "Marquee_Fire_Large_Dept.jpg",
  textHeader : new scrui.cLocaleString("Units.json", "0x0e25085a", "Name"),
  textDescription : new scrui.cLocaleString("Tools.json", "0x0e702dd9", "Description"),
  textChooseType : new scrui.cLocaleString("GlobalUI.json", "0x0e702e4a", "Choose Great Work"),
  playerRule : simcity.kRuleIDSCPlayerRuleCycleResearch,
  finalizePlayerRule : simcity.kRuleIDSCPlayerRuleStartResearch
};
simcity.ToyTaskPanel.GreatWorksInternationalAirport = {
  marqueeImage : "Marquee_Fire_Large_Dept.jpg",
  textHeader : new scrui.cLocaleString("Units.json", "0x0d92683a", "Name"),
  textDescription : new scrui.cLocaleString("Tools.json", "0x0e702fae", "Description"),
  textChooseType : new scrui.cLocaleString("GlobalUI.json", "0x0e702e4a", "Choose Great Work"),
  playerRule : simcity.kRuleIDSCPlayerRuleCycleResearch,
  finalizePlayerRule : simcity.kRuleIDSCPlayerRuleStartResearch
};
simcity.ToyTaskPanel.GreatWorksSolarFarm = {
  marqueeImage : "Marquee_Fire_Large_Dept.jpg",
  textHeader : new scrui.cLocaleString("Units.json", "0xad898303", "Name"),
  textDescription : new scrui.cLocaleString("Tools.json", "0x0e702fc9", "Description"),
  textChooseType : new scrui.cLocaleString("GlobalUI.json", "0x0e702e4a", "Choose Great Work"),
  playerRule : simcity.kRuleIDSCPlayerRuleCycleResearch,
  finalizePlayerRule : simcity.kRuleIDSCPlayerRuleStartResearch
};
simcity.ToyTaskPanel.GreatWorksSpaceCenter = {
  marqueeImage : "Marquee_Fire_Large_Dept.jpg",
  textHeader : new scrui.cLocaleString("Units.json", "0x0df17f0a", "Name"),
  textDescription : new scrui.cLocaleString("Tools.json", "0x0e702fef", "Description"),
  textChooseType : new scrui.cLocaleString("GlobalUI.json", "0x0e702e4a", "Choose Great Work"),
  playerRule : simcity.kRuleIDSCPlayerRuleCycleResearch,
  finalizePlayerRule : simcity.kRuleIDSCPlayerRuleStartResearch
};
simcity.ToyTaskPanelDataBindingsGreatWorks = [simcity.ToyTaskPanel.GreatWorksArchology, simcity.ToyTaskPanel.GreatWorksInternationalAirport, simcity.ToyTaskPanel.GreatWorksSolarFarm, simcity.ToyTaskPanel.GreatWorksSpaceCenter];
simcity.ToyTaskPanelDataBindingsUniversityResearch = [simcity.ToyTaskPanel.kUniversityResearchPowerSolarAdvancedPanelModule, simcity.ToyTaskPanel.kUniversityResearchGreatWorksSolarPowerPlant, simcity.ToyTaskPanel.kUniversityResearchPowerWindLargeModule, simcity.ToyTaskPanel.kUniversityResearchPowerNuclearMediumGeneratorModule, simcity.ToyTaskPanel.kUniversityResearchPowerNuclearLargeGeneratorModule, simcity.ToyTaskPanel.kUniversityResearchPowerCoalCleanGeneratorModule, simcity.ToyTaskPanel.kUniversityResearchPowerOilCleanGeneratorModule,
  simcity.ToyTaskPanel.kUniversityResearchHealthSurgeryCenterModule, simcity.ToyTaskPanel.kUniversityResearchPoliceDetectiveWingModule, simcity.ToyTaskPanel.kUniversityResearchGreatWorksSpaceCenter];
simcity.ToyTaskPanelDataBindingsCoalHQResearch = [simcity.ToyTaskPanel.kMiningHQResearchImEx, simcity.ToyTaskPanel.kMiningHQResearchAlloySmelting];
simcity.ToyTaskPanelDataBindingsOilHQResearch = [simcity.ToyTaskPanel.kOilHQResearchImEx, simcity.ToyTaskPanel.kOilHQResearchPlastic];
simcity.ToyTaskPanelDataBindingsElectronicsHQResearch = [simcity.ToyTaskPanel.kElectronicsHQResearchImEx, simcity.ToyTaskPanel.kElectronicsHQResearchComputer];
simcity.ToyTaskPanelLandmarkPicker = {
  textChooseType : new scrui.cLocaleString("GlobalUI.json", "0x0e70209c", "Choose Landmark"),
  textHeader : new scrui.cLocaleString("GlobalUI.json", "0x0e70209b", "Choose Landmark"),
  pickerTool : scrui.IDFromName("Plop_LandMarks_PickerTool"),
  tools : [[scrui.IDFromName("Plop_T_LandMarks_ArcdeTriumph_Base_01")], [scrui.IDFromName("Plop_T_LandMarks_CinquantenaireArch_Base_01")], [scrui.IDFromName("Plop_T_LandMarks_DutchWindmill_Base_01")], [scrui.IDFromName("Plop_T_LandMarks_EdificioCopan_Base_01")],
    [scrui.IDFromName("Plop_T_LandMarks_EmpireStateBuilding_Base_01")], [scrui.IDFromName("Plop_T_LandMarks_GiraldaTower_Base_01")], [scrui.IDFromName("Plop_T_LandMarks_GlobeTheatre_Base_01")], [scrui.IDFromName("Plop_T_LandMarks_KolnerDon_Base_01")], [scrui.IDFromName("Plop_T_Landmarks_Leaningtower_Base_01")], [scrui.IDFromName("Plop_T_LandMarks_OsloOperaHouse_Base_01")], [scrui.IDFromName("Plop_T_LandMarks_Rundetarn_Base_01")], [scrui.IDFromName("Plop_T_LandMarks_StatueOfLiberty_Base_01")], [scrui.IDFromName("Plop_T_LandMarks_StBasils_Base_01")],
    [scrui.IDFromName("Plop_T_LandMarks_StockholmCityHall_Base_01")], [scrui.IDFromName("Plop_T_LandMarks_SydneyOperaHouse_Base_01")], [scrui.IDFromName("Plop_T_LandMarks_TokyoTower_Base_01")], [scrui.IDFromName("Plop_T_LandMarks_WarsawCastle_Base_01")], [scrui.IDFromName("Plop_T_LandMarks_WashingtonMonument_Base_01")], [scrui.IDFromName("Plop_T_LandMarks_WillisSearsTower_Base_01")]]
};
simcity.ToyTaskPanelMayorsEarlyModulesPicker = {
  textHeader : new scrui.cLocaleString("GlobalUI.json", "0x0e70290f", "Mayors House Expansion"),
  textChooseType : new scrui.cLocaleString("GlobalUI.json", "0x0e77e3be", "Choose what to unlock"),
  tools : [[scrui.IDFromName("Plop_T_Government_Mayorshouse_T1_Flag_01")], [scrui.IDFromName("Plop_T_Government_Mayorshouse_T1_Fountain_01")], [scrui.IDFromName("Plop_T_Government_Mayorshouse_T1_Statue_01")], [scrui.IDFromName("Plop_T_Government_Mayorshouse_T1_Bbq_01")]]
};
simcity.ToyTaskPanelMayorsMidModulesPicker = {
  textHeader : new scrui.cLocaleString("GlobalUI.json", "0x0e70290f", "Mayors House Expansion"),
  textChooseType : new scrui.cLocaleString("GlobalUI.json", "0x0e77e3be", "Choose what to unlock"),
  tools : [[scrui.IDFromName("Plop_T_Government_Mayorshouse_T1_Balcony_01")], [scrui.IDFromName("Plop_T_Government_Mayorshouse_T1_Garage_01")], [scrui.IDFromName("Plop_T_Government_Mayorshouse_T1_Guesthouse_01")], [scrui.IDFromName("Plop_T_Government_Mayorshouse_T1_ExtensionWing_01")]]
};
simcity.ToyTaskPanelMayorsLateModulesPicker = {
  textHeader : new scrui.cLocaleString("GlobalUI.json", "0x0e70290f", "Mayors House Expansion"),
  textChooseType : new scrui.cLocaleString("GlobalUI.json", "0x0e77e3be", "Choose what to unlock"),
  tools : [[scrui.IDFromName("Plop_T_Government_Mayorshouse_T1_Garagelimo_01")], [scrui.IDFromName("Plop_T_Government_Mayorshouse_T1_PartyWing_01")], [scrui.IDFromName("Plop_T_Government_Mayorshouse_T1_Greenhouse_01")], [scrui.IDFromName("Plop_T_Government_Mayorshouse_T1_Tenniscourt_01")]]
};
simcity.ToyTaskPanelMayorsEndModulesPicker = {
  textHeader : new scrui.cLocaleString("GlobalUI.json", "0x0e70290f", "Mayors House Expansion"),
  textChooseType : new scrui.cLocaleString("GlobalUI.json", "0x0e77e3be", "Choose what to unlock"),
  tools : [[scrui.IDFromName("Plop_T_Government_Mayorshouse_T1_Tower_01")], [scrui.IDFromName("Plop_T_Government_Mayorshouse_T1_Helipad_01")], [scrui.IDFromName("Plop_T_Government_Mayorshouse_T1_Pool_01")], [scrui.IDFromName("Plop_T_Government_Mayorshouse_T1_Securitygate_01")]]
};
simcity.ToyTaskPanelCasinoHQModulesPicker = {
  textHeader : new scrui.cLocaleString("GlobalUI.json", "0x0e70290e", "HQ Expansion"),
  textChooseType : new scrui.cLocaleString("GlobalUI.json", "0x0e5eb2fd", "Choose Department"),
  tools : [[scrui.IDFromName("Plop_T_HQ_Casino_Commerce_01")], [scrui.IDFromName("Plop_T_HQ_Casino_Engineering_01")], [scrui.IDFromName("Plop_T_HQ_Casino_RnD_01")]]
};
simcity.ToyTaskPanelCasinoPicker = {
  textHeader : new scrui.cLocaleString("GlobalUI.json", "0x0e702547", "Choose a new Casino"),
  textChooseType : new scrui.cLocaleString("GlobalUI.json", "0x0e702548", "Choose the new casino you want"),
  tools : [[scrui.IDFromName("Plop_T_Tourism_SciFiCasino_T2_Base_01")], [scrui.IDFromName("Plop_T_Tourism_ElegantCasino_T2_Base_01")]]
};
simcity.ToyTaskPanelMiningHQModulesPicker = {
  textHeader : new scrui.cLocaleString("GlobalUI.json", "0x0e70290e", "HQ Expansion"),
  textChooseType : new scrui.cLocaleString("GlobalUI.json", "0x0e5eb2fd", "Choose Department"),
  tools : [[scrui.IDFromName("Plop_T_HQ_Mining_RnD_01")], [scrui.IDFromName("Plop_T_Hq_Mining_Commerce_01")], [scrui.IDFromName("Plop_T_Coal_T2_HQEng_01_01_N")]]
};
simcity.ToyTaskPanelOilHQModulesPicker = {
  textHeader : new scrui.cLocaleString("GlobalUI.json", "0x0e70290e", "HQ Expansion"),
  textChooseType : new scrui.cLocaleString("GlobalUI.json", "0x0e5eb2fd", "Choose Department"),
  tools : [[scrui.IDFromName("Plop_T_HQ_Oil_Commerce_01")], [scrui.IDFromName("Plop_T_HQ_Oil_RnD_01")]]
};
simcity.ToyTaskPanelTradeHQModulesPicker = {
  textHeader : new scrui.cLocaleString("GlobalUI.json", "0x0e70290e", "HQ Expansion"),
  textChooseType : new scrui.cLocaleString("GlobalUI.json", "0x0e5eb2fd", "Choose Department"),
  tools : [[scrui.IDFromName("Plop_T_Hq_Trade_Electronics_01")], [scrui.IDFromName("Plop_T_Hq_Trade_Metals_01")], [scrui.IDFromName("Plop_T_Hq_Trade_Petroleum_01")]]
};
simcity.ToyTaskPanelElectronicsHQModulesPicker = {
  textHeader : new scrui.cLocaleString("GlobalUI.json", "0x0e70290e", "HQ Expansion"),
  textChooseType : new scrui.cLocaleString("GlobalUI.json", "0x0e5eb2fd", "Choose Department"),
  tools : [[scrui.IDFromName("Plop_T_HQ_Electronics_Commerce_01")], [scrui.IDFromName("Plop_T_HQ_Electronics_Engineering_01")]]
};
simcity.ToyTaskPanelUniversityWingPicker = {
  textHeader : new scrui.cLocaleString("GlobalUI.json", "0x0e70290d", "University Expansion"),
  textChooseType : new scrui.cLocaleString("GlobalUI.json", "0x0e5eb2fd", "Choose Department"),
  tools : [[scrui.IDFromName("Plop_T_Edu_T2_BusinessWing_01_01_N")], [scrui.IDFromName("Plop_T_Edu_T2_DormWing_01_01_N")], [scrui.IDFromName("Plop_T_Edu_T2_EngineeringWing_01_01_N")], [scrui.IDFromName("Plop_T_Edu_T2_LawWing_01_01_N")], [scrui.IDFromName("Plop_T_Edu_T2_MedicineWing_01_01_N")],
    [scrui.IDFromName("Plop_T_Edu_T2_ScienceWing_01_01_N")]]
};
simcity.Pickers = [];
simcity.LoadingScreenUIHandler = {};
simcity.cLoadingScreenUIHandler = function () {
  this.mCityName = "";
  this.mRegionKey = null;
  this.mForwardingClickEvents = this.mRunning = !1;
  this.mQuips = this.mQuipText = this.mQuipAnimation = null;
  this.mEllipsisTimer = this.mQuipIndex = 0;
  this.mRegionBgAnimation = this.mCityNameAnimation = this.mMessageTitle = this.mMessageText = this.mMessageAnim = this.mMessages = this.mTips = this.mGlobalStats = null;
  this.mPageIds = {
    CITY_NAME : 247143561,
    QUIP_TEXT : 247143573,
    QUIP_ANIMATION : 247173114,
    STAT_TEXT : 247143566,
    STAT_TITLE : 248034197,
    STAT_ANIMATION : 247176065,
    CITYNAME_ANIMATION : 247230248,
    CREATING_REGION_WINDOW : 254076741,
    REGION_IMAGE : 247143542,
    REGION_BG_FADE_IN : 250271465
  };
  this.mLocaleString = {
    kTipTitle : new scrui.cLocaleString("LoadingScreen.json", "0x0ec8b40a"),
    kGlobalStatTitle : new scrui.cLocaleString("LoadingScreen.json", "0x0ebb1a9a")
  }
};
goog.inherits(simcity.cLoadingScreenUIHandler, simcity.cPanel2D);
simcity.cLoadingScreenUIHandler.kPanelControlId = 247149506;
simcity.cLoadingScreenUIHandler.kPanelAnimationId = 247224074;
simcity.cLoadingScreenUIHandler.kQuipDuration = 4E3;
simcity.cLoadingScreenUIHandler.kEllipsisInterval = 1E3;
simcity.cLoadingScreenUIHandler.kMessageDuration = 1E4;
simcity.cLoadingScreenUIHandler.kLoadingScreenConfigJson = "LoadingScreenConfig.json";
simcity.cLoadingScreenUIHandler.kGlobalStatsUri = "globalStats";
simcity.cLoadingScreenUIHandler.kDefaultBackDrop = "NotFound_LoadingBackDrop.png";
simcity.cLoadingScreenUIHandler.prototype.Initialize = function (a) {
  var b = gUIManager.FindControlByID(simcity.cLoadingScreenUIHandler.kPanelControlId),
  c = b.FindAnimationByID(simcity.cLoadingScreenUIHandler.kPanelAnimationId);
  this.InitPanel(b, c);
  this.Private_DoConfig();
  this.mQuipAnimation = this.FindAnimationByID(this.mPageIds.QUIP_ANIMATION);
  this.mQuipText = this.FindControlByID(this.mPageIds.QUIP_TEXT);
  this.mMessageAnim = this.FindAnimationByID(this.mPageIds.STAT_ANIMATION);
  this.mMessageText = this.FindControlByID(this.mPageIds.STAT_TEXT);
  this.mMessageTitle = this.FindControlByID(this.mPageIds.STAT_TITLE);
  this.mCityNameAnimation = this.FindAnimationByID(this.mPageIds.CITYNAME_ANIMATION);
  this.mRegionBgAnimation = this.FindAnimationByID(this.mPageIds.REGION_BG_FADE_IN);
  this.mForwardingClickEvents = !0 === a
};
simcity.cLoadingScreenUIHandler.prototype.SetCityName = function (a) {
  this.mCityName = a;
  this.mCityNameAnimation.Restart(scrui.cAnimation.kPlayForward);
  this.FindControlByID(this.mPageIds.CITY_NAME).SetRawText(a)
};
simcity.cLoadingScreenUIHandler.prototype.SetRegionByKey = function (a) {
  this.mRegionKey = a;
  var a = simcity.kRegionalDefaultCityInfo[a],
  b = simcity.cLoadingScreenUIHandler.kDefaultBackDrop;
  a && (b = a.regionLoadingImage || b);
  this.FindControlByID(this.mPageIds.REGION_IMAGE).SetWindowImage(b);
  this.mRegionBgAnimation.Restart(scrui.cAnimation.kPlayForward)
};
simcity.cLoadingScreenUIHandler.prototype.SetBoxDate = function (a) {
  a && (this.mCityName !== a.name && this.SetCityName(a.name), this.mRegionKey !== a.regionTemplateName && this.SetRegionByKey(a.regionTemplateName))
};
simcity.cLoadingScreenUIHandler.prototype.Show = function () {
  this.mRunning = !0;
  this.mQuipIndex = 0;
  this.mMessages = [];
  this.mMessageAnim.Reset(!1);
  this.mQuipAnimation.Reset(!1);
  this.mCityNameAnimation.Reset(!1);
  this.mRegionBgAnimation.Reset(!1);
  this.HideCreatingRegion();
  this.mTips && (this.mMessages = this.mMessages.concat(this.mTips));
  simcity.cPanel2D.prototype.Show.call(this);
  scrui.PostGameCommand(scrui.BuildCommand(["startLoadingScreen"]));
  this.Private_GetGlobalStats()
};
simcity.cLoadingScreenUIHandler.prototype.Hide = function () {
  this.mRunning = !1;
  simcity.cPanel2D.prototype.Hide.call(this);
  scrui.PostGameCommand(scrui.BuildCommand(["stopLoadingScreen"]))
};
simcity.cLoadingScreenUIHandler.prototype.ShowCreatingRegion = function () {
  this.FindControlByID(this.mPageIds.CREATING_REGION_WINDOW).SetVisibility(!0)
};
simcity.cLoadingScreenUIHandler.prototype.HideCreatingRegion = function () {
  this.FindControlByID(this.mPageIds.CREATING_REGION_WINDOW).SetVisibility(!1)
};
simcity.cLoadingScreenUIHandler.prototype.HandleGameEvent = function (a) {
  switch (a) {
  case simcity.kGameMessageGameLoaded:
    gErrorManager.Disable();
    this.GetPanelAnimation().RegisterEventCallback(scrui.cAnimation.kEventStopped, function () {
      window.close()
    });
    this.Hide();
    break;
  case simcity.kGameMessageTerrainExportStarted:
    simcity.gLoadingScreenUIHandler.ShowCreatingRegion();
    break;
  case simcity.kGameMessageTerrainExportEnded:
    simcity.gLoadingScreenUIHandler.HideCreatingRegion()
  }
};
simcity.cLoadingScreenUIHandler.prototype.HandleUIMessage = function (a, b, c) {
  switch (a) {
  case scrui.kMsgTypeButtonClicked:
    this.mForwardingClickEvents && simcity.gEventManager.TriggerEvent(simcity.gEventTypes.CLICK, b, c)
  }
};
simcity.cLoadingScreenUIHandler.prototype.TriggerLoadFailed = function () {
  simcity.cLauncher3D && gErrorManager.TriggerError(scrui.kErrorCode_RegionLoadFailed)
};
simcity.cLoadingScreenUIHandler.prototype.Update = function (a) {
  this.mRunning && (!this.GetPanelAnimation().IsPlaying() && this.GetPanelControl().GetAbsoluteVisibility()) && (this.Private_UpdateQuip(a), this.Private_UpdateMessages(a))
};
simcity.cLoadingScreenUIHandler.prototype.Private_UpdateQuip = function () {
  this.mQuips && !this.mQuipAnimation.IsPlaying() && (this.Private_SetQuip(this.mQuipIndex), this.mQuipAnimation.Restart(scrui.cAnimation.kPlayForward), this.mQuipIndex = (this.mQuipIndex + 1) % this.mQuips.length)
};
simcity.cLoadingScreenUIHandler.prototype.Private_UpdateMessages = function () {
  this.mMessages && !this.mMessageAnim.IsPlaying() && this.Private_SetNextMessage()
};
simcity.cLoadingScreenUIHandler.prototype.Private_SetQuip = function (a) {
  this.mQuipIndex = a;
  this.mQuipText.SetLocaleText(this.mQuips[this.mQuipIndex]);
  this.mQuipAnimation.Start(scrui.cAnimation.kPlayForward)
};
simcity.cLoadingScreenUIHandler.prototype.Private_SetNextMessage = function () {
  var a = Math.floor(Math.random() * this.mMessages.length),
  a = this.mMessages.splice(a, 1)[0];
  if (0 == this.mMessages.length && (this.mTips && (this.mMessages = this.mMessages.concat(this.mTips)), this.mGlobalStats))
    this.mMessages = this.mMessages.concat(this.mGlobalStats);
  a && (a instanceof scrui.cLocaleString ? (this.mMessageTitle.SetLocaleText(this.mLocaleString.kTipTitle), this.mMessageText.SetLocaleText(a)) : (this.mMessageTitle.SetLocaleText(this.mLocaleString.kGlobalStatTitle),
      this.mMessageText.SetLocaleText(scrui.ParseLocaleString(a.description), {
        statvalue : a.statValue
      })), this.mMessageAnim.Restart(scrui.cAnimation.kPlayForward))
};
simcity.cLoadingScreenUIHandler.prototype.Private_DoConfig = function () {
  var a = this;
  scrui.XHR.Request({
    url : simcity.cLoadingScreenUIHandler.kLoadingScreenConfigJson,
    onSuccess : function (b) {
      var c = b.json.quips,
      b = b.json.tips;
      a.mQuips = [];
      for (var d in c)
        a.mQuips.push(scrui.ParseLocaleString(c[d]));
      a.mTips = [];
      for (d in b)
        a.mTips.push(scrui.ParseLocaleString(b[d]))
    },
    onError : function () {},
    method : "get"
  })
};
simcity.cLoadingScreenUIHandler.prototype.Private_GetGlobalStats = function () {
  var a = this,
  b = {
    url : scrui.GetRestPath().replace("/simcity/rest", "/citylog") + simcity.cLoadingScreenUIHandler.kGlobalStatsUri,
    onSuccess : function (b) {
      a.mGlobalStats = b.json.GlobalStats;
      a.mGlobalStats && (a.mMessages = a.mMessages.concat(a.mGlobalStats))
    },
    onError : function () {},
    method : "get"
  };
  scrui.XHR.Request(b)
};
simcity.gLoadingScreenUIHandler = new simcity.cLoadingScreenUIHandler;
simcity.RegionMessageRouter = {};
simcity.cServerMessage = function (a, b) {
  this.mText = b;
  this.mDataBinding = a;
  this.mHyperLink = a.hasOwnProperty("hyperlink") ? a.hyperlink : null;
  this.mUnitRef = a.hasOwnProperty("unitRef") ? a.unitRef : null;
  this.mLayoutPath = a.hasOwnProperty("layoutPath") ? a.layoutPath : null;
  this.mIconPath = a.hasOwnProperty("iconPath") ? a.iconPath : null;
  this.mDetokenizers = a.detokenizers
};
simcity.cRegionMessageRouter = function () {};
goog.inherits(simcity.cRegionMessageRouter, scrui.cUIHandler);
simcity.cRegionMessageRouter.prototype.Init = function () {};
simcity.cRegionMessageRouter.prototype.HandleGameEvent = function (a, b) {
  switch (a) {
  case simcity.kGameMessageUnitRuleUIEvent:
  case simcity.kGameMessageGlobalRuleUIEvent:
    if (simcity.RegionMessageEvents.hasOwnProperty(b.eventID)) {
      var c = simcity.RegionMessageEvents[b.eventID];
      if (!c.hasOwnProperty("displayCountLimit") || 0 < c.displayCountLimit) {
        var d = simcity.gGlobalUIHandler.mGameTimeManager.GetTotalElapsedGameTimeSeconds();
        if (!c.hasOwnProperty("timeToFire") || d > c.timeToFire) {
          var e = c.triggerTime ? Math.random() * (c.triggerTime[1] -
              c.triggerTime[0]) + c.triggerTime[0] : 0;
          c.timeToFire = d + e;
          if (d = b.unitRef ? scrui.RequestStringFromUnitRef(b.unitRef) : null) {
            e = [];
            simcity.AddSimpleQueriesWithUnitRefReplacement(e, c.queries, d);
            var f = c.queries ? [Object.keys(c.queries)] : [[]];
            c.isRegional && (e.push(scrui.BuildRequestQuery([simcity.kDataUnits, d, simcity.kDataBinAmount, simcity.kResourceRegionalBoxUniqueID])), f[0].push("regionalBoxUniqueID"));
            c.unitName && (e.push(scrui.BuildRequestQuery([simcity.kDataUnits, d, simcity.kDataUnitName])), f[0].push("unitName"));
            simcity.RequestDataBindingDataSimple(e, f, function (a) {
              a = a[0];
              (!c.hasOwnProperty("test") || c.test(a)) && simcity.AddRegionMessageHelper(c, a)
            })
          }
        }
      }
    }
  }
};
simcity.cRegionMessageRouter.prototype.PrintDebugInfo = function () {
  simcity.DEBUG && scrui.DebugPrint("cRegionMessageRouter dataBindings = " + Object.keys(simcity.RegionMessageEvents).length)
};
simcity.AddRegionMessageHelper = function (a, b) {
  var c = "",
  d = "",
  e = null,
  f = simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData.mPlayingBox,
  g = f.hasOwnProperty("creatorId") ? f.creatorId : null,
  h = f.hasOwnProperty("name") ? f.name : "",
  f = null !== g ? simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData.mPlayers[f.creatorId].screenName : "",
  i = simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData.mRegionName,
  j = b.unitName,
  k = "" != h && "" != f;
  if (b.regionalBoxUniqueID) {
    if (e = simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData.mBoxes[b.regionalBoxUniqueID])
      if (c =
          e.name, e = e.creatorId)
        d = simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData.mPlayers[e].screenName;
    k &= "" != c && "" != d
  }
  if (k) {
    k = Object.keys(b);
    e = (a.tableName || "AutomatedWallMessages") + ".json!" + scrui.DecimalToHex(a.stringID) + "|";
    e = e + ("friend_city_name:" + c + "|friend_player_name:" + d + "|region_name:" + i) + ("|local_city_name:" + h + "|local_player_name:" + f);
    j && (c = scrui.DecimalToHex(j.stringID), e += "|unit_name:Units.json!" + c);
    for (var l in k)
      null !== b[k[l]] && (b[k[l]].amount && "unitName" !== k[l]) && (e += "|" + k[l] + ":" + b[k[l]].amount);
    simcity.PostRegionMessage({
      title : "Region Message",
      textLink : "{userID:" + g + ",regionID:" + simcity.gGlobalUIHandler.mRegionID + "}",
      message : e,
      priority : a.priority
    }, a)
  }
};
simcity.ManuallyTriggerRegionWallMessage = function (a, b) {
  var c = "",
  d = "",
  e = null,
  f = simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData.mPlayingBox,
  e = f.hasOwnProperty("creatorId") ? f.creatorId : null,
  g = f.hasOwnProperty("name") ? f.name : "",
  e = null !== e ? simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData.mPlayers[f.creatorId].screenName : "",
  f = simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData.mRegionName,
  g = "" != g && "" != e;
  if (null !== b.regionalBoxUniqueID) {
    if (e = simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData.mBoxes[b.regionalBoxUniqueID])
      if (c =
          e.name, e = e.creatorId)
        d = simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData.mPlayers[e].screenName;
    g &= "" != c && "" != d
  }
  g && (a = scrui.DecimalToHex(simcity.RegionMessageEvents[a].stringID), c = (new scrui.cLocaleString("AutomatedWallMessages.json", a, "A player has entered or left the region")).LoadAndGetTextSynchronous({
      friend_player_name : d,
      region_name : f,
      friend_city_name : c
    }), simcity.gGlobalUIHandler.mRegionWallUI.CreateMessageDirect(c, simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData.mBoxes[b.regionalBoxUniqueID].creator,
      "event"))
};
simcity.PostRegionMessage = function (a) {
  if (0 !== simcity.gGlobalUIHandler.mActiveBoxUID) {
    var b = a.title,
    c = a.textLink || "",
    d = a.message,
    e = a.priority;
    if ("" !== b && "" !== d) {
      var f = scrui.GetRestPath().replace("/simcity/rest", "/citylog/json") + "regionWallService/writeFeed";
      scrui.XHR.Request({
        url : f,
        params : [["region", simcity.gGlobalUIHandler.mRegionID], ["persist", !0], ["title", b], ["textLink", c], ["description", d], ["data", a.playerName + "," + a.cityName + (a.detokenizers ? "," + a.detokenizers : "")], ["priority", e]],
        onSuccess : function () {},
        onError : function () {},
        method : "post"
      })
    }
  }
};
simcity.OneShotGameEventListener = {};
simcity.cOneShotGameEventListener = function () {
  this.mOneShotCallbacks = {}

};
goog.inherits(simcity.cOneShotGameEventListener, scrui.cUIHandler);
simcity.cOneShotGameEventListener.prototype.Initialize = function () {
  gUIManager.RegisterUIHandler(this);
  gUIManager.EnableGameEventProcessing()
};
simcity.cOneShotGameEventListener.prototype.HandleGameEvent = function (a, b) {
  var c = this.mOneShotCallbacks[a];
  if (c) {
    for (; 0 < c.length; ) {
      var d = c.pop();
      d && d(b)
    }
    this.mOneShotCallbacks[a] = null
  }
};
simcity.cOneShotGameEventListener.prototype.AddOneShotCallback = function (a, b) {
  var c = this.mOneShotCallbacks[a];
  c ? c.push(b) : c = [b];
  this.mOneShotCallbacks[a] = c
};
simcity.gOneShotGameEventListener = new simcity.cOneShotGameEventListener;
simcity.MayorRating = {};
simcity.cMayorRating = function () {
  this.mOriginalLittleSubBarWidth = 0;
  this.mDataBinding = void 0;
  this.mIteratorIndex = this.mLastCheckTime = 0;
  this.mTimeBetweenUpdates = 5E3;
  this.mRolloverWindow = this.mMainWindow = void 0;
  this.mResidentialAlerts = {
    W1 : [],
    W2 : [],
    W3 : []
  };
  this.mCommercialAlerts = {
    W1 : [],
    W2 : [],
    W3 : []
  };
  this.mIndustrialAlerts = {
    W1 : [],
    W2 : [],
    W3 : []
  };
  this.mMiniBars = Array(9);
  this.mNewCategoryAlerts = [];
  this.mRolloverLocked = !1;
  this.mLastControlClicked = void 0;
  this.mSubBarWithFocus = -1;
  this.mLastVisibilityCheck = !1
};
goog.inherits(simcity.cMayorRating, scrui.cUIHandler);
simcity.cMayorRating.kWinMayorFocusArea = 246554447;
simcity.cMayorRating.kWinMayorRatingFillBar = 244920674;
simcity.cMayorRating.kWinMainContainer = 244917851;
simcity.cMayorRating.kResidentialButton = 247229696;
simcity.cMayorRating.kResidentContainer = 233939066;
simcity.cMayorRating.kContainerResidentialW1 = 245514769;
simcity.cMayorRating.kContainerResidentialW1Button = 246549664;
simcity.cMayorRating.kLocalizeVerySad = 244918810;
simcity.cMayorRating.kBtnMainHappyFace = 245104273;
simcity.cMayorRating.kBtnClose = 240419370;
simcity.cMayorRating.kBarLabel = 245353708;
simcity.cMayorRating.kSpeechBubbleWin = 246065350;
simcity.cMayorRating.kSpeechBubbleText = 205505356;
simcity.cMayorRating.kContainerRollover = 245881757;
simcity.cMayorRating.kRolloverTitle = 245881489;
simcity.cMayorRating.kCarrot = 246051008;
simcity.cMayorRating.kRolloverFirstItem = 245881938;
simcity.cMayorRating.kRolloverItemText = 245880460;
simcity.cMayorRating.kRolloverItemButton = 185281790;
simcity.cMayorRating.kRolloverTitle = 245881489;
simcity.cMayorRating.kRolloverCloseButton = 246551492;
simcity.cMayorRating.kAlertWindow = 246069179;
simcity.cMayorRating.kMayorRatingPercentText = 205505358;
simcity.cMayorRating.kContainerSubHappyFace = 245515237;
simcity.cMayorRating.kHappyFaceIcons = 210443385;
simcity.cMayorRating.kWinSubBar = 245354122;
simcity.cMayorRating.kWinRedSubBar = 245354064;
simcity.cMayorRating.kTrendArrowBase = 246652352;
simcity.cMayorRating.kUIResidentialW1 = 3000398761;
simcity.cMayorRating.kUIIndustrialW1 = 14091500;
simcity.cMayorRating.kUIIndustrialW2 = 14091503;
simcity.cMayorRating.kUIIndustrialW3 = 14091502;
simcity.cMayorRating.kUICommercialW1 = 3635297831;
simcity.cMayorRating.kUICommercialW2 = 3635297828;
simcity.cMayorRating.kUICommercialW3 = 3635297829;
simcity.cMayorRating.kUICivic = 1732323837;
simcity.cMayorRating.kPaletteInfoPanelText = "PaletteInfoPanel.json";
simcity.cMayorRating.kTextFeedbackToyRolloverText = "TextFeedbackToyRollover.json";
simcity.cMayorRating.kTextProtestCrime = 241634214;
simcity.cMayorRating.kTextProtestCrimeAtBuilding = 241634214;
simcity.cMayorRating.kTextProtestDeath = 209485958;
simcity.cMayorRating.kTextProtestGarbage = 4048038640;
simcity.cMayorRating.kTextProtestGerms = 1575469330;
simcity.cMayorRating.kTextProtestHomeless = 250104658;
simcity.cMayorRating.kTextProtestInjury = 250104659;
simcity.cMayorRating.kTextProtestDesirability = 241634213;
simcity.cMayorRating.kTextProtestEducation = 250104660;
simcity.cMayorRating.kTextProtestPower = 241634210;
simcity.cMayorRating.kTextProtestRent = 241634212;
simcity.cMayorRating.kTextProtestSkill = 250104660;
simcity.cMayorRating.kTextProtestNoWorkers = 250104661;
simcity.cMayorRating.kTextProtestOperational = 250104661;
simcity.cMayorRating.kTextProtestWater = 241634209;
simcity.cMayorRating.kTextProtestPark = 241634214;
simcity.cMayorRating.kTextProtestPollution = 241634208;
simcity.cMayorRating.kTextProtestSewage = 250104662;
simcity.cMayorRating.kTextProtestSickness = 241295628;
simcity.cMayorRating.kTextProtestTaxes = 241295627;
simcity.cMayorRating.kTextProtestUnemployment = 250104663;
simcity.kLittleSubBarLabelArray = [];
simcity.cMayorRating.kOriginalBigSubBarWidth = 0;
simcity.cMayorRating.kOriginalLittleSubBarWidth = 0;
simcity.cMayorRating.kMaxSubAlerts = 5;
simcity.cMayorRating.kBtnIDToggleLayer = 209485958;
simcity.cMayorRating.prototype.Init = function () {
  this.mMainWindow = gUIManager.FindControlByID(simcity.cMayorRating.kWinMainContainer);
  this.mRolloverWindow = this.mMainWindow.FindControlByID(simcity.cMayorRating.kContainerRollover);
  this.UIHandler = scrui.cUIHandler;
  this.UIHandler();
  var a = gUIManager.FindControlByID(simcity.cMayorRating.kResidentContainer);
  void 0 != a && (a = a.FindControlByID(simcity.cMayorRating.kWinSubBar), simcity.cMayorRating.mOriginalBigSubBarWidth = a.mWidth);
  for (a = 0; 9 > a; a++) {
    var b = gUIManager.FindControlByID(simcity.cMayorRating.kContainerResidentialW1 +
        a);
    this.mMiniBars[a] = b;
    void 0 !== b && null !== b && (b = gUIManager.LoadLayout("Layouts/GlobalUI/MayorRatingLittleButtonMeter.js", b), 0 === simcity.cMayorRating.mOriginalLittleSubBarWidth && (b = b.FindControlByID(simcity.cMayorRating.kWinSubBar), simcity.cMayorRating.mOriginalLittleSubBarWidth = b.mWidth))
  }
  simcity.kLittleSubBarLabelArray = [new scrui.cLocaleString("MayorRating.json", "0x0e992a0a", "Low Wealth Happiness"), new scrui.cLocaleString("MayorRating.json", "0x0e992a09", "Medium Wealh  Happiness"), new scrui.cLocaleString("MayorRating.json",
      "0x0e992a08", "High Wealth Happiness"), new scrui.cLocaleString("MayorRating.json", "0x0e992a12", "Low Wealth Commercial"), new scrui.cLocaleString("MayorRating.json", "0x0e992a10", "Medium Wealh Commercial"), new scrui.cLocaleString("MayorRating.json", "0x0e992a0f", "High Wealth Commercial"), new scrui.cLocaleString("MayorRating.json", "0x0e992a15", "Low Industrial"), new scrui.cLocaleString("MayorRating.json", "0x0e992a14", "Mediuam Industrial"), new scrui.cLocaleString("MayorRating.json", "0x0e992a13", "High Industrial")];
  this.mDataBinding = simcity.kMayorRatingInfo;
  this.mSubBarWithFocus = -1;
  this.mLastVisibilityCheck = !1
};
simcity.cMayorRating.prototype.UpdateData = function () {
  this.mResidentialAlerts = {
    W1 : [],
    W2 : [],
    W3 : []
  };
  this.mCommercialAlerts = {
    W1 : [],
    W2 : [],
    W3 : []
  };
  this.mIndustrialAlerts = {
    W1 : [],
    W2 : [],
    W3 : []
  };
  var a = this.mMainWindow.FindControlByID(simcity.cMayorRating.kSpeechBubbleWin);
  a && a.SetVisibility(!1);
  var b = this,
  a = [],
  c = [this.mDataBinding.alertQueries, this.mDataBinding.categoryInfoQueries, this.mDataBinding.barInfoQueries],
  d = [this.mDataBinding, this.mDataBinding, this.mDataBinding];
  simcity.AddSimpleQueries(a, this.mDataBinding.alertQueries);
  simcity.AddSimpleQueries(a, this.mDataBinding.categoryInfoQueries);
  simcity.AddSimpleQueries(a, this.mDataBinding.barInfoQueries);
  simcity.RequestDataBindingData(a, d, c, !1, function (a) {
    var c = b.mDataBinding;
    c.updateCategoryInfo(a[0], a[1]);
    c.updateBars(a[2])
  });
  this.UpdateAlertItems()
};
simcity.cMayorRating.prototype.CloseRollover = function () {
  this.mRolloverWindow.SetVisibility(!1);
  this.UnlockRollover();
  this.mSubBarWithFocus = -1
};
simcity.cMayorRating.prototype.HandleUIMessage = function (a, b, c) {
  if (a == scrui.kMsgTypeButtonClicked)
    if (simcity.cMayorRating.kRolloverCloseButton == b)
      this.CloseRollover();
    else if (simcity.cMayorRating.kBtnClose == b)
      this.CloseMayorPanel();
    else if (b === simcity.cMayorRating.kBtnIDToggleLayer) {
      var d = this,
      e = c.mUserData,
      a = ["layers", e.layerID, "nextIteratorIndex", d.mIteratorIndex, 0],
      a = a.concat(e.alertType),
      a = [scrui.BuildRequestQuery(a)];
      scrui.RequestGameData(a, function (a) {
        var b = ["jumpToAlert", e.layerID, d.mIteratorIndex,
          0],
        b = b.concat(e.alertType);
        scrui.PostGameCommand(scrui.BuildCommand(b));
        d.mIteratorIndex = a[0]
      })
    } else
      b >= simcity.cMayorRating.kContainerResidentialW1Button && b < simcity.cMayorRating.kContainerResidentialW1Button + 9 ? this.mLastControlClicked === b ? this.UnlockRollover() : (!0 == this.mRolloverLocked && this.ShowRollover(b - simcity.cMayorRating.kContainerResidentialW1Button), this.LockRollover(b)) : 247323384 === b ? this.SubAlertArrowClicked(c.mParentControl.mParentControl.mControlID) : simcity.cMayorRating.kBtnMainHappyFace ==
      b ? this.UpdateData() : b >= simcity.cMayorRating.kResidentialButton && b < simcity.cMayorRating.kResidentialButton + 3 && this.CloseRollover();
  else
    scrui.kMsgTypeButtonLoseFocus == a ? !1 == this.mRolloverLocked && simcity.cMayorRating.kWinMayorFocusArea == b.controlID && this.CloseRollover() : scrui.kMsgTypeButtonGainFocus == a && (simcity.cMayorRating.kBtnMainHappyFace == b.controlID ? (b = simcity.kGlobalUIMayorRating.lastMayorRating / 20, 5 <= b && (b = 4), b = Math.floor(b), a = gUIManager.FindControlByID(simcity.cMayorRating.kBtnMainHappyFace),
        b = simcity.cMayorRating.kLocalizeVerySad + b, a && (a.SetTooltipLocaleText(new scrui.cLocaleString("MayorRating.json", "0x0" + b.toString(16), "HOLDER")), b = new scrui.cLocaleString("MayorRating.json", "0x0e992a01"), b.LoadString(), a.mTooltipText += b.mRawString)) : !1 === this.mRolloverLocked && (b.controlID >= simcity.cMayorRating.kContainerResidentialW1Button && b.controlID < simcity.cMayorRating.kContainerResidentialW1Button + 9) && this.ShowRollover(b.controlID - simcity.cMayorRating.kContainerResidentialW1Button))
};
simcity.cMayorRating.prototype.CloseMayorPanel = function () {
  this.IsVisible() && gUIManager.FindControlByID(simcity.cMayorRating.kBtnMainHappyFace).SetSelected(!1)
};
simcity.cMayorRating.prototype.IsVisible = function () {
  return gUIManager.FindControlByID(simcity.cMayorRating.kBtnMainHappyFace).mIsSelected
};
simcity.cMayorRating.prototype.HandleGameEvent = function (a, b) {
  switch (a) {
  case simcity.kMessageKeyTrigger:
    if (simcity.IsTutorialInProgress() || simcity.IsOptionMenuVisible() || simcity.IsMouseEatingWindowVisible())
      break;
    switch (b.triggerCode) {
    case simcity.kKeyTrigger_MayorPanel:
      var c = gUIManager.FindControlByID(245104273);
      c.mIsSelected ? (this.CloseMayorPanel(), c.SetSelected(!1)) : (c.SetSelected(!0), this.UpdateData())
    }
  }
};
simcity.cMayorRating.prototype.SubAlertArrowClicked = function (a) {
  if (-1 != this.mSubBarWithFocus) {
    var a = a - simcity.cMayorRating.kRolloverFirstItem,
    b = void 0,
    b = 3 > this.mSubBarWithFocus ? this.mResidentialAlerts : 6 > this.mSubBarWithFocus ? this.mCommercialAlerts : this.mIndustrialAlerts,
    c = this.mSubBarWithFocus % 3,
    d = "";
    0 == c ? d = "W1" : 1 == c ? d = "W2" : 2 == c && (d = "W3");
    b = b[d];
    b.sort(function (a, b) {
      return b.count - a.count
    });
    a < b.length && (a = b[a].showMeCommand, void 0 != a && ("function" === typeof a.type ? a.type(a.argument) : a.type === simcity.cMayorRating.kHashLayer ?
        (simcity.gGlobalUIHandler.mLayerUIHandler.ActivateLayer(a.argument), this.CloseMayorPanel()) : a.type === simcity.cMayorRating.kHashPalette && (simcity.gGlobalUIHandler.mToolPaletteUIHandler.OpenToolPanelFromID(a.argument), this.CloseMayorPanel())))
  }
};
simcity.cMayorRating.prototype.LockRollover = function (a) {
  this.mRolloverLocked = !0;
  this.mLastControlClicked = a;
  (a = this.mMainWindow.FindControlByID(simcity.cMayorRating.kRolloverCloseButton)) && a.SetVisibility(!0)
};
simcity.cMayorRating.prototype.UnlockRollover = function () {
  this.mRolloverLocked = !1;
  this.mLastControlClicked = void 0;
  var a = this.mMainWindow.FindControlByID(simcity.cMayorRating.kRolloverCloseButton);
  a && a.SetVisibility(!1)
};
simcity.cMayorRating.prototype.ShowRollover = function (a) {
  var b = void 0,
  b = 3 > a ? this.mResidentialAlerts : 6 > a ? this.mCommercialAlerts : this.mIndustrialAlerts,
  c = a % 3,
  d = "";
  0 == c ? d = "W1" : 1 == c ? d = "W2" : 2 == c && (d = "W3");
  b = b[d];
  c = b.length;
  if (0 < c) {
    this.mRolloverWindow.SetVisibility(!0);
    b.sort(function (a, b) {
      return b.count - a.count
    });
    this.mSubBarWithFocus = a;
    for (d = 0; d < simcity.cMayorRating.kMaxSubAlerts; d++) {
      var e = this.mMainWindow.FindControlByID(simcity.cMayorRating.kRolloverFirstItem + d);
      e.SetVisibility(!1)
    }
    c = Math.min(c, simcity.cMayorRating.kMaxSubAlerts);
    for (d = 0; d < c; d++) {
      e = this.mMainWindow.FindControlByID(simcity.cMayorRating.kRolloverFirstItem + d);
      e.SetVisibility(!0);
      var e = e.FindControlByID(simcity.cMayorRating.kRolloverItemText),
      f = new scrui.cLocaleString(b[d].label.jsonFile, b[d].label.textHash);
      f.LoadString();
      e.SetLocaleText(f, !0);
      e.SetTextColor(b[d].color);
      this.mMainWindow.FindControlByID(simcity.cMayorRating.kRolloverTitle).SetLocaleText(simcity.kLittleSubBarLabelArray[a]);
      var e = this.mRolloverWindow.FindControlByID(simcity.cMayorRating.kCarrot),
      f = this.mMiniBars[a].GetAbsolutePosition(),
      g = e.ConvertAbsoluteToParentSpace(f[0], f[1], g);
      e.SetPosition(e.mLeft, g[1], e.mWidth, e.mHeight)
    }
  } else
    this.CloseRollover()
};
simcity.cMayorRating.prototype.Update = scrui.Client_ProfZone("cMayorRating.Update", function (a) {
    if (!0 == this.mMainWindow.mIsVisible) {
      this.mLastCheckTime += a;
      if (this.mLastCheckTime > this.mTimeBetweenUpdates || !1 == this.mLastVisibilityCheck) {
        this.mLastCheckTime = 0;
        this.UpdateData();
        var a = this.mMainWindow.FindControlByID(244903423),
        b = a.mParentControl;
        b.SetPosition(b.mLeft, b.mTop, b.mWidth, a.GetTextHeight() + 10)
      }
      this.mLastVisibilityCheck = !0
    } else
      this.mLastVisibilityCheck = !1
  });
simcity.cMayorRating.prototype.UpdateAlertItems = function (a, b, c) {
  for (var b = this.mMainWindow.FindControlByID(simcity.cMayorRating.kAlertWindow), a = !b.mChildren, d = this.mNewCategoryAlerts, e = 0, f = d.length, g = 0; e < f; ++e) {
    var h = d[e];
    if (a) {
      var i = gUIManager.LoadAndCacheLayout(h.layoutPath, b).FindControlByID(simcity.cAlertsUI.kBtnIDToggleLayer);
      i.mUserData = {
        layerID : h.layerID,
        alertType : h.alertType,
        MayorRating : !0
      };
      i.mParentControl.mUserData = c
    }
    var i = b.mChildren[e],
    j = 0 < h.count;
    i.SetVisibility(j);
    j && (i.SetPosition(i.mWidth *
        g++, 0), (i = i.FindControlByID(simcity.kTxtAlertCount)) && i.UpdateLocaleText({
        alertCount : h.count
      }))
  }
  return !1
};
simcity.cMayorRating.prototype.UpdateContextPanel = function (a, b) {
  var c = this.mMainWindow.FindControlByID(simcity.cMayorRating.kSpeechBubbleWin);
  if (c) {
    var d = c.FindControlByID(simcity.cMayorRating.kSpeechBubbleText);
    if (d) {
      var e = new scrui.cLocaleString(a, b);
      e.LoadString();
      d.SetLocaleText(e, !0);
      c.SetVisibility(!0)
    }
  }
};
simcity.cMayorRating.prototype.AddRolloverAlert = function (a, b, c, d, e, f) {
  d || (d = void 0);
  e || (e = 0);
  f || (f = "black");
  var g = void 0;
  "Residential" === a ? g = this.mResidentialAlerts[b] : "Commercial" === a ? g = this.mCommercialAlerts[b] : "Industrial" === a && (g = this.mIndustrialAlerts[b]);
  void 0 != g && g.push({
    showMeCommand : d,
    count : e,
    label : c,
    color : f
  })
};
simcity.cMayorRating.prototype.AddAlert = function (a, b, c, d, e) {
  for (var a = this.mNewCategoryAlerts, f = !1, g = 0, h = a.length; g < h; ++g) {
    var i = a[g];
    if (i.layoutPath === b && i.alertType === c) {
      i.count = d;
      f = !0;
      break
    }
  }
  f || a.push({
    layerID : e,
    layoutPath : b,
    alertType : c,
    count : d
  })
};
simcity.OriginUtilities = {};
simcity.cOriginUtilities = {};
simcity.cOriginUtilities.kFeedbackUrl = "https://www.simcity.com/~locale~/beta/feedback";
simcity.cOriginUtilities.kReportBugUrl = "https://www.simcity.com/~locale~/beta/bugreport";
simcity.cOriginUtilities.kJoinPrefix = "SimCity-";
simcity.cOriginUtilities.ConsumeInviteString = function (a) {
  var b = [scrui.BuildRequestQuery(["origin", "InviteString"])];
  scrui.RequestGameData(b, function (b) {
    var b = b[0] ? b[0] : "",
    d;
    0 == b.indexOf(simcity.cOriginUtilities.kJoinPrefix) && (d = ["REGION", b.substr(simcity.cOriginUtilities.kJoinPrefix.length)].join());
    a(d)
  })
};
simcity.cOriginUtilities.SetJoinablePresence = function (a) {
  simcity.gPresenceManager.IsOffline() || scrui.PostGameCommand(scrui.BuildCommand(["originSetJoinableGame", simcity.cOriginUtilities.kJoinPrefix + a]))
};
simcity.cOriginUtilities.ClearJoinablePresence = function () {
  scrui.PostGameCommand(scrui.BuildCommand(["originSetJoinableGame", ""]))
};
simcity.cOriginUtilities.IsIgoEnabled = function (a) {
  var b = [scrui.BuildRequestQuery(["origin", "OriginIgoEnabled"])];
  scrui.RequestGameData(b, function (b) {
    a(b[0] ? b[0] : !1)
  })
};
simcity.cOriginUtilities.RequestOriginToken = function (a, b) {
  var c = [scrui.BuildRequestQuery(["origin", "authToken"])];
  scrui.RequestGameData(c, function (c) {
    c[0] && c[0] ? simcity.gOneShotGameEventListener.AddOneShotCallback(simcity.kOriginAuthTokenEvent, function (c) {
      setTimeout(function () {
        c && c.authToken ? "function" === typeof a && a(c.authToken) : "function" === typeof b && b({
          category : scrui.kErrorCategoryOrigin
        })
      }, 10)
    }) : "function" === typeof b && b({
      category : scrui.kErrorCategoryOrigin
    })
  })
};
simcity.cOriginUtilities.OpenBrowserWithAuth = function (a, b, c, d) {
  simcity.cOriginUtilities.RequestOriginToken(function (e) {
    e = simcity.cOriginUtilities.Private_BuildParams(e, b, c);
    simcity.cOriginUtilities.OpenIgoBrowser(a + e);
    "function" == typeof d && d()
  })
};
simcity.cOriginUtilities.OpenIgoBrowser = function (a) {
  this.Private_WrapIgoRequired(this.Private_OpenIgoBrowser, arguments)
};
simcity.cOriginUtilities.OpenIgoChat = function (a) {
  this.Private_WrapIgoRequired(this.Private_OpenIgoChat, arguments)
};
simcity.cOriginUtilities.OpenExternalBrowserWithAuth = function (a, b, c, d) {
  simcity.cOriginUtilities.RequestOriginToken(function (e) {
    e = simcity.cOriginUtilities.Private_BuildParams(e, b, c);
    scrui.OpenExternalBrowser(a + e);
    "function" == typeof d && d()
  })
};
simcity.cOriginUtilities.ShowFeedback = function () {
  var a = simcity.gUIToolbox.GetURLWithFormattedLocale(simcity.cOriginUtilities.kFeedbackUrl);
  simcity.cOriginUtilities.OpenBrowserWithAuth(a)
};
simcity.cOriginUtilities.ShowBugReport = function () {
  var a = simcity.gUIToolbox.GetURLWithFormattedLocale(simcity.cOriginUtilities.kReportBugUrl);
  simcity.cOriginUtilities.OpenBrowserWithAuth(a)
};
simcity.cOriginUtilities.ShowIgoDisabled = function () {
  gErrorManager.PostError(scrui.kErrorCode_OriginIgoDisabled_FeatureDisabled)
};
simcity.cOriginUtilities.ShowOriginStoreCategory = function (a) {
  a && scrui.PostGameCommand(scrui.BuildCommand(["originStoreCategory", a]))
};
simcity.cOriginUtilities.ShowPreOrder = function (a, b) {
  var c = simcity.gConfigurationValues.mPreOrderLink;
  a ? (c = c.externalBrowser, c = simcity.cOriginUtilities.InsertOriginLocale(c), simcity.cOriginUtilities.OpenExternalBrowserWithAuth(c, null, null, b)) : (c = c.inGameOverlay, c.match(/store.origin.com\/simcity$/) && (c += "#"), c = simcity.cOriginUtilities.InsertOriginLocale(c), simcity.cOriginUtilities.OpenBrowserWithAuth(c, null, null, b))
};
simcity.cOriginUtilities.InsertOriginLocale = function (a) {
  var b = gUIManager.mLocaleManager.mLocaleCode,
  c = b.substr(0, 2),
  c = (b = b.substr(3)) ? c + "_" + b.toUpperCase() : c;
  return a ? a.replace("~locale~", c) : a
};
simcity.cOriginUtilities.Private_BuildParams = function (a, b, c) {
  b || (b = "TOKEN");
  a = "?" + (b + "=" + a);
  if (c)
    for (var d in c)
      a += "&" + d + "=" + c[d];
  return a
};
simcity.cOriginUtilities.Private_OpenIgoBrowser = function (a) {
  a && "" !== a && scrui.PostGameCommand(scrui.BuildCommand(["originIgoBrowser", a]))
};
simcity.cOriginUtilities.Private_OpenIgoChat = function (a) {
  a && "" !== a && scrui.PostGameCommand(scrui.BuildCommand(["originIgoChat", a]))
};
simcity.cOriginUtilities.Private_WrapIgoRequired = function (a, b) {
  var c = this;
  this.IsIgoEnabled(function (d) {
    d ? a.apply(c, b) : simcity.cOriginUtilities.ShowIgoDisabled()
  })
};
simcity.ConfigurationValues = {};
simcity.cConfigurationValues = function () {
  this.mAvatarUrl = null;
  this.mWWCEArticleURL = "https://help.ea.com/~country~/simcity/simcity";
  this.mGameUpdatesURL = "http://static.prod.simcity.com/Updates/~locale~_updates.htm";
  this.mServerStatusMoreInfoUrl = "https://help.ea.com/~country~/simcity/simcity";
  this.mHelpLinkUrl = "http://answers.ea.com/t5/Sim-City/ct-p/SimCity";
  this.mGameManualUrl = "http://akamai.cdn.ea.com/eadownloads/u/f/manuals/GAME-SIMCITY/SimCity_Manual.pdf";
  this.mServiceNewsUrl = null;
  this.mDefaultAdvertisement =
    [{
      image : "http://static.prod.simcity.com/Launcher-Default-Images/SimCity-Launcher_BannerAd_01.jpg",
      clickAction : "https://www.facebook.com/SimCity"
    }, {
      image : "http://static.prod.simcity.com/Launcher-Default-Images/SimCity-Launcher_BannerAd_02.jpg",
      clickAction : "http://www.simcity.com/~locale~/buy/simcity"
    }, {
      image : "http://static.prod.simcity.com/Launcher-Default-Images/SimCity-Launcher_BannerAd_03.jpg",
      clickAction : "http://www.simcity.com/~locale~/buy/simcity"
    }
  ];
  this.mPreOrderLink = {
    inGameOverlay : "http://store.origin.com/simcity#",
    externalBrowser : "http://www.simcity.com/~locale~/buy/simcity"
  };
  this.mBillboardAds = [{
      image : "http://static.prod.simcity.com/Launcher-Default-Images/SimCity-FE_BannerAd_01.jpg",
      clickAction : "http://www.simcity.com/~locale~/buy/simcity"
    }, {
      image : "http://static.prod.simcity.com/Launcher-Default-Images/SimCity-FE_BannerAd_02.jpg",
      clickAction : "http://www.simcity.com/~locale~/buy/simcity"
    }
  ];
  this.mConfigurationData = null
};
simcity.cConfigurationValues.kConfigUrl = "/configuration";
simcity.cConfigurationValues.kLocalStorageKey = "configurationValues";
simcity.cConfigurationValues.prototype.SetConfiguration = function (a) {
  a && (this.mConfigurationData = a, a.hasOwnProperty("WWCEDefaultUrl") && (this.mWWCEArticleURL = a.WWCEDefaultUrl), a.hasOwnProperty("patchNotesUrl") && (this.mGameUpdatesURL = a.patchNotesUrl), a.hasOwnProperty("serverStatusUrl") && (this.mServerStatusMoreInfoUrl = a.serverStatusUrl), a.hasOwnProperty("helpLinkUrl") && (this.mHelpLinkUrl = a.helpLinkUrl), a.hasOwnProperty("gameManualLink") && (this.mGameManualUrl = a.gameManualLink), a.hasOwnProperty("defaultAdImage1") &&
    (this.mDefaultAdvertisement[0].image = a.defaultAdImage1), a.hasOwnProperty("defaultAdImage2") && (this.mDefaultAdvertisement[1].image = a.defaultAdImage2), a.hasOwnProperty("defaultAdImage3") && (this.mDefaultAdvertisement[2].image = a.defaultAdImage3), a.hasOwnProperty("defaultAdClickAction1") && (this.mDefaultAdvertisement[0].clickAction = a.defaultAdClickAction1), a.hasOwnProperty("defaultAdClickAction2") && (this.mDefaultAdvertisement[1].clickAction = a.defaultAdClickAction2), a.hasOwnProperty("defaultAdClickAction3") &&
    (this.mDefaultAdvertisement[2].clickAction = a.defaultAdClickAction3), a.hasOwnProperty("defaultAdClickAction3") && (this.mDefaultAdvertisement[2].clickAction = a.defaultAdClickAction3), a.hasOwnProperty("defaultBillboardAdImage1") && (this.mBillboardAds[0].image = a.defaultBillboardAdImage1), a.hasOwnProperty("defaultBillboardAdImage2") && (this.mBillboardAds[1].image = a.defaultBillboardAdImage2), a.hasOwnProperty("defaultBillboardAdClickAction1") && (this.mBillboardAds[0].clickAction = a.defaultBillboardAdClickAction1),
    a.hasOwnProperty("defaultBillboardAdClickAction2") && (this.mBillboardAds[1].clickAction = a.defaultBillboardAdClickAction2), a.hasOwnProperty("avatarUrl") && (this.mAvatarUrl = a.avatarUrl), a.hasOwnProperty("preOrderIgoURL") && (this.mPreOrderLink.inGameOverlay = a.preOrderIgoURL), a.hasOwnProperty("preOrderExternalURL") && (this.mPreOrderLink.externalBrowser = a.preOrderExternalURL), a.hasOwnProperty("serviceNews") && (this.mServiceNewsUrl = a.serviceNews), this.SaveToLocalStorage(), this.ProcessLocaleInURLs())
};
simcity.cConfigurationValues.prototype.ProcessLocaleInURLs = function () {
  this.mWWCEArticleURL = simcity.gUIToolbox.GetURLWithFormattedLocale(this.mWWCEArticleURL);
  this.mGameUpdatesURL = simcity.gUIToolbox.GetURLWithFormattedLocale(this.mGameUpdatesURL);
  this.mServerStatusMoreInfoUrl = simcity.gUIToolbox.GetURLWithFormattedLocale(this.mServerStatusMoreInfoUrl);
  this.mHelpLinkUrl = simcity.gUIToolbox.GetURLWithFormattedLocale(this.mHelpLinkUrl);
  this.mGameManualUrl = simcity.gUIToolbox.GetURLWithFormattedLocale(this.mGameManualUrl);
  this.mDefaultAdvertisement[0].image = simcity.gUIToolbox.GetURLWithFormattedLocale(this.mDefaultAdvertisement[0].image);
  this.mDefaultAdvertisement[1].image = simcity.gUIToolbox.GetURLWithFormattedLocale(this.mDefaultAdvertisement[1].image);
  this.mDefaultAdvertisement[2].image = simcity.gUIToolbox.GetURLWithFormattedLocale(this.mDefaultAdvertisement[2].image);
  this.mDefaultAdvertisement[0].clickAction = simcity.gUIToolbox.GetURLWithFormattedLocale(this.mDefaultAdvertisement[0].clickAction);
  this.mDefaultAdvertisement[1].clickAction =
    simcity.gUIToolbox.GetURLWithFormattedLocale(this.mDefaultAdvertisement[1].clickAction);
  this.mDefaultAdvertisement[2].clickAction = simcity.gUIToolbox.GetURLWithFormattedLocale(this.mDefaultAdvertisement[2].clickAction);
  this.mBillboardAds[0].image = simcity.gUIToolbox.GetURLWithFormattedLocale(this.mBillboardAds[0].image);
  this.mBillboardAds[1].image = simcity.gUIToolbox.GetURLWithFormattedLocale(this.mBillboardAds[1].image);
  this.mBillboardAds[0].clickAction = simcity.gUIToolbox.GetURLWithFormattedLocale(this.mBillboardAds[0].clickAction);
  this.mBillboardAds[1].clickAction = simcity.gUIToolbox.GetURLWithFormattedLocale(this.mBillboardAds[1].clickAction);
  this.mAvatarUrl = simcity.gUIToolbox.GetURLWithFormattedLocale(this.mAvatarUrl);
  this.mPreOrderLink.inGameOverlay = simcity.gUIToolbox.GetURLWithFormattedLocale(this.mPreOrderLink.inGameOverlay);
  this.mPreOrderLink.externalBrowser = simcity.gUIToolbox.GetURLWithFormattedLocale(this.mPreOrderLink.externalBrowser);
  this.mServiceNewsUrl = simcity.gUIToolbox.GetURLWithFormattedLocale(this.mServiceNewsUrl)
};
simcity.cConfigurationValues.prototype.InitFromServer = function (a, b) {
  var c = {
    url : scrui.GetRestPath() + simcity.cConfigurationValues.kConfigUrl,
    params : [["format", "json"]],
    onSuccess : function (b) {
      simcity.gConfigurationValues.SetConfiguration(b.json.configurationValues);
      "function" === typeof a && a()
    },
    onError : function (a) {
      "function" === typeof b && b(a)
    },
    method : "get"
  };
  scrui.XHR.Request(c)
};
simcity.cConfigurationValues.prototype.SaveToLocalStorage = function () {
  this.mConfigurationData && (localStorage[simcity.cConfigurationValues.kLocalStorageKey] = scrui.SerializeJSON(this.mConfigurationData))
};
simcity.cConfigurationValues.prototype.RestoreFromLocalStorage = function () {
  var a = localStorage[simcity.cConfigurationValues.kLocalStorageKey];
  a && (a = scrui.ParseJSON(a), simcity.gConfigurationValues.SetConfiguration(a))
};
simcity.gConfigurationValues = new simcity.cConfigurationValues;
simcity.EventManager = {};
simcity.cEventManger = function () {
  this.mEvents = {
    click : [],
    mouseUp : [],
    mouseDown : [],
    mouseOver : [],
    mouseOut : [],
    itemSelected : [],
    keyup : [],
    keydown : [],
    dataChanged : [],
    hashChanged : [],
    genericEvent : [],
    socketEvent : [],
    socketConnect : [],
    socketDisconnect : []
  }
};
simcity.cEventManger.prototype.AddEventListener = function (a, b, c) {
  if (void 0 !== this.mEvents[a]) {
    var d = this.mEvents[a]["'" + b + "'"] || null;
    if (null !== d) {
      for (var e = [], f = 0; f < d.length; f++) {
        if (c.toString() === d[f].toString())
          return;
        for (var g = !0, h = 0; h < e.length; h++)
          d[f] === e[h] && (g = !1);
        g && e.push(d[f])
      }
      e.push(c);
      this.mEvents[a]["'" + b + "'"] = e
    } else
      this.mEvents[a]["'" + b + "'"] = [c]
  }
};
simcity.cEventManger.prototype.AddKeyEventListener = function (a, b) {
  if (void 0 !== this.mEvents[a] && (a === simcity.gEventTypes.KEYUP || a === simcity.gEventTypes.KEYDOWN)) {
    var c = this.mEvents[a] || null;
    if (null !== c) {
      for (var d = [], e = 0; e < c.length; e++) {
        var f = c[e];
        if (f === b)
          return;
        for (var g = !0, h = 0; h < d.length; h++)
          f === d[h] && (g = !1);
        g && d.push(f)
      }
      d.push(b);
      this.mEvents[a] = d
    } else
      this.mEvents[a] = [b]
  }
};
simcity.cEventManger.prototype.RemoveEventListener = function (a, b, c) {
  var d = [];
  if (void 0 !== this.mEvents[a]) {
    for (var e in this.mEvents[a])
      if (null === c || void 0 === c)
        "'" + b + "'" !== e && void 0 !== this.mEvents[a][e] && (d[e] = this.mEvents[a][e]);
      else {
        if ("'" + b + "'" === e && void 0 !== this.mEvents[a][e]) {
          for (var f = [], g = this.mEvents[a][e], h = g.length, i = 0; i < h; i++)
            g[i].toString() !== c.toString() && f.push(g[i]);
          this.mEvents[a][e] = f
        }
        d[e] = this.mEvents[a][e]
      }
    this.mEvents[a] = d
  }
};
simcity.cEventManger.prototype.RemoveKeyEventListener = function (a, b) {
  if (void 0 !== this.mEvents[a] && (a === simcity.gEventTypes.KEYUP || a === simcity.gEventTypes.KEYDOWN)) {
    var c = [];
    if (null !== b && void 0 !== b)
      for (var d = this.mEvents[a], e = 0; e < d.length; e++)
        d[e] !== b && c.push(d[e]);
    this.mEvents[a] = c
  }
};
simcity.cEventManger.prototype.TriggerEvent = function (a, b, c) {
  if (void 0 !== this.mEvents[a])
    if (a === simcity.gEventTypes.HASHCHANGED || a === simcity.gEventTypes.KEYUP || a === simcity.gEventTypes.KEYDOWN || a === simcity.gEventTypes.SOCKETCONNECT || a === simcity.gEventTypes.SOCKETDISCONNECT) {
      var a = this.mEvents[a],
      d;
      for (d in a) {
        b = a[d];
        "function" === typeof b && b(c);
        if ("object" === typeof b)
          for (var e = b.length, f = 0; f < e; f++) {
            var g = b[f];
            g(c)
          }
        if ("array" === typeof b) {
          e = b.length;
          for (f = 0; f < e; f++)
            b[f](c)
        }
      }
    } else if (b = this.mEvents[a]["'" +
          b + "'"] || null, null !== b)
      if ("function" === typeof b)
        b(c);
      else if ("object" === typeof b) {
        e = b.length;
        for (f = 0; f < e; f++)
          g = b[f], g(c)
      }
};
simcity.gEventManager = new simcity.cEventManger;
simcity.gEventTypes = {
  CLICK : "click",
  MOUSEUP : "mouseUp",
  MOUSEDOWN : "mouseDown",
  MOUSEOVER : "mouseOver",
  MOUSEOUT : "mouseOut",
  ITEMSELECTED : "itemSelected",
  KEYUP : "keyup",
  KEYDOWN : "keydown",
  DATACHANGED : "dataChanged",
  HASHCHANGED : "hashChanged",
  GENERICEVENT : "genericEvent",
  SOCKETEVENT : "socketEvent",
  SOCKETCONNECT : "socketConnect",
  SOCKETDISCONNECT : "socketDisconnect"
};
simcity.SocketManager = {};
simcity.cSocketManager = function () {
  this.mSocketListeners = [];
  this.mSocketRequests = [];
  this.mIsSocketConnected = !0
};
simcity.cSocketManager.prototype.Init = function () {
  simcity.gEventManager.AddEventListener(simcity.gEventTypes.SOCKETCONNECT, scrui.GenerateGUID(), this.OnSocketConnect);
  simcity.gEventManager.AddEventListener(simcity.gEventTypes.SOCKETDISCONNECT, scrui.GenerateGUID(), this.OnSocketDisconnect)
};
simcity.cSocketManager.prototype.AddSocketRequest = function (a, b, c, d) {
  d = d || !0;
  a = new simcity.SocketRequest(a, b, c || function () {});
  d ? this.mSocketListeners.push(a) : this.mSocketRequests.push(a);
  this.mIsSocketConnected && this.private_MakeSocketSubscription(a)
};
simcity.cSocketManager.prototype.RemoveSocketRequest = function (a, b, c) {
  a = new simcity.SocketRequest(a, b, c || function () {});
  this.mIsSocketConnected && this.private_RemoveSocketSubscription(a)
};
simcity.cSocketManager.prototype.OnSocketConnect = function () {
  var a = 0,
  b = simcity.gSocketManager.mSocketListeners.length;
  for (simcity.gSocketManager.mIsSocketConnected = !0; a < b; ) {
    var c = simcity.gSocketManager.mSocketListeners[a];
    c.isActive || (simcity.gSocketManager.private_MakeSocketSubscription(c), c.isActive = !0);
    a++
  }
};
simcity.cSocketManager.prototype.OnSocketDisconnect = function () {
  var a = simcity.gSocketManager.mSocketListeners.length;
  simcity.gSocketManager.mIsSocketConnected = !1;
  for (var b = 0; b < a; b++)
    simcity.gSocketManager.mSocketListeners[b].isActive = !1
};
simcity.cSocketManager.prototype.private_MakeSocketSubscription = function (a) {
  scrui.PostGameCommand(scrui.BuildCommand(["sendtowebsocket", ['{"request":"' + a.message + '", "guid": ' + Number(a.guid) + ',"action":"SUBSCRIBE"}']]));
  simcity.gEventManager.AddEventListener(simcity.gEventTypes.SOCKETEVENT, Number(a.guid), function (b) {
    a.callback(b)
  })
};
simcity.cSocketManager.prototype.private_RemoveSocketSubscription = function (a) {
  scrui.PostGameCommand(scrui.BuildCommand(["sendtowebsocket", ['{"request":"' + a.message + '", "guid": ' + Number(a.guid) + ',"action":"UNSUBSCRIBE"}']]));
  simcity.gEventManager.RemoveEventListener(simcity.gEventTypes.SOCKETEVENT, Number(a.guid), function (b) {
    a.callback(b)
  })
};
simcity.SocketRequest = function (a, b, c) {
  return {
    message : a || {},
    guid : b || 0,
    callback : c || function () {},
    isActive : !1,
    ticks : 0
  }
};
simcity.gSocketManager = new simcity.cSocketManager;
simcity.gSocketManager.Init();
simcity.SystemMessageController = {};
simcity.cSystemMessageController = function () {
  this.kSocketSystemEventGuid = 2445841992;
  this.kSocketSystemMessageType = 3482127466;
  this.kSocketSystemGUID = 250704716
};
simcity.cSystemMessageController.prototype.OpenSystemMessageSocket = function (a) {
  simcity.gSocketManager.AddSocketRequest("/subscriptions/system/messageType/" + this.kSocketSystemMessageType + "/eventId/" + this.kSocketSystemEventGuid, Number(this.kSocketSystemGUID), a, !1)
};
simcity.cSystemMessageController.prototype.CloseSystemMessageSocket = function (a) {
  simcity.gSocketManager.RemoveSocketRequest("/subscriptions/system/messageType/" + this.kSocketSystemMessageType + "/eventId/" + this.kSocketSystemEventGuid, Number(this.kSocketSystemGUID), a, !1)
};
simcity.gSystemMessageController = new simcity.cSystemMessageController;
simcity.DeepLink = {};
simcity.cDeepLink = function () {
  this.mLinkMap = {}

};
simcity.cDeepLink.prototype.Add = function (a, b) {
  a && b && (this.mLinkMap[a.toLowerCase()] = b)
};
simcity.cDeepLink.prototype.WrapControl = function (a, b, c) {
  if (a && b && 0 != b.length)
    for (var d in this.mLinkMap)
      if (b.match(RegExp("^" + d, "i"))) {
        var e = this.mLinkMap[d],
        b = b.substr(d.length + 1),
        f;
        0 < b.length && (f = b.split(","));
        a.mRootElement.onclick = function (b) {
          (b = b || window.event) && b.stopPropagation();
          e.apply(null, f);
          c && "function" === typeof c && c.call(null, a)
        };
        break
      }
};
simcity.cDeepLink.prototype.UnwrapControl = function (a) {
  a.mRootElement.onclick = null
};
simcity.cDeepLink.prototype.ExecuteLink = function (a) {
  if (a && 0 != a.length)
    for (var b in this.mLinkMap)
      if (a.match(RegExp("^" + b, "i"))) {
        var c = this.mLinkMap[b],
        a = a.substr(b.length + 1),
        d;
        0 < a.length && (d = a.split(","));
        c.apply(null, d);
        break
      }
};
simcity.gDeepLink = new simcity.cDeepLink;
simcity.DeepLinkManager = {};
simcity.gDeepLinkManager = {
  mDeepLink : simcity.gDeepLink,
  InitDeepLink : function (a) {
    this.mDeepLink.Add("region", a.showRegion);
    this.mDeepLink.Add("myRegion", a.showMyRegion);
    this.mDeepLink.Add("box", a.showBox);
    this.mDeepLink.Add("achievement", a.showAchievement);
    this.mDeepLink.Add("leaderboard,global", a.showGlobalLeaderboard);
    this.mDeepLink.Add("leaderboard_friend", a.showFriendsLeaderboard);
    this.mDeepLink.Add("leaderboard,friend", a.showFriendsLeaderboard);
    this.mDeepLink.Add("challenge,global", a.showGlobalChallenge);
    this.mDeepLink.Add("challenge_regional", a.showRegionalChallenge);
    this.mDeepLink.Add("challenge,regional", a.showRegionalChallenge);
    this.mDeepLink.Add("global_market", a.showGlobalMarket);
    this.mDeepLink.Add("globalMarket", a.showGlobalMarket);
    this.mDeepLink.Add("profile", a.showProfile);
    this.mDeepLink.Add("citylog", a.showCitylog)
  }
};
simcity.databindings.DataBindingsCursorAttachment = {};
simcity.AutoSizeTextControlParent = function (a) {
  var b = a.GetTextWidth(),
  c = a.mParentControl;
  c.SetWidth(c.mWidth - (a.mWidth - b))
};
simcity.CursorAttachmentGenericPlop = {
  layoutPath : "Layouts/CursorAttachments/GenericPlop.js",
  allowNullResults : !0,
  invalidPlacementControl : null,
  overlappingControl : null,
  onTopOfRoadControl : null,
  notFullyInBoxControl : null,
  cannotAffordControl : null,
  cannotPlaceOnGroundControl : null,
  cannotPlaceOutsideRadiusControl : null,
  terrainTooSteepControl : null,
  mustPlaceOnSnap : null,
  overlapWater : null,
  overlapUnitOnFire : null,
  invalidInternalRoad : null,
  init : function (a) {
    this.invalidPlacementControl = a.FindControlByID(216312903);
    simcity.AutoSizeTextControlParent(this.invalidPlacementControl.FindControlByID(219412577));
    this.overlappingControl = a.FindControlByID(216312907);
    simcity.AutoSizeTextControlParent(this.overlappingControl.FindControlByID(219412577));
    this.onTopOfRoadControl = a.FindControlByID(216312909);
    simcity.AutoSizeTextControlParent(this.onTopOfRoadControl.FindControlByID(219412577));
    this.notFullyInBoxControl = a.FindControlByID(216312911);
    simcity.AutoSizeTextControlParent(this.notFullyInBoxControl.FindControlByID(219412577));
    this.cannotAffordControl = a.FindControlByID(216312913);
    simcity.AutoSizeTextControlParent(this.cannotAffordControl.FindControlByID(219412577));
    this.cannotPlaceOnGroundControl = a.FindControlByID(216312915);
    simcity.AutoSizeTextControlParent(this.cannotPlaceOnGroundControl.FindControlByID(219412577));
    this.cannotPlaceOutsideRadiusControl = a.FindControlByID(216312919);
    simcity.AutoSizeTextControlParent(this.cannotPlaceOutsideRadiusControl.FindControlByID(219412577));
    this.terrainTooSteepControl = a.FindControlByID(219334494);
    simcity.AutoSizeTextControlParent(this.terrainTooSteepControl.FindControlByID(219412577));
    this.mustPlaceOnSnap = a.FindControlByID(227291375);
    simcity.AutoSizeTextControlParent(this.mustPlaceOnSnap.FindControlByID(219412577));
    this.overlapWater = a.FindControlByID(244572331);
    simcity.AutoSizeTextControlParent(this.overlapWater.FindControlByID(219412577));
    this.overlapUnitOnFire = a.FindControlByID(244818432);
    simcity.AutoSizeTextControlParent(this.overlapUnitOnFire.FindControlByID(219412577));
    this.invalidInternalRoad = a.FindControlByID(246642864);
    simcity.AutoSizeTextControlParent(this.invalidInternalRoad.FindControlByID(219412577))
  },
  updateAnimation : function () {},
  updateQueries : function () {
    return {
      toolValidity : ["selectedtool", "toolValidity"]
    }
  },
  update : function (a) {
    var b = null !== a.toolValidity && 0 !== a.toolValidity;
    this.invalidPlacementControl.SetVisibility(1 === a.toolValidity);
    this.overlappingControl.SetVisibility(2 === a.toolValidity);
    this.onTopOfRoadControl.SetVisibility(3 === a.toolValidity);
    this.notFullyInBoxControl.SetVisibility(4 === a.toolValidity);
    this.cannotAffordControl.SetVisibility(5 === a.toolValidity);
    this.cannotPlaceOnGroundControl.SetVisibility(6 === a.toolValidity);
    this.cannotPlaceOutsideRadiusControl.SetVisibility(7 === a.toolValidity);
    this.terrainTooSteepControl.SetVisibility(8 === a.toolValidity);
    this.mustPlaceOnSnap.SetVisibility(9 == a.toolValidity);
    this.overlapWater.SetVisibility(10 == a.toolValidity);
    this.overlapUnitOnFire.SetVisibility(11 == a.toolValidity);
    this.invalidInternalRoad.SetVisibility(12 == a.toolValidity);
    return b
  }
};
simcity.CursorAttachmentDisasterPlop = {
  layoutPath : "Layouts/CursorAttachments/DisasterPlop.js",
  allowNullResults : !1,
  mMessageStringID : ["0x0ec897a7", "0x0ec897a8", "0x0ec987a9"],
  init : function (a) {
    this.mTextControl = a.FindControlByID(248027428);
    this.mMessageString = [];
    for (a = 0; a < this.mMessageStringID.length; ++a)
      this.mMessageString[a] = new scrui.cLocaleString("CursorAttachments.json", this.mMessageStringID[a], "")
  },
  updateAnimation : function () {},
  updateQueries : function () {
    return {
      toolValidity : ["selectedtool", "toolValidity"]
    }
  },
  update : function (a) {
    var b = null !== a.toolValidity && 0 !== a.toolValidity;
    b && (this.mTextControl.SetLocaleText(this.mMessageString[a.toolValidity - 1]), simcity.AutoSizeTextControlParent(this.mTextControl));
    return b
  }
};
simcity.CursorAttachmentGenericRoadTool = {
  layoutPath : "Layouts/CursorAttachments/GenericRoadTool.js",
  allowNullResults : !0,
  selfIntersection : null,
  overlapsExistingRoad : null,
  intersectionAngleTooSmall : null,
  tooCloseToOtherIntersection : null,
  notEnoughFunds : null,
  unitOverlap : null,
  exceedClearance : null,
  maxPathsAtIntersection : null,
  bridgeUnavailableForType : null,
  bridgeEndsShouldBeOnLand : null,
  failedSmoothFit : null,
  terrainTooUneven : null,
  cantFlatternIntersection : null,
  cantMovePointOutOfIntersection : null,
  cantDragOverUnitOnFire : null,
  cantDragOverUnitInTutorial : null,
  ellipseTooSmall : null,
  tutorialRoadNotConnectedProperly : null,
  init : function (a) {
    this.selfIntersection = a.FindControlByID(216312915);
    simcity.AutoSizeTextControlParent(this.selfIntersection.FindControlByID(219412577));
    this.overlapsExistingRoad = a.FindControlByID(216312919);
    simcity.AutoSizeTextControlParent(this.overlapsExistingRoad.FindControlByID(219412577));
    this.intersectionAngleTooSmall = a.FindControlByID(247771537);
    simcity.AutoSizeTextControlParent(this.intersectionAngleTooSmall.FindControlByID(219412577));
    this.tooCloseToOtherIntersection = a.FindControlByID(247771492);
    simcity.AutoSizeTextControlParent(this.tooCloseToOtherIntersection.FindControlByID(219412577));
    this.notEnoughFunds = a.FindControlByID(247771584);
    simcity.AutoSizeTextControlParent(this.notEnoughFunds.FindControlByID(219412577));
    this.unitOverlap = a.FindControlByID(247834994);
    simcity.AutoSizeTextControlParent(this.unitOverlap.FindControlByID(219412577));
    this.exceedClearance = a.FindControlByID(247835163);
    simcity.AutoSizeTextControlParent(this.exceedClearance.FindControlByID(219412577));
    this.maxPathsAtIntersection = a.FindControlByID(247835212);
    simcity.AutoSizeTextControlParent(this.maxPathsAtIntersection.FindControlByID(219412577));
    this.bridgeUnavailableForType = a.FindControlByID(247835255);
    simcity.AutoSizeTextControlParent(this.bridgeUnavailableForType.FindControlByID(219412577));
    this.bridgeEndsShouldBeOnLand = a.FindControlByID(247835314);
    simcity.AutoSizeTextControlParent(this.bridgeEndsShouldBeOnLand.FindControlByID(219412577));
    this.failedSmoothFit = a.FindControlByID(247835394);
    simcity.AutoSizeTextControlParent(this.failedSmoothFit.FindControlByID(219412577));
    this.terrainTooUneven = a.FindControlByID(247835343);
    simcity.AutoSizeTextControlParent(this.terrainTooUneven.FindControlByID(219412577));
    this.cantFlatternIntersection = a.FindControlByID(248460467);
    simcity.AutoSizeTextControlParent(this.cantFlatternIntersection.FindControlByID(219412577));
    this.cantMovePointOutOfIntersection = a.FindControlByID(248970752);
    simcity.AutoSizeTextControlParent(this.cantMovePointOutOfIntersection.FindControlByID(219412577));
    this.cantDragOverUnitOnFire = a.FindControlByID(250618666);
    simcity.AutoSizeTextControlParent(this.cantDragOverUnitOnFire.FindControlByID(219412577));
    this.cantDragOverUnitInTutorial = a.FindControlByID(250618708);
    simcity.AutoSizeTextControlParent(this.cantDragOverUnitInTutorial.FindControlByID(219412577));
    this.ellipseTooSmall = a.FindControlByID(254406697);
    simcity.AutoSizeTextControlParent(this.ellipseTooSmall.FindControlByID(219412577));
    this.tutorialRoadNotConnectedProperly = a.FindControlByID(254406795);
    simcity.AutoSizeTextControlParent(this.tutorialRoadNotConnectedProperly.FindControlByID(219412577))
  },
  updateAnimation : function () {},
  updateQueries : function () {
    return {
      toolValidity : ["selectedtool", "toolValidity"]
    }
  },
  update : function (a) {
    var b = null !== a.toolValidity && 0 !== a.toolValidity;
    this.selfIntersection.SetVisibility(1 === a.toolValidity);
    this.overlapsExistingRoad.SetVisibility(2 === a.toolValidity);
    this.intersectionAngleTooSmall.SetVisibility(3 === a.toolValidity);
    this.tooCloseToOtherIntersection.SetVisibility(4 === a.toolValidity);
    this.notEnoughFunds.SetVisibility(5 === a.toolValidity);
    this.unitOverlap.SetVisibility(6 ===
      a.toolValidity);
    this.exceedClearance.SetVisibility(7 === a.toolValidity);
    this.maxPathsAtIntersection.SetVisibility(8 === a.toolValidity);
    this.bridgeUnavailableForType.SetVisibility(9 === a.toolValidity);
    this.bridgeEndsShouldBeOnLand.SetVisibility(10 === a.toolValidity);
    this.failedSmoothFit.SetVisibility(11 === a.toolValidity);
    this.terrainTooUneven.SetVisibility(12 === a.toolValidity);
    this.cantFlatternIntersection.SetVisibility(13 === a.toolValidity);
    this.cantMovePointOutOfIntersection.SetVisibility(14 === a.toolValidity);
    this.cantDragOverUnitOnFire.SetVisibility(15 === a.toolValidity);
    this.cantDragOverUnitInTutorial.SetVisibility(16 === a.toolValidity);
    this.ellipseTooSmall.SetVisibility(17 === a.toolValidity);
    this.tutorialRoadNotConnectedProperly.SetVisibility(18 === a.toolValidity);
    return b
  }
};
simcity.CursorAttachmentGenericCost = {
  layoutPath : "Layouts/CursorAttachments/GenericCost.js",
  allowNullResults : !0,
  textControl : null,
  init : function (a) {
    this.textControl = a.FindControlByID(216401620)
  },
  updateAnimation : function () {},
  updateQueries : function () {
    return {
      simoleons : ["bins", simcity.kResourceIDSimoleons],
      cost : ["selectedtool", "cost"],
      isModule : ["selectedtool", "nonSimProperties", simcity.kPropSCUnitIsModule]
    }
  },
  update : function (a) {
    var b = 0 !== a.cost;
    a.simoleons.amount < a.cost ? this.textControl.SetLocaleText(new scrui.cLocaleString("CursorAttachments.json",
        "0x0ce6070b", "PLACEHOLDER TEXT")) : (this.textControl.SetLocaleText(new scrui.cLocaleString("CursorAttachments.json", "0x0ce6070a", "PLACEHOLDER TEXT")), this.textControl.UpdateLocaleText({
        cost : a.cost
      }));
    this.textControl.SetTextColor(a.simoleons.amount < a.cost ? "#C4330C" : "green");
    simcity.AutoSizeTextControlParent(this.textControl);
    return b
  }
};
simcity.CursorAttachmentWater = {
  layoutPath : "Layouts/CursorAttachments/Water.js",
  noWaterControl : null,
  waterAvailableControl : null,
  barHeightTarget : 0,
  textControl : null,
  waterBarControl : null,
  totalWaterBarControl : null,
  init : function (a) {
    this.noWaterControl = a.FindControlByID(216236130);
    this.waterAvailableControl = a.FindControlByID(216230875);
    this.textControl = a.FindControlByID(216149940);
    this.waterBarControl = a.FindControlByID(194388328);
    this.totalWaterBarControl = this.waterBarControl.mParentControl
  },
  updateAnimation : function () {
    var a =
      this.waterBarControl.mHeight,
    a = a + 0.25 * (this.barHeightTarget - a);
    this.waterBarControl.SetPosition(0, this.totalWaterBarControl.mHeight - a, this.waterBarControl.mWidth, a)
  },
  updateQueries : function (a) {
    return {
      water : ["maps", simcity.kMapIDWaterTable, "unitRegion", a, "B", "sum"]
    }
  },
  update : function (a) {
    this.noWaterControl.SetVisibility(0 === a.water.amount);
    this.waterAvailableControl.SetVisibility(0 !== a.water.amount);
    this.barHeightTarget = this.totalWaterBarControl.mHeight * a.water.amount / a.water.capacity;
    a = simcity.FormatLargeNumberForFluid(0.5 *
        a.water.amount);
    this.textControl.UpdateLocaleText({
      water : a.number,
      exponent : a.exponent
    });
    simcity.AutoSizeTextControlParent(this.textControl);
    return !0
  }
};
simcity.CursorAttachmentCoal = {
  layoutPath : "Layouts/CursorAttachments/Coal.js",
  noCoalControl : null,
  coalAvailableControl : null,
  barHeightTarget : 0,
  textControl : null,
  coalBarControl : null,
  totalCoalBarControl : null,
  init : function (a) {
    this.noCoalControl = a.FindControlByID(216236130);
    simcity.AutoSizeTextControlParent(a.FindControlByID(221570389));
    this.coalAvailableControl = a.FindControlByID(216230875);
    this.textControl = a.FindControlByID(216149940);
    this.coalBarControl = a.FindControlByID(194388328);
    this.totalCoalBarControl =
      this.coalBarControl.mParentControl
  },
  updateAnimation : function () {
    var a = this.coalBarControl.mHeight,
    a = a + 0.25 * (this.barHeightTarget - a);
    this.coalBarControl.SetPosition(0, this.totalCoalBarControl.mHeight - a, this.coalBarControl.mWidth, a)
  },
  updateQueries : function (a) {
    return {
      coal : ["maps", simcity.kMapIDCoalDeposit, "unitRegion", a, "A", "sum"]
    }
  },
  update : function (a) {
    if (0 == a.coal.amount)
      this.noCoalControl.SetVisibility(!0), this.coalAvailableControl.SetVisibility(!1);
    else {
      this.noCoalControl.SetVisibility(!1);
      this.coalAvailableControl.SetVisibility(!0);
      var b = simcity.FormatLargeNumberForTons(a.coal.amount * simcity.RolloverItems.coalMapToBinConversion);
      this.barHeightTarget = a.coal.amount >= a.coal.capacity / 25 ? this.totalCoalBarControl.mHeight : this.totalCoalBarControl.mHeight * a.coal.amount / (a.coal.capacity / 25);
      this.textControl.UpdateLocaleText({
        coal : b.number,
        exponent : b.exponent
      });
      this.textControl.SetTextColor(5E4 > a.coal.amount ? "#C4330C" : "green");
      simcity.AutoSizeTextControlParent(this.textControl)
    }
    return !0
  }
};
simcity.CursorAttachmentOre = {
  layoutPath : "Layouts/CursorAttachments/Ore.js",
  noOreControl : null,
  OreAvailableControl : null,
  barHeightTarget : 0,
  textControl : null,
  OreBarControl : null,
  totalOreBarControl : null,
  init : function (a) {
    this.noOreControl = a.FindControlByID(216236130);
    simcity.AutoSizeTextControlParent(a.FindControlByID(221570389));
    this.OreAvailableControl = a.FindControlByID(216230875);
    this.textControl = a.FindControlByID(216149940);
    this.OreBarControl = a.FindControlByID(194388328);
    this.totalOreBarControl = this.OreBarControl.mParentControl
  },
  updateAnimation : function () {
    var a = this.OreBarControl.mHeight,
    a = a + 0.25 * (this.barHeightTarget - a);
    this.OreBarControl.SetPosition(0, this.totalOreBarControl.mHeight - a, this.OreBarControl.mWidth, a)
  },
  updateQueries : function (a) {
    return {
      Ore : ["maps", simcity.kMapIDOreDeposit, "unitRegion", a, "A", "sum"]
    }
  },
  update : function (a) {
    if (0 == a.Ore.amount)
      this.noOreControl.SetVisibility(!0), this.OreAvailableControl.SetVisibility(!1);
    else {
      this.noOreControl.SetVisibility(!1);
      this.OreAvailableControl.SetVisibility(!0);
      var b = simcity.FormatLargeNumberForTons(a.Ore.amount *
          simcity.RolloverItems.oreMapToBinConversion);
      this.barHeightTarget = a.Ore.amount >= a.Ore.capacity / 25 ? this.totalOreBarControl.mHeight : this.totalOreBarControl.mHeight * a.Ore.amount / (a.Ore.capacity / 25);
      this.textControl.UpdateLocaleText({
        Ore : b.number,
        exponent : b.exponent
      });
      this.textControl.SetTextColor(5E4 > a.Ore.amount ? "#C4330C" : "green");
      simcity.AutoSizeTextControlParent(this.textControl)
    }
    return !0
  }
};
simcity.CursorAttachmentOil = {
  layoutPath : "Layouts/CursorAttachments/Oil.js",
  noOilControl : null,
  oilAvailableControl : null,
  barHeightTarget : 0,
  textControl : null,
  oilBarControl : null,
  totalOilBarControl : null,
  init : function (a) {
    this.noOilControl = a.FindControlByID(216236130);
    simcity.AutoSizeTextControlParent(a.FindControlByID(221570389));
    this.oilAvailableControl = a.FindControlByID(216230875);
    this.textControl = a.FindControlByID(216149940);
    this.oilBarControl = a.FindControlByID(194388328);
    this.totalOilBarControl = this.oilBarControl.mParentControl
  },
  updateAnimation : function () {
    var a = this.oilBarControl.mHeight,
    a = a + 0.25 * (this.barHeightTarget - a);
    this.oilBarControl.SetPosition(0, this.totalOilBarControl.mHeight - a, this.oilBarControl.mWidth, a)
  },
  updateQueries : function (a) {
    return {
      oil : ["maps", simcity.kMapIDOilReservoir, "unitRegion", a, "A", "sum"]
    }
  },
  update : function (a) {
    if (0 == a.oil.amount)
      this.noOilControl.SetVisibility(!0), this.oilAvailableControl.SetVisibility(!1);
    else {
      this.noOilControl.SetVisibility(!1);
      this.oilAvailableControl.SetVisibility(!0);
      var b = a.oil.amount /
        6,
      a = simcity.FormatLargeNumber(a.oil.amount * simcity.RolloverItems.oilMapToBinConversion);
      this.barHeightTarget = 65535 <= b ? this.totalOilBarControl.mHeight : this.totalOilBarControl.mHeight * b / 65535;
      this.textControl.UpdateLocaleText({
        oil : a.number,
        exponent : a.exponent
      });
      this.textControl.SetTextColor(16383.75 > b ? "#C4330C" : "green");
      simcity.AutoSizeTextControlParent(this.textControl)
    }
    return !0
  }
};
simcity.CursorAttachmentWindDirection = {
  layoutPath : "Layouts/CursorAttachments/WindDirection.js",
  noWindControl : null,
  windAvailableControl : null,
  barHeightTarget : 0,
  textControl : null,
  windBarControl : null,
  totalWindBarControl : null,
  init : function (a) {
    this.windPointer = a.FindControlByID(248902958);
    this.textControl = a.FindControlByID(216401620)
  },
  updateAnimation : function () {},
  updateQueries : function () {
    return {
      cost : ["selectedtool", "cost"],
      windDirection : ["bins", simcity.kResourceIDWindDirection],
      cameraInfo : [scrui.BuildRequestQuery(["camera"])]
    }
  },
  update : function (a) {
    var b = Math.abs(a.cameraInfo.orientation),
    b = b - 360 * Math.floor(b / 360);
    0 > a.cameraInfo.orientation && (b = 360 - b);
    this.windPointer.SetRotation(180 - (a.windDirection.amount - b));
    this.textControl.mParentControl.SetVisibility(0 < a.cost);
    this.textControl.UpdateLocaleText({
      cost : a.cost
    });
    return !0
  }
};
simcity.CursorAttachmentWindPower = {
  layoutPath : "Layouts/CursorAttachments/WindPower.js",
  noWindControl : null,
  windAvailableControl : null,
  barHeightTarget : 0,
  textControl : null,
  windBarControl : null,
  totalWindBarControl : null,
  init : function (a) {
    this.noWindControl = a.FindControlByID(216236130);
    simcity.AutoSizeTextControlParent(a.FindControlByID(221570389));
    this.windAvailableControl = a.FindControlByID(216230875);
    this.textControl = a.FindControlByID(216149940);
    this.windBarControl = a.FindControlByID(194388328);
    this.totalWindBarControl =
      this.windBarControl.mParentControl
  },
  updateAnimation : function () {
    var a = this.windBarControl.mHeight,
    a = a + 0.25 * (this.barHeightTarget - a);
    this.windBarControl.SetPosition(0, this.totalWindBarControl.mHeight - a, this.windBarControl.mWidth, a)
  },
  updateQueries : function (a) {
    return {
      windMap : ["maps", simcity.kMapIDWind, "unitRegion", a, "A", "sum"],
      windSpeed : ["bins", simcity.kResourceIDWindSpeed]
    }
  },
  update : function (a) {
    var b = 0;
    0 < a.windSpeed.amount && (b = Math.floor(a.windSpeed.amount + (a.windMap.amount / 12 + 1)));
    0 >= b ? (this.noWindControl.SetVisibility(!0),
      this.windAvailableControl.SetVisibility(!1)) : (this.noWindControl.SetVisibility(!1), this.windAvailableControl.SetVisibility(!0), this.barHeightTarget = 15 <= b ? this.totalWindBarControl.mHeight : this.totalWindBarControl.mHeight * b / 15, this.textControl.UpdateLocaleText({
        wind : b
      }), this.textControl.SetTextColor(5 > b ? "#C4330C" : "green"), simcity.AutoSizeTextControlParent(this.textControl));
    return !0
  }
};
simcity.CursorAttachmentDemolish = {
  layoutPath : "Layouts/CursorAttachments/Demolish.js",
  allowNullResults : !0,
  onFire : null,
  cannotDemolish : null,
  supportingModule : null,
  mainUnit : null,
  rubbleAbandonedOnly : null,
  init : function (a) {
    this.onFire = a.FindControlByID(244744795);
    simcity.AutoSizeTextControlParent(this.onFire.FindControlByID(219412577));
    this.cannotDemolish = a.FindControlByID(244744796);
    simcity.AutoSizeTextControlParent(this.cannotDemolish.FindControlByID(219412577));
    this.supportingModule = a.FindControlByID(244744797);
    simcity.AutoSizeTextControlParent(this.supportingModule.FindControlByID(219412577));
    this.mainUnit = a.FindControlByID(244744798);
    simcity.AutoSizeTextControlParent(this.mainUnit.FindControlByID(219412577));
    this.rubbleAbandonedOnly = a.FindControlByID(244744799);
    simcity.AutoSizeTextControlParent(this.rubbleAbandonedOnly.FindControlByID(219412577))
  },
  updateAnimation : function () {},
  updateQueries : function () {
    return {
      toolValidity : ["selectedTool", "toolValidity"]
    }
  },
  update : function (a) {
    var b = null !== a.toolValidity &&
      0 !== a.toolValidity,
    c = !1,
    d = !1,
    e = !1,
    f = !1,
    g = !1;
    0 !== (a.toolValidity & 1) ? c = !0 : 0 !== (a.toolValidity & 2) ? d = !0 : 0 !== (a.toolValidity & 16) ? g = !0 : 0 !== (a.toolValidity & 8) ? f = !0 : 0 !== (a.toolValidity & 4) && (e = !0);
    this.onFire.SetVisibility(c);
    this.cannotDemolish.SetVisibility(d);
    this.supportingModule.SetVisibility(e);
    this.mainUnit.SetVisibility(f);
    this.rubbleAbandonedOnly.SetVisibility(g);
    return b
  }
};
simcity.CursorAttachmentDataBindings = {};
simcity.CursorAttachmentDataBindings[scrui.IDFromName("LotZone")] = simcity.CursorAttachmentGenericCost;
simcity.CursorAttachmentDataBindings[scrui.IDFromName("T_Water_T1_WaterTower_01_01_N")] = simcity.CursorAttachmentWater;
simcity.CursorAttachmentDataBindings[scrui.IDFromName("T_Water_T2_Base_01_01_N")] = simcity.CursorAttachmentWater;
simcity.CursorAttachmentDataBindings[scrui.IDFromName("T_Water_T2_FiltrationUnit_01_01_N")] = simcity.CursorAttachmentWater;
simcity.CursorAttachmentDataBindings[scrui.IDFromName("T_Water_T2_Pump_01_01_N")] = simcity.CursorAttachmentWater;
simcity.CursorAttachmentDataBindings[scrui.IDFromName("T_Coal_T1_Mine_01_01_N")] = simcity.CursorAttachmentCoal;
simcity.CursorAttachmentDataBindings[scrui.IDFromName("T_Coal_T2_Mine_01_01_N")] = simcity.CursorAttachmentCoal;
simcity.CursorAttachmentDataBindings[scrui.IDFromName("T_Coal_T1_Shaft_01_01_N")] = simcity.CursorAttachmentCoal;
simcity.CursorAttachmentDataBindings[scrui.IDFromName("T_Coal_T2_Shaft_01_01_N")] = simcity.CursorAttachmentCoal;
simcity.CursorAttachmentDataBindings[scrui.IDFromName("T_Ore_T1_Base_01")] = simcity.CursorAttachmentOre;
simcity.CursorAttachmentDataBindings[scrui.IDFromName("T_Ore_T1_Shaft_01")] = simcity.CursorAttachmentOre;
simcity.CursorAttachmentDataBindings[scrui.IDFromName("T_Ext_Oil_T1_Base")] = simcity.CursorAttachmentOil;
simcity.CursorAttachmentDataBindings[scrui.IDFromName("T_Ext_Oil_T1_PumpJack")] = simcity.CursorAttachmentOil;
simcity.CursorAttachmentDataBindings[scrui.IDFromName("T_PowerWind_PlantBase_01_01_N")] = simcity.CursorAttachmentWindPower;
simcity.CursorAttachmentDataBindings[scrui.IDFromName("T_PowerWind_SmallTurbine_01_01_N")] = simcity.CursorAttachmentWindPower;
simcity.CursorAttachmentDataBindings[scrui.IDFromName("T_PowerWind_MediumTurbine_01_01_N")] = simcity.CursorAttachmentWindPower;
simcity.CursorAttachmentDataBindings[scrui.IDFromName("T_PowerWind_LargeTurbine_01_01_N")] = simcity.CursorAttachmentWindPower;
simcity.CursorAttachmentDataBindings[scrui.IDFromName("T_Power_CoalT1_Base_01_01_N")] = simcity.CursorAttachmentWindDirection;
simcity.CursorAttachmentDataBindings[scrui.IDFromName("T_Power_CoalT1_Generator_01_01_N")] = simcity.CursorAttachmentWindDirection;
simcity.CursorAttachmentDataBindings[scrui.IDFromName("T_Power_CoalT1_Generator_02_01_N")] = simcity.CursorAttachmentWindDirection;
simcity.CursorAttachmentDataBindings[scrui.IDFromName("T_Power_CoalT1_Generator_03_01_N")] = simcity.CursorAttachmentWindDirection;
simcity.CursorAttachmentDataBindings[scrui.IDFromName("T_Power_Oil_T1_Base")] = simcity.CursorAttachmentWindDirection;
simcity.CursorAttachmentDataBindings[scrui.IDFromName("T_Power_Oil_T1_SmallGenerator")] = simcity.CursorAttachmentWindDirection;
simcity.CursorAttachmentDataBindings[scrui.IDFromName("T_Power_Oil_T1_MedGenerator")] = simcity.CursorAttachmentWindDirection;
simcity.CursorAttachmentDataBindings[scrui.IDFromName("T_Power_Oil_T1_LargeGenerator")] = simcity.CursorAttachmentWindDirection;
simcity.CursorAttachmentDataBindings[scrui.IDFromName("T_Manufacturing_Metal_T1_Base_01")] = simcity.CursorAttachmentWindDirection;
simcity.CursorAttachmentDataBindings[scrui.IDFromName("T_Manufacturing_Oil_T1_Base_01")] = simcity.CursorAttachmentWindDirection;
simcity.CursorAttachmentDataBindings[scrui.IDFromName("T_Garbage_T1_Base")] = simcity.CursorAttachmentWindDirection;
simcity.CursorAttachmentDataBindings[scrui.IDFromName("T_Garbage_T1_Incinerator")] = simcity.CursorAttachmentWindDirection;
simcity.CursorAttachmentDataBindings[scrui.IDFromName("T_Sewage_T1_Base_01_01_N")] = simcity.CursorAttachmentWindDirection;
simcity.CursorAttachmentDataBindings[scrui.IDFromName("T_Sewage_T2_Base_01_01_N")] = simcity.CursorAttachmentWindDirection;
simcity.CursorAttachmentDataBindings[scrui.IDFromName("LotZoneIndustrial")] = simcity.CursorAttachmentWindDirection;
simcity.CursorAttachmentDataBindings[scrui.IDFromName("Bulldozer")] = simcity.CursorAttachmentDemolish;
simcity.CursorAttachmentDataBindings[scrui.IDFromName("Disaster")] = simcity.CursorAttachmentDisasterPlop;
simcity.CursorAttachmentBarResourceAmount = {
  layoutPath : "Layouts/CursorAttachments/GenericResourceAmount.js",
  allowNullResults : !0,
  textControl : null,
  init : function (a) {
    this.textControl = a.FindControlByID(216401620)
  },
  updateAnimation : function () {},
  updateQueries : function () {
    return simcity.gGlobalUIHandler.mRegionViewUIHandler.IsVisible() ? {
      resourceAmount : [simcity.kDataRolloverBar, simcity.kDataResourceAmount],
      uiKey : [simcity.kDataRolloverBar, simcity.kDataUIResourceKey]
    }
     : {
      resourceAmount : [simcity.kDataRolloverBar,
        simcity.kDataResourceAmount],
      unitOfMeasure : [simcity.kDataRolloverBar, simcity.kDataUnitOfMeasure],
      conversionRate : [simcity.kDataRolloverBar, simcity.kDataConversionRate]
    }
  },
  update : function (a) {
    var b = 0,
    c = "";
    if (simcity.gGlobalUIHandler.mRegionViewUIHandler.IsVisible()) {
      var b = simcity.ConvertToMeasurement(a.resourceAmount, simcity.kResourceConversionRate[a.uiKey]),
      d = simcity.kResourceUnitsOfMeasure[a.uiKey],
      e = 0,
      e = a.uiKey == simcity.kResourceUIKeys.NeededPowerPerHour || a.uiKey == simcity.kResourceUIKeys.TotalPowerProducedPerHour ||
        a.uiKey == simcity.kResourceUIKeys.PowerAvailableForSalePerConnection || a.uiKey == simcity.kResourceUIKeys.DeficitPowerPerHour ? simcity.FormatLargeNumberForPower(b) : a.uiKey == simcity.kResourceUIKeys.NeededWaterPerHour || a.uiKey == simcity.kResourceUIKeys.TotalWaterProducedPerHour || a.uiKey == simcity.kResourceUIKeys.WaterAvailableForSalePerConnection || a.uiKey == simcity.kResourceUIKeys.DeficitWaterPerHour ? simcity.FormatLargeNumberForFluid(b) : a.uiKey == simcity.kResourceUIKeys.TotalSewageProducedPerHour || a.uiKey ==
        simcity.kResourceUIKeys.TotalSewageTreatmentCapacityPerHour || a.uiKey == simcity.kResourceUIKeys.SewageTreatedPerHour || a.uiKey == simcity.kResourceUIKeys.SewageDumpedPerHour ? simcity.FormatLargeNumberForFluid(b) : {
        number : b,
        exponent : ""
      };
      d && d.LoadString(function () {
        c = d.GetText()
      });
      this.textControl.UpdateLocaleText({
        amount : e.number,
        unitOfMeasure : e.exponent + c
      })
    } else
      b = simcity.ConvertToMeasurement(a.resourceAmount, a.conversionRate), c = a.unitOfMeasure ? scrui.TextFromLocaleProperty(a.unitOfMeasure) : "", this.textControl.UpdateLocaleText({
        amount : b,
        unitOfMeasure : c
      });
    simcity.AutoSizeTextControlParent(this.textControl);
    return !0
  }
};
simcity.CursorAttachmentArrowResourceAmount = {
  layoutPath : "Layouts/CursorAttachments/GenericResourceAmount.js",
  allowNullResults : !0,
  textControl : null,
  init : function (a) {
    this.textControl = a.FindControlByID(216401620)
  },
  updateAnimation : function () {},
  updateQueries : function () {
    return {
      resourceAmount : [simcity.kDataRolloverArrow, simcity.kDataResourceAmount],
      uiKey : [simcity.kDataRolloverArrow, simcity.kDataUIResourceKey]
    }
  },
  update : function (a) {
    var b = simcity.ConvertToMeasurement(a.resourceAmount, simcity.kResourceConversionRate[a.uiKey]),
    c = "",
    d = simcity.kResourceUnitsOfMeasure[a.uiKey],
    e = 0,
    e = a.uiKey == simcity.kResourceUIKeys.TradePower ? simcity.FormatLargeNumberForPower(b) : a.uiKey == simcity.kResourceUIKeys.TradeWater ? simcity.FormatLargeNumberForFluid(b) : a.uiKey == simcity.kResourceUIKeys.TradeSewageUsed ? simcity.FormatLargeNumberForFluid(b) : a.uiKey == simcity.kResourceUIKeys.Coal || a.uiKey == simcity.kResourceUIKeys.Metal || a.uiKey == simcity.kResourceUIKeys.Alloy ? 1 != b ? simcity.FormatLargeNumberForTons(b) : simcity.FormatLargeNumberForTons(0) : a.uiKey ==
      simcity.kResourceUIKeys.Oil || a.uiKey == simcity.kResourceUIKeys.Fuel ? 1 != b ? simcity.FormatLargeNumberForBarrels(b) : simcity.FormatLargeNumberForBarrels(0) : a.uiKey == simcity.kResourceUIKeys.Plastic || a.uiKey == simcity.kResourceUIKeys.Electronics || a.uiKey == simcity.kResourceUIKeys.Computer || a.uiKey == simcity.kResourceUIKeys.Televion ? 1 != b ? simcity.FormatLargeNumberForCrates(b) : simcity.FormatLargeNumberForCrates(0) : {
      number : b,
      exponent : ""
    };
    d && d.LoadString(function () {
      c = d.GetText()
    });
    this.textControl.UpdateLocaleText({
      amount : e.number,
      unitOfMeasure : e.exponent + c
    });
    simcity.AutoSizeTextControlParent(this.textControl);
    return !0
  }
};
simcity.AlertsUI = {};
simcity.kTxtAlertCount = 204901701;
simcity.cAlertsUI = function () {
  this.UIHandler = scrui.cUIHandler;
  this.UIHandler();
  this.mIteratorIndex = 0;
  this.mNewCategoryAlerts = {}

};
goog.inherits(simcity.cAlertsUI, scrui.cUIHandler);
simcity.cAlertsUI.kBtnIDToggleLayer = 209485958;
simcity.kAlertLevelNormal = 0;
simcity.kAlertLevelCaution = 1;
simcity.kAlertLevelAlert = 2;
simcity.kAlertLevelCritical = 3;
simcity.kAlertLevelUnlock = 4;
simcity.cAlertsUI.prototype.Init = function () {};
simcity.cAlertsUI.prototype.Shutdown = function () {};
simcity.cAlertsUI.prototype.UpdateAlertItems = function (a, b, c) {
  var d = !1,
  e = !b.mChildren;
  if (this.mNewCategoryAlerts.hasOwnProperty(a))
    for (var f = this.mNewCategoryAlerts[a], a = f.alerts, f = f.layerID, g = 0, h = a.length, i = 0; g < h; ++g) {
      var j = a[g];
      if (e) {
        var k = gUIManager.LoadAndCacheLayout(j.layoutPath, b).FindControlByID(simcity.cAlertsUI.kBtnIDToggleLayer);
        k.mUserData = {
          layerID : f,
          alertType : j.alertType
        };
        k.mParentControl.mUserData = c
      }
      var k = b.mChildren[g],
      l = 0 < j.count;
      k.SetVisibility(l);
      l && (k.SetPosition(k.mWidth * i++, 0),
        (d = k.FindControlByID(simcity.kTxtAlertCount)) && d.UpdateLocaleText({
          alertCount : j.count
        }), d = !0)
    }
  b.SetVisibility(d)
};
simcity.CompareAlertsTypes = function (a, b) {
  var c = !1;
  if ("number" === typeof a && "number" === typeof b)
    c = a === b;
  else if ("object" === typeof a && "object" === typeof b && a.length === b.length)
    for (var c = !0, d = 0, e = a.length; d < e; ++d)
      if (a[d] !== b[d]) {
        c = !1;
        break
      }
  return c
};
simcity.cAlertsUI.prototype.UpdateAlertForCategory = function (a, b, c, d) {
  this.mNewCategoryAlerts.hasOwnProperty(a.categoryID) || (this.mNewCategoryAlerts[a.categoryID] = {
      layerID : a.layerID,
      alerts : []
    });
  for (var a = this.mNewCategoryAlerts[a.categoryID].alerts, e = !1, f = 0, g = a.length; f < g; ++f) {
    var h = a[f];
    if (h.layoutPath === b && simcity.CompareAlertsTypes(h.alertType, c)) {
      h.count = d;
      e = !0;
      break
    }
  }
  e || a.push({
    layoutPath : b,
    alertType : c,
    count : d
  })
};
simcity.cAlertsUI.prototype.HandleUIMessage = function (a, b, c) {
  switch (a) {
  case scrui.kMsgTypeButtonClicked:
    switch (b) {
    case simcity.cAlertsUI.kBtnIDToggleLayer:
      if (c.mUserData.hasOwnProperty("MayorRating"))
        break;
      var d = this,
      e = c.mUserData,
      a = ["layers", e.layerID, "nextIteratorIndex", this.mIteratorIndex, 0],
      a = a.concat(e.alertType),
      a = [scrui.BuildRequestQuery(a)];
      scrui.RequestGameData(a, function (a) {
        var b = ["jumpToAlert", e.layerID, d.mIteratorIndex, 0],
        b = b.concat(e.alertType);
        scrui.PostGameCommand(scrui.BuildCommand(b));
        d.mIteratorIndex = a[0]
      })
    }
  }
};
simcity.BudgetPanel = {};
simcity.cBudgetPanel = function () {
  this.text100000Desc = this.text50000Desc = this.text10000Desc = this.text100000 = this.text50000 = this.text10000 = this.mRootContainer = void 0;
  this.mCurrentLoanSelected = -1;
  this.mWasVisible = !1;
  this.mCreditLimit = 0;
  this.mTotalBonds = [0, 0, 0];
  this.mCurrentBank = -1;
  this.mLastHourCheck = 0
};
goog.inherits(simcity.cBudgetPanel, scrui.cUIHandler);
simcity.cBudgetPanel.kBtnLoan1 = 246561943;
simcity.cBudgetPanel.kBtnLoan2 = 246561944;
simcity.cBudgetPanel.kBtnLoan3 = 246561945;
simcity.cBudgetPanel.kLoanRolloverContainer = 246558088;
simcity.cBudgetPanel.kLoanCarrot = 246990376;
simcity.cBudgetPanel.kLoanAccept = 246994085;
simcity.cBudgetPanel.kLoanCancel = 246994086;
simcity.cBudgetPanel.kWinLoanPayBack = 246559504;
simcity.cBudgetPanel.kPayBackAccept = 247085284;
simcity.cBudgetPanel.kPayBackCancel = 247085283;
simcity.cBudgetPanel.kLoanMeter = 242226069;
simcity.cBudgetPanel.kLoanAmounts = [25E3, 5E4, 1E5];
simcity.cBudgetPanel.kLoanPaymentAmounts = [173, 347, 694];
simcity.cBudgetPanel.kLoanInterestAmounts = [2880, 5760, 11520];
simcity.cBudgetPanel.kLoanInterestRate = 0;
simcity.cBudgetPanel.kLoanUnits = "T_Govt_HQ_Bond1Increase25000 T_Govt_HQ_Bond1Increase50000 T_Govt_HQ_Bond1Increase100000 T_Govt_HQ_Bond2Increase25000 T_Govt_HQ_Bond2Increase50000 T_Govt_HQ_Bond2Increase100000 T_Govt_HQ_Bond3Increase25000 T_Govt_HQ_Bond3Increase50000 T_Govt_HQ_Bond3Increase100000".split(" ");
simcity.cBudgetPanel.kPayBackUnits = ["T_Govt_HQ_Bond1Decrease", "T_Govt_HQ_Bond2Decrease", "T_Govt_HQ_Bond3Decrease"];
simcity.kTransactionsToTrack = [simcity.kHashGiftIncome, simcity.kHashGiftExpense, simcity.kHashLoanIncome, simcity.kHashLoanExpense, simcity.kHashServiceIncomeFire, simcity.kHashServiceExpenseFire, simcity.kHashServiceIncomePolice, simcity.kHashServiceExpensePolice, simcity.kHashServiceIncomeGarbage, simcity.kHashServiceExpenseGarbage, simcity.kHashServiceIncomeRecycling, simcity.kHashServiceExpenseRecycling, simcity.kHashServiceIncomeHealth, simcity.kHashServiceExpenseHealth, simcity.kHashMarketIncomeCoal, simcity.kHashMarketExpenseCoal,
  simcity.kHashMarketIncomeOilCrude, simcity.kHashMarketExpenseOilCrude, simcity.kHashMarketIncomeOreRaw, simcity.kHashMarketExpenseOreRaw, simcity.kHashMarketIncomeMetal, simcity.kHashMarketExpenseMetal, simcity.kHashMarketIncomeAlloy, simcity.kHashMarketExpenseAlloy, simcity.kHashMarketIncomeFuel, simcity.kHashMarketExpenseFuel, simcity.kHashMarketIncomePlastic, simcity.kHashMarketExpensePlastic, simcity.kHashMarketIncomeElectronics, simcity.kHashMarketExpenseElectronics, simcity.kHashMarketIncomeComputer, simcity.kHashMarketExpenseComputer,
  simcity.kHashMarketIncomeTelevision, simcity.kHashMarketExpenseTelevision, simcity.kHashMissionIncome, simcity.kHashEventIncome, simcity.kHashEventExpense, simcity.kHashGreatWorkIncome, simcity.kHashGreatWorkExpense, simcity.kHashCheatIncome, simcity.kHashVuIncome, simcity.kHashMaxisManExpense, simcity.kHashResearchExpense, simcity.kHashCrimeExpense];
simcity.cBudgetPanel.prototype.Init = function () {
  this.mRootContainer = gUIManager.FindControlByID(simcity.kWinBudgetContainer);
  this.mCurrentBank = this.mCurrentLoanSelected = -1;
  this.mCreditLimit = 0;
  this.mTotalBonds = [0, 0, 0];
  this.mLastHourCheck = 0
};
simcity.cBudgetPanel.kLoanQueries = [scrui.BuildRequestQuery([simcity.kDataBinAmount, simcity.kResourceIDNumberOfConnections]), scrui.BuildRequestQuery([simcity.kDataBinAmount, simcity.kResourceIDHQ_CityHall_Level2_IsOn]), scrui.BuildRequestQuery([simcity.kDataBinAmount, simcity.kResourceIDHQ_CityHall_Finance_Module_IsOn]), scrui.BuildRequestQuery([simcity.kDataBinAmount, simcity.kResourceIDTotalBonds1]), scrui.BuildRequestQuery([simcity.kDataBinAmount, simcity.kResourceIDTotalBonds2]), scrui.BuildRequestQuery([simcity.kDataBinAmount,
      simcity.kResourceIDTotalBonds3])];
simcity.cBudgetPanel.prototype.UpdateData = function () {
  var a = this;
  scrui.RequestGameData(simcity.cBudgetPanel.kLoanQueries, function (b) {
    a.mCreditLimit = 0 < b[2] ? 3 : 0 < b[1] ? 2 : 0 < b[0] ? 1 : 0;
    for (var c = 0; 3 > c; c++)
      a.mTotalBonds[c] = b[c + 3]
  })
};
simcity.cBudgetPanel.prototype.HandleUIMessage = function (a, b) {
  if (a == scrui.kMsgTypeButtonSelected) {
    if (b >= simcity.cBudgetPanel.kBtnLoan1 && b <= simcity.cBudgetPanel.kBtnLoan3) {
      this.UpdateData();
      for (var c = !1, d = [0, 0], e = 0; 3 > e; e++) {
        var f = this.mRootContainer.FindControlByID(simcity.cBudgetPanel.kBtnLoan1 + e),
        g = 0;
        f && (b == simcity.cBudgetPanel.kBtnLoan1 + e ? (d = f.GetAbsolutePosition(), g = f.mWidth / 2, this.mCurrentBank = e, 0 < this.mTotalBonds[e] && (c = !0)) : f.SetSelected(!1));
        d[0] += g
      }
      if (!1 == c) {
        if (this.CloseDebtRollover(), e = this.mRootContainer.FindControlByID(simcity.cBudgetPanel.kLoanRolloverContainer)) {
          if (f =
              this.mRootContainer.FindControlByID(simcity.cBudgetPanel.kLoanCarrot)) {
            var h = f.ConvertAbsoluteToParentSpace(d[0], d[1], h);
            f.SetPosition(h[0], f.mTop)
          }
          for (d = 0; 3 > d; d++)
            h = this.mRootContainer.FindControlByID(247070176 + d), d < this.mCreditLimit ? h.SetEnabled(!0) : h.SetEnabled(!1), 0 == d && (h.SetSelected(!0), this.mCurrentLoanSelected = 0);
          e.SetVisibility(!0)
        }
      } else if (this.CloseLoanRollover(), e = this.mRootContainer.FindControlByID(simcity.cBudgetPanel.kWinLoanPayBack)) {
        if (f = this.mRootContainer.FindControlByID(247082353))
          h =
            f.ConvertAbsoluteToParentSpace(d[0], d[1], h), f.SetPosition(h[0], f.mTop);
        e.SetVisibility(!0);
        this.mRootContainer.FindControlByID(246559510).SetRawText(simcity.MakeSimoleonsText(this.mTotalBonds[this.mCurrentBank]))
      }
    }
  } else if (a == scrui.kMsgTypeButtonDeselected) {
    if (b >= simcity.cBudgetPanel.kBtnLoan1 && b <= simcity.cBudgetPanel.kBtnLoan3) {
      d = !0;
      for (e = 0; 3 > e; e++)
        f = this.mRootContainer.FindControlByID(simcity.cBudgetPanel.kBtnLoan1 + e), f.mIsSelected && (d = !1);
      d && (this.CloseLoanRollover(), this.CloseDebtRollover())
    }
  } else if (a ==
    scrui.kMsgTypeButtonClicked)
    if (simcity.cBudgetPanel.kLoanCancel == b)
      this.CloseLoanRollover(), this.UnSelectAllLoanButtons();
    else if (simcity.cBudgetPanel.kLoanAccept == b) {
      if (!(-1 == this.mCurrentLoanSelected || -1 == this.mCurrentBank)) {
        for (d = 0; 3 > d && (!(h = this.mRootContainer.FindControlByID(247070176 + d)) || !h.mIsSelected); d++)
          2 == d && (d = 4);
        3 > d && (d = simcity.cBudgetPanel.kLoanUnits[3 * this.mCurrentBank + d], d = scrui.IDFromName(d), scrui.PostGameCommand(scrui.BuildCommand(["createUnit", d])));
        this.UpdateData();
        this.UpdateLoanLabels();
        this.CloseLoanRollover();
        this.UnSelectAllLoanButtons()
      }
    } else
      simcity.cBudgetPanel.kPayBackAccept == b ? (d = simcity.cBudgetPanel.kPayBackUnits[this.mCurrentBank], d = scrui.IDFromName(d), scrui.PostGameCommand(scrui.BuildCommand(["createUnit", d])), this.UpdateData(), this.UpdateLoanLabels(), this.CloseDebtRollover(), this.UnSelectAllLoanButtons()) : simcity.cBudgetPanel.kPayBackCancel == b && (this.CloseDebtRollover(), this.UnSelectAllLoanButtons())
};
simcity.cBudgetPanel.prototype.UnSelectAllLoanButtons = function () {
  this.mCurrentBank = -1;
  for (var a = 0; 3 > a; a++) {
    var b = this.mRootContainer.FindControlByID(simcity.cBudgetPanel.kBtnLoan1 + a);
    b && b.SetSelected(!1)
  }
};
simcity.cBudgetPanel.prototype.CloseLoanRollover = function () {
  this.mRootContainer.FindControlByID(simcity.cBudgetPanel.kLoanRolloverContainer).SetVisibility(!1);
  for (var a = 0; 3 > a; a++) {
    var b = this.mRootContainer.FindControlByID(247070176 + a);
    b && b.SetSelected(!1)
  }
};
simcity.cBudgetPanel.prototype.CloseDebtRollover = function () {
  this.mRootContainer.FindControlByID(simcity.cBudgetPanel.kWinLoanPayBack).SetVisibility(!1)
};
simcity.cBudgetPanel.prototype.UpdateLoanLabels = function () {
  this.UpdateData();
  var a = this.mRootContainer.FindControlByID(246549635),
  b = this.mRootContainer.FindControlByID(246561943),
  c = this.mRootContainer.FindControlByID(246561944),
  d = this.mRootContainer.FindControlByID(246561945);
  if (0 < this.mCreditLimit) {
    a.SetVisibility(!1);
    b.SetVisibility(!0);
    c.SetVisibility(!0);
    d.SetVisibility(!0);
    var a = this.mRootContainer.FindControlByID(247057840),
    e = this.mRootContainer.FindControlByID(247057841),
    f = this.mRootContainer.FindControlByID(247057842);
    0 < this.mTotalBonds[0] ? a.SetRawText(simcity.MakeSimoleonsText(this.mTotalBonds[0])) : a.SetLocaleText(new scrui.cLocaleString("Budget.json", "0x0eb9cc0a"));
    0 < this.mTotalBonds[1] ? e.SetRawText(simcity.MakeSimoleonsText(this.mTotalBonds[1])) : e.SetLocaleText(new scrui.cLocaleString("Budget.json", "0x0eb9cc0b"));
    0 < this.mTotalBonds[2] ? f.SetRawText(simcity.MakeSimoleonsText(this.mTotalBonds[2])) : f.SetLocaleText(new scrui.cLocaleString("Budget.json", "0x0eb9cc0c"));
    if ((e = this.mRootContainer.FindControlByID(simcity.cBudgetPanel.kWinLoanPayBack)) &&
      !0 == e.mIsVisible)
      a = this.mRootContainer.FindControlByID(247057840 + this.mCurrentBank), (e = e.FindControlByID(246559510)) && e.SetRawText(a.GetText())
  } else
    a && a.SetVisibility(!0), b && b.SetVisibility(!1), c && c.SetVisibility(!1), d && d.SetVisibility(!1);
  simcity.gGlobalUIHandler.mIsSpectatorMode && (simcity.cTutorialManager.prototype.UpdateButtonVisibilityHelper(b, !1), simcity.cTutorialManager.prototype.UpdateButtonVisibilityHelper(c, !1), simcity.cTutorialManager.prototype.UpdateButtonVisibilityHelper(d, !1))
};
simcity.cBudgetPanel.prototype.BudgetOpened = function () {
  this.UpdateData();
  this.text10000 = this.mRootContainer.FindControlByID(246556125);
  this.text50000 = this.mRootContainer.FindControlByID(246556126);
  this.text100000 = this.mRootContainer.FindControlByID(246556127);
  this.text10000Desc = this.mRootContainer.FindControlByID(246556135);
  this.text50000Desc = this.mRootContainer.FindControlByID(246556136);
  this.text100000Desc = this.mRootContainer.FindControlByID(246556137);
  this.text10000.SetRawText(simcity.MakeSimoleonsText(simcity.cBudgetPanel.kLoanAmounts[0]));
  this.text50000.SetRawText(simcity.MakeSimoleonsText(simcity.cBudgetPanel.kLoanAmounts[1]));
  this.text100000.SetRawText(simcity.MakeSimoleonsText(simcity.cBudgetPanel.kLoanAmounts[2]));
  for (var a = new scrui.cLocaleString("Budget.json", "0x0e6bdc59"), b = 0; 3 > b; b++) {
    var c = simcity.cBudgetPanel.kLoanPaymentAmounts[b],
    d = simcity.MakeSimoleonsText(simcity.cBudgetPanel.kLoanAmounts[b] + simcity.cBudgetPanel.kLoanInterestAmounts[b]),
    c = simcity.MakeSimoleonsText(c);
    this.mRootContainer.FindControlByID(246556135 + b).SetLocaleText(a, {
      money : c,
      totalCost : d
    })
  }
  this.UpdateLoanLabels()
};
simcity.cBudgetPanel.prototype.BudgetClosed = function () {};
simcity.SaveRecentTransactionHistory = function () {
  var a = simcity.GetHistoryData(simcity.kTransactionsToTrack, 20);
  if (0 != simcity.gGlobalUIHandler.GetBoxID()) {
    scrui.PostGameCommand(scrui.BuildCommand(["SaveRecentTransactions", "start"]));
    for (var b = 0; b < a.length; b++) {
      var c = a[b].amount || 0,
      d = a[b].type || 0,
      e = 0;
      a[b].label && (e = Number(a[b].label));
      var f = 0;
      if (a[b].date) {
        f = simcity.gTimeInfo.month - a[b].date.getMonth();
        if (1 < f || 1 == f && simcity.gTimeInfo.hour >= a[b].date.getHours())
          continue;
        f = a[b].date.getTime()
      }
      scrui.PostGameCommand(scrui.BuildCommand(["SaveRecentTransactions",
            c, f, d, e]))
    }
    scrui.PostGameCommand(scrui.BuildCommand(["SaveRecentTransactions", "end"]))
  }
};
simcity.LoadRecentTransactionHistory = function () {
  var a = simcity.gGlobalUIHandler,
  b = a.mRecentTransactionData,
  a = scrui.BuildRequestQuery(["box", a.GetBoxID(), "metadata", "recentTransactionsData"]);
  scrui.RequestRestData([a], [], "get", function (a) {
    if (null != a && (a = scrui.ParseJSON(a.contentText)) && !a.hasOwnProperty("errorCode")) {
      for (var d in b)
        b[d] = [];
      b.amount = [];
      b.date = [];
      b.type = [];
      b.label = [];
      d = a.values;
      for (a = 0; a < d.length; a++) {
        var e = new Date(d[a][1]),
        f = simcity.gTimeInfo.month - e.getMonth();
        1 < f || 1 == f && simcity.gTimeInfo.hour >=
        e.getHours() || (b.amount.push(d[a][0]), b.date.push(new Date(d[a][1])), b.type.push(d[a][2]), b.label.push(scrui.DecimalToHex(d[a][3])))
      }
    }
  })
};
simcity.cBudgetPanel.prototype.Update = scrui.Client_ProfZone("cBudgetPanel.Update", function () {
    if (this.mRootContainer && (this.mRootContainer.mIsVisible && (this.mLastHourCheck != simcity.gTimeInfo.hour && 5 < simcity.gTimeInfo.minute) && (this.UpdateLoanLabels(), this.mLastHourCheck = simcity.gTimeInfo.hour), this.mWasVisible !== this.mRootContainer.mIsVisible))
      (this.mWasVisible = this.mRootContainer.mIsVisible) ? this.BudgetOpened() : this.BudgetClosed()
  });
simcity.RegionWallUI = {};
simcity.cRegionWallUI = function () {
  this.UIHandler = scrui.cUIHandler;
  this.UIHandler();
  this.mSessionID = this.mRegionId = 0;
  this.mSocketGUID = 252864884;
  this.mEventsGUID = 252864885;
  this.mUserCityLogGUID = 252864886;
  this.mGlobalCityLogGUID = 252864887;
  this.mRegionWallContainer = null;
  this.mNotificationsOffset = this.mRegionWallOffset = 0;
  this.mDividerToday = this.mDividerYesterday = this.mDividerOlder = !1;
  this.mNotificationsInputField = this.mNotificationsContainer = this.mNotificationsRootControl = this.mRegionWallInputField = this.mRegionWallMessageContainer =
    this.mRegionWallRootControl = null;
  this.mIsInGame = !0;
  this.mUserID = 0;
  this.mIsHybridPage = !1;
  this.mRegionWallTextEntryVisibility = this.mTimerIsNotActive = !0;
  this.mOverviewMap = null;
  this.mMessageList = [];
  this.mRegionEventsList = [];
  this.mSortedMessageList = [];
  this.kPageIDs = {
    MESSAGE_LIST_CONTENT : "",
    NOTIFICATIONS_LIST_CONTENT : "",
    MESSAGE_FORM_CONTAINER : ""
  };
  this.kControlIDs = {
    BUTTON_HIGHLIGHT : 225307918,
    MESSAGE_BODY_TEXT : 206727556,
    EVENT_BODY_TEXT : 246038450,
    CITYLOG_BODY_TEXT : 247262988,
    WALL_BACKGROUND : 247590680,
    INPUT_CONTAINER : 247595786,
    REGION_WALL_SELECTOR : 247597219,
    REGION_WALL_REVEAL : 247606289,
    MESSAGE_AVATAR_ICON : 196772091,
    FORM_SUBMIT_BUTTON : 206793666,
    FORM_TEXT_AREA : 240488062,
    NOTIFICATIONS_FORM_TEXT_AREA : 238260653,
    PIN_MESSAGE_BUTTON : 206808491,
    DELETE_MESSAGE_BUTTON : 206808720,
    WINDOW_CLOSE_BUTTON : 207085666,
    FORM_INNER_CONTAINER : 209035430,
    FORM_OUTER_CONTAINER : 207067335,
    REGION_PLAYERS_CONTAINER : 236793331,
    MESSAGE_BACKGROUND : 238007041,
    REPORT_MESSAGE_BUTTON : 245165973,
    POPUP : {
      WINDOW : 226495600,
      AVATAR : 226495598,
      TEXT : 226495734
    }
  };
  this.kPageLayouts = {
    MESSAGE_FORM : "Layouts/RegionWall/RegionMessageForm.js",
    REGION_MESSAGE : "Layouts/RegionWall/regionMessage.js",
    BUTTON_AVATAR : "Layouts/RegionWall/ButtonAvatar.js"
  };
  this.kServerURLs = {
    GLOBALCITYLOG : null,
    EVENTSPATH : null,
    USERCITYLOG : null,
    CHATPATH : null
  };
  this.kWinAvatarImage = 237907905;
  this.kBtnAvatar = 242832115;
  this.kWinAvatarOnlineHighlight = 239800634;
  this.kWinAvatarAlert = 239807635;
  this.kWinInfoBarTextWindow = 242832079;
  this.kTxtInfoBarPlayerName = 242832082
};
goog.inherits(simcity.cRegionWallUI, scrui.cUIHandler);
simcity.cRegionWallUI.kTealStyle = "class='regionMessageTxtChatUsername'";
simcity.cRegionWallUI.kMaxNumNotifications = 3;
simcity.cRegionWallUI.kMaxNumRegionEvents = 40;
simcity.cRegionWallUI.kMaxWallMessages = 40;
simcity.cRegionWallUI.prototype.Init = function (a, b, c, d, e, f, g, h, i) {
  this.mRegionWallContainer = e;
  this.mOverviewMap = i;
  this.mContainer = gUIManager.FindControlByID(238680906);
  this.mUserID = a;
  this.mRegionId = d;
  this.mSessionID = b;
  this.kPageIDs.MESSAGE_FORM_CONTAINER = f;
  this.kPageIDs.MESSAGE_LIST_CONTENT = g;
  this.kPageIDs.NOTIFICATIONS_LIST_CONTENT = h;
  this.mIsHybridPage = "object" == typeof f ? !1 : !0;
  this.mRegionWallMessageContainer = !this.mIsHybridPage ? this.kPageIDs.MESSAGE_LIST_CONTENT : document.getElementById(this.kPageIDs.MESSAGE_LIST_CONTENT);
  this.mNotificationsContainer = !this.mIsHybridPage ? this.kPageIDs.NOTIFICATIONS_LIST_CONTENT : document.getElementById(this.kPageIDs.NOTIFICATIONS_LIST_CONTENT);
  this.mMessageList = [];
  this.mRegionEventsList = [];
  this.mSortedMessageList = [];
  this.kServerURLs = {
    GLOBALCITYLOG : "/subscriptions/system/messageType/3482127466/eventId/2648580252",
    EVENTSPATH : "/subscriptions/region/" + this.mRegionId + "/messageType/3482127466/eventId/4215826657",
    USERCITYLOG : "/subscriptions/user/" + this.mUserID + "/messageType/3482127466/eventId/1644907426",
    CHATPATH : "/subscriptions/region/" + this.mRegionId + "/messageType/1254365162/eventId/191419777"
  };
  if (simcity.gGlobalUIHandler && simcity.gGlobalUIHandler.mIsDemo || simcity.cLauncher3D && simcity.cLauncher3D.mIsDemo.demo)
    this.mRegionWallContainer.mParentControl.SetVisibility(!1), simcity.cLauncher3D && (gUIManager.FindControlByID(254063923).SetVisibility(!1), gUIManager.FindControlByID(254063919).SetVisibility(!1), gUIManager.FindControlByID(254065587).SetVisibility(!1), gUIManager.FindControlByID(254065591).SetVisibility(!1)),
    simcity.gGlobalUIHandler && gUIManager.FindControlByID(207146365).SetVisibility(!1);
  else {
    this.OpenSocket(!0);
    this.mIsHybridPage && (scrui.Initialize(null, !1), gUIManager.RegisterUIHandler(c));
    for (var j in this.kPageLayouts)
      gUIManager.CacheLayout(this.kPageLayouts[j]);
    this.Create();
    simcity.gGlobalUIHandler && simcity.gGlobalUIHandler.mBoundaryUIHandler && simcity.gGlobalUIHandler.mBoundaryUIHandler.SetRegionID(d)
  }
};
simcity.cRegionWallUI.prototype.Create = function () {
  simcity.gEventManager.AddEventListener(simcity.gEventTypes.CLICK, this.kControlIDs.FORM_SUBMIT_BUTTON, this.PostNewMessage);
  simcity.cMyGamesUIHandler && (gUIManager.FindControlByID(this.kControlIDs.WINDOW_CLOSE_BUTTON).SetVisibility(!1), this.mRegionWallInputField = this.kPageIDs.MESSAGE_FORM_CONTAINER.FindControlByID(this.kControlIDs.FORM_TEXT_AREA), this.RevealRegionWallTextEntry(!0));
  simcity.mRegionWallNotifications && simcity.mRegionWallNotifications.root &&
  (this.mRegionWallRootControl = gUIManager.FindControlByID(simcity.mRegionWall.root), this.mRegionWallInputField = this.mRegionWallRootControl.FindControlByID(this.kControlIDs.FORM_TEXT_AREA), this.mRegionWallRootControl.SetUseInlineVisibility(!0), this.mNotificationsRootControl = gUIManager.FindControlByID(simcity.mRegionWallNotifications.root), this.mNotificationsInputField = this.mNotificationsRootControl.FindControlByID(this.kControlIDs.NOTIFICATIONS_FORM_TEXT_AREA), this.mNotificationsRootControl.SetVisibility(!1),
    this.mRegionWallRootControl.SetVisibility(!1), simcity.SendSoundEvent(simcity.audio.kGlobalSoundObjectID, simcity.audio.kInstanceUIChatWindowClose));
  this.ClearContainer(this.mRegionWallMessageContainer);
  this.mRegionWallOffset = 0;
  this.mRegionWallInputField.mRootElement.children[0].setAttribute("maxlength", "250");
  this.GetAllMessages()
};
simcity.cRegionWallUI.prototype.AddMessage = function (a) {
  this.mMessageList.unshift(a);
  this.AppendMessageToRegionWall(a, !0)
};
simcity.cRegionWallUI.prototype.AppendMessageToRegionWall = function (a, b) {
  if (!this.mDividerToday || !this.mDividerYesterday || !this.mDividerOlder) {
    var c = this.AppendDateDividerToRegionWall(a, this.mRegionWallMessageContainer, this.mRegionWallOffset);
    c && (this.mRegionWallOffset += c.mHeight)
  }
  c = this.CreateMessageString(a);
  this.AddWallMessageSortedByTime(c, a.updated, a, a.messageType);
  b && (c = this.CreateRegionMessage(c, this.mRegionWallMessageContainer, this.mRegionWallOffset, this.mRegionWallRootControl, a, a.messageType),
    this.mRegionWallOffset += c.mHeight, this.OffsetRegionWall())
};
simcity.cRegionWallUI.prototype.AppendRegionEventToRegionWall = function (a) {
  this.AddWallMessageSortedByTime(a.description, a.timeUpdated, a, "event")
};
simcity.cRegionWallUI.prototype.AddWallMessageSortedByTime = function (a, b, c) {
  a = {
    text : a,
    time : b,
    regionEvent : c
  };
  if (this.mSortedMessageList.length) {
    for (var b = !1, c = this.mSortedMessageList.length, d = 0; d < c; d++)
      if (this.mSortedMessageList[d].time > a.time) {
        this.mSortedMessageList.splice(d, 0, a);
        b = !0;
        break
      }
    b || this.mSortedMessageList.push(a)
  } else
    this.mSortedMessageList.push(a)
};
simcity.cRegionWallUI.prototype.DebugShowSortedWallEvents = function () {
  for (var a = this.mSortedMessageList.length, b = 0; b < a; b++);
};
simcity.cRegionWallUI.prototype.InsertSortedWallEvents = scrui.Client_ProfZone("cRegionWallUI.InsertSortedWallEvents", function () {
    for (var a = this.mSortedMessageList.length, b = 0; b < a; b++) {
      var c = this.mSortedMessageList[b],
      c = this.CreateRegionMessage(c.text, this.mRegionWallMessageContainer, this.mRegionWallOffset, this.mRegionWallRootControl, c, "event");
      this.mRegionWallOffset += c.mHeight
    }
    this.OffsetRegionWall()
  });
simcity.cRegionWallUI.prototype.AppendDateDividerToRegionWall = function (a, b, c) {
  var d = null,
  a = a.created ? new Date(a.created) : new Date,
  a = a.toDateString(),
  e = new Date,
  e = e.toDateString(),
  f = new Date;
  f.setDate(f.getDate() - 1);
  f = f.toDateString();
  !this.mDividerToday && e == a && (d = new scrui.cLocaleString("RegionWall.json", "0x0f2b806e", "TODAY"), d = this.CreateRegionMessage(d.LoadAndGetTextSynchronous(), b, c), this.mDividerToday = !0);
  !this.mDividerYesterday && f == a && (d = new scrui.cLocaleString("RegionWall.json", "0x0f2b807e",
        "YESTERDAY"), d = this.CreateRegionMessage(d.LoadAndGetTextSynchronous(), b, c), this.mDividerYesterday = !0);
  !this.mDividerOlder && (e != a && f != a) && (d = new scrui.cLocaleString("RegionWall.json", "0x0f2b805e", "OLDER"), d = this.CreateRegionMessage(d.LoadAndGetTextSynchronous(), b, c), this.mDividerOlder = !0);
  d && d.FindControlByID(this.kControlIDs.MESSAGE_BACKGROUND).SetVisibility(!1);
  return d
};
simcity.cRegionWallUI.prototype.CreateRegionMessage = scrui.Client_ProfZone("cRegionWallUI.CreateRegionMessage", function (a, b, c, d, e, f) {
    var g = "event" === f ? !0 : !1,
    h = "usercityLog" === f || "globalcityLog" === f ? !0 : !1;
    if (d) {
      var i = d.mIsVisible;
      d.SetVisibility(!0)
    }
    var f = gUIManager.LoadAndCacheLayout(this.kPageLayouts.REGION_MESSAGE, b),
    j = f.FindControlByID(this.kControlIDs.MESSAGE_BODY_TEXT);
    g && (j.SetVisibility(!1), e = this.CreateEventOwnerString(e), a = e.text ? e.text : e.description, j = f.FindControlByID(this.kControlIDs.EVENT_BODY_TEXT),
      j.SetVisibility(!0));
    h && (j.SetVisibility(!1), e = this.CreateCityLogString(e), a = e.description, j = f.FindControlByID(this.kControlIDs.CITYLOG_BODY_TEXT), j.SetVisibility(!0));
    j.SetText(a);
    a = f.FindControlByID(this.kControlIDs.REPORT_MESSAGE_BUTTON);
    e && (e.regionEvent && e.regionEvent.user && e.regionEvent.user.id != this.mUserID || e.messageType && "chat" == e.messageType && e.user.id != this.mUserID) ? (e && e.id && e.user && !e.regionEvent ? f.regionEvent = {
        boxId : this.mRegionId,
        id : e.id,
        user : e.user
      }
       : e.regionEvent && (f.regionEvent = e.regionEvent),
      a.SetEnabled(!0), a.SetVisibility(!0), a.regionId = this.mRegionId) : (a.SetEnabled(!1), a.SetVisibility(!1));
    f.SetWidth(b.mWidth - b.mLeft - 0);
    b = j.GetTextHeight();
    0 >= b && (b = 14);
    f.SetHeight(j.mTop + b + 0);
    f.SetPosition(0, c);
    d && d.SetVisibility(i);
    return f
  });
simcity.cRegionWallUI.prototype.CreateTimeStampString = function (a) {
  a = a ? new Date(a) : new Date;
  a = a.toString();
  a = a.split(" ")[4] || "";
  a = a.split(":");
  return " (" + a[0] + ":" + a[1] + ") "
};
simcity.cRegionWallUI.prototype.CreateMessageString = function (a) {
  if (a.created) {
    this.CreateTimeStampString(a.created);
    var b,
    c = [],
    d = [];
    if (simcity.gMyGamesUIHandler) {
      b = this.mOverviewMap.mRegionData.boxes;
      for (var e = 0; e <= b.length - 1; e++) {
        var f = b[e].creatorName;
        -1 >= c.indexOf(f) && f && c.push(f)
      }
    } else if (simcity.gGlobalUIHandler) {
      b = simcity.gGlobalUIHandler.mRegionViewUIHandler;
      for (e in b.mRegionData.mPlayers)
        f = b.mRegionData.mPlayers[e].screenName, -1 >= c.indexOf(f) && f && c.push(f);
      for (var g in b.mRegionData.mBoxes)
        f =
          b.mRegionData.mBoxes[g].name, -1 >= d.indexOf(f) && f && d.push(f)
    }
    for (b = 0; b <= c.length - 1; b++)
      RegExp(c[b]).test(a.message) && (a.message = a.message.replace(c[b], "<b " + simcity.cRegionWallUI.kTealStyle + ">" + c[b] + "</b>"));
    for (b = 0; b <= d.length - 1; b++)
      RegExp(d[b]).test(a.message) && (a.message = a.message.replace(d[b], "<b " + simcity.cRegionWallUI.kTealStyle + ">" + d[b] + "</b>"));
    return "<b " + simcity.cRegionWallUI.kTealStyle + ">" + a.user.screenName + "</b><b " + simcity.cRegionWallUI.kTealStyle + ">: </b>" + a.message
  }
  return a.description ?
  a.description : ""
};
simcity.cRegionWallUI.prototype.CreateCityLogString = function (a) {
  if (a.description) {
    var b = "",
    c = new scrui.cLocaleString("GameEntry.json", "0x0e2912f0", "CityLog");
    /ACHIEVEMENT/.test(a.textLink);
    b = b.concat(c.LoadAndGetTextSynchronous() + ": " + a.description);
    a.description = b
  }
  return a
};
simcity.cRegionWallUI.prototype.CreateEventOwnerString = function (a) {
  if (a.description && "Region Message" !== a.title) {
    var b;
    b = "".concat(a.title + a.description);
    a.description = b
  }
  return a
};
simcity.cRegionWallUI.prototype.PopulateWallMessages = scrui.Client_ProfZone("cRegionWallUI.PopulateWallMessages", function () {
    if (this.mRegionWallMessageContainer && 0 < this.mMessageList.length) {
      this.mMessageList = this.mMessageList.splice(0, simcity.cRegionWallUI.kMaxWallMessages);
      for (var a = this.mMessageList.length - 1; 0 <= a; a--)
        this.AppendMessageToRegionWall(this.mMessageList[a], !1)
    }
  });
simcity.cRegionWallUI.prototype.PopulateRegionEvents = scrui.Client_ProfZone("cRegionWallUI.PopulateRegionEvents", function () {
    if (this.mRegionWallMessageContainer && this.mRegionEventsList && 0 < this.mRegionEventsList.length) {
      this.mRegionEventsList = this.mRegionEventsList.slice(-simcity.cRegionWallUI.kMaxNumRegionEvents);
      for (var a = 0; a < this.mRegionEventsList.length; a++)
        this.AppendRegionEventToRegionWall(this.mRegionEventsList[a])
    }
  });
simcity.cRegionWallUI.prototype.getUserContainer = function (a) {
  for (var b = gUIManager.FindControlByID(this.kControlIDs.REGION_PLAYERS_CONTAINER), c = 0; c < b.mChildren.length; c++) {
    var d = b.mChildren[c];
    if (d.mUserData == a)
      return d
  }
};
simcity.cRegionWallUI.prototype.HandleUIMessage = function (a, b, c) {
  switch (a) {
  case scrui.kMsgTypeButtonClicked:
    switch (b) {
    case this.kControlIDs.WINDOW_CLOSE_BUTTON:
      simcity.gGlobalUIHandler.mRegionWallButton.SetSelected(!1);
      break;
    case this.kControlIDs.REGION_WALL_SELECTOR:
      this.RevealRegionWallTextEntry(!0);
      break;
    case this.kControlIDs.REPORT_MESSAGE_BUTTON:
      this.ReportMessage(c)
    }
  }
};
simcity.cRegionWallUI.prototype.RegionWallIsVisible = function () {
  return this.mRegionWallRootControl ? this.mRegionWallRootControl.mIsVisible : !1
};
simcity.cRegionWallUI.prototype.RevealRegionWallTextEntry = function (a) {
  this.mRegionWallContainer && (this.mRegionWallTextEntryVisibility ? (this.mRegionWallContainer.FindControlByID(this.kControlIDs.REGION_WALL_SELECTOR).SetVisibility(!0), this.mRegionWallContainer.FindControlByID(this.kControlIDs.WALL_BACKGROUND).SetVisibility(!0), this.mRegionWallContainer.FindControlByID(this.kControlIDs.INPUT_CONTAINER).SetVisibility(!0), simcity.SendSoundEvent(simcity.audio.kGlobalSoundObjectID, simcity.audio.kInstanceUIChatWindowOpen),
      a && this.mRegionWallInputField.Focus()) : this.mRegionWallContainer.FindControlByID(this.kControlIDs.INPUT_CONTAINER).SetVisibility(!1))
};
simcity.cRegionWallUI.prototype.HideRegionWallTextEntry = function () {
  this.mRegionWallContainer.FindControlByID(this.kControlIDs.REGION_WALL_SELECTOR).SetVisibility(!1);
  this.mRegionWallContainer.FindControlByID(this.kControlIDs.WALL_BACKGROUND).SetVisibility(!1);
  this.mRegionWallContainer.FindControlByID(this.kControlIDs.INPUT_CONTAINER).SetVisibility(!1)
};
simcity.cRegionWallUI.prototype.SetTextInputVisibility = function (a) {
  (this.mRegionWallTextEntryVisibility = a) || this.mRegionWallContainer.FindControlByID(this.kControlIDs.INPUT_CONTAINER).SetVisibility(a)
};
simcity.cRegionWallUI.prototype.ToggleRegionWall = function (a) {
  this.mRegionWallRootControl && (this.mRegionWallRootControl.mIsVisible ? (this.HideRegionWall(), gUIManager.FindControlByID(this.kControlIDs.WALL_BACKGROUND).SetVisibility(!1), gUIManager.FindControlByID(this.kControlIDs.INPUT_CONTAINER).SetVisibility(!1), simcity.SendSoundEvent(simcity.audio.kGlobalSoundObjectID, simcity.audio.kInstanceUIChatWindowClose)) : this.ShowRegionWall(a))
};
simcity.cRegionWallUI.prototype.ShowRegionWall = function (a) {
  this.mRegionWallRootControl && (this.mRegionWallRootControl.SetVisibility(!0), simcity.SendSoundEvent(simcity.audio.kGlobalSoundObjectID, simcity.audio.kInstanceUIChatWindowOpen), this.OffsetRegionWall(), a ? this.mRegionWallInputField.Focus() : this.mRegionWallInputField.Blur())
};
simcity.cRegionWallUI.prototype.OffsetRegionWall = function () {
  this.mRegionWallMessageContainer && (this.mRegionWallMessageContainer.mRootElement.scrollTop = this.mRegionWallOffset)
};
simcity.cRegionWallUI.prototype.HideRegionWall = function () {
  this.mRegionWallRootControl && (this.mRegionWallRootControl.SetVisibility(!1), simcity.SendSoundEvent(simcity.audio.kGlobalSoundObjectID, simcity.audio.kInstanceUIChatWindowClose))
};
simcity.cRegionWallUI.prototype.OpenSocket = function (a) {
  for (var b = Object.keys(this.kServerURLs), c = this, d = 0, e = b.length; d < e; d++) {
    var f = null,
    g = b[d],
    h = null;
    switch (g) {
    case "CHATPATH":
      f = this.mSocketGUID;
      h = function () {
        c.RecieveMessageOnSocket(arguments, "chat")
      };
      break;
    case "EVENTSPATH":
      f = this.mEventsGUID;
      h = function () {
        c.RecieveMessageOnSocket(arguments, "event")
      };
      break;
    case "USERCITYLOG":
      f = this.mUserCityLogGUID;
      h = function () {
        c.RecieveMessageOnSocket(arguments, "usercitylog")
      };
      break;
    case "GLOBALCITYLOG":
      f = this.mGlobalCityLogGUID,
      h = function () {
        c.RecieveMessageOnSocket(arguments, "globalcitylog")
      }
    }
    a ? simcity.gSocketManager.AddSocketRequest(this.kServerURLs[g], f, h, !1) : simcity.gSocketManager.RemoveSocketRequest(this.kServerURLs[g], f, h, !1)
  }
};
simcity.cRegionWallUI.prototype.CloseSocket = function () {
  this.OpenSocket(!1)
};
simcity.cRegionWallUI.prototype.MessageNotification = function () {
  this.mRegionWallRootControl && !1 === simcity.gGlobalUIHandler.mRegionWallButton.mIsSelected && (simcity.gGlobalUIHandler.mRegionWallButton.SetSelected(!0), simcity.SendSoundEvent(simcity.audio.kGlobalSoundObjectID, simcity.audio.kInstanceUIChatWindowOpen), setTimeout(function () {
      simcity.gGlobalUIHandler.mRegionWallButton.SetSelected(!1);
      simcity.SendSoundEvent(simcity.audio.kGlobalSoundObjectID, simcity.audio.kInstanceUIChatWindowClose)
    }, 5E3))
};
simcity.cRegionWallUI.prototype.RecieveMessageOnSocket = function (a, b) {
  simcity.SendSoundEvent(simcity.audio.kGlobalSoundObjectID, simcity.audio.kInstanceUIChatReceive);
  if (!a[0].hasOwnProperty("isOnline")) {
    var c = this.CreateMessage(a[0], b);
    (0 == c.regionId || c.regionId == this.mRegionId) && this.AddMessage(c, b)
  }
};
simcity.cRegionWallUI.prototype.CreateMessageDirect = function (a, b, c) {
  simcity.SendSoundEvent(simcity.audio.kGlobalSoundObjectID, simcity.audio.kInstanceUIChatReceive);
  this.AddMessage({
    data : "",
    description : a,
    priority : 0,
    region : 0,
    regionMessage : !1,
    textLink : "",
    timeUpdated : 0,
    title : "",
    created : 0,
    id : 0,
    message : null,
    regionId : 0,
    updated : 0,
    user : b,
    userMessage : !1,
    persist : !0,
    messageType : c
  }, c)
};
simcity.cRegionWallUI.prototype.CreateMessage = function (a, b) {
  var a = a || {},
  c = {
    REGION_GAME_EVENT : 0,
    USER_GAME_EVENT : 0,
    isOnline : !1,
    avatarImage : "",
    avatarLink : "",
    data : "",
    description : "",
    priority : 0,
    region : 0,
    regionMessage : !1,
    textLink : "",
    timeUpdated : 0,
    title : "",
    created : 0,
    id : 0,
    message : "",
    regionId : 0,
    updated : 0,
    user : {},
    userMessage : !1,
    persist : !0,
    messageType : b
  };
  if ("object" != typeof a)
    return c;
  this.Private_SetMessageData(c, a);
  return c
};
simcity.cRegionWallUI.prototype.Private_SetMessageData = function (a, b) {
  if ("object" == typeof a && "object" == typeof b && a)
    for (var c in b)
      a.hasOwnProperty(c) && (a[c] = b[c])
};
simcity.cRegionWallUI.prototype.ReportMessage = function (a) {
  var b = null;
  simcity.gMyGamesUIHandler ? b = simcity.gMyGamesUIHandler.mReportContentUIHandler : simcity.gGlobalUIHandler && (b = simcity.gGlobalUIHandler.mReportContentUIHandler);
  var a = a.GetParentLayout().regionEvent,
  c = b.mReportDetails;
  c.reportType = b.mReportTypes.CHAT;
  c.boxId = this.mRegionId;
  c.type = "REGION";
  c.messageId = a.id;
  c.targetUserId = a.user.id;
  c.targetUserPersona = a.user.screenName;
  c.petitionerPersona = simcity.gSessionManager.mScreenName;
  b.Show(c)
};
simcity.cRegionWallUI.prototype.PostNewMessage = function () {
  var a = null;
  simcity.gMyGamesUIHandler ? a = simcity.gMyGamesUIHandler.mRegionWallUI : simcity.gGlobalUIHandler && (a = simcity.gGlobalUIHandler.mRegionWallUI);
  var b = a.mRegionWallContainer.FindControlByID(a.kControlIDs.FORM_TEXT_AREA),
  c = b.GetText(),
  d = "";
  "" !== c ? (d = c, b.SetText("")) : simcity.gGlobalUIHandler && (simcity.gGlobalUIHandler.mRegionWallUI.ShowRegionWall(!1), simcity.gGlobalUIHandler.mRegionWallButton.SetSelected(!1), simcity.gGlobalUIHandler.mRegionWallUI.RevealRegionWallTextEntry(!1));
  "" !== d && (d = d.replace(RegExp(/[&\%\+]/g), " "), a = {
      url : scrui.GetRestPath() + "region/" + a.mRegionId + "/message.json",
      params : [["message", d], ["persist", !0], ["title", "chat"], ["pinned", !1]],
      onSuccess : function () {},
      onError : function () {},
      method : "post"
    }, scrui.XHR.Request(a), b.value = "")
};
simcity.cRegionWallUI.prototype.GetAllRegionEvents = function () {
  var a = this,
  b = {
    url : scrui.GetRestPath().replace("/simcity/rest", "/citylog/json") + "regionWallService/readFeed",
    params : [["region", this.mRegionId]],
    onSuccess : function (b) {
      b && b.json && (a.mRegionEventsList = b.json.feedResponse.feed, a.PopulateRegionEvents(), a.InsertSortedWallEvents())
    },
    onError : function () {},
    method : "get"
  };
  scrui.XHR.Request(b)
};
simcity.cRegionWallUI.prototype.GetAllMessages = function () {
  var a = this,
  b = {
    url : scrui.GetRestPath() + "region/" + this.mRegionId + "/messages.json",
    params : [["sessionid", this.mSessionID]],
    onSuccess : function (b) {
      b && (b.json && b.json.region_messages) && (a.mMessageList = b.json.region_messages, a.PopulateWallMessages(), a.GetAllRegionEvents())
    },
    onError : function () {},
    method : "get"
  };
  scrui.XHR.Request(b)
};
simcity.cRegionWallUI.prototype.SetRegionID = function (a) {
  this.mRegionId = a
};
simcity.cRegionWallUI.prototype.ClearContainer = function (a) {
  a && a.DestroyChildren()
};
simcity.cRegionWallUI.prototype.Destroy = function () {
  null != this.mRegionWallMessageContainer && this.ClearContainer(this.mRegionWallMessageContainer)
};
simcity.config = {};
simcity.DEBUG = !1;
simcity.RegionCityInfo = {};
simcity.gRegionCityInfo = {
  Tutorial : {
    regionName : "Tutorial",
    cities : {
      1026 : {
        name : "Maxisburg",
        description : "A small suburb of Lucky Shores that has seen better days.  A recent government grant has been provided to turn this city around.  Now it just needs the right mayor."
      },
      1027 : {
        name : "Lucky Shores",
        description : "A tragic meteor strike has decimated this once bustling gambling city and sent the previous mayor fleeing.  This city is in search of a up and coming mayor to tackle the recovery effort."
      }
    }
  },
  CliffsideVista : {
    regionName : "Cliffside Vista",
    cities : {
      1026 : {
        name : "Eaglecliff Summit",
        description : "Perched atop the cliffs of Mt. Franklin, Eaglecliff Summit is buffeted by high winds. This site is peppered with small oil, ore and coal deposits."
      },
      1027 : {
        name : "Prospect Sands",
        description : "A coastal site at the bottom of a cliff wall, what this site lacks in oil, coal or ore, it makes up for with ample water and wind."
      }
    }
  },
  LakeshoreTies : {
    regionName : "Lakeshore Ties",
    cities : {
      1026 : {
        name : "Slick Shallows",
        description : "A deep oil deposit highlights this coastal site, ready for a budding oil baron."
      },
      1027 : {
        name : "Sapphire Bay",
        description : "Clear waters and a scenic view make this a great spot for a tourist destination."
      },
      1028 : {
        name : "Ralston",
        description : "Ore deposits exposed by river erosion provides easy pickings for potential miners."
      },
      1029 : {
        name : "Colton Hills",
        description : "This site has hilltop coal deposits and a convenient riverside location."
      },
      1030 : {
        name : "Big Bend",
        description : "Small amounts of crude oil, raw ore and coal makes this site ideal for a trade city."
      }
    }
  },
  MultiplayerDemo : {
    regionName : "Multiplayer Demo",
    cities : {
      1026 : {
        name : "Northern City",
        description : "Little Water and Lots of Coal"
      },
      1027 : {
        name : "Southern City",
        description : "Plenty of water but very little resources"
      }
    }
  },
  FourSquare : {
    regionName : "Four Square",
    cities : {
      1026 : {
        name : "City A",
        description : "Lots of coal but very hilly terrain."
      },
      1027 : {
        name : "City B",
        description : "Coal and Ore Deposits populate this relatively dry box."
      },
      1028 : {
        name : "City C",
        description : "This flat forest box has plenty of water and is very popular with residents."
      },
      1029 : {
        name : "City D",
        description : "This hilly region has water, coal and oil."
      }
    }
  },
  "Trinity Valley" : {
    regionName : "Trinity Valley",
    cities : {
      1026 : {
        name : "Stonesrow",
        description : "This city has a small amount of all extractible resources except for water where it is slightly lacking."
      },
      1027 : {
        name : "Llama",
        description : "This balanced shoreline city has a little of everything you might want to get started."
      },
      1028 : {
        name : "Pearl",
        description : "This shoreline city has water and very high residential and commercial demand."
      }
    }
  },
  E3Demo : {
    regionName : "E3 Demo",
    cities : {
      1026 : {
        name : "Stonesrow",
        description : "This city has a small amount of all extractible resources except for water where it is slightly lacking."
      },
      1027 : {
        name : "Llama",
        description : "This balanced shoreline city has a little of everything you might want to get started."
      },
      1028 : {
        name : "Pearl",
        description : "This shoreline city has water and very high residential and commercial demand."
      }
    }
  },
  LocalizedTest : {
    regionName : "LocalizedTest",
    cities : {
      1026 : {
        name : "RegionDescription.json!0x20000",
        description : "RegionDescription.json!0x20001",
        resources : ["RegionDescription.json!0x20004", "RegionDescription.json!0x20005"]
      },
      1027 : {
        name : "RegionDescription.json!0x20002",
        description : "RegionDescription.json!0x20003",
        resources : ["RegionDescription.json!0x20006", "RegionDescription.json!0x20007"]
      }
    }
  }
};
simcity.TutorialManager = {};
function cMouseInterceptWindow(a, b, c, d, e, f, g, h) {
  this.mTargetWindow = null;
  this.Window = scrui.cWindow;
  this.Window(a, b, c, d, e, f, g, h)
}
goog.inherits(cMouseInterceptWindow, scrui.cWindow);
cMouseInterceptWindow.prototype.SetTargetWindow = function (a) {
  this.mTargetWindow = a;
  this.SyncPositionWithTarget()
};
cMouseInterceptWindow.prototype.SyncPositionWithTarget = function () {
  if (this.mTargetWindow) {
    var a = this.mTargetWindow.GetAbsolutePosition();
    this.SetPosition(a[0], a[1], this.mTargetWindow.mWidth, this.mTargetWindow.mHeight)
  }
};
cMouseInterceptWindow.prototype.Private_OnGainFocus = function () {
  gUIManager.SetControlUnderMouse(this.mTargetWindow)
};
cMouseInterceptWindow.prototype.Private_OnLoseFocus = function (a) {
  this.mTargetWindow.Private_OnLoseFocus(a)
};
cMouseInterceptWindow.prototype.Private_OnMouseDown = function (a, b) {
  this.mTargetWindow.Private_OnMouseDown(a, b)
};
cMouseInterceptWindow.prototype.Private_OnMouseUp = function (a, b) {
  this.mTargetWindow.Private_OnLoseFocus(a, b)
};
simcity.IsTutorialInProgress = function () {
  var a = simcity.gGlobalUIHandler.mTutorialManager;
  return simcity.gGlobalUIHandler.mIsTutorialEnabled && a.mTutorialState !== simcity.cTutorialManager.kTutorialStateCompleted
};
simcity.IsMouseEatingWindowVisible = function () {
  var a = simcity.gGlobalUIHandler.mTutorialManager;
  return a && a.mMouseEaterWindow && a.mMouseEaterWindow.mIsVisible
};
simcity.cTutorialManager = function () {
  this.UIHandler = scrui.cUIHandler;
  this.UIHandler();
  this.mTutorialsInitiated = !1;
  this.mTutorialState = simcity.cTutorialManager.kTutorialStateCompleted;
  this.mTutorialData = null;
  this.mUsedTools = [];
  this.mMouseEaterWindow = this.mCameraInfoState = null;
  this.mMouseInterceptWindows = [];
  this.mTutorialActive = !1;
  this.mMissionInfo = null;
  this.mObjectiveIndex = -1;
  this.mTutorialSkipped = !1;
  this.mUpdateThrottle = 200;
  this.mUpdateTimer = 100;
  this.mCustomTimer = -1
};
goog.inherits(simcity.cTutorialManager, scrui.cUIHandler);
simcity.cTutorialManager.kTutorialStateBegin = scrui.IDFromName("MSCivicWelcometoSimCity");
simcity.cTutorialManager.kTutorialStateRoads = 1;
simcity.cTutorialManager.kTutorialStateRoadsEnded = 2;
simcity.cTutorialManager.kTutorialStateZones = 3;
simcity.cTutorialManager.kTutorialStateZonesEnded = 4;
simcity.cTutorialManager.kTutorialStateSpeechAlert = 5;
simcity.cTutorialManager.kTutorialStateSpeechAlertEnded = 6;
simcity.cTutorialManager.kTutorialStateCoalPower = 7;
simcity.cTutorialManager.kTutorialStateCoalPowerEnded = 8;
simcity.cTutorialManager.kTutorialStateCompleted = 100;
simcity.cTutorialManager.kTutorialStateZoneResidential = scrui.IDFromName("MSCivicCreateResidential");
simcity.cTutorialManager.kToolMetaZoneResidential = scrui.IDFromName("LotZoneResidential");
simcity.cTutorialManager.kToolMetaZoneIndustrial = scrui.IDFromName("LotZoneIndustrial");
simcity.cTutorialManager.kToolMetaZoneCommercial = scrui.IDFromName("LotZoneCommercial");
simcity.cTutorialManager.prototype.Init = function () {
  this.mMouseEaterWindow = gUIManager.FindControlByID(simcity.kWinMouseEaterID)
};
simcity.cTutorialManager.prototype.Shutdown = function () {};
simcity.cTutorialManager.prototype.Update = scrui.Client_ProfZone("cTutorialManager.Update", function (a) {
    for (var b = 0, c = this.mMouseInterceptWindows.length; b < c; ++b)
      this.mMouseInterceptWindows[b].SyncPositionWithTarget();
    this.mCustomTimer -= a;
    this.mUpdateTimer -= a;
    0 > this.mUpdateTimer && (this.mUpdateTimer = this.mUpdateThrottle, this.mTutorialData && this.mTutorialData.hasOwnProperty("customCompletionCheck") && this.mTutorialData.customCompletionCheck(a))
  });
simcity.cTutorialManager.prototype.HandleUIMessage = function (a, b, c) {
  switch (a) {
  case scrui.kMsgTypeButtonClicked:
    switch (b) {
    case simcity.cSpeechBalloonHandler.kBtnOpen:
      if (this.mTutorialActive) {
        this.CompleteTutorialStep();
        var d = simcity.gGlobalUIHandler.mSpeechBalloonHandler.GetExpandedSpeechBalloon();
        d && !d.mIsThoughtBubble && this.SetModalWindow(d.mDetailedInfoWindow, !0)
      }
    }
  }
  scrui.cUIHandler.prototype.HandleUIMessage.call(this, a, b, c)
};
simcity.cTutorialManager.prototype.EnableCallout = function () {
  simcity.gGlobalUIHandler.mTutorialCallout.EnableCallout()
};
simcity.cTutorialManager.prototype.HideCalloutHelper = function () {
  simcity.gGlobalUIHandler.mTutorialCallout.HideCallout();
  this.mTutorialsInitiated = this.mTutorialActive = !1
};
simcity.cTutorialManager.prototype.WaitForObjective = function () {
  this.mTutorialActive = !1
};
simcity.cTutorialManager.prototype.CompleteTutorialStep = function () {
  this.HideCalloutHelper();
  simcity.gGlobalUIHandler.mTutorialManager.SetModalWindow(simcity.GetOptionsMenuButton(), !0);
  this.mTutorialState = null;
  this.mObjectiveIndex > simcity.kTutorialStateObjective9 && (this.mObjectiveIndex = simcity.kTutorialStateObjective1);
  simcity.CompleteObjective(this.mMissionInfo, this.mObjectiveIndex, !0)
};
simcity.cTutorialManager.prototype.ClearTutorialState = function () {
  this.HideCalloutHelper();
  this.mTutorialData = this.mMissionInfo = null;
  this.UpdateUIVisibility()
};
simcity.cTutorialManager.prototype.HasTutorialState = function (a, b) {
  var c = "number" === typeof a ? a : a.fileNameKey,
  d = !1;
  simcity.TutorialCalloutStates.hasOwnProperty(c) && (d = (c = simcity.TutorialCalloutStates[c]) && c(b));
  return d
};
simcity.cTutorialManager.prototype.TutorialStateOnCompletion = function (a) {
  if (a && a.hasOwnProperty("onCompletion"))
    a.onCompletion();
  a && a.lockUIWithCamera && this.mMouseEaterWindow.SetIgnoreMouse(!1)
};
simcity.cTutorialManager.prototype.SetTutorialState = function (a, b) {
  gUIManager.mBlockMouseClick = !1;
  gUIManager.SetCaptureControl(null);
  if (!this.mTutorialSkipped) {
    this.mMissionInfo = a;
    this.mObjectiveIndex = b;
    var c = "number" === typeof this.mMissionInfo ? this.mMissionInfo : this.mMissionInfo.fileNameKey;
    "function" === typeof simcity.TutorialCalloutStates[c] ? null !== simcity.TutorialCalloutStates[c](this.mObjectiveIndex) && ((this.mTutorialsInitiated = !0, this.mTutorialState = c, this.mTutorialData = simcity.TutorialCalloutStates[c](b),
        this.mTutorialActive = !0, c = simcity.gGlobalUIHandler.mTutorialCallout, this.mTutorialData.hasOwnProperty("dialogLayoutPath") ? c.ShowCallout(this.mTutorialData) : this.mTutorialData.hasOwnProperty("onCompletion") && (c.mDataBinding = this.mTutorialData, simcity.gGlobalUIHandler.mTutorialManager.TutorialStateOnCompletion(c.mDataBinding)), this.mTutorialData.hasOwnProperty("targetToy") && c.PointToBuilding(this.mTutorialData), this.mTutorialData.hasOwnProperty("targetTransport") && c.PointToTransport(this.mTutorialData),
        this.mTutorialData.hasOwnProperty("targetRegionBox") && c.PointToRegionBox(this.mTutorialData), !this.mTutorialData.hasOwnProperty("allowUnitPicking") || this.mTutorialData.hasOwnProperty("allowUnitPicking") && !this.mTutorialData.allowUnitPicking ? scrui.PostGameCommand(scrui.BuildCommand(["enablePicking", "false"])) : scrui.PostGameCommand(scrui.BuildCommand(["enablePicking", "true"])), this.mTutorialData.hasOwnProperty("camera")) ? (c = ["moveCameraAndTransition"].concat(this.mTutorialData.camera), scrui.PostGameCommand(scrui.BuildCommand(c))) :
      this.mTutorialData.hasOwnProperty("cameraTarget") && scrui.PostGameCommand(scrui.BuildCommand(["zoomToUnitID", this.mTutorialData.cameraTarget]))) : this.HideCalloutHelper()
  }
  this.UpdateUIVisibility()
};
simcity.cTutorialManager.prototype.UpdateButtonVisibilityHelper = function (a, b) {
  a && (b ? (a.SetOpacity(1), a.SetIgnoreMouse(!1)) : (a.SetOpacity(0.3), a.SetIgnoreMouse(!0)))
};
simcity.cTutorialManager.prototype.UpdateUIVisibility = function () {
  null === this.mTutorialData && (this.mTutorialData = []);
  var a = this.mTutorialData.hideAllButtons || simcity.IsTutorialInProgress() && !this.mTutorialData.hideAllButtons,
  b = this.mTutorialData.showButtons || [],
  c = !0;
  0 < b.length && (c = !1);
  var d = simcity.GetBulldozeButton(),
  e = d.mParentControl.FindControlByID(simcity.cToolPaletteUIHandler.kBtnIDCategoryButtonOn);
  this.UpdateButtonVisibilityHelper(d, !a);
  this.UpdateButtonVisibilityHelper(e, !a);
  simcity.gGlobalUIHandler.mToolPaletteUIHandler.mEditorLayout.mIsVisible &&
  (d = simcity.gGlobalUIHandler.mToolPaletteUIHandler.mEditorLayout.FindControlByID(simcity.cToolPaletteUIHandler.kBtnBulldozer)) && this.UpdateButtonVisibilityHelper(d, !a);
  d = simcity.GetDemandBarButton();
  this.UpdateButtonVisibilityHelper(d, !a);
  d = simcity.GetBudgetButton();
  this.UpdateButtonVisibilityHelper(d, !a);
  d = simcity.GetPopulationButton();
  this.UpdateButtonVisibilityHelper(d, !a);
  d = simcity.GetMayorRatingButton();
  this.UpdateButtonVisibilityHelper(d, !a);
  d = simcity.GetAllDataLayersButton();
  this.UpdateButtonVisibilityHelper(d,
    !a);
  d = gUIManager.FindControlByID(simcity.kCityNameButton);
  simcity.cTutorialManager.prototype.UpdateButtonVisibilityHelper(d, !a);
  simcity.cTutorialManager.prototype.UpdateButtonVisibilityHelper(simcity.gGlobalUIHandler.mCitySpecializationButton, !a);
  d = simcity.GetRegionViewButton();
  this.UpdateButtonVisibilityHelper(d, !a);
  d = simcity.gGlobalUIHandler.mGlobalUILayout.FindControlByID(241958979);
  this.UpdateButtonVisibilityHelper(d, !a);
  d = simcity.GetRegionViewReturnToCityButton();
  this.UpdateButtonVisibilityHelper(d,
    !a);
  d = simcity.gGlobalUIHandler.mSharedUIParent.FindControlByID(simcity.kWinSpeedContainer);
  this.UpdateButtonVisibilityHelper(d, c);
  d = simcity.gGlobalUIHandler.mToolPaletteUIHandler.mCategoryContainer;
  if (d.mChildren)
    for (var e = 0, f = d.mChildren.length; e < f; ++e) {
      var g = d.mChildren[e].FindControlByID(simcity.cToolPaletteUIHandler.kBtnIDCategoryButton),
      h = d.mChildren[e].FindControlByID(simcity.cToolPaletteUIHandler.kBtnIDCategoryButtonOn),
      c = !a;
      this.UpdateButtonVisibilityHelper(g, c);
      this.UpdateButtonVisibilityHelper(h,
        c)
    }
  if (d = simcity.gGlobalUIHandler.mToolPaletteUIHandler.GetPanelLayout()) {
    c = !a;
    e = d.FindControlByID(simcity.cToolPaletteUIHandler.kBtnClose);
    this.UpdateButtonVisibilityHelper(e, c);
    if ((g = d.FindControlByID(simcity.cToolPaletteUIHandler.kWinIDPalettePanel)) && g.mChildren) {
      e = 0;
      for (f = g.mChildren.length; e < f; ++e)
        h = g.mChildren[e].FindControlByID(simcity.cToolPaletteUIHandler.kBtnIDSelectTool), this.UpdateButtonVisibilityHelper(h, c)
    }
    if (g = d.FindControlByID(238522843))
      e = d.FindControlByID(238264762).FindControlByID(158753137),
      f = d.mParentControl.FindControlByID(238001564).FindControlByID(simcity.cToolPaletteUIHandler.kWinNewContextualInfoContainer), g = g.FindControlByID(158753137), this.UpdateButtonVisibilityHelper(g, c), this.UpdateButtonVisibilityHelper(e, c), this.UpdateButtonVisibilityHelper(f, c), e = d.FindControlByID(238265268).FindControlByID(158753137), f = d.mParentControl.FindControlByID(238001568).FindControlByID(simcity.cToolPaletteUIHandler.kWinNewContextualInfoContainer), this.UpdateButtonVisibilityHelper(e, c), this.UpdateButtonVisibilityHelper(f,
        c), e = d.FindControlByID(238265630).FindControlByID(158753137), d = d.mParentControl.FindControlByID(238001572).FindControlByID(simcity.cToolPaletteUIHandler.kWinNewContextualInfoContainer), this.UpdateButtonVisibilityHelper(e, c), this.UpdateButtonVisibilityHelper(d, c);
    (d = gUIManager.FindControlByID(simcity.cToolPaletteUIHandler.kBtnDrawStraight)) && this.UpdateButtonVisibilityHelper(d, c);
    (d = gUIManager.FindControlByID(simcity.cToolPaletteUIHandler.kBtnDrawCurvy)) && this.UpdateButtonVisibilityHelper(d, c);
    (d =
        gUIManager.FindControlByID(simcity.cToolPaletteUIHandler.kBtnDrawGrid)) && this.UpdateButtonVisibilityHelper(d, c);
    (d = gUIManager.FindControlByID(simcity.cToolPaletteUIHandler.kBtnDrawArc)) && this.UpdateButtonVisibilityHelper(d, c);
    (d = gUIManager.FindControlByID(simcity.cToolPaletteUIHandler.kBtnDrawCircle)) && this.UpdateButtonVisibilityHelper(d, c);
    (d = gUIManager.FindControlByID(simcity.cToolPaletteUIHandler.kBtnRoadSelector)) && this.UpdateButtonVisibilityHelper(d, c)
  }
  c = Object.keys(simcity.gGlobalUIHandler.mToolPaletteUIHandler.mLayerButtons);
  for (d = 0; d < c.length; d++)
    this.UpdateButtonVisibilityHelper(simcity.gGlobalUIHandler.mToolPaletteUIHandler.mLayerButtons[c[d]].FindControlByID(simcity.cLayerUIHandler.kBtnLayerToggleOnID), !a);
  c = Object.keys(simcity.gGlobalUIHandler.mRegionViewUIHandler.mDataLayerButtons);
  for (d = 0; d < c.length; d++)
    if ((e = simcity.gGlobalUIHandler.mRegionViewUIHandler.mDataLayerButtons[c[d]]) && e.FindControlByID(simcity.kRegionView_DataLayerButton))
      this.UpdateButtonVisibilityHelper(e.FindControlByID(simcity.kRegionView_DataLayerButton),
        !a), this.UpdateButtonVisibilityHelper(e.FindControlByID(simcity.kRegionView_DataLayerButtonOn), !a);
  for (a = 0; a < b.length; a++)
    b[a] && this.UpdateButtonVisibilityHelper(b[a], !0);
  simcity.gGlobalUIHandler.mIsDemo && this.mTutorialDemo && simcity.cTutorialManager.prototype.UpdateButtonVisibilityHelper(simcity.gGlobalUIHandler.mToolPaletteUIHandler.GetButtonFromCategory(simcity.kCategoryIDDisasters), !1)
};
simcity.cTutorialManager.prototype.AddMouseInterceptWindow = function (a) {
  var b = new cMouseInterceptWindow(0, 0, 0, 40, 40, this.mMouseEaterWindow);
  b.SetTargetWindow(a);
  this.mMouseInterceptWindows.push(b)
};
simcity.cTutorialManager.prototype.SetModalWindow = function (a, b, c) {
  this.mMouseEaterWindow.SetVisibility(b);
  b ? (this.SetModalWindowHelper(a, c), scrui.PostGameCommand(scrui.BuildCommand(["LockCamera"]))) : (this.mMouseEaterWindow.DestroyChildren(), this.mMouseInterceptWindows.length = 0, scrui.PostGameCommand(scrui.BuildCommand(["UnlockCamera"])))
};
simcity.cTutorialManager.prototype.SetModalWindowHelper = function (a, b) {
  if (a.mIsVisible && ((a instanceof scrui.cButton || b) && this.AddMouseInterceptWindow(a), a.mChildren))
    for (var c = 0, d = a.mChildren.length; c < d; ++c)
      this.SetModalWindowHelper(a.mChildren[c])
};
simcity.AvatarManager = {};
simcity.cAvatarManagerHandler = function () {
  this.UIHandler = scrui.cUIHandler;
  this.UIHandler();
  this.mParentControl = this.mMouseEaterWindow = null
};
goog.inherits(simcity.cAvatarManagerHandler, scrui.cUIHandler);
simcity.cAvatarManagerHandler.kWinAvatarImage = 237907905;
simcity.cAvatarManagerHandler.kWinGreatWorksImage = 245423462;
simcity.cAvatarManagerHandler.kBtnAvatar = 239792063;
simcity.cAvatarManagerHandler.kWinAvatarOnlineHighlight = 239800634;
simcity.cAvatarManagerHandler.kWinAvatarYouHighlight = 240067876;
simcity.cAvatarManagerHandler.kWinAvatarOfflineHighlight = 240067945;
simcity.cAvatarManagerHandler.kWinAvatarLoggedInHighlight = 243944626;
simcity.cAvatarManagerHandler.kWinAvatarOpportunity = 239807635;
simcity.cAvatarManagerHandler.kWinAvatarAlertAnimation = 245949256;
simcity.cAvatarManagerHandler.kWinSpecializationBackground = 247750282;
simcity.cAvatarManagerHandler.kWinInfoBarTextWindow = 239731965;
simcity.cAvatarManagerHandler.kTxtInfoBarCityName = 239732070;
simcity.cAvatarManagerHandler.kTxtInfoBarPlayerName = 239732835;
simcity.cAvatarManagerHandler.kWinInfoBarCitySpecialization = 239799539;
simcity.cAvatarManagerHandler.kAvatarUpdateTime = 5E3;
simcity.cAvatarManagerHandler.kTopBottomMargin = 4;
simcity.cAvatarManagerHandler.kGapBetweenAvatars = 16;
simcity.cAvatarManagerHandler.kAlertCoolDown = 6E5;
simcity.cAvatarManagerHandler.kSocketGuid = 2322629511;
simcity.cAvatarManagerHandler.kSimTicksBeforeAlertsVisible = 1440;
simcity.kOnlineStatusOffline = 0;
simcity.kOnlineStatusOnline = 1;
simcity.kOnlineStatusOnlineYourRegion = 2;
simcity.cAvatarManagerHandler.prototype.Init = function () {
  this.mTimeSinceLastUpdate = simcity.cAvatarManagerHandler.kAvatarUpdateTime;
  this.mShowAlertsOK = !1;
  this.mListOfSubscribers = [];
  this.mNumberOfSubscribers = 0;
  this.mListOfClearedBoxes = [];
  this.mListOfSocketsOpened = []
};
simcity.cAvatarManagerHandler.prototype.Shutdown = function () {};
simcity.cAvatarManagerHandler.prototype.AddSubscription = function (a) {
  this.DoesSubscriptionExist(a) || (this.mListOfSubscribers[this.mNumberOfSubscribers] = a, this.mListOfSubscribers[this.mNumberOfSubscribers].currentSpecialization = -1, this.mListOfSubscribers[this.mNumberOfSubscribers].currentGreatWork = -1, a.playerID && !a.isMyBox && this.OpenSocket(a.playerID), this.mNumberOfSubscribers++)
};
simcity.cAvatarManagerHandler.prototype.DoesSubscriptionExist = function (a) {
  for (var b = 0; b < this.mNumberOfSubscribers; b++) {
    var c = this.mListOfSubscribers[b];
    if (c.group == a.group && c.boxID == a.boxID)
      return !0
  }
  return !1
};
simcity.cAvatarManagerHandler.prototype.UpdateOnlineState = function (a) {
  var b = !1,
  c = a.layoutInfo,
  d = simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData,
  e = 0;
  if (a.playerID || simcity.IsMainTutorialInProgress())
    e = d.mPlayers[a.playerID];
  if (c.FindControlByID(simcity.cAvatarManagerHandler.kWinAvatarOnlineHighlight)) {
    if (a.playerID && e) {
      var f = e.cities[0];
      f.creator.hasOwnProperty("currentPlayingRegionId") && f.creator.currentPlayingRegionId == d.mPlayingBox.creator.currentPlayingRegionId && (b = !0)
    }
    c.FindControlByID(simcity.cAvatarManagerHandler.kWinAvatarOnlineHighlight).SetVisibility(!1);
    c.FindControlByID(simcity.cAvatarManagerHandler.kWinAvatarYouHighlight).SetVisibility(!1);
    c.FindControlByID(simcity.cAvatarManagerHandler.kWinAvatarOfflineHighlight).SetVisibility(!1);
    c.FindControlByID(simcity.cAvatarManagerHandler.kWinAvatarLoggedInHighlight).SetVisibility(!1);
    a.isCurrentBox || (a.isMyBox ? c.FindControlByID(simcity.cAvatarManagerHandler.kWinAvatarYouHighlight).SetVisibility(!0) : e && (f = !1, d.mBoxes[a.boxID].isClaimed && (f = d.mBoxes[a.boxID].id == d.mBoxes[a.boxID].creator.currentPlayingBoxId),
        b && f || simcity.IsMainTutorialInProgress() ? c.FindControlByID(simcity.cAvatarManagerHandler.kWinAvatarOnlineHighlight).SetVisibility(!0) : (c.FindControlByID(simcity.cAvatarManagerHandler.kWinAvatarLoggedInHighlight).SetVisibility(e.isOnline), c.FindControlByID(simcity.cAvatarManagerHandler.kWinAvatarOfflineHighlight).SetVisibility(!e.isOnline))))
  }
};
simcity.cAvatarManagerHandler.prototype.UpdateAlerts = function (a) {
  if (a.showAlerts) {
    var b = a.layoutInfo;
    b.FindControlByID(simcity.cAvatarManagerHandler.kWinAvatarOpportunity).SetVisibility(!1);
    b.FindControlByID(simcity.cAvatarManagerHandler.kWinAvatarAlertAnimation).SetVisibility(!1);
    if (!a.isCurrentBox) {
      var c = b.FindControlByID(simcity.cAvatarManagerHandler.kWinAvatarOpportunity),
      b = b.FindControlByID(simcity.cAvatarManagerHandler.kWinAvatarAlertAnimation);
      c && b && (c.SetVisibility(!1), b.SetVisibility(!1),
        this.CheckNeedExist(a.boxID, a.unitRef, b))
    }
  }
};
simcity.cAvatarManagerHandler.prototype.UpdateIcons = function (a) {
  var b = simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData,
  c = 0;
  if (a.playerID || simcity.IsMainTutorialInProgress())
    c = b.mPlayers[a.playerID];
  var b = a.layoutInfo,
  d = a.hasOwnProperty("greatWorkID");
  if (!a.isCurrentBox)
    if (b.FindControlByID(simcity.cAvatarManagerHandler.kWinSpecializationBackground) && b.FindControlByID(simcity.cAvatarManagerHandler.kWinSpecializationBackground).SetVisibility(!1), d)
      a.currentGreatWork != a.greatWorksIcon && (a.currentGreatWork =
          a.greatWorksIcon, a.currentGreatWork && b.FindControlByID(simcity.cAvatarManagerHandler.kWinGreatWorksImage).SetWindowImage(a.currentGreatWork));
    else {
      d = 0;
      d = simcity.gGlobalUIHandler.mBoundaryUIHandler.GetCitySpecialization(Number(a.boxID));
      if (c) {
        b = b.FindControlByID(simcity.cAvatarManagerHandler.kWinAvatarImage);
        if ((!a.hasOwnProperty("avatarImageSet") || a.hasOwnProperty("forceImage")) && b)
          a.avatarImageSet = !0, simcity.gUIToolbox.SetAvatar(b, c.screenName);
        a.currentSpecialization != d && simcity.gGlobalUIHandler.mBoundaryUIHandler.UpdateRolloverSpecialization(a.boxID,
          d)
      }
      a.currentSpecialization = d
    }
};
simcity.cAvatarManagerHandler.prototype.UpdateSubscribers = function () {
  for (var a = 0; a < this.mNumberOfSubscribers; a++) {
    var b = this.mListOfSubscribers[a];
    b.layoutInfo && (scrui.Client_ProfBegin("UpdateOnlineState"), this.UpdateOnlineState(b), scrui.Client_ProfEnd(), this.mShowAlertsOK && (scrui.Client_ProfBegin("UpdateAlerts"), this.UpdateAlerts(b), scrui.Client_ProfEnd()), scrui.Client_ProfBegin("UpdateIcons"), this.UpdateIcons(b), scrui.Client_ProfEnd())
  }
};
simcity.cAvatarManagerHandler.prototype.Update = scrui.Client_ProfZone("cAvatarManagerHandler.Update", function (a) {
    this.mTimeSinceLastUpdate += a;
    this.mTimeSinceLastUpdate > simcity.cAvatarManagerHandler.kAvatarUpdateTime && (this.mTimeSinceLastUpdate = 0, this.UpdateSubscribers(), this.mShowAlertsOK || this.CheckIsTimeToShowAlerts());
    this.UpdateClearedBoxesCooldown(a)
  });
simcity.cAvatarManagerHandler.prototype.UpdateClearedBoxesCooldown = function (a) {
  for (var b in this.mListOfClearedBoxes)
    this.mListOfClearedBoxes[b] = 0 < this.mListOfClearedBoxes[b] - a ? this.mListOfClearedBoxes[b] - a : 0
};
simcity.cAvatarManagerHandler.prototype.HandleUIMessage = function () {};
simcity.cAvatarManagerHandler.prototype.CheckNeedExist = function (a, b, c) {
  if (b)
    for (a = 0; a < simcity.kRegionalCitiesResourceGreatWorksDataBindings.length; a++) {
      var d = [],
      e = [],
      f = {
        argumentList : [b]
      },
      g = simcity.kRegionalCitiesResourceGreatWorksDataBindings[a],
      h = "function" == typeof g ? new g : g,
      i = this;
      simcity.GenerateDataBindingQueries([h], d, f, e, !1);
      simcity.RequestDataBindingData(d, [h], e, !1, function (a) {
        h.update(a[0]);
        a = simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData;
        if (a.mGreatWorksRegional[b]) {
          a = a.mGreatWorksRegional[b].UID;
          h.data.needExists && !i.BoxClickAlreadyHandled(a) && c.SetVisibility(true)
        }
      })
    }
  else if (d = simcity.gGlobalUIHandler.mRegionViewUIHandler.GetRegionalConnectedCities(a)[0]) {
    d = d[1];
    e = Object.keys(d);
    f = 0;
    for (g = e.length; f < g; f++) {
      var j = d[e[f]];
      j && j.data.hasOwnProperty("needExists") && !0 == j.data.needExists && !this.BoxClickAlreadyHandled(a) && c.SetVisibility(!0)
    }
  }
};
simcity.cAvatarManagerHandler.prototype.IsNeedOrOpptyForCategory = function (a, b, c) {
  if (b = simcity.gGlobalUIHandler.mRegionViewUIHandler.GetRegionalConnectedCities(b)[0])
    for (var b = b[1], d = Object.keys(b), e = 0, f = d.length; e < f; e++) {
      var g = b[d[e]];
      if (g.data.hasOwnProperty(a) && ("needExists" == a && !0 == g.data.needExists || "opportunityExists" == a && !0 == g.data.opportunityExists) && g.data.key == c)
        return !0
    }
  return !1
};
simcity.cAvatarManagerHandler.prototype.GetNeedText = function (a, b) {
  var c = simcity.gGlobalUIHandler.mRegionViewUIHandler.GetRegionalConnectedCities(a)[0];
  if (c)
    for (var c = c[1], d = Object.keys(c), e = 0, f = d.length; e < f; e++) {
      var g = c[d[e]];
      if (!0 == g.data.needExists && g.data.key == b)
        return g.data.needText ? g.data.needText : "missing need text for " + b
    }
  return null
};
simcity.cAvatarManagerHandler.prototype.AddAlertIcons = function (a, b, c) {
  var d = 0;
  if (a = simcity.gGlobalUIHandler.mRegionViewUIHandler.GetRegionalConnectedCities(a)[0])
    for (var a = a[1], e = Object.keys(a), f = 0, g = e.length; f < g; f++) {
      f < b.mChildren.length && b.mChildren[f].SetVisibility(!1);
      var h = a[e[f]];
      if (!0 == h.data.needExists) {
        scrui.Assert(b.mChildren.length >= d, "more alerts than available slots in the boundary->alert icon container UI!");
        var i = b.mChildren[d];
        i && (i.SetVisibility(!0), i.SetWindowImage(h.data.needIcon));
        d++
      }
    }
  c && c.SetVisibility(0 < d ? !0 : !1)
};
simcity.cAvatarManagerHandler.prototype.BoxClicked = function (a) {
  this.mListOfClearedBoxes[a] = simcity.cAvatarManagerHandler.kAlertCoolDown;
  this.UpdateSubscribers()
};
simcity.cAvatarManagerHandler.prototype.BoxClickAlreadyHandled = function (a) {
  return this.mListOfClearedBoxes[a] && 0 < this.mListOfClearedBoxes[a] ? !0 : !1
};
simcity.cAvatarManagerHandler.prototype.OpenSocket = function (a) {
  if (!this.mListOfSocketsOpened[a]) {
    this.mListOfSocketsOpened[a] = {
      regionID : -1
    };
    var b = this;
    simcity.gSocketManager.AddSocketRequest("/subscriptions/user/" + a + "/messageType/2343608712/eventId/3498425072", Number(simcity.cAvatarManagerHandler.kSocketGuid), function () {
      b.ReceiveMessageOnSocket(arguments)
    }, !1)
  }
};
simcity.cAvatarManagerHandler.prototype.ReceiveMessageOnSocket = function (a) {
  if (a[0].hasOwnProperty("currentPlayingBoxId")) {
    var b = this.mListOfSocketsOpened[a[0].USER_GAME_EVENT];
    if (!b || !(b.hasOwnProperty("socketSaysOnline") && !0 == b.socketSaysOnline)) {
      b = {
        regionID : a[0].currentPlayingRegionId,
        socketSaysOnline : !0
      };
      this.mListOfSocketsOpened[a[0].USER_GAME_EVENT] = b;
      for (b = 0; b < this.mNumberOfSubscribers; b++) {
        var c = this.mListOfSubscribers[b];
        if (c.hasOwnProperty("serverBoxID") && c.serverBoxID == a[0].currentPlayingBoxId) {
          simcity.ManuallyTriggerRegionWallMessage(784034921, {
            regionalBoxUniqueID : c.boxID
          });
          simcity.SendSoundEvent(simcity.audio.kGlobalSoundObjectID, simcity.audio.kInstanceUIChatStatusOnline);
          this.AlertVisitorEffectsBoxOnline(c.boxID, simcity.kOnlineStatusOnlineYourRegion);
          break
        }
      }
    }
  } else if (b = this.mListOfSocketsOpened[a[0].USER_GAME_EVENT], !b || !(b.hasOwnProperty("socketSaysOnline") && !1 == b.socketSaysOnline)) {
    b = {
      regionID : -1,
      socketSaysOnline : !1
    };
    this.mListOfSocketsOpened[a[0].USER_GAME_EVENT] = b;
    for (b = 0; b < this.mNumberOfSubscribers; b++)
      if (c = this.mListOfSubscribers[b],
        c.hasOwnProperty("boxID") && c.hasOwnProperty("playerID") && c.playerID == a[0].USER_GAME_EVENT) {
        simcity.ManuallyTriggerRegionWallMessage(3316408922, {
          regionalBoxUniqueID : c.boxID
        });
        simcity.SendSoundEvent(simcity.audio.kGlobalSoundObjectID, simcity.audio.kInstanceUIChatStatusOffline);
        this.AlertVisitorEffectsBoxOnline(c.boxID, simcity.kOnlineStatusOnline);
        break
      }
  }
};
simcity.cAvatarManagerHandler.prototype.CloseSocket = function () {
  var a = this;
  simcity.gSocketManager.RemoveSocketRequest("/subscriptions/user/" + userid + "/messageType/2343608712/eventId/3498425072", Number(simcity.cAvatarManagerHandler.kSocketGuid), function () {
    a.ReceiveMessageOnSocket(arguments)
  })
};
simcity.cAvatarManagerHandler.prototype.ClearSubscriptions = function (a) {
  var b = 0,
  c = !1;
  do
    for (var c = !1, d = this.mListOfSubscribers.length, e = 0; e < d; e++) {
      var f = this.mListOfSubscribers[e];
      f && f.hasOwnProperty("group") && f.group == a && (this.mListOfSubscribers.splice(e, 1), this.mNumberOfSubscribers--, b++, c = !0)
    }
  while (!0 == c);
  0 > this.mNumberOfSubscribers && alert("Avatarmanager Clearsubscriptions fail")
};
simcity.cAvatarManagerHandler.prototype.IsTrackingGW = function (a, b) {
  for (var c = 0; c < this.mNumberOfSubscribers; c++) {
    var d = this.mListOfSubscribers[c];
    if (d.hasOwnProperty("greatWorkID") && a.instance == d.greatWorkID.instance)
      if (d.greatWorksIcon != b)
        break;
      else
        return !0
  }
  return !1
};
simcity.cAvatarManagerHandler.prototype.AlertVisitorEffectsBoxOnline = function (a, b) {
  scrui.PostGameCommand(scrui.BuildCommand(["visitoreffectsonline", a, b]))
};
simcity.GetOnlineStatus = function (a) {
  var b = simcity.kOnlineStatusOffline;
  if (!simcity.gGlobalUIHandler || !simcity.gGlobalUIHandler.mRegionViewUIHandler)
    return b;
  var c = simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData;
  if (!c)
    return b;
  var d = c.mBoxes[a];
  if (!d)
    return b;
  var e = c.mPlayers[d.creatorId];
  if (!e)
    return b;
  if (e.isOnline) {
    var b = simcity.kOnlineStatusOnline,
    f = d = !1,
    e = e.cities[0];
    e.creator.hasOwnProperty("currentPlayingRegionId") && e.creator.currentPlayingRegionId == c.mPlayingBox.creator.currentPlayingRegionId &&
    (d = !0);
    c.mBoxes[a].isClaimed && (f = c.mBoxes[a].id == c.mBoxes[a].creator.currentPlayingBoxId);
    d && f && (b = simcity.kOnlineStatusOnlineYourRegion)
  }
  return b
};
simcity.cAvatarManagerHandler.prototype.DebugShowAvatarSubscriptions = function () {
  for (var a = 0; a < this.mNumberOfSubscribers; a++);
};
simcity.cAvatarManagerHandler.prototype.GetGroupCount = function (a) {
  for (var b = 0, c = 0; c < this.mNumberOfSubscribers; c++)
    this.mListOfSubscribers[c].group == a && b++;
  return b
};
simcity.cAvatarManagerHandler.prototype.CheckIsTimeToShowAlerts = function () {
  var a = this,
  b = scrui.BuildRequestQuery(["simticks"]);
  scrui.RequestGameData([b], function (b) {
    b[0] > simcity.cAvatarManagerHandler.kSimTicksBeforeAlertsVisible && (a.mShowAlertsOK = !0)
  })
};
simcity.PopulationUI = {};
simcity.cPopulationUI = function () {
  this.mWealthGraph = this.mPopulationGraph = null;
  this.mGraphDrawn = !1;
  this.mPieChartWealth = this.mPieChartPopulation = void 0;
  this.mLastColumnIndex = this.mLastVisitorCount = this.mLastResidentCount = 0
};
goog.inherits(simcity.cPopulationUI, scrui.cUIHandler);
simcity.cPopulationUI.kWinTitle = 240411405;
simcity.cPopulationUI.kWinPieChartPopulation = 244314312;
simcity.cPopulationUI.kWinPieChartWealth = 243780872;
simcity.cPopulationUI.kTxtVillage = 245262633;
simcity.cPopulationUI.kBtnHistory = 243706042;
simcity.cPopulationUI.kBtnDetail = 243706039;
simcity.cPopulationUI.kMonthsTime = 150;
simcity.cPopulationUI.kMonths = 12;
simcity.cPopulationUI.CitySizes = [0, 100, 677.477, 2564.285, 15116.809];
simcity.cPopulationUI.kGraphMargin = 10;
simcity.cPopulationUI.prototype.Init = function (a) {
  var a = gUIManager.LoadAndCacheLayout("Layouts/PopulationUI2.js", a),
  b = simcity.gGlobalUIHandler.mGlobalUILayout.FindControlByID(simcity.kTxtBoxName);
  a.FindControlByID(244808270).UpdateLocaleText({
    city : b.GetText()
  })
};
simcity.cPopulationUI.prototype.HandleUIMessage = function (a, b, c) {
  switch (a) {
  case scrui.kMsgTypeButtonClicked:
    (b == simcity.cPopulationUI.kBtnHistory || b == simcity.cPopulationUI.kBtnDetail) && c.SetSelected(!0);
    break;
  case scrui.kMsgTypeButtonGainFocus:
    if (250995017 == b.controlID) {
      a = gUIManager.FindControlByID(250892270);
      b = c.mParentControl;
      this.mLastColumnIndex = c = b.mControlID - 250889008;
      if (0 <= c && 12 > c && a) {
        var b = b.GetAbsolutePosition(),
        d = a.ConvertAbsoluteToParentSpace(b[0], b[1], d);
        a.SetPosition(d[0] - a.mWidth, a.mTop)
      }
      b =
        simcity.gGlobalUIHandler.mPopulationTimelineData;
      d = b.population.slice(0);
      d.push(simcity.gGlobalUIHandler.mLastPopulation);
      d.reverse();
      b = b.visitors.slice(0);
      b.push(simcity.kGlobalUIPopulationInfo.populationData.importedRes.data.total.value);
      b.reverse();
      var e = a.FindControlByID(250891264),
      a = a.FindControlByID(250891265),
      f = 0,
      g = 0;
      0 <= c && (c < b.length && 0 <= b[c]) && (f = b[c]);
      0 <= c && (c < d.length && 0 <= d[c]) && (g = d[c]);
      e.SetRawText(scrui.LocalizeNumber(simcity.GetFudgedPopulation(Math.max(0, g))));
      a.SetRawText(scrui.LocalizeNumber(simcity.GetFudgedPopulation(Math.max(0,
              f))))
    }
  }
};
simcity.cPopulationUI.prototype.DrawGraphs = function () {
  simcity.LoadPopulationHistory();
  var a = gUIManager.FindControlByID(244314312),
  b = gUIManager.FindControlByID(243780872);
  if (void 0 === gUIManager.FindControlByID(244045240) || void 0 === a || void 0 === b)
    return !1;
  void 0 != this.mPieChartPopulation && (this.mPieChartPopulation.remove(), this.mPieChartPopulation = void 0);
  var c = simcity.kGlobalUIPopulationInfo.populationData.importedRes.data.total.value + simcity.kGlobalUIPopulationInfo.populationData.residential.data.total.value,
  d =
    simcity.kGlobalUIPopulationInfo.populationData.residential.data.total.value / c,
  c = simcity.kGlobalUIPopulationInfo.populationData.importedRes.data.total.value / c,
  e = [100 * d, 100 * c],
  d = a.mWidth / 3 - 30,
  c = a.mHeight / 2;
  this.mPieChartPopulation = Raphael(a.mRootElement, a.mWidth, a.mHeight);
  var f = new scrui.cLocaleString("GlobalUI.json", "0x0f10f51f", "Visitors!!!"),
  g = new scrui.cLocaleString("GlobalUI.json", "0x0f10f525", "Locals!!!");
  f.LoadString();
  g.LoadString();
  this.mPieChartPopulation.piechart(d, c, a.mWidth / 6, e, {
    legend : [g.GetText(),
      f.GetText()],
    legendpos : "east",
    colors : ["#3c0", "#f60"]
  });
  void 0 != this.mPieChartWealth && (this.mPieChartWealth.remove(), this.mPieChartWealth = void 0);
  d = simcity.kGlobalUIPopulationInfo.populationData.residential.data.totalResidentialW1.value;
  c = simcity.kGlobalUIPopulationInfo.populationData.residential.data.totalResidentialW2.value;
  a = simcity.kGlobalUIPopulationInfo.populationData.residential.data.totalResidentialW3.value;
  e = d + c + a;
  a = [100 * (d / e), 100 * (c / e), 100 * (a / e)];
  d = b.mWidth / 3 - 30;
  c = b.mHeight / 2;
  this.mPieChartWealth =
    Raphael(b.mRootElement, b.mWidth, b.mHeight);
  e = new scrui.cLocaleString("GlobalUI.json", "0x0d54e6b0", "Low Wealth");
  f = new scrui.cLocaleString("GlobalUI.json", "0x0d54e6b1", "Med Wealth");
  g = new scrui.cLocaleString("GlobalUI.json", "0x0d54e6b2", "High Wealth");
  e.LoadString();
  f.LoadString();
  g.LoadString();
  this.mPieChartWealth.piechart(d, c, b.mWidth / 6, a, {
    legend : [e.GetText(), f.GetText(), g.GetText()],
    legendpos : "east"
  });
  b = simcity.gTimeInfo.month;
  b + 1 == simcity.cPopulationUI.kMonths ? b = 0 : b++;
  for (d = 0; d < simcity.cPopulationUI.kMonths; d++)
    (c =
        gUIManager.FindControlByID(244661848 + d)) && c.SetRawText(scrui.LocalizeStandaloneShortMonth(b)), b + 1 == simcity.cPopulationUI.kMonths ? b = 0 : b++;
  b = 0;
  d = simcity.gGlobalUIHandler.mPopulationTimelineData;
  simcity.IsMainTutorialInProgress() && (d.population.push(600), d.population.push(666), d.population.push(652), d.population.push(796), d.population.push(732), d.population.push(745), d.population.push(799), d.population.push(777), d.population.push(742), d.population.push(766), d.population.push(813), d.population.push(842));
  c = d.population.slice(0);
  c.push(simcity.gGlobalUIHandler.mLastPopulation);
  c.reverse();
  a = d.visitors.slice(0);
  a.push(simcity.kGlobalUIPopulationInfo.populationData.importedRes.data.total.value);
  a.reverse();
  for (e = 0; e < c.length; e++)
    c[e] > b && (b = c[e]), a[e] > b && (b = a[e]);
  if (b) {
    for (var h = gUIManager.FindControlByID(250889008), d = h.mHeight, b = b + 0.25 * b, e = 0; e < c.length; e++)
      if (h = gUIManager.FindControlByID(250889008 + e)) {
        h.SetVisibility(!0);
        var i = h.FindControlByID(250887680),
        j = h.FindControlByID(250887681),
        f = c[e],
        g = c[e] /
          b;
        i.SetPosition(i.mLeft, d - d * g, i.mWidth, d * g);
        g = a[e] / b;
        j.SetPosition(j.mLeft, d - d * g, j.mWidth, d * g);
        if (e == this.mLastColumnIndex) {
          var g = gUIManager.FindControlByID(250892270),
          f = h.GetAbsolutePosition(),
          k = g.ConvertAbsoluteToParentSpace(f[0], f[1], k);
          g.SetPosition(k[0] - g.mWidth, g.mTop);
          f = g.FindControlByID(250891264);
          g = g.FindControlByID(250891265);
          i = h = 0;
          0 <= e && (e < a.length && 0 <= a[e]) && (h = a[e]);
          0 <= e && (e < c.length && 0 <= c[e]) && (i = c[e]);
          f.SetRawText(scrui.LocalizeNumber(simcity.GetFudgedPopulation(i)));
          g.SetRawText(scrui.LocalizeNumber(simcity.GetFudgedPopulation(h)))
        }
      }
    k =
      [];
    for (c = simcity.cPopulationUI.CitySizes.length - 1; 0 <= c; c--)
      if (a = gUIManager.FindControlByID(simcity.cPopulationUI.kTxtVillage + c))
        if (simcity.cPopulationUI.CitySizes[c] < b && simcity.cPopulationUI.CitySizes[c]) {
          g = simcity.cPopulationUI.CitySizes[c] / b;
          e = !1;
          f = d - d * g;
          for (h = 0; h < k.length; h++)
            Math.abs(f - k[h]) < a.mHeight + 10 && (e = !0);
          !1 === e ? (a.SetVisibility(!0), a.SetPosition(a.mLeft, f, a.mWidth, d * g), k.push(f)) : a.SetVisibility(!1)
        } else
          a.SetVisibility(!1)
  }
  return !0
};
simcity.cPopulationUI.prototype.Update = scrui.Client_ProfZone("cPopulationUI.Update", function (a) {
    if (simcity.gGlobalUIHandler.mPopulationUIContainer.mIsVisible) {
      if (this.mUpdatePopulation) {
        simcity.gGlobalUIHandler.mRegionViewUIHandler.UpdateRegionalInfoPanel();
        var b = simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionalPopulationText.GetText();
        gUIManager.FindControlByID(243425051).SetText(b);
        this.mUpdatePopulation = !1
      }
      this.UpdateTextBlobs();
      if (100 < this.mUpdateTick || 0 == this.mUpdateTick)
        this.mUpdateTick =
          1;
      this.mUpdateTick++;
      if (!1 === this.mGraphDrawn || this.mLastResidentCount != simcity.GetFudgedPopulation() || this.mLastVisitorCount != simcity.kGlobalUIPopulationInfo.populationData.visiting.data.total.value)
        simcity.gGlobalUIHandler.UpdateDataBindings(a), this.DrawGraphs() && (this.mGraphDrawn = !0), this.mLastResidentCount = simcity.GetFudgedPopulation(), this.mLastVisitorCount = simcity.kGlobalUIPopulationInfo.populationData.visiting.data.total.value
    } else
      this.mGraphDrawn = !1, this.mUpdatePopulation = !0
  });
simcity.cPopulationUI.prototype.UpdateTextBlobs = function () {
  var a = simcity.gGlobalUIHandler.mPopulationUIContainer,
  b = a.FindControlByID(237979511);
  simcity.kGlobalUIPopulationInfo.populationData.residential.data.total.value != b.GetText() && (this.mUpdatePopulation = !0);
  b.UpdateLocaleText({
    pop_info : simcity.GetFudgedPopulation()
  });
  b = a.FindControlByID(243427998);
  b.UpdateLocaleText({
    pop_info : simcity.kGlobalUIPopulationInfo.populationData.visiting.data.total.value
  });
  var c = simcity.kGlobalUIPopulationInfo.populationData,
  b = a.FindControlByID(253718202);
  b.UpdateLocaleText({
    pop_info : c.residential.data.workerW1.value
  });
  b = a.FindControlByID(253718203);
  b.UpdateLocaleText({
    pop_info : c.residential.data.workerW2.value
  });
  b = a.FindControlByID(253718204);
  b.UpdateLocaleText({
    pop_info : c.residential.data.workerW3.value
  });
  b = a.FindControlByID(253718205);
  b.UpdateLocaleText({
    pop_info : c.residential.data.totalWorkers.value
  });
  b = a.FindControlByID(253718241);
  b.UpdateLocaleText({
    pop_info : c.employment.data.employedW1.value
  });
  b = a.FindControlByID(253718242);
  b.UpdateLocaleText({
    pop_info : c.employment.data.employedW2.value
  });
  b = a.FindControlByID(253718243);
  b.UpdateLocaleText({
    pop_info : c.employment.data.employedW3.value
  });
  b = a.FindControlByID(253718244);
  b.UpdateLocaleText({
    pop_info : c.employment.data.employedTotal.value
  });
  b = a.FindControlByID(253718273);
  b.UpdateLocaleText({
    pop_info : c.employment.data.commuteOutW1.value
  });
  b = a.FindControlByID(253718274);
  b.UpdateLocaleText({
    pop_info : c.employment.data.commuteOutW2.value
  });
  b = a.FindControlByID(253718275);
  b.UpdateLocaleText({
    pop_info : c.employment.data.commuteOutW3.value
  });
  b = a.FindControlByID(253718276);
  b.UpdateLocaleText({
    pop_info : c.employment.data.commuteOutTotal.value
  });
  b = a.FindControlByID(253718305);
  b.UpdateLocaleText({
    pop_info : c.employment.data.unEmployedW1.value
  });
  b = a.FindControlByID(253718306);
  b.UpdateLocaleText({
    pop_info : c.employment.data.unEmployedW2.value
  });
  b = a.FindControlByID(253718307);
  b.UpdateLocaleText({
    pop_info : c.employment.data.unEmployedW3.value
  });
  b = a.FindControlByID(253718308);
  b.UpdateLocaleText({
    pop_info : c.employment.data.unEmployedTotal.value
  });
  b = a.FindControlByID(253718330);
  b.UpdateLocaleText({
    pop_info : c.importedRes.data.workerW1.value
  });
  b = a.FindControlByID(253718331);
  b.UpdateLocaleText({
    pop_info : c.importedRes.data.workerW2.value
  });
  b = a.FindControlByID(253718332);
  b.UpdateLocaleText({
    pop_info : c.importedRes.data.workerW3.value
  });
  b = a.FindControlByID(253718333);
  b.UpdateLocaleText({
    pop_info : c.importedRes.data.totalWorkers.value
  });
  b = a.FindControlByID(253718362);
  b.UpdateLocaleText({
    pop_info : c.jobs.data.w1.value
  });
  b = a.FindControlByID(253718363);
  b.UpdateLocaleText({
    pop_info : c.jobs.data.w2.value
  });
  b = a.FindControlByID(253718364);
  b.UpdateLocaleText({
    pop_info : c.jobs.data.w3.value
  });
  b = a.FindControlByID(253718365);
  b.UpdateLocaleText({
    pop_info : c.jobs.data.total.value
  });
  b = a.FindControlByID(253718394);
  b.UpdateLocaleText({
    pop_info : c.employment.data.unfilledW1.value
  });
  b = a.FindControlByID(253718395);
  b.UpdateLocaleText({
    pop_info : c.employment.data.unfilledW2.value
  });
  b = a.FindControlByID(253718396);
  b.UpdateLocaleText({
    pop_info : c.employment.data.unfilledW3.value
  });
  b = a.FindControlByID(253718397);
  b.UpdateLocaleText({
    pop_info : c.employment.data.unfilledTotal.value
  });
  b = a.FindControlByID(253718817);
  b.UpdateLocaleText({
    pop_info : c.residential.data.shopperW1.value
  });
  b = a.FindControlByID(253718818);
  b.UpdateLocaleText({
    pop_info : c.residential.data.shopperW2.value
  });
  b = a.FindControlByID(253718819);
  b.UpdateLocaleText({
    pop_info : c.residential.data.shopperW3.value
  });
  b = a.FindControlByID(253718820);
  b.UpdateLocaleText({
    pop_info : c.residential.data.totalShoppers.value
  });
  b = a.FindControlByID(253819284);
  b.UpdateLocaleText({
    pop_info : c.shopperPopulation.data.satisfiedW1.value
  });
  b = a.FindControlByID(253819285);
  b.UpdateLocaleText({
    pop_info : c.shopperPopulation.data.satisfiedW2.value
  });
  b = a.FindControlByID(253819286);
  b.UpdateLocaleText({
    pop_info : c.shopperPopulation.data.satisfiedW3.value
  });
  b = a.FindControlByID(253819287);
  b.UpdateLocaleText({
    pop_info : c.shopperPopulation.data.satisfiedTotal.value
  });
  b = a.FindControlByID(253819288);
  b.UpdateLocaleText({
    pop_info : c.shopperPopulation.data.commuteOutW1.value
  });
  b = a.FindControlByID(253819289);
  b.UpdateLocaleText({
    pop_info : c.shopperPopulation.data.commuteOutW2.value
  });
  b = a.FindControlByID(253819290);
  b.UpdateLocaleText({
    pop_info : c.shopperPopulation.data.commuteOutW3.value
  });
  b = a.FindControlByID(253819291);
  b.UpdateLocaleText({
    pop_info : c.shopperPopulation.data.commuteOutTotal.value
  });
  b = a.FindControlByID(253819292);
  b.UpdateLocaleText({
    pop_info : c.shopperPopulation.data.unsatisfiedW1.value
  });
  b = a.FindControlByID(253819293);
  b.UpdateLocaleText({
    pop_info : c.shopperPopulation.data.unsatisfiedW2.value
  });
  b = a.FindControlByID(253819294);
  b.UpdateLocaleText({
    pop_info : c.shopperPopulation.data.unsatisfiedW3.value
  });
  b = a.FindControlByID(253819295);
  b.UpdateLocaleText({
    pop_info : c.shopperPopulation.data.unsatisfiedTotal.value
  });
  b = a.FindControlByID(253819296);
  b.UpdateLocaleText({
    pop_info : c.importedRes.data.shopperW1.value
  });
  b = a.FindControlByID(253819297);
  b.UpdateLocaleText({
    pop_info : c.importedRes.data.shopperW2.value
  });
  b = a.FindControlByID(253819298);
  b.UpdateLocaleText({
    pop_info : c.importedRes.data.shopperW3.value
  });
  b = a.FindControlByID(253819299);
  b.UpdateLocaleText({
    pop_info : c.importedRes.data.totalShoppers.value
  });
  b = a.FindControlByID(253819300);
  b.UpdateLocaleText({
    pop_info : c.waresProduced.data.w1.value
  });
  b = a.FindControlByID(253819301);
  b.UpdateLocaleText({
    pop_info : c.waresProduced.data.w2.value
  });
  b = a.FindControlByID(253819302);
  b.UpdateLocaleText({
    pop_info : c.waresProduced.data.w3.value
  });
  b = a.FindControlByID(253819303);
  b.UpdateLocaleText({
    pop_info : c.waresProduced.data.total.value
  });
  b = a.FindControlByID(253819304);
  b.UpdateLocaleText({
    pop_info : c.shopperPopulation.data.unsoldW1.value
  });
  b = a.FindControlByID(253819305);
  b.UpdateLocaleText({
    pop_info : c.shopperPopulation.data.unsoldW2.value
  });
  b = a.FindControlByID(253819306);
  b.UpdateLocaleText({
    pop_info : c.shopperPopulation.data.unsoldW3.value
  });
  b = a.FindControlByID(253819307);
  b.UpdateLocaleText({
    pop_info : c.shopperPopulation.data.unsoldTotal.value
  });
  b = a.FindControlByID(253721114);
  b.UpdateLocaleText({
    pop_info : c.freight.data.production.value
  });
  b = a.FindControlByID(253721131);
  b.UpdateLocaleText({
    pop_info : c.freight.data.satisfied.value
  });
  b = a.FindControlByID(253721134);
  b.UpdateLocaleText({
    pop_info : c.freight.data.commuteOut.value
  });
  b = a.FindControlByID(253721137);
  b.UpdateLocaleText({
    pop_info : c.freight.data.unsatisfied.value
  });
  b = a.FindControlByID(253721140);
  b.UpdateLocaleText({
    pop_info : c.freight.data.commuteIn.value
  });
  b = a.FindControlByID(253721143);
  b.UpdateLocaleText({
    pop_info : c.freight.data.consumption.value
  });
  b = a.FindControlByID(253721146);
  b.UpdateLocaleText({
    pop_info : c.freight.data.unfulfilled.value
  });
  b = a.FindControlByID(253721545);
  b.UpdateLocaleText({
    pop_info : c.residential.data.totalKids.value
  });
  b = a.FindControlByID(253721547);
  b.UpdateLocaleText({
    pop_info : c.students.data.summaryLocalStudents.value
  });
  b = a.FindControlByID(253721549);
  b.UpdateLocaleText({
    pop_info : c.students.data.totalStudyingInBorder.value
  });
  b = a.FindControlByID(253721552);
  b.UpdateLocaleText({
    pop_info : c.students.data.notEnrolled.value
  });
  b = a.FindControlByID(253721555);
  b.UpdateLocaleText({
    pop_info : c.students.data.summaryRegionalStudents.value
  });
  b = a.FindControlByID(253721557);
  b.UpdateLocaleText({
    pop_info : c.students.data.totalDesks.value
  });
  b = a.FindControlByID(253721560);
  b.UpdateLocaleText({
    pop_info : c.students.data.extraDesks.value
  });
  b = a.FindControlByID(253725274);
  b.UpdateLocaleText({
    pop_info : c.tourist.data.populationW1.value
  });
  b = a.FindControlByID(253725275);
  b.UpdateLocaleText({
    pop_info : c.tourist.data.populationW2.value
  });
  b = a.FindControlByID(253725276);
  b.UpdateLocaleText({
    pop_info : c.tourist.data.populationW3.value
  });
  b = a.FindControlByID(253725277);
  b.UpdateLocaleText({
    pop_info : c.tourist.data.populationTotal.value
  });
  b = a.FindControlByID(253725261);
  b.UpdateLocaleText({
    pop_info : c.homeless.data.total.value
  });
  b = a.FindControlByID(244912323);
  b.UpdateLocaleText({
    pop_info : c.availableResident.data.workerW1.value
  });
  b = a.FindControlByID(244912366);
  b.UpdateLocaleText({
    pop_info : c.availableResident.data.workerW2.value
  });
  b = a.FindControlByID(244912367);
  b.UpdateLocaleText({
    pop_info : c.availableResident.data.workerW3.value
  });
  b = a.FindControlByID(244912424);
  b.UpdateLocaleText({
    pop_info : c.availableResident.data.totalWorkers.value
  });
  b = a.FindControlByID(244915322);
  b.UpdateLocaleText({
    pop_info : c.residentLocked.data.workerW1.value
  });
  b = a.FindControlByID(244915323);
  b.UpdateLocaleText({
    pop_info : c.residentLocked.data.workerW2.value
  });
  b = a.FindControlByID(244915324);
  b.UpdateLocaleText({
    pop_info : c.residentLocked.data.workerW3.value
  });
  b = a.FindControlByID(244915325);
  b.UpdateLocaleText({
    pop_info : c.residentLocked.data.total.value
  });
  b = a.FindControlByID(239904118);
  b.UpdateLocaleText({
    pop_info : c.sim.data.workerW1.value
  });
  b = a.FindControlByID(239904120);
  b.UpdateLocaleText({
    pop_info : c.sim.data.workerW2.value
  });
  b = a.FindControlByID(239904121);
  b.UpdateLocaleText({
    pop_info : c.sim.data.workerW3.value
  });
  b = a.FindControlByID(239896432);
  b.UpdateLocaleText({
    pop_info : c.sim.data.totalWorkers.value
  });
  b = a.FindControlByID(239896598);
  b.UpdateLocaleText({
    pop_info : c.importedRes.data.workerW1.value
  });
  b = a.FindControlByID(239896599);
  b.UpdateLocaleText({
    pop_info : c.importedRes.data.workerW2.value
  });
  b = a.FindControlByID(239896600);
  b.UpdateLocaleText({
    pop_info : c.importedRes.data.workerW3.value
  });
  b = a.FindControlByID(239896601);
  b.UpdateLocaleText({
    pop_info : c.importedRes.data.totalWorkers.value
  });
  b = a.FindControlByID(244917780);
  b.UpdateLocaleText({
    pop_info : c.exportedRes.data.workerW1.value
  });
  b = a.FindControlByID(244917781);
  b.UpdateLocaleText({
    pop_info : c.exportedRes.data.workerW2.value
  });
  b = a.FindControlByID(244917782);
  b.UpdateLocaleText({
    pop_info : c.exportedRes.data.workerW3.value
  });
  b = a.FindControlByID(244917783);
  b.UpdateLocaleText({
    pop_info : c.exportedRes.data.totalWorkers.value
  });
  b = a.FindControlByID(239904271);
  b.UpdateLocaleText({
    pop_info : c.currentWorkers.data.w1.value
  });
  b = a.FindControlByID(239904272);
  b.UpdateLocaleText({
    pop_info : c.currentWorkers.data.w2.value
  });
  b = a.FindControlByID(239904273);
  b.UpdateLocaleText({
    pop_info : c.currentWorkers.data.w3.value
  });
  b = a.FindControlByID(239901149);
  b.UpdateLocaleText({
    pop_info : c.currentWorkers.data.total.value
  });
  b = a.FindControlByID(239896822);
  b.UpdateLocaleText({
    pop_info : c.totalResident.data.workersW1.value
  });
  b = a.FindControlByID(239896823);
  b.UpdateLocaleText({
    pop_info : c.totalResident.data.workersW2.value
  });
  b = a.FindControlByID(239896824);
  b.UpdateLocaleText({
    pop_info : c.totalResident.data.workersW3.value
  });
  b = a.FindControlByID(239896276);
  b.UpdateLocaleText({
    pop_info : c.totalResident.data.totalWorkers.value
  });
  b = a.FindControlByID(239900500);
  b.UpdateLocaleText({
    pop_info : c.jobs.data.dayW1.value
  });
  b = a.FindControlByID(239900501);
  b.UpdateLocaleText({
    pop_info : c.jobs.data.dayW2.value
  });
  b = a.FindControlByID(239900502);
  b.UpdateLocaleText({
    pop_info : c.jobs.data.dayW3.value
  });
  b = a.FindControlByID(239900674);
  b.UpdateLocaleText({
    pop_info : c.jobs.data.dayTotal.value
  });
  b = a.FindControlByID(239900503);
  b.UpdateLocaleText({
    pop_info : c.jobs.data.nightW1.value
  });
  b = a.FindControlByID(239900504);
  b.UpdateLocaleText({
    pop_info : c.jobs.data.nightW2.value
  });
  b = a.FindControlByID(239900505);
  b.UpdateLocaleText({
    pop_info : c.jobs.data.nightW3.value
  });
  b = a.FindControlByID(239900694);
  b.UpdateLocaleText({
    pop_info : c.jobs.data.nightTotal.value
  });
  b = a.FindControlByID(244919041);
  b.UpdateLocaleText({
    pop_info : c.jobs.data.w1.value
  });
  b = a.FindControlByID(244919042);
  b.UpdateLocaleText({
    pop_info : c.jobs.data.w2.value
  });
  b = a.FindControlByID(244919043);
  b.UpdateLocaleText({
    pop_info : c.jobs.data.w3.value
  });
  b = a.FindControlByID(244919044);
  b.UpdateLocaleText({
    pop_info : c.jobs.data.total.value
  });
  b = a.FindControlByID(244919874);
  b.UpdateLocaleText({
    pop_info : c.availableResident.data.shopperW1.value
  });
  b = a.FindControlByID(244919875);
  b.UpdateLocaleText({
    pop_info : c.availableResident.data.shopperW2.value
  });
  b = a.FindControlByID(244919876);
  b.UpdateLocaleText({
    pop_info : c.availableResident.data.shopperW3.value
  });
  b = a.FindControlByID(244919877);
  b.UpdateLocaleText({
    pop_info : c.availableResident.data.totalShoppers.value
  });
  b = a.FindControlByID(246386921);
  b.UpdateLocaleText({
    pop_info : c.resident.data.shopperRestingW1.value
  });
  b = a.FindControlByID(246386922);
  b.UpdateLocaleText({
    pop_info : c.resident.data.shopperRestingW2.value
  });
  b = a.FindControlByID(246386923);
  b.UpdateLocaleText({
    pop_info : c.resident.data.shopperRestingW3.value
  });
  b = a.FindControlByID(246386924);
  b.UpdateLocaleText({
    pop_info : c.resident.data.shopperRestingTotal.value
  });
  b = a.FindControlByID(239896389);
  b.UpdateLocaleText({
    pop_info : c.sim.data.shopperW1.value
  });
  b = a.FindControlByID(239896415);
  b.UpdateLocaleText({
    pop_info : c.sim.data.shopperW2.value
  });
  b = a.FindControlByID(239896416);
  b.UpdateLocaleText({
    pop_info : c.sim.data.shopperW3.value
  });
  b = a.FindControlByID(239896441);
  b.UpdateLocaleText({
    pop_info : c.sim.data.totalShoppers.value
  });
  b = a.FindControlByID(239896510);
  b.UpdateLocaleText({
    pop_info : c.importedRes.data.shopperW1.value
  });
  b = a.FindControlByID(239896511);
  b.UpdateLocaleText({
    pop_info : c.importedRes.data.shopperW2.value
  });
  b = a.FindControlByID(239896512);
  b.UpdateLocaleText({
    pop_info : c.importedRes.data.shopperW3.value
  });
  b = a.FindControlByID(239896520);
  b.UpdateLocaleText({
    pop_info : c.importedRes.data.totalShoppers.value
  });
  b = a.FindControlByID(244917704);
  b.UpdateLocaleText({
    pop_info : c.exportedRes.data.shopperW1.value
  });
  b = a.FindControlByID(244917705);
  b.UpdateLocaleText({
    pop_info : c.exportedRes.data.shopperW2.value
  });
  b = a.FindControlByID(244917706);
  b.UpdateLocaleText({
    pop_info : c.exportedRes.data.shopperW3.value
  });
  b = a.FindControlByID(244917707);
  b.UpdateLocaleText({
    pop_info : c.exportedRes.data.totalShoppers.value
  });
  b = a.FindControlByID(240001482);
  b.UpdateLocaleText({
    pop_info : c.shopper.data.w1.value
  });
  b = a.FindControlByID(240001483);
  b.UpdateLocaleText({
    pop_info : c.shopper.data.w2.value
  });
  b = a.FindControlByID(240001484);
  b.UpdateLocaleText({
    pop_info : c.shopper.data.w3.value
  });
  b = a.FindControlByID(240005340);
  b.UpdateLocaleText({
    pop_info : c.shopper.data.total.value
  });
  b = a.FindControlByID(244923932);
  b.UpdateLocaleText({
    pop_info : c.totalResident.data.shoppersW1.value
  });
  b = a.FindControlByID(244923933);
  b.UpdateLocaleText({
    pop_info : c.totalResident.data.shoppersW2.value
  });
  b = a.FindControlByID(244923934);
  b.UpdateLocaleText({
    pop_info : c.totalResident.data.shoppersW3.value
  });
  b = a.FindControlByID(244923935);
  b.UpdateLocaleText({
    pop_info : c.totalResident.data.totalShoppers.value
  });
  b = a.FindControlByID(238062635);
  b.UpdateLocaleText({
    pop_info : c.shopCount.data.dayW1.value
  });
  b = a.FindControlByID(238062636);
  b.UpdateLocaleText({
    pop_info : c.shopCount.data.dayW2.value
  });
  b = a.FindControlByID(238062637);
  b.UpdateLocaleText({
    pop_info : c.shopCount.data.dayW3.value
  });
  b = a.FindControlByID(244924177);
  b.UpdateLocaleText({
    pop_info : c.shopCount.data.totalDay.value
  });
  b = a.FindControlByID(240001797);
  b.UpdateLocaleText({
    pop_info : c.shopCount.data.nightW1.value
  });
  b = a.FindControlByID(240001798);
  b.UpdateLocaleText({
    pop_info : c.shopCount.data.nightW2.value
  });
  b = a.FindControlByID(240001799);
  b.UpdateLocaleText({
    pop_info : c.shopCount.data.nightW3.value
  });
  b = a.FindControlByID(240001800);
  b.UpdateLocaleText({
    pop_info : c.shopCount.data.totalNight.value
  });
  b = a.FindControlByID(246456580);
  b.UpdateLocaleText({
    pop_info : c.waresProduced.data.w1.value
  });
  b = a.FindControlByID(246456582);
  b.UpdateLocaleText({
    pop_info : c.waresProduced.data.w2.value
  });
  b = a.FindControlByID(246456583);
  b.UpdateLocaleText({
    pop_info : c.waresProduced.data.w3.value
  });
  b = a.FindControlByID(246456584);
  b.UpdateLocaleText({
    pop_info : c.waresProduced.data.total.value
  });
  b = a.FindControlByID(238069544);
  b.UpdateLocaleText({
    pop_info : c.students.data.uneducated.value
  });
  b = a.FindControlByID(245079734);
  b.UpdateLocaleText({
    pop_info : c.students.data.tokenE2.value
  });
  b = a.FindControlByID(245079758);
  b.UpdateLocaleText({
    pop_info : c.students.data.tokenE3.value
  });
  b = a.FindControlByID(223575752);
  b.UpdateLocaleText({
    pop_info : c.students.data.total.value
  });
  b = a.FindControlByID(245080944);
  b.UpdateLocaleText({
    pop_info : c.students.data.desksE2.value
  });
  b = a.FindControlByID(245080945);
  b.UpdateLocaleText({
    pop_info : c.students.data.desksE3.value
  });
  b = a.FindControlByID(245080946);
  b.UpdateLocaleText({
    pop_info : c.students.data.totalDesks.value
  });
  b = a.FindControlByID(251569180);
  b.UpdateLocaleText({
    pop_info : c.homeless.data.homelessForaging.value
  });
  b = a.FindControlByID(251569184);
  b.UpdateLocaleText({
    pop_info : c.homeless.data.homelessPanhandling.value
  });
  b = a.FindControlByID(251569186);
  b.UpdateLocaleText({
    pop_info : c.homeless.data.homelessSleeping.value
  });
  b = a.FindControlByID(251569188);
  b.UpdateLocaleText({
    pop_info : c.homeless.data.homelessWandering.value
  });
  b = a.FindControlByID(251569505);
  b.UpdateLocaleText({
    pop_info : c.homeless.data.total.value
  });
  b = a.FindControlByID(250269861);
  b.UpdateLocaleText({
    pop_info : c.freight.data.production.value
  });
  b = a.FindControlByID(250269870);
  b.UpdateLocaleText({
    pop_info : c.freight.data.freightCapacity.value
  })
};
simcity.UpdatePopulationTimelineData = function () {
  var a = simcity.gGlobalUIHandler.mPopulationTimelineData;
  a.population.length >= simcity.cPopulationUI.kMonths - 1 && (a.population.shift(), a.visitors.shift());
  a.population.push(simcity.gGlobalUIHandler.mLastPopulation);
  a.visitors.push(simcity.kGlobalUIPopulationInfo.populationData.importedRes.data.total.value);
  simcity.SavePopulationHistory()
};
simcity.SavePopulationHistory = function () {
  if (0 != simcity.gGlobalUIHandler.GetBoxID()) {
    var a = simcity.gGlobalUIHandler.mPopulationTimelineData,
    b = a.population.length;
    if (b) {
      scrui.PostGameCommand(scrui.BuildCommand(["populationSave", "start"]));
      for (var c = 0; c < b; c++)
        scrui.PostGameCommand(scrui.BuildCommand(["populationSave", a.population[c] || 0, a.visitors[c] || 0]));
      scrui.PostGameCommand(scrui.BuildCommand(["populationSave", "end"]))
    }
  }
};
simcity.LoadPopulationHistory = function () {
  var a = simcity.gGlobalUIHandler,
  b = a.mPopulationTimelineData,
  a = scrui.BuildRequestQuery(["box", a.GetBoxID(), "metadata", "timelinePopulationData"]);
  scrui.RequestRestData([a], [], "get", function (a) {
    if (null != a && (a = scrui.ParseJSON(a.contentText)) && !a.hasOwnProperty("errorCode")) {
      for (var d in b)
        b[d] = [];
      b.population = [];
      b.visitors = [];
      d = a.values;
      for (a = 0; a < d.length; a++)
        b.population.push(d[a][0]), b.visitors.push(d[a][1])
    }
  })
};
simcity.databindings.DataBindingsCategoryGeneric = {};
simcity.kPaletteInfoPanelText = "PaletteInfoPanel.json";
simcity.kTextHeaderConnectCity = "0x0d521b90";
simcity.kTextBodyConnectCity = "0x0d521010";
simcity.kTextHeaderZoneResidential = "0x0d521b91";
simcity.kTextBodyZoneResidential = "0x0d521021";
simcity.GenericCategory = {
  categoryInfoQueries : {
    connected : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfConnections],
    numberOfResidential : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfResidential],
    numberOfCommercial : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfCommercial],
    numberOfIndustrial : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfIndustrial]
  },
  shouldDisplayContextualInfo : function () {
    return !0
  },
  updateCategoryInfo : function (a, b) {
    simcity.IsMainTutorialInProgress() && simcity.gGlobalUIHandler.mTutorialManager.mTutorialData &&
    simcity.gGlobalUIHandler.mTutorialManager.mTutorialData.hasOwnProperty("updateCategoryInfo") ? simcity.gGlobalUIHandler.mTutorialManager.mTutorialData.updateCategoryInfo(a) : 0 === b.connected ? simcity.UpdateContextualInfo(a, simcity.kPaletteInfoPanelText, simcity.kTextHeaderConnectCity, simcity.kTextBodyConnectCity) : 0 === b.numberOfResidential && 0 === b.numberOfCommercial && 0 === b.numberOfIndustrial ? simcity.UpdateContextualInfo(a, simcity.kPaletteInfoPanelText, simcity.kTextHeaderZoneResidential, simcity.kTextBodyZoneResidential) :
    simcity.UpdateContextualInfo(a)
  }
};
simcity.MissionUI = {};
simcity.cMissionUI = function () {
  this.UIHandler = scrui.cUIHandler;
  this.UIHandler();
  this.mMissionContainer = null;
  this.mTimeSinceLastUpdate = 0;
  this.mTimeSinceLastMiniTutorialUpdate = 1E3;
  this.mObjectiveLockedLayout = null;
  this.mTutorialStepShown = this.mTutorialsEnabled = !1;
  this.mActiveUnitRef = null;
  this.blockMissions = !1;
  this.mSimMissions = [];
  this.mBoxID = -1
};
goog.inherits(simcity.cMissionUI, scrui.cUIHandler);
simcity.cMissionUI.kUnlockLayoutPath = "Layouts/Missions/MissionUnlock.js";
simcity.cMissionUI.kBtnClose = 202487456;
simcity.cMissionUI.kBtnNoThanks = 250625402;
simcity.cMissionUI.kBtnOkay = 249585833;
simcity.cMissionUI.kBtnBadge = 207925727;
simcity.cMissionUI.kMisssionLayoutID = 213727042;
simcity.cMissionUI.kTextObjective = 202394950;
simcity.cMissionUI.kWinPortrait = 218717187;
simcity.cMissionUI.kWinIcon = 218717226;
simcity.cMissionUI.kWinProgressBarObjective = 222882059;
simcity.cMissionUI.kWinObjectiveContainer = 202395414;
simcity.cMissionUI.kWinMissionTimerText = 253194508;
simcity.cMissionUI.kWinMissionTimerWin = 253195430;
simcity.cMissionUI.kObjectivesExpandAnimationID = 213459679;
simcity.cMissionUI.kBadgeFadeAnimationID = 213442670;
simcity.cMissionUI.kMissionIntroAnimationID = 213446017;
simcity.cMissionUI.kDisplayInfoAnimationID = 213703442;
simcity.cMissionUI.kDisplayRewardAnimationID = 217522349;
simcity.cMissionUI.kDisplayFailureAnimationID = 251999028;
simcity.cMissionUI.kMissionOutroAnimationID = 217942477;
simcity.cMissionUI.kShowFloatingObjectivesAnimationID = 217949602;
simcity.cMissionUI.kObjectiveStatusBarAnimationID = 218656160;
simcity.cMissionUI.kRevealCloseButtonAnimationID = 218804757;
simcity.cMissionUI.kPortraitRolloverAnimationID = 218815868;
simcity.cMissionUI.kBadgeBackgroundImageNormal = "Server/UI/Graphics/Challenge/pledgePortraitFrame.png";
simcity.cMissionUI.kBadgeBackgroundImageRollover = "Server/UI/Graphics/Challenge/pledgePortraitFrameOver.png";
simcity.cMissionUI.kTransitionNone = 0;
simcity.cMissionUI.kTransitionMissionVisible = 1;
simcity.cMissionUI.kTransitionIntro = 3;
simcity.cMissionUI.kTransitionOutro = 4;
simcity.cMissionUI.kTransitionDisplayInfo = 5;
simcity.cMissionUI.kTransitionObjectivesVisible = 6;
simcity.cMissionUI.kTransitionObjectivesHidden = 7;
simcity.cMissionUI.kTransitionDisplayReward = 8;
simcity.cMissionUI.kTransitionObjectiveQueueVisible = 9;
simcity.cMissionUI.kTransitionObjectiveQueueHidden = 10;
simcity.cMissionUI.kTransitionDisplayFailure = 11;
simcity.cMissionUI.kObjectiveShowTime = 5E3;
simcity.cMissionUI.kFullyHidden = 1;
simcity.cMissionUI.kBadgeOnly = 2;
simcity.cMissionUI.kFullObjectiveBanner = 3;
simcity.cMissionUI.kObjectiveQueue = 4;
simcity.cMissionUI.kInWorld = 5;
simcity.cMissionUI.kRewardShowing = 6;
simcity.cMissionUI.kShutdown = 7;
simcity.GetMissionCount = function () {
  return simcity.gGlobalUIHandler.mMissionUI.mSimMissions.length
};
simcity.cMissionUI.prototype.Init = function (a) {
  scrui.Assert(null !== a, "Mission UI missing container");
  this.mMissionContainer = a;
  this.mBoxID = simcity.gGlobalUIHandler.GetBoxID();
  this.mTutorialFocusControl = [];
  scrui.gUIManager.mLocaleManager && scrui.gUIManager.mLocaleManager.bLocaleSet && this.LoadExistingMissions()
};
simcity.cMissionUI.prototype.Shutdown = function () {};
simcity.cMissionUI.prototype.Update = scrui.Client_ProfZone("cMissionUI.Update", function (a) {
    this.UpdateAllMissions(a);
    this.mTimeSinceLastMiniTutorialUpdate -= a;
    0 > this.mTimeSinceLastMiniTutorialUpdate && (this.mTimeSinceLastMiniTutorialUpdate = 1E3, !simcity.gGlobalUIHandler.mIsSpectatorMode && (!simcity.IsTutorialInProgress() && !simcity.gGlobalUIHandler.IsNameYourCityMomentActive() && 0 == this.NumberOfActiveMiniTutorials() && !simcity.IsDisasterInProgress() && !simcity.IsInBudgetCrisis() && !simcity.gGlobalUIHandler.mDemoWarning) &&
      (simcity.OptionShowMinitutorials() ? simcity.CreateMiniTutorials() : simcity.CreateDLCMiniTutorials()));
    for (a = 0; a < this.mTutorialFocusControl.length; a++) {
      var b = this.mTutorialFocusControl[a],
      c = b.GetAbsolutePosition();
      if (scrui.gUIManager.mMouseX < c[0] || scrui.gUIManager.mMouseX > c[0] + b.mWidth || scrui.gUIManager.mMouseY < c[1] || scrui.gUIManager.mMouseY > c[1] + b.mHeight) {
        b = b.GetParentLayout();
        b.missionAnimData.rolledover = !1;
        if (c = b.FindControlByID(simcity.cMissionUI.kBtnBadge))
          c.SetButtonImage(simcity.cMissionUI.kBadgeBackgroundImageNormal,
            kButtonStateNormal), c.SetButtonImage(simcity.cMissionUI.kBadgeBackgroundImageNormal, kButtonStateRollover), b.FindAnimationByID(simcity.cMissionUI.kPortraitRolloverAnimationID).Start(scrui.cAnimation.kPlayReverse);
        b.FindControlByID(simcity.cMissionUI.kBtnClose) && b.FindAnimationByID(simcity.cMissionUI.kRevealCloseButtonAnimationID).Start(scrui.cAnimation.kPlayReverse);
        null == this.mObjectiveLockedLayout && simcity.SendSoundEventForMission(simcity.audio.kGlobalSoundObjectID, simcity.audio.kInstanceUIMissionCloseDetails,
          b);
        this.mTutorialFocusControl.splice(a, 1);
        a--
      }
    }
  });
simcity.cMissionUI.prototype.HandleGameEvent = function (a, b) {
  switch (a) {
  case simcity.kGameMessageUnitRuleUIEvent:
    switch (b.eventID) {
    case simcity.kEventIDMissionStarted:
      this.blockMissions || this.AddSimMission(b.unitRef);
      break;
    case simcity.kEventIDMissionCompleted:
      this.CompleteSimMission(b.unitRef);
      break;
    case simcity.kEventIDMissionFailed:
      this.RemoveSimMission(b.unitRef, !0)
    }
  }
};
simcity.cMissionUI.prototype.HandleUIMessage = function (a, b, c) {
  switch (a) {
  case scrui.kMsgTypeButtonClicked:
    switch (b) {
    case simcity.cMissionUI.kBtnClose:
    case simcity.cMissionUI.kBtnNoThanks:
      var a = c.GetParentLayout(),
      d = a.focusArea;
      if (d) {
        for (var e = -1, b = 0; b < this.mTutorialFocusControl.length; b++)
          if (this.mTutorialFocusControl[b] == d) {
            e = b;
            break
          }
        0 <= e && this.mTutorialFocusControl.slice(e, 1)
      }
      this.mTutorialFocusControl.push(c);
      this.CloseMission(a);
      c = this.MissionInfoFromLayout(a);
      simcity.ManuallyDestroyMissionUnit(c);
      c.isTutorialMission && (simcity.gGlobalUIHandler.mMissionUI.mTimeSinceLastMiniTutorialUpdate = 6E4);
      break;
    case simcity.cMissionUI.kBtnOkay:
      !simcity.IsTutorialInProgress() && (!simcity.IsDisasterInProgress() && !simcity.IsInBudgetCrisis()) && (a = c.GetParentLayout(), a.missionAnimData.missionAccepted = !0)
    }
    break;
  case scrui.kMsgTypeButtonGainFocus:
    switch (b.controlID) {
    case simcity.cMissionUI.kBtnBadge:
    case simcity.cMissionUI.kBtnClose:
      if (a = c.GetParentLayout(), !b.oldFocus || !this.SameBadge(c, b.oldFocus))
        a.missionAnimData.rolledover =
          !0, a.FindAnimationByID(simcity.cMissionUI.kPortraitRolloverAnimationID).Start(scrui.cAnimation.kPlayForward), a.FindControlByID(simcity.cMissionUI.kBtnBadge).SetButtonImage(simcity.cMissionUI.kBadgeBackgroundImageRollover, kButtonStateNormal), a.FindControlByID(simcity.cMissionUI.kBtnBadge).SetButtonImage(simcity.cMissionUI.kBadgeBackgroundImageRollover, kButtonStateRollover), a.FindControlByID(simcity.cMissionUI.kBtnClose) && a.FindAnimationByID(simcity.cMissionUI.kRevealCloseButtonAnimationID).Start(scrui.cAnimation.kPlayForward),
        a == this.mObjectiveLockedLayout ? simcity.SendSoundEventForMission(simcity.audio.kGlobalSoundObjectID, simcity.audio.kInstanceUIMissionRollLocked, a) : null == this.mObjectiveLockedLayout && simcity.SendSoundEventForMission(simcity.audio.kGlobalSoundObjectID, simcity.audio.kInstanceUIMissionOpenDetails, a)
    }
    break;
  case scrui.kMsgTypeButtonLoseFocus:
    switch (b.controlID) {
    case 249580137:
      a = !0;
      for (b = 0; b < this.mTutorialFocusControl.length; b++)
        if (this.mTutorialFocusControl[b] == c) {
          a = !1;
          break
        }
      a && this.mTutorialFocusControl.push(c);
      break;
    case simcity.cMissionUI.kBtnBadge:
    case simcity.cMissionUI.kBtnClose:
      a = c.GetParentLayout();
      if (d = a.focusArea)
        break;
      if (!b.newFocus || !this.SameBadge(c, b.newFocus)) {
        a.missionAnimData.rolledover = !1;
        if (c = a.FindControlByID(simcity.cMissionUI.kBtnBadge))
          c.SetButtonImage(simcity.cMissionUI.kBadgeBackgroundImageNormal, kButtonStateNormal), c.SetButtonImage(simcity.cMissionUI.kBadgeBackgroundImageNormal, kButtonStateRollover), a.FindAnimationByID(simcity.cMissionUI.kPortraitRolloverAnimationID).Start(scrui.cAnimation.kPlayReverse);
        a.FindControlByID(simcity.cMissionUI.kBtnClose) && a.FindAnimationByID(simcity.cMissionUI.kRevealCloseButtonAnimationID).Start(scrui.cAnimation.kPlayReverse);
        null == this.mObjectiveLockedLayout && simcity.SendSoundEventForMission(simcity.audio.kGlobalSoundObjectID, simcity.audio.kInstanceUIMissionCloseDetails, a)
      }
    }
    break;
  case scrui.cLocaleManager.kLocaleSet:
    this.LoadExistingMissions()
  }
};
simcity.cMissionUI.prototype.LoadExistingMissions = function () {
  var a = this,
  b = [scrui.BuildRequestQuery([simcity.kDataMissions])];
  scrui.RequestGameData(b, function (b) {
    if (b = b[0])
      for (var d = 0, e = b.length; d < e; ++d)
        a.AddSimMission(b[d])
  })
};
simcity.cMissionUI.prototype.PrintDebugInfo = function () {
  if (simcity.DEBUG) {
    scrui.DebugPrint("cMissionUI mSimMissions = " + this.mSimMissions.length);
    for (var a = 0, b = this.mSimMissions.length; a < b; ++a)
      scrui.DebugPrint("    " + scrui.DecimalToHex(this.mSimMissions[a].fileNameKey))
  }
};
simcity.cMissionUI.prototype.SameBadge = function (a, b) {
  return a.GetControlID() == simcity.cMissionUI.kBtnBadge && b.mParentControl === a || b.GetControlID() == simcity.cMissionUI.kBtnBadge && a.mParentControl === b
};
simcity.cMissionUI.prototype.MissionInfoFromLayout = function (a) {
  for (var b = 0, c = this.mSimMissions.length; b < c; ++b) {
    var d = this.mSimMissions[b];
    if (d.layout === a)
      return d
  }
  return null
};
simcity.cMissionUI.prototype.MissionInfoFromID = function (a) {
  for (var b = 0, c = this.mSimMissions.length; b < c; ++b) {
    var d = this.mSimMissions[b];
    if (d.fileNameKey === a)
      return d
  }
  return null
};
simcity.cMissionUI.prototype.SetBadgeFromKeys = function (a, b, c) {
  b && a.FindControlByID(simcity.cMissionUI.kWinPortrait).SetWindowImage(scrui.PathFromResourceKey(b));
  c && a.FindControlByID(simcity.cMissionUI.kWinIcon).SetWindowImage(scrui.PathFromResourceKey(c))
};
simcity.cMissionUI.prototype.NumberOfActiveMiniTutorials = function () {
  for (var a = 0, b = 0, c = this.mSimMissions.length; b < c; ++b)
    this.mSimMissions[b].isTutorialMission && a++;
  return a
};
simcity.cMissionUI.prototype.AddSimMission = function (a) {
  var b = this;
  if (!simcity.gGlobalUIHandler.mIsSpectatorMode || simcity.gGlobalUIHandler.CheckMainTutorialActive()) {
    for (var c = 0, d = this.mSimMissions.length; c < d; ++c)
      if (simcity.CompareUnitRefs(a, this.mSimMissions[c].unitRef)) {
        scrui.Assert(!1, "attempting to add duplicate mission!");
        return
      }
    c = scrui.RequestStringFromUnitRef(a);
    c = [scrui.BuildRequestQuery([simcity.kDataUnits, c, simcity.kDataProperties, simcity.kPropMissionTitle]), scrui.BuildRequestQuery([simcity.kDataUnits,
          c, simcity.kDataProperties, simcity.kPropMissionLayout]), scrui.BuildRequestQuery([simcity.kDataUnits, c, simcity.kDataProperties, simcity.kPropMissionPortrait]), scrui.BuildRequestQuery([simcity.kDataUnits, c, simcity.kDataProperties, simcity.kPropMissionObjectiveResources]), scrui.BuildRequestQuery([simcity.kDataUnits, c, simcity.kDataProperties, simcity.kPropMissionObjectiveStrings]), scrui.BuildRequestQuery([simcity.kDataUnits, c, simcity.kDataProperties, simcity.kPropMissionObjectiveType]), scrui.BuildRequestQuery([simcity.kDataUnits,
          c, simcity.kDataProperties, simcity.kPropMissionRewardResource]), scrui.BuildRequestQuery([simcity.kDataUnits, c, simcity.kDataProperties, simcity.kPropMissionRewardAmount]), scrui.BuildRequestQuery([simcity.kDataUnits, c, simcity.kDataProperties, simcity.kPropMissionIcon]), scrui.BuildRequestQuery([simcity.kDataUnits, c, simcity.kDataProperties, simcity.kPropMissionObjectiveLayout]), scrui.BuildRequestQuery([simcity.kDataUnits, c, simcity.kDataProperties, simcity.kPropMissionIsTutorial]), scrui.BuildRequestQuery([simcity.kDataUnits,
          c, simcity.kDataPropKey]), scrui.BuildRequestQuery([simcity.kDataUnits, c, simcity.kDataProperties, simcity.kPropMission_Linear]), scrui.BuildRequestQuery([simcity.kDataUnits, c, simcity.kDataProperties, simcity.kPropMissionObjectiveIsGlobal]), scrui.BuildRequestQuery([simcity.kDataUnits, c, simcity.kDataProperties, simcity.kPropMission_Objective1_Goal]), scrui.BuildRequestQuery([simcity.kDataUnits, c, simcity.kDataProperties, simcity.kPropMission_Objective2_Goal]), scrui.BuildRequestQuery([simcity.kDataUnits, c, simcity.kDataProperties,
          simcity.kPropMission_Objective3_Goal]), scrui.BuildRequestQuery([simcity.kDataUnits, c, simcity.kDataProperties, simcity.kPropMission_Objective4_Goal]), scrui.BuildRequestQuery([simcity.kDataUnits, c, simcity.kDataProperties, simcity.kPropMission_Objective5_Goal]), scrui.BuildRequestQuery([simcity.kDataUnits, c, simcity.kDataProperties, simcity.kPropMission_Objective6_Goal]), scrui.BuildRequestQuery([simcity.kDataUnits, c, simcity.kDataProperties, simcity.kPropMission_Objective7_Goal]), scrui.BuildRequestQuery([simcity.kDataUnits,
          c, simcity.kDataProperties, simcity.kPropMission_Objective8_Goal]), scrui.BuildRequestQuery([simcity.kDataUnits, c, simcity.kDataProperties, simcity.kPropMission_Objective1_Ignore]), scrui.BuildRequestQuery([simcity.kDataUnits, c, simcity.kDataProperties, simcity.kPropMission_Objective2_Ignore]), scrui.BuildRequestQuery([simcity.kDataUnits, c, simcity.kDataProperties, simcity.kPropMission_Objective3_Ignore]), scrui.BuildRequestQuery([simcity.kDataUnits, c, simcity.kDataProperties, simcity.kPropMission_Objective4_Ignore]),
      scrui.BuildRequestQuery([simcity.kDataUnits, c, simcity.kDataProperties, simcity.kPropMission_Objective5_Ignore]), scrui.BuildRequestQuery([simcity.kDataUnits, c, simcity.kDataProperties, simcity.kPropMission_Objective6_Ignore]), scrui.BuildRequestQuery([simcity.kDataUnits, c, simcity.kDataProperties, simcity.kPropMission_Objective7_Ignore]), scrui.BuildRequestQuery([simcity.kDataUnits, c, simcity.kDataProperties, simcity.kPropMission_Objective8_Ignore]), scrui.BuildRequestQuery([simcity.kDataUnits, c, simcity.kDataProperties,
          simcity.kPropMissionCanClose])];
    scrui.RequestGameData(c, function (c) {
      var d = c[0];
      if (d) {
        b.mActiveUnitRef = a;
        var g = scrui.PathFromResourceKey(c[1]),
        h = c[2],
        i = c[3],
        j = c[4],
        k = c[8],
        l = c[9],
        m = c[10],
        n = c[11],
        p = c[13];
        m && !simcity.gGlobalUIHandler.mIsTutorialEnabled && (g = "Layouts/Tutorial/MiniTutorial.js");
        if (n.instance == scrui.IDFromName("MSTutorialMyFirstCity") || n.instance == scrui.IDFromName("MSTutorialDLC_HeroesAndVillains") || n.instance == scrui.IDFromName("MSTutorialDLC_3CitySets") || n.instance == scrui.IDFromName("MSTutorialDLC_Berlin") ||
          n.instance == scrui.IDFromName("MSTutorialDLC_London") || n.instance == scrui.IDFromName("MSTutorialDLC_Paris") || n.instance == scrui.IDFromName("MSTutorialDLC_RomanLuckCasino"))
          simcity.gGlobalUIHandler.mIsTutorialEnabled = !0;
        simcity.gGlobalUIHandler.mIsTutorialEnabled = simcity.gGlobalUIHandler.CheckMainTutorialActive() || simcity.gGlobalUIHandler.mIsTutorialEnabled;
        for (var q = i.length, o = Array(q), r = scrui.RequestStringFromUnitRef(a), s = scrui.BuildRequestQuery([simcity.kDataUnits, r, simcity.kDataBinAmount, simcity.kResourceIDMissionTimer]),
          t = 0; t < q; ++t)
          o[t] = p[t] ? scrui.BuildRequestQuery([simcity.kDataBinAmount, i[t]]) : scrui.BuildRequestQuery([simcity.kDataConnectedUnits, r, simcity.kDataBinAmount, i[t]]);
        c = {
          objectiveQueries : o,
          objectiveTypes : c[5],
          rewardResourceID : c[6].instance,
          rewardAmount : c[7],
          layout : gUIManager.LoadLayout(g, b.mMissionContainer),
          unitRef : a,
          fileNameKey : n.instance,
          isTutorialMission : m,
          isLinear : c[12],
          missionCanClose : c[30],
          goals : c.splice(14, 8),
          ignored : c.splice(14, 8),
          missionUnit : r,
          missionTimer : s,
          widestText : -1
        };
        c.layout.SetVisibility(!0);
        c.layout.objectiveContainer = c.layout.FindControlByID(simcity.cMissionUI.kWinObjectiveContainer);
        c.layout.missionTimerText = c.layout.FindControlByID(simcity.cMissionUI.kWinMissionTimerText);
        c.layout.missionTimerWin = c.layout.FindControlByID(simcity.cMissionUI.kWinMissionTimerWin);
        null != c.missionCanClose && void 0 != c.missionCanClose && !1 == c.missionCanClose && (t = c.layout.FindControlByID(simcity.cMissionUI.kBtnClose)) && t.DestroyControl();
        (!m || simcity.gGlobalUIHandler.mIsTutorialEnabled) && b.SetBadgeFromKeys(c.layout,
          h, k);
        simcity.SetMissionHeading(c.layout, d);
        simcity.CreateMissionObjectives(c.layout, j, c, l);
        b.AddAnimDataToMissionLayout(c.layout);
        b.EnterTransition(c.layout, simcity.cMissionUI.kTransitionIntro);
        b.mSimMissions.push(c);
        !0 === simcity.gGlobalUIHandler.mIsTutorialEnabled && m ? (c.layout.SetVisibility(!1), simcity.gGlobalUIHandler.mMissionUI.mTutorialStepShown = !1, simcity.gGlobalUIHandler.mTutorialManager.SetTutorialState(c, simcity.kTutorialStateOpeningDialog)) : m || c.layout.FindControlByID(simcity.cMissionUI.kBtnBadge).SetSelected(!1);
        b.UpdateSimMissions();
        b.UpdateMissionLayouts();
        simcity.UpdateMissionCompletionBar(c);
        if (!c.isTutorialMission)
          for (t = 0; t < q; ++t)
            1 === c.ignored[t] && simcity.CompleteObjective(c, t, !0);
        d = c.layout.FindControlByID(238605255);
        h = c.layout.FindControlByID(217522244);
        (null === c.rewardAmount || 0 === c.rewardAmount) && h.SetVisibility(!1);
        d.UpdateLocaleText({
          rewardAmount : c.rewardAmount
        })
      }
    })
  }
};
simcity.cMissionUI.prototype.UpdateSimMissions = function () {
  if (0 < this.mSimMissions.length) {
    for (var a = [], b = 0, c = this.mSimMissions.length; b < c; ++b) {
      for (var d = this.mSimMissions[b], e = 0, f = d.objectiveQueries.length; e < f; ++e)
        a.push(d.objectiveQueries[e]);
      d.isTutorialMission || a.push(d.missionTimer)
    }
    var g = this;
    scrui.RequestGameData(a, function (a) {
      for (var b = 0, c = 0, d = 0, e = g.mSimMissions.length; d < e; ++d) {
        var f = g.mSimMissions[d],
        n = 0,
        c = f.layout.missionAnimData;
        c.missionAccepted && (simcity.gGlobalUIHandler.mIsTutorialEnabled =
            !0, f.layout.SetVisibility(!1), simcity.gGlobalUIHandler.mMissionUI.mTutorialStepShown = !1, simcity.gGlobalUIHandler.mTutorialManager.SetTutorialState(f, simcity.kTutorialStateOpeningDialog), simcity.gGlobalUIHandler.mTutorialManager.TutorialStateOnCompletion(simcity.gGlobalUIHandler.mTutorialManager.mTutorialData), c.missionAccepted = !1);
        for (var c = 0, p = f.objectiveQueries.length; c < p; ++c, ++b) {
          var q = a[b];
          if (null !== q) {
            f.currentObjectiveValues[c] = q;
            var o = f.goals[c],
            r = 1790114339 !== f.objectiveTypes[c] ? !0 : !1,
            s = simcity.IsObjectiveCompleteByIndex(c,
                f) && (0 === f.ignored[c] || f.isTutorialMission) ? !0 : !1,
            t = 1 == f.isLinear ? !0 : !1,
            u = 0 <= c - 1 ? simcity.IsObjectiveCompleteByIndex(c - 1, f) ? !0 : !1 : !0;
            if ((r && q >= o || !r && q <= o) && !s)
              if (t && u || !t)
                simcity.CompleteObjective(f, c, !0), scrui.PostGameCommand(scrui.BuildCommand(["runUnitAndAttachedPlayerRule", f.missionUnit, simcity.kRuleIDSCPlayerRuleCheckObjectives]));
            if (f.objectiveQueries[c] === "binAmount/" + simcity.kResourceIDTotalResidential || f.objectiveQueries[c] === "binAmount/" + simcity.kResourceIDRegionTotalResidential)
              q = simcity.GetFudgedPopulation(q),
              o = simcity.GetRoundedFudgedPopulation(o);
            var v = f.objectiveTexts[c];
            s ? (n++, r = 1, v.UpdateLocaleText({
                objective_amount : o,
                objective_capacity : o,
                objective_remaining : o,
                objective_percentage : r
              })) : t && u || !t ? r ? (r = Math.min(1, 0 !== o ? q / o : 0), 1 < r && (r = 1), v.UpdateLocaleText({
                objective_amount : q,
                objective_capacity : o,
                objective_remaining : 0 > o - q ? 0 : o - q,
                objective_percentage : r
              })) : (r = Math.min(1, 0 !== o ? o / q : 0), 1 < r && (r = 1), v.UpdateLocaleText({
                objective_amount : q,
                objective_capacity : o,
                objective_remaining : 0 > q - o ? 0 : q - o,
                objective_percentage : r
              })) :
            (r = 0, v.UpdateLocaleText({
                objective_amount : o,
                objective_capacity : o,
                objective_remaining : o,
                objective_percentage : r
              }));
            (q = f.objectiveProgressBars[c]) && scrui.SetProgressBarWidth(q, r)
          } else !f.closeEarly && !simcity.IsObjectiveCompleteByIndex(c, f) && simcity.CompleteObjective(f, c, !0)
        }
        f.layout.mIsVisible && g.ResizeBubble(f);
        f.isTutorialMission || (c = a[b], b++, f.layout.missionTimerWin.SetVisibility(0 < c && 1E5 > c), 0 < c && 1E5 > c && f.layout.missionTimerText.UpdateLocaleText({
            current_time : c
          }));
        c = simcity.TestMissionCompletion(f);
        f.isTutorialMission && (!c && !0 === simcity.gGlobalUIHandler.mIsTutorialEnabled && !simcity.gGlobalUIHandler.mTutorialManager.mTutorialActive && !simcity.gGlobalUIHandler.mMissionUI.mTutorialStepShown) && (simcity.gGlobalUIHandler.mMissionUI.mTutorialStepShown = !0, simcity.gGlobalUIHandler.mTutorialManager.SetTutorialState(f, n))
      }
    })
  }
};
var gCheckBoxWidth = 0;
simcity.cMissionUI.prototype.ResizeBubble = function (a) {
  for (var b = a.layout, c = b.objectiveContainer, d = b.speechBubble.mWidth, e = Array(a.objectiveQueries.length), f = 0, g = 0, h = 0, i = a.objectiveQueries.length; h < i; ++h) {
    var j = a.objectiveLayouts[h];
    j.SetPosition(j.mLeft, g, j.mWidth, j.mHeight);
    if (a.isTutorialMission && !simcity.gGlobalUIHandler.mIsTutorialEnabled) {
      if (0 == h) {
        var k = b.miniTutorialText;
        k && (g = k.GetTextHeight() + 5, k.SetPosition(k.mLeft, k.mTop, k.mWidth, g), g += 35)
      }
      j.SetVisibility(!1)
    } else {
      var l = a.objectiveTexts[h].GetTextHeight(),
      g = g + (l + 5),
      k = a.objectiveTexts[h],
      f = k.mWidth;
      k.SetPosition(k.mLeft, k.mTop, k.mWidth, l);
      k = a.objectiveProgressBars[h];
      e[h] = k ? k.mParentControl : null;
      k = a.objectiveTexts[h].GetTextWidth();
      k > a.widestText && (a.widestText = k)
    }
    j.checkBoxRoot && (gCheckBoxWidth = j.checkBoxRoot.mWidth)
  }
  k = b.objectiveWrapper;
  g = Math.max(40, g);
  k.SetPosition(k.mLeft, k.mTop, k.mWidth, g);
  (h = b.focusArea) && h.SetPosition(h.mLeft, h.mTop, h.mWidth, g + 10);
  (h = b.statusBarFrame) && h.SetWindowImage("pledgeBadgePrgrsframe" + i + ".png");
  if (l = b.speechBubble) {
    var m =
      l.mLeft;
    if ((!1 == a.isTutorialMission || null == a.isTutorialMission) && a.widestText > f) {
      h = 0;
      for (i = a.objectiveQueries.length; h < i; ++h)
        if (e[h] && (e[h].SetWidth(a.widestText + gCheckBoxWidth), a.objectiveTexts[h].SetWidth(a.widestText), j = a.objectiveLayouts[h], (f = j.blueFiller) && f.SetWidth(a.widestText + gCheckBoxWidth), a.objectiveTexts[h].SetWidth(a.widestText)), f = b.gradFiller)
          j = f.mWidth - a.widestText, f.SetWidth(a.widestText + 250), f.SetPosition(f.mLeft + j - 250, f.mTop, f.mWidth, f.mHeight);
      m -= a.widestText - d;
      b = k.mLeft;
      l.SetPosition(m -
        b, l.mTop, a.widestText + b, g + 10)
    } else
      l.SetPosition(l.mLeft, l.mTop, l.mWidth, g + 10);
    c.SetPosition(c.mLeft, c.mTop, c.mWidth, g + 30)
  }
};
simcity.cMissionUI.prototype.UpdateSimMissionCompletion = function () {
  for (var a = 0, b = this.mSimMissions.length; a < b; ++a) {
    var c = this.mSimMissions[a];
    c.completed && (c.isTutorialMission && !c.layout.missionAnimData.missionComplete) && simcity.OnMissionComplete(c)
  }
};
simcity.MissionInfoFilenameKeyEqual = function (a, b) {
  if (!a || !b)
    return !1;
  if ("number" === typeof a) {
    if (a === b.fileNameKey)
      return !0
  } else if (a.fileNameKey === b.fileNameKey)
    return !0;
  return !1
};
simcity.cMissionUI.prototype.CleanupSimMissions = function () {
  for (var a = 0; a < this.mSimMissions.length; ) {
    var b = this.mSimMissions[a];
    (b.completed || b.closeEarly) && (null == b.layout || b.layout.missionAnimData.currentState == simcity.cMissionUI.kShutdown) && (simcity.IsTutorialInProgress() && !simcity.MissionInfoFilenameKeyEqual(simcity.gGlobalUIHandler.mTutorialManager.mMissionInfo, b) || !simcity.IsTutorialInProgress()) ? (simcity.SetMiniTutorialAsCompleted(b), this.mSimMissions.splice(a, 1)) : ++a
  }
  this.UpdateMissionLayouts()
};
simcity.cMissionUI.prototype.CompleteActiveSimMission = function () {
  this.CompleteSimMission(this.mActiveUnitRef)
};
simcity.cMissionUI.prototype.RemoveActiveSimMission = function () {
  this.RemoveSimMission(this.mActiveUnitRef)
};
simcity.cMissionUI.prototype.RemoveAllSimMissions = function () {
  for (var a = 0, b = this.mSimMissions.length; a < b; ++a) {
    var c = this.mSimMissions[a];
    simcity.ManuallyDestroyMissionUnit(c);
    this.CloseMission(c.layout)
  }
};
simcity.cMissionUI.prototype.CompleteSimMission = function (a) {
  for (var b = 0, c = this.mSimMissions.length; b < c; ++b) {
    var d = this.mSimMissions[b];
    if (simcity.CompareUnitRefs(d.unitRef, a)) {
      for (var e = 0, f = d.objectiveQueries.length / 2; e < f; ++e)
        simcity.CompleteObjective(d, e, !0);
      d.isTutorialMission ? simcity.TestMissionCompletion(d) : simcity.OnMissionComplete(d)
    }
    d.isTutorialMission || (simcity.TestMissionCompletion(d), d.completed && simcity.OnMissionComplete(d))
  }
};
simcity.cMissionUI.prototype.RemoveSimMission = function (a, b) {
  for (var c = 0, d = this.mSimMissions.length; c < d; ++c) {
    var e = this.mSimMissions[c];
    if (simcity.CompareUnitRefs(e.unitRef, a)) {
      e.layout.missionAnimData.displayFailure = b;
      this.CloseMission(e.layout);
      break
    }
  }
};
simcity.cMissionUI.prototype.AddMission = function (a) {
  var a = a(),
  b = gUIManager.LoadLayout(a.layoutPath, this.mMissionContainer);
  b.SetVisibility(!0);
  b.objectiveContainer = b.FindControlByID(simcity.cMissionUI.kWinObjectiveContainer);
  b.gradFiller = b.FindControlByID(254597142);
  this.AddAnimDataToMissionLayout(b);
  var c = {
    layout : b,
    queryArgs : [],
    dataBinding : a,
    completed : !1
  },
  a = c.dataBinding;
  a.hasOwnProperty("headingString") && simcity.SetMissionHeading(b, a.headingString);
  a.hasOwnProperty("objectiveInfo") && simcity.CreateMissionObjectives(b,
    a.objectiveInfo, c);
  a.hasOwnProperty("init") && a.init(b, c);
  (b = b.FindControlByID(simcity.cMissionUI.kBtnBadge)) && a.hasOwnProperty("buttonAssets") && b.SetImages([a.buttonAssets.normal, a.buttonAssets.rollover, a.buttonAssets.down, "", a.buttonAssets.rollover, a.buttonAssets.normal, a.buttonAssets.down, ""]);
  this.EnterTransition(c.layout, simcity.cMissionUI.kTransitionIntro);
  this.UpdateMission(c, !1);
  this.UpdateMissionLayouts()
};
simcity.cMissionUI.prototype.UpdateMissionLayouts = function () {
  if (this.mMissionContainer.mChildren)
    for (var a = this.mMissionContainer.mChildren.length, b = 0, c = 0; c < a; ++c) {
      var d = this.mMissionContainer.mChildren[c];
      if (d.GetControlID() === simcity.cMissionUI.kMisssionLayoutID) {
        d.SetPosition(d.mLeft, b, d.mWidth, d.mHeight);
        var e = d.objectiveContainer,
        f = 0;
        e && (f = e.mHeight + e.mTop);
        e = !0;
        d.missionAnimData && (e = (d.missionAnimData.currentState !== simcity.cMissionUI.kFullyHidden || d.missionAnimData.transition !== simcity.cMissionUI.kTransitionNone) &&
          d.mIsVisible);
        e && (b += Math.max(f, d.mHeight))
      }
    }
};
simcity.cMissionUI.prototype.UpdateMission = function (a, b) {
  var c = [],
  d = [];
  simcity.GenerateDataBindingQueries([a.dataBinding], c, {
    argumentList : a.queryArgs
  }, d, b);
  0 < c.length && simcity.RequestDataBindingData(c, [a.dataBinding], d, b, function (c) {
    var d = a.dataBinding;
    if ((d.dynamic || !1 === b) && !a.completed)
      d.action(a.layout, c[0], a), simcity.UpdateMissionCompletionBar(a)
  })
};
simcity.cMissionUI.prototype.UpdateAllMissions = function (a) {
  this.mTimeSinceLastUpdate += a;
  1E3 < this.mTimeSinceLastUpdate && (this.mTimeSinceLastUpdate = 0, this.UpdateSimMissions(), this.VerifyMiniTutorials());
  this.UpdateMissionTransitions(a);
  this.UpdateSimMissionCompletion();
  this.CleanupSimMissions();
  this.Cleanup()
};
simcity.cMissionUI.prototype.VerifyMiniTutorials = function () {
  if (0 < this.NumberOfActiveMiniTutorials() && !simcity.IsTutorialInProgress())
    for (var a = 0, b = this.mSimMissions.length; a < b; ++a) {
      var c = this.mSimMissions[a];
      if (c.isTutorialMission) {
        var d = simcity.GetMiniTutorialDatabindingFromMissionID(c.fileNameKey);
        if (!simcity.ValidateMiniTutorial(d) || simcity.IsInBudgetCrisis())
          this.CloseMission(c.layout), simcity.ManuallyDestroyMissionUnit(c)
      }
    }
};
simcity.cMissionUI.prototype.Cleanup = function () {
  this.UpdateMissionLayouts()
};
simcity.SendSoundEventForMission = function (a, b, c) {
  c && c.mIsVisible && simcity.SendSoundEvent(a, b)
};
simcity.OnMissionComplete = function (a) {
  simcity.SendSoundEventForMission(simcity.audio.kGlobalSoundObjectID, a.dataBinding && a.dataBinding.onMissionCompleteSfx ? a.dataBinding.onMissionCompleteSfx : simcity.audio.kInstanceUICompleteMission, a.layout);
  a.layout.missionAnimData.missionComplete = !0;
  if (a.dataBinding && a.dataBinding.hasOwnProperty("onSuccess"))
    a.dataBinding.onSuccess();
  if (!0 === simcity.gGlobalUIHandler.mIsTutorialEnabled) {
    var b = simcity.gGlobalUIHandler.mTutorialManager;
    b.HasTutorialState(a, simcity.kTutorialStateClosingDialog) &&
    (simcity.gGlobalUIHandler.mMissionUI.mTutorialStepShown = !0, b.SetTutorialState(a, simcity.kTutorialStateClosingDialog))
  }
};
simcity.cMissionUI.prototype.AreObjectivesVisible = function (a) {
  return a.layout.FindControlByID(simcity.cMissionUI.kBtnBadge).mIsSelected
};
simcity.cMissionUI.prototype.HandleObjectiveComplete = function (a, b) {
  a.layout.missionAnimData.objectiveQueue.push({
    index : b,
    displayTime : 0,
    layout : null
  })
};
simcity.CompleteObjective = function (a, b) {
  simcity.gGlobalUIHandler.mMissionUI.mTutorialStepShown = !1;
  if (a && (0 === a.ignored[b] || a.isTutorialMission)) {
    if (!a.checkboxes[b].mIsVisible) {
      simcity.SendSoundEventForMission(simcity.audio.kGlobalSoundObjectID, simcity.audio.kInstanceUICompleteObjective, a.layout);
      a.checkboxes[b].SetVisibility(!0);
      var c = a.goals[b];
      c && (a.currentObjectiveValues[b] = c);
      simcity.UpdateMissionCompletionBar(a);
      (c = a.objectiveProgressBars[b]) && scrui.SetProgressBarWidth(c, 1);
      simcity.gGlobalUIHandler.mMissionUI.HandleObjectiveComplete(a,
        b)
    }
  } else
    a.checkboxes[b].SetVisibility(!0)
};
simcity.SaveMissionCompletion = function () {};
simcity.SaveMissionObjectiveCompletion = function () {
  this.mBoxID = simcity.gGlobalUIHandler.GetBoxID()
};
simcity.UpdateMissionCompletionBar = function (a) {
  var b = 0,
  c = a.checkboxes.length;
  if (0 < c) {
    for (var d = 0; d < c; ++d)
      a.checkboxes[d].mIsVisible && b++;
    a = a.layout.FindAnimationByID(simcity.cMissionUI.kObjectiveStatusBarAnimationID);
    a.Start();
    b = Math.round(1E3 * (b / c));
    a.StopAtTime(b + 1)
  }
};
simcity.ManuallyDestroyMissionUnit = function (a) {
  a && a.unitRef && (a = scrui.RequestStringFromUnitRef(a.unitRef), scrui.PostGameCommand(scrui.BuildCommand(["destroyUnit", a])))
};
simcity.cMissionUI.prototype.IsTransitionPlaying = function (a) {
  var b = a.missionAnimData.transitionAnimID;
  return 0 !== b ? a.FindAnimationByID(b).IsPlaying() : !1
};
simcity.cMissionUI.prototype.EnterTransition = function (a, b) {
  if (b !== a.missionAnimData.transition) {
    a.missionAnimData.transition = b;
    var c = 0,
    d = 0,
    e = !0;
    switch (b) {
    case simcity.cMissionUI.kTransitionMissionVisible:
      c = simcity.cMissionUI.kBadgeFadeAnimationID;
      e = !1;
      a.missionAnimData.nextState = simcity.cMissionUI.kBadgeOnly;
      break;
    case simcity.cMissionUI.kTransitionIntro:
      c = simcity.cMissionUI.kMissionIntroAnimationID;
      d = simcity.audio.kInstanceUIMissionAppear;
      a.missionAnimData.nextState = simcity.cMissionUI.kFullObjectiveBanner;
      break;
    case simcity.cMissionUI.kTransitionOutro:
      c = simcity.cMissionUI.kMissionOutroAnimationID;
      a.missionAnimData.nextState = simcity.cMissionUI.kShutdown;
      d = simcity.audio.kInstanceUIMissionCompleteClose;
      break;
    case simcity.cMissionUI.kTransitionDisplayInfo:
      c = simcity.cMissionUI.kDisplayInfoAnimationID;
      break;
    case simcity.cMissionUI.kTransitionObjectivesHidden:
      c = simcity.cMissionUI.kObjectivesExpandAnimationID;
      a.missionAnimData.nextState = simcity.cMissionUI.kBadgeOnly;
      break;
    case simcity.cMissionUI.kTransitionObjectivesVisible:
      c =
        simcity.cMissionUI.kObjectivesExpandAnimationID;
      a.missionAnimData.nextState = simcity.cMissionUI.kFullObjectiveBanner;
      e = !1;
      break;
    case simcity.cMissionUI.kTransitionDisplayReward:
      c = simcity.cMissionUI.kDisplayRewardAnimationID;
      a.missionAnimData.rewardShown = !0;
      break;
    case simcity.cMissionUI.kTransitionObjectiveQueueVisible:
      c = simcity.cMissionUI.kShowFloatingObjectivesAnimationID;
      a.missionAnimData.nextState = simcity.cMissionUI.kObjectiveQueue;
      break;
    case simcity.cMissionUI.kTransitionObjectiveQueueHidden:
      c =
        simcity.cMissionUI.kShowFloatingObjectivesAnimationID;
      e = !1;
      a.missionAnimData.nextState = simcity.cMissionUI.kBadgeOnly;
      break;
    case simcity.cMissionUI.kTransitionDisplayFailure:
      c = simcity.cMissionUI.kDisplayFailureAnimationID,
      a.missionAnimData.displayFailure = !1
    }
    a.missionAnimData.transitionAnimID = c;
    0 !== c && a.FindAnimationByID(c).Start(e ? scrui.cAnimation.kPlayForward : scrui.cAnimation.kPlayReverse);
    0 !== d && simcity.SendSoundEventForMission(simcity.audio.kGlobalSoundObjectID, d, a)
  }
};
simcity.cMissionUI.prototype.TickObjectiveQueue = function (a, b, c) {
  for (var d = a.missionAnimData, e = 0, f = d.objectiveQueue.length; e < f; ++e)
    d.objectiveQueue[e].displayTime += b;
  for (; 0 < d.objectiveQueue.length && d.objectiveQueue[0].displayTime > simcity.cMissionUI.kObjectiveShowTime; )
    d.objectiveQueue[0].layout && d.objectiveQueue[0].layout.DestroyControl(), d.objectiveQueue.shift();
  b = 0;
  if (c && 0 < d.objectiveQueue.length) {
    for (var g = this.MissionInfoFromLayout(a), c = g.layout.FindControlByID(216925536), h = 0, e = 0, f = d.objectiveQueue.length; e <
      f; ++e) {
      var i = d.objectiveQueue[e].layout;
      if (null === i && g) {
        var j = d.objectiveQueue[e].index,
        i = g.objectiveLayouts[j].SerializeToObject(),
        i = scrui.cControlBase.Deserialize(i, c),
        k = i.FindControlByID(202394872);
        i.FindControlByID(202394872);
        k && (0 === g.ignored[j] || g.isTutorialMission) && k.SetVisibility(g.checkboxes[j].mIsVisible);
        var l = i.FindControlByID(simcity.cMissionUI.kTextObjective),
        k = 0;
        l && (l.SetVisibility(!0), l.SetRawText(g.objectiveTexts[j].GetText()), (k = l.GetTextWidth()) && k > b && (b = k), l.SetPosition(l.mLeft,
            l.mTop, k));
        if (j = i.FindControlByID(simcity.cMissionUI.kWinProgressBarObjective))
          l = i.FindControlByID(222882058), k && l && l.SetPosition(l.mLeft, l.mTop, k + 10), l = i.FindControlByID(254584524), k && l && l.SetPosition(l.mLeft, l.mTop, k + 10), scrui.SetProgressBarWidth(j, 1);
        d.objectiveQueue[e].layout = i
      }
      i && (i.SetPosition(i.mLeft, h, i.mWidth, i.mHeight), h += i.mHeight)
    }
    c && (d = c.mLeft, 0 < b && (d = 40, (a = a.FindControlByID(simcity.cMissionUI.kBtnBadge)) && (d = a.mWidth / 2), d = -1 * (b / 2 + d)), c.SetPosition(d, c.mTop, c.mWidth, c.mHeight));
    0 < h &&
    c.SetPosition(c.mLeft, c.mTop, c.mRight, c.mTop + h)
  }
};
simcity.cMissionUI.prototype.UpdateMissionTransitions = function (a) {
  var b = [];
  if (this.mMissionContainer.mChildren)
    for (var c = 0, d = this.mMissionContainer.mChildren.length; c < d; ++c) {
      var e = this.mMissionContainer.mChildren[c];
      if (e.GetControlID() === simcity.cMissionUI.kMisssionLayoutID) {
        var f = e.missionAnimData;
        if (!this.IsTransitionPlaying(e)) {
          f.currentState = f.nextState;
          var g = simcity.cMissionUI.kTransitionNone,
          h = this.mObjectiveLockedLayout === e,
          i = null !== this.mObjectiveLockedLayout,
          j = 0 < f.objectiveQueue.length;
          switch (f.currentState) {
          case simcity.cMissionUI.kFullyHidden:
            if (f.missionComplete ||
              j)
              g = simcity.cMissionUI.kTransitionMissionVisible;
            break;
          case simcity.cMissionUI.kBadgeOnly:
            f.missionComplete ? g = j ? simcity.cMissionUI.kTransitionObjectiveQueueVisible : f.rewardShown ? simcity.cMissionUI.kTransitionOutro : simcity.cMissionUI.kTransitionDisplayReward : f.displayFailure ? g = simcity.cMissionUI.kTransitionDisplayFailure : f.closeDesired ? g = simcity.cMissionUI.kTransitionOutro : h || f.rolledover && !i ? g = simcity.cMissionUI.kTransitionObjectivesVisible : j && (g = simcity.cMissionUI.kTransitionObjectiveQueueVisible);
            break;
          case simcity.cMissionUI.kFullObjectiveBanner:
            this.TickObjectiveQueue(e, a, !1);
            j = 0 < f.objectiveQueue.length;
            if (!j)
              if (f.closeDesired || f.missionComplete)
                g = simcity.cMissionUI.kTransitionObjectivesHidden;
              else if (!h && (!f.rolledover || i))
                g = simcity.cMissionUI.kTransitionObjectivesHidden;
            break;
          case simcity.cMissionUI.kObjectiveQueue:
            this.TickObjectiveQueue(e, a, !0);
            j = 0 < f.objectiveQueue.length;
            j || (g = simcity.cMissionUI.kTransitionObjectiveQueueHidden);
            break;
          case simcity.cMissionUI.kShutdown:
            h && (this.mObjectiveLockedLayout =
                null),
            b.push(e)
          }
          this.EnterTransition(e, g)
        }
      }
    }
  c = 0;
  for (d = b.length; c < d; ++c)
    b[c].DestroyControl()
};
simcity.cMissionUI.prototype.AddAnimDataToMissionLayout = function (a) {
  a.missionAnimData = {
    currentState : simcity.cMissionUI.kFullyHidden,
    nextState : simcity.cMissionUI.kFullyHidden,
    missionComplete : !1,
    objectiveQueue : [],
    rolledover : !1,
    closeDesired : !1,
    rewardShown : !1,
    displayFailure : !1,
    transition : simcity.cMissionUI.kTransitionNone,
    transitionAnimID : 0
  }
};
simcity.cMissionUI.prototype.CloseMission = function (a) {
  if (!a.missionAnimData.closeDesired) {
    var b,
    c,
    d;
    b = 0;
    for (c = this.mSimMissions.length; b < c; ++b)
      if (d = this.mSimMissions[b], d.layout == a) {
        d.closeEarly = !0;
        break
      }
    scrui.Assert(b < c, "Could not find mission info to remove in CloseMission");
    a.missionAnimData.closeDesired = !0
  }
};
simcity.ImportExportUI = {};
simcity.kImExStatus_Keep = 0;
simcity.kImExStatus_Import = 1;
simcity.kImExStatus_Export = 2;
simcity.kWinImEx_KeepButton = 234263952;
simcity.kWinImEx_ImportButton = 234002038;
simcity.kWinImEx_ExportButton = 234002019;
simcity.kWinImEx_EditorButton = 236791595;
simcity.kWinImExUI_OkayButton = 236790941;
simcity.kWinImExUI_EditorIconButton = 248965463;
simcity.kWinImExUI_CloseButton = 234452946;
simcity.kWinImExUI_ResourceButton = 234262952;
simcity.kWinImExUI_LotFillInfoText = 234266478;
simcity.kWinGraphContainer = 245268451;
simcity.kImportExportGraphText = 248290040;
simcity.GetImExStatus = function (a, b) {
  var c = simcity.kImExStatus_Keep;
  0 === a ? c = simcity.kImExStatus_Export : 0 === b && (c = simcity.kImExStatus_Import);
  return c
};
simcity.SetImExStatus = function (a, b) {
  a.FindControlByID(234264090).SetVisibility(b === simcity.kImExStatus_Keep);
  a.FindControlByID(235133492).SetVisibility(b === simcity.kImExStatus_Import);
  a.FindControlByID(235133495).SetVisibility(b === simcity.kImExStatus_Export)
};
simcity.cImportExportUIHandler = function () {
  this.UIHandler = scrui.cUIHandler;
  this.UIHandler();
  this.mSelectedDataBinding = this.mBaseUnitString = this.mButtonContainer = this.mTab = this.mLayout = null;
  this.mCurrentStatus = simcity.kImExStatus_Keep;
  this.mUpdateTimer = 0;
  this.mMarket = "truck";
  this.mAttribute = {
    BUY : "buyPrice",
    SELL : "sellPrice"
  };
  this.mMarket = "truck";
  this.mPriceAttribute = this.mAttribute.BUY;
  this.mGraph = void 0;
  this.mLastHour = -1;
  this.mGlobalResourceDataCache = void 0
};
goog.inherits(simcity.cImportExportUIHandler, scrui.cUIHandler);
simcity.cImportExportUIHandler.prototype.Init = function (a) {
  this.mLayout = gUIManager.LoadAndCacheLayout("Layouts/ImportExport/ImportExportClickPanel.js", a);
  this.mLayout.SetVisibility(!1);
  this.mTab = this.mLayout.FindControlByID(233945313);
  this.mButtonContainer = this.mLayout.FindControlByID(234539741);
  this.mLastHour = -1
};
simcity.cImportExportUIHandler.prototype.GetResource = function (a, b, c, d, e) {
  a = {
    url : scrui.GetRestPath() + "market/" + this.mMarket + "/resource/" + b + "/history.json",
    params : [["numberOfDays", c]],
    onSuccess : function (a) {
      d && "function" == typeof d && d(a.json)
    },
    onError : function (a) {
      e && "function" == typeof e && e(a)
    },
    method : "get"
  };
  scrui.XHR.Request(a)
};
simcity.cImportExportUIHandler.prototype.Show = function (a) {
  this.mBaseUnitString = scrui.RequestStringFromUnitRef(a);
  var b = this,
  a = simcity.gUIToolbox.GetKeys(simcity.gSimCityWorldController.GlobalMarket.kResourceList);
  this.GetResource(this.mMarket, a, 31, function (a) {
    b.SetupResourceData(a)
  }, function () {});
  this.mLastHour = simcity.gTimeInfo.hour;
  a = [scrui.BuildRequestQuery(["importExport", this.mBaseUnitString])];
  scrui.RequestGameData(a, function (a) {
    a = a[0];
    b.mButtonContainer.DestroyChildren();
    for (var d = 0, e = 0; 6 >
      e; ++e) {
      var f = gUIManager.LoadAndCacheLayout("Layouts/ImportExport/EmptyLotSlot.js", b.mButtonContainer);
      f.SetPosition(e * f.mWidth, 0)
    }
    var g = 0,
    f = [],
    h = [],
    i;
    for (i in a)
      if (simcity.kImportExportDataBindings.hasOwnProperty(i)) {
        e = gUIManager.LoadAndCacheLayout("Layouts/ImportExport/LotButton.js", b.mButtonContainer);
        e.SetPosition(d * e.mWidth, 0);
        h.push(e);
        var j = a[i].count;
        e.SetWidth(e.mWidth * j);
        e.mUserData = i;
        0 === g && (g = i);
        var k = simcity.kImportExportDataBindings[i];
        k.button = e;
        k.count = j;
        k.slotRef = a[i].slotRef;
        f.push(scrui.BuildRequestQuery(["units",
              b.mBaseUnitString, "bins", k.importSwitchResourceID]));
        f.push(scrui.BuildRequestQuery(["units", b.mBaseUnitString, "bins", k.storageSwitchResourceID]));
        var l = e.FindControlByID(234266019);
        k.darkIcons = [];
        k.lightIcons = [];
        for (e = 0; e < j; ++e) {
          var m = gUIManager.LoadAndCacheLayout("Layouts/ImportExport/ImportExportIcon.js", l);
          m.SetPosition(e * m.mWidth, 0);
          var n = m.FindControlByID(234556441);
          n.SetWindowImage(k.darkIconPath);
          k.darkIcons.push(n);
          m = m.FindControlByID(236771276);
          m.SetWindowImage(k.lightIconPath);
          m.SetVisibility(!1);
          k.lightIcons.push(m)
        }
        d += j
      }
    scrui.RequestGameData(f, function (a) {
      for (var c = 0, d = 0, e = a.length; d < e; d += 2, ++c) {
        var f = simcity.GetImExStatus(a[d].amount, a[d + 1].amount);
        simcity.SetImExStatus(h[c], f)
      }
      a = 0 !== g;
      c = simcity.gGlobalUIHandler.mToolPaletteUIHandler.mEditorIsOpen;
      b.mLayout.FindControlByID(236780750).SetVisibility(!a);
      b.mLayout.FindControlByID(236791595).SetVisibility(!c);
      b.mLayout.FindControlByID(234452946).SetVisibility(!c);
      b.mLayout.FindControlByID(simcity.kWinImExUI_EditorIconButton).SetVisibility(a &&
        !c);
      b.mLayout.FindControlByID(simcity.kWinImExUI_OkayButton).SetVisibility(a || c);
      b.mLayout.FindControlByID(234884019).SetVisibility(a);
      b.SetSelected(g);
      b.mLayout.SetVisibility(!0)
    })
  })
};
simcity.cImportExportUIHandler.prototype.SetupResourceData = function (a) {
  this.mGlobalResourceDataCache = a.marketResourcePrices;
  this.DrawGraph()
};
simcity.cImportExportUIHandler.prototype.Update = scrui.Client_ProfZone("cImportExportUIHandler.Update", function (a) {
    if (this.mLastHour !== simcity.gTimeInfo.hour) {
      var b = simcity.gUIToolbox.GetKeys(simcity.gSimCityWorldController.GlobalMarket.kResourceList),
      c = this;
      this.GetResource(this.mMarket, b, 31, function (a) {
        c.SetupResourceData(a)
      }, function () {});
      this.mLastHour = simcity.gTimeInfo.hour
    }
    if (this.mLayout && this.mSelectedDataBinding && (this.mUpdateTimer += a, 1E3 < this.mUpdateTimer)) {
      this.mUpdateTimer = 0;
      var a = [scrui.BuildRequestQuery(["connectedUnits",
            this.mBaseUnitString, "bins", this.mSelectedDataBinding.resourceID]), scrui.BuildRequestQuery(["simProperties", this.mSelectedDataBinding.sellPrice]), scrui.BuildRequestQuery(["simProperties", this.mSelectedDataBinding.buyPrice]), scrui.BuildRequestQuery(["units", this.mBaseUnitString, "bins", this.mSelectedDataBinding.importSwitchResourceID]), scrui.BuildRequestQuery(["units", this.mBaseUnitString, "bins", this.mSelectedDataBinding.storageSwitchResourceID]), scrui.BuildRequestQuery(["simProperties", simcity.kPropscscGlobalMarketTransferAmount])],
      d = this;
      scrui.RequestGameData(a, function (a) {
        var b = a[0];
        if (b) {
          var c = simcity.FormatLargeNumberByType(b.amount, d.mSelectedDataBinding.formatType),
          h = d.mLayout.FindControlByID(simcity.kWinImExUI_LotFillInfoText);
          h.UpdateLocaleText({
            numLots : d.mSelectedDataBinding.count,
            amount : c.number,
            exponent : c.exponent
          });
          h = d.mLayout.FindControlByID(234262935);
          scrui.SetProgressBarWidth(h, b.amount / b.capacity);
          h = d.mLayout.FindControlByID(234264916);
          h.UpdateLocaleText({
            price : a[1]
          });
          h = d.mLayout.FindControlByID(234265107);
          h.UpdateLocaleText({
            price : a[2]
          });
          b = simcity.FormatLargeNumberByType(a[5], d.mSelectedDataBinding.formatType);
          c = b.number;
          h = d.mLayout.FindControlByID(241528272);
          h.UpdateLocaleText({
            amount : c,
            exponent : b.exponent
          });
          h = d.mLayout.FindControlByID(241528280);
          h.UpdateLocaleText({
            amount : c,
            exponent : b.exponent
          });
          a = simcity.GetImExStatus(a[3].amount, a[4].amount);
          d.UpdateStatus(a)
        }
      })
    }
  });
simcity.cImportExportUIHandler.prototype.RefreshNow = function () {
  this.mUpdateTimer = 1E3
};
simcity.SetImExIconTypeHelper = function (a, b) {
  for (var c = 0, d = a.darkIcons.length; c < d; ++c)
    a.darkIcons[c].SetVisibility(!b), a.lightIcons[c].SetVisibility(b)
};
simcity.cImportExportUIHandler.prototype.DrawGraph = function () {};
simcity.cImportExportUIHandler.prototype.ParsePricing = function (a, b, c) {
  for (var d = [], e = 0, f = a.length; e < f; e++)
    d.push({
      x : a[e][b],
      y : a[e][c]
    });
  return d
};
simcity.cImportExportUIHandler.prototype.SetSelected = function (a) {
  this.mTab.SetVisibility(0 !== a);
  if (0 !== a) {
    this.mSelectedDataBinding = simcity.kImportExportDataBindings[a];
    a = this.mSelectedDataBinding.button;
    a.FindControlByID(simcity.kWinImExUI_ResourceButton).SetSelected(!0);
    this.mTab.SetPosition(a.mLeft, this.mTab.mTop, a.mWidth, this.mTab.mHeight);
    simcity.SetImExIconTypeHelper(this.mSelectedDataBinding, !0);
    this.RefreshNow();
    var b = this;
    this.mSelectedDataBinding.resourceName.LoadString(function () {
      var a = {
        "Resource Name" : b.mSelectedDataBinding.resourceName.GetText()
      },
      d = b.mLayout.FindControlByID(233947634);
      d.UpdateLocaleText(a);
      d = b.mLayout.FindControlByID(234622857);
      d.UpdateLocaleText(a);
      d = b.mLayout.FindControlByID(simcity.kImportExportGraphText);
      d.UpdateLocaleText(a);
      d = b.mLayout.FindControlByID(simcity.kWinImExUI_LotFillInfoText);
      d.SetLocaleText(b.mSelectedDataBinding.amountText)
    });
    this.DrawGraph()
  }
};
simcity.cImportExportUIHandler.prototype.UpdateStatus = function (a) {
  this.mCurrentStatus = a;
  a = 0;
  switch (this.mCurrentStatus) {
  case simcity.kImExStatus_Keep:
    a = simcity.kWinImEx_KeepButton;
    break;
  case simcity.kImExStatus_Import:
    a = simcity.kWinImEx_ImportButton;
    break;
  case simcity.kImExStatus_Export:
    a = simcity.kWinImEx_ExportButton
  }
  this.mLayout.FindControlByID(a).SetSelected(!0);
  simcity.SetImExStatus(this.mSelectedDataBinding.button, this.mCurrentStatus)
};
simcity.cImportExportUIHandler.prototype.SetStatus = function (a) {
  var b = 0;
  a > this.mCurrentStatus ? b = a - this.mCurrentStatus : a < this.mCurrentStatus && (b = simcity.kImExStatus_Export - this.mCurrentStatus + a + 1);
  for (var c = this.mSelectedDataBinding.slotRef, d = 0; d < b; ++d)
    scrui.PostGameCommand(scrui.BuildCommand(["runUnitPlayerRule", scrui.RequestStringFromUnitRef(c), simcity.kRuleIDSCPlayerRuleToggleImportExport]));
  this.mUpdateTimer = 0;
  this.UpdateStatus(a)
};
simcity.cImportExportUIHandler.prototype.HandleUIMessage = function (a, b, c) {
  if (this.mLayout)
    switch (a) {
    case scrui.kMsgTypeButtonClicked:
      switch (b) {
      case simcity.kWinImEx_KeepButton:
        this.SetStatus(simcity.kImExStatus_Keep);
        break;
      case simcity.kWinImEx_ImportButton:
        this.SetStatus(simcity.kImExStatus_Import);
        break;
      case simcity.kWinImEx_ExportButton:
        this.SetStatus(simcity.kImExStatus_Export);
        break;
      case simcity.kWinImEx_EditorButton:
      case simcity.kWinImExUI_EditorIconButton:
        scrui.PostGameCommand(scrui.BuildCommand(["editbuilding",
              this.mBaseUnitString]));
      case simcity.kWinImExUI_OkayButton:
      case simcity.kWinImExUI_CloseButton:
        this.Shutdown();
        break;
      case simcity.kWinImExUI_ResourceButton:
        a = c.GetParentLayout(),
        this.SetSelected(a.mUserData),
        this.mTab.SetPosition(a.mLeft, this.mTab.mTop, a.mWidth, this.mTab.mHeight)
      }
      break;
    case scrui.kMsgTypeButtonDeselected:
      switch (b) {
      case simcity.kWinImExUI_ResourceButton:
        a = c.GetParentLayout(),
        a = a.mUserData,
        0 !== a && simcity.SetImExIconTypeHelper(simcity.kImportExportDataBindings[a], !1)
      }
    }
};
simcity.cImportExportUIHandler.prototype.Shutdown = function () {
  this.mLayout.DestroyControl();
  this.mLayout = null;
  gUIManager.UnregisterUIHandler(this);
  delete simcity.gGlobalUIHandler.mImportExportUIHandler
};
simcity.LayerUI = {};
simcity.cLayerUIHandler = function () {
  this.UIHandler = scrui.cUIHandler;
  this.UIHandler();
  this.mLegendLayout = null;
  this.mLayerButtons = [];
  this.mCurrentLayerID = null
};
goog.inherits(simcity.cLayerUIHandler, scrui.cUIHandler);
simcity.cLayerUIHandler.kBtnLayerToggleID = 186685937;
simcity.cLayerUIHandler.kBtnLayerToggleOnID = 231259683;
simcity.cLayerUIHandler.kBtnLayerToggleOffID = 231259684;
simcity.cLayerUIHandler.kBtnLayerRingToggleID = 186684633;
simcity.cLayerUIHandler.kWinLayerRingIconID = 183481955;
simcity.cLayerUIHandler.kPropertyLayerRingIconKey = 183481955;
simcity.cLayerUIHandler.kPropertyLayerLegendKey = 234967577;
simcity.cLayerUIHandler.kWinLegendContainer = 210171252;
simcity.cLayerUIHandler.kTxtLegendTitle = 164191353;
simcity.SelectLayerToggle = function (a, b) {
  if (a.GetControlID() === simcity.cLayerUIHandler.kBtnLayerToggleID) {
    var c = a.FindAnimationByID(231262089);
    c && c.Start(b ? scrui.cAnimation.kPlayForward : scrui.cAnimation.kPlayReverse)
  } else
    a.SetSelected(b)
};
simcity.cLayerUIHandler.prototype.Init = function () {};
simcity.cLayerUIHandler.prototype.HandleGameEvent = function () {};
simcity.cLayerUIHandler.prototype.HandleUIMessage = function (a, b, c) {
  switch (a) {
  case scrui.kMsgTypeButtonClicked:
    switch (b) {
    case simcity.cLayerUIHandler.kBtnLayerToggleID:
      0 !== c.mUserData && (!0 === c.mIsSelected ? this.ActivateLayer(c.mUserData) : this.DeactivateLayer());
      break;
    case simcity.cLayerUIHandler.kBtnLayerToggleOnID:
      0 !== c.mUserData && this.ActivateLayer(c.mUserData);
      break;
    case simcity.cLayerUIHandler.kBtnLayerToggleOffID:
      this.DeactivateLayer();
      break;
    case simcity.cLayerUIHandler.kBtnLayerRingToggleID:
      this.DeactivateLayer()
    }
  }
};
simcity.cLayerUIHandler.prototype.RegisterLayerButton = function (a) {
  scrui.Assert(-1 === this.mLayerButtons.indexOf(a), "double registration of layer button!");
  this.mLayerButtons.push(a);
  simcity.SelectLayerToggle(a, this.mCurrentLayerID === a.mUserData)
};
simcity.cLayerUIHandler.prototype.UnregisterLayerButton = function (a) {
  a = this.mLayerButtons.indexOf(a);
  scrui.Assert(-1 !== a, "layer button not found to unregister!");
  this.mLayerButtons.splice(a, 1)
};
simcity.cLayerUIHandler.prototype.IsLayerActive = function (a) {
  return this.mCurrentLayerID === a
};
simcity.cLayerUIHandler.prototype.ToggleLayer = function (a) {
  this.IsLayerActive(a) ? this.DeactivateLayer(a) : this.ActivateLayer(a)
};
simcity.cLayerUIHandler.prototype.ActivateLayer = function (a) {
  if (this.mCurrentLayerID !== a) {
    this.DeactivateLayer();
    scrui.PostGameCommand(scrui.BuildCommand([simcity.kCommandToggleLayer, a, !0]));
    this.mCurrentLayerID = a;
    for (var b = this.mLayerButtons.length, c = 0; c < b; ++c)
      this.mCurrentLayerID === this.mLayerButtons[c].mUserData && simcity.SelectLayerToggle(this.mLayerButtons[c], !0);
    var d = this,
    a = [scrui.BuildRequestQuery([simcity.kDataLayers, a, simcity.kDataLayerLegendKey]), scrui.BuildRequestQuery([simcity.kDataLayers,
          a, simcity.kDataName])];
    scrui.RequestGameData(a, function (a) {
      var b = a[0],
      a = a[1];
      if (null !== b && 0 !== b.instance) {
        var c = null,
        c = simcity.gGlobalUIHandler.mRegionViewUIHandler.mRootWindow.mIsVisible ? simcity.gGlobalUIHandler.mRegionViewUIHandler.mRootWindow.FindControlByID(simcity.kWinLegendContainer) : gUIManager.FindControlByID(simcity.cLayerUIHandler.kWinLegendContainer);
        d.mLegendLayout = gUIManager.LoadAndCacheLayout(scrui.PathFromResourceKey(b), c);
        d.mLegendLayout && (simcity.gGlobalUIHandler.mMissionUI.mMissionContainer.SetVisibility(!1),
          (b = d.mLegendLayout.FindControlByID(simcity.cLayerUIHandler.kTxtLegendTitle)) && b.SetLocaleText(scrui.LocaleStringFromLocaleProperty(a)))
      }
    })
  }
};
simcity.cLayerUIHandler.prototype.DeactivateLayer = function () {
  if (null !== this.mCurrentLayerID) {
    for (var a = this.mLayerButtons.length, b = 0; b < a; ++b)
      this.mCurrentLayerID === this.mLayerButtons[b].mUserData && simcity.SelectLayerToggle(this.mLayerButtons[b], !1);
    scrui.PostGameCommand(scrui.BuildCommand(["togglelayer", this.mCurrentLayerID, !1]));
    this.mCurrentLayerID = null
  }
  this.mLegendLayout && (simcity.gGlobalUIHandler.mRegionViewUIHandler.IsVisible() || simcity.gGlobalUIHandler.mMissionUI.mMissionContainer.SetVisibility(!0),
    this.mLegendLayout.DestroyControl(), this.mLegendLayout = null, gUIManager.FindControlByID(simcity.cLayerUIHandler.kWinLegendContainer))
};
simcity.cLayerUIHandler.prototype.GetCurrentActiveLayer = function () {
  return this.mCurrentLayerID
};
simcity.TextUtilities = {};
simcity.LocalizeSimoleons = function (a) {
  return 0 > a ? "-\u00a7" + scrui.LocalizeNumber(-a) : "\u00a7" + scrui.LocalizeNumber(a)
};
simcity.FormatFudgedPopulation = function (a) {
  a = simcity.GetRoundedFudgedPopulation(a);
  return scrui.LocalizeNumber(a)
};
simcity.FormatFudgedPopulation10 = function (a) {
  a = simcity.GetFudgedPopulation(a);
  a = 10 * Math.round(a / 10);
  return scrui.LocalizeNumber(a)
};
simcity.FormatMW = function (a) {
  return scrui.LocalizeNumber(Math.round(a / 1E3))
};
simcity.FormatKGal = function (a) {
  return scrui.LocalizeNumber(Math.round(a / 1E3))
};
simcity.FormatTons = function (a) {
  return scrui.LocalizeNumber(Math.round(a / 1E3))
};
simcity.FormatBarrels = function (a) {
  return scrui.LocalizeNumber(Math.round(a / 10))
};
simcity.FormatCrates = function (a) {
  return scrui.LocalizeNumber(Math.round(a / 10))
};
simcity.DailyTouristsAllowed = function (a) {
  return scrui.LocalizeNumber(12 * a)
};
simcity.InitializeTextUtilities = function () {
  scrui.gUIManager.mLocaleManager.SetValueFormatter("simoleons", simcity.LocalizeSimoleons);
  scrui.gUIManager.mLocaleManager.SetValueFormatter("numberFudged", simcity.FormatFudgedPopulation);
  scrui.gUIManager.mLocaleManager.SetValueFormatter("numberFudged10", simcity.FormatFudgedPopulation10);
  scrui.gUIManager.mLocaleManager.SetValueFormatter("mw", simcity.FormatMW);
  scrui.gUIManager.mLocaleManager.SetValueFormatter("kgal", simcity.FormatKGal);
  scrui.gUIManager.mLocaleManager.SetValueFormatter("tons",
    simcity.FormatTons);
  scrui.gUIManager.mLocaleManager.SetValueFormatter("barrels", simcity.FormatBarrels);
  scrui.gUIManager.mLocaleManager.SetValueFormatter("crates", simcity.FormatCrates);
  scrui.gUIManager.mLocaleManager.SetValueFormatter("dailyTouristsAllowed", simcity.DailyTouristsAllowed)
};
simcity.SpectatorUI = {};
simcity.cSpectatorUIHandler = function () {
  this.UIHandler = scrui.cUIHandler;
  this.UIHandler();
  this.mMayorAvatarTemplateContainerControl = this.mMayorNameTextControl = this.mCityNameTextControl = null;
  this.mCityInfoUpdated = !1
};
goog.inherits(simcity.cSpectatorUIHandler, scrui.cUIHandler);
simcity.cSpectatorUIHandler.kCityNameTextID = 239895826;
simcity.cSpectatorUIHandler.kMayorNameTextID = 239895836;
simcity.cSpectatorUIHandler.kMayorAvatarTemplateContainerID = 241607453;
simcity.cSpectatorUIHandler.kWinAvatarImage = 237907905;
simcity.cSpectatorUIHandler.kBtnAvatar = 239792063;
simcity.cSpectatorUIHandler.kWinAvatarOnlineHighlight = 239800634;
simcity.cSpectatorUIHandler.kWinAvatarAlert = 239807635;
simcity.cSpectatorUIHandler.prototype.Init = function (a) {
  scrui.Assert(null !== a);
  this.mParentControl = a;
  this.mLayout = gUIManager.LoadLayout("Layouts/SpectatorLayout.js", this.mParentControl);
  this.mLayout.SetPosition(a.mWidth / 2 - this.mLayout.mWidth / 2, 0);
  this.mCityNameTextControl = this.mLayout.FindControlByID(simcity.cSpectatorUIHandler.kCityNameTextID);
  this.mMayorNameTextControl = this.mLayout.FindControlByID(simcity.cSpectatorUIHandler.kMayorNameTextID);
  this.mMayorAvatarTemplateContainerControl = this.mLayout.FindControlByID(simcity.cSpectatorUIHandler.kMayorAvatarTemplateContainerID)
};
simcity.cSpectatorUIHandler.prototype.UpdateCityInfo = function () {
  var a = simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData.mPlayingBox;
  a.creator ? (this.mCityNameTextControl.SetRawText(a.name), this.mMayorNameTextControl.SetRawText(a.creator.screenName), simcity.gGlobalUIHandler.mAvatarManagerHandler.AddSubscription({
      playerID : a.creatorId,
      layoutInfo : this.mMayorAvatarTemplateContainerControl,
      isBoxClaimed : !0,
      isMyBox : !1,
      isCurrentBox : !1,
      showAlerts : !1,
      boxID : a.uid
    }), this.Show(), this.mCityInfoUpdated = !0) :
  this.Hide()
};
simcity.cSpectatorUIHandler.prototype.Update = function () {
  simcity.gGlobalUIHandler.mIsSpectatorMode && (this.mCityInfoUpdated || this.UpdateCityInfo())
};
simcity.cSpectatorUIHandler.prototype.Show = function () {
  this.mLayout.SetVisibility(!0)
};
simcity.cSpectatorUIHandler.prototype.Hide = function () {
  this.mLayout.SetVisibility(!1)
};
simcity.databindings.DataBindingsMissions = {};
simcity.kLayerroadRCIAlert = 51886653;
simcity.CreateMissionObjectives = function (a, b, c, d) {
  var e = a.objectiveContainer,
  f = 0;
  c.checkboxes = Array(b.length);
  c.objectiveTexts = Array(b.length);
  c.objectiveLayouts = Array(b.length);
  c.objectiveProgressBars = Array(b.length);
  c.currentObjectiveValues = Array(b.length);
  for (var g = 0, h = b.length; g < h; ++g) {
    var i = b[g],
    j = d ? scrui.PathFromResourceKey(d[g]) : "Layouts/Missions/MissionObjective.js",
    j = gUIManager.LoadLayout(j, e);
    j.index = g;
    c.objectiveLayouts[g] = j;
    j.SetPosition(j.mLeft, f, j.mWidth, j.mHeight);
    c.checkboxes[g] = 1 ===
      c.ignored[g] && !c.isTutorialMission ? j.FindControlByID(202394873) : j.FindControlByID(202394872);
    c.objectiveTexts[g] = j.FindControlByID(202394950);
    i.placeholder = i.placeholder ? i.placeholder : "Objective " + g;
    c.objectiveTexts[g].SetLocaleText(scrui.LocaleStringFromLocaleProperty(i));
    c.objectiveProgressBars[g] = j.FindControlByID(simcity.cMissionUI.kWinProgressBarObjective);
    c.isTutorialMission && !simcity.gGlobalUIHandler.mIsTutorialEnabled ? (0 == g && (a.miniTutorialText = a.FindControlByID(249418632), a.miniTutorialText &&
        (a.miniTutorialText.SetText(c.objectiveTexts[g].GetText()), f = c.objectiveTexts[g].GetTextHeight() + 5, f = Math.max(c.objectiveTexts[g].mHeight, f))), j.SetVisibility(!1)) : (i = c.objectiveTexts[g].GetTextHeight(), f += i + 5, f = Math.max(c.objectiveTexts[g].mHeight, f));
    j.checkBoxRoot = j.FindControlByID(202394851);
    j.blueFiller = j.FindControlByID(254584524)
  }
  a.objectiveWrapper = a.FindControlByID(202483941);
  a.objectiveWrapper.SetPosition(a.objectiveWrapper.mLeft, a.objectiveWrapper.mTop, a.objectiveWrapper.mWidth, a.objectiveWrapper.mHeight +
    f);
  a.focusArea = a.FindControlByID(249580137);
  a.focusArea && a.focusArea.SetPosition(a.focusArea.mLeft, a.focusArea.mTop, a.focusArea.mWidth, f + 10);
  a.statusBarFrame = a.FindControlByID(218717332);
  a.statusBarFrame && a.statusBarFrame.SetWindowImage("pledgeBadgePrgrsframe" + h + ".png");
  a.speechBubble = a.FindControlByID(213281054);
  a.speechBubble && a.speechBubble.SetPosition(a.speechBubble.mLeft, a.speechBubble.mTop, a.speechBubble.mWidth, f + 10)
};
simcity.TestMissionCompletion = function (a) {
  for (var b = 0, c = a.checkboxes.length; b < c; ++b)
    if (!simcity.IsObjectiveCompleteByIndex(b, a))
      return !1;
  a.completed = !0;
  a.layout.missionAnimData.quickShowDesired = !0;
  a.layout.missionAnimData.infoPauseComplete = !1;
  return !0
};
simcity.CompleteObjectivesFromTest = function (a, b, c) {
  for (var d = 0, e = b.length; d < e; ++d) {
    var f = b[d];
    f.hasOwnProperty("successTest") && f.successTest(a) && simcity.CompleteObjective(c, d, !0)
  }
  simcity.TestMissionCompletion(c)
};
simcity.CompleteObjectiveByID = function (a, b, c) {
  for (var d = 0, e = b.length; d < e; ++d) {
    var f = b[d];
    f.hasOwnProperty("id") && f.id === a && simcity.CompleteObjective(c, d, !0)
  }
  simcity.TestMissionCompletion(c)
};
simcity.IsObjectiveCompleteByIndex = function (a, b) {
  return b.checkboxes[a].mIsVisible
};
simcity.IsObjectiveCompleteByID = function (a, b, c) {
  for (var d = 0, e = b.length; d < e; ++d) {
    var f = b[d];
    if (f.hasOwnProperty("id") && f.id === a)
      return c.checkboxes[d].mIsVisible
  }
  scrui.Assert(!1, "failed to find objective with id: " + a);
  return !1
};
simcity.SetMissionHeading = function (a, b) {
  var c = a.FindControlByID(173289992),
  d = scrui.LocaleStringFromLocaleProperty(b);
  c.SetLocaleText(d)
};
simcity.SetMiniTutorialAsCompleted = function (a) {
  a.isTutorialMission && !simcity.gGlobalUIHandler.CheckMainTutorialActive() && (a = simcity.GetMiniTutorialDatabindingFromMissionID(a.fileNameKey)) && a.optionID && scrui.PostGameCommand(scrui.BuildCommand([simcity.kCommandSetAppProperty, a.optionID, 1]))
};
simcity.ValidateMiniTutorial = function (a) {
  if (!a)
    return !0;
  var b = [];
  simcity.AddSimpleQueries(b, a.queries);
  var c = [Object.keys(a.queries)],
  d = !1;
  simcity.RequestDataBindingDataSimple(b, c, function (b) {
    a.hasOwnProperty("validate") && a.validate(b[0]) && (d = !0)
  }, !0);
  return d
};
simcity.TestMiniTutorial = function (a) {
  var b = [];
  simcity.AddSimpleQueries(b, a.queries);
  var c = [Object.keys(a.queries)],
  d = !1;
  simcity.RequestDataBindingDataSimple(b, c, function (b) {
    a.hasOwnProperty("missionUnit") && (a.hasOwnProperty("optionID") && !simcity.CheckMiniTutorialCompleted(a.optionID) && a.hasOwnProperty("test") && a.test(b[0])) && (scrui.PostGameCommand(scrui.BuildCommand(["createUnit", a.missionUnit])), d = !0)
  }, !0);
  return d
};
simcity.CreateMiniTutorials = function () {
  for (var a in simcity.MiniTutorialDatabindings)
    if (simcity.TestMiniTutorial(simcity.MiniTutorialDatabindings[a]))
      return simcity.gGlobalUIHandler.mMissionUI.mTimeSinceLastMiniTutorialUpdate = 6E4, !0
};
simcity.CreateDLCMiniTutorials = function () {
  for (var a in simcity.DLCMiniTutorialDatabindings)
    if (simcity.TestMiniTutorial(simcity.DLCMiniTutorialDatabindings[a]))
      return simcity.gGlobalUIHandler.mMissionUI.mTimeSinceLastMiniTutorialUpdate = 6E4, !0
};
simcity.GetMiniTutorialDatabindingFromMissionID = function (a) {
  for (var b in simcity.MiniTutorialDatabindings) {
    var c = simcity.MiniTutorialDatabindings[b];
    if (c.missionUnit == a)
      return c
  }
  return null
};
simcity.CheckMiniTutorialCompleted = function (a) {
  return 1 == simcity.CheckProperty(a)
};
simcity.ResetMiniTutorials = function () {
  for (var a in simcity.MiniTutorialDatabindings) {
    var b = simcity.MiniTutorialDatabindings[a];
    if (b && b.optionID && (scrui.PostGameCommand(scrui.BuildCommand([simcity.kCommandSetAppProperty, b.optionID, 0])), b = null, b = simcity.gGlobalUIHandler ? simcity.gGlobalUIHandler.mSettingsUIHandler : simcity.gOptionsUIHandler.mSettingsUIHandler)) {
      var c = b.mSettingsUILayout.FindControlByID(simcity.cSettingsUIHandler.kTextConfirm),
      d = new scrui.cLocaleString("Settings.json", "0x0f121fad");
      c.SetLocaleText(d);
      b.mConfirmWindow.FindControlByID(simcity.cSettingsUIHandler.kBtnIDConfirmYes).SetVisibility(!1);
      b.mConfirmWindow.FindControlByID(simcity.cSettingsUIHandler.kBtnIDConfirmNo).SetVisibility(!1);
      b.mConfirmWindow.FindControlByID(simcity.cSettingsUIHandler.kBtnIDConfirmOkay).SetVisibility(!0);
      b.mMainWindow.SetVisibility(!1);
      b.mConfirmWindow.SetVisibility(!0)
    }
  }
};
simcity.DLCMiniTutorialDatabindings = {
  DLC_RomanCasino : {
    missionUnit : scrui.IDFromName("MSTutorialDLC_RomanLuckCasino"),
    optionID : scrui.IDFromName("tutorial_MSTutorialDLC_RomanLuckCasino"),
    queries : {
      isMissionActive : [simcity.kDataBinAmount, scrui.IDFromName("GlobalMission_MSTutorialDLC_RomanLuckCasino")],
      DLC_RomanCasino : [simcity.kDataBinAmount, simcity.kResourceIDDLC_RomanCasino]
    },
    test : function (a) {
      return !a ? !1 : 0 == a.isMissionActive && this.validate(a)
    },
    validate : function (a) {
      return !a ? !1 : 1 == a.DLC_RomanCasino
    }
  },
  DLC_HeroesAndVillains : {
    missionUnit : scrui.IDFromName("MSTutorialDLC_HeroesAndVillains"),
    optionID : scrui.IDFromName("tutorial_MSTutorialDLC_HeroesAndVillains"),
    queries : {
      isMissionActive : [simcity.kDataBinAmount, scrui.IDFromName("GlobalMission_MSTutorialDLC_HeroesAndVillains")],
      DLC_HeroesAndVillains : [simcity.kDataBinAmount, simcity.kResourceIDHeroesAndVillains]
    },
    test : function (a) {
      return !a ? !1 : 0 == a.isMissionActive && this.validate(a)
    },
    validate : function (a) {
      return !a ? !1 : 1 == a.DLC_HeroesAndVillains
    }
  },
  DLC_3CitySets : {
    missionUnit : scrui.IDFromName("MSTutorialDLC_3CitySets"),
    optionID : scrui.IDFromName("tutorial_MSTutorialDLC_3CitySets"),
    queries : {
      isMissionActive : [simcity.kDataBinAmount, scrui.IDFromName("GlobalMission_MSTutorialDLC_3CitySets")],
      DLC_Berlin : [simcity.kDataBinAmount, simcity.kResourceIDBerlin],
      DLC_London : [simcity.kDataBinAmount, simcity.kResourceIDLondon],
      DLC_Paris : [simcity.kDataBinAmount, simcity.kResourceIDParis]
    },
    test : function (a) {
      return !a || simcity.CheckMiniTutorialCompleted(simcity.DLCMiniTutorialDatabindings.DLC_London.optionID) || simcity.CheckMiniTutorialCompleted(simcity.DLCMiniTutorialDatabindings.DLC_Berlin.optionID) ||
      simcity.CheckMiniTutorialCompleted(simcity.DLCMiniTutorialDatabindings.DLC_Paris.optionID) ? !1 : 0 == a.isMissionActive && this.validate(a)
    },
    validate : function (a) {
      return !a ? !1 : 1 == a.DLC_Berlin && 1 == a.DLC_London && 1 == a.DLC_Paris
    }
  },
  DLC_London : {
    missionUnit : scrui.IDFromName("MSTutorialDLC_London"),
    optionID : scrui.IDFromName("tutorial_MSTutorialDLC_London"),
    queries : {
      isMissionActive : [simcity.kDataBinAmount, scrui.IDFromName("GlobalMission_MSTutorialDLC_London")],
      DLC_London : [simcity.kDataBinAmount, simcity.kResourceIDLondon]
    },
    test : function (a) {
      return !a || simcity.CheckMiniTutorialCompleted(simcity.DLCMiniTutorialDatabindings.DLC_3CitySets.optionID) ? !1 : 0 == a.isMissionActive && this.validate(a)
    },
    validate : function (a) {
      return !a ? !1 : 1 == a.DLC_London
    }
  },
  DLC_Berlin : {
    missionUnit : scrui.IDFromName("MSTutorialDLC_Berlin"),
    optionID : scrui.IDFromName("tutorial_MSTutorialDLC_Berlin"),
    queries : {
      isMissionActive : [simcity.kDataBinAmount, scrui.IDFromName("GlobalMission_MSTutorialDLC_Berlin")],
      DLC_Berlin : [simcity.kDataBinAmount, simcity.kResourceIDBerlin]
    },
    test : function (a) {
      return !a || simcity.CheckMiniTutorialCompleted(simcity.DLCMiniTutorialDatabindings.DLC_3CitySets.optionID) ? !1 : 0 == a.isMissionActive && this.validate(a)
    },
    validate : function (a) {
      return !a ? !1 : 1 == a.DLC_Berlin
    }
  },
  DLC_Paris : {
    missionUnit : scrui.IDFromName("MSTutorialDLC_Paris"),
    optionID : scrui.IDFromName("tutorial_MSTutorialDLC_Paris"),
    queries : {
      isMissionActive : [simcity.kDataBinAmount, scrui.IDFromName("GlobalMission_MSTutorialDLC_Paris")],
      DLC_Paris : [simcity.kDataBinAmount, simcity.kResourceIDParis]
    },
    test : function (a) {
      return !a || simcity.CheckMiniTutorialCompleted(simcity.DLCMiniTutorialDatabindings.DLC_3CitySets.optionID) ? !1 : 0 == a.isMissionActive && this.validate(a)
    },
    validate : function (a) {
      return !a ? !1 : 1 == a.DLC_Paris
    }
  }
};
simcity.MiniTutorialDatabindings = {
  DLC_HeroesAndVillains : simcity.DLCMiniTutorialDatabindings.DLC_HeroesAndVillains,
  DLC_RomanCasino : simcity.DLCMiniTutorialDatabindings.DLC_RomanCasino,
  DLC_3CitySets : simcity.DLCMiniTutorialDatabindings.DLC_3CitySets,
  DLC_Berlin : simcity.DLCMiniTutorialDatabindings.DLC_Berlin,
  DLC_Paris : simcity.DLCMiniTutorialDatabindings.DLC_Paris,
  DLC_London : simcity.DLCMiniTutorialDatabindings.DLC_London,
  MyFirstCity : {
    missionUnit : scrui.IDFromName("MSTutorialMyFirstCity"),
    optionID : scrui.IDFromName("tutorial_MSTutorialMyFirstCity"),
    queries : {
      isMissionActive : [simcity.kDataBinAmount, scrui.IDFromName("GlobalMission_MSTutorialMyFirstCity")],
      StartMission : [simcity.kDataBinAmount, scrui.IDFromName("GlobalMission_MSCivicGettingStarted")],
      NumberOfConnections : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfConnections],
      TutorialEnabled : [simcity.kDataBinAmount, simcity.kResourceIDTutorialEnabled]
    },
    test : function (a) {
      return !a ? !1 : 0 == a.isMissionActive && 1 == a.StartMission && 0 == a.NumberOfConnections && 0 == a.TutorialEnabled && 0 < simcity.gGlobalUIHandler.mMissionUI.mSimMissions.length
    },
    validate : function (a) {
      return !a ? !1 : !0
    }
  },
  Happiness : {
    missionUnit : scrui.IDFromName("MSTutorialHappiness"),
    optionID : scrui.IDFromName("tutorial_MSTutorialHappiness"),
    queries : {
      isMissionActive : [simcity.kDataBinAmount, 1278557038],
      MayorRating : [simcity.kDataBinAmount, simcity.kResourceIDHappinessGlobals_MayorRating],
      TotalResidential : [simcity.kDataBinAmount, simcity.kResourceIDTotalResidential],
      ResidentialShopperW1 : [simcity.kDataBinAmount, simcity.kResourceIDResidentialShopperW1],
      InjuryGlobal : [simcity.kDataBinAmount,
        simcity.kResourceIDInjuryGlobal]
    },
    test : function (a) {
      return !a ? !1 : 0 == a.isMissionActive && this.validate(a)
    },
    validate : function (a) {
      return !a ? !1 : 0 < a.TotalResidential && (0 < a.ResidentialShopperW1 && 0 < a.InjuryGlobal) && (2E3 < a.TotalResidential || 45 > a.MayorRating)
    }
  },
  LandValue : {
    missionUnit : scrui.IDFromName("MSTutorialLandValue"),
    optionID : scrui.IDFromName("tutorial_MSTutorialLandValue"),
    queries : {
      isMissionActive : [simcity.kDataBinAmount, scrui.IDFromName("GlobalMission_MSTutorialLandValue")],
      RW2D1 : [simcity.kDataBinAmount,
        simcity.kResourceIDRW2D1],
      CW2D1 : [simcity.kDataBinAmount, simcity.kResourceIDCW2D1]
    },
    test : function (a) {
      return !a ? !1 : 0 == a.isMissionActive && this.validate(a)
    },
    validate : function (a) {
      return !a ? !1 : 0 < a.RW2D1 || 5 < a.CW2D1
    }
  },
  Budget : {
    missionUnit : scrui.IDFromName("MSTutorialBudgetUI"),
    optionID : scrui.IDFromName("tutorial_MSTutorialBudgetUI"),
    queries : {
      isMissionActive : [simcity.kDataBinAmount, scrui.IDFromName("GlobalMission_MSTutorialBudgetUI")],
      NumberOfToys : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfToys],
      HQ_CityHall_Built : [simcity.kDataBinAmount,
        simcity.kResourceIDHQ_CityHall_Built]
    },
    test : function (a) {
      return !a ? !1 : 0 == a.isMissionActive && this.validate(a)
    },
    validate : function (a) {
      return !a ? !1 : 4 < a.NumberOfToys && 0 < a.HQ_CityHall_Built
    }
  },
  Density : {
    missionUnit : scrui.IDFromName("MSTutorialDensity"),
    optionID : scrui.IDFromName("tutorial_MSTutorialDensity"),
    queries : {
      isMissionActive : [simcity.kDataBinAmount, scrui.IDFromName("GlobalMission_MSTutorialDensity")],
      RW1D2 : [simcity.kDataBinAmount, simcity.kResourceIDRW1D2],
      RW2D2 : [simcity.kDataBinAmount, simcity.kResourceIDRW2D2],
      CW1D2 : [simcity.kDataBinAmount, simcity.kResourceIDCW1D2],
      CW2D2 : [simcity.kDataBinAmount, simcity.kResourceIDCW2D2]
    },
    test : function (a) {
      return !a ? !1 : 0 == a.isMissionActive && this.validate(a)
    },
    validate : function (a) {
      return !a ? !1 : 0 < a.RW1D2 || 0 < a.RW2D2 || 0 < a.CW1D2 || 0 < a.CW2D2
    }
  },
  RoadUpgrade : {
    missionUnit : scrui.IDFromName("MSTutorialRoadUpgrades"),
    optionID : scrui.IDFromName("tutorial_MSTutorialRoadUpgrades"),
    queries : {
      isMissionActive : [simcity.kDataBinAmount, scrui.IDFromName("GlobalMission_MSTutorialRoadUpgrades")],
      TotalResidential : [simcity.kDataBinAmount,
        simcity.kResourceIDTotalResidential],
      layerCounts : [simcity.kDataLayers, simcity.kLayerroadRCIAlert, simcity.kDataCount]
    },
    test : function (a) {
      return !a || simcity.gGlobalUIHandler.mIsDemo ? !1 : 0 == a.isMissionActive && this.validate(a)
    },
    validate : function (a) {
      if (!a)
        return !1;
      var b = a.layerCounts[simcity.Roads.kAlertTypeUpgradeRoads];
      return 1E3 < a.TotalResidential && 0 < b
    }
  },
  ClaimCity : {
    missionUnit : scrui.IDFromName("MSTutorialClaimCity"),
    optionID : scrui.IDFromName("tutorial_MSTutorialClaimCity"),
    queries : {
      isMissionActive : [simcity.kDataBinAmount,
        scrui.IDFromName("GlobalMission_MSTutorialClaimCity")],
      TotalResidential : [simcity.kDataBinAmount, simcity.kResourceIDTotalResidential]
    },
    test : function (a) {
      return !a || !simcity.gGlobalUIHandler.mRegionViewUIHandler || simcity.gGlobalUIHandler.mIsDemo ? !1 : 0 == a.isMissionActive && this.validate(a)
    },
    validate : function (a) {
      return !a || !simcity.gGlobalUIHandler.mRegionViewUIHandler ? !1 : 3E3 < a.TotalResidential && 0 < simcity.gGlobalUIHandler.mRegionViewUIHandler.TotalUnclaimedBoxes()
    }
  },
  MassTransit : {
    missionUnit : scrui.IDFromName("MSTutorialRegionMassTranist"),
    optionID : scrui.IDFromName("tutorial_MSTutorialRegionMassTranist"),
    queries : {
      isMissionActive : [simcity.kDataBinAmount, scrui.IDFromName("GlobalMission_MSTutorialRegionMassTranist")],
      TotalResidential : [simcity.kDataBinAmount, simcity.kResourceIDTotalResidential]
    },
    test : function (a) {
      return !a || !simcity.gGlobalUIHandler.mRegionViewUIHandler || simcity.gGlobalUIHandler.mIsDemo ? !1 : 0 == a.isMissionActive && this.validate(a)
    },
    validate : function (a) {
      return !a || !simcity.gGlobalUIHandler.mRegionViewUIHandler ? !1 : 5E3 < a.TotalResidential &&
      0 < simcity.gGlobalUIHandler.mRegionViewUIHandler.TotalActiveNeighbors()
    }
  },
  TradingSims : {
    missionUnit : scrui.IDFromName("MSTutorialTradingSims"),
    optionID : scrui.IDFromName("tutorial_MSTutorialTradingSims"),
    queries : {
      isMissionActive : [simcity.kDataBinAmount, scrui.IDFromName("GlobalMission_MSTutorialTradingSims")],
      TotalResidential : [simcity.kDataBinAmount, simcity.kResourceIDTotalResidential]
    },
    test : function (a) {
      if (!a || !simcity.gGlobalUIHandler.mRegionViewUIHandler || simcity.gGlobalUIHandler.mIsDemo)
        return !1;
      var b =
        !1,
      c = simcity.gGlobalUIHandler.mRegionViewUIHandler;
      if (c.mRegionData && (c.mRegionData.mBoxes && c.mRegionData.mCityTradeData) && (c = c.mRegionData.mCityTradeData[c.mRegionData.mPlayingBox.uid])) {
        Object.keys(c.connections);
        for (var d in c.connections) {
          var e = c.connections[d];
          if (e && e.connectionData && (0 < e.connectionData.commercial.data.excessShoppersW1 || 0 < e.connectionData.commercial.data.excessShoppersW2 || 0 < e.connectionData.commercial.data.excessShoppersW3 || 0 < e.connectionData.commercial.data.excessItemsW1 || 0 <
              e.connectionData.commercial.data.excessItemsW2 || 0 < e.connectionData.commercial.data.excessItemsW3 || 0 < e.connectionData.residential.data.excessJobsW1 || 0 < e.connectionData.residential.data.excessJobsW2 || 0 < e.connectionData.residential.data.excessJobsW3 || 0 < e.connectionData.residential.data.excessWorkersW1 || 0 < e.connectionData.residential.data.excessWorkersW2 || 0 < e.connectionData.residential.data.excessWorkersW3 || 0 < e.connectionData.education.data.excessDesksE2 || 0 < e.connectionData.education.data.excessDesksE3 ||
              0 < e.connectionData.education.data.excessStudentsE2 || 0 < e.connectionData.education.data.excessStudentsE3))
            b = !0
        }
      }
      return 0 == a.isMissionActive && b && 0 < simcity.gGlobalUIHandler.mRegionViewUIHandler.TotalActiveNeighbors() && 4E3 < a.TotalResidential
    },
    validate : function (a) {
      return !a || !simcity.gGlobalUIHandler.mRegionViewUIHandler ? !1 : 0 < simcity.gGlobalUIHandler.mRegionViewUIHandler.TotalActiveNeighbors()
    }
  },
  TradingPower : {
    missionUnit : scrui.IDFromName("MSTutorialTradingPower"),
    optionID : scrui.IDFromName("tutorial_MSTutorialTradingPower"),
    queries : {
      isMissionActive : [simcity.kDataBinAmount, scrui.IDFromName("GlobalMission_MSTutorialTradingPower")]
    },
    test : function (a) {
      return !a || !simcity.gGlobalUIHandler.mRegionViewUIHandler || simcity.gGlobalUIHandler.mIsDemo || simcity.CheckMiniTutorialCompleted(simcity.MiniTutorialDatabindings.TradingWater.optionID) || simcity.CheckMiniTutorialCompleted(simcity.MiniTutorialDatabindings.TradingSewage.optionID) ? !1 : 0 == a.isMissionActive && this.validate(a)
    },
    validate : function (a) {
      if (!a || !simcity.gGlobalUIHandler.mRegionViewUIHandler)
        return !1;
      a = !1;
      simcity.RegionalAdvisors[simcity.kRegionDataLayer_Power] && (simcity.RegionalAdvisors[simcity.kRegionDataLayer_Power].alerts && simcity.RegionalAdvisors[simcity.kRegionDataLayer_Power].alerts[simcity.kRegionAdvisorText.power.needed] && 0 < simcity.RegionalAdvisors[simcity.kRegionDataLayer_Power].alerts[simcity.kRegionAdvisorText.power.needed].length) && (a = !0);
      return a && 0 < simcity.gGlobalUIHandler.mRegionViewUIHandler.TotalActiveNeighbors()
    }
  },
  TradingWater : {
    missionUnit : scrui.IDFromName("MSTutorialTradingWater"),
    optionID : scrui.IDFromName("tutorial_MSTutorialTradingWater"),
    queries : {
      isMissionActive : [simcity.kDataBinAmount, scrui.IDFromName("GlobalMission_MSTutorialTradingWater")]
    },
    test : function (a) {
      return !a || !simcity.gGlobalUIHandler.mRegionViewUIHandler || simcity.gGlobalUIHandler.mIsDemo || simcity.CheckMiniTutorialCompleted(simcity.MiniTutorialDatabindings.TradingPower.optionID) || simcity.CheckMiniTutorialCompleted(simcity.MiniTutorialDatabindings.TradingSewage.optionID) ? !1 : 0 == a.isMissionActive && this.validate(a)
    },
    validate : function (a) {
      if (!a || !simcity.gGlobalUIHandler.mRegionViewUIHandler)
        return !1;
      a = !1;
      simcity.RegionalAdvisors[simcity.kRegionDataLayer_Water] && (simcity.RegionalAdvisors[simcity.kRegionDataLayer_Water].alerts && simcity.RegionalAdvisors[simcity.kRegionDataLayer_Water].alerts[simcity.kRegionAdvisorText.water.needed] && 0 < simcity.RegionalAdvisors[simcity.kRegionDataLayer_Water].alerts[simcity.kRegionAdvisorText.water.needed].length) && (a = !0);
      return a && 0 < simcity.gGlobalUIHandler.mRegionViewUIHandler.TotalActiveNeighbors()
    }
  },
  TradingSewage : {
    missionUnit : scrui.IDFromName("MSTutorialTradingSewage"),
    optionID : scrui.IDFromName("tutorial_MSTutorialTradingSewage"),
    queries : {
      isMissionActive : [simcity.kDataBinAmount, scrui.IDFromName("GlobalMission_MSTutorialTradingSewage")]
    },
    test : function (a) {
      return !a || !simcity.gGlobalUIHandler.mRegionViewUIHandler || simcity.gGlobalUIHandler.mIsDemo || simcity.CheckMiniTutorialCompleted(simcity.MiniTutorialDatabindings.TradingWater.optionID) || simcity.CheckMiniTutorialCompleted(simcity.MiniTutorialDatabindings.TradingPower.optionID) ?
      !1 : 0 == a.isMissionActive && this.validate(a)
    },
    validate : function (a) {
      if (!a || !simcity.gGlobalUIHandler.mRegionViewUIHandler)
        return !1;
      a = !1;
      simcity.RegionalAdvisors[simcity.kRegionDataLayer_Sewage] && (simcity.RegionalAdvisors[simcity.kRegionDataLayer_Sewage].alerts && simcity.RegionalAdvisors[simcity.kRegionDataLayer_Sewage].alerts[simcity.kRegionAdvisorText.sewage.needed] && 0 < simcity.RegionalAdvisors[simcity.kRegionDataLayer_Sewage].alerts[simcity.kRegionAdvisorText.sewage.needed].length) && (a = !0);
      return a &&
      0 < simcity.gGlobalUIHandler.mRegionViewUIHandler.TotalActiveNeighbors()
    }
  },
  SharingGarbage : {
    missionUnit : scrui.IDFromName("MSTutorialSharingGarbageServices"),
    optionID : scrui.IDFromName("tutorial_MSTutorialSharingGarbageServices"),
    queries : {
      isMissionActive : [simcity.kDataBinAmount, scrui.IDFromName("GlobalMission_MSTutorialSharingGarbageServices")],
      TotalResidential : [simcity.kDataBinAmount, simcity.kResourceIDTotalResidential],
      NumberOfDumpDocks : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfDumpDocks]
    },
    test : function (a) {
      return !a || !simcity.gGlobalUIHandler.mRegionViewUIHandler || simcity.gGlobalUIHandler.mIsDemo || simcity.CheckMiniTutorialCompleted(simcity.MiniTutorialDatabindings.SharingFire.optionID) || simcity.CheckMiniTutorialCompleted(simcity.MiniTutorialDatabindings.SharingHealth.optionID) || simcity.CheckMiniTutorialCompleted(simcity.MiniTutorialDatabindings.SharingPolice.optionID) ? !1 : 0 == a.isMissionActive && this.validate(a)
    },
    validate : function (a) {
      return !a || !simcity.gGlobalUIHandler.mRegionViewUIHandler ?
      !1 : 0 < a.NumberOfDumpDocks && 0 < simcity.gGlobalUIHandler.mRegionViewUIHandler.TotalActiveNeighbors()
    }
  },
  SharingFire : {
    missionUnit : scrui.IDFromName("MSTutorialSharingFireServices"),
    optionID : scrui.IDFromName("tutorial_MSTutorialSharingFireServices"),
    queries : {
      isMissionActive : [simcity.kDataBinAmount, scrui.IDFromName("GlobalMission_MSTutorialSharingFireServices")],
      TotalResidential : [simcity.kDataBinAmount, simcity.kResourceIDTotalResidential],
      NumberOfFireStations : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfFireStations]
    },
    test : function (a) {
      return !a || !simcity.gGlobalUIHandler.mRegionViewUIHandler || simcity.gGlobalUIHandler.mIsDemo || simcity.CheckMiniTutorialCompleted(simcity.MiniTutorialDatabindings.SharingGarbage.optionID) || simcity.CheckMiniTutorialCompleted(simcity.MiniTutorialDatabindings.SharingHealth.optionID) || simcity.CheckMiniTutorialCompleted(simcity.MiniTutorialDatabindings.SharingPolice.optionID) ? !1 : 0 == a.isMissionActive && this.validate(a)
    },
    validate : function (a) {
      return !a || !simcity.gGlobalUIHandler.mRegionViewUIHandler ?
      !1 : 0 < a.NumberOfFireStations && 0 < simcity.gGlobalUIHandler.mRegionViewUIHandler.TotalActiveNeighbors()
    }
  },
  SharingHealth : {
    missionUnit : scrui.IDFromName("MSTutorialSharingHealthServices"),
    optionID : scrui.IDFromName("tutorial_MSTutorialSharingHealthServices"),
    queries : {
      isMissionActive : [simcity.kDataBinAmount, scrui.IDFromName("GlobalMission_MSTutorialSharingHealthServices")],
      TotalResidential : [simcity.kDataBinAmount, simcity.kResourceIDTotalResidential],
      HospitalsBuilt : [simcity.kDataBinAmount, simcity.kResourceIDHospitalsBuilt]
    },
    test : function (a) {
      return !a || !simcity.gGlobalUIHandler.mRegionViewUIHandler || simcity.gGlobalUIHandler.mIsDemo || simcity.CheckMiniTutorialCompleted(simcity.MiniTutorialDatabindings.SharingGarbage.optionID) || simcity.CheckMiniTutorialCompleted(simcity.MiniTutorialDatabindings.SharingFire.optionID) || simcity.CheckMiniTutorialCompleted(simcity.MiniTutorialDatabindings.SharingPolice.optionID) ? !1 : 0 == a.isMissionActive && this.validate(a)
    },
    validate : function (a) {
      return !a || !simcity.gGlobalUIHandler.mRegionViewUIHandler ?
      !1 : 0 < a.HospitalsBuilt && 0 < simcity.gGlobalUIHandler.mRegionViewUIHandler.TotalActiveNeighbors()
    }
  },
  SharingPolice : {
    missionUnit : scrui.IDFromName("MSTutorialSharingPoliceServices"),
    optionID : scrui.IDFromName("tutorial_MSTutorialSharingPoliceServices"),
    queries : {
      isMissionActive : [simcity.kDataBinAmount, scrui.IDFromName("GlobalMission_MSTutorialSharingPoliceServices")],
      TotalResidential : [simcity.kDataBinAmount, simcity.kResourceIDTotalResidential],
      PoliceStationsBuilt : [simcity.kDataBinAmount, simcity.kResourceIDPoliceStationsBuilt]
    },
    test : function (a) {
      return !a || !simcity.gGlobalUIHandler.mRegionViewUIHandler || simcity.gGlobalUIHandler.mIsDemo || simcity.CheckMiniTutorialCompleted(simcity.MiniTutorialDatabindings.SharingFire.optionID) || simcity.CheckMiniTutorialCompleted(simcity.MiniTutorialDatabindings.SharingHealth.optionID) || simcity.CheckMiniTutorialCompleted(simcity.MiniTutorialDatabindings.SharingGarbage.optionID) ? !1 : 0 == a.isMissionActive && this.validate(a)
    },
    validate : function (a) {
      return !a || !simcity.gGlobalUIHandler.mRegionViewUIHandler ?
      !1 : 0 < a.PoliceStationsBuilt && 0 < simcity.gGlobalUIHandler.mRegionViewUIHandler.TotalActiveNeighbors()
    }
  },
  GiftingCoal : {
    missionUnit : scrui.IDFromName("MSTutorialGiftingCoal"),
    optionID : scrui.IDFromName("tutorial_MSTutorialGiftingCoal"),
    queries : {
      isMissionActive : [simcity.kDataBinAmount, scrui.IDFromName("GlobalMission_MSTutorialGiftingCoal")]
    },
    test : function (a) {
      return !a || !simcity.gGlobalUIHandler.mRegionViewUIHandler || simcity.gGlobalUIHandler.mIsDemo || simcity.CheckMiniTutorialCompleted(simcity.MiniTutorialDatabindings.GiftingOil.optionID) ||
      simcity.CheckMiniTutorialCompleted(simcity.MiniTutorialDatabindings.GiftingSimoleons.optionID) ? !1 : 0 == a.isMissionActive && this.validate(a)
    },
    validate : function (a) {
      if (!a || !simcity.gGlobalUIHandler.mRegionViewUIHandler)
        return !1;
      a = !1;
      simcity.RegionalAdvisors[simcity.kRegionDataLayer_ResourceGifting] && (simcity.RegionalAdvisors[simcity.kRegionDataLayer_ResourceGifting].alerts && simcity.RegionalAdvisors[simcity.kRegionDataLayer_ResourceGifting].alerts[simcity.kRegionAdvisorText.gifting.neighborNeedCoal] && 0 <
        simcity.RegionalAdvisors[simcity.kRegionDataLayer_ResourceGifting].alerts[simcity.kRegionAdvisorText.gifting.neighborNeedCoal].length) && (a = !0);
      return a && 0 < simcity.gGlobalUIHandler.mRegionViewUIHandler.TotalActiveNeighbors()
    }
  },
  GiftingOil : {
    missionUnit : scrui.IDFromName("MSTutorialGiftingOil"),
    optionID : scrui.IDFromName("tutorial_MSTutorialGiftingOil"),
    queries : {
      isMissionActive : [simcity.kDataBinAmount, scrui.IDFromName("GlobalMission_MSTutorialGiftingOil")]
    },
    test : function (a) {
      return !a || !simcity.gGlobalUIHandler.mRegionViewUIHandler ||
      simcity.gGlobalUIHandler.mIsDemo || simcity.CheckMiniTutorialCompleted(simcity.MiniTutorialDatabindings.GiftingCoal.optionID) || simcity.CheckMiniTutorialCompleted(simcity.MiniTutorialDatabindings.GiftingSimoleons.optionID) ? !1 : 0 == a.isMissionActive && this.validate(a)
    },
    validate : function (a) {
      if (!a || !simcity.gGlobalUIHandler.mRegionViewUIHandler)
        return !1;
      a = !1;
      simcity.RegionalAdvisors[simcity.kRegionDataLayer_ResourceGifting] && (simcity.RegionalAdvisors[simcity.kRegionDataLayer_ResourceGifting].alerts && simcity.RegionalAdvisors[simcity.kRegionDataLayer_ResourceGifting].alerts[simcity.kRegionAdvisorText.gifting.neighborNeedOilCrude] &&
        0 < simcity.RegionalAdvisors[simcity.kRegionDataLayer_ResourceGifting].alerts[simcity.kRegionAdvisorText.gifting.neighborNeedOilCrude].length) && (a = !0);
      return a && 0 < simcity.gGlobalUIHandler.mRegionViewUIHandler.TotalActiveNeighbors()
    }
  },
  GiftingSimoleons : {
    missionUnit : scrui.IDFromName("MSTutorialGiftingSimoleons"),
    optionID : scrui.IDFromName("tutorial_MSTutorialGiftingSimoleons"),
    queries : {
      isMissionActive : [simcity.kDataBinAmount, scrui.IDFromName("GlobalMission_MSTutorialGiftingSimoleons")],
      Simoleons : [simcity.kDataBinAmount,
        simcity.kResourceIDSimoleons]
    },
    test : function (a) {
      return !a || !simcity.gGlobalUIHandler.mRegionViewUIHandler || simcity.gGlobalUIHandler.mIsDemo || simcity.CheckMiniTutorialCompleted(simcity.MiniTutorialDatabindings.GiftingOil.optionID) || simcity.CheckMiniTutorialCompleted(simcity.MiniTutorialDatabindings.GiftingCoal.optionID) ? !1 : 0 == a.isMissionActive && this.validate(a)
    },
    validate : function (a) {
      if (!a || !simcity.gGlobalUIHandler.mRegionViewUIHandler)
        return !1;
      var b = !1;
      simcity.RegionalAdvisors[simcity.kRegionDataLayer_ResourceGifting] &&
      (simcity.RegionalAdvisors[simcity.kRegionDataLayer_ResourceGifting].alerts && simcity.RegionalAdvisors[simcity.kRegionDataLayer_ResourceGifting].alerts[simcity.kRegionAdvisorText.gifting.neighborBankrupt] && 0 < simcity.RegionalAdvisors[simcity.kRegionDataLayer_ResourceGifting].alerts[simcity.kRegionAdvisorText.gifting.neighborBankrupt].length) && (b = !0);
      return b && 1E5 < a.Simoleons && 0 < simcity.gGlobalUIHandler.mRegionViewUIHandler.TotalActiveNeighbors()
    }
  },
  GreatWorks : {
    missionUnit : scrui.IDFromName("MSTutorialMiniGreatWorks"),
    optionID : scrui.IDFromName("tutorial_MSTutorialMiniGreatWorks"),
    queries : {
      isMissionActive : [simcity.kDataBinAmount, scrui.IDFromName("GlobalMission_MSTutorialMiniGreatWorks")],
      RegionArcologyUnlocked : [simcity.kDataBinAmount, simcity.kResourceIDRegionArcologyUnlocked],
      SpaceCenterUnlocked : [simcity.kDataBinAmount, simcity.kResourceIDSpaceCenterUnlocked],
      InternationalAirportUnlocked : [simcity.kDataBinAmount, simcity.kResourceIDInternationalAirportUnlocked],
      RegionSolarPlantUnlocked : [simcity.kDataBinAmount, simcity.kResourceIDRegionSolarPlantUnlocked],
      NumberOfGreatWorksAvailable : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfGreatWorksAvailable],
      Simoleons : [simcity.kDataBinAmount, simcity.kResourceIDSimoleons]
    },
    test : function (a) {
      return !a || simcity.gGlobalUIHandler.mIsDemo ? !1 : 0 == a.isMissionActive && this.validate(a)
    },
    validate : function (a) {
      return !a || !simcity.gGlobalUIHandler.mRegionViewUIHandler ? !1 : 1E6 < a.Simoleons && 0 < a.NumberOfGreatWorksAvailable && (0 < a.RegionArcologyUnlocked || 0 < a.SpaceCenterUnlocked || 0 < a.InternationalAirportUnlocked || 0 < a.RegionSolarPlantUnlocked)
    }
  },
  CoalMinePlacement : {
    missionUnit : scrui.IDFromName("MSTutorialCoalMinePlacement"),
    optionID : scrui.IDFromName("tutorial_MSTutorialCoalMinePlacement"),
    queries : {
      isMissionActive : [simcity.kDataBinAmount, scrui.IDFromName("GlobalMission_MSTutorialCoalMinePlacement")],
      Specialization_Metals : [simcity.kDataBinAmount, simcity.kResourceIDSpecialization_Metals],
      Specialization_Mission : [simcity.kDataBinAmount, scrui.IDFromName("GlobalMission_MSBusinessMetalsCoalTown1")]
    },
    test : function (a) {
      return !a || simcity.gGlobalUIHandler.mIsDemo ?
      !1 : 0 == a.isMissionActive && 0 < a.Specialization_Mission && this.validate(a)
    },
    validate : function (a) {
      return !a || !simcity.gGlobalUIHandler.mRegionViewUIHandler ? !1 : 1 == a.Specialization_Metals
    }
  },
  OilWellPlacement : {
    missionUnit : scrui.IDFromName("MSTutorialOilWellPlacement"),
    optionID : scrui.IDFromName("tutorial_MSTutorialOilWellPlacement"),
    queries : {
      isMissionActive : [simcity.kDataBinAmount, scrui.IDFromName("GlobalMission_MSTutorialOilWellPlacement")],
      Specialization_Petroleum : [simcity.kDataBinAmount, simcity.kResourceIDSpecialization_Petroleum],
      Specialization_Mission : [simcity.kDataBinAmount, scrui.IDFromName("GlobalMission_MSBusinessOilOilFields1")]
    },
    test : function (a) {
      return !a || simcity.gGlobalUIHandler.mIsDemo ? !1 : 0 == a.isMissionActive && 0 < a.Specialization_Mission && this.validate(a)
    },
    validate : function (a) {
      return !a || !simcity.gGlobalUIHandler.mRegionViewUIHandler ? !1 : 1 == a.Specialization_Petroleum
    }
  },
  TradeDepot : {
    missionUnit : scrui.IDFromName("MSTutorialTradeDepot"),
    optionID : scrui.IDFromName("tutorial_MSTutorialTradeDepot"),
    queries : {
      isMissionActive : [simcity.kDataBinAmount,
        scrui.IDFromName("GlobalMission_MSTutorialTradeDepot")],
      Specialization_Trade : [simcity.kDataBinAmount, simcity.kResourceIDSpecialization_Trade],
      Specialization_Mission : [simcity.kDataBinAmount, scrui.IDFromName("GlobalMission_MSBusinessTradeFreeMarket1")],
      NumImEx : [simcity.kDataBinAmount, simcity.kResourceIDNumImEx],
      NumImExCoalLots : [simcity.kDataBinAmount, simcity.kResourceIDNumImExCoalLots],
      NumImExOreRawLots : [simcity.kDataBinAmount, simcity.kResourceIDNumImExOreRawLots],
      NumImExOilCrudeLots : [simcity.kDataBinAmount,
        simcity.kResourceIDNumImExOilCrudeLots]
    },
    test : function (a) {
      return !a || simcity.gGlobalUIHandler.mIsDemo ? !1 : 0 == a.isMissionActive && 0 < a.Specialization_Mission && this.validate(a)
    },
    validate : function (a) {
      return !a || !simcity.gGlobalUIHandler.mRegionViewUIHandler ? !1 : 1 == a.Specialization_Trade && 0 < a.NumImEx && (0 < a.NumImExCoalLots || 0 < a.NumImExOreRawLots || 0 < a.NumImExOilCrudeLots)
    }
  },
  TradePort : {
    missionUnit : scrui.IDFromName("MSTutorialTradePort"),
    optionID : scrui.IDFromName("tutorial_MSTutorialTradePort"),
    queries : {
      isMissionActive : [simcity.kDataBinAmount,
        scrui.IDFromName("GlobalMission_MSTutorialTradePort")],
      Specialization_Trade : [simcity.kDataBinAmount, simcity.kResourceIDSpecialization_Trade],
      Specialization_Mission : [simcity.kDataBinAmount, scrui.IDFromName("GlobalMission_MSBusinessTradeFreeMarket3")],
      NumImExT2 : [simcity.kDataBinAmount, simcity.kResourceIDNumImExT2]
    },
    test : function (a) {
      return !a || simcity.gGlobalUIHandler.mIsDemo ? !1 : 0 == a.isMissionActive && 0 < a.Specialization_Mission && this.validate(a)
    },
    validate : function (a) {
      return !a || !simcity.gGlobalUIHandler.mRegionViewUIHandler ?
      !1 : 1 == a.Specialization_Trade && 0 < a.NumImExT2
    }
  },
  PassengerTrains : {
    missionUnit : scrui.IDFromName("MSCivicTutorialGamblingPassengerTrains"),
    optionID : scrui.IDFromName("tutorial_MSCivicTutorialGamblingPassengerTrains"),
    queries : {
      isMissionActive : [simcity.kDataBinAmount, scrui.IDFromName("GlobalMission_MSCivicTutorialGamblingPassengerTrains")],
      HQ_CityHall_Transportation_Module_Built : [simcity.kDataBinAmount, simcity.kResourceIDHQ_CityHall_Transportation_Module_Built],
      NumberOfRailConnections : [simcity.kDataBinAmount,
        simcity.kResourceIDNumberOfRailConnections],
      Simoleons : [simcity.kDataBinAmount, simcity.kResourceIDSimoleons]
    },
    test : function (a) {
      return !a ? !1 : 0 == a.isMissionActive && this.validate(a)
    },
    validate : function (a) {
      return !a || !simcity.gGlobalUIHandler.mRegionViewUIHandler ? !1 : 0 < a.HQ_CityHall_Transportation_Module_Built && 0 < a.NumberOfRailConnections && 45E3 < a.Simoleons
    }
  },
  MunicipalAirport : {
    missionUnit : scrui.IDFromName("MSCivicTutorialGamblingAirport"),
    optionID : scrui.IDFromName("tutorial_MSCivicTutorialGamblingAirport"),
    queries : {
      isMissionActive : [simcity.kDataBinAmount, scrui.IDFromName("GlobalMission_MSCivicTutorialGamblingAirport")],
      HQ_CityHall_Transportation_Module_Built : [simcity.kDataBinAmount, simcity.kResourceIDHQ_CityHall_Transportation_Module_Built],
      Simoleons : [simcity.kDataBinAmount, simcity.kResourceIDSimoleons]
    },
    test : function (a) {
      return !a ? !1 : 0 == a.isMissionActive && this.validate(a)
    },
    validate : function (a) {
      return !a ? !1 : 0 < a.HQ_CityHall_Transportation_Module_Built && 165E3 < a.Simoleons
    }
  },
  CasinoPlacement : {
    missionUnit : scrui.IDFromName("MSCivicTutorialGamblingHall"),
    optionID : scrui.IDFromName("tutorial_MSCivicTutorialGamblingHall"),
    queries : {
      isMissionActive : [simcity.kDataBinAmount, scrui.IDFromName("GlobalMission_MSCivicTutorialGamblingHall")],
      Specialization_Gambling : [simcity.kDataBinAmount, simcity.kResourceIDSpecialization_Gambling],
      Specialization_Mission : [simcity.kDataBinAmount, scrui.IDFromName("GlobalMission_MSBusinessGamblingBigGamble1")]
    },
    test : function (a) {
      return !a ? !1 : 0 == a.isMissionActive && 0 < a.Specialization_Mission && this.validate(a)
    },
    validate : function (a) {
      return !a ||
      !simcity.gGlobalUIHandler.mRegionViewUIHandler ? !1 : 1 == a.Specialization_Gambling
    }
  },
  IncreasingProfit : {
    missionUnit : scrui.IDFromName("MSCivicTutorialGamblingIncreasingProfit"),
    optionID : scrui.IDFromName("tutorial_MSCivicTutorialGamblingIncreasingProfit"),
    queries : {
      isMissionActive : [simcity.kDataBinAmount, scrui.IDFromName("GlobalMission_MSCivicTutorialGamblingIncreasingProfit")],
      Specialization_Gambling : [simcity.kDataBinAmount, simcity.kResourceIDSpecialization_Gambling],
      Specialization_Mission : [simcity.kDataBinAmount,
        scrui.IDFromName("GlobalMission_MSBusinessGamblingBigGamble2")],
      HQ_CityHall_IsOn : [simcity.kDataBinAmount, simcity.kResourceIDHQ_CityHall_IsOn],
      HQ_CityHall_Transportation_Module_Built : [simcity.kDataBinAmount, simcity.kResourceIDHQ_CityHall_Transportation_Module_Built],
      Simoleons : [simcity.kDataBinAmount, simcity.kResourceIDSimoleons],
      NumberOfGamblingHouses : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfGamblingHouses]
    },
    test : function (a) {
      return !a ? !1 : 0 == a.isMissionActive && 0 < a.Specialization_Mission && this.validate(a)
    },
    validate : function (a) {
      return !a || !simcity.gGlobalUIHandler.mRegionViewUIHandler ? !1 : 1 == a.Specialization_Gambling && 0 < a.HQ_CityHall_IsOn && 45E3 < a.Simoleons && 0 < a.NumberOfGamblingHouses && 0 < a.HQ_CityHall_Transportation_Module_Built
    }
  }
};
simcity.SurveyUI = {};
simcity.cSurveyUIHandler = function () {
  this.UIHandler = scrui.cUIHandler;
  this.UIHandler();
  this.mSurveyWebPageWindow = this.mContainerControl = null;
  this.mSurveyLoaded = !1;
  this.mTradeCompletedSurveyURL = this.mEndOfTutorialSurveyURL = "";
  this.mShouldUnpauseAfterHide = !1;
  this.mPauseButtonControl = this.mSpeedUI = null
};
goog.inherits(simcity.cSurveyUIHandler, scrui.cUIHandler);
simcity.cSurveyUIHandler.kBtnCloseID = 243008836;
simcity.cSurveyUIHandler.kWinSurveyWebPageID = 243008834;
simcity.cSurveyUIHandler.kEndOfTutorialSurveyURLID = 246377092;
simcity.cSurveyUIHandler.kTradeCompletedSurveyURLID = 246377194;
simcity.cSurveyUIHandler.prototype.Init = function (a, b) {
  this.mContainerControl = a;
  this.mSpeedUI = b;
  this.mPauseButtonControl = b.mSpeedButtons[0];
  gUIManager.LoadLayout("Layouts/Survey.js", a);
  this.mSurveyWebPageWindow = this.mContainerControl.FindControlByID(simcity.cSurveyUIHandler.kWinSurveyWebPageID);
  var c = this,
  d = [scrui.BuildRequestQuery([simcity.kDataAppProperties, simcity.cSurveyUIHandler.kEndOfTutorialSurveyURLID]), scrui.BuildRequestQuery([simcity.kDataAppProperties, simcity.cSurveyUIHandler.kTradeCompletedSurveyURLID])];
  scrui.RequestGameData(d, function (a) {
    c.mEndOfTutorialSurveyURL = a[0];
    c.mTradeCompletedSurveyURL = a[1]
  });
  this.mContainerControl.SetVisibility(!1)
};
simcity.cSurveyUIHandler.prototype.LoadSurveyWebPage = function (a) {
  var b = document.createElement("iframe");
  b.id = "surveyFrame";
  b.name = "surveyFrame";
  b.width = "100%";
  b.height = "2000px";
  b.style.border = "0";
  b.src = a;
  this.mSurveyWebPageWindow.mRootElement.appendChild(b)
};
simcity.cSurveyUIHandler.prototype.HandleUIMessage = function (a, b) {
  switch (a) {
  case scrui.kMsgTypeButtonClicked:
    switch (b) {
    case simcity.cSurveyUIHandler.kBtnCloseID:
      this.Hide()
    }
  }
};
simcity.cSurveyUIHandler.prototype.ShowTradeCompleteSurvey = function () {
  this.mTradeCompletedSurveyURL && !simcity.gGlobalUIHandler.mTradeCompleteSurveyCompleted && (this.Show(this.mTradeCompletedSurveyURL), simcity.gGlobalUIHandler.mTradeCompleteSurveyCompleted = !0)
};
simcity.cSurveyUIHandler.prototype.Show = function (a) {
  a ? (this.mContainerControl.SetVisibility(!0), this.LoadSurveyWebPage(a), this.mSpeedUI && !this.mSpeedUI.IsPaused() ? (this.mShouldUnpauseAfterHide = !0, this.mPauseButtonControl.SetSelected(!0), this.mSpeedUI.HandleUIMessage(scrui.kMsgTypeButtonClicked, simcity.cSpeedUIHandler.kBtnIDPause, this.mPauseButtonControl)) : this.mShouldUnpauseAfterHide = !1, this.mSurveyLoaded = !1, document.getElementById("surveyFrame").src = a) : this.Hide()
};
simcity.cSurveyUIHandler.prototype.Hide = function () {
  this.mContainerControl.SetVisibility(!1);
  this.mContainerControl.DestroyChildren();
  this.mSpeedUI && (this.mSpeedUI.IsPaused() && this.mShouldUnpauseAfterHide) && (this.mPauseButtonControl.SetSelected(!1), this.mSpeedUI.HandleUIMessage(scrui.kMsgTypeButtonClicked, simcity.cSpeedUIHandler.kBtnIDPause, this.mPauseButtonControl));
  gUIManager.UnregisterUIHandler(this);
  delete simcity.gGlobalUIHandler.mSurveyUIHandler
};
simcity.ShowTradeCompleteSurvey = function () {
  var a = simcity.gGlobalUIHandler;
  !a.mSurveyUIHandler && !a.mTradeCompleteSurveyCompleted && (simcity.CreateSurveyHandler(), a.mSurveyUIHandler.Show(a.mSurveyUIHandler.mTradeCompletedSurveyURL), a.mTradeCompleteSurveyCompleted = !0)
};
simcity.ShowTutorialSurvey = function () {
  var a = simcity.gGlobalUIHandler;
  a.mSurveyUIHandler || (simcity.CreateSurveyHandler(), a.mSurveyUIHandler.Show(a.mSurveyUIHandler.mEndOfTutorialSurveyURL))
};
simcity.CreateSurveyHandler = function () {
  var a = simcity.gGlobalUIHandler;
  a.mSurveyUIHandler = new simcity.cSurveyUIHandler;
  a.mSurveyUIHandler.Init(gUIManager.FindControlByID(simcity.kWinSurveyContainer), a.mSpeedUIHandler);
  gUIManager.RegisterUIHandler(a.mSurveyUIHandler)
};
simcity.RegionAdvisors = {};
simcity.kRegionAdvisorTargetControlID = 250258224;
simcity.kRegionAdvisorRedAlertToggleID = 250258653;
simcity.kRegionAdvisorRedAlertHeaderTextID = 229170960;
simcity.kRegionAdvisorRedAlertBodyTextID = 229170956;
simcity.kRegionAdvisorBlueIControlID = 247237927;
simcity.kRegionAdvisorBlueITextID = 244903423;
simcity.cRegionAdvisors = function () {
  this.mControls = {
    rootControl : null,
    advisorControl : null,
    redAlert : {
      toggle : null,
      header : null,
      body : null
    },
    blueI : {
      control : null,
      text : null
    }
  };
  this.mActiveAlertStringID = this.mActiveAdvisorPanel = null
};
goog.inherits(simcity.cRegionAdvisors, scrui.cUIHandler);
simcity.cRegionAdvisors.prototype.Init = function (a) {
  this.mControls.rootControl = a;
  this.mControls.advisorControl = this.mControls.rootControl.FindControlByID(simcity.kRegionAdvisorTargetControlID);
  this.mControls.blueI.control = this.mControls.rootControl.FindControlByID(simcity.kRegionAdvisorBlueIControlID);
  a = a.FindControlByID(253996542);
  this.mControls.blueI.text = a.FindControlByID(simcity.kRegionAdvisorBlueITextID);
  this.mControls.redAlert.toggle = this.mControls.rootControl.mParentControl.FindControlByID(simcity.kRegionAdvisorRedAlertToggleID);
  this.mControls.redAlert.header = this.mControls.rootControl.mParentControl.FindControlByID(simcity.kRegionAdvisorRedAlertHeaderTextID);
  this.mControls.redAlert.body = this.mControls.rootControl.mParentControl.FindControlByID(simcity.kRegionAdvisorRedAlertBodyTextID)
};
simcity.cRegionAdvisors.prototype.ShowAdvisor = function (a) {
  if (this.mActiveAdvisorPanel = simcity.RegionalAdvisors[a]) {
    this.mControls.rootControl.SetVisibility(!0);
    this.mControls.redAlert.toggle.SetVisibility(!1);
    this.mControls.advisorControl.SetWindowImage(scrui.DecimalToHex(this.mActiveAdvisorPanel.simIcon) + ".png");
    this.mControls.advisorControl.SetVisibility(!0);
    this.mControls.blueI.text.SetLocaleText(this.mActiveAdvisorPanel.helpTipText);
    var b = this.mControls.blueI.text,
    a = b.mParentControl,
    b = b.GetTextHeight() +
      25;
    a.SetPosition(a.mLeft, a.mTop - (b - a.mHeight), a.mWidth, b);
    this.mControls.redAlert.header.SetLocaleText(new scrui.cLocaleString(simcity.kAdvisorLocaleFile, this.mActiveAdvisorPanel.alertHeaderText, "Region advisor header"));
    this.PopulateAdvisorAlerts()
  }
};
simcity.cRegionAdvisors.prototype.HideAdvisor = function () {
  this.mControls.rootControl.SetVisibility(!1);
  this.mControls.advisorControl.SetVisibility(!0);
  this.mActiveAdvisorPanel = null
};
simcity.cRegionAdvisors.prototype.PopulateAdvisorAlerts = function () {
  var a = !1;
  if (this.mActiveAdvisorPanel && this.mActiveAdvisorPanel.alerts) {
    var b = this.mActiveAdvisorPanel.alerts;
    this.mControls.redAlert.toggle.SetVisibility(!0);
    for (var c = Object.keys(b), d = 0, e = c.length; d < e; d++)
      for (var f = b[c[d]], g = 0, h = f.length; g < h; g++)
        a = {
          local_city_name : simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData.mPlayingBox.name,
          neighbor_city_name : simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData.mBoxes[f[g]] ? simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData.mBoxes[f[g]].name :
          "[BROKEN BOX]"
        },
    this.mControls.redAlert.body.SetLocaleText(new scrui.cLocaleString(simcity.kAdvisorLocaleFile, c[d], "Region advisor help tip: " + f[g] + ":" + c[d])),
    this.mControls.redAlert.body.UpdateLocaleText(a),
    this.mActiveAlertStringID = c[d],
    a = !0
  }
  a || (this.mControls.redAlert.toggle.SetVisibility(!1), this.mActiveAlertStringID = null)
};
simcity.AddRegionAdvisorAlert = function (a, b, c) {
  a = simcity.RegionalAdvisors[a];
  a.alerts || (a.alerts = {});
  a.alerts[c] || (a.alerts[c] = []);
  for (var d = !1, e = a.alerts[c], f = 0, g = e.length; f < g; f++)
    b == e[f] && (d = !0);
  d || a.alerts[c].push(b)
};
simcity.ClearRegionAdvisorAlert = function (a, b) {
  simcity.ClearRegionAdvisorAlertForBoxID(a, 0, b)
};
simcity.ClearRegionAdvisorAlertForBoxID = function (a, b, c) {
  if ((a = simcity.RegionalAdvisors[a]) && a.alerts) {
    for (var d = {}, e = Object.keys(a.alerts), f = 0, g = e.length; f < g; f++) {
      var h = a.alerts[e[f]];
      h && 0 < h.length && e[f] !== c ? d[e[f]] = h : 0 < b && (goog.array.remove(h, b), 0 < h.length && (d[e[f]] = h))
    }
    a.alerts = d;
    simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionAdvisors.PopulateAdvisorAlerts()
  }
};
simcity.CashGiftUI = {};
simcity.cCashGiftUIHandler = function () {
  this.UIHandler = scrui.cUIHandler;
  this.UIHandler();
  this.mRegionViewUI = simcity.gGlobalUIHandler.mRegionViewUIHandler;
  this.mUnitRef = this.mPendingGiftTextContainer = this.mConfirmationText = this.mConfirmationWindowControl = this.mSendGiftButton = this.mMaxButton = this.mClearButton = this.mDecreaseAmountButton = this.mIncreaseAmountButton = this.mGiftAmountText = this.mBudgetText = this.mMyCityText = this.mGiftButtonControl = this.mContainerControl = null;
  this.mSentAmount = this.mGiftAmount =
    this.mBudgetAmount = this.mCityTotalBudget = this.mRefreshTimer = 0;
  this.mViewingCityName = null;
  this.mSendButtonPressed = this.mAllowGifting = !1;
  this.mValueUserChangedTimer = 0
};
goog.inherits(simcity.cCashGiftUIHandler, scrui.cUIHandler);
simcity.cCashGiftUIHandler.kGiftAmountIncrement = 1E4;
simcity.cCashGiftUIHandler.kRefreshTime = 500;
simcity.cCashGiftUIHandler.kLayoutWindowID = 246723440;
simcity.cCashGiftUIHandler.kLayoutGiftButtonID = 241896420;
simcity.cCashGiftUIHandler.kLayoutCloseButtonID = 241707711;
simcity.cCashGiftUIHandler.kLayoutMaxButtonID = 241707647;
simcity.cCashGiftUIHandler.kLayoutClearButtonID = 241710625;
simcity.cCashGiftUIHandler.kLayoutIncreaseAmountButtonID = 241707643;
simcity.cCashGiftUIHandler.kLayoutDecreaseAmountButtonID = 241707641;
simcity.cCashGiftUIHandler.kLayoutSendGiftButtonID = 241707667;
simcity.cCashGiftUIHandler.kLayoutMyCityTextID = 241707675;
simcity.cCashGiftUIHandler.kLayoutBudgetTextID = 241707672;
simcity.cCashGiftUIHandler.kLayoutGiftAmountTextID = 241707655;
simcity.cCashGiftUIHandler.kLayoutConfirmationWindowID = 242214743;
simcity.cCashGiftUIHandler.kLayoutConfirmationTextID = 242214779;
simcity.cCashGiftUIHandler.kLayoutPendingGiftTextContainerID = 244636045;
simcity.cCashGiftUIHandler.kLayoutAvatarTemplateContainerID = 241707679;
simcity.cCashGiftUIHandler.prototype.Init = function (a) {
  this.mContainerControl = a.FindControlByID(simcity.cCashGiftUIHandler.kLayoutWindowID);
  this.mContainerControl.SetVisibility(!1);
  this.mGiftButtonControl = a.FindControlByID(simcity.cCashGiftUIHandler.kLayoutGiftButtonID);
  this.mGiftButtonControl.SetVisibility(!0);
  this.mMyCityText = this.mContainerControl.FindControlByID(simcity.cCashGiftUIHandler.kLayoutMyCityTextID);
  this.mBudgetText = this.mContainerControl.FindControlByID(simcity.cCashGiftUIHandler.kLayoutBudgetTextID);
  this.mGiftAmountText = this.mContainerControl.FindControlByID(simcity.cCashGiftUIHandler.kLayoutGiftAmountTextID);
  this.mIncreaseAmountButton = this.mContainerControl.FindControlByID(simcity.cCashGiftUIHandler.kLayoutIncreaseAmountButtonID);
  this.mDecreaseAmountButton = this.mContainerControl.FindControlByID(simcity.cCashGiftUIHandler.kLayoutDecreaseAmountButtonID);
  this.mClearButton = this.mContainerControl.FindControlByID(simcity.cCashGiftUIHandler.kLayoutClearButtonID);
  this.mMaxButton = this.mContainerControl.FindControlByID(simcity.cCashGiftUIHandler.kLayoutMaxButtonID);
  this.mSendGiftButton = this.mContainerControl.FindControlByID(simcity.cCashGiftUIHandler.kLayoutSendGiftButtonID);
  this.mConfirmationWindowControl = a.FindControlByID(simcity.cCashGiftUIHandler.kLayoutConfirmationWindowID);
  this.mConfirmationText = a.FindControlByID(simcity.cCashGiftUIHandler.kLayoutConfirmationTextID);
  this.mPendingGiftTextContainer = this.mGiftButtonControl.FindControlByID(simcity.cCashGiftUIHandler.kLayoutPendingGiftTextContainerID)
};
simcity.cCashGiftUIHandler.prototype.HideCashButton = function () {
  this.mGiftButtonControl.SetVisibility(!1)
};
simcity.cCashGiftUIHandler.prototype.HandleUIMessage = function (a, b) {
  switch (a) {
  case scrui.kMsgTypeButtonClicked:
    switch (b) {
    case simcity.cCashGiftUIHandler.kLayoutCloseButtonID:
      this.Hide();
      break;
    case simcity.cCashGiftUIHandler.kLayoutMaxButtonID:
      this.MaxOutGiftAmount();
      this.Update();
      break;
    case simcity.cCashGiftUIHandler.kLayoutClearButtonID:
      this.ClearGiftAmount();
      this.Update();
      break;
    case simcity.cCashGiftUIHandler.kLayoutIncreaseAmountButtonID:
      this.IncreaseGiftAmount();
      this.SetGiftAmountText(this.mGiftAmount);
      break;
    case simcity.cCashGiftUIHandler.kLayoutDecreaseAmountButtonID:
      this.DecreaseGiftAmount();
      this.SetGiftAmountText(this.mGiftAmount);
      break;
    case simcity.cCashGiftUIHandler.kLayoutSendGiftButtonID:
      this.SendGift();
      this.Update();
      break;
    case simcity.cCashGiftUIHandler.kLayoutGiftButtonID:
      this.Toggle(),
      this.Update()
    }
  }
};
simcity.cCashGiftUIHandler.prototype.SetBudgetText = function (a) {
  this.mBudgetText.UpdateLocaleText({
    amount : a
  })
};
simcity.cCashGiftUIHandler.prototype.SetGiftAmountText = function (a) {
  this.mGiftAmountText.UpdateLocaleText({
    amount : a
  })
};
simcity.cCashGiftUIHandler.prototype.MaxOutGiftAmount = function () {
  this.mUnitRef && (simcity.CreateUnit("Trading_SetMaximumSimoleonGiftSize", this.mUnitRef), simcity.gGlobalUIHandler.mSpeedUIHandler.IsPaused() && (this.mGiftAmount = this.mCityTotalBudget))
};
simcity.cCashGiftUIHandler.prototype.ClearGiftAmount = function () {
  this.mUnitRef && (simcity.CreateUnit("Trading_ClearSimoleonGiftSize", this.mUnitRef), simcity.gGlobalUIHandler.mSpeedUIHandler.IsPaused() && (this.mGiftAmount = 0))
};
simcity.cCashGiftUIHandler.prototype.IncreaseGiftAmount = function () {
  this.mUnitRef && (simcity.CreateUnit("Trading_IncreaseSimoleonGiftSize", this.mUnitRef), this.mGiftAmount += simcity.cCashGiftUIHandler.kGiftAmountIncrement, this.mValueUserChangedTimer = 5E3)
};
simcity.cCashGiftUIHandler.prototype.DecreaseGiftAmount = function () {
  this.mUnitRef && (simcity.CreateUnit("Trading_DecreaseSimoleonGiftSize", this.mUnitRef), this.mGiftAmount -= simcity.cCashGiftUIHandler.kGiftAmountIncrement, 0 > this.mGiftAmount && (this.mGiftAmount = 0), this.mValueUserChangedTimer = 5E3)
};
simcity.cCashGiftUIHandler.prototype.SendGift = function () {
  this.mUnitRef && 0 < this.mGiftAmount && (simcity.CreateUnit("Trading_SendSimoleonGift", this.mUnitRef), this.kRefreshTime = 0, this.SetGiftButtonsEnabled(!1), this.mSentAmount = this.mGiftAmount, this.Hide(), this.mGiftButtonControl.SetEnabled(!1), this.ShowConfirmation(this.mSentAmount, this.mViewingCityName), this.mPendingGiftTextContainer.SetVisibility(!0), this.mSendButtonPressed = this.mIsSendingGift = !0, simcity.ShowTradeCompleteSurvey())
};
simcity.cCashGiftUIHandler.prototype.UpdateMyCityInfo = function () {
  var a = simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData.mPlayingBox;
  if (a.creator) {
    this.mMyCityText.SetRawText(a.name);
    var b = this.mContainerControl.FindControlByID(simcity.cCashGiftUIHandler.kLayoutAvatarTemplateContainerID);
    simcity.gGlobalUIHandler.mAvatarManagerHandler.AddSubscription({
      playerID : a.creatorId,
      layoutInfo : b,
      isBoxClaimed : !0,
      isMyBox : !1,
      isCurrentBox : !1,
      showAlerts : !1,
      group : "cashGift",
      boxID : a.uid
    })
  }
};
simcity.cCashGiftUIHandler.prototype.Toggle = function () {
  this.mContainerControl.mIsVisible ? this.Hide() : this.Show()
};
simcity.cCashGiftUIHandler.prototype.Show = function () {
  this.mContainerControl.SetVisibility(!0);
  this.mIsSendingGift ? this.ShowConfirmation(this.mSentAmount, this.mViewingCityName) : this.HideConfirmation();
  this.Update()
};
simcity.cCashGiftUIHandler.prototype.Hide = function () {
  this.mContainerControl.SetVisibility(!1)
};
simcity.cCashGiftUIHandler.prototype.ShowConfirmation = function (a, b) {
  this.mConfirmationText.UpdateLocaleText({
    amount : a,
    cityName : b
  });
  this.mConfirmationWindowControl.SetVisibility(!0)
};
simcity.cCashGiftUIHandler.prototype.HideConfirmation = function () {
  this.mConfirmationWindowControl.SetVisibility(!1)
};
simcity.cCashGiftUIHandler.kGiftButtonEnabledToolTipLocaleString = new scrui.cLocaleString("Gifting.json", "0x0e6af646", "Gift Simoleons");
simcity.cCashGiftUIHandler.kGiftButtonMissingRequirementsToolTipLocaleString = new scrui.cLocaleString("Gifting.json", "0x0e6af583", "Place a Town Hall or Mayors House to unlock");
simcity.cCashGiftUIHandler.prototype.DetermineAllowGifting = function () {
  this.Hide();
  if (this.mRegionViewUI.mSelectedRegionViewItem) {
    var a = this;
    a.mUnitRef = this.mRegionViewUI.mRegionData.mConnectedUnits[this.mRegionViewUI.mSelectedRegionViewItem.mRegionalBoxID];
    a.mViewingCityName = this.mRegionViewUI.mSelectedRegionViewItem && this.mRegionViewUI.mSelectedRegionViewItem.mBoxData ? this.mRegionViewUI.mSelectedRegionViewItem.mBoxData.name : "";
    a.mConfirmationWindowControl.SetVisibility(!1);
    a.DisableGiftButton();
    if (a.mUnitRef) {
      var b = [scrui.BuildRequestQuery([simcity.kDataBinAmount, simcity.kResourceIDHQ_CityHall_Built]), scrui.BuildRequestQuery([simcity.kDataBinAmount, simcity.kResourceIDHasMayorsHouseSmall]), scrui.BuildRequestQuery([simcity.kDataUnits, a.mUnitRef, simcity.kDataBinAmount, simcity.kResourceIDTradeGiftSendingSimoleons])];
      scrui.RequestGameData(b, function (b) {
        b && (0 < b[0] || 0 < b[1] ? (a.EnableGiftButton(), a.HandleMessageDisplays(0 < b[2])) : a.DisableGiftButton())
      })
    } else
      a.DisableGiftButton()
  }
};
simcity.cCashGiftUIHandler.prototype.EnableGiftButton = function () {
  this.mAllowGifting = !0;
  this.mGiftButtonControl.SetEnabled(!0);
  this.mGiftButtonControl.SetTooltipLocaleText(simcity.cCashGiftUIHandler.kGiftButtonEnabledToolTipLocaleString);
  this.UpdateMyCityInfo()
};
simcity.cCashGiftUIHandler.prototype.DisableGiftButton = function () {
  this.mAllowGifting = !1;
  this.mGiftButtonControl.SetEnabled(!1);
  this.mGiftButtonControl.SetTooltipLocaleText(simcity.cCashGiftUIHandler.kGiftButtonMissingRequirementsToolTipLocaleString)
};
simcity.cCashGiftUIHandler.prototype.UpdateValues = function () {
  var a = this;
  if (a.mContainerControl && a.mContainerControl.mIsVisible && a.mUnitRef) {
    var b = [scrui.BuildRequestQuery([simcity.kDataUnits, a.mUnitRef, simcity.kDataBinAmount, simcity.kResourceIDTradeGiftSendingSimoleons]), scrui.BuildRequestQuery([simcity.kDataBinAmount, simcity.kResourceIDSimoleons]), scrui.BuildRequestQuery([simcity.kDataUnits, a.mUnitRef, simcity.kDataBinAmount, simcity.kResourceIDTradeGiftSimoleonsSize])];
    scrui.RequestGameData(b, function (b) {
      a.HandleMessageDisplays(0 <
        b[0]);
      a.mCityTotalBudget = b[1];
      b = b[2];
      a.mIsSendingGift ? (a.SetGiftButtonsEnabled(!1), a.mGiftAmount = 0, a.mBudgetAmount = a.mCityTotalBudget - a.mSentAmount) : (a.SetGiftButtonsEnabled(!0), simcity.gGlobalUIHandler.mSpeedUIHandler.IsPaused() || (a.mGiftAmount = b), a.mGiftAmount > a.mCityTotalBudget && (a.MaxOutGiftAmount(), a.mGiftAmount = a.mCityTotalBudget, a.mBudgetAmount = 0), a.mBudgetAmount = a.mCityTotalBudget - a.mGiftAmount, a.mSendGiftButton.SetEnabled(0 < a.mGiftAmount));
      0 > a.mBudgetAmount && (a.mBudgetAmount = 0);
      a.SetBudgetText(a.mBudgetAmount);
      0 >= a.mValueUserChangedTimer && a.SetGiftAmountText(a.mGiftAmount)
    })
  } else
    a.mUnitRef && (b = [scrui.BuildRequestQuery([simcity.kDataUnits, a.mUnitRef, simcity.kDataBinAmount, simcity.kResourceIDTradeGiftSendingSimoleons])], scrui.RequestGameData(b, function (b) {
        a.HandleMessageDisplays(0 < b[0])
      }))
};
simcity.cCashGiftUIHandler.prototype.HandleMessageDisplays = function (a) {
  if (!simcity.gGlobalUIHandler.mSpeedUIHandler.IsPaused() && (this.mSendButtonPressed && a && (this.mSendButtonPressed = !1), !this.mSendButtonPressed))
    this.mIsSendingGift = a;
  this.mIsSendingGift || this.mConfirmationWindowControl.SetVisibility(!1);
  this.mPendingGiftTextContainer.SetVisibility(this.mIsSendingGift);
  this.mGiftButtonControl.SetEnabled(!this.mIsSendingGift)
};
simcity.cCashGiftUIHandler.prototype.SetGiftButtonsEnabled = function (a) {
  this.mIncreaseAmountButton.SetEnabled(a);
  this.mDecreaseAmountButton.SetEnabled(a);
  this.mClearButton.SetEnabled(a);
  this.mMaxButton.SetEnabled(a);
  this.mSendGiftButton.SetEnabled(a)
};
simcity.cCashGiftUIHandler.prototype.Update = scrui.Client_ProfZone("CashGiftUIUpdate", function (a) {
    this.mRegionViewUI.IsVisible() && this.mContainerControl && (a && (this.mValueUserChangedTimer -= a), this.mAllowGifting && this.mUnitRef ? this.UpdateValues() : this.DetermineAllowGifting())
  });
simcity.DynamicScriptLoader = {
  mNumRemainingScripts : 0,
  mScriptLoadDoneCallback : null,
  LoadScriptFromSrc : function (a, b) {
    var c = document.createElement("script");
    c.type = "text/javascript";
    c.src = a;
    b || (++simcity.DynamicScriptLoader.mNumRemainingScripts, b = simcity.DynamicScriptLoader.mScriptLoadDoneCallback);
    c.onload = c.onerror = function () {
      if (b) {
        b();
        b = null
      }
    };
    document.head.appendChild(c)
  },
  LoadAllScripts : function (a) {
    var b = scrui.BuildRequestQuery(["resourcekeysWithNames", 1735860060, 2736653839]);
    scrui.RequestGameData([b],
      function (b) {
      b = b[0];
      if (null == b || 0 == b.length)
        a();
      else {
        var d = b.length;
        simcity.DynamicScriptLoader.mNumRemainingScripts = d;
        simcity.DynamicScriptLoader.mScriptLoadDoneCallback = function () {
          0 == --simcity.DynamicScriptLoader.mNumRemainingScripts && a && (a(), a = null)
        };
        for (var e = 0; e < d; ++e) {
          var f = b[e].name || scrui.DecimalToHex(b[e].group) + "!" + scrui.DecimalToHex(b[e].instance) + ".js";
          simcity.DynamicScriptLoader.LoadScriptFromSrc(f, simcity.DynamicScriptLoader.mScriptLoadDoneCallback)
        }
      }
    })
  }
};
simcity.RolloverUI = {};
simcity.gRolloverManager = null;
simcity.InitializeBuildingRollover = function (a) {
  simcity.gRolloverManager = new simcity.cRolloverManager;
  simcity.gRolloverManager.Init(a);
  gUIManager.RegisterUIHandler(simcity.gRolloverManager)
};
simcity.cRolloverManager = function () {
  this.UIHandler = scrui.cUIHandler;
  this.UIHandler();
  this.mLastAudioOffIDArray = this.mRolloverUI = this.mGlobalUI = null;
  this.mLastAudioObjectID = 0;
  this.mLastAudioUnitSlot = -1
};
goog.inherits(simcity.cRolloverManager, scrui.cUIHandler);
simcity.cRolloverManager.prototype.Init = function (a) {
  simcity.gGlobalUIHandler.BuildingRolloverLoaded(this);
  this.mRolloverUI = new simcity.cRolloverUI;
  this.mRolloverUI.Init(a);
  gUIManager.RegisterUIHandler(this.mRolloverUI)
};
simcity.cRolloverUI = function () {
  this.UIHandler = scrui.cUIHandler;
  this.UIHandler();
  this.mAudioObjectID = this.mAudioOffIDArray = this.mAudioOnIDArray = this.mCurrentLayout = this.mCurrentLayoutKey = this.mParentControl = null;
  this.mCloseWindowAudioOverrideID = this.mOpenWindowAudioOverrideID = 0;
  this.mRolloverCursorKey = this.mSelectedNonSimPropID = this.mRolloverUnitRef = this.mSelectedUnitRef = this.mCurrentUnitRef = this.mAudioSaleMade = this.mAudioResidentSimExitedBuilding = this.mAudioResidentCarExitedBuilding = this.mAudioWorkerSimExitedBuilding =
    this.mAudioWorkerCarExitedBuilding = this.mAudioShopperSimExitedBuilding = this.mAudioShopperCarExitedBuilding = this.mAudioResidentSimEnteredBuilding = this.mAudioResidentCarEnteredBuilding = this.mAudioWorkerSimEnteredBuilding = this.mAudioWorkerCarEnteredBuilding = this.mAudioShopperSimEnteredBuilding = this.mAudioShopperCarEnteredBuilding = this.mAudioSimExit = this.mAudioSimEntry = null;
  this.mRefreshTimer = 0;
  this.mCurrentDataBindings = this.mDataBindingMap = null;
  this.mDisableRollover = this.mShowingExtendedItems = !1;
  this.mBuildingPopupMenu =
    null;
  this.mOriginalHeight = 0
};
goog.inherits(simcity.cRolloverUI, scrui.cUIHandler);
simcity.cRolloverUI.kWinIDRolloverItemDivider = 252102512;
simcity.cRolloverUI.kWinIDRolloverItemIcon = 212238145;
simcity.cRolloverUI.kTxtIDRolloverItemValue = 164377449;
simcity.cRolloverUI.kTxtIDRolloverItemValue2 = 241819987;
simcity.cRolloverUI.kTxtIDRolloverItemValue3 = 241819995;
simcity.cRolloverUI.kWinIDRolloverItemLeftBacking = 212238138;
simcity.cRolloverUI.kWinIDRolloverItemRightBacking = 212238136;
simcity.cRolloverUI.kTxtIDRolloverItemAdditionalText = 227873659;
simcity.cRolloverUI.kWinIDRolloverItemButton = 227875373;
simcity.cRolloverUI.kTxtIDRolloverItemButtonText = 243698001;
simcity.cRolloverUI.kWinIDRolloverItemButton2 = 227875374;
simcity.cRolloverUI.kTxtIDRolloverItemButton2Text = 243698002;
simcity.cRolloverUI.kWinIDRolloverToyTaskBackground = 235733269;
simcity.cRolloverUI.kWinIDRolloverItemMeterBacking = 214914325;
simcity.cRolloverUI.kWinIDRolloverItemMeterFillBar = 214914326;
simcity.cRolloverUI.kWinIDRolloverItemToyTaskImage = 235736938;
simcity.cRolloverUI.kWinIDRolloverItemRedMeterFillBar = 240506266;
simcity.cRolloverUI.kWinIDRolloverItemYellowMeterFillBar = 240512068;
simcity.cRolloverUI.kWinIDRolloverItemGreenMeterFillBar = 253035442;
simcity.cRolloverUI.kWinIDRolloverItemNeutralMeterFillBar = 252706818;
simcity.cRolloverUI.kTxtIDRolloverItemTitle = 240924876;
simcity.cRolloverUI.kTxtIDRolloverItemTitleRight = 244032568;
simcity.cRolloverUI.kTxtIDRolloverItemTextLeft1 = 240756180;
simcity.cRolloverUI.kTxtIDRolloverItemTextRight1 = 240675082;
simcity.cRolloverUI.kTxtIDRolloverItemTextLeft2 = 241012531;
simcity.cRolloverUI.kTxtIDRolloverItemTextRight2 = 241012574;
simcity.cRolloverUI.kTxtIDRolloverItemTextLeft3 = 241012694;
simcity.cRolloverUI.kTxtIDRolloverItemTextRight3 = 241012712;
simcity.cRolloverUI.kTxtIDRolloverItemTextLeft4 = 243606312;
simcity.cRolloverUI.kTxtIDRolloverItemTextRight4 = 243606313;
simcity.cRolloverUI.kWinIDRolloverItemGaugeNeedleAnchor = 215857317;
simcity.cRolloverUI.kWinIDRolloverBackground = 240759694;
simcity.cRolloverUI.kTxtIDRolloverItemGroup1 = 247610189;
simcity.cRolloverUI.kTxtIDRolloverItemGroup2 = 247610190;
simcity.cRolloverUI.kTxtIDRolloverItemGroup3 = 247610191;
simcity.cRolloverUI.kWinIDRolloverBlockTitleTextAndValue = 240945824;
simcity.cRolloverUI.kTxtIDRolloverCancelEvent = 235734163;
simcity.cRolloverUI.kTxtIDWorkersW1 = 238847702;
simcity.cRolloverUI.kTxtIDWorkersW2 = 238847704;
simcity.cRolloverUI.kTxtIDWorkersW3 = 238847706;
simcity.cRolloverUI.kTxtIDPowerGenerated = 238849325;
simcity.cRolloverUI.kTxtIDAirPollution = 238849330;
simcity.cRolloverUI.kWinIDRolloverItemContainer = 212238278;
simcity.cRolloverUI.kWinIDBuildingName = 164191353;
simcity.cRolloverUI.kWinIDRolloverPopulation = 226403367;
simcity.cRolloverUI.kPropUnitRolloverLayout = 197461275;
simcity.cRolloverUI.kPropUnitAudioRolloverOnEvents = 201283285;
simcity.cRolloverUI.kPropUnitAudioRolloverOffEvents = 201283295;
simcity.cRolloverUI.kPropUnitAudioSimEnteredEvents = 202840399;
simcity.cRolloverUI.kPropUnitAudioSimExitedEvents = 202840404;
simcity.cRolloverUI.kPropUnitAudioShopperCarEnteredEvents = 204743423;
simcity.cRolloverUI.kPropUnitAudioShopperSimEnteredEvents = 204743427;
simcity.cRolloverUI.kPropUnitAudioWorkerCarEnteredEvents = 204743430;
simcity.cRolloverUI.kPropUnitAudioWorkerSimEnteredEvents = 204743434;
simcity.cRolloverUI.kPropUnitAudioResidentCarEnteredEvents = 204743437;
simcity.cRolloverUI.kPropUnitAudioResidentSimEnteredEvents = 204743441;
simcity.cRolloverUI.kPropUnitAudioShopperCarExitedEvents = 204743444;
simcity.cRolloverUI.kPropUnitAudioShopperSimExitedEvents = 204743448;
simcity.cRolloverUI.kPropUnitAudioWorkerCarExitedEvents = 204743451;
simcity.cRolloverUI.kPropUnitAudioWorkerSimExitedEvents = 204743454;
simcity.cRolloverUI.kPropUnitAudioResidentCarExitedEvents = 204743457;
simcity.cRolloverUI.kPropUnitAudioResidentSimExitedEvents = 204743460;
simcity.cRolloverUI.kPropUnitAudioSaleMadeEvents = 202840412;
simcity.cRolloverUI.kRefreshTime = 1E3;
simcity.cRolloverUI.kRolloverDelay = 3E3;
simcity.cRolloverUI.kPropUnitRolloverItemIDs = 212579068;
simcity.cRolloverUI.kPropUnitRolloverExtendedItemIDs = 212843971;
simcity.cRolloverUI.kPropUnitRolloverIcon = 212579023;
simcity.cRolloverUI.kPropUnitRolloverPopulationItemID = 226405804;
simcity.cRolloverUI.kWinIcon = 168099868;
simcity.cRolloverUI.kWinAlertContainer = 215184001;
simcity.cRolloverUI.kWinMainPanel = 215183945;
simcity.cRolloverUI.kWinRightPointer = 215183969;
simcity.cRolloverUI.kWinLeftPointer = 215183970;
simcity.cRolloverUI.kWinMenuContainer = 215191523;
simcity.cRolloverUI.kAppPropertyUIRolloverDelay = 218905118;
simcity.cRolloverUI.prototype.Init = function (a) {
  scrui.Assert(null !== a);
  this.mParentControl = a;
  this.mDataBindingMap = simcity.GenerateRolloverItemDataBindingMap();
  this.mPopupDataBindingMap = simcity.GeneratePopupItemDataBindingMap();
  a = [scrui.BuildRequestQuery([simcity.kDataAppProperties, simcity.cRolloverUI.kAppPropertyUIRolloverDelay])];
  scrui.RequestGameData(a, function (a) {
    simcity.cRolloverUI.kRolloverDelay = a[0]
  })
};
simcity.cRolloverUI.prototype.GetTargetUnitRef = function () {
  return this.mSelectedUnitRef ? this.mSelectedUnitRef : this.mCurrentUnitRef
};
simcity.cRolloverUI.prototype.HandleGameEvent = function (a, b) {
  switch (a) {
  case simcity.kGameMessageBuildingRolledOver:
    this.mDisableRollover || (this.mRolloverUnitRef = b.unitRef, this.ShowRollover(this.mRolloverUnitRef, !1));
    break;
  case simcity.kGameMessageBuildingRolledOff:
    this.mShowingExtendedItems || this.HideRollover();
    break;
  case simcity.kGameMessageBuildingSelected:
    if (!this.mDisableRollover) {
      var c = [scrui.BuildRequestQuery([simcity.kDataUnits, scrui.RequestStringFromUnitRef(b.unitRef), simcity.kDataNonSimPropID])],
      d = this;
      scrui.RequestGameData(c, function (a) {
        d.mSelectedUnitRef = b.unitRef;
        d.mSelectedNonSimPropID = a[0];
        d.ShowRollover(d.mSelectedUnitRef, !0)
      })
    }
    break;
  case simcity.kGameMessageBuildingDeselected:
    this.mSelectedNonSimPropID = this.mSelectedUnitRef = null;
    this.CloseBuildingPopupMenu();
    this.HideRollover();
    break;
  case simcity.kGameMessageUnitRuleUIEvent:
    if (c = b.eventID, this.mCurrentUnitRef && !this.mWaitingForRollover && null != this.mSelectedUnitRef)
      switch (c) {
      case simcity.kEventIDSimEnteredBuilding:
        if (this.mAudioSimEntry)
          for (var c =
              0, e = this.mAudioSimEntry.length; c < e; ++c)
            simcity.SendSoundEvent(this.mAudioObjectID, this.mAudioSimEntry[c].instance);
        break;
      case simcity.kEventIDSimExitedBuilding:
        if (this.mAudioSimExit) {
          c = 0;
          for (e = this.mAudioSimExit.length; c < e; ++c)
            simcity.SendSoundEvent(this.mAudioObjectID, this.mAudioSimExit[c].instance)
        }
        break;
      case simcity.kEventIDShopperCarEnteredBuilding:
        if (this.mAudioShopperCarEnteredBuilding) {
          c = 0;
          for (e = this.mAudioShopperCarEnteredBuilding.length; c < e; ++c)
            simcity.SendSoundEvent(this.mAudioObjectID,
              this.mAudioShopperCarEnteredBuilding[c].instance)
        }
        break;
      case simcity.kEventIDShopperSimEnteredBuilding:
        if (this.mAudioShopperSimEnteredBuilding) {
          c = 0;
          for (e = this.mAudioShopperSimEnteredBuilding.length; c < e; ++c)
            simcity.SendSoundEvent(this.mAudioObjectID, this.mAudioShopperSimEnteredBuilding[c].instance)
        }
        break;
      case simcity.kEventIDWorkerCarEnteredBuilding:
        if (this.mAudioWorkerCarEnteredBuilding) {
          c = 0;
          for (e = this.mAudioWorkerCarEnteredBuilding.length; c < e; ++c)
            simcity.SendSoundEvent(this.mAudioObjectID, this.mAudioWorkerCarEnteredBuilding[c].instance)
        }
        break;
      case simcity.kEventIDWorkerSimEnteredBuilding:
        if (this.mAudioWorkerSimEnteredBuilding) {
          c = 0;
          for (e = this.mAudioWorkerSimEnteredBuilding.length; c < e; ++c)
            simcity.SendSoundEvent(this.mAudioObjectID, this.mAudioWorkerSimEnteredBuilding[c].instance)
        }
        break;
      case simcity.kEventIDResidentCarEnteredBuilding:
        if (this.mAudioResidentCarEnteredBuilding) {
          c = 0;
          for (e = this.mAudioResidentCarEnteredBuilding.length; c < e; ++c)
            simcity.SendSoundEvent(this.mAudioObjectID, this.mAudioResidentCarEnteredBuilding[c].instance)
        }
        break;
      case simcity.kEventIDResidentSimEnteredBuilding:
        if (this.mAudioResidentSimEnteredBuilding) {
          c =
            0;
          for (e = this.mAudioResidentSimEnteredBuilding.length; c < e; ++c)
            simcity.SendSoundEvent(this.mAudioObjectID, this.mAudioResidentSimEnteredBuilding[c].instance)
        }
        break;
      case simcity.kEventIDShopperCarExitedBuilding:
        if (this.mAudioShopperCarExitedBuilding) {
          c = 0;
          for (e = this.mAudioShopperCarExitedBuilding.length; c < e; ++c)
            simcity.SendSoundEvent(this.mAudioObjectID, this.mAudioShopperCarExitedBuilding[c].instance)
        }
        break;
      case simcity.kEventIDShopperSimExitedBuilding:
        if (this.mAudioShopperSimExitedBuilding) {
          c = 0;
          for (e =
              this.mAudioShopperSimExitedBuilding.length; c < e; ++c)
            simcity.SendSoundEvent(this.mAudioObjectID, this.mAudioShopperSimExitedBuilding[c].instance)
        }
        break;
      case simcity.kEventIDWorkerCarExitedBuilding:
        if (this.mAudioWorkerCarExitedBuilding) {
          c = 0;
          for (e = this.mAudioWorkerCarExitedBuilding.length; c < e; ++c)
            simcity.SendSoundEvent(this.mAudioObjectID, this.mAudioWorkerCarExitedBuilding[c].instance)
        }
        break;
      case simcity.kEventIDWorkerSimExitedBuilding:
        if (this.mAudioWorkerSimExitedBuilding) {
          c = 0;
          for (e = this.mAudioWorkerSimExitedBuilding.length; c <
            e; ++c)
            simcity.SendSoundEvent(this.mAudioObjectID, this.mAudioWorkerSimExitedBuilding[c].instance)
        }
        break;
      case simcity.kEventIDResidentCarExitedBuilding:
        if (this.mAudioResidentCarExitedBuilding) {
          c = 0;
          for (e = this.mAudioResidentCarExitedBuilding.length; c < e; ++c)
            simcity.SendSoundEvent(this.mAudioObjectID, this.mAudioResidentCarExitedBuilding[c].instance)
        }
        break;
      case simcity.kEventIDResidentSimExitedBuilding:
        if (this.mAudioResidentSimExitedBuilding) {
          c = 0;
          for (e = this.mAudioResidentSimExitedBuilding.length; c < e; ++c)
            simcity.SendSoundEvent(this.mAudioObjectID,
              this.mAudioResidentSimExitedBuilding[c].instance)
        }
        break;
      case simcity.kEventIDSaleMadeInBuilding:
        if (this.mAudioSaleMade) {
          c = 0;
          for (e = this.mAudioSaleMade.length; c < e; ++c)
            simcity.SendSoundEvent(this.mAudioObjectID, this.mAudioSaleMade[c].instance)
        }
      }
  }
};
simcity.cRolloverUI.prototype.HandleUIMessage = function (a, b, c) {
  switch (a) {
  case scrui.kMsgTypeButtonClicked:
    b === simcity.cRolloverUI.kWinIDRolloverItemButton ? (a = c.mUserData, b = this.mCurrentDataBindings[a], b.onItemClicked(this.mItemInfoArray[a])) : b === simcity.cRolloverUI.kWinIDRolloverItemButton2 ? (a = c.mUserData, b = this.mCurrentDataBindings[a], b.onSecondItemClicked(this.mItemInfoArray[a])) : 248008263 === b && (this.mCurrentUnitRef = this.mSelectedNonSimPropID = this.mSelectedUnitRef = null, this.CloseBuildingPopupMenu(),
      this.HideRollover(), scrui.PostGameCommand(scrui.BuildCommand(["toolmessage", scrui.IDFromName("DeselectAll")])))
  }
};
simcity.cRolloverUI.prototype.PrintDebugInfo = function () {
  simcity.DEBUG && scrui.DebugPrint("cRolloverUI mDataBindingMap = " + (this.mDataBindingMap ? Object.keys(this.mDataBindingMap).length : 0))
};
simcity.cRolloverUI.prototype.HideRollover = function () {
  this.mCloseWindowAudioOverrideID && simcity.SendSoundEvent(this.mAudioObjectID, this.mCloseWindowAudioOverrideID);
  this.StopQueryAudio();
  this.mShowingExtendedItems = !1;
  this.mCurrentLayout && (this.mCurrentLayout.DestroyControl(), this.mCurrentLayout = null);
  this.mCurrentUnitRef = this.mCurrentDataBindings = this.mItemInfoArray = this.mCurrentLayoutKey = null
};
simcity.cRolloverUI.prototype.BuildInitQueries = function (a, b) {
  var c = scrui.RequestStringFromUnitRef(a);
  return [scrui.BuildRequestQuery([simcity.kDataUnits, c, simcity.kDataUnitName]), scrui.BuildRequestQuery([simcity.kDataUnits, c, simcity.kDataNonSimProperties, b ? simcity.cRolloverUI.kPropUnitRolloverExtendedItemIDs : simcity.cRolloverUI.kPropUnitRolloverItemIDs]), scrui.BuildRequestQuery([simcity.kDataUnits, c, simcity.kDataNonSimProperties, simcity.cRolloverUI.kPropUnitRolloverIcon]), scrui.BuildRequestQuery([simcity.kDataUnits,
        c, simcity.kDataNonSimProperties, simcity.cRolloverUI.kPropUnitAudioRolloverOnEvents]), scrui.BuildRequestQuery([simcity.kDataUnits, c, simcity.kDataNonSimProperties, simcity.cRolloverUI.kPropUnitAudioRolloverOffEvents]), scrui.BuildRequestQuery([simcity.kDataUnits, c, simcity.kDataNonSimProperties, simcity.cRolloverUI.kPropUnitRolloverLayout]), scrui.BuildRequestQuery([simcity.kDataUnits, c, simcity.kDataAudioID]), scrui.BuildRequestQuery([simcity.kDataUnits, c, simcity.kDataNonSimProperties, simcity.cRolloverUI.kPropUnitAudioSimEnteredEvents]),
    scrui.BuildRequestQuery([simcity.kDataUnits, c, simcity.kDataNonSimProperties, simcity.cRolloverUI.kPropUnitAudioSimExitedEvents]), scrui.BuildRequestQuery([simcity.kDataUnits, c, simcity.kDataNonSimProperties, simcity.cRolloverUI.kPropUnitAudioShopperCarEnteredEvents]), scrui.BuildRequestQuery([simcity.kDataUnits, c, simcity.kDataNonSimProperties, simcity.cRolloverUI.kPropUnitAudioShopperSimEnteredEvents]), scrui.BuildRequestQuery([simcity.kDataUnits, c, simcity.kDataNonSimProperties, simcity.cRolloverUI.kPropUnitAudioWorkerCarEnteredEvents]),
    scrui.BuildRequestQuery([simcity.kDataUnits, c, simcity.kDataNonSimProperties, simcity.cRolloverUI.kPropUnitAudioWorkerSimEnteredEvents]), scrui.BuildRequestQuery([simcity.kDataUnits, c, simcity.kDataNonSimProperties, simcity.cRolloverUI.kPropUnitAudioResidentCarEnteredEvents]), scrui.BuildRequestQuery([simcity.kDataUnits, c, simcity.kDataNonSimProperties, simcity.cRolloverUI.kPropUnitAudioResidentSimEnteredEvents]), scrui.BuildRequestQuery([simcity.kDataUnits, c, simcity.kDataNonSimProperties, simcity.cRolloverUI.kPropUnitAudioShopperCarExitedEvents]),
    scrui.BuildRequestQuery([simcity.kDataUnits, c, simcity.kDataNonSimProperties, simcity.cRolloverUI.kPropUnitAudioShopperSimExitedEvents]), scrui.BuildRequestQuery([simcity.kDataUnits, c, simcity.kDataNonSimProperties, simcity.cRolloverUI.kPropUnitAudioWorkerCarExitedEvents]), scrui.BuildRequestQuery([simcity.kDataUnits, c, simcity.kDataNonSimProperties, simcity.cRolloverUI.kPropUnitAudioWorkerSimExitedEvents]), scrui.BuildRequestQuery([simcity.kDataUnits, c, simcity.kDataNonSimProperties, simcity.cRolloverUI.kPropUnitAudioResidentCarExitedEvents]),
    scrui.BuildRequestQuery([simcity.kDataUnits, c, simcity.kDataNonSimProperties, simcity.cRolloverUI.kPropUnitAudioResidentSimExitedEvents]), scrui.BuildRequestQuery([simcity.kDataUnits, c, simcity.kDataNonSimProperties, simcity.cRolloverUI.kPropUnitAudioSaleMadeEvents]), scrui.BuildRequestQuery([simcity.kDataUnits, c, simcity.kDataNonSimProperties, simcity.cRolloverUI.kPropUnitRolloverPopulationItemID]), scrui.BuildRequestQuery([simcity.kDataUnits, c, simcity.kDataBinAmount, simcity.kResourceIDPlague])]
};
simcity.cRolloverUI.prototype.ShowRollover = function (a, b) {
  this.HideRollover();
  if (a) {
    var c = this;
    scrui.RequestGameData(this.BuildInitQueries(a, b), function (d) {
      var e = d[0] ? scrui.LocaleStringFromLocaleProperty(d[0]) : null,
      f = d[1] ? d[1] : [],
      g = d[2];
      c.mAudioOnIDArray = d[3];
      c.mAudioOffIDArray = d[4];
      var h = d[5];
      if (h) {
        c.mAudioObjectID = d[6];
        c.mAudioSimEntry = d[7];
        c.mAudioSimExit = d[8];
        c.mAudioShopperCarEnteredBuilding = d[9];
        c.mAudioShopperSimEnteredBuilding = d[10];
        c.mAudioWorkerCarEnteredBuilding = d[11];
        c.mAudioWorkerSimEnteredBuilding =
          d[12];
        c.mAudioResidentCarEnteredBuilding = d[13];
        c.mAudioResidentSimEnteredBuilding = d[14];
        c.mAudioShopperCarExitedBuilding = d[15];
        c.mAudioShopperSimExitedBuilding = d[16];
        c.mAudioWorkerCarExitedBuilding = d[17];
        c.mAudioWorkerSimExitedBuilding = d[18];
        c.mAudioResidentCarExitedBuilding = d[19];
        c.mAudioResidentSimExitedBuilding = d[20];
        c.mAudioSaleMade = d[21];
        b && c.mCurrentUnitRef && (c.mRefreshTimer = simcity.cRolloverUI.kRolloverDelay);
        c.mCurrentUnitRef = a;
        c.mCurrentLayout = gUIManager.LoadAndCacheLayout(scrui.PathFromResourceKey(h),
            c.mParentControl);
        var i = c.mCurrentLayout.FindControlByID(simcity.cRolloverUI.kWinRightPointer),
        j = c.mCurrentLayout.FindControlByID(simcity.cRolloverUI.kWinLeftPointer);
        c.mCurrentLayout.SetVisibility(!0);
        i.SetVisibility(!1);
        j.SetVisibility(!1);
        i = c.mCurrentLayout.FindControlByID(simcity.cRolloverUI.kWinIDBuildingName);
        e && (i.SetVisibility(!0), i.SetLocaleText(e), e = i.GetTextHeight() + 10, e = Math.max(e, i.mHeight), i.SetPosition(i.mLeft, i.mTop, i.mWidth, e), i = c.mCurrentLayout.FindControlByID(simcity.cRolloverUI.kWinIDRolloverItemContainer),
          i.SetPosition(i.mLeft, e), c.mCurrentLayout.SetPosition(c.mCurrentLayout.mLeft, c.mCurrentLayout.mTop, c.mCurrentLayout.mWidth, e));
        c.mCurrentLayoutKey = h;
        (h = c.mCurrentLayout.FindControlByID(simcity.cRolloverUI.kWinIcon)) && (g ? h.SetWindowImage(scrui.PathFromResourceKey(g)) : h.SetVisibility(!1));
        c.InitItems(f, function () {
          b && c.ShowBuildingPopupMenu(a);
          c.mRefreshTimer = 0;
          if (c.mShowingExtendedItems = b) {
            var d = c.mCurrentLayout.FindControlByID(248008263);
            d.SetVisibility(true)
          } else {
            d = c.mCurrentLayout.FindControlByID(248008263);
            d.SetVisibility(false)
          }
        });
        f = c.mCurrentLayout.FindControlByID(simcity.cRolloverUI.kWinIDRolloverPopulation);
        c.mDataBindingMap.hasOwnProperty(d[22]) ? (g = c.mDataBindingMap[d[22]], c.mCurrentDataBindings.push(g), g.init(f)) : f.SetVisibility(!1);
        c.mOpenWindowAudioOverrideID = 0;
        c.mCloseWindowAudioOverrideID = 0;
        if (b)
          if (0 < d[23])
            c.mOpenWindowAudioOverrideID = 2682391739, c.mCloseWindowAudioOverrideID = 546785211, simcity.SendSoundEvent(c.mAudioObjectID, c.mOpenWindowAudioOverrideID);
          else if (c.mAudioOnIDArray && 0 < c.mAudioOnIDArray.length) {
            simcity.gRolloverManager.mLastAudioOffIDArray =
              c.mAudioOffIDArray;
            simcity.gRolloverManager.mLastAudioObjectID = c.mAudioObjectID;
            simcity.gRolloverManager.mLastAudioUnitSlot = c.mCurrentUnitRef.slot;
            d = 0;
            for (f = c.mAudioOnIDArray.length; d < f; ++d)
              simcity.QueueAudioQueryEvent(c.mAudioObjectID, c.mAudioOnIDArray[d].instance, c.mCurrentUnitRef.slot), simcity.audio.mLastQueryOverrideID = 0
          }
      }
    })
  }
};
simcity.cRolloverUI.prototype.InitItems = function (a, b) {
  var c = a.length;
  this.mItemInfoArray = Array(c);
  this.mCurrentDataBindings = Array(c);
  for (var d = 0; d < c; ++d) {
    var e = a[d],
    f = this.mDataBindingMap.hasOwnProperty(e);
    scrui.Assert(f, "no match found for rollover item ID: " + e + " building model id: " + scrui.RequestStringFromUnitRef(this.mCurrentUnitRef));
    f && (this.mCurrentDataBindings[d] = this.mDataBindingMap[e])
  }
  d = [];
  e = [];
  f = {
    argumentList : [scrui.RequestStringFromUnitRef(this.mCurrentUnitRef)]
  };
  simcity.GenerateDataBindingQueries(this.mCurrentDataBindings,
    d, f, e, !1, "initQueries");
  var g = this;
  simcity.RequestDataBindingData(d, g.mCurrentDataBindings, e, !1, function (a) {
    for (var d = g.mCurrentLayout.FindControlByID(simcity.cRolloverUI.kWinIDRolloverItemContainer), e = 0; e < c; ++e) {
      var f = g.mCurrentDataBindings[e],
      l = gUIManager.LoadAndCacheLayout(f.layoutPath, d),
      m = {
        dataBinding : f,
        layout : l
      };
      if (f.hasOwnProperty("stringData")) {
        var n = l.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemValue);
        if (n) {
          var p = f.stringData;
          n.SetLocaleText(new scrui.cLocaleString(p.tableID, p.stringID,
              p.fallbackText))
        }
      }
      if (f.hasOwnProperty("iconPath"))
        (n = l.FindControlByID(simcity.cRolloverUI.kWinIDRolloverItemIcon)) && n.SetWindowImage(f.iconPath);
      if (f.hasOwnProperty("onItemClicked"))
        if (n = l.FindControlByID(simcity.cRolloverUI.kWinIDRolloverItemButton))
          n.mUserData = e;
      if (f.hasOwnProperty("onSecondItemClicked"))
        if (n = l.FindControlByID(simcity.cRolloverUI.kWinIDRolloverItemButton2))
          n.mUserData = e;
      g.mItemInfoArray[e] = m;
      f.hasOwnProperty("init") && f.init(m, a[e])
    }
    g.mOriginalHeight = g.mCurrentLayout.mHeight;
    g.UpdateItems();
    g.UpdateItemPositions();
    b()
  })
};
simcity.cRolloverUI.prototype.UpdateItemPositions = function () {
  var a = 0,
  b = 0,
  c = this.mCurrentLayout.FindControlByID(simcity.cRolloverUI.kWinIDRolloverItemContainer),
  d = [0, 0, 0, 0],
  e = d.length,
  f = c.mWidth / e;
  if (c.mChildren)
    for (var g = 0, h = c.mChildren.length; g < h; ++g) {
      var i = c.mChildren[g];
      if (!1 !== i.mIsVisible) {
        for (var j = scrui.math.Clamp(Math.ceil(i.mWidth / f), 1, e), k = null, a = d.slice(), l = 0, m = e - j; l <= m; ++l) {
          for (var n = l + 1, p = l + j - 1; n < p; ++n)
            a[n] > a[l] && (a[l] = a[n]);
          if (null === k || a[l] < a[k])
            k = l
        }
        scrui.Assert(null !== k, "unable to fit rollover child item of width: " +
          i.mWidth);
        if (null !== k) {
          l = k * f;
          a = a[k];
          i.SetPosition(l, a);
          b = Math.max(b, a + i.mHeight);
          l = k;
          for (m = k + j; l < m; ++l)
            d[l] = a + i.mHeight;
          j = i.FindControlByID(simcity.cRolloverUI.kWinIDRolloverItemLeftBacking);
          i = i.FindControlByID(simcity.cRolloverUI.kWinIDRolloverItemRightBacking);
          j && i && (k = k < e / 2, j.SetVisibility(k), i.SetVisibility(!k))
        }
      }
    }
  this.mCurrentLayout.SetPosition(this.mCurrentLayout.mLeft, this.mCurrentLayout.mTop, this.mCurrentLayout.mWidth, this.mOriginalHeight + b)
};
simcity.cRolloverUI.prototype.UpdateItems = function () {
  var a = this.mCurrentDataBindings.length,
  b = [],
  c = [],
  d = {
    argumentList : [scrui.RequestStringFromUnitRef(this.mCurrentUnitRef)]
  };
  simcity.GenerateDataBindingQueries(this.mCurrentDataBindings, b, d, c, !1, "updateQueries");
  var e = this;
  simcity.RequestDataBindingData(b, e.mCurrentDataBindings, c, !1, function (b) {
    for (var c = 0; c < a; ++c) {
      var d = e.mCurrentDataBindings[c];
      if (d.hasOwnProperty("update")) {
        var i = e.mItemInfoArray[c];
        d.update(i, b[c]);
        if (d.hasOwnProperty("minimize") &&
          d.minimize == i.layout.mIsVisible) {
          i.layout.SetVisibility(!d.minimize);
          e.UpdateItems();
          e.UpdateItemPositions()
        }
      }
    }
    e.UpdateAlerts()
  })
};
simcity.cRolloverUI.kRolloverQueries = [scrui.BuildRequestQuery([simcity.kDataSelectedTool, simcity.kDataToolRolloverAnchor])];
simcity.cRolloverUI.prototype.Update = scrui.Client_ProfZone("RolloverUIUpdate", function (a) {
    var b = this;
    scrui.RequestGameData(simcity.cRolloverUI.kRolloverQueries, function (c) {
      c = c[0];
      b.mCurrentLayout && (b.mRefreshTimer -= a, 0 >= b.mRefreshTimer && (b.mRefreshTimer = simcity.cRolloverUI.kRefreshTime, b.UpdateItems()), b.PositionRollover(c))
    })
  });
simcity.cRolloverUI.prototype.PositionRollover = function (a) {
  if (a) {
    var b = this.mCurrentLayout.mHeight / 2,
    c = this.mCurrentLayout.mWidth / 1.5;
    if (a[0] + this.mCurrentLayout.mWidth > this.mParentControl.mWidth) {
      var c = -1 * c,
      d = this.mCurrentLayout.FindControlByID(simcity.cRolloverUI.kWinRightPointer),
      e = this.mCurrentLayout.FindControlByID(simcity.cRolloverUI.kWinLeftPointer);
      d.SetVisibility(!0);
      e.SetVisibility(!1);
      d.SetPosition(d.mLeft, this.mCurrentLayout.mHeight / 2)
    } else
      d = this.mCurrentLayout.FindControlByID(simcity.cRolloverUI.kWinRightPointer),
      e = this.mCurrentLayout.FindControlByID(simcity.cRolloverUI.kWinLeftPointer), d.SetVisibility(!1), e.SetVisibility(!0), e.SetPosition(e.mLeft, this.mCurrentLayout.mHeight / 2);
    if (simcity.IsTutorialInProgress() && simcity.gGlobalUIHandler.mTutorialCallout.mDataBinding && simcity.gGlobalUIHandler.mTutorialCallout.mDataBinding.hasOwnProperty("targetControl")) {
      var e = simcity.gGlobalUIHandler.mTutorialCallout.mDataBinding.targetControl(),
      d = simcity.gGlobalUIHandler.mTutorialCallout.mCallout.mDialogLayout,
      e = e.GetAbsolutePosition(),
      f = d.GetAbsolutePosition();
      e[0] > f[0] && (e[0] < f[0] + d.mWidth && e[1] > f[1] && e[1] < f[1] + d.mHeight) && d.SetPosition(d.mLeft, e[1] - d.mHeight - 40, d.mWidth, d.mHeight)
    }
    this.mCurrentLayout.SetPosition(a[0] - this.mCurrentLayout.mWidth / 2 + c, a[1] - b)
  } else
    this.mCurrentLayout.SetVisibility(!1)
};
simcity.cRolloverUI.prototype.UpdateAlerts = function () {
  var a = [scrui.BuildRequestQuery([simcity.kDataUnits, scrui.RequestStringFromUnitRef(this.mCurrentUnitRef), simcity.kDataRolloverAlertInfo])],
  b = this;
  scrui.RequestGameData(a, function (a) {
    var a = a[0],
    d = a.length,
    e = b.mCurrentLayout.FindControlByID(simcity.cRolloverUI.kWinAlertContainer);
    e.SetVisibility(0 < d);
    scrui.Assert(e.mChildren.length >= d, "more alerts than available slots in the UI!");
    for (var f = 0, g = e.mChildren.length; f < g; ++f) {
      var h = e.mChildren[f];
      h.SetVisibility(f <
        d);
      if (f < d) {
        var i = a[f];
        h.SetWindowImage(scrui.PathFromResourceKey(i.iconKey));
        i.text && h.SetTooltipLocaleText(scrui.LocaleStringFromLocaleProperty(i.text))
      }
    }
    e.SetVisibility(0 < d)
  })
};
simcity.cRolloverUI.prototype.CloseBuildingPopupMenu = function () {
  this.StopQueryAudio();
  if (null !== this.mBuildingPopupMenu && (this.mBuildingPopupMenu.Shutdown(), this.mBuildingPopupMenu = null, this.mCurrentLayout)) {
    var a = this.mCurrentLayout.FindControlByID(simcity.cRolloverUI.kWinMainPanel),
    b = this.mCurrentLayout.FindControlByID(simcity.cRolloverUI.kWinMenuContainer);
    this.mCurrentLayout.SetPosition(this.mCurrentLayout.mLeft, this.mCurrentLayout.mTop, this.mCurrentLayout.mWidth, this.mCurrentLayout.mHeight - b.mHeight);
    a.SetPosition(a.mLeft, a.mTop, a.mWidth, a.mHeight + b.mHeight);
    b.SetVisibility(!1);
    if (this.mAudioOffIDArray && this.mAudioObjectID && !this.mWaitingForRollover) {
      simcity.gRolloverManager.mLastAudioOffIDArray = null;
      a = simcity.gRolloverManager.mLastAudioObjectID = 0;
      for (b = this.mAudioOffIDArray.length; a < b; ++a)
        simcity.SendSoundEvent(this.mAudioObjectID, this.mAudioOffIDArray[a].instance)
    }
  }
};
simcity.cRolloverUI.prototype.ShowBuildingPopupMenu = function (a) {
  if (!simcity.gGlobalUIHandler.mIsSpectatorMode) {
    var b = this;
    b.StopQueryAudio();
    var c = [scrui.BuildRequestQuery([simcity.kDataSelectedUnit, simcity.kDataNonSimProperties, simcity.kPropertyUnitPopupItemIDs])];
    scrui.RequestGameData(c, function (c) {
      var e = (c = c[0]) && c.length;
      if (a && e) {
        var e = b.mBuildingPopupMenu && simcity.CompareUnitRefs(a, b.mBuildingPopupMenu.mUnitRef),
        f = simcity.gRolloverManager.mGlobalUI.mToolPaletteUIHandler,
        f = f.mEditedBuildingRef &&
          simcity.CompareUnitRefs(a, f.mEditedBuildingRef);
        if (!e && !f) {
          for (var e = new scrui.cPopupMenu, f = [], g = 0, h = c.length; g < h; ++g) {
            var i = c[g],
            j = b.mPopupDataBindingMap.hasOwnProperty(i);
            scrui.Assert(j, "no match found for popup item ID: " + i + " building model id: " + (b.mNonSimPropID ? scrui.DecimalToHex(b.mNonSimPropID) : 0));
            j && f.push(b.mPopupDataBindingMap[i])
          }
          c = b.mCurrentLayout.FindControlByID(simcity.cRolloverUI.kWinMenuContainer);
          e.SetPosition(0, 0);
          e.Init(c, f, a);
          b.mBuildingPopupMenu = e;
          c.SetVisibility(!0);
          e = b.mCurrentLayout.FindControlByID(simcity.cRolloverUI.kWinMainPanel);
          b.mCurrentLayout.SetPosition(b.mCurrentLayout.mLeft, b.mCurrentLayout.mTop, b.mCurrentLayout.mWidth, b.mCurrentLayout.mHeight + c.mHeight);
          e.SetPosition(e.mLeft, e.mTop, e.mWidth, e.mHeight - c.mHeight);
          b.mOriginalHeight += c.mHeight;
          simcity.gEventManager.TriggerEvent(simcity.gEventTypes.GENERICEVENT, b.mSelectedNonSimPropID, b.mSelectedUnitRef)
        }
      }
    })
  }
};
simcity.cRolloverUI.prototype.StopQueryAudio = function () {
  if (simcity.gRolloverManager.mLastAudioOffIDArray && simcity.gRolloverManager.mLastAudioObjectID)
    for (var a = 0, b = simcity.gRolloverManager.mLastAudioOffIDArray.length; a < b; ++a)
      simcity.StopUnitQueryEvent(simcity.gRolloverManager.mLastAudioObjectID, simcity.gRolloverManager.mLastAudioOffIDArray[a].instance, simcity.gRolloverManager.mLastAudioUnitSlot);
  else
    simcity.StopUnitQueryEvent(0, 0, 0);
  simcity.gRolloverManager.mLastAudioOffIDArray = null;
  simcity.gRolloverManager.mLastAudioObjectID =
    0
};
simcity.SimCityWorldController = {};
simcity.gSimCityWorldController = {
  mUIHandler : null,
  mUserID : null,
  mSimCityWorldData : null,
  Initialize : function () {
    this.mUIHandler = simcity.gSimCityWorldUIHandler;
    this.mUIHandler.Initialize()
  },
  Activate : function () {
    this.mUIHandler.Show()
  },
  Deactivate : function () {
    this.mUIHandler.Hide()
  },
  Destroy : function () {
    this.mUIHandler.Destroy()
  },
  ShowIdleView : function () {
    this.mUIHandler.ShowIdleView()
  },
  GetUserID : function () {
    return simcity.gSessionManager.mUserID
  }
};
simcity.gSimCityWorldController.Challenges = {
  mRequestNumberOfChallenges : 10,
  mChallenges : null,
  mCurrentIndex : 0,
  mStartIndex : 0,
  mCurrentRegionId : 0,
  mChallengeData : null,
  mServiceURLs : {
    GET_CHALLENGES : "/challengeService/getChallenges",
    GET_REGIONAL_CHALLENGE_LEADERBOARDS : "/challengeService/getRegionalChallengeLeaderboards",
    GET_REGIONAL_CHALLENGE_REGION_DETAILS : "/challengeService/getRegionalChallengeDetail",
    GET_GLOBAL_CHALLENGE_DETAILS : "/challengeService/getGlobalChallengeDetail"
  },
  MarkSuccessByID : function (a) {
    simcity.gSimCityWorldUIHandler.GetTab("GLOBAL_CHALLENGES_TAB").HideAcceptButtons(!0);
    if (null != simcity.gSimCityWorldController.Challenges.mChallenges)
      for (var b = 0; b < simcity.gSimCityWorldController.Challenges.mChallenges.length; b++)
        if (simcity.gSimCityWorldController.Challenges.mChallenges[b].ucId == a) {
          simcity.gSimCityWorldController.Challenges.mChallenges[b].status = "Y";
          break
        }
  },
  RemoveChallengeByID : function (a) {
    simcity.gSimCityWorldUIHandler.GetTab("GLOBAL_CHALLENGES_TAB").HideAcceptButtons(!1);
    if (null != simcity.gSimCityWorldController.Challenges.mChallenges)
      for (var b = 0; b < simcity.gSimCityWorldController.Challenges.mChallenges.length; b++)
        if (simcity.gSimCityWorldController.Challenges.mChallenges[b].ucId ==
          a) {
          simcity.gSimCityWorldController.Challenges.mChallenges.splice(b, 1);
          break
        }
  },
  LoadChallenges : function (a, b) {
    simcity.gSimCityWorldController.GetUserID();
    var c = {
      url : scrui.GetRestPath().replace("/simcity/rest", "/citylog/json") + simcity.gSimCityWorldController.Challenges.mServiceURLs.GET_CHALLENGES,
      onSuccess : function (b) {
        try {
          simcity.gSimCityWorldController.Challenges.mChallengeData = b.json.challengeResponse.challengeTransferObject
        } catch (c) {
          gErrorManager.Debug(c),
          simcity.gSimCityWorldController.Challenges.mChallengeData =
            []
        }
        "function" == typeof a && a(simcity.gSimCityWorldController.Challenges.mChallengeData)
      },
      onError : b,
      method : "get"
    };
    scrui.XHR.Request(c)
  },
  LoadRegionalChallengeLeaderboards : function (a, b, c, d, e) {
    a = {
      url : scrui.GetRestPath().replace("/simcity/rest", "/citylog/json") + simcity.gSimCityWorldController.Challenges.mServiceURLs.GET_REGIONAL_CHALLENGE_LEADERBOARDS,
      params : [["challengeId", a], ["startIndex", c * b], ["numberOfRecords", b + 1]],
      onSuccess : function (a) {
        var c = !0;
        a && a.json && (a.json.error ? "function" == typeof d && e(a.json) :
          "function" == typeof d && (c = (a = a.json.challengeLeaderboardResponse.challengeLeaderboards) && a.topRegions ? a.topRegions.length < b : !1, !c && a.topRegions && a.topRegions.pop(), d(a, c)))
      },
      onError : e,
      method : "get"
    };
    scrui.XHR.Request(a)
  },
  LoadRegionalChallengeRegionDetails : function (a, b, c, d) {
    a = {
      url : scrui.GetRestPath().replace("/simcity/rest", "/citylog/json") + simcity.gSimCityWorldController.Challenges.mServiceURLs.GET_REGIONAL_CHALLENGE_REGION_DETAILS,
      params : [["regionId", a], ["challengeId", b]],
      onSuccess : function (a) {
        a.json.error &&
        d && "function" === typeof d ? d(a.json) : "function" == typeof c && c(a.json.challengeResponse.challengeTransferObject)
      },
      onError : d,
      method : "get"
    };
    scrui.XHR.Request(a)
  },
  LoadGlobalChallengeDetails : function (a, b, c) {
    a = {
      url : scrui.GetRestPath().replace("/simcity/rest", "/citylog/json") + simcity.gSimCityWorldController.Challenges.mServiceURLs.GET_GLOBAL_CHALLENGE_DETAILS,
      params : [["challengeId", a], ["startIndex", 0], ["numberOfRecords", 1E3]],
      onSuccess : function (a) {
        "function" == typeof b && b(a.json.challengeResponse.challengeTransferObject[0])
      },
      onError : c,
      method : "get"
    };
    scrui.XHR.Request(a)
  },
  GoToPreviousChallenge : function () {
    0 < simcity.gSimCityWorldController.Challenges.mCurrentIndex && (simcity.gSimCityWorldController.Challenges.mCurrentIndex--, simcity.gSimCityWorldUIHandler.GetTab("GLOBAL_CHALLENGES_TAB").ShowExpandedView(simcity.gSimCityWorldController.Challenges.mChallenges[simcity.gSimCityWorldController.Challenges.mCurrentIndex]))
  },
  GoToNextChallenge : function () {
    simcity.gSimCityWorldController.Challenges.IsLastScreen() || (simcity.gSimCityWorldController.Challenges.mCurrentIndex++,
      simcity.gSimCityWorldUIHandler.GetTab("GLOBAL_CHALLENGES_TAB").ShowExpandedView(simcity.gSimCityWorldController.Challenges.mChallenges[simcity.gSimCityWorldController.Challenges.mCurrentIndex]))
  },
  LoadExpandedView : function (a) {
    a = a.GetParentLayout();
    simcity.gSimCityWorldController.Challenges.mCurrentIndex = a.index;
    simcity.gSimCityWorldController.Challenges.ShowExpandedView()
  },
  ShowExpandedView : function () {
    simcity.gSimCityWorldUIHandler.GetTab("GLOBAL_CHALLENGES_TAB").ShowExpandedView(simcity.gSimCityWorldController.Challenges.mChallenges[simcity.gSimCityWorldController.Challenges.mCurrentIndex])
  },
  GetPreviousTitleText : function () {
    var a = "";
    0 < simcity.gSimCityWorldController.Challenges.mCurrentIndex && (a = simcity.gSimCityWorldController.Challenges.mChallenges[simcity.gSimCityWorldController.Challenges.mCurrentIndex - 1].headline);
    return a
  },
  GetNextTitleText : function () {
    var a = "";
    simcity.gSimCityWorldController.Challenges.IsLastScreen() || (a = simcity.gSimCityWorldController.Challenges.mChallenges[simcity.gSimCityWorldController.Challenges.mCurrentIndex + 1].headline);
    return a
  },
  IsFirstScreen : function () {
    return 0 ===
    simcity.gSimCityWorldController.Challenges.mCurrentIndex
  },
  IsLastScreen : function () {
    return simcity.gSimCityWorldController.Challenges.mChallenges && simcity.gSimCityWorldController.Challenges.mCurrentIndex === simcity.gSimCityWorldController.Challenges.mChallenges.length - 1
  }
};
simcity.gSimCityWorldController.News = {
  mServiceURLs : {
    GET_CITYLOG_FEED : "/userFeedService/readFeed"
  },
  GetCitylogFeed : function (a) {
    if (simcity.cLauncher3D.mDataCache.mCitylogFeed)
      a(simcity.cLauncher3D.mDataCache.mCitylogFeed);
    else {
      var b = simcity.gSimCityWorldController.GetUserID();
      scrui.XHR.Request({
        url : simcity.cLauncher3D.mCityLogURL + simcity.gSimCityWorldController.News.mServiceURLs.GET_CITYLOG_FEED,
        params : [["user", b]],
        onSuccess : function (b) {
          b = b.json.feedResponse;
          simcity.cLauncher3D.mDataCache.mCitylogFeed = {};
          b && (simcity.cLauncher3D.mDataCache.mCitylogFeed = b, a && "function" === typeof a && a(b))
        },
        onError : function () {
          simcity.cLauncher3D.mDataCache.mCitylogFeed = {}

        },
        method : "get"
      })
    }
  }
};
simcity.gSimCityWorldController.Leaderboards = {
  mLeaderboardCache : null,
  mPageSize : 50,
  mServiceURLs : {
    GET_LEADERS_BY_GUID : "/leaderboards"
  },
  mLeaderboardScope : {
    GLOBAL : "GLOBAL",
    FRIENDS : "FRIENDS",
    MINE : "MINE"
  },
  mLeaderboardGuids : {
    STATS : {
      LARGEST_POPULATION : {
        id : "LBPopulation",
        iconNormal : "Graphics/GameEntry/SimCityWorld/LeaderboardIcons/LeaderboardIcon-PopulationOff.png",
        iconSelected : "Graphics/GameEntry/SimCityWorld/LeaderboardIcons/LeaderboardIcon-PopulationOn.png",
        label : new scrui.cLocaleString("GameEntry.json",
          "0x0e3e0238", "Population")
      },
      TOP_GDP : {
        id : "LBIncome",
        iconNormal : "Graphics/GameEntry/SimCityWorld/LeaderboardIcons/LeaderboardIcon-SimoleonsOff.png",
        iconSelected : "Graphics/GameEntry/SimCityWorld/LeaderboardIcons/LeaderboardIcon-SimoleonsOn.png",
        label : new scrui.cLocaleString("GameEntry.json", "0x0e3349df", "Simoleons")
      },
      WEALTH : {
        id : "LBWealth",
        iconNormal : "Graphics/GameEntry/SimCityWorld/LeaderboardIcons/LeaderboardIcon-WealthOff.png",
        iconSelected : "Graphics/GameEntry/SimCityWorld/LeaderboardIcons/LeaderboardIcon-WealthOn.png",
        label : new scrui.cLocaleString("GameEntry.json", "0x0eb8d4b6", "Wealth")
      },
      MAYOR_RATING : {
        id : "LBMayorRating",
        iconNormal : "Graphics/GameEntry/SimCityWorld/LeaderboardIcons/LeaderboardIcon-MayorRatingOff.png",
        iconSelected : "Graphics/GameEntry/SimCityWorld/LeaderboardIcons/LeaderboardIcon-MayorRatingOn.png",
        label : new scrui.cLocaleString("GameEntry.json", "0x0e3ca15a", "Mayor Rating")
      },
      HIGHEST_EDUCATION_PC : {
        id : "LBEducation",
        iconNormal : "Graphics/GameEntry/SimCityWorld/LeaderboardIcons/LeaderboardIcon-EducationOff.png",
        iconSelected : "Graphics/GameEntry/SimCityWorld/LeaderboardIcons/LeaderboardIcon-EducationOn.png",
        label : new scrui.cLocaleString("GameEntry.json", "0x0e334a29", "Education")
      },
      HIGHEST_CRIME_PC : {
        id : "LBCrime",
        iconNormal : "Graphics/GameEntry/SimCityWorld/LeaderboardIcons/LeaderboardIcon-CrimeOff.png",
        iconSelected : "Graphics/GameEntry/SimCityWorld/LeaderboardIcons/LeaderboardIcon-CrimeOn.png",
        label : new scrui.cLocaleString("GameEntry.json", "0x0e334b54", "Crime")
      },
      LOWEST_SICK_PC : {
        id : "LBHealth",
        iconNormal : "Graphics/GameEntry/SimCityWorld/LeaderboardIcons/LeaderboardIcon-HealthOff.png",
        iconSelected : "Graphics/GameEntry/SimCityWorld/LeaderboardIcons/LeaderboardIcon-HealthOn.png",
        label : new scrui.cLocaleString("GameEntry.json", "0x0e334a06", "Healthiest")
      },
      HIGHEST_SICK_PC : {
        id : "LBSickness",
        iconNormal : "Graphics/GameEntry/SimCityWorld/LeaderboardIcons/LeaderboardIcon-SicknessOff.png",
        iconSelected : "Graphics/GameEntry/SimCityWorld/LeaderboardIcons/LeaderboardIcon-SicknessOn.png",
        label : new scrui.cLocaleString("GameEntry.json", "0x0e3349e6", "Sickness")
      },
      TOP_POLLUTERS : {
        id : "LBPollution",
        iconNormal : "Graphics/GameEntry/SimCityWorld/LeaderboardIcons/LeaderboardIcon-PollutionOff.png",
        iconSelected : "Graphics/GameEntry/SimCityWorld/LeaderboardIcons/LeaderboardIcon-PollutionOn.png",
        label : new scrui.cLocaleString("GameEntry.json", "0x0e334a20", "Pollution")
      },
      LEAST_POLLUTERS : {
        id : "LBGreen",
        iconNormal : "Graphics/GameEntry/SimCityWorld/LeaderboardIcons/LeaderboardIcon-GreenOff.png",
        iconSelected : "Graphics/GameEntry/SimCityWorld/LeaderboardIcons/LeaderboardIcon-GreenOn.png",
        label : new scrui.cLocaleString("GameEntry.json", "0x0e334a17", "Greenest")
      }
    },
    BIG_BUSINESS : {
      TRADING : {
        id : "LBTrading",
        iconNormal : "Graphics/GameEntry/SimCityWorld/LeaderboardIcons/LeaderboardIcon-TradeOff.png",
        iconSelected : "Graphics/GameEntry/SimCityWorld/LeaderboardIcons/LeaderboardIcon-TradeOn.png",
        label : new scrui.cLocaleString("GameEntry.json", "0x0e4da0a5", "trading")
      },
      CASINO : {
        id : "LBCasino",
        iconNormal : "Graphics/GameEntry/SimCityWorld/LeaderboardIcons/LeaderboardIcon-CasinoOff.png",
        iconSelected : "Graphics/GameEntry/SimCityWorld/LeaderboardIcons/LeaderboardIcon-CasinoOn.png",
        label : new scrui.cLocaleString("GameEntry.json", "0x0e4da0ad", "Casino")
      },
      ELECTRONICS : {
        id : "LBElectronics",
        iconNormal : "Graphics/GameEntry/SimCityWorld/LeaderboardIcons/LeaderboardIcon-ElectronicsOff.png",
        iconSelected : "Graphics/GameEntry/SimCityWorld/LeaderboardIcons/LeaderboardIcon-ElectronicsOn.png",
        label : new scrui.cLocaleString("GameEntry.json", "0x0e4da0b3", "Electronics")
      },
      PETROLEUM : {
        id : "LBPetroleum",
        iconNormal : "Graphics/GameEntry/SimCityWorld/LeaderboardIcons/LeaderboardIcon-PetroleumOff.png",
        iconSelected : "Graphics/GameEntry/SimCityWorld/LeaderboardIcons/LeaderboardIcon-PetroleumOn.png",
        label : new scrui.cLocaleString("GameEntry.json", "0x0e4da0bd", "Petroleum")
      },
      METALS : {
        id : "LBMetals",
        iconNormal : "Graphics/GameEntry/SimCityWorld/LeaderboardIcons/LeaderboardIcon-MetalsOff.png",
        iconSelected : "Graphics/GameEntry/SimCityWorld/LeaderboardIcons/LeaderboardIcon-MetalsOn.png",
        label : new scrui.cLocaleString("GameEntry.json", "0x0e4da0c5", "Metals")
      }
    }
  },
  Initialize : function () {},
  LoadLeaderboardByGuid : function (a, b, c, d) {
    if (simcity.gSimCityWorldController.Leaderboards.mLeaderboardCache && !d)
      b();
    else {
      var e = 0,
      f;
      for (f in simcity.gSimCityWorldController.Leaderboards.mLeaderboardScope)
        e++;
      var g = !1,
      h = function (a) {
        e--;
        0 >= e && (g && "function" == typeof c ? c(a) : !g && "function" == typeof b && b(a))
      },
      d = function (a) {
        h(a)
      },
      i = function (a) {
        g = !0;
        h(a)
      };
      for (f in simcity.gSimCityWorldController.Leaderboards.mLeaderboardScope)
        simcity.gSimCityWorldController.Leaderboards.LoadLeaderboard(f, a, d, i)
    }
  },
  CacheLeaderboardResponse : function (a, b) {
    simcity.gSimCityWorldController.Leaderboards.mLeaderboardCache || (simcity.gSimCityWorldController.Leaderboards.mLeaderboardCache = {});
    if (!b || !b.leaderboards)
      scrui.DebugPrint("bad leaderboard data");
    else {
      var c = b.leaderboards;
      if (c && c.length)
        for (var d = 0; d < c.length; ++d) {
          var e = c[d].id;
          simcity.gSimCityWorldController.Leaderboards.mLeaderboardCache[e] ||
          (simcity.gSimCityWorldController.Leaderboards.mLeaderboardCache[e] = {});
          simcity.gSimCityWorldController.Leaderboards.mLeaderboardCache[e][a] ? simcity.gSimCityWorldController.Leaderboards.mLeaderboardCache[e][a].leaderboardEntries = simcity.gSimCityWorldController.Leaderboards.mLeaderboardCache[e][a].leaderboardEntries.concat(c[d].leaderboardEntries) : simcity.gSimCityWorldController.Leaderboards.mLeaderboardCache[e][a] = c[d];
          c[d].leaderboardEntries.length > simcity.gSimCityWorldController.Leaderboards.mPageSize ?
          (simcity.gSimCityWorldController.Leaderboards.mLeaderboardCache[e][a].hasMoreData = !0, simcity.gSimCityWorldController.Leaderboards.mLeaderboardCache[e][a].leaderboardEntries.pop()) : simcity.gSimCityWorldController.Leaderboards.mLeaderboardCache[e][a].hasMoreData = !1
        }
      else
        e = c.guid, simcity.gSimCityWorldController.Leaderboards.mLeaderboardCache[e] || (simcity.gSimCityWorldController.Leaderboards.mLeaderboardCache[e] = {}), simcity.gSimCityWorldController.Leaderboards.mLeaderboardCache[e][a] = c
    }
  },
  LoadLeaderboard : function (a,
    b, c, d, e) {
    e || (e = 0);
    var f = simcity.gSimCityWorldController.GetUserID(),
    b = {
      url : (scrui.GetRestPath().replace("/simcity/rest", "/citylog/json") + simcity.gSimCityWorldController.Leaderboards.mServiceURLs.GET_LEADERS_BY_GUID).replace("/json", ""),
      params : [["userId", f], ["filter", a], ["ids", b], ["count", this.mPageSize + 1], ["start", e]],
      onSuccess : function (b) {
        simcity.gSimCityWorldController.Leaderboards.CacheLeaderboardResponse(a, b.json);
        "function" === typeof c && c(b)
      },
      onError : d,
      method : "get"
    };
    scrui.XHR.Request(b)
  },
  LoadNextPageLeaderboard : function (a,
    b, c, d) {
    var e = 0,
    f = simcity.gSimCityWorldController.Leaderboards.mLeaderboardCache[b][a];
    f && !0 == f.hasMoreData && (e = f.leaderboardEntries.length);
    simcity.gSimCityWorldController.Leaderboards.LoadLeaderboard(a, b, function () {
      var a = f.leaderboardEntries,
      b = [];
      a && (b = a.slice(e, a.length));
      typeof c === "function" && c(b)
    }, d, e)
  },
  LoadRegionDetails : function (a, b, c, d) {
    a = {
      url : (scrui.GetRestPath().replace("/simcity/rest", "/citylog/json") + simcity.gSimCityWorldController.Leaderboards.mServiceURLs.GET_LEADERS_BY_GUID).replace("/json",
        "") + "/" + b,
      params : [["regionId", a]],
      onSuccess : function (a) {
        "function" === typeof c && c(a.json)
      },
      onError : function (a) {
        "function" === typeof d && d(a)
      },
      method : "get"
    };
    scrui.XHR.Request(a)
  },
  ClearLeaderboardCache : function () {
    simcity.gSimCityWorldController.Leaderboards.mLeaderboardCache = null
  }
};
simcity.gSimCityWorldController.GlobalMarket = {
  kResourceList : {
    coal : {
      color : "#FFD919",
      onIcon : "GlobalMarket-Icon-Coal-On.png",
      offIcon : "GlobalMarket-Icon-Coal-Off.png",
      dot : "GlobalMarket-Dot-FFD919.png",
      tri : "GlobalMarket-Triangle-FFD919.png"
    },
    OreRaw : {
      color : "#2FA5F4",
      onIcon : "GlobalMarket-Icon-RawOre-On.png",
      offIcon : "GlobalMarket-Icon-RawOre-Off.png",
      dot : "GlobalMarket-Dot-2FA5F4.png",
      tri : "GlobalMarket-Triangle-2FA5F4.png"
    },
    Metal : {
      color : "#00DFBB",
      onIcon : "GlobalMarket-Icon-Metals-On.png",
      offIcon : "GlobalMarket-Icon-Metals-Off.png",
      dot : "GlobalMarket-Dot-00DFBB.png",
      tri : "GlobalMarket-Triangle-00DFBB.png"
    },
    Alloy : {
      color : "#FF8A19",
      onIcon : "GlobalMarket-Icon-Alloy-On.png",
      offIcon : "GlobalMarket-Icon-Alloy-Off.png",
      dot : "GlobalMarket-Dot-FF8A19.png",
      tri : "GlobalMarket-Triangle-FF8A19.png"
    },
    Fuel : {
      color : "#7D3DFF",
      onIcon : "GlobalMarket-Icon-Fuel-On.png",
      offIcon : "GlobalMarket-Icon-Fuel-Off.png",
      dot : "GlobalMarket-Dot-7D3DFF.png",
      tri : "GlobalMarket-Triangle-7D3DFF.png"
    },
    OilCrude : {
      color : "#9CBB7F",
      onIcon : "GlobalMarket-Icon-CrudeOil-On.png",
      offIcon : "GlobalMarket-Icon-CrudeOil-Off.png",
      dot : "GlobalMarket-Dot-9CBB7F.png",
      tri : "GlobalMarket-Triangle-9CBB7F.png"
    },
    Plastic : {
      color : "#AA5EE5",
      onIcon : "GlobalMarket-Icon-Plastics-On.png",
      offIcon : "GlobalMarket-Icon-Plastics-Off.png",
      dot : "GlobalMarket-Dot-AA5EE5.png",
      tri : "GlobalMarket-Triangle-AA5EE5.png"
    },
    Electronics : {
      color : "#F5756A",
      onIcon : "GlobalMarket-Icon-Electronics-On.png",
      offIcon : "GlobalMarket-Icon-Electronics-Off.png",
      dot : "GlobalMarket-Dot-F5756A.png",
      tri : "GlobalMarket-Triangle-F5756A.png"
    },
    Computer : {
      color : "#00B8B8",
      onIcon : "GlobalMarket-Icon-Computers-On.png",
      offIcon : "GlobalMarket-Icon-Computers-Off.png",
      dot : "GlobalMarket-Dot-00B8B8.png",
      tri : "GlobalMarket-Triangle-00B8B8.png"
    },
    Television : {
      color : "#91D919",
      onIcon : "GlobalMarket-Icon-TVs-On.png",
      offIcon : "GlobalMarket-Icon-TVs-Off.png",
      dot : "GlobalMarket-Dot-91D919.png",
      tri : "GlobalMarket-Triangle-91D919.png"
    }
  },
  kResourceOrder : "coal OilCrude OreRaw Metal Alloy Fuel Plastic Electronics Computer Television".split(" "),
  mServiceURLs : {
    GET_MARKET : "/market/"
  },
  GetRandomData : function (a) {
    var b = new Date,
    c = new Date(b.valueOf() -
        864E5 * a);
    return (new simcity.cDataGenerator(simcity.gUIToolbox.GetKeys(simcity.gSimCityWorldController.GlobalMarket.kResourceList), 6 * a, 0, 400, c, b)).GetData()
  },
  GetResources : function (a, b, c, d, e) {
    scrui.XHR.Request({
      url : simcity.cLauncher3D.mRestServerURL + simcity.gSimCityWorldController.GlobalMarket.mServiceURLs.GET_MARKET + a + "/resource/" + b + "/history.json",
      params : [["numberOfDays", c]],
      onSuccess : function (a) {
        d && "function" == typeof d && d(a.json)
      },
      onError : function (a) {
        e && "function" == typeof e && e(a)
      },
      method : "get"
    })
  },
  GetMarket : function (a, b, c, d) {
    scrui.XHR.Request({
      url : simcity.cLauncher3D.mRestServerURL + simcity.gSimCityWorldController.GlobalMarket.mServiceURLs.GET_MARKET + a + ".json",
      onSuccess : function (a) {
        for (var a = a.json.resources, b = {}, d = simcity.gSimCityWorldController.GlobalMarket.kResourceOrder, h = 0, i = a.length; h < i; h++)
           - 1 !== d.indexOf(a[h].name) && (b[a[h].name] = a[h]);
        c && "function" == typeof c && c(b)
      },
      onError : function (a) {
        d && "function" == typeof d && d(a)
      },
      method : "get"
    })
  },
  GetAllMarket : function (a, b, c, d) {
    scrui.XHR.Request({
      url : simcity.cLauncher3D.mRestServerURL +
      simcity.gSimCityWorldController.GlobalMarket.mServiceURLs.GET_MARKET + a + ".json",
      onSuccess : function (a) {
        a = a.json.resources;
        c && "function" == typeof c && c(a)
      },
      onError : function (a) {
        d && "function" == typeof d && d(a)
      },
      method : "get"
    })
  },
  GetResource : function (a, b, c, d, e) {
    scrui.XHR.Request({
      url : simcity.cLauncher3D.mRestServerURL + simcity.gSimCityWorldController.GlobalMarket.mServiceURLs.GET_MARKET + a + "/resource/" + b + "/history.json",
      params : [["numberOfDays", c]],
      onSuccess : function (a) {
        d && "function" == typeof d && d(a.json)
      },
      onError : function (a) {
        e &&
        "function" == typeof e && e(a)
      },
      method : "get"
    })
  },
  TestMarketResources : function () {
    var a = this,
    b = function () {},
    c = function () {};
    this.GetAllMarket("truck", 31, function (d) {
      for (var e = 0, f = d.length; e < f; e++)
        a.GetResource("truck", d[e].name, 31, c, b)
    }, b)
  }
};
simcity.databindings.DataBindingsCitySpecializationGuide = {};
simcity.UIToolCategory_Casino = 200935300;
simcity.UIToolCategory_EducationE2 = 1779926452;
simcity.UIToolCategory_EducationE3 = 1779926453;
simcity.UIToolCategory_Education = 2510935805;
simcity.UI_ToolCategory_Electronics = 3202467646;
simcity.UI_ToolCategory_Oil = 981044951;
simcity.UI_ToolCategory_Trade = 1959603888;
simcity.UI_ToolCategory_Mining = 2947051645;
simcity.Specializations = {};
simcity.Specializations.UnGuided = 1;
simcity.Specializations.Metals = 2;
simcity.Specializations.Petroleum = 3;
simcity.Specializations.Gambling = 4;
simcity.Specializations.Electronics = 5;
simcity.Specializations.Trade = 6;
simcity.Specializations.Education = 7;
simcity.kActiveSpecializations = [simcity.Specializations.Gambling, simcity.Specializations.Education, simcity.Specializations.Petroleum, simcity.Specializations.Metals, simcity.Specializations.Electronics, simcity.Specializations.Trade];
simcity.SpecializationIndexFromID = function (a) {
  for (var b = 0; b < simcity.kActiveSpecializations.length; b++)
    if (simcity.kActiveSpecializations[b] == a)
      return b
};
simcity.ResourcesExistForSpecialization = function (a) {
  var b = !1;
  if (a = simcity.kSpecializationDataBindings[a])
    if (a.hasOwnProperty("resourceBinsToCheck")) {
      var c = [],
      d;
      for (d in a.resourceBinsToCheck)
        c.push(scrui.BuildRequestQuery([simcity.kDataBinAmount, a.resourceBinsToCheck[d]]));
      scrui.RequestGameData(c, function (a) {
        for (var c = 0; c < a.length; c++)
          0 < a[c] && (b = !0)
      })
    } else
      return !0;
  return b
};
simcity.GetCitySpecializationDatabindingFromCategoryID = function (a) {
  for (var b = 0; b < simcity.kActiveSpecializations.length; b++)
    for (var c = simcity.kSpecializationDataBindings[simcity.kActiveSpecializations[b]].uiToolCategory, d = 0; d < c.length; d++)
      if (c[d] == a)
        return simcity.kSpecializationDataBindings[simcity.kActiveSpecializations[b]];
  return null
};
simcity.kSpecializationDataBindings = {};
simcity.kSpecializationDataBindings[simcity.Specializations.Metals] = {
  specializationID : simcity.Specializations.Metals,
  iconPath : "Graphics/Common/Icons/icn-shield-metal-norm.png",
  iconPathHL : "Graphics/Common/Icons/icn-shield-metal-on.png",
  nameString : new scrui.cLocaleString("CitySpecializationGuide.json", "0x0e54630b", "Metals"),
  descriptionString : new scrui.cLocaleString("CitySpecializationGuide.json", "0x0e5469fa", "Metals"),
  screenshotPath : "Graphics/Common/Icons/icn-shield-metal-norm.png",
  missionIDs : [],
  uiToolCategory : [simcity.UI_ToolCategory_Mining],
  selectionUnit : 3228802589,
  inDemo : !1,
  resourceBinsToCheck : [simcity.kResourceIDHasCoal]
};
simcity.kSpecializationDataBindings[simcity.Specializations.Petroleum] = {
  specializationID : simcity.Specializations.Petroleum,
  iconPath : "Graphics/Common/Icons/icn-shield-petrol-norm.png",
  iconPathHL : "Graphics/Common/Icons/icn-shield-petrol-on.png",
  nameString : new scrui.cLocaleString("CitySpecializationGuide.json", "0x0e54630c", "PETROLEUM"),
  descriptionString : new scrui.cLocaleString("CitySpecializationGuide.json", "0x0e5469fb", "PETROLEUM"),
  screenshotPath : "Graphics/Common/Icons/icn-shield-petrol-norm.png",
  missionIDs : [],
  uiToolCategory : [simcity.UI_ToolCategory_Oil],
  selectionUnit : 2304903770,
  inDemo : !1,
  resourceBinsToCheck : [simcity.kResourceIDHasOil]
};
simcity.kSpecializationDataBindings[simcity.Specializations.Gambling] = {
  specializationID : simcity.Specializations.Gambling,
  iconPath : "Graphics/Common/Icons/icn-shield-gambling-norm.png",
  iconPathHL : "Graphics/Common/Icons/icn-shield-gambling-on.png",
  nameString : new scrui.cLocaleString("CitySpecializationGuide.json", "0x0e54630d", "GAMBLING"),
  descriptionString : new scrui.cLocaleString("CitySpecializationGuide.json", "0x0e558b67", "GAMBLING"),
  screenshotPath : "SpecializationMarqueeImages/Marquee_Specialization-gambling.jpg",
  missionIDs : "MSBusinessGamblingBigGamble1 MSBusinessGamblingBigGamble2 MSBusinessGamblingBigGamble3 MSBusinessGamblingBigGamble4 MSBusinessGamblingBigGamble5 MSBusinessGamblingBigGamble6 MSBusinessGamblingBigGamble7 MSBusinessGamblingBigGamble8 MSBusinessGamblingBigGamble9 MSBusinessGamblingBigGamble10 MSBusinessGamblingBigGamble11 MSBusinessGamblingBigGamble12 MSBusinessGamblingBigGamble13 MSBusinessGamblingBigGamble14 MSBusinessGamblingBigGamble15 MSBusinessGamblingBigGamble16 MSBusinessGamblingBigGamble17".split(" "),
  uiToolCategory : [simcity.UIToolCategory_Casino],
  selectionUnit : 3742950856,
  inDemo : !0
};
simcity.kSpecializationDataBindings[simcity.Specializations.Electronics] = {
  specializationID : simcity.Specializations.Electronics,
  iconPath : "Graphics/Common/Icons/icn-shield-electronic-norm.png",
  iconPathHL : "Graphics/Common/Icons/icn-shield-electronic-on.png",
  nameString : new scrui.cLocaleString("CitySpecializationGuide.json", "0x0e54630e", "ELECTRONICS"),
  descriptionString : new scrui.cLocaleString("CitySpecializationGuide.json", "0x0e558b68", "ELECTRONICS"),
  screenshotPath : "Graphics/Common/Icons/icn-shield-electronic-norm.png",
  missionIDs : [],
  uiToolCategory : [simcity.UI_ToolCategory_Electronics],
  selectionUnit : 342194522,
  inDemo : !1
};
simcity.kSpecializationDataBindings[simcity.Specializations.Trade] = {
  specializationID : simcity.Specializations.Trade,
  iconPath : "Graphics/Common/Icons/icn-shield-trade-norm.png",
  iconPathHL : "Graphics/Common/Icons/icn-shield-trade-on.png",
  nameString : new scrui.cLocaleString("CitySpecializationGuide.json", "0x0e54630f", "TRADE"),
  descriptionString : new scrui.cLocaleString("CitySpecializationGuide.json", "0x0e558b69", "TRADE"),
  screenshotPath : "Graphics/Common/Icons/icn-shield-trade-norm.png",
  missionIDs : [],
  uiToolCategory : [simcity.UI_ToolCategory_Trade],
  selectionUnit : 1543642725,
  inDemo : !1
};
simcity.kSpecializationDataBindings[simcity.Specializations.Education] = {
  specializationID : simcity.Specializations.Education,
  iconPath : "Graphics/Common/Icons/icn-shield-edu-norm.png",
  iconPathHL : "Graphics/Common/Icons/icn-shield-edu-on.png",
  nameString : new scrui.cLocaleString("CitySpecializationGuide.json", "0x0e1cf6b5", "EDUCATION"),
  descriptionString : new scrui.cLocaleString("CitySpecializationGuide.json", "0x0e558b6a", "EDUCATION"),
  screenshotPath : "SpecializationMarqueeImages/Marquee_Specialization-Education.jpg",
  missionIDs : "MSEducationBackToSchool1 MSEducationBackToSchool2 MSEducationBackToSchool3 MSEducationBackToSchool4 MSEducationBackToSchool5 MSEducationBackToSchool6 MSEducationBackToSchool7 MSEducationBackToSchool8 MSEducationBackToSchool9".split(" "),
  uiToolCategory : [simcity.UIToolCategory_Education],
  selectionUnit : 3461677465,
  inDemo : !0
};
simcity.GameControlIDs = {};
simcity.kControlIDBuildingName = 164191353;
simcity.kControlIDMaintenanceCost = 164377449;
simcity.kkControlIDTaxIncome = 164192022;
simcity.kControlIDNumberOfWorkers = 168014239;
simcity.kControlIDNumberOfShoppers = 197750299;
simcity.kControlIDNumberOfResidents = 164191422;
simcity.kControlIDHappinessTokens = 198951746;
simcity.kControlIDMoneyTokens = 198951747;
simcity.kControlIDProfitTokens = 203435126;
simcity.kControlIDCoalHarvestedAmount = 204814708;
simcity.kControlIDCoalDeliveredAmount = 204908320;
simcity.kControlIDCoalStoredAmount = 204908316;
simcity.kControlIDSoilToDig = 204908322;
simcity.kControlIDCoalSoldAmount = 205508430;
simcity.kControlIDCoalPerDelivery = 206025239;
simcity.kControlIDSoilAndCoalRemaining = 206466973;
simcity.kControlIDSoilLeftAmount = 206467485;
simcity.kControlIDSoilLeftTime = 206467650;
simcity.kControlIDCoalLeftAmount = 206467669;
simcity.kControlIDCoalLeftTime = 206467687;
simcity.kControlIDCoalProduction = 207397471;
simcity.kControlIDCoalHQLevelWindow = 208441118;
simcity.kControlIDCoalHQLevel = 208441127;
simcity.kControlIDCoalHQMaxLevel = 208441137;
simcity.kControlIDCoalHQLevelProgress = 208441104;
simcity.kControlIDCoalRemainingAmount = 196877744;
simcity.kControlIDCoalRemainingTime = 196877800;
simcity.kControlIDPollutionProduced = 196877705;
simcity.kControlIDOreStoredAmount = 2873022810;
simcity.kControlIDMetalStoredAmount = 4207013211;
simcity.kControlIDAlloyStoredAmount = 4120817091;
simcity.kControlIDPowerProduced = 196877530;
simcity.kControlIDPowerConsumed = 198938610;
simcity.kControlIDPowerCapacity = 198941503;
simcity.kControlIDPowerPercentageOfTotal = 210787029;
simcity.kControlIDWaterProduced = 197976457;
simcity.kControlIDWaterConsumed = 198939314;
simcity.kControlIDWaterPollution = 197979882;
simcity.kControlIDWaterStored = 198264575;
simcity.kControlIDWaterCapacity = 198941490;
simcity.kControlIDSewageStored = 199809589;
simcity.kControlIDSewageConsumed = 199808806;
simcity.kControlIDGarbageStored = 202933063;
simcity.kControlIDGarbageConsumed = 202933022;
simcity.kControlIDPatientCapacity = 198944453;
simcity.kControlIDFiresExtinguished = 200760505;
simcity.kControlIDNumberOfStudents = 201799760;
simcity.kControlIDE2StudentsIcon = 201803776;
simcity.kControlIDE3StudentsIcon = 201803777;
simcity.kControlIDResearchProgress = 208272252;
simcity.kControlIDE3StudentsIcon = 201803777;
simcity.kControlIDResearchProgress = 208272252;
simcity.kControlIDCoalSellPrice = 208443365;
simcity.kControlIDCoalBuyPrice = 208443368;
simcity.kControlIDMaxexTimer = 208455556;
simcity.kControlIDSlacker = 208664449;
simcity.kControlIDUnlockProgressText = 200675777;
simcity.kControlIDUnlockExplanationText = 200675844;
simcity.SpeedUI = {};
simcity.kSpeedPaused = 182362487;
simcity.kSpeedTurtle = 182362527;
simcity.kSpeedRabbit = 182362531;
simcity.kSpeedCheetah = 182362534;
simcity.cSpeedUIHandler = function () {
  this.UIHandler = scrui.cUIHandler;
  this.UIHandler();
  this.mPauseRingLayout = this.mSpeedUILayout = this.mParentControl = null;
  this.mSpeedButtons = []
};
goog.inherits(simcity.cSpeedUIHandler, scrui.cUIHandler);
simcity.cSpeedUIHandler.sPreviousGameSpeed = -1;
simcity.cSpeedUIHandler.kBtnIDPause = 158154341;
simcity.cSpeedUIHandler.kBtnIDTurtleSpeed = 158154345;
simcity.cSpeedUIHandler.kBtnIDRabbitSpeed = 158154349;
simcity.cSpeedUIHandler.kBtnIDCheetahSpeed = 158154352;
simcity.cSpeedUIHandler.kBtnIDPauseRingUnpause = 183464966;
simcity.cSpeedUIHandler.kSpeedButtonIDs = [simcity.cSpeedUIHandler.kBtnIDPause, simcity.cSpeedUIHandler.kBtnIDTurtleSpeed, simcity.cSpeedUIHandler.kBtnIDRabbitSpeed, simcity.cSpeedUIHandler.kBtnIDCheetahSpeed];
simcity.cSpeedUIHandler.kSpeedFactors = [simcity.kSpeedPaused, simcity.kSpeedTurtle, simcity.kSpeedRabbit, simcity.kSpeedCheetah];
simcity.cSpeedUIHandler.kSpeedButtonSounds = {};
simcity.cSpeedUIHandler.kSpeedButtonSounds[simcity.kSpeedPaused] = simcity.audio.kInstanceUIPause;
simcity.cSpeedUIHandler.kSpeedButtonSounds[simcity.kSpeedTurtle] = simcity.audio.kInstanceUIPlay1x;
simcity.cSpeedUIHandler.kSpeedButtonSounds[simcity.kSpeedRabbit] = simcity.audio.kInstanceUIPlay4x;
simcity.cSpeedUIHandler.kSpeedButtonSounds[simcity.kSpeedCheetah] = simcity.audio.kInstanceUIPlay8x;
simcity.cSpeedUIHandler.prototype.Activate = function () {
  scrui.cUIHandler.prototype.Activate.call(this)
};
simcity.cSpeedUIHandler.prototype.Deactivate = function () {
  scrui.cUIHandler.prototype.Deactivate.call(this)
};
simcity.cSpeedUIHandler.prototype.Init = function (a) {
  scrui.Assert(null !== a);
  var b = this,
  c = scrui.BuildRequestQuery(["gamespeed"]);
  scrui.RequestGameData([c], function (c) {
    b.mParentControl = a;
    b.mSpeedUILayout = gUIManager.LoadLayout("Layouts/SpeedPanel.js", b.mParentControl);
    b.CacheControls();
    b.mPauseRingLayout = gUIManager.FindControlByID(225473162);
    b.SetButtonStateFromSpeed(c[0])
  })
};
simcity.cSpeedUIHandler.prototype.Shutdown = function () {
  this.UncacheControls();
  this.mSpeedUILayout.DestroyControl();
  this.mSpeedUILayout = null
};
simcity.cSpeedUIHandler.prototype.HandleGameEvent = function (a, b) {
  switch (a) {
  case simcity.kGameMessageSpeedChanged:
    this.SetButtonStateFromSpeed(b.speed)
  }
};
simcity.cSpeedUIHandler.prototype.HandleUIMessage = function (a, b, c) {
  scrui.cUIHandler.prototype.HandleUIMessage.call(this, a, b, c);
  switch (a) {
  case scrui.kMsgTypeButtonClicked:
    a = simcity.cSpeedUIHandler.kSpeedButtonIDs.indexOf(b),
    -1 !== a && (a = simcity.cSpeedUIHandler.kSpeedFactors[a], a !== simcity.kSpeedPaused && (a = this.GetNextSpeed(a)), a === simcity.kSpeedPaused && !c.mIsSelected ? (scrui.PostGameCommand(scrui.BuildCommand(["unpause"])), this.sPreviousGameSpeed = -1) : (this.sPreviousGameSpeed = -1, scrui.PostGameCommand(scrui.BuildCommand(["setspeed",
              a])), this.SetButtonStateFromSpeed(a), simcity.SendSoundEvent(simcity.audio.kGlobalSoundObjectID, simcity.cSpeedUIHandler.kSpeedButtonSounds[a])))
  }
};
simcity.cSpeedUIHandler.prototype.IsPaused = function () {
  return this.GetGameSpeed() === simcity.kSpeedPaused
};
simcity.cSpeedUIHandler.prototype.GetGameSpeed = function () {
  for (var a = simcity.cSpeedUIHandler.kSpeedButtonIDs.length, b = 0; b < a; ++b)
    if (this.mSpeedButtons[b].mIsSelected)
      return simcity.cSpeedUIHandler.kSpeedFactors[b];
  scrui.Assert(!1, "no speed button is selected!");
  return null
};
simcity.cSpeedUIHandler.prototype.GetNextSpeed = function (a) {
  var b = simcity.kSpeedTurtle;
  switch (a) {
  case simcity.kSpeedTurtle:
    b = simcity.kSpeedRabbit;
    break;
  case simcity.kSpeedRabbit:
    b = simcity.kSpeedCheetah
  }
  return b
};
simcity.cSpeedUIHandler.prototype.SetButtonStateFromSpeed = function (a) {
  var b = simcity.cSpeedUIHandler.kSpeedFactors.indexOf(a);
  scrui.IsClientAttached() && scrui.Assert(-1 !== b, "invalid speed in SetButtonStateFromSpeed!");
  this.mSpeedButtons[0].SetSelected(a === simcity.kSpeedPaused);
  if (a !== simcity.kSpeedPaused)
    for (var c = 1, d = this.mSpeedButtons.length; c < d; ++c) {
      var e = this.mSpeedButtons[c];
      e.SetVisibility(!1)
    }
  -1 !== b && (e = this.mSpeedButtons[b], e.SetVisibility(!0), e.SetSelected(!0));
  this.mPauseRingLayout.SetVisibility(a ===
    simcity.kSpeedPaused)
};
simcity.cSpeedUIHandler.prototype.CacheControls = function () {
  for (var a = 0, b = simcity.cSpeedUIHandler.kSpeedButtonIDs.length; a < b; ++a) {
    var c = this.mSpeedUILayout.FindControlByID(simcity.cSpeedUIHandler.kSpeedButtonIDs[a]);
    scrui.Assert(null !== c, "no speed button (index: " + a + ") found!");
    this.mSpeedButtons[a] = c
  }
};
simcity.cSpeedUIHandler.prototype.UncacheControls = function () {
  this.mSpeedButtons = []
};
simcity.CursorAttachment = {};
simcity.cCursorAttachmentHandler = function () {
  this.UIHandler = scrui.cUIHandler;
  this.UIHandler();
  this.mDataBindings = this.mContainerWindow = this.mLayout = null;
  this.mCurrentDataBindings = [];
  this.mRefreshTimer = 0
};
goog.inherits(simcity.cCursorAttachmentHandler, scrui.cUIHandler);
simcity.cCursorAttachmentHandler.prototype.Init = function (a) {
  this.mLayout = gUIManager.LoadLayout("Layouts/CursorAttachments/CursorAttachmentRoot.js", a);
  this.mLayout.SetVisibility(!1);
  this.mContainerWindow = this.mLayout.FindControlByID(216301232);
  this.mDataBindings = simcity.CursorAttachmentDataBindings
};
simcity.cCursorAttachmentHandler.prototype.Shutdown = function () {
  this.mLayout && (this.mLayout.DestroyControl(), this.mLayout = null);
  this.mDataBindings = null;
  this.mCurrentDataBindings = []
};
simcity.cCursorAttachmentHandler.prototype.AddDataBinding = function (a) {
  var b = gUIManager.LoadAndCacheLayout(a.layoutPath, this.mContainerWindow);
  a.init(b);
  this.mCurrentDataBindings.push(a)
};
simcity.cCursorAttachmentHandler.prototype.HandleGameEvent = scrui.Client_ProfZone("cCursorAttachmentHandler.HandleGameEvent", function (a, b) {
    switch (a) {
    case simcity.kGameMessageBarGraphRolledOver:
      this.mLayout.SetVisibility(!0);
      this.AddDataBinding(simcity.CursorAttachmentBarResourceAmount);
      this.mLayout.SetVisibility(!1);
      break;
    case simcity.kGameMessageArrowRolledOver:
      this.mLayout.SetVisibility(!0);
      this.AddDataBinding(simcity.CursorAttachmentArrowResourceAmount);
      this.mLayout.SetVisibility(!1);
      break;
    case simcity.kGameMessageToolSelected:
      this.mLayout.SetVisibility(!0);
      switch (b.actionID) {
      case 323803849:
        this.AddDataBinding(simcity.CursorAttachmentGenericRoadTool);
        this.AddDataBinding(simcity.CursorAttachmentGenericCost);
        break;
      case 1877530409:
        if (this.mDataBindings.hasOwnProperty(b.toolID)) {
          var c = this.mDataBindings[b.toolID];
          this.AddDataBinding(c)
        }
      default:
        this.mDataBindings.hasOwnProperty(b.actionID) && (c = this.mDataBindings[b.actionID], this.AddDataBinding(c))
      }
      this.mLayout.SetVisibility(!1);
      break;
    case simcity.kGameMessagePlopToolSelected:
      this.mLayout.SetVisibility(!0);
      this.AddDataBinding(simcity.CursorAttachmentGenericPlop);
      this.mUnitRefString = "selectedTool";
      this.mDataBindings.hasOwnProperty(b.targetUnitEntryID) ? (c = this.mDataBindings[b.targetUnitEntryID], this.AddDataBinding(c)) : this.AddDataBinding(simcity.CursorAttachmentGenericCost);
      this.mLayout.SetVisibility(!1);
      break;
    case simcity.kGameMessageBarGraphRolledOff:
    case simcity.kGameMessageToolDeselected:
    case simcity.kGameMessagePlopToolDeselected:
      this.mLayout.SetVisibility(!1),
      this.mContainerWindow.DestroyChildren(),
      this.mCurrentDataBindings = []
    }
  });
simcity.cCursorAttachmentHandler.prototype.Update = scrui.Client_ProfZone("cCursorAttachmentHandler.Update", function (a) {
    if (0 < this.mCurrentDataBindings.length) {
      var b = simcity.IsMainTutorialInProgress() && simcity.gGlobalUIHandler.mTutorialCallout.mDataBinding && simcity.gGlobalUIHandler.mTutorialCallout.mDataBinding.showCursorAttachment;
      if (null !== gUIManager.mControlUnderMouse && !b)
        this.mLayout.SetVisibility(!1);
      else {
        this.mLayout.SetPosition(gUIManager.mMouseX, gUIManager.mMouseY, this.mLayout.mWidth, this.mLayout.mHeight);
        for (var c = this.mCurrentDataBindings, b = 0, d = c.length; b < d; ++b)
          c[b].updateAnimation(a);
        this.mRefreshTimer -= a;
        if (0 >= this.mRefreshTimer) {
          a = [];
          b = [];
          simcity.GenerateDataBindingQueries(c, a, {
            argumentList : [this.mUnitRefString]
          }, b, !1, "updateQueries");
          var e = this;
          simcity.RequestDataBindingData(a, c, b, !1, function (a) {
            for (var b = 0, d = e.mContainerWindow.mChildren.length; b < d; ++b) {
              var i = e.mContainerWindow.mChildren[b];
              i.SetVisibility(false)
            }
            var j = false;
            e.mLayout.SetVisibility(true);
            b = 0;
            for (d = c.length; b < d; ++b) {
              i = e.mContainerWindow.mChildren[b];
              i.SetVisibility(true);
              j = c[b].update(a[b]);
              i.SetVisibility(j);
              if (j)
                break
            }
            e.mLayout.SetVisibility(j)
          });
          this.mRefreshTimer = 500
        }
      }
    }
  });
simcity.CookieTools = {};
simcity.utils = {};
simcity.utils.SetCookie = function (a, b, c, d, e, f) {
  var g = new Date;
  g.setTime(g.getTime());
  c && (c *= 864E5);
  g = new Date(g.getTime() + c);
  document.cookie = a + "=" + escape(b) + (c ? ";expires=" + g.toGMTString() : "") + (d ? ";path=" + d : "") + (e ? ";domain=" + e : "") + (f ? ";secure" : "")
};
simcity.utils.GetCookie = function (a) {
  for (var b = document.cookie.split(";"), c = "", d = "", e = "", f = 0; f < b.length; f++)
    if (c = b[f].split("="), d = c[0].replace(/^\s+|\s+$/g, ""), d == a)
      return 1 < c.length && (e = unescape(c[1].replace(/^\s+|\s+$/g, ""))), e;
  return null
};
simcity.utils.DeleteCookie = function (a, b, c) {
  simcity.utils.GetCookie(a) && (document.cookie = a + "=" + (b ? ";path=" + b : "") + (c ? ";domain=" + c : "") + ";expires=Thu, 01-Jan-1970 00:00:01 GMT")
};
simcity.utils.GetKeys = function () {
  for (var a = document.cookie.replace(/((?:^|\s*;)[^\=]+)(?=;|$)|^\s*|\s*(?:\=[^;]*)?(?:\1|$)/g, "").split(/\s*(?:\=[^;]*)?;\s*/), b = 0; b < a.length; b++)
    a[b] = unescape(a[b]);
  return a
};
simcity.GameTime = {};
simcity.cGameTimeManager = function () {
  this.UIHandler = scrui.cUIHandler;
  this.UIHandler();
  this.mElapsedGameTimeDelta = this.mTotalElapsedGameTime = 0
};
goog.inherits(simcity.cGameTimeManager, scrui.cUIHandler);
simcity.cGameTimeManager.kElapsedTimeWrapLimit = 43200;
simcity.cGameTimeManager.prototype.Update = scrui.Client_ProfZone("cGameTimeManager.Update", function () {
    var a = [scrui.BuildRequestQuery(["totalElapsedGameTime"])],
    b = this;
    scrui.RequestGameData(a, function (a) {
      a = a[0];
      a < b.mTotalElapsedGameTime && (b.mTotalElapsedGameTime -= simcity.cGameTimeManager.kElapsedTimeWrapLimit);
      b.mElapsedGameTimeDelta = a - b.mTotalElapsedGameTime;
      b.mTotalElapsedGameTime = a
    })
  });
simcity.cGameTimeManager.prototype.GetTotalElapsedGameTimeSeconds = function () {
  return this.mTotalElapsedGameTime
};
simcity.cGameTimeManager.prototype.GetElapsedGameTimeSeconds = function () {
  return this.mElapsedGameTimeDelta
};
simcity.databindings.DataBindingsRollover = {};
simcity.RolloverItems = {};
simcity.RolloverItems.textColorBlack = "rgb(0,0,0)";
simcity.RolloverItems.textColorBlue = "rgb(38,94,148)";
simcity.RolloverItems.textColorUrgent = "rgb(255,0,0)";
simcity.RolloverItems.textColorWarning = "rgb(255,126,0)";
simcity.RolloverItems.textColorNormal = "rgb(0,190,4)";
simcity.RolloverItems.coalMapToBinConversion = 0.5;
simcity.RolloverItems.oilMapToBinConversion = 0.25;
simcity.RolloverItems.oreMapToBinConversion = 0.5;
simcity.StringID = {};
simcity.StringID.TableBuildingRollover = 3952736450;
simcity.StringID.TableResource = 37687336;
simcity.StringID.TableUnits = 1821810158;
simcity.StringID.TablePaletteInfoPanel = 1601344636;
simcity.StringID.TableGlobalUI = 786273738;
simcity.StringID.TableTextFeedbackToyRollover = 1160359624;
simcity.StringID.Coal = 3469052172;
simcity.StringID.Ore = 2530163463;
simcity.StringID.Metal = 2473969246;
simcity.StringID.Alloy = 504811494;
simcity.StringID.Fuel = 2661514705;
simcity.StringID.Plastic = 660835419;
simcity.StringID.Electronics = 234622623;
simcity.StringID.Television = 3098926425;
simcity.StringID.Computer = 2376682602;
simcity.StringID.Oil = 3212172292;
simcity.StringID.Recyclables = 238587598;
simcity.StringID.Water = 3255018052;
simcity.StringID.PrereqTownHall = "0x0db8fb71";
simcity.StringID.PrereqCityDep = "0x0ecb3d03";
simcity.StringID.DepUtilities = 237389216;
simcity.StringID.DepSafety = 3783054432;
simcity.StringID.DepEducation = 3536605888;
simcity.StringID.DepTourism = 4175214337;
simcity.StringID.DepFinance = 3244165290;
simcity.StringID.DepTransportation = 301497168;
simcity.SimTuning = {};
simcity.SimTuning.sadnessTaxLevelRW1 = 11;
simcity.SimTuning.sadnessTaxLevelRW2 = 10;
simcity.SimTuning.sadnessTaxLevelRW3 = 9;
simcity.SimTuning.sadnessTaxLevelCW1 = 11;
simcity.SimTuning.sadnessTaxLevelCW2 = 10;
simcity.SimTuning.sadnessTaxLevelCW3 = 9;
simcity.SimTuning.sadnessTaxLevelIW1 = 11;
simcity.SimTuning.sadnessTaxLevelIW2 = 10;
simcity.SimTuning.sadnessTaxLevelIW3 = 9;
simcity.SimTuning.happinessTaxLevelRW1 = 5;
simcity.SimTuning.happinessTaxLevelRW2 = 7;
simcity.SimTuning.happinessTaxLevelRW3 = 9;
simcity.SimTuning.happinessTaxLevelCW1 = 5;
simcity.SimTuning.happinessTaxLevelCW2 = 7;
simcity.SimTuning.happinessTaxLevelCW3 = 9;
simcity.SimTuning.happinessTaxLevelIW1 = 5;
simcity.SimTuning.happinessTaxLevelIW2 = 7;
simcity.SimTuning.happinessTaxLevelIW3 = 9;
simcity.SimTuning.PollutionNone = 0;
simcity.SimTuning.PollutionLow = 1;
simcity.SimTuning.PollutionMedium = 3E6;
simcity.SimTuning.PollutionHigh = 6E6;
simcity.SimTuning.PollutionExtreme = 12E6;
simcity.SimTuning.NuclearPower_Skill3Low = 100;
simcity.SimTuning.NuclearPower_Skill3Medium = 300;
simcity.SimTuning.NuclearPower_Skill3High = 500;
simcity.RolloverItems.kEmptySpace10pt = {
  layoutPath : "Layouts/Rollovers/RolloverItemEmptySpace10pt.js"
};
simcity.RolloverItems.kDivider = {
  layoutPath : "Layouts/Rollovers/RolloverItemDivider.js"
};
simcity.RolloverItems.Common = {
  UsingThisPeriod : function (a, b, c, d) {
    return a + b > c + d
  }
};
simcity.RolloverItems.HideDivider = function (a) {
  a.layout.FindControlByID(simcity.cRolloverUI.kWinIDRolloverItemDivider).SetVisibility(!1)
};
simcity.RolloverItems.kPopulationResidents = {
  textControl : 0,
  init : function (a) {
    this.textControl = a
  },
  updateQueries : function (a) {
    return {
      normal : ["units", a, "flags", simcity.kUnitFlagNormal],
      totalResidents : ["units", a, "bins", simcity.kResourceIDTotalResidents]
    }
  },
  update : function (a, b) {
    this.textControl && (this.textControl.SetVisibility(!1), this.textControl.UpdateLocaleText({
        population_amount : b.totalResidents ? b.totalResidents.amount : 0
      }))
  }
};
simcity.RolloverItems.kPopulationWorkers = {
  textControl : 0,
  init : function (a) {
    this.textControl = a
  },
  updateQueries : function (a) {
    return {
      normal : ["units", a, "flags", simcity.kUnitFlagNormal],
      workers : ["units", a, "bins", simcity.kResourceIDTotalWorkers],
      workers_needed : ["units", a, "properties", simcity.kPropWork_MinimumWorkersForProduction],
      totalJobs : ["connectedUnits", a, "properties", simcity.kPropWork_TotalJobs]
    }
  },
  update : function (a, b) {
    this.textControl && (this.textControl.SetVisibility(b.normal && 0 < b.totalJobs), b.workers_needed >
      b.workers.amount ? (this.textControl.SetTextColor(simcity.RolloverItems.textColorUrgent), this.textControl.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0e5990c7", "kPopulationWorkers")), this.textControl.UpdateLocaleText({
          population_amount : b.workers ? b.workers.amount : 0,
          population_needed : b.workers_needed
        })) : (this.textControl.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0d7ea9a6", "kPopulationWorkers")), this.textControl.UpdateLocaleText({
          population_amount : b.workers ?
          b.workers.amount : 0
        })))
  }
};
simcity.RolloverItems.kPopulationNone = {
  textControl : 0,
  init : function (a) {
    this.textControl = a
  },
  updateQueries : function () {
    return {}

  },
  update : function () {
    this.textControl && (this.textControl.SetVisibility(!1), this.textControl.UpdateLocaleText({
        population_amount : 0
      }))
  }
};
simcity.RolloverItems.kFiller_Residential = {
  stringData : {
    tableID : "BuildingRollover.json",
    stringID : "0x0ed5e8a0",
    placeholder : "kFiller_Residential"
  },
  iconPath : "Graphics/Common/Icons/icn_similian_white.png",
  layoutPath : "Layouts/Rollovers/RolloverBlockTextCenter.js",
  initQueries : function (a) {
    this.unitRef = a.split(",");
    return {
      population : [simcity.kDataBinAmount, simcity.kResourceIDTotalResidential],
      number : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfResidential]
    }
  },
  init : function (a, b) {
    var c = b.number * simcity.GetFudgedPopulation(b.population) %
      this.unitRef[0] % 7;
    a.textControl = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemValue);
    a.textControl.UpdateLocaleText({
      amount : c
    })
  }
};
simcity.RolloverItems.kFiller_Commercial = {
  stringData : {
    tableID : "BuildingRollover.json",
    stringID : "0x0ed5e8a0",
    placeholder : "kFiller_Commercial"
  },
  iconPath : "Graphics/Common/Icons/icn_similian_white.png",
  layoutPath : "Layouts/Rollovers/RolloverBlockTextCenter.js",
  initQueries : function (a) {
    this.unitRef = a.split(",");
    return {
      jobs : [simcity.kDataBinAmount, simcity.kResourceIDTotalJobs],
      number : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfCommercial]
    }
  },
  init : function (a, b) {
    var c = b.number * b.jobs % this.unitRef[0] %
      7;
    a.textControl = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemValue);
    a.textControl.UpdateLocaleText({
      amount : c
    })
  }
};
simcity.RolloverItems.kFiller_Industrial = {
  stringData : {
    tableID : "BuildingRollover.json",
    stringID : "0x0ed5e8a0",
    placeholder : "kFiller_Industrial"
  },
  iconPath : "Graphics/Common/Icons/icn_similian_white.png",
  layoutPath : "Layouts/Rollovers/RolloverBlockTextCenter.js",
  initQueries : function (a) {
    this.unitRef = a.split(",");
    return {
      jobs : [simcity.kDataBinAmount, simcity.kResourceIDTotalJobs],
      number : [simcity.kDataBinAmount, simcity.kResourceIDNumberOfIndustrial]
    }
  },
  init : function (a, b) {
    var c = b.number * b.jobs % this.unitRef[0] %
      7;
    a.textControl = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemValue);
    a.textControl.UpdateLocaleText({
      amount : c
    })
  }
};
simcity.RolloverItems.kWorkersSent = {
  stringData : {
    tableID : "BuildingRollover.json",
    stringID : "0x0d5c7822",
    placeholder : "kRolloverItemWorkers"
  },
  iconPath : "Graphics/Common/Icons/icn_rollover_Workers_Jobs.png",
  layoutPath : "Layouts/Rollovers/RolloverItemIconValue.js",
  init : function (a) {
    a.textControl = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemValue)
  },
  updateQueries : function (a) {
    return {
      workers_sent : ["units", a, "bins", simcity.kResourceIDWorkersSent]
    }
  },
  update : function (a, b) {
    a.textControl.UpdateLocaleText({
      workers_left : b.workers_sent.amount
    })
  }
};
simcity.RolloverItems.kShowPowerDealSize = {
  stringData : {
    tableID : "BuildingRollover.json",
    stringID : "0x0e0425ee",
    placeholder : "kRolloverPowerDealSize"
  },
  iconPath : "Graphics/Common/Icons/icn_power_white.png",
  layoutPath : "Layouts/Rollovers/RolloverItemIconValue.js",
  init : function (a) {
    a.textControl = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemValue)
  },
  updateQueries : function (a) {
    return {
      powerDealSize : ["units", a, "bins", simcity.kResourceIDTradeDealPowerSize]
    }
  },
  update : function (a, b) {
    a.textControl.UpdateLocaleText({
      power_deal_size : b.powerDealSize.amount
    })
  }
};
simcity.RolloverItems.kShowWaterDealSize = {
  stringData : {
    tableID : "BuildingRollover.json",
    stringID : "0x0e156cdb",
    placeholder : "kRolloverWaterDealSize"
  },
  iconPath : "Graphics/Common/Icons/icn_power_white.png",
  layoutPath : "Layouts/Rollovers/RolloverItemIconValue.js",
  init : function (a) {
    a.textControl = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemValue)
  },
  updateQueries : function (a) {
    return {
      waterDealSize : ["units", a, "bins", simcity.kResourceIDTradeDealWaterSize]
    }
  },
  update : function (a, b) {
    a.textControl.UpdateLocaleText({
      water_deal_size : b.waterDealSize.amount
    })
  }
};
simcity.RolloverItems.kShowSimoleonsGiftSize = {
  stringData : {
    tableID : "BuildingRollover.json",
    stringID : "0x0e34400b",
    placeholder : "kRolloverSimoleonsGiftSize"
  },
  iconPath : "Graphics/Common/Icons/icn_similian_white.png",
  layoutPath : "Layouts/Rollovers/RolloverItemIconValue.js",
  init : function (a) {
    a.textControl = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemValue)
  },
  updateQueries : function (a) {
    return {
      simoleonsGiftSize : ["units", a, "bins", simcity.kResourceIDTradeGiftSimoleonsSize]
    }
  },
  update : function (a, b) {
    a.textControl.UpdateLocaleText({
      simoleon_gift_size : b.simoleonsGiftSize.amount
    })
  }
};
simcity.RolloverItems.kShowSimoleonsRemaining = {
  stringData : {
    tableID : "BuildingRollover.json",
    stringID : "0x0e334198",
    placeholder : "kRolloverSimoleonsRemaining"
  },
  iconPath : "Graphics/Common/Icons/icn_similian_white.png",
  layoutPath : "Layouts/Rollovers/RolloverItemIconValue.js",
  init : function (a) {
    a.textControl = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemValue)
  },
  updateQueries : function (a) {
    return {
      simoleons : ["bins", simcity.kResourceIDSimoleons],
      simoleonsGiftSize : ["units", a, "bins", simcity.kResourceIDTradeGiftSimoleonsSize]
    }
  },
  update : function (a, b) {
    0 <= b.simoleons.amount - b.simoleonsGiftSize.amount && a.textControl.UpdateLocaleText({
      simoleons_remaining : b.simoleons.amount - b.simoleonsGiftSize.amount
    })
  }
};
simcity.RolloverItems.kWorkersInjuredGreatWorks = {
  stringData : {
    tableID : "BuildingRollover.json",
    stringID : "0x0d5c7825",
    placeholder : "kRolloverItemWorkers"
  },
  iconPath : "Graphics/Common/Icons/icn_rollover_Workers_Jobs.png",
  layoutPath : "Layouts/Rollovers/RolloverItemIconValue.js",
  init : function (a) {
    a.textControl = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemValue)
  },
  updateQueries : function (a) {
    return {
      workers_injured : ["units", a, "bins", simcity.kResourceIDSimsDiedInMission]
    }
  },
  update : function (a, b) {
    a.textControl.UpdateLocaleText({
      workers_injured : b.workers_injured.amount
    })
  }
};
simcity.RolloverItems.kBlockSadnessGeneric = {
  init : function (a) {
    a.textControlTitle = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTitle);
    a.textControlLeft1 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextLeft1);
    a.textControlLeft2 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextLeft2);
    a.textControlLeft3 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextLeft3);
    a.textControlRight1 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextRight1);
    a.textControlRight2 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextRight2);
    a.textControlRight3 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextRight3)
  },
  update : function (a, b) {
    if (b.normal) {
      var c = [];
      this.additionalUpdate && goog.object.extend(c, this.additionalUpdate(a, b));
      if (0 == c.length)
        this.minimize = !0;
      else {
        c.sort(function (a, b) {
          return a[0] < b[0] ? 1 : a[0] > b[0] ? -1 : 0
        });
        for (var d = 0, e = 0; 3 > e; e++)
          c[e] && 0 != c[e][0] && d++;
        if (d != this.getRequiredCount())
          this.minimize = !0;
        else
          switch (this.minimize =
              !1, a.textControlTitle.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", this.titleText, "kResourcePowerProducer")), e = c[0][1].length - 2 - b.happinessDisplay, e = 0 < e ? e : 0, d) {
          case 3:
            d = c[2][1][e],
            a.textControlLeft3.SetVisibility(!0),
            a.textControlLeft3.SetLocaleText(new scrui.cLocaleString(b.textFeedbackFile, d, "kBlockSadnessGeneric")),
            a.textControlRight3.SetVisibility(!1);
          case 2:
            d = c[1][1][e],
            a.textControlLeft2.SetVisibility(!0),
            a.textControlLeft2.SetLocaleText(new scrui.cLocaleString(b.textFeedbackFile,
                d, "kBlockSadnessGeneric")),
            a.textControlRight2.SetVisibility(!1);
          default:
            d = c[0][1][e],
            a.textControlLeft1.SetVisibility(!0),
            a.textControlLeft1.SetLocaleText(new scrui.cLocaleString(b.textFeedbackFile, d, "kBlockSadnessGeneric")),
            a.textControlRight1.SetVisibility(!1)
          }
      }
    } else
      this.minimize = !0
  }
};
simcity.RolloverItems.kBlockSadness = {
  updateQueries : function (a) {
    this.titleText = "0x0e855502";
    var b = {
      normal : ["units", a, "flags", simcity.kUnitFlagNormal],
      textFeedbackFile : ["units", a, "nonSimProperties", simcity.kPropSCUnitRolloverTextFile],
      happinessDisplay : ["units", a, simcity.kDataBinAmount, simcity.kResourceIDHappinessDisplay],
      wealth : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDWealth]
    };
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesNormal(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesUrgentBasic(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesSadnessBasic(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesDeath(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesCrimeInProgress(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesCrimeAtBuilding(a));
    this.additionalQueries && goog.object.extend(b, this.additionalQueries(a));
    return b
  }
};
goog.object.extend(simcity.RolloverItems.kBlockSadness, simcity.RolloverItems.kBlockSadnessGeneric);
simcity.RolloverItems.kLandmarkResidentialSadness = {
  additionalQueries : function (a) {
    var b = {};
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesInjury(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesSickness(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesShopping(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesRTaxes(a));
    return b
  },
  additionalUpdate : function (a, b) {
    var c = simcity.RolloverItems.RolloverText.getUrgentBasic(a,
        b),
    c = c.concat(simcity.RolloverItems.RolloverText.getSadnessBasic(a, b)),
    c = c.concat(simcity.RolloverItems.RolloverText.getDeath(a, b)),
    c = c.concat(simcity.RolloverItems.RolloverText.getRTaxes(a, b)),
    c = c.concat(simcity.RolloverItems.RolloverText.getCrimeInProgress(a, b)),
    c = c.concat(simcity.RolloverItems.RolloverText.getCrimeAtBuilding(a, b)),
    c = c.concat(simcity.RolloverItems.RolloverText.getInjury(a, b)),
    c = c.concat(simcity.RolloverItems.RolloverText.getSickness(a, b));
    return c = c.concat(simcity.RolloverItems.RolloverText.getShopping(a,
          b))
  }
};
goog.object.extend(simcity.RolloverItems.kLandmarkResidentialSadness, simcity.RolloverItems.kBlockSadness);
simcity.RolloverItems.kLandmarkResidentialSadness3 = {
  layoutPath : "Layouts/Rollovers/RolloverBlockTextTitle3Row2Column.js",
  getRequiredCount : function () {
    return 3
  }
};
goog.object.extend(simcity.RolloverItems.kLandmarkResidentialSadness3, simcity.RolloverItems.kLandmarkResidentialSadness);
simcity.RolloverItems.kLandmarkResidentialSadness2 = {
  layoutPath : "Layouts/Rollovers/RolloverBlockTextTitle2Row2Column.js",
  getRequiredCount : function () {
    return 2
  }
};
goog.object.extend(simcity.RolloverItems.kLandmarkResidentialSadness2, simcity.RolloverItems.kLandmarkResidentialSadness);
simcity.RolloverItems.kLandmarkResidentialSadness1 = {
  layoutPath : "Layouts/Rollovers/RolloverBlockTextTitle1Row2Column.js",
  getRequiredCount : function () {
    return 1
  }
};
goog.object.extend(simcity.RolloverItems.kLandmarkResidentialSadness1, simcity.RolloverItems.kLandmarkResidentialSadness);
simcity.RolloverItems.kLandmarkCommercialSadness = {
  additionalQueries : function (a) {
    var b = {};
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesSouvenirs(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesTraffic(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesMassTransit(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesWork(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesCTaxes(a));
    return b
  },
  additionalUpdate : function (a,
    b) {
    var c = simcity.RolloverItems.RolloverText.getUrgentBasic(a, b),
    c = c.concat(simcity.RolloverItems.RolloverText.getSadnessBasic(a, b)),
    c = c.concat(simcity.RolloverItems.RolloverText.getDeath(a, b)),
    c = c.concat(simcity.RolloverItems.RolloverText.getRTaxes(a, b)),
    c = c.concat(simcity.RolloverItems.RolloverText.getCrimeInProgress(a, b)),
    c = c.concat(simcity.RolloverItems.RolloverText.getCrimeAtBuilding(a, b));
    return c = c.concat(simcity.RolloverItems.RolloverText.getInjury(a, b))
  }
};
goog.object.extend(simcity.RolloverItems.kLandmarkCommercialSadness, simcity.RolloverItems.kBlockSadness);
simcity.RolloverItems.kLandmarkCommercialSadness3 = {
  layoutPath : "Layouts/Rollovers/RolloverBlockTextTitle3Row2Column.js",
  getRequiredCount : function () {
    return 3
  }
};
goog.object.extend(simcity.RolloverItems.kLandmarkCommercialSadness3, simcity.RolloverItems.kLandmarkCommercialSadness);
simcity.RolloverItems.kLandmarkCommercialSadness2 = {
  layoutPath : "Layouts/Rollovers/RolloverBlockTextTitle2Row2Column.js",
  getRequiredCount : function () {
    return 2
  }
};
goog.object.extend(simcity.RolloverItems.kLandmarkCommercialSadness2, simcity.RolloverItems.kLandmarkCommercialSadness);
simcity.RolloverItems.kLandmarkCommercialSadness1 = {
  layoutPath : "Layouts/Rollovers/RolloverBlockTextTitle1Row2Column.js",
  getRequiredCount : function () {
    return 1
  }
};
goog.object.extend(simcity.RolloverItems.kLandmarkCommercialSadness1, simcity.RolloverItems.kLandmarkCommercialSadness);
simcity.RolloverItems.kBlockResidentialSadness = {
  additionalQueries : function (a) {
    var b = {};
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesFire(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesInjury(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesSickness(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesShopping(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesRTaxes(a));
    this.additionalQueriesW2 &&
    (goog.object.extend(b, this.additionalQueriesW2(a)), this.additionalQueriesW3 && goog.object.extend(b, this.additionalQueriesW3(a)));
    return b
  },
  additionalUpdate : function (a, b) {
    var c = simcity.RolloverItems.RolloverText.getUrgentBasic(a, b),
    c = c.concat(simcity.RolloverItems.RolloverText.getSadnessBasic(a, b)),
    c = c.concat(simcity.RolloverItems.RolloverText.getFire(a, b)),
    c = c.concat(simcity.RolloverItems.RolloverText.getDeath(a, b)),
    c = c.concat(simcity.RolloverItems.RolloverText.getRTaxes(a, b)),
    c = c.concat(simcity.RolloverItems.RolloverText.getCrimeInProgress(a,
          b)),
    c = c.concat(simcity.RolloverItems.RolloverText.getCrimeAtBuilding(a, b)),
    c = c.concat(simcity.RolloverItems.RolloverText.getInjury(a, b)),
    c = c.concat(simcity.RolloverItems.RolloverText.getSickness(a, b)),
    c = c.concat(simcity.RolloverItems.RolloverText.getShopping(a, b));
    this.additionalUpdateW2 && (c = c.concat(this.additionalUpdateW2(a, b)), this.additionalUpdateW3 && (c = c.concat(this.additionalUpdateW3(a, b))));
    return c
  }
};
goog.object.extend(simcity.RolloverItems.kBlockResidentialSadness, simcity.RolloverItems.kBlockSadness);
simcity.RolloverItems.kBlockResidentialSadness3 = {
  layoutPath : "Layouts/Rollovers/RolloverBlockTextTitle3Row2Column.js",
  getRequiredCount : function () {
    return 3
  }
};
goog.object.extend(simcity.RolloverItems.kBlockResidentialSadness3, simcity.RolloverItems.kBlockResidentialSadness);
simcity.RolloverItems.kBlockResidentialSadness2 = {
  layoutPath : "Layouts/Rollovers/RolloverBlockTextTitle2Row2Column.js",
  getRequiredCount : function () {
    return 2
  }
};
goog.object.extend(simcity.RolloverItems.kBlockResidentialSadness2, simcity.RolloverItems.kBlockResidentialSadness);
simcity.RolloverItems.kBlockResidentialSadness1 = {
  layoutPath : "Layouts/Rollovers/RolloverBlockTextTitle1Row2Column.js",
  getRequiredCount : function () {
    return 1
  }
};
goog.object.extend(simcity.RolloverItems.kBlockResidentialSadness1, simcity.RolloverItems.kBlockResidentialSadness);
simcity.RolloverItems.kBlockResidentialSadnessW2 = {
  additionalQueriesW2 : function (a) {
    var b = {};
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesDesirability(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesGarbage(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesSewage(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesGerms(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesEducation(a));
    goog.object.extend(b,
      simcity.RolloverItems.RolloverText.initQueriesCrime(a));
    return b
  },
  additionalUpdateW2 : function (a, b) {
    var c = simcity.RolloverItems.RolloverText.getDesirability(a, b),
    c = c.concat(simcity.RolloverItems.RolloverText.getGarbage(a, b)),
    c = c.concat(simcity.RolloverItems.RolloverText.getSewage(a, b)),
    c = c.concat(simcity.RolloverItems.RolloverText.getGerms(a, b)),
    c = c.concat(simcity.RolloverItems.RolloverText.getEducation(a, b));
    return c = c.concat(simcity.RolloverItems.RolloverText.getCrime(a, b))
  }
};
goog.object.extend(simcity.RolloverItems.kBlockResidentialSadnessW2, simcity.RolloverItems.kBlockResidentialSadness);
simcity.RolloverItems.kBlockResidentialSadness3W2 = {
  layoutPath : "Layouts/Rollovers/RolloverBlockTextTitle3Row2Column.js",
  getRequiredCount : function () {
    return 3
  }
};
goog.object.extend(simcity.RolloverItems.kBlockResidentialSadness3W2, simcity.RolloverItems.kBlockResidentialSadnessW2);
simcity.RolloverItems.kBlockResidentialSadness2W2 = {
  layoutPath : "Layouts/Rollovers/RolloverBlockTextTitle2Row2Column.js",
  getRequiredCount : function () {
    return 2
  }
};
goog.object.extend(simcity.RolloverItems.kBlockResidentialSadness2W2, simcity.RolloverItems.kBlockResidentialSadnessW2);
simcity.RolloverItems.kBlockResidentialSadness1W2 = {
  layoutPath : "Layouts/Rollovers/RolloverBlockTextTitle1Row2Column.js",
  getRequiredCount : function () {
    return 1
  }
};
goog.object.extend(simcity.RolloverItems.kBlockResidentialSadness1W2, simcity.RolloverItems.kBlockResidentialSadnessW2);
simcity.RolloverItems.kBlockResidentialSadnessW3 = {
  additionalQueriesW3 : function (a) {
    var b = {};
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesPollution(a));
    return b
  },
  additionalUpdateW3 : function (a, b) {
    return simcity.RolloverItems.RolloverText.getPollution(a, b)
  }
};
goog.object.extend(simcity.RolloverItems.kBlockResidentialSadnessW3, simcity.RolloverItems.kBlockResidentialSadnessW2);
simcity.RolloverItems.kBlockResidentialSadness3W3 = {
  layoutPath : "Layouts/Rollovers/RolloverBlockTextTitle3Row2Column.js",
  getRequiredCount : function () {
    return 3
  }
};
goog.object.extend(simcity.RolloverItems.kBlockResidentialSadness3W3, simcity.RolloverItems.kBlockResidentialSadnessW3);
simcity.RolloverItems.kBlockResidentialSadness2W3 = {
  layoutPath : "Layouts/Rollovers/RolloverBlockTextTitle2Row2Column.js",
  getRequiredCount : function () {
    return 2
  }
};
goog.object.extend(simcity.RolloverItems.kBlockResidentialSadness2W3, simcity.RolloverItems.kBlockResidentialSadnessW3);
simcity.RolloverItems.kBlockResidentialSadness1W3 = {
  layoutPath : "Layouts/Rollovers/RolloverBlockTextTitle1Row2Column.js",
  getRequiredCount : function () {
    return 1
  }
};
goog.object.extend(simcity.RolloverItems.kBlockResidentialSadness1W3, simcity.RolloverItems.kBlockResidentialSadnessW3);
simcity.RolloverItems.kBlockCommercialSadness = {
  additionalQueries : function (a) {
    var b = {};
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesFire(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesSouvenirs(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesTraffic(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesMassTransit(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesWork(a));
    goog.object.extend(b,
      simcity.RolloverItems.RolloverText.initQueriesCTaxes(a));
    this.additionalQueriesW2 && (goog.object.extend(b, this.additionalQueriesW2(a)), this.additionalQueriesW3 && goog.object.extend(b, this.additionalQueriesW3(a)));
    return b
  },
  additionalUpdate : function (a, b) {
    var c = simcity.RolloverItems.RolloverText.getUrgentBasic(a, b),
    c = c.concat(simcity.RolloverItems.RolloverText.getSadnessBasic(a, b)),
    c = c.concat(simcity.RolloverItems.RolloverText.getFire(a, b)),
    c = c.concat(simcity.RolloverItems.RolloverText.getDeath(a, b)),
    c = c.concat(simcity.RolloverItems.RolloverText.getCTaxes(a, b)),
    c = c.concat(simcity.RolloverItems.RolloverText.getCrimeInProgress(a, b)),
    c = c.concat(simcity.RolloverItems.RolloverText.getCrimeAtBuilding(a, b)),
    c = c.concat(simcity.RolloverItems.RolloverText.getWork(a, b)),
    c = c.concat(simcity.RolloverItems.RolloverText.getWorkSadness(a, b)),
    c = c.concat(simcity.RolloverItems.RolloverText.getSouvenirs(a, b));
    this.additionalUpdateW2 && (c = c.concat(this.additionalUpdateW2(a, b)), this.additionalUpdateW3 && (c = c.concat(this.additionalUpdateW3(a,
              b))));
    return c
  }
};
goog.object.extend(simcity.RolloverItems.kBlockCommercialSadness, simcity.RolloverItems.kBlockSadness);
simcity.RolloverItems.kBlockCommercialSadness3 = {
  layoutPath : "Layouts/Rollovers/RolloverBlockTextTitle3Row2Column.js",
  getRequiredCount : function () {
    return 3
  }
};
goog.object.extend(simcity.RolloverItems.kBlockCommercialSadness3, simcity.RolloverItems.kBlockCommercialSadness);
simcity.RolloverItems.kBlockCommercialSadness2 = {
  layoutPath : "Layouts/Rollovers/RolloverBlockTextTitle2Row2Column.js",
  getRequiredCount : function () {
    return 2
  }
};
goog.object.extend(simcity.RolloverItems.kBlockCommercialSadness2, simcity.RolloverItems.kBlockCommercialSadness);
simcity.RolloverItems.kBlockCommercialSadness1 = {
  layoutPath : "Layouts/Rollovers/RolloverBlockTextTitle1Row2Column.js",
  getRequiredCount : function () {
    return 1
  }
};
goog.object.extend(simcity.RolloverItems.kBlockCommercialSadness1, simcity.RolloverItems.kBlockCommercialSadness);
simcity.RolloverItems.kBlockCommercialSadnessW2 = {
  additionalQueriesW2 : function (a) {
    var b = {};
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesDesirability(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesGarbage(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesGerms(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesSewage(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesHomeless(a));
    goog.object.extend(b,
      simcity.RolloverItems.RolloverText.initQueriesCrime(a));
    return b
  },
  additionalUpdateW2 : function (a, b) {
    var c = simcity.RolloverItems.RolloverText.getDesirability(a, b),
    c = c.concat(simcity.RolloverItems.RolloverText.getGarbage(a, b)),
    c = c.concat(simcity.RolloverItems.RolloverText.getSewage(a, b)),
    c = c.concat(simcity.RolloverItems.RolloverText.getGerms(a, b)),
    c = c.concat(simcity.RolloverItems.RolloverText.getHomeless(a, b));
    return c = c.concat(simcity.RolloverItems.RolloverText.getCrime(a, b))
  }
};
goog.object.extend(simcity.RolloverItems.kBlockCommercialSadnessW2, simcity.RolloverItems.kBlockCommercialSadness);
simcity.RolloverItems.kBlockCommercialSadness3W2 = {
  layoutPath : "Layouts/Rollovers/RolloverBlockTextTitle3Row2Column.js",
  getRequiredCount : function () {
    return 3
  }
};
goog.object.extend(simcity.RolloverItems.kBlockCommercialSadness3W2, simcity.RolloverItems.kBlockCommercialSadnessW2);
simcity.RolloverItems.kBlockCommercialSadness2W2 = {
  layoutPath : "Layouts/Rollovers/RolloverBlockTextTitle2Row2Column.js",
  getRequiredCount : function () {
    return 2
  }
};
goog.object.extend(simcity.RolloverItems.kBlockCommercialSadness2W2, simcity.RolloverItems.kBlockCommercialSadnessW2);
simcity.RolloverItems.kBlockCommercialSadness1W2 = {
  layoutPath : "Layouts/Rollovers/RolloverBlockTextTitle1Row2Column.js",
  getRequiredCount : function () {
    return 1
  }
};
goog.object.extend(simcity.RolloverItems.kBlockCommercialSadness1W2, simcity.RolloverItems.kBlockCommercialSadnessW2);
simcity.RolloverItems.kBlockCommercialSadnessW3 = {
  additionalQueriesW3 : function (a) {
    var b = {};
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesPollution(a));
    return b
  },
  additionalUpdateW3 : function (a, b) {
    return simcity.RolloverItems.RolloverText.getPollution(a, b)
  }
};
goog.object.extend(simcity.RolloverItems.kBlockCommercialSadnessW3, simcity.RolloverItems.kBlockCommercialSadnessW2);
simcity.RolloverItems.kBlockCommercialSadness3W3 = {
  layoutPath : "Layouts/Rollovers/RolloverBlockTextTitle3Row2Column.js",
  getRequiredCount : function () {
    return 3
  }
};
goog.object.extend(simcity.RolloverItems.kBlockCommercialSadness3W3, simcity.RolloverItems.kBlockCommercialSadnessW3);
simcity.RolloverItems.kBlockCommercialSadness2W3 = {
  layoutPath : "Layouts/Rollovers/RolloverBlockTextTitle2Row2Column.js",
  getRequiredCount : function () {
    return 2
  }
};
goog.object.extend(simcity.RolloverItems.kBlockCommercialSadness2W3, simcity.RolloverItems.kBlockCommercialSadnessW3);
simcity.RolloverItems.kBlockCommercialSadness1W3 = {
  layoutPath : "Layouts/Rollovers/RolloverBlockTextTitle1Row2Column.js",
  getRequiredCount : function () {
    return 1
  }
};
goog.object.extend(simcity.RolloverItems.kBlockCommercialSadness1W3, simcity.RolloverItems.kBlockCommercialSadnessW3);
simcity.RolloverItems.kBlockIndustrialSadness = {
  additionalQueries : function (a) {
    var b = {};
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesSales(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesUrgentBasic(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesSadnessBasic(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesFire(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesDeath(a));
    goog.object.extend(b,
      simcity.RolloverItems.RolloverText.initQueriesITaxes(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesCrimeInProgress(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesCrimeAtBuilding(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesWork(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesITaxes(a));
    this.additionalQueriesW2 && (goog.object.extend(b, this.additionalQueriesW2(a)), this.additionalQueriesW3 && goog.object.extend(b,
        this.additionalQueriesW3(a)));
    return b
  },
  additionalUpdate : function (a, b) {
    var c = simcity.RolloverItems.RolloverText.getSales(a, b),
    c = c.concat(simcity.RolloverItems.RolloverText.getUrgentBasic(a, b)),
    c = c.concat(simcity.RolloverItems.RolloverText.getSadnessBasic(a, b)),
    c = c.concat(simcity.RolloverItems.RolloverText.getFire(a, b)),
    c = c.concat(simcity.RolloverItems.RolloverText.getDeath(a, b)),
    c = c.concat(simcity.RolloverItems.RolloverText.getITaxes(a, b)),
    c = c.concat(simcity.RolloverItems.RolloverText.getCrimeInProgress(a,
          b)),
    c = c.concat(simcity.RolloverItems.RolloverText.getCrimeAtBuilding(a, b)),
    c = c.concat(simcity.RolloverItems.RolloverText.getWork(a, b)),
    c = c.concat(simcity.RolloverItems.RolloverText.getWorkSadness(a, b));
    this.additionalUpdateW2 && (c = c.concat(this.additionalUpdateW2(a, b)), this.additionalUpdateW3 && (c = c.concat(this.additionalUpdateW3(a, b))));
    return c
  }
};
goog.object.extend(simcity.RolloverItems.kBlockIndustrialSadness, simcity.RolloverItems.kBlockSadness);
simcity.RolloverItems.kBlockIndustrialSadness3 = {
  layoutPath : "Layouts/Rollovers/RolloverBlockTextTitle3Row2Column.js",
  getRequiredCount : function () {
    return 3
  }
};
goog.object.extend(simcity.RolloverItems.kBlockIndustrialSadness3, simcity.RolloverItems.kBlockIndustrialSadness);
simcity.RolloverItems.kBlockIndustrialSadness2 = {
  layoutPath : "Layouts/Rollovers/RolloverBlockTextTitle2Row2Column.js",
  getRequiredCount : function () {
    return 2
  }
};
goog.object.extend(simcity.RolloverItems.kBlockIndustrialSadness2, simcity.RolloverItems.kBlockIndustrialSadness);
simcity.RolloverItems.kBlockIndustrialSadness1 = {
  layoutPath : "Layouts/Rollovers/RolloverBlockTextTitle1Row2Column.js",
  getRequiredCount : function () {
    return 1
  }
};
goog.object.extend(simcity.RolloverItems.kBlockIndustrialSadness1, simcity.RolloverItems.kBlockIndustrialSadness);
simcity.RolloverItems.kBlockIndustrialSadnessW2 = {
  additionalQueriesW2 : function (a) {
    var b = {};
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesGarbage(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesSewage(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesEducation(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesInjury(a));
    return b
  },
  additionalUpdateW2 : function (a, b) {
    var c = [],
    c = c.concat(simcity.RolloverItems.RolloverText.getGarbage(a,
          b)),
    c = c.concat(simcity.RolloverItems.RolloverText.getSewage(a, b)),
    c = c.concat(simcity.RolloverItems.RolloverText.getEducation(a, b));
    return c = c.concat(simcity.RolloverItems.RolloverText.getInjury(a, b))
  }
};
goog.object.extend(simcity.RolloverItems.kBlockIndustrialSadnessW2, simcity.RolloverItems.kBlockIndustrialSadness);
simcity.RolloverItems.kBlockIndustrialSadness3W2 = {
  layoutPath : "Layouts/Rollovers/RolloverBlockTextTitle3Row2Column.js",
  getRequiredCount : function () {
    return 3
  }
};
goog.object.extend(simcity.RolloverItems.kBlockIndustrialSadness3W2, simcity.RolloverItems.kBlockIndustrialSadnessW2);
simcity.RolloverItems.kBlockIndustrialSadness2W2 = {
  layoutPath : "Layouts/Rollovers/RolloverBlockTextTitle2Row2Column.js",
  getRequiredCount : function () {
    return 2
  }
};
goog.object.extend(simcity.RolloverItems.kBlockIndustrialSadness2W2, simcity.RolloverItems.kBlockIndustrialSadnessW2);
simcity.RolloverItems.kBlockIndustrialSadness1W2 = {
  layoutPath : "Layouts/Rollovers/RolloverBlockTextTitle1Row2Column.js",
  getRequiredCount : function () {
    return 1
  }
};
goog.object.extend(simcity.RolloverItems.kBlockIndustrialSadness1W2, simcity.RolloverItems.kBlockIndustrialSadnessW2);
simcity.RolloverItems.kBlockIndustrialSadnessW3 = {};
goog.object.extend(simcity.RolloverItems.kBlockIndustrialSadnessW3, simcity.RolloverItems.kBlockIndustrialSadnessW2);
simcity.RolloverItems.kBlockIndustrialSadness3W3 = {
  layoutPath : "Layouts/Rollovers/RolloverBlockTextTitle3Row2Column.js",
  getRequiredCount : function () {
    return 3
  }
};
goog.object.extend(simcity.RolloverItems.kBlockIndustrialSadness3W3, simcity.RolloverItems.kBlockIndustrialSadnessW3);
simcity.RolloverItems.kBlockIndustrialSadness2W3 = {
  layoutPath : "Layouts/Rollovers/RolloverBlockTextTitle2Row2Column.js",
  getRequiredCount : function () {
    return 2
  }
};
goog.object.extend(simcity.RolloverItems.kBlockIndustrialSadness2W3, simcity.RolloverItems.kBlockIndustrialSadnessW3);
simcity.RolloverItems.kBlockIndustrialSadness1W3 = {
  layoutPath : "Layouts/Rollovers/RolloverBlockTextTitle1Row2Column.js",
  getRequiredCount : function () {
    return 1
  }
};
goog.object.extend(simcity.RolloverItems.kBlockIndustrialSadness1W3, simcity.RolloverItems.kBlockIndustrialSadnessW3);
simcity.RolloverItems.kBlockHappiness = {
  updateQueries : function (a) {
    this.titleText = "0x0e9d027e";
    var b = {
      normal : ["units", a, "flags", simcity.kUnitFlagNormal],
      textFeedbackFile : ["units", a, "nonSimProperties", simcity.kPropSCUnitRolloverTextFile],
      happinessDisplay : ["units", a, simcity.kDataBinAmount, simcity.kResourceIDHappinessDisplay]
    };
    this.additionalQueries && goog.object.extend(b, this.additionalQueries(a));
    return b
  }
};
goog.object.extend(simcity.RolloverItems.kBlockHappiness, simcity.RolloverItems.kBlockSadnessGeneric);
simcity.RolloverItems.kBlockResidentialHappiness = {
  additionalQueries : function (a) {
    var b = {};
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesHappinessShopping(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesHappinessParks(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesHappinessRTaxes(a));
    this.additionalQueriesW2 && (goog.object.extend(b, this.additionalQueriesW2(a)), this.additionalQueriesW3 && goog.object.extend(b, this.additionalQueriesW3(a)));
    return b
  },
  additionalUpdate : function (a, b) {
    var c = simcity.RolloverItems.RolloverText.getHappinessShopping(a, b),
    c = c.concat(simcity.RolloverItems.RolloverText.getHappinessParks(a, b)),
    c = c.concat(simcity.RolloverItems.RolloverText.getHappinessRTaxes(a, b));
    this.additionalUpdateW2 && (c = c.concat(this.additionalUpdateW2(a, b)), this.additionalUpdateW3 && (c = c.concat(this.additionalUpdateW3(a, b))));
    return c
  }
};
goog.object.extend(simcity.RolloverItems.kBlockResidentialHappiness, simcity.RolloverItems.kBlockHappiness);
simcity.RolloverItems.kBlockResidentialHappiness3 = {
  layoutPath : "Layouts/Rollovers/RolloverBlockTextTitle3Row2Column.js",
  getRequiredCount : function () {
    return 3
  }
};
goog.object.extend(simcity.RolloverItems.kBlockResidentialHappiness3, simcity.RolloverItems.kBlockResidentialHappiness);
simcity.RolloverItems.kBlockResidentialHappiness2 = {
  layoutPath : "Layouts/Rollovers/RolloverBlockTextTitle2Row2Column.js",
  getRequiredCount : function () {
    return 2
  }
};
goog.object.extend(simcity.RolloverItems.kBlockResidentialHappiness2, simcity.RolloverItems.kBlockResidentialHappiness);
simcity.RolloverItems.kBlockResidentialHappiness1 = {
  layoutPath : "Layouts/Rollovers/RolloverBlockTextTitle1Row2Column.js",
  getRequiredCount : function () {
    return 1
  }
};
goog.object.extend(simcity.RolloverItems.kBlockResidentialHappiness1, simcity.RolloverItems.kBlockResidentialHappiness);
simcity.RolloverItems.kBlockResidentialHappinessW2 = {
  additionalQueriesW2 : function () {
    return {}

  },
  additionalUpdateW2 : function () {
    return []
  }
};
goog.object.extend(simcity.RolloverItems.kBlockResidentialHappinessW2, simcity.RolloverItems.kBlockResidentialHappiness);
simcity.RolloverItems.kBlockResidentialHappiness3W2 = {
  layoutPath : "Layouts/Rollovers/RolloverBlockTextTitle3Row2Column.js",
  getRequiredCount : function () {
    return 3
  }
};
goog.object.extend(simcity.RolloverItems.kBlockResidentialHappiness3W2, simcity.RolloverItems.kBlockResidentialHappinessW2);
simcity.RolloverItems.kBlockResidentialHappiness2W2 = {
  layoutPath : "Layouts/Rollovers/RolloverBlockTextTitle2Row2Column.js",
  getRequiredCount : function () {
    return 2
  }
};
goog.object.extend(simcity.RolloverItems.kBlockResidentialHappiness2W2, simcity.RolloverItems.kBlockResidentialHappinessW2);
simcity.RolloverItems.kBlockResidentialHappiness1W2 = {
  layoutPath : "Layouts/Rollovers/RolloverBlockTextTitle1Row2Column.js",
  getRequiredCount : function () {
    return 1
  }
};
goog.object.extend(simcity.RolloverItems.kBlockResidentialHappiness1W2, simcity.RolloverItems.kBlockResidentialHappinessW2);
simcity.RolloverItems.kBlockResidentialHappinessW3 = {
  additionalQueriesW3 : function (a) {
    var b = {};
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesHappinessHealth(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesHappinessFireMarshal(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesHappinessPolice(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesHappinessCrimeSuppression(a));
    return b
  },
  additionalUpdateW3 : function (a, b) {
    var c =
      simcity.RolloverItems.RolloverText.getHappinessHealth(a, b),
    c = c.concat(simcity.RolloverItems.RolloverText.getHappinessFireMarshal(a, b)),
    c = c.concat(simcity.RolloverItems.RolloverText.getHappinessPolice(a, b));
    return c = c.concat(simcity.RolloverItems.RolloverText.getHappinessCrimeSuppression(a, b))
  }
};
goog.object.extend(simcity.RolloverItems.kBlockResidentialHappinessW3, simcity.RolloverItems.kBlockResidentialHappinessW2);
simcity.RolloverItems.kBlockResidentialHappiness3W3 = {
  layoutPath : "Layouts/Rollovers/RolloverBlockTextTitle3Row2Column.js",
  getRequiredCount : function () {
    return 3
  }
};
goog.object.extend(simcity.RolloverItems.kBlockResidentialHappiness3W3, simcity.RolloverItems.kBlockResidentialHappinessW3);
simcity.RolloverItems.kBlockResidentialHappiness2W3 = {
  layoutPath : "Layouts/Rollovers/RolloverBlockTextTitle2Row2Column.js",
  getRequiredCount : function () {
    return 2
  }
};
goog.object.extend(simcity.RolloverItems.kBlockResidentialHappiness2W3, simcity.RolloverItems.kBlockResidentialHappinessW3);
simcity.RolloverItems.kBlockResidentialHappiness1W3 = {
  layoutPath : "Layouts/Rollovers/RolloverBlockTextTitle1Row2Column.js",
  getRequiredCount : function () {
    return 1
  }
};
goog.object.extend(simcity.RolloverItems.kBlockResidentialHappiness1W3, simcity.RolloverItems.kBlockResidentialHappinessW3);
simcity.RolloverItems.kBlockCommercialHappiness = {
  additionalQueries : function (a) {
    var b = {
      normal : ["units", a, "flags", simcity.kUnitFlagNormal],
      textFeedbackFile : ["units", a, "nonSimProperties", simcity.kPropSCUnitRolloverTextFile],
      happinessDisplay : ["units", a, simcity.kDataBinAmount, simcity.kResourceIDHappinessDisplay]
    };
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesHappinessParks(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesHappinessCTaxes(a));
    goog.object.extend(b,
      simcity.RolloverItems.RolloverText.initQueriesHappinessCustomer(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesHappinessCustomerStudent(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesHappinessCustomerTourist(a));
    this.additionalQueriesW2 && (goog.object.extend(b, this.additionalQueriesW2(a)), this.additionalQueriesW3 && goog.object.extend(b, this.additionalQueriesW3(a)));
    return b
  },
  additionalUpdate : function (a, b) {
    var c = simcity.RolloverItems.RolloverText.getHappinessCustomer(a,
        b),
    c = c.concat(simcity.RolloverItems.RolloverText.getHappinessCustomerStudent(a, b)),
    c = c.concat(simcity.RolloverItems.RolloverText.getHappinessCustomerTourist(a, b)),
    c = c.concat(simcity.RolloverItems.RolloverText.getHappinessParks(a, b)),
    c = c.concat(simcity.RolloverItems.RolloverText.getHappinessCTaxes(a, b));
    this.additionalUpdateW2 && (c = c.concat(this.additionalUpdateW2(a, b)), this.additionalUpdateW3 && (c = c.concat(this.additionalUpdateW3(a, b))));
    return c
  }
};
goog.object.extend(simcity.RolloverItems.kBlockCommercialHappiness, simcity.RolloverItems.kBlockHappiness);
simcity.RolloverItems.kBlockCommercialHappiness3 = {
  layoutPath : "Layouts/Rollovers/RolloverBlockTextTitle3Row2Column.js",
  getRequiredCount : function () {
    return 3
  }
};
goog.object.extend(simcity.RolloverItems.kBlockCommercialHappiness3, simcity.RolloverItems.kBlockCommercialHappiness);
simcity.RolloverItems.kBlockCommercialHappiness2 = {
  layoutPath : "Layouts/Rollovers/RolloverBlockTextTitle2Row2Column.js",
  getRequiredCount : function () {
    return 2
  }
};
goog.object.extend(simcity.RolloverItems.kBlockCommercialHappiness2, simcity.RolloverItems.kBlockCommercialHappiness);
simcity.RolloverItems.kBlockCommercialHappiness1 = {
  layoutPath : "Layouts/Rollovers/RolloverBlockTextTitle1Row2Column.js",
  getRequiredCount : function () {
    return 1
  }
};
goog.object.extend(simcity.RolloverItems.kBlockCommercialHappiness1, simcity.RolloverItems.kBlockCommercialHappiness);
simcity.RolloverItems.kBlockCommercialHappinessW2 = {
  additionalQueriesW2 : function () {
    return {}

  },
  additionalUpdateW2 : function () {
    return []
  }
};
goog.object.extend(simcity.RolloverItems.kBlockCommercialHappinessW2, simcity.RolloverItems.kBlockCommercialHappiness);
simcity.RolloverItems.kBlockCommercialHappiness3W2 = {
  layoutPath : "Layouts/Rollovers/RolloverBlockTextTitle3Row2Column.js",
  getRequiredCount : function () {
    return 3
  }
};
goog.object.extend(simcity.RolloverItems.kBlockCommercialHappiness3W2, simcity.RolloverItems.kBlockCommercialHappinessW2);
simcity.RolloverItems.kBlockCommercialHappiness2W2 = {
  layoutPath : "Layouts/Rollovers/RolloverBlockTextTitle2Row2Column.js",
  getRequiredCount : function () {
    return 2
  }
};
goog.object.extend(simcity.RolloverItems.kBlockCommercialHappiness2W2, simcity.RolloverItems.kBlockCommercialHappinessW2);
simcity.RolloverItems.kBlockCommercialHappiness1W2 = {
  layoutPath : "Layouts/Rollovers/RolloverBlockTextTitle1Row2Column.js",
  getRequiredCount : function () {
    return 1
  }
};
goog.object.extend(simcity.RolloverItems.kBlockCommercialHappiness1W2, simcity.RolloverItems.kBlockCommercialHappinessW2);
simcity.RolloverItems.kBlockCommercialHappinessW3 = {
  additionalQueriesW3 : function (a) {
    var b = {};
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesHappinessHealth(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesHappinessFireMarshal(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesHappinessPolice(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesHappinessCrimeSuppression(a));
    return b
  },
  additionalUpdateW3 : function (a, b) {
    var c =
      simcity.RolloverItems.RolloverText.getHappinessHealth(a, b),
    c = c.concat(simcity.RolloverItems.RolloverText.getHappinessFireMarshal(a, b)),
    c = c.concat(simcity.RolloverItems.RolloverText.getHappinessPolice(a, b));
    return c = c.concat(simcity.RolloverItems.RolloverText.getHappinessCrimeSuppression(a, b))
  }
};
goog.object.extend(simcity.RolloverItems.kBlockCommercialHappinessW3, simcity.RolloverItems.kBlockCommercialHappinessW2);
simcity.RolloverItems.kBlockCommercialHappiness3W3 = {
  layoutPath : "Layouts/Rollovers/RolloverBlockTextTitle3Row2Column.js",
  getRequiredCount : function () {
    return 3
  }
};
goog.object.extend(simcity.RolloverItems.kBlockCommercialHappiness3W3, simcity.RolloverItems.kBlockCommercialHappinessW3);
simcity.RolloverItems.kBlockCommercialHappiness2W3 = {
  layoutPath : "Layouts/Rollovers/RolloverBlockTextTitle2Row2Column.js",
  getRequiredCount : function () {
    return 2
  }
};
goog.object.extend(simcity.RolloverItems.kBlockCommercialHappiness2W3, simcity.RolloverItems.kBlockCommercialHappinessW3);
simcity.RolloverItems.kBlockCommercialHappiness1W3 = {
  layoutPath : "Layouts/Rollovers/RolloverBlockTextTitle1Row2Column.js",
  getRequiredCount : function () {
    return 1
  }
};
goog.object.extend(simcity.RolloverItems.kBlockCommercialHappiness1W3, simcity.RolloverItems.kBlockCommercialHappinessW3);
simcity.RolloverItems.kBlockIndustrialHappiness = {
  additionalQueries : function (a) {
    var b = {
      normal : ["units", a, "flags", simcity.kUnitFlagNormal],
      textFeedbackFile : ["units", a, "nonSimProperties", simcity.kPropSCUnitRolloverTextFile],
      happinessDisplay : ["units", a, simcity.kDataBinAmount, simcity.kResourceIDHappinessDisplay]
    };
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesHappinessShipment(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesHappinessITaxes(a));
    goog.object.extend(b,
      simcity.RolloverItems.RolloverText.initQueriesHappinessParks(a));
    this.additionalQueriesW2 && (goog.object.extend(b, this.additionalQueriesW2(a)), this.additionalQueriesW3 && goog.object.extend(b, this.additionalQueriesW3(a)));
    return b
  },
  additionalUpdate : function (a, b) {
    var c = simcity.RolloverItems.RolloverText.getHappinessShipments(a, b),
    c = c.concat(simcity.RolloverItems.RolloverText.getHappinessITaxes(a, b)),
    c = c.concat(simcity.RolloverItems.RolloverText.getHappinessParks(a, b));
    this.additionalUpdateW2 && (c = c.concat(this.additionalUpdateW2(a,
            b)), this.additionalUpdateW3 && (c = c.concat(this.additionalUpdateW3(a, b))));
    return c
  }
};
goog.object.extend(simcity.RolloverItems.kBlockIndustrialHappiness, simcity.RolloverItems.kBlockHappiness);
simcity.RolloverItems.kBlockIndustrialHappiness3 = {
  layoutPath : "Layouts/Rollovers/RolloverBlockTextTitle3Row2Column.js",
  getRequiredCount : function () {
    return 3
  }
};
goog.object.extend(simcity.RolloverItems.kBlockIndustrialHappiness3, simcity.RolloverItems.kBlockIndustrialHappiness);
simcity.RolloverItems.kBlockIndustrialHappiness2 = {
  layoutPath : "Layouts/Rollovers/RolloverBlockTextTitle2Row2Column.js",
  getRequiredCount : function () {
    return 2
  }
};
goog.object.extend(simcity.RolloverItems.kBlockIndustrialHappiness2, simcity.RolloverItems.kBlockIndustrialHappiness);
simcity.RolloverItems.kBlockIndustrialHappiness1 = {
  layoutPath : "Layouts/Rollovers/RolloverBlockTextTitle1Row2Column.js",
  getRequiredCount : function () {
    return 1
  }
};
goog.object.extend(simcity.RolloverItems.kBlockIndustrialHappiness1, simcity.RolloverItems.kBlockIndustrialHappiness);
simcity.RolloverItems.kBlockIndustrialHappinessW2 = {
  additionalQueriesW2 : function () {
    return {}

  },
  additionalUpdateW2 : function () {
    return []
  }
};
goog.object.extend(simcity.RolloverItems.kBlockIndustrialHappinessW2, simcity.RolloverItems.kBlockIndustrialHappiness);
simcity.RolloverItems.kBlockIndustrialHappiness3W2 = {
  layoutPath : "Layouts/Rollovers/RolloverBlockTextTitle3Row2Column.js",
  getRequiredCount : function () {
    return 3
  }
};
goog.object.extend(simcity.RolloverItems.kBlockIndustrialHappiness3W2, simcity.RolloverItems.kBlockIndustrialHappinessW2);
simcity.RolloverItems.kBlockIndustrialHappiness2W2 = {
  layoutPath : "Layouts/Rollovers/RolloverBlockTextTitle2Row2Column.js",
  getRequiredCount : function () {
    return 2
  }
};
goog.object.extend(simcity.RolloverItems.kBlockIndustrialHappiness2W2, simcity.RolloverItems.kBlockIndustrialHappinessW2);
simcity.RolloverItems.kBlockIndustrialHappiness1W2 = {
  layoutPath : "Layouts/Rollovers/RolloverBlockTextTitle1Row2Column.js",
  getRequiredCount : function () {
    return 1
  }
};
goog.object.extend(simcity.RolloverItems.kBlockIndustrialHappiness1W2, simcity.RolloverItems.kBlockIndustrialHappinessW2);
simcity.RolloverItems.kBlockIndustrialHappinessW3 = {
  additionalQueriesW3 : function (a) {
    var b = {};
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesHappinessHealth(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesHappinessFireMarshal(a));
    return b
  },
  additionalUpdateW3 : function (a, b) {
    var c = simcity.RolloverItems.RolloverText.getHappinessHealth(a, b);
    return c = c.concat(simcity.RolloverItems.RolloverText.getHappinessFireMarshal(a, b))
  }
};
goog.object.extend(simcity.RolloverItems.kBlockIndustrialHappinessW3, simcity.RolloverItems.kBlockIndustrialHappinessW2);
simcity.RolloverItems.kBlockIndustrialHappiness3W3 = {
  layoutPath : "Layouts/Rollovers/RolloverBlockTextTitle3Row2Column.js",
  getRequiredCount : function () {
    return 3
  }
};
goog.object.extend(simcity.RolloverItems.kBlockIndustrialHappiness3W3, simcity.RolloverItems.kBlockIndustrialHappinessW3);
simcity.RolloverItems.kBlockIndustrialHappiness2W3 = {
  layoutPath : "Layouts/Rollovers/RolloverBlockTextTitle2Row2Column.js",
  getRequiredCount : function () {
    return 2
  }
};
goog.object.extend(simcity.RolloverItems.kBlockIndustrialHappiness2W3, simcity.RolloverItems.kBlockIndustrialHappinessW3);
simcity.RolloverItems.kBlockIndustrialHappiness1W3 = {
  layoutPath : "Layouts/Rollovers/RolloverBlockTextTitle1Row2Column.js",
  getRequiredCount : function () {
    return 1
  }
};
goog.object.extend(simcity.RolloverItems.kBlockIndustrialHappiness1W3, simcity.RolloverItems.kBlockIndustrialHappinessW3);
simcity.RolloverItems.kTechLevel = {
  stringData : {
    tableID : "BuildingRollover.json",
    stringID : "0x0e71619b",
    placeholder : "kTechLevel"
  },
  layoutPath : "Layouts/Rollovers/TechLevelMeter2.js",
  init : function (a) {
    a.faceControl = a.layout.FindControlByID(245515237);
    a.faceContainer = a.layout.FindControlByID(246128182);
    a.background = a.layout.FindControlByID(216819296);
    a.smileyBar = a.layout.FindControlByID(210443385);
    a.animDensity2 = a.layout.FindAnimationByID(246379910);
    a.animDensity3 = a.layout.FindAnimationByID(246379911);
    a.icnControlUp1 =
      a.layout.FindControlByID(244829168);
    a.icnControlUp2 = a.layout.FindControlByID(244829169);
    a.icnControlUp3 = a.layout.FindControlByID(244829170);
    a.icnControlDown1 = a.layout.FindControlByID(244829171);
    a.icnControlDown2 = a.layout.FindControlByID(244829172);
    a.icnControlDown3 = a.layout.FindControlByID(244829173);
    a.Density1 = a.layout.FindControlByID(216819296);
    a.RedD1 = a.layout.FindControlByID(246191904);
    a.OrangeD1 = a.layout.FindControlByID(246191905);
    a.YellowD1 = a.layout.FindControlByID(246191906);
    a.LightGreenD1 =
      a.layout.FindControlByID(246191907);
    a.GreenD1 = a.layout.FindControlByID(246191908);
    a.meterBar1D1 = a.layout.FindControlByID(246185600);
    a.meterBar2D1 = a.layout.FindControlByID(246185601);
    a.meterBar3D1 = a.layout.FindControlByID(246185602);
    a.meterBar4D1 = a.layout.FindControlByID(246185603);
    a.meterBar5D1 = a.layout.FindControlByID(246185604);
    a.meterFillBarD1 = a.layout.FindControlByID(246185605);
    a.highlightD1 = a.layout.FindControlByID(247694273);
    a.Density2 = a.layout.FindControlByID(216884832);
    a.RedD2 = a.layout.FindControlByID(246257456);
    a.OrangeD2 = a.layout.FindControlByID(246257457);
    a.YellowD2 = a.layout.FindControlByID(246257458);
    a.LightGreenD2 = a.layout.FindControlByID(246257459);
    a.GreenD2 = a.layout.FindControlByID(246257460);
    a.meterBar1D2 = a.layout.FindControlByID(246251120);
    a.meterBar2D2 = a.layout.FindControlByID(246251121);
    a.meterBar3D2 = a.layout.FindControlByID(246251122);
    a.meterBar4D2 = a.layout.FindControlByID(246251123);
    a.meterBar5D2 = a.layout.FindControlByID(246251124);
    a.meterFillBarD2 = a.layout.FindControlByID(246251125);
    a.highlightD2 =
      a.layout.FindControlByID(247694274);
    a.Density3 = a.layout.FindControlByID(216753760);
    a.RedD3 = a.layout.FindControlByID(246126368);
    a.OrangeD3 = a.layout.FindControlByID(246126369);
    a.YellowD3 = a.layout.FindControlByID(246126370);
    a.LightGreenD3 = a.layout.FindControlByID(246126371);
    a.GreenD3 = a.layout.FindControlByID(246126372);
    a.meterBar1D3 = a.layout.FindControlByID(246120064);
    a.meterBar2D3 = a.layout.FindControlByID(246120065);
    a.meterBar3D3 = a.layout.FindControlByID(246120066);
    a.meterBar4D3 = a.layout.FindControlByID(246120067);
    a.meterBar5D3 = a.layout.FindControlByID(246120068);
    a.meterFillBarD3 = a.layout.FindControlByID(246120069);
    a.highlightD3 = a.layout.FindControlByID(247694275)
  },
  updateQueries : function (a) {
    var b = {
      normal : [simcity.kDataUnits, a, "flags", simcity.kUnitFlagNormal],
      wealth : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDWealth],
      EducationLevel : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDEducationLevel],
      SkillTokenE2 : ["connectedUnits", a, simcity.kDataBinAmount, simcity.kResourceIDSkillTokenE2],
      SkillTokenE3 : ["connectedUnits", a, simcity.kDataBinAmount, simcity.kResourceIDSkillTokenE3],
      LowSkill : ["connectedUnits", a, simcity.kDataBinAmount, simcity.kResourceIDLowSkill],
      ThresholdE2 : [simcity.kDataUnits, a, "properties", simcity.kPropSkillConsumer_SkillThresholdE2],
      ThresholdE3 : [simcity.kDataUnits, a, "properties", simcity.kPropSkillConsumer_SkillThresholdE3]
    };
    this.additionalQueries && goog.object.extend(b, this.additionalQueries(a));
    return b
  },
  update : function (a, b) {
    var c = 0,
    d = 0,
    e = {
      red : a.RedD1,
      orange : a.OrangeD1,
      yellow : a.YellowD1,
      lightGreen : a.LightGreenD1,
      green : a.GreenD1,
      mainWindow : a.Density1,
      highlight : a.highlightD1
    },
    f = {
      meterBar1 : a.meterBar1D1,
      meterBar2 : a.meterBar2D1,
      meterBar3 : a.meterBar3D1,
      meterBar4 : a.meterBar4D1,
      meterBar5 : a.meterBar5D1,
      meterWindow : a.meterFillBarD1
    },
    g = {
      token : b.SkillTokenE2,
      threshold : b.ThresholdE2
    };
    1 == b.wealth ? (c = e.mainWindow.mLeft + f.meterWindow.mLeft, a.animDensity2.Reset(), a.animDensity3.Reset(), d = g.token / g.threshold, this.updateDensity(a, b, e, f, g), e.highlight.SetVisibility(!0)) : this.setBars(a,
      b, e, f);
    e = {
      red : a.RedD2,
      orange : a.OrangeD2,
      yellow : a.YellowD2,
      lightGreen : a.LightGreenD2,
      green : a.GreenD2,
      mainWindow : a.Density2,
      highlight : a.highlightD2
    };
    f = {
      meterBar1 : a.meterBar1D2,
      meterBar2 : a.meterBar2D2,
      meterBar3 : a.meterBar3D2,
      meterBar4 : a.meterBar4D2,
      meterBar5 : a.meterBar5D2,
      meterWindow : a.meterFillBarD2
    };
    2 == b.wealth ? (c = e.mainWindow.mLeft + f.meterWindow.mLeft, a.GreenD1.SetVisibility(!0), d = g.token / g.threshold, this.updateDensity(a, b, e, f, g), e.highlight.SetVisibility(!0), a.animDensity2.Start(), a.animDensity3.Reset()) :
    this.setBars(a, b, e, f);
    g = {
      token : b.SkillTokenE3,
      threshold : b.ThresholdE3
    };
    e = {
      red : a.RedD3,
      orange : a.OrangeD3,
      yellow : a.YellowD3,
      lightGreen : a.LightGreenD3,
      green : a.GreenD3,
      mainWindow : a.Density3,
      highlight : a.highlightD3
    };
    f = {
      meterBar1 : a.meterBar1D3,
      meterBar2 : a.meterBar2D3,
      meterBar3 : a.meterBar3D3,
      meterBar4 : a.meterBar4D3,
      meterBar5 : a.meterBar5D3,
      meterWindow : a.meterFillBarD3
    };
    3 == b.wealth ? (c = e.mainWindow.mLeft + f.meterWindow.mLeft, a.GreenD1.SetVisibility(!0), a.GreenD2.SetVisibility(!0), d = g.token / g.threshold, this.updateDensity(a,
        b, e, f, g), e.highlight.SetVisibility(!0), a.animDensity2.Start(), a.animDensity3.Start()) : this.setBars(a, b, e, f);
    a.faceControl.SetPosition(a.faceContainer.mWidth / 3 * (1 < d ? 1 : d) + c + -9, a.faceControl.mTop)
  },
  setBars : function (a, b, c, d) {
    c.red.SetVisibility(!1);
    c.orange.SetVisibility(!1);
    c.yellow.SetVisibility(!1);
    c.lightGreen.SetVisibility(!1);
    c.green.SetVisibility(!1);
    c.highlight.SetVisibility(!1);
    d.meterBar1.SetVisibility(!0);
    d.meterBar2.SetVisibility(!0);
    d.meterBar3.SetVisibility(!0);
    d.meterBar4.SetVisibility(!0);
    d.meterBar5.SetVisibility(!1);
    a = a.background.mWidth;
    d.meterWindow.SetWidth(a);
    c = 0.25 * b.defaulttoken / b.threshold;
    d.meterBar1.SetPosition(c * a, 2);
    c = 0.5 * b.defaulttoken / b.threshold;
    d.meterBar2.SetPosition(c * a, 2);
    c = b.defaulttoken / b.threshold;
    d.meterBar3.SetPosition(c * a, 2);
    c = 1.5 * b.defaulttoken / b.threshold;
    d.meterBar4.SetPosition(c * a, 2)
  },
  updateDensity : function (a, b, c, d, e) {
    this.setBars(a, b, c, d);
    e = e.token / e.threshold;
    e = 1 < e ? 1 : e;
    0 < b.LowSkill ? c.red.SetVisibility(!0) : c.green.SetVisibility(!0);
    d.meterWindow.SetVisibility(!0);
    d.meterWindow.SetWidth(a.background.mWidth * e)
  }
};
simcity.RolloverItems.kLandValueMeter = {
  stringData : {
    tableID : "BuildingRollover.json",
    stringID : "0x0e71619b",
    placeholder : "kLandValueMeter"
  },
  layoutPath : "Layouts/Rollovers/LandValueMeter.js",
  init : function (a) {
    a.faceControl = a.layout.FindControlByID(245515237);
    a.faceContainer = a.layout.FindControlByID(246128182);
    a.background = a.layout.FindControlByID(216819296);
    a.smileyBar = a.layout.FindControlByID(210443385);
    a.red = a.layout.FindControlByID(246191904);
    a.orange = a.layout.FindControlByID(246191905);
    a.yellow = a.layout.FindControlByID(246191906);
    a.lightGreen = a.layout.FindControlByID(246191907);
    a.green = a.layout.FindControlByID(246191908);
    a.meterWindow = a.layout.FindControlByID(246185605);
    a.highlight1 = a.layout.FindControlByID(247694273);
    a.highlight2 = a.layout.FindControlByID(247694274);
    a.highlight3 = a.layout.FindControlByID(247694275)
  },
  updateQueries : function (a) {
    var b = {
      normal : [simcity.kDataUnits, a, "flags", simcity.kUnitFlagNormal],
      wealth : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDWealth],
      density : [simcity.kDataUnits, a, simcity.kDataBinAmount,
        simcity.kResourceIDDensity]
    };
    this.additionalQueries && goog.object.extend(b, this.additionalQueries(a));
    return b
  },
  update : function (a, b) {
    a.red.SetVisibility(!1);
    a.orange.SetVisibility(!1);
    a.yellow.SetVisibility(!1);
    a.lightGreen.SetVisibility(!1);
    a.green.SetVisibility(!0);
    a.highlight1.SetVisibility(!1);
    a.highlight2.SetVisibility(!1);
    a.highlight3.SetVisibility(!1);
    var c = 0,
    c = a.background.mWidth / 3,
    d = 0,
    e = 0;
    switch (b.density) {
    case 3:
      d = b.W2D3.amount / 12;
      e = b.W3D3.amount / 12;
      break;
    case 2:
      d = b.W2D2.amount / 12;
      e = b.W3D2.amount /
        12;
      break;
    default:
      d = b.W2D1.amount / 12,
      e = b.W3D1.amount / 12
    }
    switch (b.wealth) {
    case 3:
      a.highlight3.SetVisibility(!0);
      if (33500 <= e) {
        c *= 3;
        break
      }
      a.red.SetVisibility(!0);
    case 2:
      a.highlight2.SetVisibility(2 == b.wealth);
      33500 <= d ? c = c * (e / 33500) + c : (a.red.SetVisibility(!0), c *= d / 33500);
      break;
    default:
      a.highlight1.SetVisibility(!0),
      c *= (d > e ? d : e) / 33500
    }
    a.meterWindow.SetWidth(c);
    a.faceControl.SetPosition(c, a.faceControl.mTop)
  }
};
simcity.RolloverItems.kLandValueMeterResidential = {
  additionalQueries : function (a) {
    return {
      W2D1 : ["maps", simcity.kMapIDDesirability_RW2, "unitRegion", a, "A", "sum"],
      W2D2 : ["maps", simcity.kMapIDDesirability_RW2, "unitRegion", a, "A", "sum"],
      W2D3 : ["maps", simcity.kMapIDDesirability_RW2, "unitRegion", a, "A", "sum"],
      W3D1 : ["maps", simcity.kMapIDDesirability_RW3, "unitRegion", a, "A", "sum"],
      W3D2 : ["maps", simcity.kMapIDDesirability_RW3, "unitRegion", a, "A", "sum"],
      W3D3 : ["maps", simcity.kMapIDDesirability_RW3, "unitRegion", a, "A", "sum"]
    }
  }
};
goog.object.extend(simcity.RolloverItems.kLandValueMeterResidential, simcity.RolloverItems.kLandValueMeter);
simcity.RolloverItems.kLandValueMeterCommercial = {
  additionalQueries : function (a) {
    return {
      W2D1 : ["maps", simcity.kMapIDDesirability_RW2, "unitRegion", a, "A", "sum"],
      W2D2 : ["maps", simcity.kMapIDDesirability_RW2, "unitRegion", a, "A", "sum"],
      W2D3 : ["maps", simcity.kMapIDDesirability_RW2, "unitRegion", a, "A", "sum"],
      W3D1 : ["maps", simcity.kMapIDDesirability_RW3, "unitRegion", a, "A", "sum"],
      W3D2 : ["maps", simcity.kMapIDDesirability_RW3, "unitRegion", a, "A", "sum"],
      W3D3 : ["maps", simcity.kMapIDDesirability_RW3, "unitRegion", a, "A", "sum"]
    }
  }
};
goog.object.extend(simcity.RolloverItems.kLandValueMeterCommercial, simcity.RolloverItems.kLandValueMeter);
simcity.RolloverItems.kBlockDensity = {
  stringData : {
    tableID : "BuildingRollover.json",
    stringID : "0x0e71619b",
    placeholder : "kDensityUpgrade"
  },
  layoutPath : "Layouts/Rollovers/DensityHappinessMeter.js",
  init : function (a) {
    a.faceControl = a.layout.FindControlByID(245515237);
    a.faceContainer = a.layout.FindControlByID(246128182);
    a.background = a.layout.FindControlByID(246378574);
    a.smileyBar = a.layout.FindControlByID(210443385);
    a.animDensity2 = a.layout.FindAnimationByID(246379910);
    a.animDensity3 = a.layout.FindAnimationByID(246379911);
    a.icnControlUp1 = a.layout.FindControlByID(244829168);
    a.icnControlUp2 = a.layout.FindControlByID(244829169);
    a.icnControlUp3 = a.layout.FindControlByID(244829170);
    a.icnControlDown1 = a.layout.FindControlByID(244829171);
    a.icnControlDown2 = a.layout.FindControlByID(244829172);
    a.icnControlDown3 = a.layout.FindControlByID(244829173);
    a.Density1 = a.layout.FindControlByID(216819296);
    a.RedD1 = a.layout.FindControlByID(246191904);
    a.OrangeD1 = a.layout.FindControlByID(246191905);
    a.YellowD1 = a.layout.FindControlByID(246191906);
    a.LightGreenD1 = a.layout.FindControlByID(246191907);
    a.GreenD1 = a.layout.FindControlByID(246191908);
    a.meterBar1D1 = a.layout.FindControlByID(246185600);
    a.meterBar2D1 = a.layout.FindControlByID(246185601);
    a.meterBar3D1 = a.layout.FindControlByID(246185602);
    a.meterBar4D1 = a.layout.FindControlByID(246185603);
    a.meterBar5D1 = a.layout.FindControlByID(246185604);
    a.meterFillBarD1 = a.layout.FindControlByID(246185605);
    a.highlightD1 = a.layout.FindControlByID(247694273);
    a.Density2 = a.layout.FindControlByID(216884832);
    a.RedD2 =
      a.layout.FindControlByID(246257456);
    a.OrangeD2 = a.layout.FindControlByID(246257457);
    a.YellowD2 = a.layout.FindControlByID(246257458);
    a.LightGreenD2 = a.layout.FindControlByID(246257459);
    a.GreenD2 = a.layout.FindControlByID(246257460);
    a.meterBar1D2 = a.layout.FindControlByID(246251120);
    a.meterBar2D2 = a.layout.FindControlByID(246251121);
    a.meterBar3D2 = a.layout.FindControlByID(246251122);
    a.meterBar4D2 = a.layout.FindControlByID(246251123);
    a.meterBar5D2 = a.layout.FindControlByID(246251124);
    a.meterFillBarD2 = a.layout.FindControlByID(246251125);
    a.highlightD2 = a.layout.FindControlByID(247694274);
    a.Density3 = a.layout.FindControlByID(216753760);
    a.RedD3 = a.layout.FindControlByID(246126368);
    a.OrangeD3 = a.layout.FindControlByID(246126369);
    a.YellowD3 = a.layout.FindControlByID(246126370);
    a.LightGreenD3 = a.layout.FindControlByID(246126371);
    a.GreenD3 = a.layout.FindControlByID(246126372);
    a.meterBar1D3 = a.layout.FindControlByID(246120064);
    a.meterBar2D3 = a.layout.FindControlByID(246120065);
    a.meterBar3D3 = a.layout.FindControlByID(246120066);
    a.meterBar4D3 = a.layout.FindControlByID(246120067);
    a.meterBar5D3 = a.layout.FindControlByID(246120068);
    a.meterFillBarD3 = a.layout.FindControlByID(246120069);
    a.highlightD3 = a.layout.FindControlByID(247694275)
  },
  updateQueries : function (a) {
    var b = {
      normal : [simcity.kDataUnits, a, "flags", simcity.kUnitFlagNormal],
      happinessDisplay : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDHappinessDisplay],
      density : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDDensity]
    };
    this.additionalQueries && goog.object.extend(b, this.additionalQueries(a));
    return b
  },
  update : function (a, b) {
    if (b.normal) {
      this.minimize = !1;
      var c = 0,
      d = {
        red : a.RedD1,
        orange : a.OrangeD1,
        yellow : a.YellowD1,
        lightGreen : a.LightGreenD1,
        green : a.GreenD1,
        mainWindow : a.Density1,
        highlight : a.highlightD1
      },
      e = {
        meterBar1 : a.meterBar1D1,
        meterBar2 : a.meterBar2D1,
        meterBar3 : a.meterBar3D1,
        meterBar4 : a.meterBar4D1,
        meterBar5 : a.meterBar5D1,
        meterWindow : a.meterFillBarD1
      };
      1 == b.density ? (c = d.mainWindow.mLeft + e.meterWindow.mLeft, a.animDensity2.Reset(), a.animDensity3.Reset(), this.updateDensity(a, b, d, e), d.highlight.SetVisibility(!0)) :
      this.setBars(a, b, d, e);
      d = {
        red : a.RedD2,
        orange : a.OrangeD2,
        yellow : a.YellowD2,
        lightGreen : a.LightGreenD2,
        green : a.GreenD2,
        mainWindow : a.Density2,
        highlight : a.highlightD2
      };
      e = {
        meterBar1 : a.meterBar1D2,
        meterBar2 : a.meterBar2D2,
        meterBar3 : a.meterBar3D2,
        meterBar4 : a.meterBar4D2,
        meterBar5 : a.meterBar5D2,
        meterWindow : a.meterFillBarD2
      };
      2 == b.density ? (c = d.mainWindow.mLeft + e.meterWindow.mLeft, a.GreenD1.SetVisibility(!0), this.updateDensity(a, b, d, e), d.highlight.SetVisibility(!0), a.animDensity2.Start(), a.animDensity3.Reset()) :
      this.setBars(a, b, d, e);
      d = {
        red : a.RedD3,
        orange : a.OrangeD3,
        yellow : a.YellowD3,
        lightGreen : a.LightGreenD3,
        green : a.GreenD3,
        mainWindow : a.Density3,
        highlight : a.highlightD3
      };
      e = {
        meterBar1 : a.meterBar1D3,
        meterBar2 : a.meterBar2D3,
        meterBar3 : a.meterBar3D3,
        meterBar4 : a.meterBar4D3,
        meterBar5 : a.meterBar5D3,
        meterWindow : a.meterFillBarD3
      };
      3 == b.density ? (c = d.mainWindow.mLeft + e.meterWindow.mLeft, a.GreenD1.SetVisibility(!0), a.GreenD2.SetVisibility(!0), this.updateDensity(a, b, d, e), d.highlight.SetVisibility(!0), a.animDensity2.Start(),
        a.animDensity3.Start()) : this.setBars(a, b, d, e);
      d = b.token.amount / b.threshold;
      a.faceControl.SetPosition(a.faceContainer.mWidth / 3 * (1 < d ? 1 : d) + c + -9, a.faceControl.mTop);
      a.smileyBar.SetPosition(-39 * (4 >= b.happinessDisplay ? b.happinessDisplay : 4), a.smileyBar.mTop);
      a.icnControlUp1.SetVisibility(!1);
      a.icnControlUp2.SetVisibility(!1);
      a.icnControlUp3.SetVisibility(!1);
      a.icnControlDown1.SetVisibility(!1);
      a.icnControlDown2.SetVisibility(!1);
      a.icnControlDown3.SetVisibility(!1);
      c = b.token.amount - b.tokenLast.amount;
      d = Math.ceil(b.defaulttoken);
      0 < c ? (a.icnControlUp1.SetVisibility(!0), c >= d && a.icnControlUp2.SetVisibility(!0), c >= 2 * d && a.icnControlUp3.SetVisibility(!0)) : 0 > c && (a.icnControlDown1.SetVisibility(!0), c <= -1 * d && a.icnControlDown2.SetVisibility(!0), c <= -2 * d && a.icnControlDown3.SetVisibility(!0))
    } else
      this.minimize = !0
  },
  setBars : function (a, b, c, d) {
    c.red.SetVisibility(!1);
    c.orange.SetVisibility(!1);
    c.yellow.SetVisibility(!1);
    c.lightGreen.SetVisibility(!1);
    c.green.SetVisibility(!1);
    c.highlight.SetVisibility(!1);
    d.meterBar1.SetVisibility(!0);
    d.meterBar2.SetVisibility(!0);
    d.meterBar3.SetVisibility(!0);
    d.meterBar4.SetVisibility(!0);
    d.meterBar5.SetVisibility(!1);
    a = a.background.mWidth;
    d.meterWindow.SetWidth(a);
    c = 0.25 * b.defaulttoken / b.threshold;
    d.meterBar1.SetPosition(c * a, 2);
    c = 0.5 * b.defaulttoken / b.threshold;
    d.meterBar2.SetPosition(c * a, 2);
    c = b.defaulttoken / b.threshold;
    d.meterBar3.SetPosition(c * a, 2);
    c = 1.5 * b.defaulttoken / b.threshold;
    d.meterBar4.SetPosition(c * a, 2)
  },
  updateDensity : function (a, b, c, d) {
    this.setBars(a, b, c, d);
    switch (b.happinessDisplay) {
    case 5:
    case 4:
      c.green.SetVisibility(!0);
      break;
    case 3:
      c.lightGreen.SetVisibility(!0);
      break;
    case 2:
      c.yellow.SetVisibility(!0);
      break;
    case 1:
      c.orange.SetVisibility(!0);
      break;
    default:
      c.red.SetVisibility(!0)
    }
    b = b.token.amount / b.threshold;
    b = 1 < b ? 1 : b;
    d.meterWindow.SetVisibility(!0);
    d.meterWindow.SetWidth(a.background.mWidth * b)
  }
};
simcity.RolloverItems.kBlockDensityHappiness = {
  additionalQueries : function (a) {
    return {
      token : [simcity.kDataUnits, a, "bins", simcity.kResourceIDHappinessToken],
      tokenLast : ["units", a, "bins", simcity.kResourceIDHappinessTokenLast],
      defaulttoken : [simcity.kDataUnits, a, "properties", simcity.kPropHappiness_DefaultHappinessTokens],
      threshold : [simcity.kDataUnits, a, "properties", simcity.kPropHappiness_HappinessTokensThresholdForDensityUpgrade]
    }
  }
};
goog.object.extend(simcity.RolloverItems.kBlockDensityHappiness, simcity.RolloverItems.kBlockDensity);
simcity.RolloverItems.kBlockDensityProfit = {
  additionalQueries : function (a) {
    return {
      defaulttoken : [simcity.kDataUnits, a, "properties", simcity.kPropProfit_DefaultProfitTokens],
      token : ["units", a, "bins", simcity.kResourceIDProfitToken],
      tokenLast : ["units", a, "bins", simcity.kResourceIDProfitTokenLast],
      threshold : ["units", a, "properties", simcity.kPropProfit_ProfitTokensThresholdForDensityUpgrade]
    }
  }
};
goog.object.extend(simcity.RolloverItems.kBlockDensityProfit, simcity.RolloverItems.kBlockDensity);
simcity.RolloverItems.kBlockUpgrade = {
  stringData : {
    tableID : "BuildingRollover.json",
    stringID : "0x0e71619b",
    placeholder : "kDensityUpgrade"
  },
  layoutPath : "Layouts/Rollovers/RolloverItemBlockMeterAndButton.js",
  init : function (a) {
    a.textControl = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemValue);
    a.textControlTitle = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTitle);
    a.textButton = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemButtonText);
    a.meterBacking = a.layout.FindControlByID(simcity.cRolloverUI.kWinIDRolloverItemMeterBacking);
    a.meterFillBar = a.layout.FindControlByID(simcity.cRolloverUI.kWinIDRolloverItemMeterFillBar)
  },
  updateQueries : function (a) {
    var b = {
      density : ["units", a, "bins", simcity.kResourceIDDensity]
    };
    this.additionalQueries && goog.object.extend(b, this.additionalQueries(a));
    return b
  },
  update : function (a, b) {
    a.layout.SetVisibility(b.density.amount == b.density.capacity ? !1 : !0);
    a.textControl.SetVisibility(!1);
    a.textButton.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0e855505", "kBlockUpgrade"));
    var c = {
      progress : "0x0e86a262",
      full : "0x0e86a262"
    };
    this.additionalUpdate && (c = this.additionalUpdate(a, b));
    var d = b.token.amount / b.threshold;
    1 <= d ? (d = 1, a.textControlTitle.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", c.full, "kBlockUpgrade"))) : a.textControlTitle.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", c.progress, "kBlockUpgrade"));
    a.meterFillBar.SetWidth(a.meterBacking.mWidth * d)
  },
  onItemClicked : function () {
    var a = simcity.gRolloverManager.mGlobalUI.mLayerUIHandler;
    a.IsLayerActive("0x5c74d18b") ? a.DeactivateLayer() :
    a.ActivateLayer("0x5c74d18b")
  }
};
simcity.RolloverItems.kHappinessDensityUpgrade = {
  additionalQueries : function (a) {
    return {
      token : ["units", a, "bins", simcity.kResourceIDHappinessToken],
      threshold : ["units", a, "properties", simcity.kPropHappiness_HappinessTokensThresholdForDensityUpgrade]
    }
  },
  additionalUpdate : function () {
    this.layerID = "0x5c74d18b";
    return {
      progress : "0x0e952b66",
      full : "0x0e952b66"
    }
  }
};
goog.object.extend(simcity.RolloverItems.kHappinessDensityUpgrade, simcity.RolloverItems.kBlockUpgrade);
simcity.RolloverItems.kProfitDensityUpgrade = {
  additionalQueries : function (a) {
    return {
      token : ["units", a, "bins", simcity.kResourceIDProfitToken],
      threshold : ["units", a, "properties", simcity.kPropProfit_ProfitTokensThresholdForDensityUpgrade]
    }
  },
  additionalUpdate : function () {
    this.layerID = "0x5c74d18b";
    return {
      progress : "0x0e952b66",
      full : "0x0e952b66"
    }
  }
};
goog.object.extend(simcity.RolloverItems.kProfitDensityUpgrade, simcity.RolloverItems.kBlockUpgrade);
simcity.RolloverItems.kMaintenance = {
  stringData : {
    tableID : "BuildingRollover.json",
    stringID : "0x0e59b2cf",
    placeholder : "kRolloverItemExpense"
  },
  layoutPath : "Layouts/Rollovers/RolloverItemTextRightSmall.js",
  init : function (a) {
    a.textControl = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemValue);
    a.BackgroundControl = a.layout.FindControlByID(simcity.cRolloverUI.kWinIDRolloverBackground)
  },
  updateQueries : function (a) {
    var b = {
      maintCost : ["connectedUnits", a, "bins", simcity.kResourceIDExpensesFromMaintenance]
    };
    this.additionalQueries && goog.object.extend(b, this.additionalQueries(a));
    return b
  },
  update : function (a, b) {
    a.BackgroundControl.SetVisibility(!1);
    a.textControl.SetTextColor("rgb(38,94,148)");
    a.textControl.UpdateLocaleText({
      maintenance_cost : b.maintCost ? b.maintCost.amount : 0
    })
  }
};
simcity.RolloverItems.kMaintenance_Unconnected = {
  additionalQueries : function (a) {
    return {
      maintCost : ["units", a, "bins", simcity.kResourceIDExpensesFromMaintenance]
    }
  }
};
goog.object.extend(simcity.RolloverItems.kMaintenance_Unconnected, simcity.RolloverItems.kMaintenance);
simcity.RolloverItems.kLandMarksRevenue = {
  stringData : {
    tableID : "BuildingRollover.json",
    stringID : "0x0e052900",
    placeholder : "kRolloverItemLandMarksRevenue"
  },
  iconPath : "Graphics/Common/Icons/icn_rollover_Tax.png",
  layoutPath : "Layouts/Rollovers/RolloverItemIconValue.js",
  init : function (a) {
    a.textControl = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemValue)
  },
  updateQueries : function () {
    return {
      LandMarksrevenue : ["bins", simcity.kResourceIDIncomeFromLandMarks]
    }
  },
  update : function (a, b) {
    a.textControl.UpdateLocaleText({
      LandMarksrevenue : b.LandMarksrevenue ?
      b.LandMarksrevenue.amount : 0
    })
  }
};
simcity.RolloverItems.kBlockWaterPollution = {
  layoutPath : "Layouts/Rollovers/RolloverBlockText1Row2Column.js",
  init : function (a) {
    a.textControlLeft = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextLeft1);
    a.textControlRight = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextRight1)
  },
  updateQueries : function (a) {
    return {
      germs : [simcity.kDataConnectedUnits, a, simcity.kDataBins, simcity.kResourceIDGermsInPump]
    }
  },
  update : function (a, b) {
    var c = 100 * (b.germs.amount / b.germs.capacity),
    d = simcity.RolloverItems.textColorNormal,
    e = "null";
    c >= simcity.Water.kPollutionExtreme ? (d = simcity.RolloverItems.textColorUrgent, e = "0x0e76bfb9") : c >= simcity.Water.kPollutionHigh ? (d = simcity.RolloverItems.textColorUrgent, e = "0x0e76bfb8") : c >= simcity.Water.kPollutionMedium ? (d = simcity.RolloverItems.textColorWarning, e = "0x0e76bfb7") : e = c >= simcity.Water.kPollutionLow ? "0x0e76bfb5" : "0x0e76bfb4";
    a.textControlLeft.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0e59a76f", "kBlockWaterPollution"));
    a.textControlRight.SetLocaleText(new scrui.cLocaleString("PaletteInfoPanel.json",
        e, "kBlockWaterPollution"));
    a.textControlRight.SetTextColor(d);
    simcity.RolloverItems.HideDivider(a)
  }
};
simcity.RolloverItems.kStringWaterFlow = {
  layoutPath : "Layouts/Rollovers/RolloverBlockTextTitle.js",
  init : function (a) {
    a.textControlTitle = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTitle)
  },
  update : function (a) {
    a.textControlTitle.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0e6062e9", "kStringDump"))
  }
};
simcity.RolloverItems.kWaterProduction = {
  iconPath : "icn_sci_water.png",
  layoutPath : "Layouts/Rollovers/RolloverItemNeutralColorMeterAndText.js",
  init : function (a) {
    a.meterBacking = a.layout.FindControlByID(simcity.cRolloverUI.kWinIDRolloverItemMeterBacking);
    a.meterFillbar = a.layout.FindControlByID(simcity.cRolloverUI.kWinIDRolloverItemMeterFillBar);
    a.textControl = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemValue)
  },
  updateQueries : function (a) {
    return {
      WaterRevertedPerHour : [simcity.kDataConnectedUnits,
        a, simcity.kDataBinAmount, simcity.kResourceIDWaterGlobals_TotalWaterRevertedPerHour],
      WaterReverted : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDWaterGlobals_TotalWaterReverted],
      WaterTrasmittedPerHour : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDWaterGlobals_TotalWaterTransmittedPerHour],
      WaterTrasmitted : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDWaterGlobals_TotalWaterTransmitted],
      WaterMin : [simcity.kDataConnectedUnits,
        a, simcity.kDataBins, simcity.kResourceIDWaterMin],
      WaterInMap : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDWaterInMap],
      amount_OneOverSteps : [simcity.kDataUnits, a, simcity.kDataProperties, simcity.kPropWaterProducer_Amount_OneOverSteps],
      amount_PerSteps : [simcity.kDataUnits, a, simcity.kDataProperties, simcity.kPropWaterProducer_Amount_PerStep],
      productionRate : [simcity.kDataUnits, a, simcity.kDataProperties, simcity.kPropWaterProducer_Rate],
      WaterTableDry : [simcity.kDataConnectedUnits,
        a, simcity.kDataBins, simcity.kResourceIDWaterTableDry],
      estDailyMax : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDWaterProduction]
    }
  },
  update : function (a, b) {
    var c = simcity.gCategoryQueryDataBindings.WaterCategory.useWaterProductionRatePerPeriod(b.WaterRevertedPerHour, b.WaterReverted, b.WaterTrasmittedPerHour, b.WaterTrasmitted),
    d = 0 === b.WaterTableDry.amount ? !1 : b.WaterTableDry.amount >= b.WaterTableDry.capacity - 1,
    c = d ? 0 : simcity.gCategoryQueryDataBindings.WaterCategory.getWaterProductionRate(c ?
        b.WaterReverted : b.WaterRevertedPerHour, c ? b.WaterTrasmitted : b.WaterTrasmittedPerHour),
    d = d ? 0 : b.estDailyMax / 24;
    d < c && (d = c);
    var e = simcity.FormatLargeNumberForFluid(c),
    f = simcity.FormatLargeNumberForFluid(d);
    a.meterFillbar.SetWidth(a.meterBacking.mWidth * (c / d));
    a.textControl.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0f164165", "kStringDump"), {
      amount : e.number,
      capacity : f.number,
      exponent : f.exponent
    })
  }
};
simcity.RolloverItems.kWaterProducerInfo = {
  layoutPath : "Layouts/Rollovers/RolloverBlockText1Row2Column.js",
  init : function (a) {
    a.textControlLeft1 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextLeft1);
    a.textControlRight1 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextRight1)
  },
  updateQueries : function (a) {
    return {
      WaterRevertedPerHour : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDWaterGlobals_TotalWaterRevertedPerHour],
      WaterReverted : [simcity.kDataConnectedUnits,
        a, simcity.kDataBinAmount, simcity.kResourceIDWaterGlobals_TotalWaterReverted],
      WaterTrasmittedPerHour : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDWaterGlobals_TotalWaterTransmittedPerHour],
      WaterTrasmitted : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDWaterGlobals_TotalWaterTransmitted],
      FilteredWaterRevertedPerHour : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDWaterGlobals_TotalFilteredWaterRevertedPerHour],
      FilteredWaterReverted : [simcity.kDataConnectedUnits,
        a, simcity.kDataBinAmount, simcity.kResourceIDWaterGlobals_TotalFilteredWaterReverted],
      FilteredWaterTrasmittedPerHour : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDWaterGlobals_TotalFilteredWaterTransmittedPerHour],
      FilteredWaterTrasmitted : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDWaterGlobals_TotalFilteredWaterTransmitted],
      WaterMin : [simcity.kDataConnectedUnits, a, simcity.kDataBins, simcity.kResourceIDWaterMin],
      amount_OneOverSteps : [simcity.kDataUnits,
        a, simcity.kDataProperties, simcity.kPropWaterProducer_Amount_OneOverSteps],
      amount_PerSteps : [simcity.kDataUnits, a, simcity.kDataProperties, simcity.kPropWaterProducer_Amount_PerStep],
      WaterInMap : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDWaterInMap],
      productionRate : [simcity.kDataUnits, a, simcity.kDataProperties, simcity.kPropWaterProducer_Rate]
    }
  },
  update : function (a, b) {
    var c = simcity.gCategoryQueryDataBindings.WaterCategory.useWaterProductionRatePerPeriod(b.WaterRevertedPerHour,
        b.WaterReverted, b.WaterTrasmittedPerHour, b.WaterTrasmitted),
    d = simcity.gCategoryQueryDataBindings.WaterCategory.getWaterProductionRate(c ? b.WaterReverted : b.WaterRevertedPerHour, c ? b.WaterTrasmitted : b.WaterTrasmittedPerHour),
    c = simcity.gCategoryQueryDataBindings.WaterCategory.getWaterProductionRate(c ? b.FilteredWaterReverted : b.FilteredWaterRevertedPerHour, c ? b.FilteredWaterTrasmitted : b.FilteredWaterTrasmittedPerHour),
    d = 0 < d ? c / d : 0;
    a.textControlLeft1.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json",
        "0x0e6062cd", "kWaterProducerInfo"));
    a.textControlRight1.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0ec4958a", "kWaterProducerInfo"), {
      amount : 1 > d ? d : 1
    })
  }
};
simcity.RolloverItems.kShoppers = {
  stringData : {
    tableID : "BuildingRollover.json",
    stringID : "0x0bc96e69",
    placeholder : "kShoppers"
  },
  iconPath : "Graphics/Common/Icons/icn-population.png",
  layoutPath : "Layouts/Rollovers/RolloverItemIconValue.js",
  init : function (a) {
    a.textControl = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemValue)
  },
  updateQueries : function (a) {
    return {
      shoppers : ["units", a, "bins", simcity.kResourceIDTotalShoppers],
      openShoppers : ["units", a, "bins", simcity.kResourceIDOpenShoppers]
    }
  },
  update : function (a,
    b) {
    a.textControl.UpdateLocaleText({
      shoppers_amount : b.shoppers.amount,
      shoppers_capacity : b.shoppers.amount + b.openShoppers.amount
    })
  }
};
simcity.RolloverItems.kBlockEducation = {
  layoutPath : "Layouts/Rollovers/RolloverBlockText3Row2Column.js",
  init : function (a) {
    a.textControlLeft = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextLeft1);
    a.textControlRight = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextRight1);
    a.textControlLeft2 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextLeft2);
    a.textControlRight2 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextRight2);
    a.textControlLeft3 =
      a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextLeft3);
    a.textControlRight3 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextRight3);
    a.BackgroundControl = a.layout.FindControlByID(simcity.cRolloverUI.kWinIDRolloverBackground)
  },
  updateQueries : function (a) {
    return {
      Student : ["connectedUnits", a, "bins", simcity.kResourceIDStudent],
      RegionalStudentsW1 : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeStudentW1],
      RegionalStudentsW2 : [simcity.kDataConnectedUnits,
        a, simcity.kDataBinAmount, simcity.kResourceIDTradeStudentW2],
      RegionalStudentsW3 : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeStudentW3],
      SpotsForKids : ["units", a, "bins", simcity.kResourceIDSpotsForKids],
      OverCrowding : ["units", a, "bins", simcity.kResourceIDOverCrowding]
    }
  },
  update : function (a, b) {
    a.textControlLeft.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0e699c66", "kBlockEducation"));
    a.textControlRight.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json",
        "0x0e6ae893", "kBlockEducation"));
    a.textControlLeft2.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0f1e3417", "kBlockEducation"));
    a.textControlRight2.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0e6ae894", "kBlockEducation"));
    a.textControlLeft3.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0f1e3418", "kBlockEducation"));
    a.textControlRight3.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0e6ae894", "kBlockEducation"));
    var c = b.Student.amount,
    d = b.SpotsForKids.amount + b.Student.amount - b.OverCrowding.amount,
    e = Math.min(c, b.RegionalStudentsW1 + b.RegionalStudentsW2 + b.RegionalStudentsW3),
    f = c - e;
    a.textControlLeft.SetTextColor(simcity.RolloverItems.textColorBlack);
    c == d ? a.textControlRight.SetTextColor(simcity.RolloverItems.textColorUrgent) : a.textControlRight.SetTextColor(simcity.RolloverItems.textColorBlack);
    a.textControlRight.UpdateLocaleText({
      amount : c,
      capacity : d
    });
    a.textControlRight2.UpdateLocaleText({
      amount : f,
      capacity : c
    });
    a.textControlRight3.UpdateLocaleText({
      amount : e,
      capacity : c
    })
  }
};
simcity.RolloverItems.kBlockEducation_University = {
  layoutPath : "Layouts/Rollovers/RolloverBlockText3Row2Column.js",
  init : function (a) {
    a.textControlLeft = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextLeft1);
    a.textControlRight = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextRight1);
    a.textControlLeft2 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextLeft2);
    a.textControlRight2 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextRight2);
    a.textControlLeft3 =
      a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextLeft3);
    a.textControlRight3 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextRight3)
  },
  updateQueries : function (a) {
    return {
      moduleStudents : ["units", a, "bins", simcity.kResourceIDEducatedAtModule],
      Student : ["connectedUnits", a, "bins", simcity.kResourceIDStudent],
      RegionalStudentsW1 : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeStudentW1],
      RegionalStudentsW2 : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount,
        simcity.kResourceIDTradeStudentW2],
      RegionalStudentsW3 : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTradeStudentW3],
      SpotsForKids : ["connectedUnits", a, "bins", simcity.kResourceIDSpotsForKids],
      OverCrowding : ["connectedUnits", a, "bins", simcity.kResourceIDOverCrowding]
    }
  },
  update : function (a, b) {
    var c = b.SpotsForKids.amount + b.Student.amount - b.OverCrowding.amount - b.moduleStudents.amount,
    d = b.Student.amount,
    e = Math.min(d, b.RegionalStudentsW1 + b.RegionalStudentsW2 + b.RegionalStudentsW3),
    f =
      d - e;
    a.textControlLeft.SetTextColor(simcity.RolloverItems.textColorBlack);
    d == c ? a.textControlRight.SetTextColor(simcity.RolloverItems.textColorUrgent) : a.textControlRight.SetTextColor(simcity.RolloverItems.textColorBlack);
    a.textControlLeft.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0e699c66", "kBlockEducation_University"));
    a.textControlRight.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0e6ae893", "kBlockEducation_University"), {
      amount : d,
      capacity : c
    });
    a.textControlLeft2.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json",
        "0x0f1e3417", "kBlockEducation_University"));
    a.textControlRight2.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0e6ae894", "kBlockEducation_University"), {
      amount : f,
      capacity : d
    });
    a.textControlLeft3.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0f1e3418", "kBlockEducation_University"));
    a.textControlRight3.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0e6ae894", "kBlockEducation_University"), {
      amount : e,
      capacity : d
    })
  }
};
simcity.RolloverItems.kBlockSkillLevel = {
  layoutPath : "Layouts/Rollovers/RolloverItemSmallTextCenter.js",
  init : function (a) {
    a.textControl = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemValue)
  },
  updateQueries : function (a) {
    var b = {
      normal : ["units", a, "flags", simcity.kUnitFlagNormal],
      EducationLevel : ["units", a, "bins", simcity.kResourceIDEducationLevel]
    };
    this.additionalQueries && goog.object.extend(b, this.additionalQueries(a));
    return b
  },
  update : function (a, b) {
    if (b.normal) {
      this.minimize = !1;
      var c = b.EducationLevel.amount,
      d = 0;
      b.previouslyEducated && (d = b.previouslyEducated.amount);
      0 == c ? 1 == d ? a.textControl.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0e9fab67", "kBlockEducationKnowledge")) : this.minimize = !0 : a.textControl.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0e9fab68", "kBlockEducationKnowledge"))
    } else
      this.minimize = !0
  }
};
simcity.RolloverItems.kBlockKnowledgeLevel = {
  additionalQueries : function (a) {
    return {
      previouslyEducated : ["units", a, "bins", simcity.kResourceIDPreviouslyEducated]
    }
  }
};
goog.object.extend(simcity.RolloverItems.kBlockKnowledgeLevel, simcity.RolloverItems.kBlockSkillLevel);
simcity.RolloverItems.kFireStationHistory = {
  layoutPath : "Layouts/Rollovers/RolloverBlockText1Row2Column.js",
  init : function (a) {
    a.textControlLeft1 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextLeft1);
    a.textControlRight1 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextRight1)
  },
  updateQueries : function (a) {
    return {
      FiresExtinguished : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDNumberOfFiresExtinguishedDisplay]
    }
  },
  update : function (a, b) {
    a.textControlLeft1.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json",
        "0x0e6cef17", "kBlockWindPower"));
    a.textControlRight1.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0ec79f89", "kBlockWindPower"), {
      amount : b.FiresExtinguished
    })
  }
};
simcity.RolloverItems.kFireStationHistoryHazMat = {
  layoutPath : "Layouts/Rollovers/RolloverBlockText1Row2Column.js",
  init : function (a) {
    a.textControlLeft1 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextLeft1);
    a.textControlRight1 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextRight1)
  },
  updateQueries : function (a) {
    return {
      FiresExtinguished : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDNumberOfHazMatFiresExtinguishedDisplay]
    }
  },
  update : function (a,
    b) {
    a.textControlLeft1.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0ec77946", "kBlockWindPower"));
    a.textControlRight1.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0ec79f89", "kBlockWindPower"), {
      amount : b.FiresExtinguished
    })
  }
};
simcity.RolloverItems.kPoliceStationStats = {
  iconPath : "icn_rollover_police_apprehended.png",
  layoutPath : "Layouts/Rollovers/RolloverBlockText3Row2Column.js",
  init : function (a) {
    a.textControlLeft1 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextLeft1);
    a.textControlRight1 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextRight1);
    a.textControlLeft2 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextLeft2);
    a.textControlRight2 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextRight2);
    a.textControlLeft3 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextLeft3);
    a.textControlRight3 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextRight3)
  },
  updateQueries : function (a) {
    return {
      arrested : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDCriminalsArrestedDisplay],
      rehabilitatedToday : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDCriminalsRehabilitatedToday],
      rehabilitatedPerDay : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDCriminalsRehabilitatedPerDay],
      overcrowdingToday : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDCriminalsReleasedOvercrowdingToday],
      overcrowdingPerDay : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDCriminalsReleasedOvercrowdingPerDay]
    }
  },
  update : function (a, b) {
    a.textControlLeft1.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0e6ac5fd", "kBlockWindPower"));
    a.textControlLeft2.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0e6ac5ff", "kBlockWindPower"));
    a.textControlLeft3.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0e6ac601", "kBlockWindPower"));
    a.textControlRight1.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0ec79f89", "kBlockWindPower"), {
      amount : b.arrested
    });
    a.textControlRight2.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0ec79f89", "kBlockWindPower"), {
      amount : Math.max(b.rehabilitatedToday, b.rehabilitatedPerDay)
    });
    a.textControlRight3.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json",
        "0x0ec79f89", "kBlockWindPower"), {
      amount : Math.max(b.overcrowdingToday, b.overcrowdingPerDay)
    })
  }
};
simcity.RolloverItems.kBlockLibrary = {
  layoutPath : "Layouts/Rollovers/RolloverBlockText1Row2Column.js",
  init : function (a) {
    a.textControlLeft = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextLeft1);
    a.textControlRight = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextRight1)
  },
  updateQueries : function (a) {
    return {
      VisitorsW1ThisPeriod : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDCulturalVisitorsW1ThisPeriod],
      VisitorsW1PerPeriod : [simcity.kDataConnectedUnits,
        a, simcity.kDataBinAmount, simcity.kResourceIDCulturalVisitorsW1PerPeriod],
      VisitorsW2ThisPeriod : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDCulturalVisitorsW2ThisPeriod],
      VisitorsW2PerPeriod : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDCulturalVisitorsW2PerPeriod],
      VisitorsW3ThisPeriod : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDCulturalVisitorsW3ThisPeriod],
      VisitorsW3PerPeriod : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount,
        simcity.kResourceIDCulturalVisitorsW3PerPeriod]
    }
  },
  update : function (a, b) {
    var c = b.VisitorsW1ThisPeriod + b.VisitorsW2ThisPeriod + b.VisitorsW3ThisPeriod,
    d = b.VisitorsW1PerPeriod + b.VisitorsW2PerPeriod + b.VisitorsW3PerPeriod;
    a.textControlLeft.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0e69d641", "kBlockLibrary"));
    a.textControlRight.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0ec79f89", "kBlockLibrary"), {
      amount : Math.max(c, d)
    });
    simcity.RolloverItems.HideDivider(a)
  }
};
simcity.RolloverItems.kBlockHealthTreating = {
  stringData : {
    tableID : "BuildingRollover.json",
    stringID : "0x0bdba4b1",
    placeholder : "kPatients"
  },
  iconPath : "Graphics/Common/Icons/icn-population.png",
  layoutPath : "Layouts/Rollovers/RolloverBlockTextTitle1Row2Column.js",
  init : function (a) {
    a.textControlTitle = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTitle);
    a.textControlTitleRight = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTitleRight);
    a.textControlLeft1 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextLeft1);
    a.textControlRight1 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextRight1)
  },
  updateQueries : function (a) {
    return {
      sickWaiting : ["connectedUnits", a, "bins", simcity.kResourceIDSickWaiting],
      injuryWaiting : ["connectedUnits", a, "bins", simcity.kResourceIDInjuryWaiting],
      WaitingRoom : ["connectedUnits", a, "bins", simcity.kResourceIDWaitingRoom],
      RoomsOccupied : ["connectedUnits", a, "bins", simcity.kResourceIDRoomsOccupied],
      RoomsFree : ["connectedUnits", a, "bins", simcity.kResourceIDRoomsFree],
      Overcrowding : ["connectedUnits",
        a, "bins", simcity.kResourceIDOverCrowding]
    }
  },
  update : function (a, b) {
    a.textControlTitle.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0bdba4b1", "kBlockHealth"));
    a.textControlTitleRight.SetVisibility(!0);
    a.textControlTitleRight.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0e6ae894", "kBlockHealth"), {
      amount : b.RoomsOccupied.amount - b.Overcrowding.amount
    });
    a.textControlLeft1.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0f068f41", "kBlockHealth"));
    a.textControlRight1.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json",
        "0x0e6ae894", "kBlockHealth"), {
      amount : b.RoomsOccupied.amount + b.RoomsFree.amount - b.Overcrowding.amount
    })
  }
};
simcity.RolloverItems.kBlockHealthWaiting = {
  stringData : {
    tableID : "BuildingRollover.json",
    stringID : "0x0bdba4b1",
    placeholder : "kPatients"
  },
  iconPath : "Graphics/Common/Icons/icn-population.png",
  layoutPath : "Layouts/Rollovers/RolloverBlockTextTitle1Row2Column.js",
  init : function (a) {
    a.textControlTitle = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTitle);
    a.textControlTitleRight = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTitleRight);
    a.textControlLeft1 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextLeft1);
    a.textControlRight1 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextRight1)
  },
  updateQueries : function (a) {
    return {
      sickWaiting : ["connectedUnits", a, "bins", simcity.kResourceIDSickWaiting],
      injuryWaiting : ["connectedUnits", a, "bins", simcity.kResourceIDInjuryWaiting],
      WaitingRoom : ["connectedUnits", a, "bins", simcity.kResourceIDWaitingRoom],
      RoomsOccupied : ["connectedUnits", a, "bins", simcity.kResourceIDRoomsOccupied],
      RoomsFree : ["connectedUnits", a, "bins", simcity.kResourceIDRoomsFree],
      Overcrowding : ["connectedUnits",
        a, "bins", simcity.kResourceIDOverCrowding]
    }
  },
  update : function (a, b) {
    a.textControlTitle.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0e6ae9f9", "kBlockHealth"));
    a.textControlTitleRight.SetVisibility(!0);
    a.textControlTitleRight.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0e6ae894", "kBlockHealth"), {
      amount : b.WaitingRoom.amount
    });
    a.textControlLeft1.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0f068f77", "kBlockHealth"));
    a.textControlRight1.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json",
        "0x0e6ae894", "kBlockHealth"), {
      amount : b.WaitingRoom.capacity
    })
  }
};
simcity.RolloverItems.kAmbulanceInjured = {
  layoutPath : "Layouts/Rollovers/RolloverBlockText1Row2Column.js",
  init : function (a) {
    a.textControlLeft = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextLeft1);
    a.textControlRight = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextRight1)
  },
  updateQueries : function (a) {
    var b = {
      numAmbulances : [simcity.kDataConnectedUnits, a, simcity.kDataBins, simcity.kResourceIDAmbulance]
    };
    this.additionalQueries && goog.object.extend(b, this.additionalQueries(a));
    return b
  },
  update : function (a, b) {
    a.textControlLeft.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0efa76ea", "kAmbulanceInjured"));
    a.textControlRight.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0efa7761", "kAmbulanceInjured"), {
      amount : 4 * b.numAmbulances.capacity
    });
    simcity.RolloverItems.HideDivider(a)
  }
};
simcity.RolloverItems.kAmbulanceInjured_Unconnected = {
  additionalQueries : function (a) {
    return {
      numAmbulances : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDAmbulance]
    }
  }
};
goog.object.extend(simcity.RolloverItems.kAmbulanceInjured_Unconnected, simcity.RolloverItems.kAmbulanceInjured);
simcity.RolloverItems.kBlockHealthHistory = {
  layoutPath : "Layouts/Rollovers/RolloverBlockText2Row2Column.js",
  init : function (a) {
    a.textControlLeft1 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextLeft1);
    a.textControlRight1 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextRight1);
    a.textControlLeft2 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextLeft2);
    a.textControlRight2 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextRight2)
  },
  updateQueries : function (a) {
    return {
      sickHealed : [simcity.kDataConnectedUnits,
        a, simcity.kDataBinAmount, simcity.kResourceIDSickHealedDisplay],
      InjuryHealed : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDInjuryHealedDisplay]
    }
  },
  update : function (a, b) {
    a.textControlLeft1.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0e6af642", "kBlockHealthHistory"));
    a.textControlRight1.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0ec79f89", "kBlockHealthHistory"), {
      amount : b.InjuryHealed
    });
    a.textControlLeft2.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json",
        "0x0e6af640", "kBlockHealthHistory"));
    a.textControlRight2.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0ec79f89", "kBlockHealthHistory"), {
      amount : b.sickHealed
    })
  }
};
simcity.RolloverItems.kCityHallTaxesSimple = {
  layoutPath : "Layouts/Rollovers/RolloverBlockText1Row2Column.js",
  init : function (a) {
    a.textControlLeft = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextLeft1);
    a.textControlRight = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextRight1)
  },
  updateQueries : function () {
    return {
      taxLevelRW1 : [simcity.kDataBinAmount, simcity.kResourceIDTaxLevelRW1]
    }
  },
  update : function (a, b) {
    a.textControlLeft.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json",
        "0x0e706af6", "kCityHallTaxesSimple"));
    a.textControlRight.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0ec4958a", "kCityHallTaxesSimple"), {
      amount : b.taxLevelRW1 / 100
    })
  }
};
simcity.RolloverItems.kCityHallTaxesAdvanced = {
  layoutPath : "Layouts/Rollovers/RolloverItemTaxes.js",
  init : function (a) {
    a.textControlTitle = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTitle);
    a.textControlLeft1 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextLeft1);
    a.textControlRight1 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextRight1);
    a.textControlLeft2 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextLeft2);
    a.textControlRight2 =
      a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextRight2);
    a.textControlLeft3 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextLeft3);
    a.textControlRight3 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextRight3);
    a.textControlCenter1 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemValue);
    a.textControlCenter2 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemValue2);
    a.textControlCenter3 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemValue3);
    a.BackgroundControl = a.layout.FindControlByID(simcity.cRolloverUI.kWinIDRolloverBackground)
  },
  updateQueries : function () {
    return {
      cityHallHasFinanceDept : [simcity.kDataBinAmount, simcity.kResourceIDHQ_CityHall_Finance_Module_IsOn],
      taxLevelRW1 : [simcity.kDataBinAmount, simcity.kResourceIDTaxLevelRW1],
      taxLevelRW2 : [simcity.kDataBinAmount, simcity.kResourceIDTaxLevelRW2],
      taxLevelRW3 : [simcity.kDataBinAmount, simcity.kResourceIDTaxLevelRW3],
      taxLevelCW1 : [simcity.kDataBinAmount, simcity.kResourceIDTaxLevelCW1],
      taxLevelCW2 : [simcity.kDataBinAmount,
        simcity.kResourceIDTaxLevelCW2],
      taxLevelCW3 : [simcity.kDataBinAmount, simcity.kResourceIDTaxLevelCW3],
      taxLevelIW1 : [simcity.kDataBinAmount, simcity.kResourceIDTaxLevelIW1],
      taxLevelIW2 : [simcity.kDataBinAmount, simcity.kResourceIDTaxLevelIW2],
      taxLevelIW3 : [simcity.kDataBinAmount, simcity.kResourceIDTaxLevelIW3]
    }
  },
  update : function (a, b) {
    a.textControlTitle.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0e706af6", "kCityHallTaxesAdvanced"));
    a.BackgroundControl.SetVisibility(!0);
    a.textControlLeft1.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json",
        "0x0ec4958a", "kCityHallTaxesAdvanced"), {
      amount : b.taxLevelRW1 / 100
    });
    a.textControlCenter1.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0ec4958a", "kCityHallTaxesAdvanced"), {
      amount : b.taxLevelRW2 / 100
    });
    a.textControlRight1.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0ec4958a", "kCityHallTaxesAdvanced"), {
      amount : b.taxLevelRW3 / 100
    });
    a.textControlLeft2.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0ec4958a", "kCityHallTaxesAdvanced"), {
      amount : b.taxLevelCW1 /
      100
    });
    a.textControlCenter2.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0ec4958a", "kCityHallTaxesAdvanced"), {
      amount : b.taxLevelCW2 / 100
    });
    a.textControlRight2.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0ec4958a", "kCityHallTaxesAdvanced"), {
      amount : b.taxLevelCW3 / 100
    });
    a.textControlLeft3.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0ec4958a", "kCityHallTaxesAdvanced"), {
      amount : b.taxLevelIW1 / 100
    });
    a.textControlCenter3.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json",
        "0x0ec4958a", "kCityHallTaxesAdvanced"), {
      amount : b.taxLevelIW2 / 100
    });
    a.textControlRight3.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0ec4958a", "kCityHallTaxesAdvanced"), {
      amount : b.taxLevelIW3 / 100
    })
  }
};
simcity.RolloverItems.kMayorHouse_Overdrive = {
  stringData : {
    tableID : "BuildingRollover.json",
    stringID : "0x0ebc9b70",
    placeholder : "kMayorHouse_Overdrive"
  },
  layoutPath : "Layouts/Rollovers/RolloverItemMultiColorMeterAndText.js",
  minimize : !1,
  init : function (a) {
    a.textControl = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemValue);
    a.meterBacking = a.layout.FindControlByID(simcity.cRolloverUI.kWinIDRolloverItemMeterBacking);
    a.meterGreenFillBar = a.layout.FindControlByID(simcity.cRolloverUI.kWinIDRolloverItemGreenMeterFillBar);
    a.meterYellowFillBar = a.layout.FindControlByID(simcity.cRolloverUI.kWinIDRolloverItemYellowMeterFillBar);
    a.meterRedFillBar = a.layout.FindControlByID(simcity.cRolloverUI.kWinIDRolloverItemRedMeterFillBar)
  },
  updateQueries : function (a) {
    var b = {
      OverDriveTimer : [simcity.kDataBins, simcity.kResourceIDOverDriveTimerForMansion],
      RatingToUnlock : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDRating_LocalForUnlock]
    };
    this.additionalQueries && goog.object.extend(b, this.additionalQueries(a));
    return b
  },
  update : function (a,
    b) {
    var c = b.OverDriveTimer,
    d = b.RatingToUnlock;
    c.amount > d.amount && (d.amount = c.amount);
    var e = 0;
    this.updateText && (e = this.updateText(a, b));
    this.minimize = 0 == c.capacity ? !0 : !1;
    a.textControl.UpdateLocaleText({
      amount : c.amount,
      capacity : d.amount,
      string : e
    });
    c = c.amount / d.amount;
    a.meterGreenFillBar.SetWidth(0);
    a.meterYellowFillBar.SetWidth(0);
    a.meterRedFillBar.SetWidth(0);
    0.5 > c ? a.meterRedFillBar.SetWidth(a.meterBacking.mWidth * c) : 0.75 > c ? a.meterYellowFillBar.SetWidth(a.meterBacking.mWidth * c) : a.meterGreenFillBar.SetWidth(a.meterBacking.mWidth *
      c)
  }
};
simcity.RolloverItems.kMayorHouse_Guests = {
  layoutPath : "Layouts/Rollovers/RolloverBlockText1Row2Column.js",
  init : function (a) {
    a.textControlLeft1 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextLeft1);
    a.textControlRight1 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextRight1)
  },
  updateQueries : function (a) {
    return {
      shoppers : ["connectedUnits", a, "bins", simcity.kResourceIDTotalShoppers],
      openShoppers : ["connectedUnits", a, "bins", simcity.kResourceIDOpenShoppers],
      ShopperW1 : ["connectedUnits", a,
        "bins", simcity.kResourceIDShopperW1],
      ShopperW2 : ["connectedUnits", a, "bins", simcity.kResourceIDShopperW2],
      ShopperW3 : ["connectedUnits", a, "bins", simcity.kResourceIDShopperW3],
      TouristW1 : ["connectedUnits", a, "bins", simcity.kResourceIDTouristW1],
      TouristW2 : ["connectedUnits", a, "bins", simcity.kResourceIDTouristW2],
      TouristW3 : ["connectedUnits", a, "bins", simcity.kResourceIDTouristW3]
    }
  },
  update : function (a, b) {
    var c = b.ShopperW1.amount + b.TouristW1.amount + b.ShopperW2.amount + b.TouristW2.amount + b.ShopperW3.amount + b.TouristW3.amount,
    d = b.shoppers.amount + b.openShoppers.amount;
    a.textControlLeft1.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0ebcab19", "kBlockCasinoGamblers"));
    a.textControlRight1.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0e6ae893", "kBlockCasinoGamblers"), {
      amount : c,
      capacity : d
    })
  }
};
simcity.RolloverItems.kMeltdownReactor = {
  layoutPath : "Layouts/Rollovers/RolloverItemNormalTextCenter.js",
  init : function (a) {
    a.textControl = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemValue)
  },
  updateQueries : function (a) {
    var b = {
      hadMeltdown : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDDisasterMeltdown_HadMeltdown],
      inProgress : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDDisasterMeltdown_InProgress],
      meltDownImminent : [simcity.kDataConnectedUnits,
        a, simcity.kDataBinAmount, simcity.kResourceIDMeltdown_TimerImminent]
    };
    this.additionalQueries && goog.object.extend(b, this.additionalQueries(a));
    return b
  },
  update : function (a, b) {
    0 == b.inProgress && 0 == b.hadMeltdown ? this.minimize = !0 : (this.minimize = !1, 0 < b.meltDownImminent ? (a.textControl.SetTextColor(simcity.RolloverItems.textColorUrgent), a.textControl.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0f0fa451", "kNuclearSkillLevel"))) : (a.textControl.SetTextColor(simcity.RolloverItems.textColorWarning),
          a.textControl.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0f0fa452", "kNuclearSkillLevel"))))
  }
};
simcity.RolloverItems.kNuclear_DestroyedByMeltdown = {
  layoutPath : "Layouts/Rollovers/RolloverBlockText1Row2Column.js",
  init : function (a) {
    a.textControlLeft = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextLeft1);
    a.textControlRight = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextRight1)
  },
  updateQueries : function (a) {
    return {
      hadMeltdown : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDDisasterMeltdown_HadMeltdown]
    }
  },
  update : function (a, b) {
    0 == b.hadMeltdown ?
    this.minimize = !0 : (this.minimize = !1, a.textControlRight.SetTextColor(simcity.RolloverItems.textColorWarning), a.textControlLeft.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0f0fa453", "kNuclear_DestroyedByMeltdown")), a.textControlRight.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0e6ae894", "kNuclear_DestroyedByMeltdown"), {
          amount : b.hadMeltdown
        }), simcity.RolloverItems.HideDivider(a))
  }
};
simcity.RolloverItems.kNuclearSkillLevel = {
  layoutPath : "Layouts/Rollovers/RolloverBlockText1Row2Column.js",
  init : function (a) {
    a.textControlLeft = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextLeft1);
    a.textControlRight = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextRight1)
  },
  updateQueries : function (a) {
    return {
      meltdownInProgress : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDDisasterMeltdown_InProgress],
      skillLow : [simcity.kDataConnectedUnits,
        a, simcity.kDataBinAmount, simcity.kResourceIDNuclearReactor_LowSkill],
      skillMedium : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDNuclearReactor_MediumSkill]
    }
  },
  update : function (a, b) {
    var c = 0,
    d = 0;
    a.textControlLeft.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0ea7c93a", "kNuclearSkillLevel"));
    0 < b.skillLow || 0 < b.meltdownInProgress ? (c = simcity.RolloverItems.textColorUrgent, d = "0x0ea7c964") : 0 < b.skillMedium ? (c = simcity.RolloverItems.textColorWarning, d = "0x0ea7c966") :
    (c = simcity.RolloverItems.textColorNormal, d = "0x0ea7c968");
    a.textControlRight.SetTextColor(c);
    a.textControlRight.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", d, "kNuclearSkillLevel"));
    simcity.RolloverItems.HideDivider(a)
  }
};
simcity.RolloverItems.kRadiationLevel = {
  layoutPath : "Layouts/Rollovers/RolloverBlockText1Row2Column.js",
  init : function (a) {
    a.textControlLeft = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextLeft1);
    a.textControlRight = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextRight1)
  },
  updateQueries : function (a) {
    return {
      radiation : ["maps", simcity.kMapIDRadiation, "unitRegion", a, "A", simcity.kDataConnectedExtractorSum]
    }
  },
  update : function (a, b) {
    var c = b.radiation.capacity / 5,
    d = simcity.RolloverItems.textColorNormal,
    e = "null";
    b.radiation.amount < c ? e = 240664740 : b.radiation.amount < 2 * c ? (d = simcity.RolloverItems.textColorWarning, e = 240664736) : b.radiation.amount < 3 * c ? (d = simcity.RolloverItems.textColorWarning, e = 245877094) : b.radiation.amount < 4 * c ? (d = simcity.RolloverItems.textColorUrgent, e = 240664738) : (d = simcity.RolloverItems.textColorUrgent, e = 240664739);
    a.textControlRight.SetTextColor(d);
    a.textControlLeft.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0f237f70", "kNuclear_DestroyedByMeltdown"));
    a.textControlRight.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json",
        "0x0ee1bfb8", "kNuclear_DestroyedByMeltdown"), {
      string : scrui.TextFromLocaleProperty({
        tableID : simcity.StringID.TableBuildingRollover,
        stringID : e
      })
    });
    simcity.RolloverItems.HideDivider(a)
  }
};
simcity.RolloverItems.kPowerProduction = {
  layoutPath : "Layouts/Rollovers/RolloverBlockText1Row2Column.js",
  init : function (a) {
    a.textControlLeft = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextLeft1);
    a.textControlRight = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextRight1)
  },
  updateQueries : function (a) {
    var b = {
      produced : [simcity.kDataConnectedUnits, a, simcity.kDataBins, simcity.kResourceIDPowerToTransmit],
      rate : [simcity.kDataUnits, a, simcity.kDataProperties, simcity.kPropPowerProducer_Rate]
    };
    this.additionalQueries && goog.object.extend(b, this.additionalQueries(a));
    return b
  },
  update : function (a, b) {
    a.textControlLeft.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0e6cef1c", "kPowerProduction"));
    var c = simcity.FormatLargeNumberForPower(60 * (b.produced.amount / b.rate));
    a.textControlRight.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0e6cef1e", "kPowerProduction"), {
      current : c.number,
      exponent : c.exponent
    })
  }
};
simcity.RolloverItems.kPowerProduction_Unconnected = {
  additionalQueries : function (a) {
    return {
      produced : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDPowerToTransmit],
      rate : [simcity.kDataUnits, a, simcity.kDataProperties, simcity.kPropPowerProducer_Rate]
    }
  }
};
goog.object.extend(simcity.RolloverItems.kPowerProduction_Unconnected, simcity.RolloverItems.kPowerProduction);
simcity.RolloverItems.kPowerProduction_Batteries = {
  additionalQueries : function (a) {
    return {
      produced : [simcity.kDataConnectedUnits, a, simcity.kDataBins, simcity.kResourceIDPeakPower],
      rate : [simcity.kDataUnits, a, simcity.kDataProperties, simcity.kPropPowerProducer_Rate]
    }
  }
};
goog.object.extend(simcity.RolloverItems.kPowerProduction_Batteries, simcity.RolloverItems.kPowerProduction);
simcity.RolloverItems.kBlockConnectedWindPower = {
  layoutPath : "Layouts/Rollovers/RolloverBlockText2Row2Column.js",
  init : function (a) {
    a.textControlLeft = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextLeft1);
    a.textControlRight = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextRight1);
    a.textControlLeft2 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextLeft2);
    a.textControlRight2 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextRight2)
  },
  updateQueries : function (a) {
    return {
      numTurbines : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDPower_NumberOfWindTurbines],
      windSpeed : [simcity.kDataConnectedUnits, a, simcity.kDataBins, simcity.kResourceIDWindSpeed],
      produced : [simcity.kDataConnectedUnits, a, simcity.kDataBins, simcity.kResourceIDPowerToTransmit_Last],
      rate : [simcity.kDataUnits, a, simcity.kDataProperties, simcity.kPropPowerProducer_Rate]
    }
  },
  update : function (a, b) {
    var c = 0;
    0 < b.numTurbines.amount && (c = b.windSpeed.amount / b.numTurbines.amount);
    a.textControlLeft.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0e6cef1b", "kBlockConnectedWindPower"));
    a.textControlRight.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0e6cef1d", "kBlockConnectedWindPower"), {
      current : c
    });
    c = simcity.FormatLargeNumberForPower(60 * (b.produced.amount / b.rate));
    a.textControlLeft2.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0e6cef1c", "kBlockConnectedWindPower"));
    a.textControlRight2.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json",
        "0x0e6cef1e", "kBlockConnectedWindPower"), {
      current : c.number,
      exponent : c.exponent
    });
    simcity.RolloverItems.HideDivider(a)
  }
};
simcity.RolloverItems.kWindSpeed = {
  layoutPath : "Layouts/Rollovers/RolloverBlockText2Row2Column.js",
  init : function (a) {
    a.textControlLeft = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextLeft1);
    a.textControlRight = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextRight1);
    a.textControlLeft2 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextLeft2);
    a.textControlRight2 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextRight2)
  },
  updateQueries : function (a) {
    return {
      windSpeed : ["units",
        a, "bins", simcity.kResourceIDWindSpeed],
      produced : ["units", a, "bins", simcity.kResourceIDPowerToTransmit_Last],
      rate : ["units", a, "properties", simcity.kPropPowerProducer_Rate]
    }
  },
  update : function (a, b) {
    a.textControlLeft.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0e6cef1b", "kBlockWindPower"));
    a.textControlRight.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0e6cef1d", "kBlockWindPower"));
    a.textControlLeft2.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0e6cef1c",
        "kBlockWindPower"));
    a.textControlRight2.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0e6cef1e", "kBlockWindPower"));
    a.textControlRight.UpdateLocaleText({
      current : b.windSpeed ? b.windSpeed.amount : 0
    });
    var c = simcity.FormatLargeNumberForPower(60 * (b.produced.amount / b.rate));
    a.textControlRight2.UpdateLocaleText({
      current : c.number,
      exponent : c.exponent
    })
  }
};
simcity.RolloverItems.kBlockConnectedSolarPower = {
  stringData : {
    tableID : "BuildingRollover.json",
    stringID : "0x0e6c3760",
    placeholder : "kStudentsE2Hours"
  },
  iconPath : "Graphics/Common/Icons/icn-population.png",
  layoutPath : "Layouts/Rollovers/RolloverItemSmallTextCenter2Row.js",
  init : function (a) {
    a.textControl = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemValue);
    a.textControl2 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemValue2)
  },
  updateQueries : function (a) {
    return {
      produced : ["connectedUnits",
        a, "bins", simcity.kResourceIDPowerToTransmit],
      rate : ["units", a, "properties", simcity.kPropPowerProducer_Rate]
    }
  },
  update : function (a, b) {
    a.textControl.UpdateLocaleText({
      hours_begin : new Date(2E3, 0, 1, 6, 0, 0, 0),
      hours_end : new Date(2E3, 0, 1, 18, 0, 0, 0)
    });
    var c = simcity.FormatLargeNumberForPower(60 * (b.produced.amount / b.rate));
    a.textControl2.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0e6c449c", "kBlockSolarPower"), {
      current : c.number,
      exponent : c.exponent
    })
  }
};
simcity.RolloverItems.kTotalBatteryStorage = {
  iconPath : "Graphics/Common/Icons/icn-electric-battery.png",
  layoutPath : "Layouts/Rollovers/RolloverItemMultiColorMeterAndText.js",
  init : function (a) {
    a.textControl = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemValue);
    a.meterBacking = a.layout.FindControlByID(simcity.cRolloverUI.kWinIDRolloverItemMeterBacking);
    a.meterGreenFillBar = a.layout.FindControlByID(simcity.cRolloverUI.kWinIDRolloverItemGreenMeterFillBar);
    a.meterYellowFillBar = a.layout.FindControlByID(simcity.cRolloverUI.kWinIDRolloverItemYellowMeterFillBar);
    a.meterRedFillBar = a.layout.FindControlByID(simcity.cRolloverUI.kWinIDRolloverItemRedMeterFillBar)
  },
  updateQueries : function (a) {
    return {
      solarAnimBin : ["connectedUnits", a, "bins", simcity.kResourceIDSolarAnimBin],
      storedPower : ["connectedUnits", a, "bins", simcity.kResourceIDStoredPower],
      activeSolarUnits : ["connectedUnits", a, "bins", simcity.kResourceIDPower_NumberOfSolarUnits],
      activeSolarBatteries : ["connectedUnits", a, "bins", simcity.kResourceIDPower_NumberOfSolarBatteries],
      activeWindBatteries : ["connectedUnits", a,
        "bins", simcity.kResourceIDPower_NumberOfWindBatteries],
      Hour : ["bins", simcity.kResourceIDHour]
    }
  },
  update : function (a, b) {
    var c = 0;
    simcity.FormatLargeNumberForPower(4E3 * b.solarAnimBin.amount / b.activeSolarUnits.amount);
    simcity.FormatLargeNumberForPower(4E3 * b.solarAnimBin.capacity / b.activeSolarUnits.amount);
    0 < b.solarAnimBin.amount ? 6 <= b.Hour.amount && 18 >= b.Hour.amount ? (a.textControl.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0e6cff1a", "kBatteryStorage")), a.meterGreenFillBar.SetVisibility(!0),
      a.meterYellowFillBar.SetVisibility(!1)) : (a.textControl.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0e6cff1b", "kBatteryStorage")), a.meterGreenFillBar.SetVisibility(!1), a.meterYellowFillBar.SetVisibility(!0)) : a.textControl.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0e6cff1c", "kBatteryStorage"));
    c = b.solarAnimBin.amount / b.solarAnimBin.capacity;
    a.meterRedFillBar.SetVisibility(!1);
    a.meterYellowFillBar.SetWidth(a.meterBacking.mWidth * c);
    a.meterRedFillBar.SetWidth(a.meterBacking.mWidth *
      c);
    a.meterGreenFillBar.SetWidth(a.meterBacking.mWidth * c)
  }
};
simcity.RolloverItems.kStringBatteryStorage = {
  layoutPath : "Layouts/Rollovers/RolloverBlockTextTitle.js",
  init : function (a) {
    a.textControlTitle = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTitle)
  },
  update : function (a) {
    a.textControlTitle.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0efc2c3c", "kStringDump"))
  }
};
simcity.RolloverItems.kBatteryStorage = {
  iconPath : "Graphics/Common/Icons/icn-electric-battery.png",
  layoutPath : "Layouts/Rollovers/RolloverItemMultiColorMeterAndText.js",
  init : function (a) {
    a.textControl = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemValue);
    a.meterBacking = a.layout.FindControlByID(simcity.cRolloverUI.kWinIDRolloverItemMeterBacking);
    a.meterGreenFillBar = a.layout.FindControlByID(simcity.cRolloverUI.kWinIDRolloverItemGreenMeterFillBar);
    a.meterYellowFillBar = a.layout.FindControlByID(simcity.cRolloverUI.kWinIDRolloverItemYellowMeterFillBar);
    a.meterRedFillBar = a.layout.FindControlByID(simcity.cRolloverUI.kWinIDRolloverItemRedMeterFillBar)
  },
  updateQueries : function (a) {
    return {
      storedPower : ["units", a, "bins", simcity.kResourceIDStoredPower]
    }
  },
  update : function (a, b) {
    var c = b.storedPower.amount / b.storedPower.capacity;
    a.textControl.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0e6cef1a", "kBatteryStorage"), {
      current : b.storedPower.amount,
      max : b.storedPower.capacity
    });
    a.meterYellowFillBar.SetWidth(0);
    a.meterRedFillBar.SetWidth(0);
    a.meterGreenFillBar.SetWidth(a.meterBacking.mWidth *
      c)
  }
};
simcity.RolloverItems.kResourcePowerProducer = {
  layoutPath : "Layouts/Rollovers/RolloverBlockText2Row2Column.js",
  init : function (a) {
    a.textControlLeft1 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextLeft1);
    a.textControlRight1 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextRight1);
    a.textControlLeft2 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextLeft2);
    a.textControlRight2 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextRight2)
  },
  updateQueries : function (a) {
    var b = {
      produced : ["connectedUnits", a, "bins", simcity.kResourceIDPowerToTransmit],
      rate : ["units", a, "properties", simcity.kPropPowerProducer_Rate],
      airPollutionProduced : ["connectedUnits", a, "bins", simcity.kPropAirPollutionProduced],
      airPollutionPerHour : ["connectedUnits", a, "bins", simcity.kPropAirPollutionPerHour]
    };
    this.additionalQueries && goog.object.extend(b, this.additionalQueries(a));
    return b
  },
  update : function (a, b) {
    var c = "null",
    d = simcity.FormatLargeNumberForPower(60 * (b.produced.amount / b.rate));
    this.additionalUpdate &&
    (c = this.additionalUpdate(a, b));
    var e = simcity.FormatLargeNumberByType(24 * (b.resourceBurned.amount > b.resourceBurnedPerHour.amount ? b.resourceBurned.amount : b.resourceBurnedPerHour.amount), a.burnFormatType);
    a.textControlLeft1.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0e6cef1c", "kResourcePowerProducer"));
    a.textControlRight1.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0e6cef1e", "kResourcePowerProducer"), {
      current : d.number,
      exponent : d.exponent
    });
    a.textControlLeft2.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json",
        "0x0e718668", "kResourcePowerProducer"), {
      resource : c
    });
    a.textControlRight2.UpdateLocaleText({
      amount : e.number,
      exponent : e.exponent
    })
  }
};
simcity.RolloverItems.kCoalPower = {
  additionalQueries : function (a) {
    return {
      resourceBurned : ["connectedUnits", a, "bins", simcity.kResourceIDCoalBurnedThisHour],
      resourceBurnedPerHour : ["connectedUnits", a, "bins", simcity.kResourceIDCoalBurnedPerHour]
    }
  },
  additionalUpdate : function (a) {
    a.textControlRight2.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0e8c0d9f", "kResourcePowerProducer"));
    a.burnFormatType = simcity.NumberFormat.Tons;
    return scrui.TextFromLocaleProperty({
      tableID : simcity.StringID.TableResource,
      stringID : simcity.StringID.Coal
    })
  }
};
goog.object.extend(simcity.RolloverItems.kCoalPower, simcity.RolloverItems.kResourcePowerProducer);
simcity.RolloverItems.kOilCrudePower = {
  additionalQueries : function (a) {
    return {
      resourceBurned : ["connectedUnits", a, "bins", simcity.kResourceIDOilCrudeBurnedThisHour],
      resourceBurnedPerHour : ["connectedUnits", a, "bins", simcity.kResourceIDOilCrudeBurnedPerHour]
    }
  },
  additionalUpdate : function (a) {
    a.textControlRight2.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0e8c0da1", "kResourcePowerProducer"));
    a.burnFormatType = simcity.NumberFormat.Standard;
    return scrui.TextFromLocaleProperty({
      tableID : simcity.StringID.TableResource,
      stringID : simcity.StringID.Oil
    })
  }
};
goog.object.extend(simcity.RolloverItems.kOilCrudePower, simcity.RolloverItems.kResourcePowerProducer);
simcity.RolloverItems.kCoalPower_Unconnected = {
  updateQueries : function (a) {
    var b = {
      produced : ["units", a, "bins", simcity.kResourceIDPowerToTransmit],
      rate : ["units", a, "properties", simcity.kPropPowerProducer_Rate],
      airPollutionProduced : ["units", a, "bins", simcity.kPropAirPollutionProduced],
      airPollutionPerHour : ["units", a, "bins", simcity.kPropAirPollutionPerHour]
    };
    this.additionalQueries && goog.object.extend(b, this.additionalQueries(a));
    return b
  },
  additionalQueries : function (a) {
    return {
      resourceBurned : ["units", a, "bins",
        simcity.kResourceIDCoalBurnedThisHour],
      resourceBurnedPerHour : ["units", a, "bins", simcity.kResourceIDCoalBurnedPerHour]
    }
  },
  additionalUpdate : function (a) {
    a.textControlRight2.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0e8c0d9f", "kResourcePowerProducer"));
    return scrui.TextFromLocaleProperty({
      tableID : simcity.StringID.TableResource,
      stringID : simcity.StringID.Coal
    })
  }
};
goog.object.extend(simcity.RolloverItems.kCoalPower_Unconnected, simcity.RolloverItems.kCoalPower);
simcity.RolloverItems.kOilCrudePower_Unconnected = {
  additionalQueries : function (a) {
    return {
      resourceBurned : ["units", a, "bins", simcity.kResourceIDOilCrudeBurnedThisHour],
      resourceBurnedPerHour : ["units", a, "bins", simcity.kResourceIDOilCrudeBurnedPerHour]
    }
  },
  additionalUpdate : function (a) {
    a.textControlRight2.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0e8c0da1", "kResourcePowerProducer"));
    return scrui.TextFromLocaleProperty({
      tableID : simcity.StringID.TableResource,
      stringID : simcity.StringID.Oil
    })
  }
};
goog.object.extend(simcity.RolloverItems.kOilCrudePower_Unconnected, simcity.RolloverItems.kOilCrudePower);
simcity.RolloverItems.kImportExportManagePanel = {
  stringData : {
    tableID : "BuildingRollover.json",
    stringID : "0x0eb79f22",
    placeholder : "kResourceGlobalMarketDeliveryPanel"
  },
  minimize : !1,
  layoutPath : "Layouts/Rollovers/RolloverItemButton.js",
  init : function (a) {
    a.toggleLocalButtonControl = a.layout.FindControlByID(simcity.cRolloverUI.kWinIDRolloverItemButton);
    a.toggleLocalButtonTextControl = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemButtonText);
    a.toggleLocalButtonTextControl.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json",
        "0x0ec75d74", "kResourceDeliveryStoragePanel"))
  },
  onItemClicked : function () {
    var a = simcity.gRolloverManager.mRolloverUI.mSelectedUnitRef,
    b = simcity.gGlobalUIHandler;
    scrui.Assert(!b.mImportExportUIHandler, "Already showing the import/emport handler");
    b.mImportExportUIHandler || (b.mImportExportUIHandler = new simcity.cImportExportUIHandler, b.mImportExportUIHandler.Init(gUIManager.FindControlByID(simcity.kWinRootWindowID)), gUIManager.RegisterUIHandler(b.mImportExportUIHandler), simcity.gGlobalUIHandler.mImportExportUIHandler.Show(a))
  }
};
simcity.RolloverItems.kResourceGlobalMarketDeliveryPanel = {
  stringData : {
    tableID : "BuildingRollover.json",
    stringID : "0x0eb79f22",
    placeholder : "kResourceGlobalMarketDeliveryPanel"
  },
  minimize : !1,
  layoutPath : "Layouts/Rollovers/RolloverResourceGlobalMarketDelivery.js",
  initQueries : function () {
    return {
      importFlag : ["selectedUnit", "flags", simcity.kUnitFlagIDImportLot]
    }
  },
  init : function (a, b) {
    a.toggleLocalButtonControl = a.layout.FindControlByID(simcity.cRolloverUI.kWinIDRolloverItemButton);
    a.toggleLocalButtonTextControl =
      a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemButtonText);
    a.toggleLocalButtonControl.SetSelected(b.importFlag);
    a.textControl = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemValue)
  },
  updateQueries : function () {
    return {
      buyPrice : ["simProperties", this.buyPriceProperty]
    }
  },
  update : function (a, b) {
    var c = 0;
    this.updateText && (c = this.updateText(a, b));
    a.textControl.UpdateLocaleText({
      resource : c,
      price : b.buyPrice
    });
    a.toggleLocalButtonTextControl.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json",
        "0x0ea0c784", "kResourceDeliveryStoragePanel"), {
      resource : c
    })
  },
  onItemClicked : function () {
    scrui.PostGameCommand(scrui.BuildCommand(["runSelectedUnitPlayerRule", simcity.kRuleIDSCPlayerRuleToggleImportExport]))
  }
};
simcity.RolloverItems.kCoalGlobalMarketDeliveryPanel = {
  iconPath : "Graphics/Icons/TradeIcons/icn-trade-coal.png",
  buyPriceProperty : simcity.kPropscCoalBuyPrice,
  updateText : function (a) {
    a.formatType = simcity.NumberFormat.Tons;
    return scrui.TextFromLocaleProperty({
      tableID : 37687336,
      stringID : simcity.StringID.Coal
    })
  }
};
goog.object.extend(simcity.RolloverItems.kCoalGlobalMarketDeliveryPanel, simcity.RolloverItems.kResourceGlobalMarketDeliveryPanel);
simcity.RolloverItems.kOilCrudeGlobalMarketDeliveryPanel = {
  iconPath : "Graphics/Icons/TradeIcons/icn-trade-oilcrude.png",
  buyPriceProperty : simcity.kPropscOilCrudeBuyPrice,
  updateText : function (a) {
    a.formatType = simcity.NumberFormat.Standard;
    return scrui.TextFromLocaleProperty({
      tableID : 37687336,
      stringID : simcity.StringID.Oil
    })
  }
};
goog.object.extend(simcity.RolloverItems.kOilCrudeGlobalMarketDeliveryPanel, simcity.RolloverItems.kResourceGlobalMarketDeliveryPanel);
simcity.RolloverItems.kResourceDeliveryStoragePanel = {
  minimize : !1,
  layoutPath : "Layouts/Rollovers/RolloverResourceStorageDelivery.js",
  initQueries : function (a) {
    var b = {};
    this.additionalQueries && goog.object.extend(b, this.additionalQueries(a));
    return b
  },
  init : function (a, b) {
    a.toggleLocalButtonControl = a.layout.FindControlByID(simcity.cRolloverUI.kWinIDRolloverItemButton);
    a.toggleLocalButtonTextControl = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemButtonText);
    a.toggleLocalButtonControl.SetSelected(b.deliveryAllowed);
    a.textControl = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemValue);
    a.meterBacking = a.layout.FindControlByID(simcity.cRolloverUI.kWinIDRolloverItemMeterBacking);
    a.meterFillbar = a.layout.FindControlByID(simcity.cRolloverUI.kWinIDRolloverItemMeterFillBar);
    a.meterGreenFillBar = a.layout.FindControlByID(simcity.cRolloverUI.kWinIDRolloverItemGreenMeterFillBar);
    a.meterYellowFillBar = a.layout.FindControlByID(simcity.cRolloverUI.kWinIDRolloverItemYellowMeterFillBar);
    a.meterRedFillBar = a.layout.FindControlByID(simcity.cRolloverUI.kWinIDRolloverItemRedMeterFillBar);
    a.resourceIndex = 1
  },
  updateQueries : function (a) {
    var b = {};
    this.additionalQueries && goog.object.extend(b, this.additionalQueries(a));
    return b
  },
  update : function (a, b) {
    var c = b.resource,
    d = 0;
    this.updateText && (d = this.updateText(a, b));
    this.minimize = 0 == c.capacity ? !0 : !1;
    var e = simcity.FormatLargeNumberByType(c.amount, a.formatType),
    f = simcity.FormatLargeNumberByType(c.capacity, a.formatType);
    a.textControl.UpdateLocaleText({
      amount : e.number,
      capacity : f.number,
      exponent : f.exponent,
      string : d
    });
    c = c.amount / c.capacity;
    a.meterGreenFillBar.SetVisibility(!1);
    a.meterYellowFillBar.SetVisibility(!1);
    a.meterRedFillBar.SetVisibility(!1);
    0 < c && (a.meterFillbar.SetWidth(a.meterBacking.mWidth * c), 0.5 > c ? a.meterRedFillBar.SetVisibility(!0) : 0.75 > c ? a.meterYellowFillBar.SetVisibility(!0) : a.meterGreenFillBar.SetVisibility(!0));
    a.toggleLocalButtonTextControl.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0ea0c783", "kResourceDeliveryStoragePanel"), {
      resource : d
    })
  },
  onItemClicked : function () {
    for (var a = 0; a < this.resourceIndex; ++a)
      scrui.PostGameCommand(scrui.BuildCommand(["runSelectedUnitPlayerRule",
            simcity.kRuleIDSCPlayerRuleCycleDeliveries]));
    scrui.PostGameCommand(scrui.BuildCommand(["runSelectedUnitPlayerRule", simcity.kRuleIDSCPlayerRuleToggleDeliveries]))
  },
  onSecondItemClicked : function () {
    for (var a = 0; a < this.resourceIndex; ++a)
      scrui.PostGameCommand(scrui.BuildCommand(["runSelectedUnitPlayerRule", simcity.kRuleIDSCPlayerRuleCycleDeliveries]));
    scrui.PostGameCommand(scrui.BuildCommand(["runSelectedUnitPlayerRule", simcity.kRuleIDSCPlayerRuleToggleDeliveries]))
  }
};
simcity.RolloverItems.kAlloyDeliveryStoragePanel = {
  resourceIndex : 0,
  iconPath : "Graphics/Icons/TradeIcons/icn-trade-alloy.png",
  stringData : {
    tableID : "BuildingRollover.json",
    stringID : "0x0e716cd3",
    placeholder : "kAlloyStored"
  },
  additionalQueries : function (a) {
    return {
      resource : ["connectedUnits", a, "bins", simcity.kResourceIDAlloy],
      deliveryAllowed : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDAlloyDeliveryAllowed]
    }
  },
  updateText : function (a) {
    a.formatType = simcity.NumberFormat.Tons;
    return scrui.TextFromLocaleProperty({
      tableID : 37687336,
      stringID : simcity.StringID.Alloy
    })
  }
};
goog.object.extend(simcity.RolloverItems.kAlloyDeliveryStoragePanel, simcity.RolloverItems.kResourceDeliveryStoragePanel);
simcity.RolloverItems.kCoalDeliveryStoragePanel = {
  resourceIndex : 1,
  iconPath : "Graphics/Icons/TradeIcons/icn-trade-coal.png",
  stringData : {
    tableID : "BuildingRollover.json",
    stringID : "0x0e716cd3",
    placeholder : "kCoalStored"
  },
  additionalQueries : function (a) {
    return {
      resource : ["connectedUnits", a, "bins", simcity.kResourceIDCoal],
      deliveryAllowed : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDCoalDeliveryAllowed]
    }
  },
  updateText : function (a) {
    a.formatType = simcity.NumberFormat.Tons;
    return scrui.TextFromLocaleProperty({
      tableID : 37687336,
      stringID : simcity.StringID.Coal
    })
  }
};
goog.object.extend(simcity.RolloverItems.kCoalDeliveryStoragePanel, simcity.RolloverItems.kResourceDeliveryStoragePanel);
simcity.RolloverItems.kComputersDeliveryStoragePanel = {
  resourceIndex : 2,
  iconPath : "Graphics/Icons/TradeIcons/icn-trade-computer.png",
  stringData : {
    tableID : "BuildingRollover.json",
    stringID : "0x0e741cbc",
    placeholder : "kComputersStored"
  },
  additionalQueries : function (a) {
    return {
      resource : ["connectedUnits", a, "bins", simcity.kResourceIDComputer],
      deliveryAllowed : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDComputerDeliveryAllowed]
    }
  },
  updateText : function (a) {
    a.formatType = simcity.NumberFormat.Units;
    return scrui.TextFromLocaleProperty({
      tableID : 37687336,
      stringID : simcity.StringID.Computer
    })
  }
};
goog.object.extend(simcity.RolloverItems.kComputersDeliveryStoragePanel, simcity.RolloverItems.kResourceDeliveryStoragePanel);
simcity.RolloverItems.kElectronicsDeliveryStoragePanel = {
  resourceIndex : 3,
  iconPath : "Graphics/Icons/TradeIcons/icn-trade-electronics.png",
  stringData : {
    tableID : "BuildingRollover.json",
    stringID : "0x0e741cbc",
    placeholder : "kElectronicsStored"
  },
  additionalQueries : function (a) {
    return {
      resource : ["connectedUnits", a, "bins", simcity.kResourceIDElectronics],
      deliveryAllowed : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDElectronicsDeliveryAllowed]
    }
  },
  updateText : function (a) {
    a.formatType = simcity.NumberFormat.Units;
    return scrui.TextFromLocaleProperty({
      tableID : 37687336,
      stringID : simcity.StringID.Electronics
    })
  }
};
goog.object.extend(simcity.RolloverItems.kElectronicsDeliveryStoragePanel, simcity.RolloverItems.kResourceDeliveryStoragePanel);
simcity.RolloverItems.kFuelDeliveryStoragePanel = {
  resourceIndex : 4,
  iconPath : "Graphics/Icons/TradeIcons/icn-trade-fuel.png",
  stringData : {
    tableID : "BuildingRollover.json",
    stringID : "0x0e717054",
    placeholder : "kFuelStored"
  },
  additionalQueries : function (a) {
    return {
      resource : ["connectedUnits", a, "bins", simcity.kResourceIDFuel],
      deliveryAllowed : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDFuelDeliveryAllowed]
    }
  },
  updateText : function (a) {
    a.formatType = simcity.NumberFormat.Barrels;
    return scrui.TextFromLocaleProperty({
      tableID : 37687336,
      stringID : simcity.StringID.Fuel
    })
  }
};
goog.object.extend(simcity.RolloverItems.kFuelDeliveryStoragePanel, simcity.RolloverItems.kResourceDeliveryStoragePanel);
simcity.RolloverItems.kMetalDeliveryStoragePanel = {
  resourceIndex : 5,
  iconPath : "Graphics/Icons/TradeIcons/icn-trade-metal.png",
  stringData : {
    tableID : "BuildingRollover.json",
    stringID : "0x0e716cd3",
    placeholder : "kMetalStored"
  },
  additionalQueries : function (a) {
    return {
      resource : ["connectedUnits", a, "bins", simcity.kResourceIDMetal],
      deliveryAllowed : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDMetalDeliveryAllowed]
    }
  },
  updateText : function (a) {
    a.formatType = simcity.NumberFormat.Tons;
    return scrui.TextFromLocaleProperty({
      tableID : 37687336,
      stringID : simcity.StringID.Metal
    })
  }
};
goog.object.extend(simcity.RolloverItems.kMetalDeliveryStoragePanel, simcity.RolloverItems.kResourceDeliveryStoragePanel);
simcity.RolloverItems.kOilCrudeDeliveryStoragePanel = {
  resourceIndex : 6,
  iconPath : "Graphics/Icons/TradeIcons/icn-trade-oil.png",
  stringData : {
    tableID : "BuildingRollover.json",
    stringID : "0x0e717054",
    placeholder : "kOilCrudeStored"
  },
  additionalQueries : function (a) {
    return {
      resource : ["connectedUnits", a, "bins", simcity.kResourceIDOilCrude],
      deliveryAllowed : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDOilCrudeDeliveryAllowed]
    }
  },
  updateText : function (a) {
    a.formatType = simcity.NumberFormat.Barrels;
    return scrui.TextFromLocaleProperty({
      tableID : 37687336,
      stringID : simcity.StringID.Oil
    })
  }
};
goog.object.extend(simcity.RolloverItems.kOilCrudeDeliveryStoragePanel, simcity.RolloverItems.kResourceDeliveryStoragePanel);
simcity.RolloverItems.kOreDeliveryStoragePanel = {
  resourceIndex : 7,
  iconPath : "Graphics/Icons/TradeIcons/icn-trade-ore.png",
  stringData : {
    tableID : "BuildingRollover.json",
    stringID : "0x0e716cd3",
    placeholder : "kOreStored"
  },
  additionalQueries : function (a) {
    return {
      resource : ["connectedUnits", a, "bins", simcity.kResourceIDOreRaw],
      deliveryAllowed : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDOreRawDeliveryAllowed]
    }
  },
  updateText : function (a) {
    a.formatType = simcity.NumberFormat.Tons;
    return scrui.TextFromLocaleProperty({
      tableID : 37687336,
      stringID : 2530163463
    })
  }
};
goog.object.extend(simcity.RolloverItems.kOreDeliveryStoragePanel, simcity.RolloverItems.kResourceDeliveryStoragePanel);
simcity.RolloverItems.kPlasticDeliveryStoragePanel = {
  resourceIndex : 8,
  iconPath : "Graphics/Icons/TradeIcons/icn-trade-plastic.png",
  stringData : {
    tableID : "BuildingRollover.json",
    stringID : "0x0e741cbc",
    placeholder : "kPlasticStored"
  },
  additionalQueries : function (a) {
    return {
      resource : ["connectedUnits", a, "bins", simcity.kResourceIDPlastic],
      deliveryAllowed : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDPlasticDeliveryAllowed]
    }
  },
  updateText : function (a) {
    a.formatType = simcity.NumberFormat.Units;
    return scrui.TextFromLocaleProperty({
      tableID : 37687336,
      stringID : simcity.StringID.Plastic
    })
  }
};
goog.object.extend(simcity.RolloverItems.kPlasticDeliveryStoragePanel, simcity.RolloverItems.kResourceDeliveryStoragePanel);
simcity.RolloverItems.kTelevisionsDeliveryStoragePanel = {
  resourceIndex : 9,
  iconPath : "Graphics/Icons/TradeIcons/icn-trade-television.png",
  stringData : {
    tableID : "BuildingRollover.json",
    stringID : "0x0e741cbc",
    placeholder : "kTelevisionsStored"
  },
  additionalQueries : function (a) {
    return {
      resource : ["connectedUnits", a, "bins", simcity.kResourceIDTelevision],
      deliveryAllowed : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTelevisionDeliveryAllowed]
    }
  },
  updateText : function (a) {
    a.formatType = simcity.NumberFormat.Units;
    return scrui.TextFromLocaleProperty({
      tableID : 37687336,
      stringID : simcity.StringID.Television
    })
  }
};
goog.object.extend(simcity.RolloverItems.kTelevisionsDeliveryStoragePanel, simcity.RolloverItems.kResourceDeliveryStoragePanel);
simcity.RolloverItems.kResourceStored = {
  layoutPath : "Layouts/Rollovers/RolloverItemNeutralColorMeterAndText.js",
  minimize : !1,
  init : function (a) {
    a.textControl = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemValue);
    a.meterBacking = a.layout.FindControlByID(simcity.cRolloverUI.kWinIDRolloverItemMeterBacking);
    a.meterFillbar = a.layout.FindControlByID(simcity.cRolloverUI.kWinIDRolloverItemMeterFillBar);
    a.meterYellowFillBar = a.layout.FindControlByID(simcity.cRolloverUI.kWinIDRolloverItemYellowMeterFillBar);
    a.meterNeutralFillBar = a.layout.FindControlByID(simcity.cRolloverUI.kWinIDRolloverItemNeutralMeterFillBar)
  },
  updateQueries : function (a) {
    var b = {};
    this.additionalQueries && goog.object.extend(b, this.additionalQueries(a));
    return b
  },
  update : function (a, b) {
    var c = b.resource,
    d = 0;
    this.updateText && (d = this.updateText(a, b));
    this.minimize = 0 == c.capacity ? !0 : !1;
    var e = simcity.FormatLargeNumberByType(c.amount, a.formatType),
    f = simcity.FormatLargeNumberByType(c.capacity, a.formatType);
    a.textControl.SetLocaleText(this.getStringByType(a.formatType), {
      amount : e.number,
      amountExponent : e.exponent,
      capacity : f.number,
      capacityExponent : f.exponent,
      string : d
    });
    c = c.amount / c.capacity;
    d = 0.9 < c;
    a.meterYellowFillBar.SetVisibility(d);
    a.meterNeutralFillBar.SetVisibility(!d);
    a.meterFillbar.SetWidth(a.meterBacking.mWidth * c)
  },
  getStringByType : function (a) {
    var b = 0;
    switch (a) {
    case simcity.NumberFormat.Tons:
      b = "0x0e716cd3";
      break;
    case simcity.NumberFormat.Barrels:
      b = "0x0e717054";
      break;
    case simcity.NumberFormat.Crates:
    case simcity.NumberFormat.Units:
      b = "0x0e741cbc";
      break;
    default:
      b =
        "0x0eec3d36"
    }
    return new scrui.cLocaleString("BuildingRollover.json", b, "kResourceStored")
  }
};
simcity.RolloverItems.kCriminalsStored = {
  iconPath : "icn_rollover_police_apprehended.png",
  additionalQueries : function (a) {
    return {
      resource : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDCriminal],
      totalCells : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTotalCells]
    }
  },
  updateText : function (a, b) {
    b.resource.capacity = b.totalCells;
    a.formatType = simcity.NumberFormat.Standard;
    return scrui.TextFromLocaleProperty({
      tableID : simcity.StringID.TableBuildingRollover,
      stringID : 250362677
    })
  }
};
goog.object.extend(simcity.RolloverItems.kCriminalsStored, simcity.RolloverItems.kResourceStored);
simcity.RolloverItems.kCoalStored = {
  iconPath : "Graphics/Icons/TradeIcons/icn-trade-coal.png",
  additionalQueries : function (a) {
    return {
      resource : [simcity.kDataConnectedUnits, a, simcity.kDataBins, simcity.kResourceIDCoal]
    }
  },
  updateText : function (a) {
    a.formatType = simcity.NumberFormat.Tons;
    return scrui.TextFromLocaleProperty({
      tableID : simcity.StringID.TableResource,
      stringID : simcity.StringID.Coal
    })
  }
};
goog.object.extend(simcity.RolloverItems.kCoalStored, simcity.RolloverItems.kResourceStored);
simcity.RolloverItems.kTelevisionsStored = {
  iconPath : "Graphics/Icons/TradeIcons/icn-trade-television.png",
  additionalQueries : function (a) {
    return {
      resource : [simcity.kDataConnectedUnits, a, simcity.kDataBins, simcity.kResourceIDTelevision]
    }
  },
  updateText : function (a) {
    a.formatType = simcity.NumberFormat.Units;
    return scrui.TextFromLocaleProperty({
      tableID : simcity.StringID.TableResource,
      stringID : simcity.StringID.Television
    })
  }
};
goog.object.extend(simcity.RolloverItems.kTelevisionsStored, simcity.RolloverItems.kResourceStored);
simcity.RolloverItems.kComputersStored = {
  iconPath : "Graphics/Icons/TradeIcons/icn-trade-computer.png",
  additionalQueries : function (a) {
    return {
      resource : [simcity.kDataConnectedUnits, a, simcity.kDataBins, simcity.kResourceIDComputer]
    }
  },
  updateText : function (a) {
    a.formatType = simcity.NumberFormat.Units;
    return scrui.TextFromLocaleProperty({
      tableID : simcity.StringID.TableResource,
      stringID : simcity.StringID.Computer
    })
  }
};
goog.object.extend(simcity.RolloverItems.kComputersStored, simcity.RolloverItems.kResourceStored);
simcity.RolloverItems.kElectronicsStored = {
  iconPath : "Graphics/Icons/TradeIcons/icn-trade-electronics.png",
  additionalQueries : function (a) {
    return {
      resource : [simcity.kDataConnectedUnits, a, simcity.kDataBins, simcity.kResourceIDElectronics]
    }
  },
  updateText : function (a) {
    a.formatType = simcity.NumberFormat.Units;
    return scrui.TextFromLocaleProperty({
      tableID : simcity.StringID.TableResource,
      stringID : simcity.StringID.Electronics
    })
  }
};
goog.object.extend(simcity.RolloverItems.kElectronicsStored, simcity.RolloverItems.kResourceStored);
simcity.RolloverItems.kFreightStored = {
  iconPath : "Graphics/Icons/TradeIcons/icn-trade-freight.png",
  additionalQueries : function (a) {
    return {
      resource : [simcity.kDataConnectedUnits, a, simcity.kDataBins, simcity.kResourceIDFreight]
    }
  },
  updateText : function (a) {
    a.formatType = simcity.NumberFormat.Crates;
    return scrui.TextFromLocaleProperty({
      tableID : simcity.StringID.TableResource,
      stringID : 242491767
    })
  }
};
goog.object.extend(simcity.RolloverItems.kFreightStored, simcity.RolloverItems.kResourceStored);
simcity.RolloverItems.kPlasticStored = {
  iconPath : "Graphics/Icons/TradeIcons/icn-trade-plastic.png",
  additionalQueries : function (a) {
    return {
      resource : [simcity.kDataConnectedUnits, a, simcity.kDataBins, simcity.kResourceIDPlastic]
    }
  },
  updateText : function (a) {
    a.formatType = simcity.NumberFormat.Units;
    return scrui.TextFromLocaleProperty({
      tableID : simcity.StringID.TableResource,
      stringID : simcity.StringID.Plastic
    })
  }
};
goog.object.extend(simcity.RolloverItems.kPlasticStored, simcity.RolloverItems.kResourceStored);
simcity.RolloverItems.kAlloyStored = {
  iconPath : "Graphics/Icons/TradeIcons/icn-trade-alloy.png",
  additionalQueries : function (a) {
    return {
      resource : [simcity.kDataConnectedUnits, a, simcity.kDataBins, simcity.kResourceIDAlloy]
    }
  },
  updateText : function (a) {
    a.formatType = simcity.NumberFormat.Tons;
    return scrui.TextFromLocaleProperty({
      tableID : simcity.StringID.TableResource,
      stringID : simcity.StringID.Alloy
    })
  }
};
goog.object.extend(simcity.RolloverItems.kAlloyStored, simcity.RolloverItems.kResourceStored);
simcity.RolloverItems.kMetalStored = {
  iconPath : "Graphics/Icons/TradeIcons/icn-trade-metal.png",
  additionalQueries : function (a) {
    return {
      resource : [simcity.kDataConnectedUnits, a, simcity.kDataBins, simcity.kResourceIDMetal]
    }
  },
  updateText : function (a) {
    a.formatType = simcity.NumberFormat.Tons;
    return scrui.TextFromLocaleProperty({
      tableID : simcity.StringID.TableResource,
      stringID : simcity.StringID.Metal
    })
  }
};
goog.object.extend(simcity.RolloverItems.kMetalStored, simcity.RolloverItems.kResourceStored);
simcity.RolloverItems.kOreStored = {
  iconPath : "Graphics/Icons/TradeIcons/icn-trade-ore.png",
  additionalQueries : function (a) {
    return {
      resource : [simcity.kDataConnectedUnits, a, simcity.kDataBins, simcity.kResourceIDOreRaw]
    }
  },
  updateText : function (a) {
    a.formatType = simcity.NumberFormat.Tons;
    return scrui.TextFromLocaleProperty({
      tableID : simcity.StringID.TableResource,
      stringID : simcity.StringID.Ore
    })
  }
};
goog.object.extend(simcity.RolloverItems.kOreStored, simcity.RolloverItems.kResourceStored);
simcity.RolloverItems.kOilCrudeStored = {
  iconPath : "Graphics/Icons/TradeIcons/icn-trade-oil.png",
  additionalQueries : function (a) {
    return {
      resource : [simcity.kDataConnectedUnits, a, simcity.kDataBins, simcity.kResourceIDOilCrude]
    }
  },
  updateText : function (a) {
    a.formatType = simcity.NumberFormat.Barrels;
    return scrui.TextFromLocaleProperty({
      tableID : simcity.StringID.TableResource,
      stringID : simcity.StringID.Oil
    })
  }
};
goog.object.extend(simcity.RolloverItems.kOilCrudeStored, simcity.RolloverItems.kResourceStored);
simcity.RolloverItems.kFuelStored = {
  iconPath : "Graphics/Icons/TradeIcons/icn-trade-fuel.png",
  additionalQueries : function (a) {
    return {
      resource : [simcity.kDataConnectedUnits, a, simcity.kDataBins, simcity.kResourceIDFuel]
    }
  },
  updateText : function (a) {
    a.formatType = simcity.NumberFormat.Barrels;
    return scrui.TextFromLocaleProperty({
      tableID : simcity.StringID.TableResource,
      stringID : simcity.StringID.Fuel
    })
  }
};
goog.object.extend(simcity.RolloverItems.kFuelStored, simcity.RolloverItems.kResourceStored);
simcity.RolloverItems.kRecyclablesStored = {
  iconPath : "Graphics/Icons/DataLayerIcons/icn_HeavyLayer_Recycling.png",
  additionalQueries : function (a) {
    return {
      resource : [simcity.kDataConnectedUnits, a, simcity.kDataBins, simcity.kResourceIDRecyclables]
    }
  },
  updateText : function (a) {
    a.formatType = simcity.NumberFormat.Tons;
    return scrui.TextFromLocaleProperty({
      tableID : simcity.StringID.TableResource,
      stringID : simcity.StringID.Recyclables
    })
  }
};
goog.object.extend(simcity.RolloverItems.kRecyclablesStored, simcity.RolloverItems.kResourceStored);
simcity.RolloverItems.kTransportationNoWait = {
  layoutPath : "Layouts/Rollovers/RolloverBlockText2Row2Column.js",
  iconPath : "Graphics/Common/Icons/icn-layers-fire.png",
  init : function (a) {
    a.textControlLeft = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextLeft1);
    a.textControlRight = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextRight1);
    a.textControlLeft2 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextLeft2);
    a.textControlRight2 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextRight2);
    this.additionalInit && this.additionalInit(a)
  },
  updateQueries : function (a) {
    var b = {};
    this.additionalQueries && goog.object.extend(b, this.additionalQueries(a));
    return b
  },
  update : function (a, b) {
    a.textControlLeft.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0eb8a046", "kTransportationWait"));
    a.textControlRight.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0e6ae894", "kTransportationWait"), {
      amount : b.pickUp
    });
    var c = b.leftStopToday + b.tripsToday,
    d = b.leftStopYesterday + b.tripsYesterday;
    a.textControlLeft2.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0ee02d94", "kTransportationWait"));
    a.textControlRight2.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0ec79f89", "kTransportationWait"), {
      amount : c > d ? c : d
    })
  }
};
simcity.RolloverItems.kTransportationWaitSchoolBus = {
  additionalQueries : function (a) {
    return {
      pickUp : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDPickUp],
      pickedUp : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDPickedUp],
      notPickedUp : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDNotPickedUp],
      leftStopToday : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDLeftSchoolBusStopToday],
      leftStopYesterday : [simcity.kDataUnits, a, simcity.kDataBinAmount,
        simcity.kResourceIDLeftSchoolBusStopYesterday],
      tripsToday : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDSchoolBusTripsToday],
      tripsYesterday : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDSchoolBusTripsYesterday]
    }
  }
};
goog.object.extend(simcity.RolloverItems.kTransportationWaitSchoolBus, simcity.RolloverItems.kTransportationNoWait);
simcity.RolloverItems.kTransportationWait = {
  iconPath : "Graphics/Common/Icons/icn-layers-fire.png",
  init : function (a) {
    a.textControlLeft = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextLeft1);
    a.textControlRight = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextRight1);
    a.textControlLeft2 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextLeft2);
    a.textControlRight2 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextRight2);
    a.textControlLeft3 =
      a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextLeft3);
    a.textControlRight3 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextRight3);
    this.additionalInit && this.additionalInit(a)
  },
  updateQueries : function (a) {
    var b = {};
    this.additionalQueries && goog.object.extend(b, this.additionalQueries(a));
    return b
  },
  update : function (a, b) {
    a.textControlTitle && this.getTitle && a.textControlTitle.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", this.getTitle(), "kTransportationWait"));
    a.textControlLeft.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0eb8a046", "kTransportationWait"));
    a.textControlRight.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0e6ae894", "kTransportationWait"), {
      amount : b.pickUp
    });
    var c = b.leftStopToday + b.tripsToday,
    d = b.leftStopYesterday + b.tripsYesterday;
    a.textControlLeft2.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0ee02d94", "kTransportationWait"));
    a.textControlRight2.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json",
        "0x0ec79f89", "kTransportationWait"), {
      amount : c > d ? c : d
    });
    a.textControlLeft3.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0eb8a044", "kTransportationWait"));
    var d = b.pickUp + b.leftStopToday,
    c = 0,
    e = b.minutesWaitedToday;
    e && 0 < d && (c = Math.floor(e / d));
    var d = b.leftStopYesterday,
    e = 0,
    f = b.minutesWaitedYesterday;
    f && 0 < d && (e = Math.floor(f / d));
    a.textControlRight3.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0eb8a26c", "kTransportationWait"), {
      amount : c > e ? c : e
    })
  }
};
simcity.RolloverItems.kTransportationWaitLightRail = {
  layoutPath : "Layouts/Rollovers/RolloverBlockText3Row2Column.js",
  additionalQueries : function (a) {
    return {
      pickedUp : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDPickedUp],
      notPickedUp : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDNotPickedUp],
      pickUp : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDPickUp],
      minutesWaitedToday : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDMinutesWaitedForLightTrainToday],
      minutesWaitedYesterday : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDMinutesWaitedForLightTrainYesterday],
      leftStopToday : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDLeftLightTrainStopToday],
      leftStopYesterday : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDLeftLightTrainStopYesterday],
      tripsToday : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDLightTrainTripsToday],
      tripsYesterday : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDLightTrainTripsYesterday]
    }
  }
};
goog.object.extend(simcity.RolloverItems.kTransportationWaitLightRail, simcity.RolloverItems.kTransportationWait);
simcity.RolloverItems.kTransportationWaitRail = {
  layoutPath : "Layouts/Rollovers/RolloverBlockTextTitle3Row2Column.js",
  additionalInit : function (a) {
    a.textControlTitle = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTitle)
  },
  additionalQueries : function (a) {
    return {
      pickedUp : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDPickedUp],
      notPickedUp : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDNotPickedUp],
      pickUp : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDPickUp],
      minutesWaitedToday : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDMinutesWaitedForTrainToday],
      minutesWaitedYesterday : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDMinutesWaitedForTrainYesterday],
      leftStopToday : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDLeftTrainStopToday],
      leftStopYesterday : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDLeftTrainStopYesterday],
      tripsToday : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTrainTripsToday],
      tripsYesterday : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTrainTripsYesterday]
    }
  },
  getTitle : function () {
    return "0x0f39c2b4"
  }
};
goog.object.extend(simcity.RolloverItems.kTransportationWaitRail, simcity.RolloverItems.kTransportationWait);
simcity.RolloverItems.kTransportationWaitBus = {
  layoutPath : "Layouts/Rollovers/RolloverBlockText3Row2Column.js",
  additionalQueries : function (a) {
    return {
      pickUp : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDPickUp],
      pickedUp : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDPickedUp],
      notPickedUp : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDNotPickedUp],
      minutesWaitedToday : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDMinutesWaitedForBusToday],
      minutesWaitedYesterday : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDMinutesWaitedForBusYesterday],
      leftStopToday : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDLeftBusStopToday],
      leftStopYesterday : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDLeftBusStopYesterday],
      tripsToday : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDBusTripsToday],
      tripsYesterday : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDBusTripsYesterday]
    }
  }
};
goog.object.extend(simcity.RolloverItems.kTransportationWaitBus, simcity.RolloverItems.kTransportationWait);
simcity.RolloverItems.kTouristTransportationWait = {
  layoutPath : "Layouts/Rollovers/RolloverBlockTextTitle4Row2Column.js",
  iconPath : "Graphics/Common/Icons/icn-layers-fire.png",
  init : function (a) {
    a.textControlTitle = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTitle);
    a.textControlLeft = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextLeft1);
    a.textControlRight = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextRight1);
    a.textControlLeft2 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextLeft2);
    a.textControlRight2 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextRight2);
    a.textControlLeft3 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextLeft3);
    a.textControlRight3 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextRight3);
    a.textControlLeft4 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextLeft4);
    a.textControlRight4 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextRight4);
    a.BackgroundControl = a.layout.FindControlByID(simcity.cRolloverUI.kWinIDRolloverBackground);
    this.additionalInit && this.additionalInit(a)
  },
  updateQueries : function (a) {
    var b = {};
    this.additionalQueries && goog.object.extend(b, this.additionalQueries(a));
    return b
  },
  update : function (a, b) {
    a.textControlTitle && this.getTitle && a.textControlTitle.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", this.getTitle(), "kTouristTransportationWait"));
    a.textControlLeft.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0eb8a046", "kTouristTransportationWait"));
    a.textControlRight.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json",
        "0x0e6ae894", "kTouristTransportationWait"), {
      amount : b.pickUp + b.touristPickUp
    });
    var c = b.leftStopToday + b.tripsToday,
    d = b.leftStopYesterday + b.tripsYesterday;
    a.textControlLeft2.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0f28ca26", "kTouristTransportationWait"));
    a.textControlRight2.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0ec79f89", "kTouristTransportationWait"), {
      amount : c > d ? c : d
    });
    c = b.touristLeftStopToday + b.touristTripsToday;
    d = b.touristLeftStopYesterday + b.touristTripsYesterday;
    a.textControlLeft3.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0f28ca27", "kTouristTransportationWait"));
    a.textControlRight3.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0ec79f89", "kTouristTransportationWait"), {
      amount : c > d ? c : d
    });
    var d = b.pickUp + b.leftStopToday + b.touristPickUp + b.touristLeftStopToday,
    e = b.minutesWaitedToday + b.touristMinutesWaitedToday,
    c = 0;
    e && 0 < d && (c = Math.floor(e / d));
    var d = b.leftStopYesterday + b.touristLeftStopYesterday,
    e = b.minutesWaitedYesterday +
      b.touristMinutesWaitedYesterday,
    f = 0;
    e && 0 < d && (f = Math.floor(e / d));
    a.textControlLeft4.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0eb8a044", "kTouristTransportationWait"));
    a.textControlRight4.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0eb8a26c", "kTouristTransportationWait"), {
      amount : Math.max(c, f)
    })
  }
};
simcity.RolloverItems.kTransportationWaitBusAndCoach = {
  additionalQueries : function (a) {
    return {
      pickUp : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDPickUpByBus],
      pickedUp : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDPickedUpByBus],
      minutesWaitedToday : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDMinutesWaitedForBusToday],
      minutesWaitedYesterday : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDMinutesWaitedForBusYesterday],
      leftStopToday : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDLeftBusStopToday],
      leftStopYesterday : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDLeftBusStopYesterday],
      tripsToday : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDBusTripsToday],
      tripsYesterday : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDBusTripsYesterday],
      touristPickUp : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDPickUpByCoach],
      touristPickedUp : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDPickedUpByCoach],
      touristMinutesWaitedToday : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDMinutesWaitedForCoachToday],
      touristMinutesWaitedYesterday : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDMinutesWaitedForCoachYesterday],
      touristLeftStopToday : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDLeftCoachStopToday],
      touristLeftStopYesterday : [simcity.kDataConnectedUnits,
        a, simcity.kDataBinAmount, simcity.kResourceIDLeftCoachStopYesterday],
      touristTripsToday : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDCoachTripsToday],
      touristTripsYesterday : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDCoachTripsYesterday]
    }
  },
  getTitle : function () {
    return "0x0f39c2b0"
  }
};
goog.object.extend(simcity.RolloverItems.kTransportationWaitBusAndCoach, simcity.RolloverItems.kTouristTransportationWait);
simcity.RolloverItems.kTransportationWaitFerry = {
  additionalQueries : function (a) {
    return {
      pickedUp : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDPickedUpByFerry],
      notPickedUp : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDNotPickedUp],
      pickUp : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDFerryPickUp],
      minutesWaitedToday : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDMinutesWaitedForFerryToday],
      minutesWaitedYesterday : [simcity.kDataConnectedUnits,
        a, simcity.kDataBinAmount, simcity.kResourceIDMinutesWaitedForFerryYesterday],
      leftStopToday : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDLeftFerryStopToday],
      leftStopYesterday : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDLeftFerryStopYesterday],
      tripsToday : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDFerryTripsToday],
      tripsYesterday : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDFerryTripsYesterday],
      touristPickUp : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDCruiseShipPickUp],
      touristPickedUp : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDPickedUpByCruiseShip],
      touristMinutesWaitedToday : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDMinutesWaitedForCruiseShipToday],
      touristMinutesWaitedYesterday : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDMinutesWaitedForCruiseShipYesterday],
      touristLeftStopToday : [simcity.kDataConnectedUnits,
        a, simcity.kDataBinAmount, simcity.kResourceIDLeftCruiseShipStopToday],
      touristLeftStopYesterday : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDLeftCruiseShipStopYesterday],
      touristTripsToday : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDCruiseShipTripsToday],
      touristTripsYesterday : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDCruiseShipTripsYesterday]
    }
  },
  getTitle : function () {
    return "0x0f39c2b3"
  }
};
goog.object.extend(simcity.RolloverItems.kTransportationWaitFerry, simcity.RolloverItems.kTouristTransportationWait);
simcity.RolloverItems.kLevelUpProgress = {
  iconPath : "Graphics/HUD/icn_progress.png",
  layoutPath : "Layouts/Rollovers/RolloverItemMeterTextAndTitle.js",
  init : function (a) {
    a.groupUpgradeComplete = a.layout.FindControlByID(253099837);
    a.groupUpgradeMeter = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemGroup1);
    a.groupUpgradeAvailable = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemGroup2);
    a.groupUpgradeButton = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemGroup3);
    a.textControl =
      a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemValue);
    a.textControlTitle = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemValue2);
    a.meterBacking = a.layout.FindControlByID(simcity.cRolloverUI.kWinIDRolloverItemMeterBacking);
    a.meterFillBar = a.layout.FindControlByID(simcity.cRolloverUI.kWinIDRolloverItemMeterFillBar);
    a.levelControl = gUIManager.FindControlByID(251480975)
  },
  updateQueries : function (a) {
    var b = {
      buildingLevel : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDBuildingLevel],
      levelUpNeeded : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDHQ_ToNextLevel],
      upgradeAvailable : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDUpgradeAvailable]
    };
    this.additionalQueries && goog.object.extend(b, this.additionalQueries(a));
    return b
  },
  update : function (a, b) {
    a.textControlTitle.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0e7bd539", "kLevelUpProgress"));
    a.levelControl && (a.levelControl.SetVisibility(!0), a.levelControl.UpdateLocaleText({
        LevelNumber : b.buildingLevel.amount
      }));
    if (b.buildingLevel.amount === b.buildingLevel.capacity)
      a.groupUpgradeComplete.SetVisibility(!0), a.groupUpgradeMeter.SetVisibility(!1), a.groupUpgradeAvailable.SetVisibility(!1), a.groupUpgradeButton.SetVisibility(!1);
    else {
      this.additionalUpdate(a, b);
      var c = b.levelUpNeeded,
      d = Math.min(b.resource, c);
      this.capacityResource && (c = b.capacity, d = b.resource, d > c && (c = d));
      var e = "";
      a.formatType === simcity.NumberFormat.Tons && (e = simcity.FormatLargeNumberForTons(c), d = simcity.FormatLargeNumberForTons(d), c = e.amount, d = d.amount,
        e = e.exponent);
      var f = b.upgradeAvailable || d >= c && !simcity.gGlobalUIHandler.mIsSpectatorMode;
      a.groupUpgradeMeter.SetVisibility(!f);
      a.groupUpgradeAvailable.SetVisibility(f && this.isRollover);
      a.groupUpgradeButton.SetVisibility(f && !this.isRollover);
      f || (this.isPopulation && (d = simcity.GetRoundedFudgedPopulation(d), c = simcity.GetRoundedFudgedPopulation(c)), b.upgradeTarget ? a.textControl.UpdateLocaleText({
          amount : d,
          capacity : c,
          exponent : e,
          target : b.upgradeTarget
        }) : a.textControl.UpdateLocaleText({
          amount : d,
          capacity : c,
          exponent : e
        }), a.meterFillBar.SetWidth(a.meterBacking.mWidth * d / c))
    }
  },
  onItemClicked : function () {
    scrui.PostGameCommand(scrui.BuildCommand(["runSelectedUnitAndAttachedPlayerRule", simcity.kRuleIDSCPlayerRuleUpgradeBuilding]));
    scrui.PostGameCommand(scrui.BuildCommand(["zoomToUnit", "selected"]));
    scrui.PostGameCommand(scrui.BuildCommand(["toolmessage", scrui.IDFromName("DeselectAll")]))
  }
};
simcity.RolloverItems.kBlockMayorsMansionUpgrade = {
  additionalQueries : function (a) {
    return {
      upgradeTarget : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDMansionUpgradeTarget],
      resource : [simcity.kDataBinAmount, simcity.kResourceIDOverDriveTimerForMansion],
      capacity : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDHQ_ToNextLevel]
    }
  },
  capacityResource : !0,
  additionalUpdate : function (a) {
    a.textControlTitle.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0e7161cb", "kLevelUpProgress"));
    a.textControl.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0e71619c", "kBlockMayorsMansionUpgrade"))
  }
};
goog.object.extend(simcity.RolloverItems.kBlockMayorsMansionUpgrade, simcity.RolloverItems.kLevelUpProgress);
simcity.RolloverItems.kBlockMayorsMansionUpgradeRollover = {
  isRollover : !0
};
goog.object.extend(simcity.RolloverItems.kBlockMayorsMansionUpgradeRollover, simcity.RolloverItems.kBlockMayorsMansionUpgrade);
simcity.RolloverItems.kBlockCityHallUpgrade = {
  additionalQueries : function () {
    return {
      resource : [simcity.kDataBinAmount, simcity.kResourceIDTotalResidential]
    }
  },
  isPopulation : !0,
  additionalUpdate : function (a) {
    a.textControlTitle.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0e7161ca", "kLevelUpProgress"));
    a.textControl.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0e71619b", "kBlockCityHallUpgrade"))
  }
};
goog.object.extend(simcity.RolloverItems.kBlockCityHallUpgrade, simcity.RolloverItems.kLevelUpProgress);
simcity.RolloverItems.kBlockCityHallUpgradeRollover = {
  isRollover : !0
};
goog.object.extend(simcity.RolloverItems.kBlockCityHallUpgradeRollover, simcity.RolloverItems.kBlockCityHallUpgrade);
simcity.RolloverItems.kHQLevelMeter_Mining = {
  additionalQueries : function () {
    return {
      resource : [simcity.kDataBinAmount, simcity.kResourceIDMetalSpecialtyCurrentMonthProfit]
    }
  },
  additionalUpdate : function (a) {
    a.textControl.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0e73fade", "kHQLevelMeter_Mining"))
  }
};
goog.object.extend(simcity.RolloverItems.kHQLevelMeter_Mining, simcity.RolloverItems.kLevelUpProgress);
simcity.RolloverItems.kHQLevelMeter_MiningRollover = {
  isRollover : !0
};
goog.object.extend(simcity.RolloverItems.kHQLevelMeter_MiningRollover, simcity.RolloverItems.kHQLevelMeter_Mining);
simcity.RolloverItems.kHQLevelMeter_Oil = {
  additionalQueries : function () {
    return {
      resource : [simcity.kDataBinAmount, simcity.kResourceIDPetroleumSpecialtyCurrentMonthProfit]
    }
  },
  additionalUpdate : function (a) {
    a.textControl.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0e73fae0", "kHQLevelMeter_Oil"))
  }
};
goog.object.extend(simcity.RolloverItems.kHQLevelMeter_Oil, simcity.RolloverItems.kLevelUpProgress);
simcity.RolloverItems.kHQLevelMeter_OilRollover = {
  isRollover : !0
};
goog.object.extend(simcity.RolloverItems.kHQLevelMeter_OilRollover, simcity.RolloverItems.kHQLevelMeter_Oil);
simcity.RolloverItems.kHQLevelMeter_Trade = {
  additionalQueries : function () {
    return {
      resource : [simcity.kDataBinAmount, simcity.kResourceIDTradeSpecialtyCurrentMonthProfit]
    }
  },
  additionalUpdate : function (a) {
    a.textControl.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0e73fae1", "kHQLevelMeter_Trade"))
  }
};
goog.object.extend(simcity.RolloverItems.kHQLevelMeter_Trade, simcity.RolloverItems.kLevelUpProgress);
simcity.RolloverItems.kHQLevelMeter_TradeRollover = {
  isRollover : !0
};
goog.object.extend(simcity.RolloverItems.kHQLevelMeter_Trade, simcity.RolloverItems.kLevelUpProgress);
simcity.RolloverItems.kHQLevelMeter_TradeRollover = {
  isRollover : !0
};
goog.object.extend(simcity.RolloverItems.kHQLevelMeter_TradeRollover, simcity.RolloverItems.kHQLevelMeter_Trade);
simcity.RolloverItems.kHQLevelMeter_Casino = {
  additionalQueries : function () {
    return {
      resource : [simcity.kDataBinAmount, simcity.kResourceIDCasinoSpecialtyCurrentMonthProfit]
    }
  },
  additionalUpdate : function (a) {
    a.textControl.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0e73fae2", "kHQLevelMeter_Casino"))
  }
};
goog.object.extend(simcity.RolloverItems.kHQLevelMeter_Casino, simcity.RolloverItems.kLevelUpProgress);
simcity.RolloverItems.kHQLevelMeter_CasinoRollover = {
  isRollover : !0
};
goog.object.extend(simcity.RolloverItems.kHQLevelMeter_CasinoRollover, simcity.RolloverItems.kHQLevelMeter_Casino);
simcity.RolloverItems.kHQLevelMeter_Electronics = {
  additionalQueries : function () {
    return {
      resource : [simcity.kDataBinAmount, simcity.kResourceIDElectronicsSpecialtyCurrentMonthProfit]
    }
  },
  additionalUpdate : function (a) {
    a.textControl.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0e73fae3", "kHQLevelMeter_Electronics"))
  }
};
goog.object.extend(simcity.RolloverItems.kHQLevelMeter_Electronics, simcity.RolloverItems.kLevelUpProgress);
simcity.RolloverItems.kHQLevelMeter_ElectronicsRollover = {
  isRollover : !0
};
goog.object.extend(simcity.RolloverItems.kHQLevelMeter_ElectronicsRollover, simcity.RolloverItems.kHQLevelMeter_Electronics);
simcity.RolloverItems.kHQLevelMeter_University = {
  additionalQueries : function () {
    return {
      resource : [simcity.kDataBinAmount, simcity.kResourceIDUniversityStudents]
    }
  },
  additionalUpdate : function (a) {
    a.textControl.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0ec70862", "kHQLevelMeter_University"))
  }
};
goog.object.extend(simcity.RolloverItems.kHQLevelMeter_University, simcity.RolloverItems.kLevelUpProgress);
simcity.RolloverItems.kHQLevelMeter_UniversityRollover = {
  isRollover : !0
};
goog.object.extend(simcity.RolloverItems.kHQLevelMeter_UniversityRollover, simcity.RolloverItems.kHQLevelMeter_University);
simcity.RolloverItems.kBlockCasinoGamblers = {
  layoutPath : "Layouts/Rollovers/RolloverBlockTextTitle3Row2Column.js",
  init : function (a) {
    a.textControlTitle = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTitle);
    a.textControlTitleRight = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTitleRight);
    a.textControlLeft1 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextLeft1);
    a.textControlRight1 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextRight1);
    a.textControlLeft2 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextLeft2);
    a.textControlRight2 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextRight2);
    a.textControlLeft3 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextLeft3);
    a.textControlRight3 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextRight3)
  },
  updateQueries : function (a) {
    return {
      shoppers : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTotalShoppers],
      openShoppers : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDOpenShoppers],
      ShopperW1 : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDShopperW1],
      ShopperW2 : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDShopperW2],
      ShopperW3 : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDShopperW3],
      TouristW1 : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTouristW1],
      TouristW2 : [simcity.kDataConnectedUnits,
        a, simcity.kDataBinAmount, simcity.kResourceIDTouristW2],
      TouristW3 : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTouristW3],
      gamblerCapacityW1 : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDGamblerCapacityW1],
      gamblerCapacityW2 : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDGamblerCapacityW2],
      gamblerCapacityW3 : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDGamblerCapacityW3]
    }
  },
  update : function (a, b) {
    a.textControlTitle.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json",
        "0x0e8b979e", "kBlockCasinoGamblers"));
    a.textControlTitleRight.SetVisibility(!0);
    a.textControlTitleRight.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0e6ae893", "kBlockCasinoGamblers"), {
      amount : b.shoppers,
      capacity : b.shoppers + b.openShoppers
    });
    a.textControlLeft1.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0f068ba1", "kBlockCasinoGamblers"), {
      level : scrui.TextFromLocaleProperty({
        tableID : simcity.StringID.TableBuildingRollover,
        stringID : 240664736
      })
    });
    a.textControlRight1.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json",
        "0x0e6ae893", "kBlockCasinoGamblers"), {
      amount : b.ShopperW1 + b.TouristW1,
      capacity : b.TouristW1 + b.gamblerCapacityW1
    });
    a.textControlLeft2.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0f068ba1", "kBlockCasinoGamblers"), {
      level : scrui.TextFromLocaleProperty({
        tableID : simcity.StringID.TableBuildingRollover,
        stringID : 240664737
      })
    });
    a.textControlRight2.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0e6ae893", "kBlockCasinoGamblers"), {
      amount : b.ShopperW2 + b.TouristW2,
      capacity : b.TouristW2 +
      b.gamblerCapacityW2
    });
    a.textControlLeft3.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0f068ba1", "kBlockCasinoGamblers"), {
      level : scrui.TextFromLocaleProperty({
        tableID : simcity.StringID.TableBuildingRollover,
        stringID : 240664738
      })
    });
    a.textControlRight3.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0e6ae893", "kBlockCasinoGamblers"), {
      amount : b.ShopperW3 + b.TouristW3,
      capacity : b.TouristW3 + b.gamblerCapacityW3
    })
  }
};
simcity.RolloverItems.kBlockLandmarkTourists = {
  layoutPath : "Layouts/Rollovers/RolloverBlockTextTitle3Row2Column.js",
  init : function (a) {
    a.textControlTitle = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTitle);
    a.textControlTitleRight = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTitleRight);
    a.textControlLeft1 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextLeft1);
    a.textControlRight1 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextRight1);
    a.textControlLeft2 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextLeft2);
    a.textControlRight2 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextRight2);
    a.textControlLeft3 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextLeft3);
    a.textControlRight3 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextRight3)
  },
  updateQueries : function (a) {
    return {
      shoppers : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTotalShoppers],
      openShoppers : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDOpenShoppers],
      TouristW1 : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTouristW1],
      TouristW2 : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTouristW2],
      TouristW3 : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTouristW3]
    }
  },
  update : function (a, b) {
    var c = b.TouristW1,
    d = b.TouristW2,
    e = b.TouristW3,
    f = c + d + e,
    g = b.shoppers + b.openShoppers;
    a.textControlTitle.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json",
        "0x0e8b979e", "kBlockCasinoGamblers"));
    a.textControlTitleRight.SetVisibility(!0);
    a.textControlTitleRight.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0e6ae893", "kBlockCasinoGamblers"), {
      amount : f,
      capacity : g
    });
    a.textControlLeft1.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0f068ba1", "kBlockCasinoGamblers"), {
      level : scrui.TextFromLocaleProperty({
        tableID : simcity.StringID.TableBuildingRollover,
        stringID : 240664736
      })
    });
    a.textControlRight1.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json",
        "0x0e6ae894", "kBlockCasinoGamblers"), {
      amount : c
    });
    a.textControlLeft2.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0f068ba1", "kBlockCasinoGamblers"), {
      level : scrui.TextFromLocaleProperty({
        tableID : simcity.StringID.TableBuildingRollover,
        stringID : 240664737
      })
    });
    a.textControlRight2.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0e6ae894", "kBlockCasinoGamblers"), {
      amount : d
    });
    a.textControlLeft3.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0f068ba1", "kBlockCasinoGamblers"), {
      level : scrui.TextFromLocaleProperty({
        tableID : simcity.StringID.TableBuildingRollover,
        stringID : 240664738
      })
    });
    a.textControlRight3.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0e6ae894", "kBlockCasinoGamblers"), {
      amount : e
    })
  }
};
simcity.RolloverItems.kBlockCasinoLodging = {
  layoutPath : "Layouts/Rollovers/RolloverBlockTextTitle3Row2Column.js",
  init : function (a) {
    a.textControlTitle = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTitle);
    a.textControlTitleRight = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTitleRight);
    a.textControlLeft1 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextLeft1);
    a.textControlRight1 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextRight1);
    a.textControlLeft2 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextLeft2);
    a.textControlRight2 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextRight2);
    a.textControlLeft3 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextLeft3);
    a.textControlRight3 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextRight3)
  },
  updateQueries : function (a) {
    return {
      totalGuests : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTotalGuests],
      OpenGuestW1 : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDOpenGuestsW1],
      OpenGuestW2 : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDOpenGuestsW2],
      OpenGuestW3 : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDOpenGuestsW3],
      GuestW1 : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDGuestW1],
      GuestW2 : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDGuestW2],
      GuestW3 : [simcity.kDataConnectedUnits,
        a, simcity.kDataBinAmount, simcity.kResourceIDGuestW3]
    }
  },
  update : function (a, b) {
    a.textControlTitle.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0e8bb2a3", "kBlockCasinoGamblers"));
    a.textControlTitleRight.SetVisibility(!0);
    a.textControlTitleRight.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0e6ae893", "kBlockCasinoGamblers"), {
      amount : b.GuestW1 + b.GuestW2 + b.GuestW3,
      capacity : b.GuestW1 + b.GuestW2 + b.GuestW3 + b.OpenGuestW1 + b.OpenGuestW2 + b.OpenGuestW3
    });
    a.textControlLeft1.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json",
        "0x0f068ba1", "kBlockCasinoGamblers"), {
      level : scrui.TextFromLocaleProperty({
        tableID : simcity.StringID.TableBuildingRollover,
        stringID : 240664736
      })
    });
    a.textControlRight1.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0e6ae893", "kBlockCasinoGamblers"), {
      amount : b.GuestW1,
      capacity : b.GuestW1 + b.OpenGuestW1
    });
    a.textControlLeft2.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0f068ba1", "kBlockCasinoGamblers"), {
      level : scrui.TextFromLocaleProperty({
        tableID : simcity.StringID.TableBuildingRollover,
        stringID : 240664737
      })
    });
    a.textControlRight2.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0e6ae893", "kBlockCasinoGamblers"), {
      amount : b.GuestW2,
      capacity : b.GuestW2 + b.OpenGuestW2
    });
    a.textControlLeft3.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0f068ba1", "kBlockCasinoGamblers"), {
      level : scrui.TextFromLocaleProperty({
        tableID : simcity.StringID.TableBuildingRollover,
        stringID : 240664738
      })
    });
    a.textControlRight3.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json",
        "0x0e6ae893", "kBlockCasinoGamblers"), {
      amount : b.GuestW3,
      capacity : b.GuestW3 + b.OpenGuestW3
    })
  }
};
simcity.RolloverItems.kBlockCasinoRevenue = {
  layoutPath : "Layouts/Rollovers/RolloverBlockTextTitle3Row2Column.js",
  init : function (a) {
    a.textControlTitle = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTitle);
    a.textControlTitleRight = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTitleRight);
    a.textControlLeft1 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextLeft1);
    a.textControlRight1 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextRight1);
    a.textControlLeft2 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextLeft2);
    a.textControlRight2 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextRight2);
    a.textControlLeft3 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextLeft3);
    a.textControlRight3 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextRight3)
  },
  updateQueries : function (a) {
    return {
      incomePerW1 : ["units", a, "properties", simcity.kPropTaxes_ToyIncomePerResourceW1],
      incomePerW2 : ["units",
        a, "properties", simcity.kPropTaxes_ToyIncomePerResourceW2],
      incomePerW3 : ["units", a, "properties", simcity.kPropTaxes_ToyIncomePerResourceW3],
      TouristW1 : ["connectedUnits", a, "bins", simcity.kResourceIDTouristW1],
      TouristW2 : ["connectedUnits", a, "bins", simcity.kResourceIDTouristW2],
      TouristW3 : ["connectedUnits", a, "bins", simcity.kResourceIDTouristW3]
    }
  },
  update : function (a, b) {
    var c = b.incomePerW1,
    d = b.incomePerW2,
    e = b.incomePerW3,
    f = b.TouristW1.amount,
    g = b.TouristW2.amount,
    h = b.TouristW3.amount;
    a.textControlTitle.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json",
        "0x0e8bb2a4", "kBlockCasinoGamblers"));
    a.textControlTitleRight.SetVisibility(!0);
    a.textControlTitleRight.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0e6ae895", "kBlockCasinoGamblers"), {
      amount : f * c + g * d + h * e
    });
    a.textControlLeft1.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0f068ba1", "kBlockCasinoGamblers"), {
      level : scrui.TextFromLocaleProperty({
        tableID : simcity.StringID.TableBuildingRollover,
        stringID : 240664736
      })
    });
    a.textControlRight1.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json",
        "0x0e6ae895", "kBlockCasinoGamblers"), {
      amount : f * c
    });
    a.textControlLeft2.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0f068ba1", "kBlockCasinoGamblers"), {
      level : scrui.TextFromLocaleProperty({
        tableID : simcity.StringID.TableBuildingRollover,
        stringID : 240664737
      })
    });
    a.textControlRight2.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0e6ae895", "kBlockCasinoGamblers"), {
      amount : g * d
    });
    a.textControlLeft3.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0f068ba1",
        "kBlockCasinoGamblers"), {
      level : scrui.TextFromLocaleProperty({
        tableID : simcity.StringID.TableBuildingRollover,
        stringID : 240664738
      })
    });
    a.textControlRight3.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0e6ae895", "kBlockCasinoGamblers"), {
      amount : h * e
    })
  }
};
simcity.RolloverItems.kBlockLandmarkRevenue = {
  layoutPath : "Layouts/Rollovers/RolloverBlockTextTitle3Row2Column.js",
  init : function (a) {
    a.textControlTitle = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTitle);
    a.textControlTitleRight = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTitleRight);
    a.textControlLeft1 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextLeft1);
    a.textControlRight1 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextRight1);
    a.textControlLeft2 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextLeft2);
    a.textControlRight2 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextRight2);
    a.textControlLeft3 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextLeft3);
    a.textControlRight3 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextRight3)
  },
  updateQueries : function (a) {
    return {
      incomePerW1 : ["units", a, "properties", simcity.kPropTaxes_ToyIncomePerResourceW1],
      incomePerW2 : ["units",
        a, "properties", simcity.kPropTaxes_ToyIncomePerResourceW2],
      incomePerW3 : ["units", a, "properties", simcity.kPropTaxes_ToyIncomePerResourceW3],
      ShopperW1 : ["connectedUnits", a, "bins", simcity.kResourceIDShopperW1],
      ShopperW2 : ["connectedUnits", a, "bins", simcity.kResourceIDShopperW2],
      ShopperW3 : ["connectedUnits", a, "bins", simcity.kResourceIDShopperW3],
      TouristW1 : ["connectedUnits", a, "bins", simcity.kResourceIDTouristW1],
      TouristW2 : ["connectedUnits", a, "bins", simcity.kResourceIDTouristW2],
      TouristW3 : ["connectedUnits", a,
        "bins", simcity.kResourceIDTouristW3]
    }
  },
  update : function (a, b) {
    var c = b.TouristW1.amount * b.incomePerW1,
    d = b.TouristW2.amount * b.incomePerW2,
    e = b.TouristW3.amount * b.incomePerW3,
    f = c + d + e;
    a.textControlTitle.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0e8bb2a4", "kBlockCasinoGamblers"));
    a.textControlTitleRight.SetVisibility(!0);
    a.textControlTitleRight.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0e6ae895", "kBlockCasinoGamblers"), {
      amount : f
    });
    a.textControlLeft1.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json",
        "0x0e850c85", "kBlockCasinoGamblers"), {
      level : scrui.TextFromLocaleProperty({
        tableID : simcity.StringID.TableBuildingRollover,
        stringID : 240664736
      })
    });
    a.textControlRight1.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0e6ae895", "kBlockCasinoGamblers"), {
      amount : c
    });
    a.textControlLeft2.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0e850c85", "kBlockCasinoGamblers"), {
      level : scrui.TextFromLocaleProperty({
        tableID : simcity.StringID.TableBuildingRollover,
        stringID : 240664737
      })
    });
    a.textControlRight2.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json",
        "0x0e6ae895", "kBlockCasinoGamblers"), {
      amount : d
    });
    a.textControlLeft3.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0e850c85", "kBlockCasinoGamblers"), {
      level : scrui.TextFromLocaleProperty({
        tableID : simcity.StringID.TableBuildingRollover,
        stringID : 240664738
      })
    });
    a.textControlRight3.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0e6ae895", "kBlockCasinoGamblers"), {
      amount : e
    })
  }
};
simcity.RolloverItems.kBlockCasinoProfit = {
  layoutPath : "Layouts/Rollovers/RolloverBlockText1Row2Column.js",
  init : function (a) {
    a.textControlLeft1 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextLeft1);
    a.textControlRight1 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextRight1)
  },
  updateQueries : function (a) {
    return {
      maintCost : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDExpensesFromMaintenance],
      income : [simcity.kDataUnits, a, simcity.kDataBinAmount,
        simcity.kResourceIDCasinoSpecialtyIncomeDisplay],
      expenses : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDCasinoSpecialtyExpensesDisplay]
    }
  },
  update : function (a, b) {
    var c = b.income - b.expenses;
    a.textControlLeft1.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0e850c84", "kBlockCasinoGamblers"));
    a.textControlRight1.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0edf107d", "kBlockCasinoGamblers"), {
      amount : c
    });
    a.textControlRight1.SetTextColor(0 < c ? simcity.RolloverItems.textColorNormal :
      simcity.RolloverItems.textColorUrgent)
  }
};
simcity.RolloverItems.kBlockLandmarkProfit = {
  layoutPath : "Layouts/Rollovers/RolloverBlockText1Row2Column.js",
  init : function (a) {
    a.textControlLeft1 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextLeft1);
    a.textControlRight1 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextRight1)
  },
  updateQueries : function (a) {
    return {
      maintCost : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDExpensesFromMaintenance],
      income : [simcity.kDataUnits, a, simcity.kDataBinAmount,
        simcity.kResourceIDLandmarkSpecialtyIncomeDisplay],
      expenses : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDLandmarkSpecialtyExpensesDisplay]
    }
  },
  update : function (a, b) {
    var c = b.income - b.expenses;
    a.textControlLeft1.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0e850c84", "kBlockCasinoGamblers"));
    a.textControlRight1.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0edf107d", "kBlockCasinoGamblers"), {
      amount : c
    });
    a.textControlRight1.SetTextColor(0 < c ? simcity.RolloverItems.textColorNormal :
      simcity.RolloverItems.textColorUrgent)
  }
};
simcity.RolloverItems.kBlockManufacturing = {
  layoutPath : "Layouts/Rollovers/RolloverBlockTextTitle3Row2Column.js",
  init : function (a) {
    a.textControlTitle = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTitle);
    a.textControlTitleRight = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTitleRight);
    a.textControlLeft1 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextLeft1);
    a.textControlRight1 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextRight1);
    a.textControlLeft2 =
      a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextLeft2);
    a.textControlRight2 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextRight2);
    a.textControlLeft3 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextLeft3);
    a.textControlRight3 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextRight3)
  },
  updateQueries : function (a) {
    var b = {
      onFlag : ["units", a, "flags", simcity.kUnitFlagOpenForBusiness]
    };
    this.additionalQueries && goog.object.extend(b, this.additionalQueries(a));
    return b
  },
  update : function (a, b) {
    if (b.onFlag && 0 < b.output.capacity) {
      if (this.minimize = !1, this.getRecipe) {
        var c = this.getRecipe(a, b);
        a.textControlTitle.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0e8c0d33", "kBlockManufacturing"), {
          resource : scrui.TextFromLocaleProperty({
            tableID : simcity.StringID.TableResource,
            stringID : c.output
          })
        });
        var d = 24 * b.outputProduced.amount,
        e = simcity.FormatLargeNumberByType(d, c.outputUnits),
        f = simcity.FormatLargeNumberByType(d * (c.input1Quantity / c.outputQuantity),
            c.input1Units),
        d = simcity.FormatLargeNumberByType(d * (c.input2Quantity / c.outputQuantity), c.input2Units);
        a.textControlLeft1.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0e8c0d32", "kBlockManufacturing"), {
          resource : scrui.TextFromLocaleProperty({
            tableID : simcity.StringID.TableResource,
            stringID : c.output
          })
        });
        a.textControlRight1.SetLocaleText(this.getStringByType(c.outputUnits), {
          amount : e.number,
          exponent : e.exponent
        });
        a.textControlLeft2.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json",
            "0x0e8c0d34", "kBlockManufacturing"), {
          resource : scrui.TextFromLocaleProperty({
            tableID : simcity.StringID.TableResource,
            stringID : c.input1
          })
        });
        a.textControlRight2.SetLocaleText(this.getStringByType(c.input1Units), {
          amount : f.number,
          exponent : f.exponent
        });
        0 < c.input2Quantity ? (a.textControlLeft3.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0e8c0d34", "kBlockManufacturing"), {
            resource : scrui.TextFromLocaleProperty({
              tableID : simcity.StringID.TableResource,
              stringID : c.input2
            })
          }), a.textControlRight3.SetLocaleText(this.getStringByType(c.input2Units), {
            amount : d.number,
            exponent : d.exponent
          })) : (a.textControlLeft3.SetVisibility(!1), a.textControlRight3.SetVisibility(!1))
      }
    } else
      this.minimize = !0
  },
  getStringByType : function (a) {
    var b = 0;
    switch (a) {
    case simcity.NumberFormat.Tons:
      b = "0x0e8c0d9f";
      break;
    case simcity.NumberFormat.Barrels:
      b = "0x0e8c0da1";
      break;
    case simcity.NumberFormat.Crates:
    case simcity.NumberFormat.Units:
      b = "0x0e8c0da0";
      break;
    default:
      b = "0x0e86a262"
    }
    return new scrui.cLocaleString("BuildingRollover.json", b, "kBlockManufacturing")
  }
};
simcity.RolloverItems.kManufactureAlloy = {
  additionalQueries : function (a) {
    return {
      output : ["connectedUnits", a, "bins", simcity.kResourceIDAlloy],
      outputProduced : ["connectedUnits", a, "bins", simcity.kResourceIDAlloyProducedDisplay],
      input1 : ["connectedUnits", a, "bins", simcity.kResourceIDOreRaw],
      input2 : ["connectedUnits", a, "bins", simcity.kResourceIDCoal]
    }
  },
  getRecipe : function () {
    return {
      output : simcity.StringID.Alloy,
      outputUnits : simcity.NumberFormat.Tons,
      outputQuantity : 2,
      input1 : simcity.StringID.Ore,
      input1Units : simcity.NumberFormat.Tons,
      input1Quantity : 2,
      input2 : simcity.StringID.Coal,
      input2Units : simcity.NumberFormat.Tons,
      input2Quantity : 1
    }
  }
};
goog.object.extend(simcity.RolloverItems.kManufactureAlloy, simcity.RolloverItems.kBlockManufacturing);
simcity.RolloverItems.kRecycleAlloy = {
  additionalQueries : function (a) {
    return {
      output : ["connectedUnits", a, "bins", simcity.kResourceIDAlloy],
      outputProduced : ["connectedUnits", a, "bins", simcity.kResourceIDAlloyProducedDisplay],
      input1 : ["connectedUnits", a, "bins", simcity.kResourceIDRecyclables]
    }
  },
  getRecipe : function () {
    return {
      output : simcity.StringID.Alloy,
      outputUnits : simcity.NumberFormat.Tons,
      outputQuantity : 1,
      input1 : simcity.StringID.Recyclables,
      input1Units : simcity.NumberFormat.Tons,
      input1Quantity : 1,
      input2 : "null",
      input2Units : 0,
      input2Quantity : 0
    }
  }
};
goog.object.extend(simcity.RolloverItems.kRecycleAlloy, simcity.RolloverItems.kBlockManufacturing);
simcity.RolloverItems.kManufactureMetal = {
  additionalQueries : function (a) {
    return {
      output : ["connectedUnits", a, "bins", simcity.kResourceIDMetal],
      outputProduced : ["connectedUnits", a, "bins", simcity.kResourceIDMetalProducedDisplay],
      input1 : ["connectedUnits", a, "bins", simcity.kResourceIDOreRaw]
    }
  },
  getRecipe : function () {
    return {
      output : simcity.StringID.Metal,
      outputUnits : simcity.NumberFormat.Tons,
      outputQuantity : 2,
      input1 : simcity.StringID.Ore,
      input1Units : simcity.NumberFormat.Tons,
      input1Quantity : 2,
      input2 : simcity.StringID.Coal,
      input2Units : simcity.NumberFormat.Tons,
      input2Quantity : 0
    }
  }
};
goog.object.extend(simcity.RolloverItems.kManufactureMetal, simcity.RolloverItems.kBlockManufacturing);
simcity.RolloverItems.kRecycleMetal = {
  additionalQueries : function (a) {
    return {
      output : ["connectedUnits", a, "bins", simcity.kResourceIDMetal],
      outputProduced : ["connectedUnits", a, "bins", simcity.kResourceIDMetalProducedDisplay],
      input1 : ["connectedUnits", a, "bins", simcity.kResourceIDRecyclables]
    }
  },
  getRecipe : function () {
    return {
      output : simcity.StringID.Metal,
      outputUnits : simcity.NumberFormat.Tons,
      outputQuantity : 1,
      input1 : simcity.StringID.Recyclables,
      input1Units : simcity.NumberFormat.Tons,
      input1Quantity : 1,
      input2 : "null",
      input2Units : 0,
      input2Quantity : 0
    }
  }
};
goog.object.extend(simcity.RolloverItems.kRecycleMetal, simcity.RolloverItems.kBlockManufacturing);
simcity.RolloverItems.kManufactureFuel = {
  additionalQueries : function (a) {
    return {
      output : ["connectedUnits", a, "bins", simcity.kResourceIDFuel],
      outputProduced : ["connectedUnits", a, "bins", simcity.kResourceIDFuelProducedDisplay],
      input1 : ["connectedUnits", a, "bins", simcity.kResourceIDOilCrude]
    }
  },
  getRecipe : function () {
    return {
      output : simcity.StringID.Fuel,
      outputUnits : simcity.NumberFormat.Barrels,
      outputQuantity : 2,
      input1 : simcity.StringID.Oil,
      input1Units : simcity.NumberFormat.Barrels,
      input1Quantity : 2,
      input2 : "null",
      input2Units : 0,
      input2Quantity : 0
    }
  }
};
goog.object.extend(simcity.RolloverItems.kManufactureFuel, simcity.RolloverItems.kBlockManufacturing);
simcity.RolloverItems.kManufacturePlastic = {
  additionalQueries : function (a) {
    return {
      output : ["connectedUnits", a, "bins", simcity.kResourceIDPlastic],
      outputProduced : ["connectedUnits", a, "bins", simcity.kResourceIDPlasticProducedDisplay],
      input1 : ["connectedUnits", a, "bins", simcity.kResourceIDOilCrude]
    }
  },
  getRecipe : function () {
    return {
      output : simcity.StringID.Plastic,
      outputUnits : simcity.NumberFormat.Units,
      outputQuantity : 2,
      input1 : simcity.StringID.Oil,
      input1Units : simcity.NumberFormat.Barrels,
      input1Quantity : 1,
      input2 : "null",
      input2Units : 0,
      input2Quantity : 0
    }
  }
};
goog.object.extend(simcity.RolloverItems.kManufacturePlastic, simcity.RolloverItems.kBlockManufacturing);
simcity.RolloverItems.kRecyclePlastic = {
  additionalQueries : function (a) {
    return {
      output : ["connectedUnits", a, "bins", simcity.kResourceIDPlastic],
      outputProduced : ["connectedUnits", a, "bins", simcity.kResourceIDPlasticProducedDisplay],
      input1 : ["connectedUnits", a, "bins", simcity.kResourceIDRecyclables]
    }
  },
  getRecipe : function () {
    return {
      output : simcity.StringID.Plastic,
      outputUnits : simcity.NumberFormat.Units,
      outputQuantity : 1,
      input1 : simcity.StringID.Recyclables,
      input1Units : simcity.NumberFormat.Tons,
      input1Quantity : 1,
      input2 : "null",
      input2Units : 0,
      input2Quantity : 0
    }
  }
};
goog.object.extend(simcity.RolloverItems.kRecyclePlastic, simcity.RolloverItems.kBlockManufacturing);
simcity.RolloverItems.kManufactureElectronics = {
  additionalQueries : function (a) {
    return {
      output : ["connectedUnits", a, "bins", simcity.kResourceIDElectronics],
      outputProduced : ["connectedUnits", a, "bins", simcity.kResourceIDElectronicsProducedDisplay],
      input1 : ["connectedUnits", a, "bins", simcity.kResourceIDAlloy],
      input2 : ["connectedUnits", a, "bins", simcity.kResourceIDPlastic]
    }
  },
  getRecipe : function () {
    return {
      output : simcity.StringID.Electronics,
      outputUnits : simcity.NumberFormat.Units,
      outputQuantity : 2,
      input1 : simcity.StringID.Alloy,
      input1Units : simcity.NumberFormat.Tons,
      input1Quantity : 1,
      input2 : simcity.StringID.Plastic,
      input2Units : simcity.NumberFormat.Units,
      input2Quantity : 1
    }
  }
};
goog.object.extend(simcity.RolloverItems.kManufactureElectronics, simcity.RolloverItems.kBlockManufacturing);
simcity.RolloverItems.kManufactureTelevision = {
  additionalQueries : function (a) {
    return {
      output : ["connectedUnits", a, "bins", simcity.kResourceIDTelevision],
      outputProduced : ["connectedUnits", a, "bins", simcity.kResourceIDTelevisionProducedDisplay],
      input1 : ["connectedUnits", a, "bins", simcity.kResourceIDElectronics],
      input2 : ["connectedUnits", a, "bins", simcity.kResourceIDPlastic]
    }
  },
  getRecipe : function () {
    return {
      output : simcity.StringID.Television,
      outputUnits : simcity.NumberFormat.Units,
      outputQuantity : 2,
      input1 : simcity.StringID.Electronics,
      input1Units : simcity.NumberFormat.Units,
      input1Quantity : 1,
      input2 : simcity.StringID.Plastic,
      input2Units : simcity.NumberFormat.Units,
      input2Quantity : 1
    }
  }
};
goog.object.extend(simcity.RolloverItems.kManufactureTelevision, simcity.RolloverItems.kBlockManufacturing);
simcity.RolloverItems.kManufactureComputer = {
  additionalQueries : function (a) {
    return {
      output : ["connectedUnits", a, "bins", simcity.kResourceIDComputer],
      outputProduced : ["connectedUnits", a, "bins", simcity.kResourceIDComputerProducedDisplay],
      input1 : ["connectedUnits", a, "bins", simcity.kResourceIDElectronics],
      input2 : ["connectedUnits", a, "bins", simcity.kResourceIDAlloy]
    }
  },
  getRecipe : function () {
    return {
      output : simcity.StringID.Computer,
      outputUnits : simcity.NumberFormat.Units,
      outputQuantity : 2,
      input1 : simcity.StringID.Electronics,
      input1Units : simcity.NumberFormat.Units,
      input1Quantity : 1,
      input2 : simcity.StringID.Alloy,
      input2Units : simcity.NumberFormat.Tons,
      input2Quantity : 1
    }
  }
};
goog.object.extend(simcity.RolloverItems.kManufactureComputer, simcity.RolloverItems.kBlockManufacturing);
simcity.RolloverItems.kBlockManufacturingDelivered = {
  stringData : {
    tableID : "BuildingRollover.json",
    stringID : "0x0e8c0d35",
    placeholder : "kBlockManufacturingDelivered"
  },
  layoutPath : "Layouts/Rollovers/RolloverItemSmallTextCenter.js",
  init : function (a) {
    a.textControl = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemValue)
  },
  updateQueries : function (a) {
    var b = {
      onFlag : ["units", a, "flags", simcity.kUnitFlagOpenForBusiness]
    };
    this.additionalQueries && goog.object.extend(b, this.additionalQueries(a));
    return b
  },
  update : function (a, b) {
    var c = b.outputDeliveredToday.amount > b.outputDeliveredPerDay.amount ? b.outputDeliveredToday.amount : b.outputDeliveredPerDay.amount,
    d = simcity.FormatLargeNumberByType(c, a.formatType);
    this.minimize = 0 < c ? !1 : !0;
    this.getText && (c = this.getText(a, b), a.textControl.SetTextColor(simcity.RolloverItems.textColorBlack), a.textControl.UpdateLocaleText({
        amount : d.number,
        exponent : d.exponent,
        unit : scrui.TextFromLocaleProperty({
          tableID : simcity.StringID.TableBuildingRollover,
          stringID : c.outputUnits
        }),
        resource : scrui.TextFromLocaleProperty({
          tableID : simcity.StringID.TableResource,
          stringID : c.output
        })
      }))
  }
};
simcity.RolloverItems.kManufactureElectronicsDelivered = {
  additionalQueries : function (a) {
    return {
      outputDeliveredToday : ["connectedUnits", a, "bins", simcity.kResourceIDElectronicsDeliveredToday],
      outputDeliveredPerDay : ["connectedUnits", a, "bins", simcity.kResourceIDElectronicsDeliveredPerDay]
    }
  },
  getText : function (a) {
    a.formatType = simcity.NumberFormat.Units;
    return {
      output : simcity.StringID.Electronics,
      outputUnits : "0x0e8d4574"
    }
  }
};
goog.object.extend(simcity.RolloverItems.kManufactureElectronicsDelivered, simcity.RolloverItems.kBlockManufacturingDelivered);
simcity.RolloverItems.kManufactureComputerDelivered = {
  additionalQueries : function (a) {
    return {
      outputDeliveredToday : ["connectedUnits", a, "bins", simcity.kResourceIDComputerDeliveredToday],
      outputDeliveredPerDay : ["connectedUnits", a, "bins", simcity.kResourceIDComputerDeliveredPerDay]
    }
  },
  getText : function (a) {
    a.formatType = simcity.NumberFormat.Units;
    return {
      output : simcity.StringID.Computer,
      outputUnits : "0x0e8d4574"
    }
  }
};
goog.object.extend(simcity.RolloverItems.kManufactureComputerDelivered, simcity.RolloverItems.kBlockManufacturingDelivered);
simcity.RolloverItems.kManufactureTelevisionDelivered = {
  additionalQueries : function (a) {
    return {
      outputDeliveredToday : ["connectedUnits", a, "bins", simcity.kResourceIDTelevisionDeliveredToday],
      outputDeliveredPerDay : ["connectedUnits", a, "bins", simcity.kResourceIDTelevisionDeliveredPerDay]
    }
  },
  getText : function (a) {
    a.formatType = simcity.NumberFormat.Units;
    return {
      output : simcity.StringID.Television,
      outputUnits : "0x0e8d4574"
    }
  }
};
goog.object.extend(simcity.RolloverItems.kManufactureTelevisionDelivered, simcity.RolloverItems.kBlockManufacturingDelivered);
simcity.RolloverItems.kManufacturePlasticDelivered = {
  additionalQueries : function (a) {
    return {
      outputDeliveredToday : ["connectedUnits", a, "bins", simcity.kResourceIDPlasticDeliveredToday],
      outputDeliveredPerDay : ["connectedUnits", a, "bins", simcity.kResourceIDPlasticDeliveredPerDay]
    }
  },
  getText : function (a) {
    a.formatType = simcity.NumberFormat.Units;
    return {
      output : simcity.StringID.Plastic,
      outputUnits : "0x0e8d4574"
    }
  }
};
goog.object.extend(simcity.RolloverItems.kManufacturePlasticDelivered, simcity.RolloverItems.kBlockManufacturingDelivered);
simcity.RolloverItems.kManufactureFuelDelivered = {
  additionalQueries : function (a) {
    return {
      outputDeliveredToday : ["connectedUnits", a, "bins", simcity.kResourceIDFuelDeliveredToday],
      outputDeliveredPerDay : ["connectedUnits", a, "bins", simcity.kResourceIDFuelDeliveredPerDay]
    }
  },
  getText : function (a) {
    a.formatType = simcity.NumberFormat.Barrels;
    return {
      output : simcity.StringID.Fuel,
      outputUnits : "0x0e8d4575"
    }
  }
};
goog.object.extend(simcity.RolloverItems.kManufactureFuelDelivered, simcity.RolloverItems.kBlockManufacturingDelivered);
simcity.RolloverItems.kManufactureOilCrudeDelivered = {
  additionalQueries : function (a) {
    return {
      outputDeliveredToday : ["connectedUnits", a, "bins", simcity.kResourceIDOilCrudeDeliveredToday],
      outputDeliveredPerDay : ["connectedUnits", a, "bins", simcity.kResourceIDOilCrudeDeliveredPerDay]
    }
  },
  getText : function (a) {
    a.formatType = simcity.NumberFormat.Barrels;
    return {
      output : simcity.StringID.Oil,
      outputUnits : "0x0e8d4575"
    }
  }
};
goog.object.extend(simcity.RolloverItems.kManufactureOilCrudeDelivered, simcity.RolloverItems.kBlockManufacturingDelivered);
simcity.RolloverItems.kManufactureCoalDelivered = {
  additionalQueries : function (a) {
    return {
      outputDeliveredToday : ["connectedUnits", a, "bins", simcity.kResourceIDCoalDeliveredToday],
      outputDeliveredPerDay : ["connectedUnits", a, "bins", simcity.kResourceIDCoalDeliveredPerDay]
    }
  },
  getText : function (a) {
    a.formatType = simcity.NumberFormat.Tons;
    return {
      output : simcity.StringID.Coal,
      outputUnits : "0x0e8d4573"
    }
  }
};
goog.object.extend(simcity.RolloverItems.kManufactureCoalDelivered, simcity.RolloverItems.kBlockManufacturingDelivered);
simcity.RolloverItems.kManufactureMetalDelivered = {
  additionalQueries : function (a) {
    return {
      outputDeliveredToday : ["connectedUnits", a, "bins", simcity.kResourceIDMetalDeliveredToday],
      outputDeliveredPerDay : ["connectedUnits", a, "bins", simcity.kResourceIDMetalDeliveredPerDay]
    }
  },
  getText : function (a) {
    a.formatType = simcity.NumberFormat.Tons;
    return {
      output : simcity.StringID.Metal,
      outputUnits : "0x0e8d4573"
    }
  }
};
goog.object.extend(simcity.RolloverItems.kManufactureMetalDelivered, simcity.RolloverItems.kBlockManufacturingDelivered);
simcity.RolloverItems.kManufactureOreDelivered = {
  additionalQueries : function (a) {
    return {
      outputDeliveredToday : ["connectedUnits", a, "bins", simcity.kResourceIDOreRawDeliveredToday],
      outputDeliveredPerDay : ["connectedUnits", a, "bins", simcity.kResourceIDOreRawDeliveredPerDay]
    }
  },
  getText : function (a) {
    a.formatType = simcity.NumberFormat.Tons;
    return {
      output : simcity.StringID.Ore,
      outputUnits : "0x0e8d4573"
    }
  }
};
goog.object.extend(simcity.RolloverItems.kManufactureOreDelivered, simcity.RolloverItems.kBlockManufacturingDelivered);
simcity.RolloverItems.kManufactureAlloyDelivered = {
  additionalQueries : function (a) {
    return {
      outputDeliveredToday : ["connectedUnits", a, "bins", simcity.kResourceIDAlloyDeliveredToday],
      outputDeliveredPerDay : ["connectedUnits", a, "bins", simcity.kResourceIDAlloyDeliveredPerDay]
    }
  },
  getText : function (a) {
    a.formatType = simcity.NumberFormat.Tons;
    return {
      output : simcity.StringID.Alloy,
      outputUnits : "0x0e8d4573"
    }
  }
};
goog.object.extend(simcity.RolloverItems.kManufactureAlloyDelivered, simcity.RolloverItems.kBlockManufacturingDelivered);
simcity.RolloverItems.kBlockAirPollution = {
  layoutPath : "Layouts/Rollovers/RolloverBlockText1Row2Column.js",
  init : function (a) {
    a.textControlLeft1 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextLeft1);
    a.textControlRight1 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextRight1)
  },
  updateQueries : function (a) {
    var b = {
      onFlag : ["units", a, "flags", simcity.kUnitFlagActiveBuilding],
      pollutionProduced : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kPropAirPollutionProduced],
      pollutionPerHour : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kPropAirPollutionPerHour]
    };
    this.additionalQueries && goog.object.extend(b, this.additionalQueries(a));
    return b
  },
  update : function (a, b) {
    var c = b.pollutionProduced > b.pollutionPerHour ? b.pollutionProduced : b.pollutionPerHour,
    c = Math.round(c),
    d = "null",
    e = simcity.RolloverItems.textColorNormal;
    c > simcity.SimTuning.PollutionExtreme ? (d = "0x0e5840a3", e = simcity.RolloverItems.textColorUrgent) : c > simcity.SimTuning.PollutionHigh ? (d = "0x0e5840a2",
      e = simcity.RolloverItems.textColorUrgent) : c > simcity.SimTuning.PollutionMedium ? (d = "0x0e5840a1", e = simcity.RolloverItems.textColorWarning) : d = c > simcity.SimTuning.PollutionLow ? "0x0e5840a0" : "0x0e5840a4";
    a.textControlLeft1.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0e3b9781", "kSewageConsumerGroundPollution2"));
    a.textControlRight1.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", d, "kSewageConsumerGroundPollution2"));
    a.textControlRight1.SetTextColor(e);
    simcity.RolloverItems.HideDivider(a)
  }
};
simcity.RolloverItems.kBlockAirPollution_unconnected = {
  additionalQueries : function (a) {
    return {
      pollutionProduced : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kPropAirPollutionProduced],
      pollutionPerHour : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kPropAirPollutionPerHour]
    }
  }
};
goog.object.extend(simcity.RolloverItems.kBlockAirPollution_unconnected, simcity.RolloverItems.kBlockAirPollution);
simcity.RolloverItems.kBlockPollution = {
  layoutPath : "Layouts/Rollovers/RolloverBlockText2Row2Column.js",
  init : function (a) {
    a.BackgroundControl = a.layout.FindControlByID(simcity.cRolloverUI.kWinIDRolloverBackground);
    a.textControlLeft1 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextLeft1);
    a.textControlRight1 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextRight1);
    a.textControlLeft2 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextLeft2);
    a.textControlRight2 =
      a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextRight2)
  },
  updateQueries : function (a) {
    var b = {
      onFlag : ["units", a, "flags", simcity.kUnitFlagActiveBuilding],
      groundPollutionProduced : ["connectedUnits", a, "properties", simcity.kPropGroundPollutionTransmitter_Amount, simcity.kPropGroundPollutionTransmitter_Rate],
      airPollutionProduced : ["connectedUnits", a, "properties", simcity.kPropAirPollutionTransmitter_Amount, simcity.kPropAirPollutionTransmitter_Rate]
    };
    this.additionalQueries && goog.object.extend(b,
      this.additionalQueries(a));
    return b
  },
  update : function (a, b) {
    this.minimize = b.onFlag ? !1 : !0;
    a.textControlLeft1.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0e8e8ed1", "kSewageConsumerGroundPollution2"));
    a.textControlRight1.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0e8e8fa3", "kSewageConsumerGroundPollution2"), {
      amount : Math.round(60 * b.groundPollutionProduced)
    });
    a.textControlLeft2.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0e3b9781", "kSewageConsumerGroundPollution2"));
    a.textControlRight2.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0e8e8fa3", "kSewageConsumerGroundPollution2"), {
      amount : Math.round(60 * b.airPollutionProduced)
    })
  }
};
simcity.RolloverItems.kBlockGroundPollutionAccumulated = {
  layoutPath : "Layouts/Rollovers/RolloverBlockText1Row2Column.js",
  init : function (a) {
    a.textControlLeft = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextLeft1);
    a.textControlRight = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextRight1)
  },
  updateQueries : function (a) {
    return {
      groundPollution : [simcity.kDataMaps, simcity.kMapIDGroundPollution, "unitRegion", a, "B", simcity.kDataSum]
    }
  },
  update : function (a, b) {
    var c = simcity.RolloverItems.textColorNormal,
    d = "null",
    d = b.groundPollution.amount / b.groundPollution.capacity;
    0 >= d ? d = "0x0e5840a4" : 0.5 >= d ? d = "0x0e5840a0" : 0.75 >= d ? (d = "0x0e5840a1", c = simcity.RolloverItems.textColorWarning) : (d = "0x0e5840a2", c = simcity.RolloverItems.textColorUrgent);
    a.textControlLeft.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0e570cd9", "kBlockGroundPollutionAccumulated"));
    a.textControlRight.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", d, "kBlockGroundPollutionAccumulated"));
    a.textControlRight.SetTextColor(c);
    simcity.RolloverItems.HideDivider(a)
  }
};
simcity.RolloverItems.kBlockGroundPollution = {
  layoutPath : "Layouts/Rollovers/RolloverBlockText1Row2Column.js",
  init : function (a) {
    a.textControlLeft = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextLeft1);
    a.textControlRight = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextRight1);
    a.BackgroundControl = a.layout.FindControlByID(simcity.cRolloverUI.kWinIDRolloverBackground)
  },
  updateQueries : function (a) {
    return {
      groundPollution : ["maps", simcity.kMapIDGroundPollution, "unitRegion",
        a, "B", "sum"]
    }
  },
  update : function (a, b) {
    a.BackgroundControl.SetVisibility(!1);
    a.textControlLeft.SetTextColor(simcity.RolloverItems.textColorBlack);
    a.textControlLeft.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0e570cd9", "kSewageConsumerGroundPollution2"));
    var c = b.groundPollution.amount / b.groundPollution.capacity;
    0 >= c ? (a.textControlRight.SetTextColor(simcity.RolloverItems.textColorNormal), a.textControlRight.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0e5840a4",
          "kSewageConsumerGroundPollution2"))) : 0.5 >= c ? (a.textControlRight.SetTextColor(simcity.RolloverItems.textColorNormal), a.textControlRight.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0e5840a0", "kSewageConsumerGroundPollution2"))) : 0.75 >= c ? (a.textControlRight.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0e5840a1", "kSewageConsumerGroundPollution2")), a.textControlRight.SetTextColor(simcity.RolloverItems.textColorWarning)) : (a.textControlRight.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json",
          "0x0e5840a2", "kSewageConsumerGroundPollution2")), a.textControlRight.SetTextColor(simcity.RolloverItems.textColorUrgent))
  }
};
simcity.RolloverItems.kStringDump = {
  layoutPath : "Layouts/Rollovers/RolloverBlockTextTitle.js",
  init : function (a) {
    a.textControlTitle = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTitle)
  },
  update : function (a) {
    a.textControlTitle.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0eec2fe4", "kStringDump"))
  }
};
simcity.RolloverItems.kStringDumpDemolishWarning = {
  layoutPath : "Layouts/Rollovers/RolloverItemSmallTextCenter.js",
  init : function (a) {
    a.textControlTitle = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemValue);
    a.textControlTitle.SetHeight(200)
  },
  update : function (a) {
    a.textControlTitle.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0eec2ff5", "kStringDump"))
  }
};
simcity.RolloverItems.kBlockGarbageIncineratorRate = {
  layoutPath : "Layouts/Rollovers/RolloverBlockText1Row2Column.js",
  init : function (a) {
    a.textControlLeft1 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextLeft1);
    a.textControlRight1 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextRight1)
  },
  updateQueries : function (a) {
    var b = {
      GarbageToBurn : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDGarbageToBurn],
      GarbageBurnedPerHour : [simcity.kDataConnectedUnits,
        a, simcity.kDataBinAmount, simcity.kResourceIDGarbageBurnedPerHour]
    };
    this.additionalQueries && goog.object.extend(b, this.additionalQueries(a));
    return b
  },
  update : function (a, b) {
    var c = simcity.FormatLargeNumberForTons(b.GarbageToBurn);
    a.textControlLeft1.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0eec2fe5", "kBlockGarbageIncineratorRate"));
    a.textControlRight1.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0eec3524", "kBlockGarbageIncineratorRate"), {
      amount : c.number,
      exponent : c.exponent
    })
  }
};
simcity.RolloverItems.kStringInput = {
  layoutPath : "Layouts/Rollovers/RolloverBlockTextTitle.js",
  init : function (a) {
    a.textControlTitle = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTitle)
  },
  update : function (a) {
    a.textControlTitle.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0ecb1aa0", "kStringInput"))
  }
};
simcity.RolloverItems.kStringOutput = {
  layoutPath : "Layouts/Rollovers/RolloverBlockTextTitle.js",
  init : function (a) {
    a.textControlTitle = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTitle)
  },
  update : function (a) {
    a.textControlTitle.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0ecb1aa1", "kStringInput"))
  }
};
simcity.RolloverItems.kStringStorage = {
  layoutPath : "Layouts/Rollovers/RolloverBlockTextTitle.js",
  init : function (a) {
    a.textControlTitle = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTitle)
  },
  update : function (a) {
    a.textControlTitle.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0ee96957", "kStringInput"))
  }
};
simcity.RolloverItems.kStringMining = {
  layoutPath : "Layouts/Rollovers/RolloverBlockTextTitle.js",
  init : function (a) {
    a.textControlTitle = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTitle)
  },
  update : function (a) {
    a.textControlTitle.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0ee6dd7c", "kStringInput"))
  }
};
simcity.RolloverItems.kStringDrilling = {
  layoutPath : "Layouts/Rollovers/RolloverBlockTextTitle.js",
  init : function (a) {
    a.textControlTitle = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTitle);
    a.textControlTitleRight = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTitleRight)
  },
  update : function (a) {
    a.textControlTitle.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0ee6dd7e", "kStringInput"))
  }
};
simcity.RolloverItems.kStringPrisoners = {
  layoutPath : "Layouts/Rollovers/RolloverBlockTextTitle.js",
  init : function (a) {
    a.textControlTitle = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTitle)
  },
  update : function (a) {
    a.textControlTitle.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0eec3c71", "kStringInput"))
  }
};
simcity.RolloverItems.kStringResourceStored = {
  layoutPath : "Layouts/Rollovers/RolloverBlockTextTitle.js",
  init : function (a) {
    a.textControlTitle = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTitle);
    a.textControlTitleRight = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTitleRight)
  },
  update : function (a, b) {
    var c = this.GetResource(a, b);
    a.textControlTitle.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0ee6f651", "kStringInput"), {
      string : c
    })
  }
};
simcity.RolloverItems.kStringOilCrudeStored = {
  GetResource : function () {
    return scrui.TextFromLocaleProperty({
      tableID : simcity.StringID.TableResource,
      stringID : simcity.StringID.Oil
    })
  }
};
goog.object.extend(simcity.RolloverItems.kStringOilCrudeStored, simcity.RolloverItems.kStringResourceStored);
simcity.RolloverItems.kStringOreStored = {
  GetResource : function () {
    return scrui.TextFromLocaleProperty({
      tableID : simcity.StringID.TableResource,
      stringID : simcity.StringID.Ore
    })
  }
};
goog.object.extend(simcity.RolloverItems.kStringOreStored, simcity.RolloverItems.kStringResourceStored);
simcity.RolloverItems.kStringCoalStored = {
  GetResource : function () {
    return scrui.TextFromLocaleProperty({
      tableID : simcity.StringID.TableResource,
      stringID : simcity.StringID.Coal
    })
  }
};
goog.object.extend(simcity.RolloverItems.kStringCoalStored, simcity.RolloverItems.kStringResourceStored);
simcity.RolloverItems.kStringAlloyStored = {
  GetResource : function () {
    return scrui.TextFromLocaleProperty({
      tableID : simcity.StringID.TableResource,
      stringID : simcity.StringID.Alloy
    })
  }
};
goog.object.extend(simcity.RolloverItems.kStringAlloyStored, simcity.RolloverItems.kStringResourceStored);
simcity.RolloverItems.kStringMetalStored = {
  GetResource : function () {
    return scrui.TextFromLocaleProperty({
      tableID : simcity.StringID.TableResource,
      stringID : simcity.StringID.Metal
    })
  }
};
goog.object.extend(simcity.RolloverItems.kStringMetalStored, simcity.RolloverItems.kStringResourceStored);
simcity.RolloverItems.kStringElectronicsStored = {
  GetResource : function () {
    return scrui.TextFromLocaleProperty({
      tableID : simcity.StringID.TableResource,
      stringID : simcity.StringID.Electronics
    })
  }
};
goog.object.extend(simcity.RolloverItems.kStringElectronicsStored, simcity.RolloverItems.kStringResourceStored);
simcity.RolloverItems.kStringComputersStored = {
  GetResource : function () {
    return scrui.TextFromLocaleProperty({
      tableID : simcity.StringID.TableResource,
      stringID : simcity.StringID.Computer
    })
  }
};
goog.object.extend(simcity.RolloverItems.kStringComputersStored, simcity.RolloverItems.kStringResourceStored);
simcity.RolloverItems.kStringTelevisionsStored = {
  GetResource : function () {
    return scrui.TextFromLocaleProperty({
      tableID : simcity.StringID.TableResource,
      stringID : simcity.StringID.Television
    })
  }
};
goog.object.extend(simcity.RolloverItems.kStringTelevisionsStored, simcity.RolloverItems.kStringResourceStored);
simcity.RolloverItems.kStringPlasticStored = {
  GetResource : function () {
    return scrui.TextFromLocaleProperty({
      tableID : simcity.StringID.TableResource,
      stringID : simcity.StringID.Plastic
    })
  }
};
goog.object.extend(simcity.RolloverItems.kStringPlasticStored, simcity.RolloverItems.kStringResourceStored);
simcity.RolloverItems.kStringFuelStored = {
  GetResource : function () {
    return scrui.TextFromLocaleProperty({
      tableID : simcity.StringID.TableResource,
      stringID : simcity.StringID.Fuel
    })
  }
};
goog.object.extend(simcity.RolloverItems.kStringFuelStored, simcity.RolloverItems.kStringResourceStored);
simcity.RolloverItems.kStringResourceInGround = {
  layoutPath : "Layouts/Rollovers/RolloverBlockTextTitle.js",
  init : function (a) {
    a.textControlTitle = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTitle);
    a.textControlTitleRight = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTitleRight)
  },
  update : function (a, b) {
    var c = this.GetResource(a, b);
    a.textControlTitle.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0e8e8d92", "kStringInput"), {
      resource : c
    })
  }
};
simcity.RolloverItems.kStringOilInGround = {
  GetResource : function () {
    return scrui.TextFromLocaleProperty({
      tableID : simcity.StringID.TableResource,
      stringID : simcity.StringID.Oil
    })
  }
};
goog.object.extend(simcity.RolloverItems.kStringOilInGround, simcity.RolloverItems.kStringResourceInGround);
simcity.RolloverItems.kStringOreInGround = {
  GetResource : function () {
    return scrui.TextFromLocaleProperty({
      tableID : simcity.StringID.TableResource,
      stringID : simcity.StringID.Ore
    })
  }
};
goog.object.extend(simcity.RolloverItems.kStringOreInGround, simcity.RolloverItems.kStringResourceInGround);
simcity.RolloverItems.kStringCoalInGround = {
  GetResource : function () {
    return scrui.TextFromLocaleProperty({
      tableID : simcity.StringID.TableResource,
      stringID : simcity.StringID.Coal
    })
  }
};
goog.object.extend(simcity.RolloverItems.kStringCoalInGround, simcity.RolloverItems.kStringResourceInGround);
simcity.RolloverItems.kBlockExtractorRate = {
  layoutPath : "Layouts/Rollovers/RolloverBlockTitleGaugeRedOnLeft.js",
  init : function (a) {
    a.textControlNumber = a.layout.FindControlByID(194390442);
    a.textControlNumberExponent = a.layout.FindControlByID(242657238)
  },
  updateQueries : function (a) {
    var b = {
      onFlag : ["units", a, "flags", simcity.kUnitFlagActiveBuilding]
    };
    this.additionalQueries && goog.object.extend(b, this.additionalQueries(a));
    return b
  },
  update : function (a, b) {
    var c = "NULL";
    this.getText && (c = this.getText(a, b));
    var d = b.resourceDisplay;
    a.formatType == simcity.NumberFormat.Tons ? (d = simcity.FormatLargeNumberForTons(d), d = d.number) : a.formatType == simcity.NumberFormat.Barrels && (d = simcity.FormatLargeNumberForBarrels(d), d = d.number);
    a.textControlNumber.SetTextColor(0 < d ? simcity.RolloverItems.textColorNormal : simcity.RolloverItems.textColorUrgent);
    a.textControlNumber.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0e6ae894", "kBlockExtractorRate"), {
      amount : d
    });
    a.textControlNumberExponent.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json",
        c.units, "kBlockExtractorRate"))
  }
};
simcity.RolloverItems.kBlockExtractorRateOil = {
  additionalQueries : function (a) {
    return {
      resourceDisplay : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDOilCrudePumpedDisplay]
    }
  },
  getText : function (a) {
    a.formatType = simcity.NumberFormat.Barrels;
    return {
      resource : scrui.TextFromLocaleProperty({
        tableID : simcity.StringID.TableResource,
        stringID : simcity.StringID.Oil
      }),
      units : "0x0ee6d612"
    }
  }
};
goog.object.extend(simcity.RolloverItems.kBlockExtractorRateOil, simcity.RolloverItems.kBlockExtractorRate);
simcity.RolloverItems.kBlockExtractorRateOre = {
  additionalQueries : function (a) {
    return {
      resourceDisplay : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDOreHarvestedDisplay]
    }
  },
  getText : function (a) {
    a.formatType = simcity.NumberFormat.Tons;
    return {
      resource : scrui.TextFromLocaleProperty({
        tableID : simcity.StringID.TableResource,
        stringID : simcity.StringID.Ore
      }),
      units : "0x0ee6d610"
    }
  }
};
goog.object.extend(simcity.RolloverItems.kBlockExtractorRateOre, simcity.RolloverItems.kBlockExtractorRate);
simcity.RolloverItems.kBlockExtractorRateCoal = {
  additionalQueries : function (a) {
    return {
      resourceDisplay : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDCoalHarvestedDisplay]
    }
  },
  getText : function (a) {
    a.formatType = simcity.NumberFormat.Tons;
    return {
      resource : scrui.TextFromLocaleProperty({
        tableID : simcity.StringID.TableResource,
        stringID : simcity.StringID.Coal
      }),
      units : "0x0ee6d610"
    }
  }
};
goog.object.extend(simcity.RolloverItems.kBlockExtractorRateCoal, simcity.RolloverItems.kBlockExtractorRate);
simcity.RolloverItems.kBlockExtractor = {
  layoutPath : "Layouts/Rollovers/RolloverBlockText1Row2Column.js",
  init : function (a) {
    a.BackgroundControl = a.layout.FindControlByID(simcity.cRolloverUI.kWinIDRolloverBackground);
    a.textControlLeft1 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextLeft1);
    a.textControlRight1 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextRight1)
  },
  updateQueries : function (a) {
    var b = {
      onFlag : ["units", a, "flags", simcity.kUnitFlagActiveBuilding]
    };
    this.additionalQueries &&
    goog.object.extend(b, this.additionalQueries(a));
    return b
  },
  update : function (a, b) {
    this.minimize = b.onFlag ? !1 : !0;
    var c = "NULL";
    this.getText && (c = this.getText(a, b));
    var d = simcity.FormatLargeNumberByType(b.resourceThisHour.amount > b.resourcePerHour.amount ? b.resourceThisHour.amount : b.resourcePerHour.amount, a.formatType);
    a.textControlLeft1.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0e8e8d91", "kSewageConsumerGroundPollution2"), {
      resource : c.resource
    });
    a.textControlRight1.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json",
        c.units, "kSewageConsumerGroundPollution2"), {
      amount : d.number,
      exponent : d.exponent
    })
  }
};
simcity.RolloverItems.kBlockExtractorCoal = {
  additionalQueries : function (a) {
    return {
      resourceThisHour : [simcity.kDataConnectedUnits, a, "bins", simcity.kResourceIDCoalHarvested_ThisPeriod],
      resourcePerHour : [simcity.kDataConnectedUnits, a, "bins", simcity.kResourceIDCoalHarvested_PerPeriod]
    }
  },
  getText : function (a) {
    a.formatType = simcity.NumberFormat.Tons;
    return {
      resource : scrui.TextFromLocaleProperty({
        tableID : simcity.StringID.TableResource,
        stringID : simcity.StringID.Coal
      }),
      units : "0x0e8c0d9f"
    }
  }
};
goog.object.extend(simcity.RolloverItems.kBlockExtractorCoal, simcity.RolloverItems.kBlockExtractor);
simcity.RolloverItems.kBlockExtractorOre = {
  additionalQueries : function (a) {
    return {
      resourceThisHour : [simcity.kDataConnectedUnits, a, "bins", simcity.kResourceIDOreHarvested_ThisPeriod],
      resourcePerHour : [simcity.kDataConnectedUnits, a, "bins", simcity.kResourceIDOreHarvested_PerPeriod]
    }
  },
  getText : function (a) {
    a.formatType = simcity.NumberFormat.Tons;
    return {
      resource : scrui.TextFromLocaleProperty({
        tableID : simcity.StringID.TableResource,
        stringID : simcity.StringID.Ore
      }),
      units : "0x0e8c0d9f"
    }
  }
};
goog.object.extend(simcity.RolloverItems.kBlockExtractorOre, simcity.RolloverItems.kBlockExtractor);
simcity.RolloverItems.kBlockExtractorOil = {
  additionalQueries : function (a) {
    return {
      connectedResourceThisHour : [simcity.kDataConnectedUnits, a, "bins", simcity.kResourceIDOilCrudePumped_ThisPeriod],
      connectedResourcePerHour : [simcity.kDataConnectedUnits, a, "bins", simcity.kResourceIDOilCrudePumped_PerPeriod],
      localResourceThisHour : [simcity.kDataUnits, a, "bins", simcity.kResourceIDOilCrudePumped_ThisPeriod],
      localResourcePerHour : [simcity.kDataUnits, a, "bins", simcity.kResourceIDOilCrudePumped_PerPeriod]
    }
  },
  getText : function (a,
    b) {
    b.resourceThisHour = {
      amount : 0,
      capacity : 0
    };
    b.resourcePerHour = {
      amount : 0,
      capacity : 0
    };
    b.resourceThisHour.amount = b.connectedResourceThisHour.amount - b.localResourceThisHour.amount;
    b.resourcePerHour.amount = b.connectedResourcePerHour.amount - b.localResourcePerHour.amount;
    a.formatType = simcity.NumberFormat.Barrels;
    return {
      resource : scrui.TextFromLocaleProperty({
        tableID : simcity.StringID.TableResource,
        stringID : simcity.StringID.Oil
      }),
      units : "0x0ec350f2"
    }
  }
};
goog.object.extend(simcity.RolloverItems.kBlockExtractorOil, simcity.RolloverItems.kBlockExtractor);
simcity.RolloverItems.kBlockLocalExtractorOil = {
  additionalQueries : function (a) {
    return {
      localResourceThisHour : [simcity.kDataUnits, a, "bins", simcity.kResourceIDOilCrudePumped_ThisPeriod],
      localResourcePerHour : [simcity.kDataUnits, a, "bins", simcity.kResourceIDOilCrudePumped_PerPeriod]
    }
  },
  getText : function (a, b) {
    b.resourceThisHour = {
      amount : 0,
      capacity : 0
    };
    b.resourcePerHour = {
      amount : 0,
      capacity : 0
    };
    b.resourceThisHour.amount = b.localResourceThisHour.amount;
    b.resourcePerHour.amount = b.localResourcePerHour.amount;
    a.formatType =
      simcity.NumberFormat.Barrels;
    return {
      resource : scrui.TextFromLocaleProperty({
        tableID : simcity.StringID.TableResource,
        stringID : simcity.StringID.Oil
      }),
      units : "0x0ec350f2"
    }
  }
};
goog.object.extend(simcity.RolloverItems.kBlockLocalExtractorOil, simcity.RolloverItems.kBlockExtractor);
simcity.RolloverItems.kBlockResourceMap = {
  layoutPath : "Layouts/Rollovers/RolloverBlockText1Row2Column.js",
  init : function (a) {
    a.BackgroundControl = a.layout.FindControlByID(simcity.cRolloverUI.kWinIDRolloverBackground);
    a.textControlLeft1 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextLeft1);
    a.textControlRight1 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextRight1);
    a.mapConversion = 1
  },
  updateQueries : function (a) {
    var b = {
      onFlag : ["units", a, "flags", simcity.kUnitFlagActiveBuilding]
    };
    this.additionalQueries && goog.object.extend(b, this.additionalQueries(a));
    return b
  },
  update : function (a, b) {
    var c = "NULL",
    d = this.extractedPerDay(a, b);
    this.getText && (c = this.getText(a, b));
    var e = b.map.amount * a.mapConversion;
    a.textControlLeft1.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0e8e8d93", "kBlockResourceMap"), {
      resource : c.resource
    });
    0 < d || 0 === e ? (c = 0 < e ? Math.floor(e / d) : 0, a.textControlRight1.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0ee6fcde", "kBlockResourceMap"), {
        amount : Math.round(c)
      })) : a.textControlRight1.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0ee82f0c", "kBlockResourceMap"), {
      string : scrui.TextFromLocaleProperty({
        tableID : simcity.StringID.TableBuildingRollover,
        stringID : c.type
      })
    })
  }
};
simcity.RolloverItems.kBlockResourceMapCoal = {
  additionalQueries : function (a) {
    return {
      map : [simcity.kDataMaps, simcity.kMapIDCoalDeposit, "unitRegion", a, "A", simcity.kDataConnectedExtractorSum],
      resourceDisplay : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDCoalHarvestedDisplay]
    }
  },
  getText : function (a, b) {
    a.formatType = simcity.NumberFormat.Tons;
    a.mapConversion = simcity.RolloverItems.coalMapToBinConversion;
    b.map.amount *= simcity.RolloverItems.coalMapToBinConversion;
    b.map.capacity *= simcity.RolloverItems.coalMapToBinConversion;
    return {
      resource : scrui.TextFromLocaleProperty({
        tableID : simcity.StringID.TableResource,
        stringID : simcity.StringID.Coal
      }),
      units : "0x0e8d4576",
      type : 250106959
    }
  },
  extractedPerDay : function (a, b) {
    return b.resourceDisplay
  }
};
goog.object.extend(simcity.RolloverItems.kBlockResourceMapCoal, simcity.RolloverItems.kBlockResourceMap);
simcity.RolloverItems.kBlockResourceMapOre = {
  additionalQueries : function (a) {
    return {
      map : [simcity.kDataMaps, simcity.kMapIDOreDeposit, "unitRegion", a, "A", simcity.kDataConnectedExtractorSum],
      resourceDisplay : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDOreHarvestedDisplay]
    }
  },
  getText : function (a, b) {
    a.formatType = simcity.NumberFormat.Tons;
    a.mapConversion = simcity.RolloverItems.oreMapToBinConversion;
    b.map.amount *= simcity.RolloverItems.oreMapToBinConversion;
    b.map.capacity *= simcity.RolloverItems.oreMapToBinConversion;
    return {
      resource : scrui.TextFromLocaleProperty({
        tableID : simcity.StringID.TableResource,
        stringID : simcity.StringID.Ore
      }),
      units : "0x0e8d4576",
      type : 250106959
    }
  },
  extractedPerDay : function (a, b) {
    return b.resourceDisplay
  }
};
goog.object.extend(simcity.RolloverItems.kBlockResourceMapOre, simcity.RolloverItems.kBlockResourceMap);
simcity.RolloverItems.kBlockResourceMapOil = {
  additionalQueries : function (a) {
    return {
      map : [simcity.kDataMaps, simcity.kMapIDOilReservoir, "unitRegion", a, "A", simcity.kDataConnectedExtractorSum],
      resourceDisplay : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDOilCrudePumpedDisplay]
    }
  },
  getText : function (a, b) {
    a.formatType = simcity.NumberFormat.Barrels;
    a.mapConversion = simcity.RolloverItems.oilMapToBinConversion;
    b.map.amount *= simcity.RolloverItems.oilMapToBinConversion;
    b.map.capacity *= simcity.RolloverItems.oilMapToBinConversion;
    return {
      resource : scrui.TextFromLocaleProperty({
        tableID : simcity.StringID.TableResource,
        stringID : simcity.StringID.Oil
      }),
      units : "0x0e8d4578",
      type : 250106964
    }
  },
  extractedPerDay : function (a, b) {
    return b.resourceDisplay
  }
};
goog.object.extend(simcity.RolloverItems.kBlockResourceMapOil, simcity.RolloverItems.kBlockResourceMap);
simcity.RolloverItems.kBlockResourceMapWater = {
  additionalQueries : function (a) {
    return {
      map : [simcity.kDataMaps, simcity.kMapIDWaterTable, "unitRegion", a, "B", simcity.kDataConnectedExtractorSum],
      WaterRevertedPerHour : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDWaterGlobals_TotalWaterRevertedPerHour],
      WaterReverted : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDWaterGlobals_TotalWaterReverted],
      WaterTrasmittedPerHour : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount,
        simcity.kResourceIDWaterGlobals_TotalWaterTransmittedPerHour],
      WaterTrasmitted : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDWaterGlobals_TotalWaterTransmitted]
    }
  },
  getText : function (a) {
    a.formatType = simcity.NumberFormat.Fluids;
    return {
      resource : scrui.TextFromLocaleProperty({
        tableID : simcity.StringID.TableResource,
        stringID : simcity.StringID.Water
      }),
      units : "0x0e8d4578",
      type : 250106964
    }
  },
  extractedPerDay : function (a, b) {
    var c = simcity.gCategoryQueryDataBindings.WaterCategory.useWaterProductionRatePerPeriod(b.WaterRevertedPerHour,
        b.WaterReverted, b.WaterTrasmittedPerHour, b.WaterTrasmitted);
    return simcity.gCategoryQueryDataBindings.WaterCategory.getWaterProductionRate(c ? b.WaterReverted : b.WaterRevertedPerHour, c ? b.WaterTrasmitted : b.WaterTrasmittedPerHour)
  }
};
goog.object.extend(simcity.RolloverItems.kBlockResourceMapWater, simcity.RolloverItems.kBlockResourceMap);
simcity.RolloverItems.kBlockHoursOfOperation = {
  stringData : {
    tableID : "BuildingRollover.json",
    stringID : "0x0d7f1440",
    placeholder : "kBlockHoursOfOperation"
  },
  layoutPath : "Layouts/Rollovers/RolloverBlockTextCenter.js",
  init : function (a) {
    a.textControl = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemValue)
  },
  update : function (a, b) {
    var c = {
      hoursBegin : 0,
      hoursEnd : 0
    };
    this.getHours && (c = this.getHours(a, b));
    a.textControl.UpdateLocaleText({
      hours_begin : new Date(2E3, 0, 1, c.hoursBegin, 0, 0, 0),
      hours_end : new Date(2E3,
        0, 1, c.hoursEnd, 0, 0, 0)
    })
  }
};
simcity.RolloverItems.kHoursPark = {
  getHours : function () {
    return {
      hoursBegin : 6,
      hoursEnd : 18
    }
  }
};
goog.object.extend(simcity.RolloverItems.kHoursPark, simcity.RolloverItems.kBlockHoursOfOperation);
simcity.RolloverItems.kHoursPark24 = {
  getHours : function () {
    return {
      hoursBegin : 0,
      hoursEnd : 0
    }
  }
};
goog.object.extend(simcity.RolloverItems.kHoursPark24, simcity.RolloverItems.kBlockHoursOfOperation);
simcity.RolloverItems.kStringVisitors = {
  layoutPath : "Layouts/Rollovers/RolloverBlockTextTitle.js",
  init : function (a) {
    a.textControlTitle = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTitle)
  },
  update : function (a) {
    a.textControlTitle.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0ea75dda", "kStringVisitors"))
  }
};
simcity.RolloverItems.kBlockParkVisitorsPerDay = {
  layoutPath : "Layouts/Rollovers/RolloverBlockText3Row2Column.js",
  init : function (a) {
    a.textControlLeft1 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextLeft1);
    a.textControlRight1 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextRight1);
    a.textControlLeft2 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextLeft2);
    a.textControlRight2 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextRight2);
    a.textControlLeft3 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextLeft3);
    a.textControlRight3 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextRight3)
  },
  updateQueries : function (a) {
    var b = {
      homelessDisplay : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDHomelessDisplay],
      localsDisplay : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDParkGlobals_LocalsDisplay],
      kidsDisplay : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount,
        simcity.kResourceIDParkGlobals_KidsDisplay]
    };
    this.additionalQueries && goog.object.extend(b, this.additionalQueries(a));
    return b
  },
  update : function (a, b) {
    var c = 243704418;
    this.updateText && (c = this.updateText(a, b));
    a.textControlLeft1.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0f18e83a", "kBlockParkVisitors"), {
      level : scrui.TextFromLocaleProperty({
        tableID : simcity.StringID.TableBuildingRollover,
        stringID : c
      })
    });
    a.textControlRight1.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json",
        "0x0e6ae894", "kBlockParkVisitors"), {
      amount : b.localsDisplay
    });
    a.textControlLeft2.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0e938326", "kBlockParkVisitors"));
    a.textControlRight2.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0e6ae894", "kBlockParkVisitors"), {
      amount : b.kidsDisplay
    });
    a.textControlLeft3.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0ea75b37", "kBlockParkVisitors"));
    a.textControlRight3.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json",
        "0x0e6ae894", "kBlockParkVisitors"), {
      amount : b.homelessDisplay
    })
  }
};
simcity.RolloverItems.kParkVisitorW1 = {
  additionalQueries : function (a) {
    return {
      VisitorsThisPeriod : [simcity.kDataConnectedUnits, a, simcity.kDataBins, simcity.kResourceIDParkVisitorsW1ThisPeriod],
      VisitorsPerPeriod : [simcity.kDataConnectedUnits, a, simcity.kDataBins, simcity.kResourceIDParkVisitorsW1PerPeriod]
    }
  },
  updateText : function () {
    return 240664736
  }
};
goog.object.extend(simcity.RolloverItems.kParkVisitorW1, simcity.RolloverItems.kBlockParkVisitorsPerDay);
simcity.RolloverItems.kParkVisitorW2 = {
  additionalQueries : function (a) {
    return {
      VisitorsThisPeriod : [simcity.kDataConnectedUnits, a, simcity.kDataBins, simcity.kResourceIDParkVisitorsW2ThisPeriod],
      VisitorsPerPeriod : [simcity.kDataConnectedUnits, a, simcity.kDataBins, simcity.kResourceIDParkVisitorsW2PerPeriod]
    }
  },
  updateText : function () {
    return 240664737
  }
};
goog.object.extend(simcity.RolloverItems.kParkVisitorW2, simcity.RolloverItems.kBlockParkVisitorsPerDay);
simcity.RolloverItems.kParkVisitorW3 = {
  additionalQueries : function (a) {
    return {
      VisitorsThisPeriod : [simcity.kDataConnectedUnits, a, simcity.kDataBins, simcity.kResourceIDParkVisitorsW3ThisPeriod],
      VisitorsPerPeriod : [simcity.kDataConnectedUnits, a, simcity.kDataBins, simcity.kResourceIDParkVisitorsW3PerPeriod]
    }
  },
  updateText : function () {
    return 240664738
  }
};
goog.object.extend(simcity.RolloverItems.kParkVisitorW3, simcity.RolloverItems.kBlockParkVisitorsPerDay);
simcity.RolloverItems.kBlockAirPassenger = {
  layoutPath : "Layouts/Rollovers/RolloverBlockText2Row2Column.js",
  init : function (a) {
    a.textControlLeft1 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextLeft1);
    a.textControlRight1 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextRight1);
    a.textControlLeft2 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextLeft2);
    a.textControlRight2 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextRight2)
  },
  updateQueries : function (a) {
    return {
      Tourists_Daily : ["connectedUnits",
        a, "bins", simcity.kResourceIDTourists_Daily],
      Tourists_Leaving : ["connectedUnits", a, "bins", simcity.kResourceIDTourist_Leaving]
    }
  },
  update : function (a, b) {
    a.textControlLeft1.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0ebdd646", "kBlockCasinoGamblers"));
    a.textControlRight1.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0e6ae894", "kBlockCasinoGamblers"), {
      amount : b.Tourists_Daily.amount
    });
    a.textControlLeft2.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0ebdd647",
        "kBlockCasinoGamblers"));
    a.textControlRight2.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0e6ae893", "kBlockCasinoGamblers"), {
      amount : b.Tourists_Leaving.amount,
      capacity : b.Tourists_Leaving.capacity
    })
  }
};
simcity.RolloverItems.kStringSewageFlow = {
  layoutPath : "Layouts/Rollovers/RolloverBlockTextTitle.js",
  init : function (a) {
    a.textControlTitle = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTitle)
  },
  update : function (a) {
    a.textControlTitle.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0f1a3577", "kStringSewageFlow"))
  }
};
simcity.RolloverItems.kStringSewageProcessed = {
  layoutPath : "Layouts/Rollovers/RolloverBlockTextTitle.js",
  update : function (a) {
    a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTitle).SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0ec2107d", "kStringSewageProcessed"))
  }
};
simcity.RolloverItems.kSewageConsumerRate = {
  stringData : {
    tableID : "BuildingRollover.json",
    stringID : "0x0e55e2e9",
    placeholder : "kSewageConsumerRate"
  },
  iconPath : "Graphics/Icons/TradeIcons/icn-trade-sewage.png",
  layoutPath : "Layouts/Rollovers/RolloverItemMultiColorMeterAndText.js",
  init : function (a) {
    a.textControl = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemValue);
    a.meterBacking = a.layout.FindControlByID(simcity.cRolloverUI.kWinIDRolloverItemMeterBacking);
    a.meterFillbar = a.layout.FindControlByID(simcity.cRolloverUI.kWinIDRolloverItemMeterFillBar);
    a.meterGreenFillBar = a.layout.FindControlByID(simcity.cRolloverUI.kWinIDRolloverItemGreenMeterFillBar);
    a.meterYellowFillBar = a.layout.FindControlByID(simcity.cRolloverUI.kWinIDRolloverItemYellowMeterFillBar);
    a.meterRedFillBar = a.layout.FindControlByID(simcity.cRolloverUI.kWinIDRolloverItemRedMeterFillBar)
  },
  updateQueries : function (a) {
    return {
      SewageMainStorage : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDSewageMainStorage],
      SewageTreatmentCapacityPerDay : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount,
        simcity.kResourceIDSewageTreatment_Capacity],
      SewageProcessed : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDSewageProcessedDisplay]
    }
  },
  update : function (a, b) {
    var c = b.SewageProcessed,
    d = b.SewageTreatmentCapacityPerDay / 24 + 3 * b.SewageMainStorage.capacity,
    e = simcity.FormatLargeNumberForFluid(c),
    f = simcity.FormatLargeNumberForFluid(d);
    a.textControl.UpdateLocaleText({
      SewageMainStorage : e.number,
      SewageMainStorageCapacity : f.number,
      exponent : f.exponent
    });
    c /= d;
    a.meterGreenFillBar.SetVisibility(!1);
    a.meterYellowFillBar.SetVisibility(!1);
    a.meterRedFillBar.SetVisibility(!1);
    a.meterFillbar.SetWidth(a.meterBacking.mWidth * c);
    0.5 > c ? a.meterGreenFillBar.SetVisibility(!0) : 0.75 > c ? a.meterYellowFillBar.SetVisibility(!0) : a.meterRedFillBar.SetVisibility(!0)
  }
};
simcity.RolloverItems.kSewageTreatment = {
  layoutPath : "Layouts/Rollovers/RolloverBlockText1Row2Column.js",
  init : function (a) {
    a.textControlLeft1 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextLeft1);
    a.textControlRight1 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextRight1)
  },
  updateQueries : function (a) {
    return {
      treated : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDSewageTreatedDisplay],
      processed : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount,
        simcity.kResourceIDSewageProcessedDisplay]
    }
  },
  update : function (a, b) {
    var c = 0;
    0 < b.processed && (c = b.treated / b.processed, c = Math.max(0, Math.min(1, c)));
    a.textControlLeft1.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0ec21a4b", "kWaterProducerInfo"));
    a.textControlRight1.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0ec4958a", "kWaterProducerInfo"), {
      amount : c
    })
  }
};
simcity.RolloverItems.kVehicle = {
  stringData : {
    tableID : "BuildingRollover.json",
    stringID : "0x0ec5fd3e",
    placeholder : "kVehicle"
  },
  layoutPath : "Layouts/Rollovers/RolloverItemNormalTextCenter.js",
  init : function (a) {
    a.textControl = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemValue)
  },
  updateQueries : function (a) {
    var b = {};
    this.additionalQueries && goog.object.extend(b, this.additionalQueries(a));
    return b
  },
  update : function (a, b) {
    var c = "kVehicle";
    this.getInfo && (c = this.getInfo(a, b));
    a.textControl.UpdateLocaleText({
      string : c,
      amount : b.vehicle.capacity ? b.vehicle.capacity : 0
    })
  }
};
simcity.RolloverItems.kVehiclePolice = {
  additionalQueries : function (a) {
    return {
      vehicle : [simcity.kDataConnectedUnits, a, simcity.kDataBins, simcity.kResourceIDPolice]
    }
  },
  getInfo : function () {
    return scrui.TextFromLocaleProperty({
      tableID : simcity.StringID.TableBuildingRollover,
      stringID : 247856470
    })
  }
};
goog.object.extend(simcity.RolloverItems.kVehiclePolice, simcity.RolloverItems.kVehicle);
simcity.RolloverItems.kVehiclePolice_Unconnected = {
  additionalQueries : function (a) {
    return {
      vehicle : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDPolice]
    }
  },
  getInfo : function () {
    return scrui.TextFromLocaleProperty({
      tableID : simcity.StringID.TableBuildingRollover,
      stringID : 247856470
    })
  }
};
goog.object.extend(simcity.RolloverItems.kVehiclePolice_Unconnected, simcity.RolloverItems.kVehicle);
simcity.RolloverItems.kVehiclePoliceHelicopter = {
  additionalQueries : function (a) {
    return {
      vehicle : [simcity.kDataConnectedUnits, a, simcity.kDataBins, simcity.kResourceIDPoliceHelicopter]
    }
  },
  getInfo : function () {
    return scrui.TextFromLocaleProperty({
      tableID : simcity.StringID.TableBuildingRollover,
      stringID : 247860048
    })
  }
};
goog.object.extend(simcity.RolloverItems.kVehiclePoliceHelicopter, simcity.RolloverItems.kVehicle);
simcity.RolloverItems.kVehiclePoliceDetectiveVan = {
  additionalQueries : function (a) {
    return {
      vehicleSpot : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDPoliceDetectiveVan],
      vehicleParking : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDPoliceDetectiveVan_Parking]
    }
  },
  getInfo : function (a, b) {
    b.vehicle = {
      amount : 0,
      capacity : b.vehicleSpot.amount + b.vehicleParking.amount
    };
    return scrui.TextFromLocaleProperty({
      tableID : simcity.StringID.TableBuildingRollover,
      stringID : 247860049
    })
  }
};
goog.object.extend(simcity.RolloverItems.kVehiclePoliceDetectiveVan, simcity.RolloverItems.kVehicle);
simcity.RolloverItems.kVehiclePoliceDetectiveVan_Unconnected = {
  additionalQueries : function (a) {
    return {
      vehicle : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDPoliceDetectiveVan]
    }
  },
  getInfo : function () {
    return scrui.TextFromLocaleProperty({
      tableID : simcity.StringID.TableBuildingRollover,
      stringID : 247860049
    })
  }
};
goog.object.extend(simcity.RolloverItems.kVehiclePoliceDetectiveVan_Unconnected, simcity.RolloverItems.kVehicle);
simcity.RolloverItems.kVehiclePoliceOutreachVan = {
  additionalQueries : function (a) {
    return {
      vehicleSpot : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDPoliceOutreachVan],
      vehicleParking : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDPoliceOutreachVan_Parking]
    }
  },
  getInfo : function (a, b) {
    b.vehicle = {
      amount : 0,
      capacity : b.vehicleSpot.amount + b.vehicleParking.amount
    };
    return scrui.TextFromLocaleProperty({
      tableID : simcity.StringID.TableBuildingRollover,
      stringID : 250794397
    })
  }
};
goog.object.extend(simcity.RolloverItems.kVehiclePoliceOutreachVan, simcity.RolloverItems.kVehicle);
simcity.RolloverItems.kVehiclePoliceOutreachVan_Unconnected = {
  additionalQueries : function (a) {
    return {
      vehicle : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDPoliceOutreachVan]
    }
  },
  getInfo : function () {
    return scrui.TextFromLocaleProperty({
      tableID : simcity.StringID.TableBuildingRollover,
      stringID : 250794397
    })
  }
};
goog.object.extend(simcity.RolloverItems.kVehiclePoliceOutreachVan_Unconnected, simcity.RolloverItems.kVehicle);
simcity.RolloverItems.kVehicleFireT1 = {
  additionalQueries : function (a) {
    return {
      vehicle : [simcity.kDataConnectedUnits, a, simcity.kDataBins, simcity.kResourceIDFireTruckT1]
    }
  },
  getInfo : function () {
    return scrui.TextFromLocaleProperty({
      tableID : simcity.StringID.TableBuildingRollover,
      stringID : 247858827
    })
  }
};
goog.object.extend(simcity.RolloverItems.kVehicleFireT1, simcity.RolloverItems.kVehicle);
simcity.RolloverItems.kVehicleFireT1_Unconnected = {
  additionalQueries : function (a) {
    return {
      vehicle : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDFireTruckT1]
    }
  },
  getInfo : function () {
    return scrui.TextFromLocaleProperty({
      tableID : simcity.StringID.TableBuildingRollover,
      stringID : 247858827
    })
  }
};
goog.object.extend(simcity.RolloverItems.kVehicleFireT1_Unconnected, simcity.RolloverItems.kVehicle);
simcity.RolloverItems.kVehicleFireT2 = {
  additionalQueries : function (a) {
    return {
      vehicle : [simcity.kDataConnectedUnits, a, simcity.kDataBins, simcity.kResourceIDFireTruckT2]
    }
  },
  getInfo : function () {
    return scrui.TextFromLocaleProperty({
      tableID : simcity.StringID.TableBuildingRollover,
      stringID : 247858827
    })
  }
};
goog.object.extend(simcity.RolloverItems.kVehicleFireT2, simcity.RolloverItems.kVehicle);
simcity.RolloverItems.kVehicleFireT2_Unconnected = {
  additionalQueries : function (a) {
    return {
      vehicle : [simcity.kDataConnectedUnits, a, simcity.kDataBins, simcity.kResourceIDFireTruckT2]
    }
  },
  getInfo : function () {
    return scrui.TextFromLocaleProperty({
      tableID : simcity.StringID.TableBuildingRollover,
      stringID : 247858827
    })
  }
};
goog.object.extend(simcity.RolloverItems.kVehicleFireT2_Unconnected, simcity.RolloverItems.kVehicle);
simcity.RolloverItems.kVehicleFireHazmat = {
  additionalQueries : function (a) {
    return {
      vehicle : [simcity.kDataConnectedUnits, a, simcity.kDataBins, simcity.kResourceIDHazMatTruck]
    }
  },
  getInfo : function () {
    return scrui.TextFromLocaleProperty({
      tableID : simcity.StringID.TableBuildingRollover,
      stringID : 247859195
    })
  }
};
goog.object.extend(simcity.RolloverItems.kVehicleFireHazmat, simcity.RolloverItems.kVehicle);
simcity.RolloverItems.kVehicleFireHelicopter = {
  additionalQueries : function (a) {
    return {
      vehicle : [simcity.kDataConnectedUnits, a, simcity.kDataBins, simcity.kResourceIDFireHelicopter]
    }
  },
  getInfo : function () {
    return scrui.TextFromLocaleProperty({
      tableID : simcity.StringID.TableBuildingRollover,
      stringID : 247860060
    })
  }
};
goog.object.extend(simcity.RolloverItems.kVehicleFireHelicopter, simcity.RolloverItems.kVehicle);
simcity.RolloverItems.kVehicleFireMarshal = {
  additionalQueries : function (a) {
    return {
      vehicle : [simcity.kDataConnectedUnits, a, simcity.kDataBins, simcity.kResourceIDFireInspector]
    }
  },
  getInfo : function () {
    return scrui.TextFromLocaleProperty({
      tableID : simcity.StringID.TableBuildingRollover,
      stringID : 250699125
    })
  }
};
goog.object.extend(simcity.RolloverItems.kVehicleFireMarshal, simcity.RolloverItems.kVehicle);
simcity.RolloverItems.kVehicleHealthAmbulance = {
  additionalQueries : function (a) {
    return {
      vehicle : [simcity.kDataConnectedUnits, a, simcity.kDataBins, simcity.kResourceIDAmbulance]
    }
  },
  getInfo : function () {
    return scrui.TextFromLocaleProperty({
      tableID : simcity.StringID.TableBuildingRollover,
      stringID : 247862566
    })
  }
};
goog.object.extend(simcity.RolloverItems.kVehicleHealthAmbulance, simcity.RolloverItems.kVehicle);
simcity.RolloverItems.kVehicleHealthAmbulance_Unconnected = {
  additionalQueries : function (a) {
    return {
      vehicle : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDAmbulance]
    }
  },
  getInfo : function () {
    return scrui.TextFromLocaleProperty({
      tableID : simcity.StringID.TableBuildingRollover,
      stringID : 247862566
    })
  }
};
goog.object.extend(simcity.RolloverItems.kVehicleHealthAmbulance_Unconnected, simcity.RolloverItems.kVehicle);
simcity.RolloverItems.kVehicleWellnessVan = {
  additionalQueries : function (a) {
    return {
      vehicle : [simcity.kDataConnectedUnits, a, simcity.kDataBins, simcity.kResourceIDCommunityOutreachVan]
    }
  },
  getInfo : function () {
    return scrui.TextFromLocaleProperty({
      tableID : simcity.StringID.TableBuildingRollover,
      stringID : 250699559
    })
  }
};
goog.object.extend(simcity.RolloverItems.kVehicleWellnessVan, simcity.RolloverItems.kVehicle);
simcity.RolloverItems.kVehicleBusT1 = {
  additionalQueries : function (a) {
    return {
      vehicle : [simcity.kDataConnectedUnits, a, simcity.kDataBins, simcity.kResourceIDBusT1]
    }
  },
  getInfo : function () {
    return scrui.TextFromLocaleProperty({
      tableID : simcity.StringID.TableBuildingRollover,
      stringID : 247862837
    })
  }
};
goog.object.extend(simcity.RolloverItems.kVehicleBusT1, simcity.RolloverItems.kVehicle);
simcity.RolloverItems.kVehicleBusT2 = {
  additionalQueries : function (a) {
    return {
      vehicle : [simcity.kDataConnectedUnits, a, simcity.kDataBins, simcity.kResourceIDBusT2]
    }
  },
  getInfo : function () {
    return scrui.TextFromLocaleProperty({
      tableID : simcity.StringID.TableBuildingRollover,
      stringID : 247862838
    })
  }
};
goog.object.extend(simcity.RolloverItems.kVehicleBusT2, simcity.RolloverItems.kVehicle);
simcity.RolloverItems.kVehicleSchoolBus = {
  additionalQueries : function (a) {
    return {
      vehicle : [simcity.kDataConnectedUnits, a, simcity.kDataBins, simcity.kResourceIDSchoolBus]
    }
  },
  getInfo : function () {
    return scrui.TextFromLocaleProperty({
      tableID : simcity.StringID.TableBuildingRollover,
      stringID : 247862836
    })
  }
};
goog.object.extend(simcity.RolloverItems.kVehicleSchoolBus, simcity.RolloverItems.kVehicle);
simcity.RolloverItems.kVehicleLightRail = {
  additionalQueries : function (a) {
    return {
      vehicle : [simcity.kDataConnectedUnits, a, simcity.kDataBins, simcity.kResourceIDLightTrainT1]
    }
  },
  getInfo : function () {
    return scrui.TextFromLocaleProperty({
      tableID : simcity.StringID.TableBuildingRollover,
      stringID : 247862944
    })
  }
};
goog.object.extend(simcity.RolloverItems.kVehicleLightRail, simcity.RolloverItems.kVehicle);
simcity.RolloverItems.kVehicleLightRail_Unconnected = {
  additionalQueries : function (a) {
    return {
      vehicle : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDLightTrainT1]
    }
  },
  getInfo : function () {
    return scrui.TextFromLocaleProperty({
      tableID : simcity.StringID.TableBuildingRollover,
      stringID : 247862944
    })
  }
};
goog.object.extend(simcity.RolloverItems.kVehicleLightRail_Unconnected, simcity.RolloverItems.kVehicle);
simcity.RolloverItems.kVehicleGarbage = {
  additionalQueries : function (a) {
    return {
      vehicle : [simcity.kDataConnectedUnits, a, simcity.kDataBins, simcity.kResourceIDGarbageTruck]
    }
  },
  getInfo : function () {
    return scrui.TextFromLocaleProperty({
      tableID : simcity.StringID.TableBuildingRollover,
      stringID : 247862945
    })
  }
};
goog.object.extend(simcity.RolloverItems.kVehicleGarbage, simcity.RolloverItems.kVehicle);
simcity.RolloverItems.kVehicleRecyclingCollection = {
  additionalQueries : function (a) {
    return {
      vehicle : [simcity.kDataConnectedUnits, a, simcity.kDataBins, simcity.kResourceIDRecyclingTruck]
    }
  },
  getInfo : function () {
    return scrui.TextFromLocaleProperty({
      tableID : simcity.StringID.TableBuildingRollover,
      stringID : 247862946
    })
  }
};
goog.object.extend(simcity.RolloverItems.kVehicleRecyclingCollection, simcity.RolloverItems.kVehicle);
simcity.RolloverItems.kVehicleDelivery = {
  additionalQueries : function (a) {
    return {
      vehicle : [simcity.kDataConnectedUnits, a, simcity.kDataBins, simcity.kResourceIDManufacturingTruck]
    }
  },
  getInfo : function () {
    return scrui.TextFromLocaleProperty({
      tableID : simcity.StringID.TableBuildingRollover,
      stringID : 247862947
    })
  }
};
goog.object.extend(simcity.RolloverItems.kVehicleDelivery, simcity.RolloverItems.kVehicle);
simcity.RenderUnitFeedbackText = function (a, b, c, d, e, f, g, h, i, j, k) {
  var l = h ? j.normalRollover : j.vacantRollover;
  j.normalRollover.SetVisibility(h);
  j.vacantRollover.SetVisibility(!h);
  var j = l.FindControlByID(222285689),
  m = simcity.RolloverItems.textColorNormal;
  switch (g) {
  case 2:
    m = simcity.RolloverItems.textColorWarning;
    break;
  case 1:
  case 0:
    m = simcity.RolloverItems.textColorUrgent;
    break;
  default:
    m = simcity.RolloverItems.textColorNormal
  }
  var n = 0,
  p = 0,
  q = !1;
  0 < c.length && (c = simcity.RolloverTextSortByUrgency(c), 0 < c[0][0] &&
    (n = c[0][1], p = c[0][2], m = simcity.RolloverItems.textColorUrgent, q = !0));
  0 == n && 0 < d.length && (d = simcity.RolloverTextSortByUrgency(d), 0 < d[0][0] && (n = d[0][1], p = d[0][2], m = simcity.RolloverItems.textColorWarning, q = !0));
  h && 0 == n && 0 < e.length && (e = simcity.RolloverTextSortByUrgency(e), 0 < e[0][0] && (n = e[0][1], p = e[0][2], m = simcity.RolloverItems.textColorNormal));
  0 == n && (2 != b.length ? (scrui.Assert(!1, "  Unit : " + k.unitName.placeholder + " - normalText with abnormal length.\nPlease tell Isaac\n\nThis message can be safely ignored"),
      n = b) : (n = b[0], p = b[1]));
  0 == p && (p = k.AudioRollOverOnEvent);
  j.SetTextColor(m);
  i ? (q ? h || j.SetTextColor(simcity.RolloverItems.textColorUrgent) : j.SetTextColor(simcity.RolloverItems.textColorNormal), j.SetLocaleText(new scrui.cLocaleString(a, n[0], "RenderUnitFeedbackText")), simcity.audio.mQueueQuerySoundEvent && simcity.gRolloverManager.mRolloverUI.mShowingExtendedItems && simcity.SetAudioQueryOverridedID(p)) : h ? (j.SetLocaleText(new scrui.cLocaleString(a, n[Math.max(0, n.length - 2 - g)], "RenderUnitFeedbackText")), simcity.audio.mQueueQuerySoundEvent &&
    simcity.gRolloverManager.mRolloverUI.mShowingExtendedItems && simcity.SetAudioQueryOverridedID(p)) : (q ? j.SetTextColor(simcity.RolloverItems.textColorUrgent) : (j.SetTextColor(simcity.RolloverItems.textColorNormal), simcity.audio.mQueueQuerySoundEvent && simcity.gRolloverManager.mRolloverUI.mShowingExtendedItems && simcity.SetAudioQueryOverridedID(k.vacant ? simcity.audio.kQueryOverride_Vacant : k.AudioRollOverOnEvent)), j.SetLocaleText(new scrui.cLocaleString(a, n[n.length - 1], "RenderUnitFeedbackText")));
  f && j.UpdateLocaleText(f);
  j.SetVisibility(!0);
  a = j.GetTextHeight() + 5;
  a = Math.max(a, j.mHeight);
  j.SetPosition(j.mLeft, j.mTop, j.mWidth, a);
  (b = l.FindControlByID(216753760)) && b.SetPosition(b.mLeft, b.mTop, b.mWidth, a);
  l.SetPosition(l.mLeft, l.mTop, l.mWidth, a);
  (l = l.mParentControl) && l.SetPosition(l.mLeft, l.mTop, l.mWidth, a);
  simcity.audio.mQueueQuerySoundEvent && simcity.gRolloverManager.mRolloverUI.mCurrentUnitRef.slot == simcity.audio.queryMsg.mSlot && (simcity.PlayUnitQueryEvent(simcity.audio.queryMsg.mObjectID, simcity.audio.queryMsg.mEventID,
      simcity.audio.queryMsg.mSlot), simcity.ClearQueuedAudioQueryEvent());
  simcity.audio.mQueueQuerySoundEvent = 0
};
simcity.RolloverTextSortByUrgency = function (a) {
  0 < a.length && a.sort(function (a, c) {
    return a[0] < c[0] ? 1 : a[0] > c[0] ? -1 : 0
  });
  return a
};
simcity.RolloverItems.RolloverText = {
  initQueriesRolloverDefault : function (a) {
    return {
      happinessDisplay : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDHappinessDisplay],
      vacant : [simcity.kDataUnits, a, simcity.kDataFlags, simcity.kUnitFlagVacant],
      normal : [simcity.kDataUnits, a, simcity.kDataFlags, simcity.kUnitFlagNormal],
      abandoned : [simcity.kDataUnits, a, simcity.kDataFlags, simcity.kUnitFlagAbandoned],
      wealth : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDWealth]
    }
  },
  initQueriesNormal : function (a) {
    return {
      density : [simcity.kDataUnits,
        a, simcity.kDataBins, simcity.kResourceIDDensity]
    }
  },
  getNormal : function (a, b) {
    var c = ["0x0e5c7fd6 0x0d434f9d 0x0d434f9e 0x0d434f9f 0x0d434fa0 0x0d434fa1 0x0d434fa2".split(" "), 0];
    b.density.amount == b.density.capacity && (c[0][0] = "0x0d434fa3");
    return c
  },
  initQueriesWork : function (a) {
    return {
      continuousWorkPlace : [simcity.kDataUnits, a, simcity.kDataFlags, simcity.kUnitFlagIDContinuousWorkplace],
      normal : [simcity.kDataUnits, a, simcity.kDataFlags, simcity.kUnitFlagNormal],
      shiftLength : [simcity.kDataUnits, a, simcity.kDataBins,
        simcity.kResourceIDShiftLength],
      activeBuilding : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDActiveBuilding],
      workersNeeded : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDWorkersNeeded],
      sadnessNeededWorkers : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDSadnessFromNotEnoughWorkers],
      alerts : [simcity.kDataUnits, a, simcity.kDataRolloverAlertInfo]
    }
  },
  isClosedForTheDay : function (a, b) {
    return b.normal && 0 == b.shiftLength.amount && 0 == b.activeBuilding.amount && !b.continuousWorkPlace ?
    !0 : !1
  },
  getClosedForTheDay : function () {
    return ["0x0dd60f10 0x0dd60f11 0x0dd60f12 0x0dd60f13 0x0dd60f14 0x0dd60f15".split(" "), simcity.audio.kQueryOverride_ClosedToShoppers]
  },
  getWork : function (a, b) {
    var c = [];
    b.normal && (0 < b.shiftLength.amount && b.workersNeeded.amount != b.workersNeeded.capacity) && (c = [[1, "0x0d4369d2 0x0d4369d3 0x0d4369d4 0x0d4369d5 0x0d4369d6 0x0d4369d7".split(" "), simcity.audio.kQueryOverride_ClosedToShoppers]]);
    return c
  },
  getWorkSadness : function (a, b) {
    var c = [];
    if (!b.normal || !(0 < b.shiftLength.amount &&
        b.workersNeeded.amount != b.workersNeeded.capacity))
      0 < b.sadnessNeededWorkers && (c = [[b.sadnessNeededWorkers, "0x0ec5e740 0x0ec5e741 0x0ec5e742 0x0ec5e743 0x0ec5e744 0x0d4369d7".split(" "), 0]]);
    return c
  },
  initQueriesHappinessShopping : function (a) {
    return {
      happyShop : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDHappinessFromShop],
      money : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDMoneyToken],
      shoppingToken : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDShoppingToken]
    }
  },
  getHappinessShopping : function (a, b) {
    return !this.isFullOnShoppersWithMoney(a, b) && 0 < b.happyShop ? [[b.happyShop, "0x0e9cffc1 0x0e9cffc1 0x0e9cffc2 0x0e9cffc3 0x0e9cffc4 0x0e9cffc5 0x0e9cffc6".split(" "), 0]] : []
  },
  initQueriesHappinessParks : function (a) {
    return {
      happyPark : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDHappinessFromPark]
    }
  },
  getHappinessParks : function (a, b) {
    return [[b.happyPark, "0x0e9cff91 0x0e9cff91 0x0e9cff92 0x0e9cff93 0x0e9cff94 0x0e9cff95 0x0e9cff96".split(" "), 0]]
  },
  currentlyHappyTaxes : function (a,
    b, c, d, e) {
    switch (b.wealth) {
    case 1:
      if (b.taxLevelW1 <= c)
        return !0;
      break;
    case 2:
      if (b.taxLevelW2 <= d)
        return !0;
      break;
    case 3:
      if (b.taxLevelW3 <= e)
        return !0
    }
    return !1
  },
  getHappinessTaxesText : function (a, b) {
    return 0 < a.happyTaxes && 0 == a.sadnessTaxes ? b ? [[a.happyTaxes, "0x0e9cfdf7 0x0e9cfdf8 0x0e9cfdf9 0x0e9cfdfa 0x0e9cfdfb 0x0e9cfdfb 0x0e9cfdfc".split(" "), 0]] : [[a.happyTaxes, "0x0e9cfef7 0x0e9cfef8 0x0e9cfef9 0x0e9cfefa 0x0e9cfefb 0x0e9cfefb 0x0e9cfefc".split(" "), 0]] : []
  },
  initQueriesHappinessRTaxes : function (a) {
    return {
      sadnessTaxes : [simcity.kDataUnits,
        a, simcity.kDataBinAmount, simcity.kResourceIDSadnessFromTaxes],
      happyTaxes : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDHappinessFromTaxes],
      wealth : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDWealth],
      taxLevelW1 : [simcity.kDataBinAmount, simcity.kResourceIDTaxLevelRW1],
      taxLevelW2 : [simcity.kDataBinAmount, simcity.kResourceIDTaxLevelRW2],
      taxLevelW3 : [simcity.kDataBinAmount, simcity.kResourceIDTaxLevelRW3]
    }
  },
  getHappinessRTaxes : function (a, b) {
    var c = this.currentlyHappyTaxes(a,
        b, simcity.SimTuning.happinessTaxLevelRW1, simcity.SimTuning.happinessTaxLevelRW2, simcity.SimTuning.happinessTaxLevelRW3);
    return this.getHappinessTaxesText(b, c)
  },
  initQueriesHappinessCTaxes : function (a) {
    return {
      sadnessTaxes : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDSadnessFromTaxes],
      happyTaxes : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDHappinessFromTaxes],
      wealth : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDWealth],
      taxLevelW1 : [simcity.kDataBinAmount,
        simcity.kResourceIDTaxLevelCW1],
      taxLevelW2 : [simcity.kDataBinAmount, simcity.kResourceIDTaxLevelCW2],
      taxLevelW3 : [simcity.kDataBinAmount, simcity.kResourceIDTaxLevelCW3]
    }
  },
  getHappinessCTaxes : function (a, b) {
    var c = this.currentlyHappyTaxes(a, b, simcity.SimTuning.happinessTaxLevelCW1, simcity.SimTuning.happinessTaxLevelCW2, simcity.SimTuning.happinessTaxLevelCW3);
    return this.getHappinessTaxesText(b, c)
  },
  initQueriesHappinessITaxes : function (a) {
    return {
      sadnessTaxes : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDSadnessFromTaxes],
      happyTaxes : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDHappinessFromTaxes],
      wealth : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDWealth],
      taxLevelW1 : [simcity.kDataBinAmount, simcity.kResourceIDTaxLevelIW1],
      taxLevelW2 : [simcity.kDataBinAmount, simcity.kResourceIDTaxLevelIW2],
      taxLevelW3 : [simcity.kDataBinAmount, simcity.kResourceIDTaxLevelIW3]
    }
  },
  getHappinessITaxes : function (a, b) {
    var c = this.currentlyHappyTaxes(a, b, simcity.SimTuning.happinessTaxLevelIW1, simcity.SimTuning.happinessTaxLevelIW2,
        simcity.SimTuning.happinessTaxLevelIW3);
    return this.getHappinessTaxesText(b, c)
  },
  initQueriesHappinessHealth : function (a) {
    return {
      happyHealth : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDHappinessFromHealthOutreach]
    }
  },
  getHappinessHealth : function (a, b) {
    return [[b.happyHealth, "0x0eb1fde1 0x0eb1fde1 0x0eb1fde2 0x0eb1fde3 0x0eb1fde4 0x0eb1fde5 0x0eb1fde6".split(" "), 0]]
  },
  initQueriesHappinessPolice : function (a) {
    return {
      happyPolice : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDHappinessFromPoliceOutreach]
    }
  },
  getHappinessPolice : function (a, b) {
    return [[b.happyPolice, "0x0eb1fd01 0x0eb1fd01 0x0eb1fd02 0x0eb1fd03 0x0eb1fd04 0x0eb1fd05 0x0eb1fd06".split(" "), 0]]
  },
  initQueriesHappinessCrimeSuppression : function (a) {
    return {
      happyCrimeSuppression : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDHappinessFromCrimeSuppression]
    }
  },
  getHappinessCrimeSuppression : function (a, b) {
    return [[b.happyCrimeSuppression, "0x0eb1fd11 0x0eb1fd11 0x0eb1fd12 0x0eb1fd13 0x0eb1fd14 0x0eb1fd15 0x0eb1fd16".split(" "), 0]]
  },
  initQueriesHappinessFireMarshal : function (a) {
    return {
      happyFireMarshal : [simcity.kDataUnits,
        a, simcity.kDataBinAmount, simcity.kResourceIDHappinessFromFireInspector]
    }
  },
  getHappinessFireMarshal : function (a, b) {
    return [[b.happyFireMarshal, "0x0eb1fd21 0x0eb1fd21 0x0eb1fd22 0x0eb1fd23 0x0eb1fd24 0x0eb1fd25 0x0eb1fd26".split(" "), 0]]
  },
  initQueriesHappinessCustomer : function (a) {
    return {
      happyCustomer : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDHappinessFromCustomers]
    }
  },
  getHappinessCustomer : function (a, b) {
    return [[b.happyCustomer, "0x0eb21961 0x0eb21961 0x0eb21962 0x0eb21963 0x0eb21964 0x0eb21965 0x0eb21966".split(" "),
        0]]
  },
  initQueriesHappinessCustomerStudent : function (a) {
    return {
      happyCustomerStudent : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDHappinessFromStudentCustomers]
    }
  },
  getHappinessCustomerStudent : function (a, b) {
    return [[b.happyCustomerStudent, "0x0eb21901 0x0eb21901 0x0eb21902 0x0eb21903 0x0eb21904 0x0eb21905 0x0eb21906".split(" "), 0]]
  },
  initQueriesHappinessCustomerTourist : function (a) {
    return {
      happyCustomerTourist : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDHappinessFromTouristCustomers]
    }
  },
  getHappinessCustomerTourist : function (a, b) {
    return [[b.happyCustomerTourist, "0x0eb21911 0x0eb21911 0x0eb21912 0x0eb21913 0x0eb21914 0x0eb21915 0x0eb21916".split(" "), 0]]
  },
  initQueriesHappinessShipment : function (a) {
    return {
      normal : [simcity.kDataUnits, a, simcity.kDataFlags, simcity.kUnitFlagNormal],
      norent : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDSadnessFromNoRent],
      nosales : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDSadnessFromNotEnoughSales],
      happinessDisplay : [simcity.kDataUnits,
        a, simcity.kDataBinAmount, simcity.kResourceIDHappinessDisplay],
      chance25Percent : [simcity.kDataUnits, a, simcity.kDataFlags, simcity.kUnitFlagChance25Percent],
      happyShipments : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDHappinessFromShipments]
    }
  },
  getHappinessShipments : function (a, b) {
    return this.currentlySadFromSales(a, b) || b.chance25Percent ? [] : [[b.happyShipments, "0x0e9cffb1 0x0e9cffb1 0x0e9cffb2 0x0e9cffb3 0x0e9cffb4 0x0e9cffb5 0x0e9cffb6".split(" "), 0]]
  },
  initQueriesUrgentBasic : function (a) {
    return {
      onfireflag : [simcity.kDataUnits,
        a, simcity.kDataFlags, simcity.kUnitFlagIsOnFire],
      unpowered : [simcity.kDataUnits, a, simcity.kDataFlags, simcity.kUnitFlagUnpowered],
      unwatered : [simcity.kDataUnits, a, simcity.kDataFlags, simcity.kUnitFlagUnwatered]
    }
  },
  getUrgentBasic : function (a, b) {
    return [[b.onfireflag, "0x0d47a5c4 0x0d47a5c5 0x0d47a5c6 0x0d47a5c7 0x0d47a5c8 0x0d47a5c9".split(" "), simcity.audio.kQueryOverride_IsBurning], [b.unpowered, "0x0d4280c0 0x0d4280c1 0x0d4280c2 0x0d4280c3 0x0d4280c4 0x0d4280c5".split(" "), simcity.audio.kQueryOverride_UnPowered],
      [b.unwatered, "0x0d4280c6 0x0d4280c7 0x0d4280c8 0x0d4280c9 0x0d4280ca 0x0d4280cb".split(" "), simcity.audio.kQueryOverride_UnWatered]]
  },
  initQueriesUrgentResidential : function (a) {
    return {
      plague : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDPlague],
      zombies : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDZombies],
      zombieDestroy : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDDestroyedByZombie]
    }
  },
  getUrgentResidential : function (a, b) {
    return [[0 !== b.zombies.amount, "0x0df06c2c 0x0df06c2d 0x0df06c2e 0x0df06c2f 0x0df06c30 0x0df06c31".split(" "),
        simcity.audio.kQueryOverride_ZombieTarget], [0 !== b.plague.amount, "0x0db7ab81 0x0db7ab82 0x0db7ab83 0x0db7ab84 0x0db7ab85 0x0db7ab87".split(" "), simcity.audio.kQueryOverride_Plague]]
  },
  initQueriesSadnessBasic : function (a) {
    return {
      unpowered : [simcity.kDataUnits, a, simcity.kDataFlags, simcity.kUnitFlagUnpowered],
      unwatered : [simcity.kDataUnits, a, simcity.kDataFlags, simcity.kUnitFlagUnwatered],
      norent : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDSadnessFromNoRent],
      power : [simcity.kDataUnits, a,
        simcity.kDataBins, simcity.kResourceIDSadnessFromNoPower],
      water : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDSadnessFromNoWater]
    }
  },
  getSadnessBasic : function (a, b) {
    return [[b.unpowered ? 0 : b.power.amount, "0x0ea128e0 0x0ea128e1 0x0ea128e2 0x0ea128e3 0x0ea128e4 0x0ea128e5".split(" "), 0], [b.unwatered ? 0 : b.water.amount, "0x0ea1fb90 0x0ea1fb91 0x0ea1fb92 0x0ea1fb93 0x0ea1fb94 0x0ea1fb95".split(" "), 0], [b.norent, "0x0d4280b4 0x0d4280b5 0x0d4280b6 0x0d4280b7 0x0d4280b8 0x0d4280b9".split(" "), 0]]
  },
  initQueriesShopping : function (a) {
    return {
      money : [simcity.kDataUnits,
        a, simcity.kDataBinAmount, simcity.kResourceIDMoneyToken],
      shoppingToken : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDShoppingToken]
    }
  },
  isFullOnShoppersWithMoney : function (a, b) {
    if (b.shoppingToken.amount == b.shoppingToken.capacity && 0 < b.money)
      return !0
  },
  getShopping : function (a, b) {
    return this.isFullOnShoppersWithMoney(a, b) ? [[1, "0x0ea64ab0 0x0ea64ab1 0x0ea64ab2 0x0ea64ab3 0x0ea64ab4 0x0ea64ab5".split(" "), 0]] : []
  },
  initQueriesFire : function (a) {
    return {
      onfireflag : [simcity.kDataUnits, a, simcity.kDataFlags,
        simcity.kUnitFlagIsOnFire],
      fireLevel : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDFireLevel]
    }
  },
  getFire : function (a, b) {
    return !b.onfireflag && 0 < b.fireLevel ? [[1E3, "0x0d47a5c4 0x0d47a5c5 0x0d47a5c6 0x0d47a5c7 0x0d47a5c8 0x0d47a5c9".split(" "), simcity.audio.kQueryOverride_IsBurning]] : []
  },
  initQueriesDeath : function (a) {
    return {
      death : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDSadnessFromDeath]
    }
  },
  getDeath : function (a, b) {
    return [[b.death.amount, "0x0eab8ec0 0x0eab8ec1 0x0eab8ec2 0x0eab8ec3 0x0eab8ec4 0x0eab8ec5".split(" "),
        simcity.audio.kQueryOverride_Death]]
  },
  initQueriesCrimeInProgress : function (a) {
    return {
      crimeInProgress : [simcity.kDataUnits, a, simcity.kDataFlags, simcity.kUnitFlagCrimeInProgress],
      alerts : [simcity.kDataUnits, a, simcity.kDataRolloverAlertInfo]
    }
  },
  getCrimeInProgress : function (a, b) {
    if (b.crimeInProgress && 0 < b.alerts.length)
      for (var c, d = 0; d < b.alerts.length; d++) {
        var e = 0;
        c = b.alerts[d];
        switch (c.id) {
        case 3740063204:
          e = "0x0efa9d40";
          break;
        case 3994694051:
          e = "0x0efa9d41";
          break;
        case 3883609833:
          e = "0x0efa9d42";
          break;
        case 1956694989:
          e =
            "0x0efa9d43";
          break;
        case 3927386769:
          e = "0x0efa9d44";
          break;
        case 3106762677:
          e = "0x0efa9d45"
        }
        if (0 != e)
          return [[100, [e, e, e, e, e, e], simcity.audio.kQueryOverride_Crime]]
      }
    return []
  },
  initQueriesCrimeAtBuilding : function (a) {
    return {
      crimeAtBuilding : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDSadnessFromCrimeAtBuilding]
    }
  },
  getCrimeAtBuilding : function (a, b) {
    return [[b.crimeAtBuilding, "0x0d428220 0x0d428221 0x0d428222 0x0d428223 0x0d428224 0x0d428225".split(" "), 0]]
  },
  initQueriesCrime : function (a) {
    return {
      crimeNearby : [simcity.kDataUnits,
        a, simcity.kDataBinAmount, simcity.kResourceIDSadnessFromCrime]
    }
  },
  getCrime : function (a, b) {
    return [[b.crimeNearby, "0x0d428230 0x0d428231 0x0d428232 0x0d428233 0x0d428234 0x0d428235".split(" "), 0]]
  },
  initQueriesGarbage : function (a) {
    return {
      sadnessGarbage : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDSadnessFromGarbage],
      garbage : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDGarbage],
      recyclable : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDRecyclables]
    }
  },
  getGarbage : function (a,
    b) {
    var c = [[b.sadnessGarbage.amount, "0x0ea23300 0x0ea23301 0x0ea23302 0x0ea23303 0x0ea23304 0x0ea23305".split(" "), 0]];
    if (b.garbage.amount == b.garbage.capacity || b.recyclable.amount == b.recyclable.capacity)
      c = [[b.sadnessGarbage.amount, "0x0d4280cc 0x0d4280cd 0x0d42821c 0x0d42821d 0x0d42821e 0x0d42821f".split(" "), simcity.audio.kQueryOverride_Garbage]];
    return c
  },
  initQueriesEducation : function (a) {
    return {
      education : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDSadnessFromNoEducation],
      EducationLevel : [simcity.kDataUnits,
        a, simcity.kDataBins, simcity.kResourceIDEducationLevel],
      previouslyEducated : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDPreviouslyEducated]
    }
  },
  getEducation : function (a, b) {
    var c = [],
    d = b.wealth,
    e = !1;
    switch (b.EducationLevel.amount) {
    case 2:
      3 == d && (c = [[b.education.amount, "0x0ea91110 0x0ea91111 0x0ea91112 0x0ea91113 0x0ea91114 0x0ea91115".split(" "), 0]], e = !0);
      break;
    case 3:
    case 5:
      break;
    default:
      if (1 < d && (c = [[b.education.amount, "0x0ea91100 0x0ea91101 0x0ea91102 0x0ea91103 0x0ea91104 0x0ea91105".split(" "),
              0]], e = !0), 0 < b.previouslyEducated.amount)
        c = [[b.education.amount, "0x0ea91120 0x0ea91121 0x0ea91122 0x0ea91123 0x0ea91124 0x0ea91125".split(" "), 0]], e = !0
    }
    e || (c = [[b.education.amount, "0x0ea91ef0 0x0ea91ef1 0x0ea91ef2 0x0ea91ef3 0x0ea91ef4 0x0ea91ef5".split(" "), 0]]);
    return c
  },
  initQueriesRTaxes : function (a) {
    return {
      sadnessTaxes : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDSadnessFromTaxes],
      wealth : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDWealth],
      taxLevelW1 : [simcity.kDataBinAmount,
        simcity.kResourceIDTaxLevelRW1],
      taxLevelW2 : [simcity.kDataBinAmount, simcity.kResourceIDTaxLevelRW2],
      taxLevelW3 : [simcity.kDataBinAmount, simcity.kResourceIDTaxLevelRW3]
    }
  },
  currentlySadTaxes : function (a, b, c, d, e) {
    switch (b.wealth) {
    case 1:
      if (b.taxLevelW1 >= c)
        return !0;
      break;
    case 2:
      if (b.taxLevelW2 >= d)
        return !0;
      break;
    case 3:
      if (b.taxLevelW3 >= e)
        return !0
    }
    return !1
  },
  getTaxesText : function (a, b) {
    return 0 < a ? b ? [[a, "0x0d4280ae 0x0d4280af 0x0d4280b0 0x0d4280b1 0x0d4280b2 0x0d4280b3".split(" "), 0]] : [[a, "0x0ea215b0 0x0ea215b1 0x0ea215b2 0x0ea215b3 0x0ea215b4 0x0ea215b5".split(" "),
        0]] : []
  },
  getRTaxes : function (a, b) {
    var c = this.currentlySadTaxes(a, b, simcity.SimTuning.sadnessTaxLevelRW1, simcity.SimTuning.sadnessTaxLevelRW2, simcity.SimTuning.sadnessTaxLevelRW3);
    return this.getTaxesText(b.sadnessTaxes, c)
  },
  initQueriesCTaxes : function (a) {
    return {
      sadnessTaxes : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDSadnessFromTaxes],
      wealth : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDWealth],
      taxLevelW1 : [simcity.kDataBinAmount, simcity.kResourceIDTaxLevelCW1],
      taxLevelW2 : [simcity.kDataBinAmount,
        simcity.kResourceIDTaxLevelCW2],
      taxLevelW3 : [simcity.kDataBinAmount, simcity.kResourceIDTaxLevelCW3]
    }
  },
  getCTaxes : function (a, b) {
    var c = this.currentlySadTaxes(a, b, simcity.SimTuning.sadnessTaxLevelCW1, simcity.SimTuning.sadnessTaxLevelCW2, simcity.SimTuning.sadnessTaxLevelCW3);
    return this.getTaxesText(b.sadnessTaxes, c)
  },
  initQueriesITaxes : function (a) {
    return {
      sadnessTaxes : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDSadnessFromTaxes],
      wealth : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDWealth],
      taxLevelW1 : [simcity.kDataBinAmount, simcity.kResourceIDTaxLevelIW1],
      taxLevelW2 : [simcity.kDataBinAmount, simcity.kResourceIDTaxLevelIW2],
      taxLevelW3 : [simcity.kDataBinAmount, simcity.kResourceIDTaxLevelIW3]
    }
  },
  getITaxes : function (a, b) {
    var c = this.currentlySadTaxes(a, b, simcity.SimTuning.sadnessTaxLevelIW1, simcity.SimTuning.sadnessTaxLevelIW2, simcity.SimTuning.sadnessTaxLevelIW3);
    return this.getTaxesText(b.sadnessTaxes, c)
  },
  initQueriesDesirability : function (a) {
    return {
      desirability : [simcity.kDataUnits, a, simcity.kDataBins,
        simcity.kResourceIDSadnessFromNoDesirability]
    }
  },
  getDesirability : function (a, b) {
    return [[b.desirability.amount, "0x0d4280ba 0x0d4280bb 0x0d4280bc 0x0d4280bd 0x0d4280be 0x0d4280bf".split(" "), 0]]
  },
  initQueriesPollution : function (a) {
    return {
      pollution : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDSadnessFromPollution]
    }
  },
  getPollution : function (a, b) {
    return [[b.pollution.amount, "0x0d62f670 0x0d62f671 0x0d62f672 0x0d62f673 0x0d62f674 0x0d62f675".split(" "), simcity.audio.kQueryOverride_Pollution]]
  },
  initQueriesSouvenirs : function (a) {
    return {
      normal : [simcity.kDataUnits,
        a, simcity.kDataFlags, simcity.kUnitFlagNormal],
      chance25Percent : [simcity.kDataUnits, a, simcity.kDataFlags, simcity.kUnitFlagChance25Percent],
      souvenirsW1 : [simcity.kDataConnectedUnits, a, simcity.kDataBins, simcity.kResourceIDSouvenirsW1],
      souvenirsW2 : [simcity.kDataConnectedUnits, a, simcity.kDataBins, simcity.kResourceIDSouvenirsW2],
      souvenirsW3 : [simcity.kDataConnectedUnits, a, simcity.kDataBins, simcity.kResourceIDSouvenirsW3]
    }
  },
  getSouvenirs : function (a, b) {
    var c = [];
    if (b.normal && b.chance25Percent) {
      for (var c = 0, d = null,
        e = [b.souvenirsW1, b.souvenirsW2, b.souvenirsW3], f = 0; f < e.length; f++)
        0 != e[f].capacity && (d = Math.ceil(0.8 * e[f].capacity), e[f].amount >= d && c++);
      c = [[0 < c ? 1 : 0, "0x0e9fce58 0x0e9fce58 0x0e9fce58 0x0e9fce58 0x0e9fce58 0x0e9fce58".split(" "), 0]]
    }
    return c
  },
  initQueriesGettingBetterHappiness : function (a) {
    return {
      normal : [simcity.kDataUnits, a, simcity.kDataFlags, simcity.kUnitFlagNormal],
      tokens : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDHappinessToken],
      tokensLast : [simcity.kDataUnits, a, simcity.kDataBinAmount,
        simcity.kResourceIDHappinessTokenLast],
      defaultTokens : [simcity.kDataUnits, a, simcity.kDataProperties, simcity.kPropHappiness_DefaultHappinessTokens],
      happinessDisplay : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDHappinessDisplay]
    }
  },
  initQueriesGettingBetterProfit : function (a) {
    return {
      normal : [simcity.kDataUnits, a, simcity.kDataFlags, simcity.kUnitFlagNormal],
      tokens : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDProfitToken],
      tokensLast : [simcity.kDataUnits, a, simcity.kDataBinAmount,
        simcity.kResourceIDProfitTokenLast],
      defaultTokens : [simcity.kDataUnits, a, simcity.kDataProperties, simcity.kPropProfit_DefaultProfitTokens],
      happinessDisplay : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDHappinessDisplay]
    }
  },
  isGettingBetter : function (a, b) {
    return b.normal && 2 > b.happinessDisplay && b.tokens - b.tokensLast >= b.defaultTokens ? !0 : !1
  },
  getGettingBetter : function (a, b) {
    this.isGettingBetter(a, b);
    return []
  },
  initQueriesSales : function (a) {
    return {
      normal : [simcity.kDataUnits, a, simcity.kDataFlags,
        simcity.kUnitFlagNormal],
      norent : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDSadnessFromNoRent],
      nosales : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDSadnessFromNotEnoughSales],
      happinessDisplay : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDHappinessDisplay]
    }
  },
  currentlySadFromSales : function (a, b) {
    var c = b.nosales + b.norent;
    return !b.normal || 0 < c && 3 > b.happinessDisplay && !this.isGettingBetter(a, b) ? !0 : !1
  },
  getSales : function (a, b) {
    return this.currentlySadFromSales(a,
      b) ? [[b.nosales + b.norent, "0x0d4280b4 0x0d4280b5 0x0d4280b6 0x0d4280b7 0x0d4280b8 0x0d4280b9".split(" "), 0]] : []
  },
  initQueriesInjury : function (a) {
    return {
      sadnessInjury : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDSadnessFromInjury]
    }
  },
  getInjury : function (a, b) {
    return [[b.sadnessInjury, "0x0eab8ce0 0x0eab8ce1 0x0eab8ce2 0x0eab8ce3 0x0eab8ce4 0x0eab8ce5".split(" "), simcity.audio.kQueryOverride_Injury]]
  },
  initQueriesTraffic : function () {
    return {}

  },
  getTraffic : function () {
    return []
  },
  initQueriesMassTransit : function () {
    return {}

  },
  getMasssTransit : function () {
    return []
  },
  initQueriesSickness : function (a) {
    return {
      sadnessSickness : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDSadnessFromSickness]
    }
  },
  getSickness : function (a, b) {
    return [[b.sadnessSickness, "0x0d428226 0x0d428227 0x0d428228 0x0d428229 0x0d42822a 0x0d42822b".split(" "), simcity.audio.kQueryOverride_Sickness]]
  },
  initQueriesGerms : function (a) {
    return {
      sadnessGerms : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDSadnessFromGerms]
    }
  },
  getGerms : function (a,
    b) {
    return [[b.sadnessGerms, "0x0eab91c0 0x0eab91c1 0x0eab91c2 0x0eab91c3 0x0eab91c4 0x0eab91c5".split(" "), simcity.audio.kQueryOverride_Sickness]]
  },
  initQueriesSewage : function (a) {
    return {
      sewage : ["units", a, "bins", simcity.kResourceIDSewage],
      sadnessSewage : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDSadnessFromSewage]
    }
  },
  getSewage : function (a, b) {
    return b.sewage.amount >= b.sewage.capacity ? [[b.sadnessSewage, "0x0eab91b0 0x0eab91b1 0x0eab91b2 0x0eab91b3 0x0eab91b4 0x0eab91b5".split(" "), simcity.audio.kQueryOverride_Sewage]] :
    [[b.sadnessSewage, "0x0eab9190 0x0eab9191 0x0eab9192 0x0eab9193 0x0eab9194 0x0eab9195".split(" "), 0]]
  },
  initQueriesHomeless : function (a) {
    return {
      SadnessHomeless : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDSadnessFromHomelessness]
    }
  },
  getHomeless : function (a, b) {
    return [[b.SadnessHomeless, "0x0eaba610 0x0eaba611 0x0eaba612 0x0eaba613 0x0eaba614 0x0eaba615".split(" "), simcity.audio.kQueryOverride_Homeless]]
  },
  initQueriesUnableToUpgrade : function (a) {
    return {
      density : [simcity.kDataUnits, a, simcity.kDataBins,
        simcity.kResourceIDDensity],
      normal : [simcity.kDataUnits, a, simcity.kDataFlags, simcity.kUnitFlagNormal],
      sadnessCanUpgradeTimer : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDHappiness_CanUpgradeTimer_D],
      highDensityRoad : [simcity.kDataUnits, a, simcity.kDataConnectedToHighDensityRoad],
      mediumDensityRoad : [simcity.kDataUnits, a, simcity.kDataConnectedToMediumDensityRoad]
    }
  },
  getUnableToUpgrade : function (a, b) {
    if (b.normal && b.density.amount !== b.density.capacity) {
      var c = b.density.amount + 1,
      d = !0;
      b.highDensityRoad ?
      d = !1 : b.mediumDensityRoad && (d = 2 < c);
      return [[6 <= b.sadnessCanUpgradeTimer && !d ? 1 : 0, "0x0eb391e0 0x0eb391e0 0x0eb391e0 0x0eb391e0 0x0eb391e0 0x0eb391e0".split(" "), 0], [0 < b.sadnessCanUpgradeTimer && d ? 1 : 0, "0x0eb391e1 0x0eb391e1 0x0eb391e1 0x0eb391e1 0x0eb391e1 0x0eb391e1".split(" "), 0]]
    }
    return []
  }
};
simcity.RolloverItems.kUnderConstructionTextFeedback = {
  iconPath : "Graphics/Common/Icons/icn-happiness.png",
  layoutPath : "Layouts/Rollovers/RolloverHappinessText.js",
  updateQueries : function (a) {
    return {
      textFeedbackFile : [simcity.kDataUnits, a, "nonSimProperties", simcity.kPropSCUnitRolloverTextFile],
      AudioRollOverOnEvent : [simcity.kDataUnits, a, "nonSimProperties", simcity.cRolloverUI.kPropUnitAudioRolloverOnEvents]
    }
  },
  update : function (a, b) {
    a.normalRollover = a.layout.FindControlByID(222464035);
    a.vacantRollover = a.layout.FindControlByID(222514320);
    simcity.RenderUnitFeedbackText(b.textFeedbackFile, ["0x0f239cbb 0x0f239cbb 0x0f239cbb 0x0f239cbb 0x0f239cbb 0x0f239cbb 0x0f239cbb".split(" "), 0], [], [], [], null, 4, !0, !1, a, b)
  }
};
simcity.RolloverItems.kResidentialTextFeedback = {
  iconPath : "Graphics/Common/Icons/icn-happiness.png",
  layoutPath : "Layouts/Rollovers/RolloverHappinessText.js",
  updateQueries : function (a) {
    var b = {
      unitName : [simcity.kDataUnits, a, simcity.kDataUnitName],
      textFeedbackFile : [simcity.kDataUnits, a, "nonSimProperties", simcity.kPropSCUnitRolloverTextFile],
      money : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDMoneyToken],
      AudioRollOverOnEvent : [simcity.kDataUnits, a, "nonSimProperties", simcity.cRolloverUI.kPropUnitAudioRolloverOnEvents],
      radiated : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDRadiated],
      disaster : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDDemolishedByDisaster],
      shoppingToken : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDShoppingToken]
    };
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesRolloverDefault(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesGettingBetterHappiness(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesNormal(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesHappinessShopping(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesHappinessParks(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesHappinessRTaxes(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesUrgentBasic(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesUrgentResidential(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesSadnessBasic(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesShopping(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesFire(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesDeath(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesCrimeInProgress(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesCrimeAtBuilding(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesRTaxes(a));
    goog.object.extend(b,
      simcity.RolloverItems.RolloverText.initQueriesInjury(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesTraffic(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesMassTransit(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesUnableToUpgrade(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesSickness(a));
    this.updateQueriesW2 && (goog.object.extend(b, this.updateQueriesW2(a)), this.updateQueriesW3 && goog.object.extend(b, this.updateQueriesW3(a)));
    return b
  },
  update : function (a, b) {
    a.normalRollover = a.layout.FindControlByID(222464035);
    a.vacantRollover = a.layout.FindControlByID(222514320);
    var c = b.normal,
    d = simcity.RolloverItems.RolloverText.getNormal(a, b),
    e = simcity.RolloverItems.RolloverText.getUrgentBasic(a, b),
    e = e.concat(simcity.RolloverItems.RolloverText.getUrgentResidential(a, b)),
    e = e.concat(simcity.RolloverItems.RolloverText.getDeath(a, b)),
    e = e.concat(simcity.RolloverItems.RolloverText.getCrimeInProgress(a, b));
    this.urgentTextW2 && (e = e.concat(this.urgentTextW2(a,
            b)), this.urgentTextW3 && (e = e.concat(this.urgentTextW3(a, b))));
    var f = 4 <= b.happinessDisplay,
    g = simcity.RolloverItems.RolloverText.getGettingBetter(a, b),
    g = g.concat(simcity.RolloverItems.RolloverText.getRTaxes(a, b)),
    g = g.concat(simcity.RolloverItems.RolloverText.getInjury(a, b)),
    g = g.concat(simcity.RolloverItems.RolloverText.getCrimeAtBuilding(a, b)),
    g = g.concat(simcity.RolloverItems.RolloverText.getUnableToUpgrade(a, b));
    if (!f || !c)
      g = g.concat(simcity.RolloverItems.RolloverText.getSadnessBasic(a, b)), g = g.concat(simcity.RolloverItems.RolloverText.getFire(a,
            b)), g = g.concat(simcity.RolloverItems.RolloverText.getTraffic(a, b)), g = g.concat(simcity.RolloverItems.RolloverText.getMasssTransit(a, b)), g = g.concat(simcity.RolloverItems.RolloverText.getSickness(a, b)), g = g.concat(simcity.RolloverItems.RolloverText.getShopping(a, b));
    this.sadnessTextW2 && (g = g.concat(this.sadnessTextW2(a, b)), this.sadnessTextW3 && (g = g.concat(this.sadnessTextW3(a, b))));
    f = simcity.RolloverItems.RolloverText.getHappinessRTaxes(a, b);
    f = f.concat(simcity.RolloverItems.RolloverText.getHappinessParks(a,
          b));
    f = f.concat(simcity.RolloverItems.RolloverText.getHappinessShopping(a, b));
    this.happinessTextW2 && (f = f.concat(this.happinessTextW2(a, b)), this.happinessTextW3 && (f = f.concat(this.happinessTextW3(a, b))));
    c || (g = 0 < b.zombieDestroy.amount ? [[b.zombieDestroy.amount, "0x0df06c31 0x0df06c31 0x0df06c31 0x0df06c31 0x0df06c31 0x0df06c31".split(" "), 0]] : 0 < b.radiated.amount ? [[b.radiated.amount, "0x0e13c870 0x0e13c870 0x0e13c870 0x0e13c870 0x0e13c870 0x0e13c870".split(" "), 0]] : 0 < b.disaster.amount ? [[1E3, "0x0e8fd1fc 0x0e8fd1fc 0x0e8fd1fc 0x0e8fd1fc 0x0e8fd1fc 0x0e8fd1fc".split(" "),
            0]] : g.concat([[b.power.amount, "0x0d4280c0 0x0d4280c1 0x0d4280c2 0x0d4280c3 0x0d4280c4 0x0d4280c5".split(" "), simcity.audio.kQueryOverride_UnPowered], [b.water.amount, "0x0d4280c6 0x0d4280c7 0x0d4280c8 0x0d4280c9 0x0d4280ca 0x0d4280cb".split(" "), simcity.audio.kQueryOverride_UnWatered]]));
    var h = b.happinessDisplay,
    i = null;
    this.UpdateAdditionalText && (i = this.UpdateAdditionalText(b));
    simcity.RenderUnitFeedbackText(b.textFeedbackFile, d, e, g, f, i, h, c, !1, a, b)
  }
};
simcity.RolloverItems.kResidentialTextFeedbackW2 = {
  updateQueriesW2 : function (a) {
    var b = {};
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesDesirability(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesCrime(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesSickness(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesGarbage(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesEducation(a));
    goog.object.extend(b,
      simcity.RolloverItems.RolloverText.initQueriesSewage(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesGerms(a));
    return b
  },
  urgentTextW2 : function (a, b) {
    var c = [],
    c = c.concat(simcity.RolloverItems.RolloverText.getDesirability(a, b)),
    c = c.concat(simcity.RolloverItems.RolloverText.getCrime(a, b));
    return c = c.concat(simcity.RolloverItems.RolloverText.getSickness(a, b))
  },
  sadnessTextW2 : function (a, b) {
    var c = [],
    c = c.concat(simcity.RolloverItems.RolloverText.getGarbage(a, b)),
    c = c.concat(simcity.RolloverItems.RolloverText.getEducation(a,
          b)),
    c = c.concat(simcity.RolloverItems.RolloverText.getSewage(a, b));
    return c = c.concat(simcity.RolloverItems.RolloverText.getGerms(a, b))
  },
  happinessTextW2 : function () {
    return []
  }
};
goog.object.extend(simcity.RolloverItems.kResidentialTextFeedbackW2, simcity.RolloverItems.kResidentialTextFeedback);
simcity.RolloverItems.kResidentialTextFeedbackW3 = {
  updateQueriesW3 : function (a) {
    var b = {};
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesPollution(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesHappinessHealth(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesHappinessFireMarshal(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesHappinessPolice(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesHappinessCrimeSuppression(a));
    return b
  },
  urgentTextW3 : function (a, b) {
    var c = [],
    c = c.concat(simcity.RolloverItems.RolloverText.getGarbage(a, b)),
    c = c.concat(simcity.RolloverItems.RolloverText.getSewage(a, b));
    return c = c.concat(simcity.RolloverItems.RolloverText.getEducation(a, b))
  },
  sadnessTextW3 : function (a, b) {
    var c = [];
    return c = c.concat(simcity.RolloverItems.RolloverText.getPollution(a, b))
  },
  happinessTextW3 : function (a, b) {
    var c = [],
    c = c.concat(simcity.RolloverItems.RolloverText.getHappinessHealth(a, b)),
    c = c.concat(simcity.RolloverItems.RolloverText.getHappinessFireMarshal(a,
          b)),
    c = c.concat(simcity.RolloverItems.RolloverText.getHappinessPolice(a, b));
    return c = c.concat(simcity.RolloverItems.RolloverText.getHappinessCrimeSuppression(a, b))
  }
};
goog.object.extend(simcity.RolloverItems.kResidentialTextFeedbackW3, simcity.RolloverItems.kResidentialTextFeedbackW2);
simcity.RolloverItems.kCommercialTextFeedback = {
  iconPath : "Graphics/Common/Icons/icn-happiness.png",
  layoutPath : "Layouts/Rollovers/RolloverHappinessText.js",
  updateQueries : function (a) {
    var b = {
      unitName : [simcity.kDataUnits, a, simcity.kDataUnitName],
      textFeedbackFile : [simcity.kDataUnits, a, "nonSimProperties", simcity.kPropSCUnitRolloverTextFile],
      zombieDestroy : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDDestroyedByZombie],
      AudioRollOverOnEvent : [simcity.kDataUnits, a, "nonSimProperties", simcity.cRolloverUI.kPropUnitAudioRolloverOnEvents],
      radiated : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDRadiated],
      disaster : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDDemolishedByDisaster]
    };
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesRolloverDefault(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesNormal(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesWork(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesHappinessCustomer(a));
    goog.object.extend(b,
      simcity.RolloverItems.RolloverText.initQueriesHappinessCustomerStudent(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesHappinessCustomerTourist(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesHappinessCTaxes(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesHappinessParks(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesUrgentBasic(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesSadnessBasic(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesFire(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesDeath(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesCTaxes(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesCrimeInProgress(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesCrimeAtBuilding(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesSouvenirs(a));
    goog.object.extend(b,
      simcity.RolloverItems.RolloverText.initQueriesGettingBetterProfit(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesUnableToUpgrade(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesCrime(a));
    this.updateQueriesW2 && (goog.object.extend(b, this.updateQueriesW2(a)), this.updateQueriesW3 && goog.object.extend(b, this.updateQueriesW3(a)));
    return b
  },
  update : function (a, b) {
    a.normalRollover = a.layout.FindControlByID(222464035);
    a.vacantRollover = a.layout.FindControlByID(222514320);
    var c = b.normal,
    d = simcity.RolloverItems.RolloverText.getNormal(a, b),
    e = [[0, [0, 0, 0, 0, 0, 0, 0], 0]];
    simcity.RolloverItems.RolloverText.isClosedForTheDay(a, b) ? d = simcity.RolloverItems.RolloverText.getClosedForTheDay(a, b) : (e = simcity.RolloverItems.RolloverText.getHappinessCustomer(a, b), e = e.concat(simcity.RolloverItems.RolloverText.getHappinessCustomerStudent(a, b)), e = e.concat(simcity.RolloverItems.RolloverText.getHappinessCustomerTourist(a, b)), e = e.concat(simcity.RolloverItems.RolloverText.getHappinessCTaxes(a,
              b)), e = e.concat(simcity.RolloverItems.RolloverText.getHappinessParks(a, b)), this.happinessTextW2 && (e = e.concat(this.happinessTextW2(a, b)), this.happinessTextW3 && (e = e.concat(this.happinessTextW3(a, b)))));
    var f = simcity.RolloverItems.RolloverText.getUrgentBasic(a, b),
    f = f.concat(simcity.RolloverItems.RolloverText.getWork(a, b)),
    f = f.concat(simcity.RolloverItems.RolloverText.getDeath(a, b)),
    f = f.concat(simcity.RolloverItems.RolloverText.getCrimeInProgress(a, b));
    this.urgentTextW2 && (f = f.concat(this.urgentTextW2(a,
            b)), this.urgentTextW3 && (f = f.concat(this.urgentTextW3(a, b))));
    var g = 4 <= b.happinessDisplay,
    h = simcity.RolloverItems.RolloverText.getGettingBetter(a, b),
    h = h.concat(simcity.RolloverItems.RolloverText.getCrimeAtBuilding(a, b)),
    h = h.concat(simcity.RolloverItems.RolloverText.getUnableToUpgrade(a, b));
    if (!g || !c)
      h = h.concat(simcity.RolloverItems.RolloverText.getSadnessBasic(a, b)), h = h.concat(simcity.RolloverItems.RolloverText.getFire(a, b)), h = h.concat(simcity.RolloverItems.RolloverText.getCTaxes(a, b)), h = h.concat(simcity.RolloverItems.RolloverText.getWorkSadness(a,
            b)), h = h.concat(simcity.RolloverItems.RolloverText.getSouvenirs(a, b)), h = h.concat(simcity.RolloverItems.RolloverText.getCrime(a, b));
    this.sadnessTextW2 && (h = h.concat(this.sadnessTextW2(a, b)), this.sadnessTextW3 && (h = h.concat(this.sadnessTextW3(a, b))));
    c || (h = 0 < b.zombieDestroy.amount ? [[b.zombieDestroy.amount, "0x0df06c31 0x0df06c31 0x0df06c31 0x0df06c31 0x0df06c31 0x0df06c31".split(" "), simcity.audio.kQueryOverride_ZombieTarget]] : 0 < b.radiated.amount ? [[b.radiated.amount, "0x0e13c870 0x0e13c870 0x0e13c870 0x0e13c870 0x0e13c870 0x0e13c870".split(" "),
            0]] : 0 < b.disaster.amount ? [[1E3, "0x0e8fd1fc 0x0e8fd1fc 0x0e8fd1fc 0x0e8fd1fc 0x0e8fd1fc 0x0e8fd1fc".split(" "), 0]] : h.concat([[b.power.amount, "0x0d4280c0 0x0d4280c1 0x0d4280c2 0x0d4280c3 0x0d4280c4 0x0d4280c5".split(" "), simcity.audio.kQueryOverride_UnPowered], [b.water.amount, "0x0d4280c6 0x0d4280c7 0x0d4280c8 0x0d4280c9 0x0d4280ca 0x0d4280cb".split(" "), simcity.audio.kQueryOverride_UnWatered]]));
    var g = b.happinessDisplay,
    i = null;
    this.UpdateAdditionalText && (i = this.UpdateAdditionalText(b));
    simcity.RenderUnitFeedbackText(b.textFeedbackFile,
      d, f, h, e, i, g, c, !1, a, b)
  }
};
simcity.RolloverItems.kCommercialTextFeedbackW2 = {
  updateQueriesW2 : function (a) {
    var b = {};
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesDesirability(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesCrime(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesGarbage(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesSewage(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesGerms(a));
    goog.object.extend(b,
      simcity.RolloverItems.RolloverText.initQueriesHomeless(a));
    return b
  },
  urgentTextW2 : function (a, b) {
    var c = [],
    c = c.concat(simcity.RolloverItems.RolloverText.getDesirability(a, b));
    return c = c.concat(simcity.RolloverItems.RolloverText.getCrime(a, b))
  },
  sadnessTextW2 : function (a, b) {
    var c = [],
    c = c.concat(simcity.RolloverItems.RolloverText.getGarbage(a, b)),
    c = c.concat(simcity.RolloverItems.RolloverText.getHomeless(a, b)),
    c = c.concat(simcity.RolloverItems.RolloverText.getSewage(a, b));
    return c = c.concat(simcity.RolloverItems.RolloverText.getGerms(a,
          b))
  },
  happinessTextW2 : function () {
    return []
  }
};
goog.object.extend(simcity.RolloverItems.kCommercialTextFeedbackW2, simcity.RolloverItems.kCommercialTextFeedback);
simcity.RolloverItems.kCommercialTextFeedbackW3 = {
  updateQueriesW3 : function (a) {
    var b = {};
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesPollution(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesHappinessHealth(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesHappinessFireMarshal(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesHappinessPolice(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesHappinessCrimeSuppression(a));
    return b
  },
  urgentTextW3 : function (a, b) {
    var c = [],
    c = c.concat(simcity.RolloverItems.RolloverText.getGarbage(a, b)),
    c = c.concat(simcity.RolloverItems.RolloverText.getHomeless(a, b));
    return c = c.concat(simcity.RolloverItems.RolloverText.getSewage(a, b))
  },
  sadnessTextW3 : function (a, b) {
    var c = [];
    return c = c.concat(simcity.RolloverItems.RolloverText.getPollution(a, b))
  },
  happinessTextW3 : function (a, b) {
    var c = [],
    c = c.concat(simcity.RolloverItems.RolloverText.getHappinessHealth(a, b)),
    c = c.concat(simcity.RolloverItems.RolloverText.getHappinessFireMarshal(a,
          b)),
    c = c.concat(simcity.RolloverItems.RolloverText.getHappinessPolice(a, b));
    return c = c.concat(simcity.RolloverItems.RolloverText.getHappinessCrimeSuppression(a, b))
  }
};
goog.object.extend(simcity.RolloverItems.kCommercialTextFeedbackW3, simcity.RolloverItems.kCommercialTextFeedbackW2);
simcity.RolloverItems.kIndustrialTextFeedback = {
  iconPath : "Graphics/Common/Icons/icn-happiness.png",
  layoutPath : "Layouts/Rollovers/RolloverHappinessText.js",
  updateQueries : function (a) {
    var b = {
      unitName : [simcity.kDataUnits, a, simcity.kDataUnitName],
      textFeedbackFile : [simcity.kDataUnits, a, "nonSimProperties", simcity.kPropSCUnitRolloverTextFile],
      plague : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDPlague],
      zombies : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDZombies],
      zombieDestroy : [simcity.kDataUnits,
        a, simcity.kDataBins, simcity.kResourceIDDestroyedByZombie],
      AudioRollOverOnEvent : [simcity.kDataUnits, a, "nonSimProperties", simcity.cRolloverUI.kPropUnitAudioRolloverOnEvents],
      radiated : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDRadiated],
      disaster : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDDemolishedByDisaster]
    };
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesRolloverDefault(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesNormal(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesWork(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesHappinessShipment(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesHappinessITaxes(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesUrgentBasic(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesSadnessBasic(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesFire(a));
    goog.object.extend(b,
      simcity.RolloverItems.RolloverText.initQueriesDeath(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesSales(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesITaxes(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesCrimeInProgress(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesCrimeAtBuilding(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesGettingBetterProfit(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesUnableToUpgrade(a));
    this.updateQueriesW2 && (goog.object.extend(b, this.updateQueriesW2(a)), this.updateQueriesW3 && goog.object.extend(b, this.updateQueriesW3(a)));
    return b
  },
  update : function (a, b) {
    a.normalRollover = a.layout.FindControlByID(222464035);
    a.vacantRollover = a.layout.FindControlByID(222514320);
    var c = b.normal,
    d = simcity.RolloverItems.RolloverText.getNormal(a, b),
    e = [[0, [0, 0, 0, 0, 0, 0, 0], 0]];
    simcity.RolloverItems.RolloverText.isClosedForTheDay(a, b) ? d = simcity.RolloverItems.RolloverText.getClosedForTheDay(a, b) : (e = simcity.RolloverItems.RolloverText.getHappinessShipments(a,
            b), e = e.concat(simcity.RolloverItems.RolloverText.getHappinessITaxes(a, b)));
    var f = simcity.RolloverItems.RolloverText.getUrgentBasic(a, b),
    f = f.concat(simcity.RolloverItems.RolloverText.getWork(a, b)),
    f = f.concat(simcity.RolloverItems.RolloverText.getDeath(a, b)),
    f = f.concat(simcity.RolloverItems.RolloverText.getCrimeInProgress(a, b));
    this.urgentTextW2 && (f = f.concat(this.urgentTextW2(a, b)), this.urgentTextW3 && (f = f.concat(this.urgentTextW3(a, b))));
    var g = 4 <= b.happinessDisplay,
    h = simcity.RolloverItems.RolloverText.getGettingBetter(a,
        b),
    h = h.concat(simcity.RolloverItems.RolloverText.getSales(a, b)),
    h = h.concat(simcity.RolloverItems.RolloverText.getCrimeAtBuilding(a, b)),
    h = h.concat(simcity.RolloverItems.RolloverText.getUnableToUpgrade(a, b));
    if (!g || !c)
      h = h.concat(simcity.RolloverItems.RolloverText.getSadnessBasic(a, b)), h = h.concat(simcity.RolloverItems.RolloverText.getFire(a, b)), h = h.concat(simcity.RolloverItems.RolloverText.getITaxes(a, b)), h = h.concat(simcity.RolloverItems.RolloverText.getWorkSadness(a, b));
    this.sadnessTextW2 && (h = h.concat(this.sadnessTextW2(a,
            b)), this.sadnessTextW3 && (h = h.concat(this.sadnessTextW3(a, b))));
    c || (h = 0 < b.zombieDestroy.amount ? [[b.zombieDestroy.amount, "0x0df06c31 0x0df06c31 0x0df06c31 0x0df06c31 0x0df06c31 0x0df06c31".split(" "), simcity.audio.kQueryOverride_ZombieTarget]] : 0 < b.radiated.amount ? [[b.radiated.amount, "0x0e13c870 0x0e13c870 0x0e13c870 0x0e13c870 0x0e13c870 0x0e13c870".split(" "), 0]] : 0 < b.disaster.amount ? [[1E3, "0x0e8fd1fc 0x0e8fd1fc 0x0e8fd1fc 0x0e8fd1fc 0x0e8fd1fc 0x0e8fd1fc".split(" "), 0]] : h.concat([[b.power.amount, "0x0d4280c0 0x0d4280c1 0x0d4280c2 0x0d4280c3 0x0d4280c4 0x0d4280c5".split(" "),
              0], [b.water.amount, "0x0d4280c6 0x0d4280c7 0x0d4280c8 0x0d4280c9 0x0d4280ca 0x0d4280cb".split(" "), 0]]));
    var g = b.happinessDisplay,
    i = null;
    this.UpdateAdditionalText && (i = this.UpdateAdditionalText(b));
    simcity.RenderUnitFeedbackText(b.textFeedbackFile, d, f, h, e, i, g, c, !1, a, b)
  }
};
simcity.RolloverItems.kIndustrialTextFeedbackW2 = {
  updateQueriesW2 : function (a) {
    var b = {};
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesGarbage(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesSewage(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesInjury(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesEducation(a));
    return b
  },
  urgentTextW2 : function (a, b) {
    var c = [],
    c = c.concat(simcity.RolloverItems.RolloverText.getInjury(a,
          b));
    return c = c.concat(simcity.RolloverItems.RolloverText.getEducation(a, b))
  },
  sadnessTextW2 : function (a, b) {
    var c = [],
    c = c.concat(simcity.RolloverItems.RolloverText.getGarbage(a, b));
    return c = c.concat(simcity.RolloverItems.RolloverText.getSewage(a, b))
  }
};
goog.object.extend(simcity.RolloverItems.kIndustrialTextFeedbackW2, simcity.RolloverItems.kIndustrialTextFeedback);
simcity.RolloverItems.kIndustrialTextFeedbackW3 = {
  updateQueriesW3 : function () {
    return {}

  },
  urgentTextW3 : function (a, b) {
    var c = [],
    c = c.concat(simcity.RolloverItems.RolloverText.getGarbage(a, b));
    return c = c.concat(simcity.RolloverItems.RolloverText.getSewage(a, b))
  },
  sadnessTextW3 : function () {
    return []
  }
};
goog.object.extend(simcity.RolloverItems.kIndustrialTextFeedbackW3, simcity.RolloverItems.kIndustrialTextFeedbackW2);
simcity.RolloverItems.kBasicToyTextFeedback = {
  iconPath : "Graphics/Common/Icons/icn-happiness.png",
  layoutPath : "Layouts/Rollovers/RolloverHappinessText.js",
  updateQueries : function (a) {
    var b = {
      unitName : [simcity.kDataUnits, a, simcity.kDataUnitName],
      continuousWorkPlace : [simcity.kDataUnits, a, simcity.kDataFlags, simcity.kUnitFlagIDContinuousWorkplace],
      normal : [simcity.kDataUnits, a, simcity.kDataFlags, simcity.kUnitFlagNormal],
      activeBuilding : [simcity.kDataUnits, a, simcity.kDataFlags, simcity.kUnitFlagActiveBuilding],
      activeBuildingLock : [simcity.kDataUnits, a, simcity.kDataFlags, simcity.kUnitFlagActiveBuildingLock],
      unpowered : [simcity.kDataUnits, a, simcity.kDataFlags, simcity.kUnitFlagUnpowered],
      unwatered : [simcity.kDataUnits, a, simcity.kDataFlags, simcity.kUnitFlagUnwatered],
      workers : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDTotalWorkers],
      workersNeededForProduction : [simcity.kDataUnits, a, simcity.kDataProperties, simcity.kPropWork_MinimumWorkersForProduction],
      openForBusiness : [simcity.kDataUnits, a, simcity.kDataFlags,
        simcity.kUnitFlagOpenForBusiness],
      noPrerequisite : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDNoPrerequisite],
      workersNeeded : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDWorkersNeeded],
      shiftLength : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDShiftLength],
      canAfford : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDCanAfford],
      disaster : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDDemolishedByDisaster],
      cheated : [simcity.kDataConnectedUnits,
        a, simcity.kDataBins, simcity.kResourceIDActiveCheat]
    };
    this.additionalInitQueries && goog.object.extend(b, this.additionalInitQueries(a));
    return b
  },
  update : function (a, b) {
    a.normalRollover = a.layout.FindControlByID(222464035);
    a.vacantRollover = a.layout.FindControlByID(222514320);
    var c = b.normal,
    d = b.activeBuilding,
    e = b.activeBuildingLock,
    f = [],
    g = [];
    0 < b.disaster ? g = [[!0, ["0x0e8fd1fc"]]] : (1 != b.cheated.amount && (f = [[b.unwatered, ["0x0d4280c6"], simcity.audio.kQueryOverride_UnWatered], [d && e ? 0 : c && 0 < b.shiftLength.amount &&
            b.workersNeeded.amount != b.workersNeeded.capacity, ["0x0d4369d2"], simcity.audio.kQueryOverride_ClosedToShoppers]], this.SkipUnpowered || (f = f.concat([[b.unpowered, ["0x0d4280c0"], simcity.audio.kQueryOverride_UnPowered]]))), this.additionalUrgentText && f.push.apply(f, this.additionalUrgentText(b)), 1 == b.noPrerequisite.amount ? f = [[!0, [this.noPrereqText ? this.noPrereqText : "0x0db668f7"]]] : 0 === b.canAfford.amount ? f = [[!0, ["0x0eaa375b"]]] : !this.ignoreOpenForBusinessFlag && !b.openForBusiness && (f = [[!0, ["0x0d50b3ef"], simcity.audio.kQueryOverride_ClosedToShoppers]]),
      this.additionalWarningText && g.push.apply(g, this.additionalWarningText(b)));
    d = this.getTone(f, g);
    e = [["0x0d434f9d"], 0];
    this.getNormalText && (e = this.getNormalText(b));
    c && (0 == b.shiftLength.amount && !b.continuousWorkPlace) && (e = [["0x0dd60f10"], 0]);
    var h = null;
    this.UpdateAdditionalText && (h = this.UpdateAdditionalText(b));
    var i = "TextFeedbackToyRollover.json",
    j = !0;
    this.getTextFeedbackFile && (i = this.getTextFeedbackFile(b), j = !1);
    simcity.RenderUnitFeedbackText(i, e, f, g, 0, h, d, c, j, a, b)
  },
  getTone : function (a, b) {
    for (var c =
        0; c < a.length; c++)
      if (a[c][0])
        return 0;
    for (c = 0; c < b.length; c++)
      if (0 < b[c][0])
        return 2;
    return 4
  }
};
simcity.RolloverItems.kBasicToyTextFeedback_NoJobs = {
  iconPath : "Graphics/Common/Icons/icn-happiness.png",
  layoutPath : "Layouts/Rollovers/RolloverHappinessText.js",
  updateQueries : function (a) {
    var b = {
      unitName : [simcity.kDataUnits, a, simcity.kDataUnitName],
      normal : [simcity.kDataUnits, a, simcity.kDataFlags, simcity.kUnitFlagNormal],
      unpowered : [simcity.kDataUnits, a, simcity.kDataFlags, simcity.kUnitFlagUnpowered],
      unwatered : [simcity.kDataUnits, a, simcity.kDataFlags, simcity.kUnitFlagUnwatered],
      openForBusiness : [simcity.kDataUnits,
        a, simcity.kDataFlags, simcity.kUnitFlagOpenForBusiness],
      noPrerequisite : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDNoPrerequisite],
      canAfford : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDCanAfford],
      disaster : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDDemolishedByDisaster],
      cheated : [simcity.kDataConnectedUnits, a, simcity.kDataBins, simcity.kResourceIDActiveCheat]
    };
    this.additionalInitQueries && goog.object.extend(b, this.additionalInitQueries(a));
    return b
  },
  update : function (a,
    b) {
    a.normalRollover = a.layout.FindControlByID(222464035);
    a.vacantRollover = a.layout.FindControlByID(222514320);
    var c = b.normal,
    d = [],
    e = [];
    if (0 < b.disaster)
      e = [[!0, ["0x0e8fd1fc"]]];
    else {
      d = [[b.unpowered, ["0x0d4280c0"], simcity.audio.kQueryOverride_UnPowered], [b.unwatered, ["0x0d4280c6"], simcity.audio.kQueryOverride_UnWatered]];
      this.additionalUrgentText && d.push.apply(d, this.additionalUrgentText(b));
      1 == b.noPrerequisite.amount ? d = [[!0, [this.noPrereqText ? this.noPrereqText : "0x0db668f7"]]] : 0 === b.canAfford.amount ?
      d = [[!0, ["0x0eaa375b"]]] : !this.ignoreOpenForBusinessFlag && !b.openForBusiness && (d = [[!0, ["0x0d50b3ef"], simcity.audio.kQueryOverride_ClosedToShoppers]]);
      e = [];
      this.additionalWarningText && e.push.apply(e, this.additionalWarningText(b));
      var f = [];
      this.additionalHappinessText && f.push.apply(f, this.additionalHappinessText(b))
    }
    var g = simcity.RolloverItems.kBasicToyTextFeedback.getTone(d, e),
    h = [["0x0d434f9d"], 0];
    this.getNormalText && (h = this.getNormalText(b));
    1 === b.cheated.amount && (h = [["0x0db0fd19"], 0], d = [[!0, ["0x0db0fd19"]]]);
    var i = null;
    this.UpdateAdditionalText && (i = this.UpdateAdditionalText(b));
    var j = "TextFeedbackToyRollover.json",
    k = !0;
    this.getTextFeedbackFile && (j = this.getTextFeedbackFile(b), k = !1);
    simcity.RenderUnitFeedbackText(j, h, d, e, f, i, g, c, k, a, b)
  }
};
simcity.RolloverItems.kRegionalWorksTextFeedback = {
  ignoreOpenForBusinessFlag : !0,
  additionalInitQueries : function () {
    return {
      regionalMissionStarted : ["bins", simcity.kResourceIDMissionStarted]
    }
  },
  additionalUrgentText : function (a) {
    return [[0 == a.regionalMissionStarted.amount, ["0x0d550a21"]]]
  },
  getNormalText : function (a) {
    var b = [["0x0d550a21"], 0];
    0 < a.regionalMissionStarted.amount && (b = [["0x0d550a22"], 0]);
    return b
  }
};
goog.object.extend(simcity.RolloverItems.kRegionalWorksTextFeedback, simcity.RolloverItems.kBasicToyTextFeedback);
simcity.RolloverItems.kLandmarkResidentialTextFeedback = {
  noPrereqText : simcity.StringID.PrereqCityDep,
  additionalInitQueries : function (a) {
    var b = {
      textFeedbackFile : [simcity.kDataUnits, a, "nonSimProperties", simcity.kPropSCUnitRolloverTextFile]
    };
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesRolloverDefault(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesGettingBetterHappiness(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesNormal(a));
    goog.object.extend(b,
      simcity.RolloverItems.RolloverText.initQueriesHappinessShopping(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesHappinessParks(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesHappinessRTaxes(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesUrgentBasic(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesUrgentResidential(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesSadnessBasic(a));
    goog.object.extend(b,
      simcity.RolloverItems.RolloverText.initQueriesDeath(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesCrimeInProgress(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesCrimeAtBuilding(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesRTaxes(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesInjury(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesTraffic(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesMassTransit(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesUnableToUpgrade(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesSickness(a));
    return b
  },
  getTextFeedbackFile : function (a) {
    return a.textFeedbackFile
  },
  additionalUrgentText : function (a) {
    var b = [],
    b = b.concat(simcity.RolloverItems.RolloverText.getUrgentBasic(null, a)),
    b = b.concat(simcity.RolloverItems.RolloverText.getDeath(null, a));
    return b = b.concat(simcity.RolloverItems.RolloverText.getCrimeInProgress(null, a))
  },
  additionalWarningText : function (a) {
    var b =
      simcity.RolloverItems.RolloverText.getGettingBetter(null, a),
    b = b.concat(simcity.RolloverItems.RolloverText.getRTaxes(null, a)),
    b = b.concat(simcity.RolloverItems.RolloverText.getInjury(null, a)),
    b = b.concat(simcity.RolloverItems.RolloverText.getCrimeAtBuilding(null, a)),
    b = b.concat(simcity.RolloverItems.RolloverText.getUnableToUpgrade(null, a)),
    b = b.concat(simcity.RolloverItems.RolloverText.getSickness(null, a)),
    b = b.concat(simcity.RolloverItems.RolloverText.getSadnessBasic(null, a)),
    b = b.concat(simcity.RolloverItems.RolloverText.getTraffic(null,
          a));
    return b = b.concat(simcity.RolloverItems.RolloverText.getMasssTransit(null, a))
  },
  additionalHappinessText : function (a) {
    var b = simcity.RolloverItems.RolloverText.getHappinessRTaxes(null, a),
    b = b.concat(simcity.RolloverItems.RolloverText.getHappinessParks(null, a));
    return b = b.concat(simcity.RolloverItems.RolloverText.getHappinessShopping(null, a))
  },
  getNormalText : function (a) {
    return simcity.RolloverItems.RolloverText.getNormal(null, a)
  },
  UpdateAdditionalText : function () {
    return {
      requiredBuilding : scrui.TextFromLocaleProperty({
        tableID : simcity.StringID.TableUnits,
        stringID : simcity.StringID.DepTourism
      })
    }
  }
};
goog.object.extend(simcity.RolloverItems.kLandmarkResidentialTextFeedback, simcity.RolloverItems.kBasicToyTextFeedback_NoJobs);
simcity.RolloverItems.kLandmarkCommercialTextFeedback = {
  noPrereqText : simcity.StringID.PrereqCityDep,
  additionalInitQueries : function (a) {
    var b = {
      textFeedbackFile : [simcity.kDataUnits, a, "nonSimProperties", simcity.kPropSCUnitRolloverTextFile],
      AudioRollOverOnEvent : [simcity.kDataUnits, a, "nonSimProperties", simcity.cRolloverUI.kPropUnitAudioRolloverOnEvents]
    };
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesRolloverDefault(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesNormal(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesWork(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesHappinessCustomer(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesHappinessCustomerStudent(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesHappinessCustomerTourist(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesHappinessCTaxes(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesHappinessParks(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesUrgentBasic(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesSadnessBasic(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesDeath(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesCTaxes(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesCrimeInProgress(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesCrimeAtBuilding(a));
    goog.object.extend(b,
      simcity.RolloverItems.RolloverText.initQueriesSouvenirs(a));
    goog.object.extend(b, simcity.RolloverItems.RolloverText.initQueriesGettingBetterProfit(a));
    return b
  },
  getTextFeedbackFile : function (a) {
    return a.textFeedbackFile
  },
  additionalUrgentText : function (a) {
    var b = simcity.RolloverItems.RolloverText.getUrgentBasic(null, a),
    b = b.concat(simcity.RolloverItems.RolloverText.getWork(null, a)),
    b = b.concat(simcity.RolloverItems.RolloverText.getDeath(null, a));
    return b = b.concat(simcity.RolloverItems.RolloverText.getCrimeInProgress(null,
          a))
  },
  additionalWarningText : function (a) {
    var b = 4 <= a.happinessDisplay,
    c = simcity.RolloverItems.RolloverText.getGettingBetter(null, a),
    c = c.concat(simcity.RolloverItems.RolloverText.getCrimeAtBuilding(null, a)),
    c = c.concat(simcity.RolloverItems.RolloverText.getUnableToUpgrade(null, a));
    if (!b || !a.normal)
      c = c.concat(simcity.RolloverItems.RolloverText.getSadnessBasic(null, a)), c = c.concat(simcity.RolloverItems.RolloverText.getCTaxes(null, a)), c = c.concat(simcity.RolloverItems.RolloverText.getWorkSadness(null, a)), c =
        c.concat(simcity.RolloverItems.RolloverText.getSouvenirs(null, a));
    return c
  },
  additionalHappinessText : function (a) {
    var b = simcity.RolloverItems.RolloverText.getHappinessCustomer(null, a),
    b = b.concat(simcity.RolloverItems.RolloverText.getHappinessCustomerStudent(null, a)),
    b = b.concat(simcity.RolloverItems.RolloverText.getHappinessCustomerTourist(null, a)),
    b = b.concat(simcity.RolloverItems.RolloverText.getHappinessCTaxes(null, a));
    return b = b.concat(simcity.RolloverItems.RolloverText.getHappinessParks(null, a))
  },
  getNormalText : function (a) {
    return simcity.RolloverItems.RolloverText.getNormal(null, a)
  },
  UpdateAdditionalText : function () {
    return {
      requiredBuilding : scrui.TextFromLocaleProperty({
        tableID : simcity.StringID.TableUnits,
        stringID : simcity.StringID.DepTourism
      })
    }
  }
};
goog.object.extend(simcity.RolloverItems.kLandmarkCommercialTextFeedback, simcity.RolloverItems.kBasicToyTextFeedback_NoJobs);
simcity.RolloverItems.kCasinoTextFeedback = {
  noPrereqText : simcity.StringID.PrereqCityDep,
  additionalInitQueries : function (a) {
    return {
      income : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDCasinoSpecialtyIncomeDisplay],
      expenses : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDCasinoSpecialtyExpensesDisplay]
    }
  },
  additionalUrgentText : function (a) {
    return [[0 > this.getProfit(a) ? 1 : 0, ["0x0f2c9fd9"]]]
  },
  getNormalText : function (a) {
    var b = [["0x0d434f9d"], 0];
    0 < this.getProfit(a) && (b = [["0x0f2c9fd8"],
        0]);
    return b
  },
  UpdateAdditionalText : function (a) {
    return {
      profit : this.getProfit(a)
    }
  },
  getProfit : function (a) {
    return a.income - a.expenses
  }
};
goog.object.extend(simcity.RolloverItems.kCasinoTextFeedback, simcity.RolloverItems.kBasicToyTextFeedback);
simcity.RolloverItems.kAirportTextFeedback = {
  noPrereqText : simcity.StringID.PrereqCityDep,
  additionalInitQueries : function (a) {
    return {
      freight : ["connectedUnits", a, "bins", simcity.kResourceIDFreight],
      Tourists_Daily : ["connectedUnits", a, "bins", simcity.kResourceIDTourists_Daily],
      Tourists_Leaving : ["connectedUnits", a, "bins", simcity.kResourceIDTourist_Leaving]
    }
  },
  additionalWarningText : function (a) {
    var b = !1;
    0 < a.freight.capacity && a.freight.amount == a.freight.capacity && (b = !0);
    return [[b, ["0x0e6820cc"]]]
  },
  UpdateAdditionalText : function (a) {
    return {
      outputFull : scrui.TextFromLocaleProperty({
        tableID : simcity.StringID.TableResource,
        stringID : 242491767
      }),
      people : a.Tourists_Leaving.amount,
      requiredBuilding : scrui.TextFromLocaleProperty({
        tableID : simcity.StringID.TableUnits,
        stringID : simcity.StringID.DepTransportation
      })
    }
  },
  getNormalText : function () {
    return [["0x0ebde492"], 0]
  }
};
goog.object.extend(simcity.RolloverItems.kAirportTextFeedback, simcity.RolloverItems.kBasicToyTextFeedback);
simcity.RolloverItems.kLibraryTextFeedback = {
  noPrereqText : simcity.StringID.PrereqTownHall,
  additionalInitQueries : function (a) {
    return {
      patrons : ["connectedUnits", a, "bins", simcity.kResourceIDTotalShoppers]
    }
  },
  getNormalText : function () {
    return [["0x0e61e109"], 0]
  },
  UpdateAdditionalText : function (a) {
    return {
      people : a.patrons.amount
    }
  }
};
goog.object.extend(simcity.RolloverItems.kLibraryTextFeedback, simcity.RolloverItems.kBasicToyTextFeedback);
simcity.RolloverItems.kTransportationTextFeedback = {
  noPrereqText : simcity.StringID.PrereqCityDep,
  UpdateAdditionalText : function (a) {
    var b = a.passengerType1;
    a.passengerType2 && (b += a.passengerType2);
    return {
      people : b,
      requiredBuilding : scrui.TextFromLocaleProperty({
        tableID : simcity.StringID.TableUnits,
        stringID : simcity.StringID.DepTransportation
      })
    }
  }
};
goog.object.extend(simcity.RolloverItems.kTransportationTextFeedback, simcity.RolloverItems.kBasicToyTextFeedback_NoJobs);
simcity.RolloverItems.kTransportationTextFeedbackBus = {
  noPrereqText : simcity.StringID.PrereqTownHall,
  additionalInitQueries : function () {
    return {
      passengerType1 : [simcity.kDataResourceAmount, simcity.kResourceIDBusPassenger],
      passengerType2 : [simcity.kDataResourceAmount, simcity.kResourceIDCoachPassenger]
    }
  }
};
goog.object.extend(simcity.RolloverItems.kTransportationTextFeedbackBus, simcity.RolloverItems.kTransportationTextFeedback);
simcity.RolloverItems.kTransportationTextFeedbackLightRail = {
  noPrereqText : simcity.StringID.PrereqTownHall,
  additionalInitQueries : function () {
    return {
      passengerType1 : [simcity.kDataResourceAmount, simcity.kResourceIDLightTrainPassenger]
    }
  }
};
goog.object.extend(simcity.RolloverItems.kTransportationTextFeedbackLightRail, simcity.RolloverItems.kTransportationTextFeedback);
simcity.RolloverItems.kTransportationTextFeedbackHeavyRail = {
  noPrereqText : simcity.StringID.PrereqTownHall,
  additionalInitQueries : function () {
    return {
      passengerType1 : [simcity.kDataResourceAmount, simcity.kResourceIDTrainPassenger]
    }
  }
};
goog.object.extend(simcity.RolloverItems.kTransportationTextFeedbackHeavyRail, simcity.RolloverItems.kTransportationTextFeedback);
simcity.RolloverItems.kTownHallTextFeedback = {
  noPrereqText : simcity.StringID.PrereqTownHall,
  additionalInitQueries : function (a) {
    return {
      mayorRatingBin : [simcity.kDataBins, simcity.kResourceIDHappinessGlobals_MayorRating],
      TotalResidential : [simcity.kDataBinAmount, simcity.kResourceIDTotalResidential],
      levelUpNeeded : [simcity.kDataUnits, a, "bins", simcity.kResourceIDHQ_ToNextLevel],
      protesters : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDProtester],
      crime : [simcity.kDataUnits, a, simcity.kDataBinAmount,
        simcity.kResourceIDSadnessFromCrime],
      crimeAtBuilding : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDSadnessFromCrimeAtBuilding],
      death : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDSadnessFromDeath],
      injury : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDSadnessFromInjury],
      desirability : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDSadnessFromNoDesirability],
      power : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDSadnessFromNoPower],
      skill : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDSadnessFromNoSkill],
      noWorkers : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDSadnessFromNotEnoughWorkers],
      operational : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDSadnessFromNotOperational],
      park : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDSadnessFromPark],
      pollution : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDSadnessFromPollution],
      sewage : [simcity.kDataUnits,
        a, simcity.kDataBinAmount, simcity.kResourceIDSadnessFromSewage],
      sickness : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDSadnessFromSickness],
      unemployment : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDSadnessFromUnemployment],
      garbage : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDSadnessFromGarbage],
      garbageRW2 : [simcity.kDataCachedUnits, simcity.cMayorRating.kUIResidentialW1 + 1, simcity.kDataBinAmount, simcity.kResourceIDGarbageDisplay],
      garbageRW3 : [simcity.kDataCachedUnits,
        simcity.cMayorRating.kUIResidentialW1 + 2, simcity.kDataBinAmount, simcity.kResourceIDGarbageDisplay],
      garbageCW2 : [simcity.kDataCachedUnits, simcity.cMayorRating.kUICommercialW2, simcity.kDataBinAmount, simcity.kResourceIDGarbageDisplay],
      garbageCW3 : [simcity.kDataCachedUnits, simcity.cMayorRating.kUICommercialW3, simcity.kDataBinAmount, simcity.kResourceIDGarbageDisplay],
      germs : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDSadnessFromGerms],
      germsRW2 : [simcity.kDataCachedUnits, simcity.cMayorRating.kUIResidentialW1 +
        1, simcity.kDataBinAmount, simcity.kResourceIDGerms],
      germsRW3 : [simcity.kDataCachedUnits, simcity.cMayorRating.kUIResidentialW1 + 2, simcity.kDataBinAmount, simcity.kResourceIDGerms],
      germsCW2 : [simcity.kDataCachedUnits, simcity.cMayorRating.kUICommercialW2, simcity.kDataBinAmount, simcity.kResourceIDGerms],
      germsCW3 : [simcity.kDataCachedUnits, simcity.cMayorRating.kUICommercialW3, simcity.kDataBinAmount, simcity.kResourceIDGerms],
      homeless : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDSadnessFromHomelessness],
      homelessCW2 : [simcity.kDataCachedUnits, simcity.cMayorRating.kUICommercialW2, simcity.kDataBinAmount, simcity.kResourceIDHomeless],
      homelessCW3 : [simcity.kDataCachedUnits, simcity.cMayorRating.kUICommercialW3, simcity.kDataBinAmount, simcity.kResourceIDHomeless],
      education : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDSadnessFromNoEducation],
      knowledgeRW2 : [simcity.kDataCachedUnits, simcity.cMayorRating.kUIResidentialW1 + 1, simcity.kDataBinAmount, simcity.kResourceIDKnowledgeToken],
      knowledgeRW3 : [simcity.kDataCachedUnits,
        simcity.cMayorRating.kUIResidentialW1 + 2, simcity.kDataBinAmount, simcity.kResourceIDKnowledgeToken],
      unpoweredRW1 : [simcity.kDataCachedUnits, simcity.cMayorRating.kUIResidentialW1, simcity.kDataBinAmount, simcity.kResourceIDPowerGlobals_UnpoweredBuildings],
      unpoweredRW2 : [simcity.kDataCachedUnits, simcity.cMayorRating.kUIResidentialW1 + 1, simcity.kDataBinAmount, simcity.kResourceIDPowerGlobals_UnpoweredBuildings],
      unpoweredRW3 : [simcity.kDataCachedUnits, simcity.cMayorRating.kUIResidentialW1 + 2, simcity.kDataBinAmount,
        simcity.kResourceIDPowerGlobals_UnpoweredBuildings],
      unpoweredCW1 : [simcity.kDataCachedUnits, simcity.cMayorRating.kUICommercialW1, simcity.kDataBinAmount, simcity.kResourceIDPowerGlobals_UnpoweredBuildings],
      unpoweredCW2 : [simcity.kDataCachedUnits, simcity.cMayorRating.kUICommercialW2, simcity.kDataBinAmount, simcity.kResourceIDPowerGlobals_UnpoweredBuildings],
      unpoweredCW3 : [simcity.kDataCachedUnits, simcity.cMayorRating.kUICommercialW3, simcity.kDataBinAmount, simcity.kResourceIDPowerGlobals_UnpoweredBuildings],
      unpoweredIW1 : [simcity.kDataCachedUnits, simcity.cMayorRating.kUIIndustrialW1, simcity.kDataBinAmount, simcity.kResourceIDPowerGlobals_UnpoweredBuildings],
      unpoweredIW2 : [simcity.kDataCachedUnits, simcity.cMayorRating.kUIIndustrialW2, simcity.kDataBinAmount, simcity.kResourceIDPowerGlobals_UnpoweredBuildings],
      unpoweredIW3 : [simcity.kDataCachedUnits, simcity.cMayorRating.kUIIndustrialW3, simcity.kDataBinAmount, simcity.kResourceIDPowerGlobals_UnpoweredBuildings],
      rent : [simcity.kDataUnits, a, simcity.kDataBinAmount,
        simcity.kResourceIDSadnessFromNoRent],
      norentRW1 : [simcity.kDataCachedUnits, simcity.cMayorRating.kUIResidentialW1, simcity.kDataBinAmount, simcity.kResourceIDTokensToRemove],
      norentRW2 : [simcity.kDataCachedUnits, simcity.cMayorRating.kUIResidentialW1 + 1, simcity.kDataBinAmount, simcity.kResourceIDTokensToRemove],
      norentRW3 : [simcity.kDataCachedUnits, simcity.cMayorRating.kUIResidentialW1 + 2, simcity.kDataBinAmount, simcity.kResourceIDTokensToRemove],
      norentCW1 : [simcity.kDataCachedUnits, simcity.cMayorRating.kUICommercialW1,
        simcity.kDataBinAmount, simcity.kResourceIDProfitTokensToRemove],
      norentCW2 : [simcity.kDataCachedUnits, simcity.cMayorRating.kUICommercialW2, simcity.kDataBinAmount, simcity.kResourceIDProfitTokensToRemove],
      norentCW3 : [simcity.kDataCachedUnits, simcity.cMayorRating.kUICommercialW3, simcity.kDataBinAmount, simcity.kResourceIDProfitTokensToRemove],
      norentIW1 : [simcity.kDataCachedUnits, simcity.cMayorRating.kUIIndustrialW1, simcity.kDataBinAmount, simcity.kResourceIDProfitTokensToRemove],
      norentIW2 : [simcity.kDataCachedUnits,
        simcity.cMayorRating.kUIIndustrialW2, simcity.kDataBinAmount, simcity.kResourceIDProfitTokensToRemove],
      norentIW3 : [simcity.kDataCachedUnits, simcity.cMayorRating.kUIIndustrialW3, simcity.kDataBinAmount, simcity.kResourceIDProfitTokensToRemove],
      water : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDSadnessFromNoWater],
      unwateredRW1 : [simcity.kDataCachedUnits, simcity.cMayorRating.kUIResidentialW1, simcity.kDataBinAmount, simcity.kResourceIDWaterGlobals_UnwateredBuildings],
      unwateredRW2 : [simcity.kDataCachedUnits,
        simcity.cMayorRating.kUIResidentialW1 + 1, simcity.kDataBinAmount, simcity.kResourceIDWaterGlobals_UnwateredBuildings],
      unwateredRW3 : [simcity.kDataCachedUnits, simcity.cMayorRating.kUIResidentialW1 + 2, simcity.kDataBinAmount, simcity.kResourceIDWaterGlobals_UnwateredBuildings],
      unwateredCW1 : [simcity.kDataCachedUnits, simcity.cMayorRating.kUICommercialW1, simcity.kDataBinAmount, simcity.kResourceIDWaterGlobals_UnwateredBuildings],
      unwateredCW2 : [simcity.kDataCachedUnits, simcity.cMayorRating.kUICommercialW2, simcity.kDataBinAmount,
        simcity.kResourceIDWaterGlobals_UnwateredBuildings],
      unwateredCW3 : [simcity.kDataCachedUnits, simcity.cMayorRating.kUICommercialW3, simcity.kDataBinAmount, simcity.kResourceIDWaterGlobals_UnwateredBuildings],
      unwateredIW1 : [simcity.kDataCachedUnits, simcity.cMayorRating.kUIIndustrialW1, simcity.kDataBinAmount, simcity.kResourceIDWaterGlobals_UnwateredBuildings],
      unwateredIW2 : [simcity.kDataCachedUnits, simcity.cMayorRating.kUIIndustrialW2, simcity.kDataBinAmount, simcity.kResourceIDWaterGlobals_UnwateredBuildings],
      unwateredIW3 : [simcity.kDataCachedUnits, simcity.cMayorRating.kUIIndustrialW3, simcity.kDataBinAmount, simcity.kResourceIDWaterGlobals_UnwateredBuildings],
      taxes : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDSadnessFromTaxes],
      taxLevelRW1 : [simcity.kDataBinAmount, simcity.kResourceIDTaxLevelRW1],
      taxLevelRW2 : [simcity.kDataBinAmount, simcity.kResourceIDTaxLevelRW2],
      taxLevelRW3 : [simcity.kDataBinAmount, simcity.kResourceIDTaxLevelRW3],
      taxLevelCW1 : [simcity.kDataBinAmount, simcity.kResourceIDTaxLevelCW1],
      taxLevelCW2 : [simcity.kDataBinAmount, simcity.kResourceIDTaxLevelCW2],
      taxLevelCW3 : [simcity.kDataBinAmount, simcity.kResourceIDTaxLevelCW3],
      taxLevelIW1 : [simcity.kDataBinAmount, simcity.kResourceIDTaxLevelIW1],
      taxLevelIW2 : [simcity.kDataBinAmount, simcity.kResourceIDTaxLevelIW2],
      taxLevelIW3 : [simcity.kDataBinAmount, simcity.kResourceIDTaxLevelIW3]
    }
  },
  additionalWarningText : function (a) {
    return [[this.getReason(a).highestProtest, ["0x0e61df6a"]]]
  },
  UpdateAdditionalText : function (a) {
    var b = simcity.GetRoundedFudgedPopulation(a.levelUpNeeded.amount) -
      simcity.GetFudgedPopulation(a.TotalResidential.amount);
    0 > b && (b = 0);
    return {
      reason : this.getReason(a).strReason,
      numResidents : b
    }
  },
  getReason : function (a) {
    for (var b = 1 <= a.garbageRW2 + a.garbageRW3 + a.garbageCW2 + a.garbageCW3, c = 1 <= a.germsRW2 + a.germsRW3 + a.germsRW2 + a.germsRW3, d = 1 <= a.homelessCW2 + a.homelessCW3, e = 0 == a.knowledgeRW2 + a.knowledgeRW3, f = 1 <= a.unpoweredRW1 + a.unpoweredRW2 + a.unpoweredRW3 + a.unpoweredCW1 + a.unpoweredCW2 + a.unpoweredCW3 + a.unpoweredIW1 + a.unpoweredIW2 + a.unpoweredIW3, g = 1 <= a.norentRW1 + a.norentRW2 + a.norentRW3 +
        a.norentCW1 + a.norentCW2 + a.norentCW3 + a.norentIW1 + a.norentIW2 + a.norentIW3, h = a.unwateredRW1 + a.unwateredRW2 + a.unwateredRW3 + a.unwateredCW1 + a.unwateredCW2 + a.unwateredCW3 + a.unwateredIW1 + a.unwateredIW2 + a.unwateredIW3, i = a.taxLevelRW1 >= simcity.SimTuning.sadnessTaxLevelRW1 || a.taxLevelRW2 >= simcity.SimTuning.sadnessTaxLevelRW2 || a.taxLevelRW3 >= simcity.SimTuning.sadnessTaxLevelRW3 || a.taxLevelCW1 >= simcity.SimTuning.sadnessTaxLevelCW1 || a.taxLevelCW2 >= simcity.SimTuning.sadnessTaxLevelCW2 || a.taxLevelCW3 >= simcity.SimTuning.sadnessTaxLevelCW3 ||
        a.taxLevelIW1 >= simcity.SimTuning.sadnessTaxLevelIW1 || a.taxLevelIW2 >= simcity.SimTuning.sadnessTaxLevelIW2 || a.taxLevelIW3 >= simcity.SimTuning.sadnessTaxLevelIW3, d = [[a.crime, 241634214], [a.crimeAtBuilding, 241634214], [a.death, 250104656], [b ? a.garbage : 0, 241634211], [b ? 0 : a.garbage, 253199519], [c ? a.germs : 0, 250104657], [c ? 0 : a.germs, 253199520], [d ? a.homeless : 0, 250104658], [d ? 0 : a.homeless, 253199521], [e ? a.education : 0, 250104660], [e ? 0 : a.education, 253199522], [f ? a.power : 0, 241634210], [f ? 0 : a.power, 253199523], [g ? a.rent : 0,
          241634212], [g ? 0 : a.rent, 253199524], [h ? a.water : 0, 241634209], [h ? 0 : a.water, 253199525], [i ? a.taxes : 0, 241295627], [i ? 0 : a.taxes, 241295627], [a.injury, 250104659], [a.desirability, 241634213], [a.skill, 250104660], [a.noWorkers, 250104661], [a.operational, 250104661], [a.pollution, 241634208], [a.sewage, 250104662], [a.sickness, 241295628], [a.unemployment, 250104663]], b = 0, c = "null", e = 0; e < d.length; e++)
      d[e][0] > b && (b = d[e][0], c = d[e][1]);
    d = 0;
    0 < b && 0 < a.protesters && (10 < b && 2E3 > a.TotalResidential ? d = b : 50 < b && 1E4 > a.TotalResidential ? d = b :
        100 < b && 2E4 > a.TotalResidential ? d = b : 150 < b && 2E4 <= a.TotalResidential && (d = b));
    return {
      highestProtest : d,
      strReason : 0 < d ? scrui.TextFromLocaleProperty({
        tableID : simcity.StringID.TableTextFeedbackToyRollover,
        stringID : c
      }) : ""
    }
  }
};
goog.object.extend(simcity.RolloverItems.kTownHallTextFeedback, simcity.RolloverItems.kBasicToyTextFeedback);
simcity.RolloverItems.kGenericStudentTextFeedback = {
  noPrereqText : simcity.StringID.PrereqCityDep,
  additionalInitQueries : function (a) {
    var b = {
      Student : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDStudent],
      TotalStudents : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTotalStudents],
      ExamsPassedE3 : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDExamsPassedE3],
      ExamsPassedE2 : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDExamsPassedE2],
      SpotsForKids : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDSpotsForKids],
      OverCrowding : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDOverCrowding]
    };
    this.additionalQueries && goog.object.extend(b, this.additionalQueries(a));
    return b
  },
  getNormalText : function (a) {
    var b = [["0x0e65bc88"], 0];
    if (0 < (a.ExamsPassedE2 ? a.ExamsPassedE2 : 0) + (a.ExamsPassedE3 ? a.ExamsPassedE3 : 0) && 0 === a.Student)
      b = [["0x0e97f60a"], 0];
    return b
  },
  UpdateAdditionalText : function (a) {
    this.getText && this.getText(a);
    var b = {
      requiredBuilding : scrui.TextFromLocaleProperty({
        tableID : simcity.StringID.TableUnits,
        stringID : simcity.StringID.DepEducation
      }),
      people : a.TotalStudents
    },
    c = a.ExamsPassedE2 ? a.ExamsPassedE2 : 0,
    d = a.ExamsPassedE3 ? a.ExamsPassedE3 : 0;
    0 < c + d && 0 === a.Student.amount && goog.object.extend(b, {
      people : c + d
    });
    return b
  }
};
goog.object.extend(simcity.RolloverItems.kGenericStudentTextFeedback, simcity.RolloverItems.kBasicToyTextFeedback);
simcity.RolloverItems.kUniversityTextFeedback = {
  noPrereqText : simcity.StringID.PrereqCityDep,
  additionalQueries : function () {
    return {
      UniversityStudents : [simcity.kDataBinAmount, simcity.kResourceIDUniversityStudents]
    }
  },
  additionalWarningText : function (a) {
    return [[a.Student >= a.SpotsForKids + a.Student - a.OverCrowding, ["0x0ef1430c"]]]
  },
  getText : function (a) {
    a.TotalStudents != a.UniversityStudents && (a.TotalStudents = a.UniversityStudents)
  }
};
goog.object.extend(simcity.RolloverItems.kUniversityTextFeedback, simcity.RolloverItems.kGenericStudentTextFeedback);
simcity.RolloverItems.kSecondaryEducationTextFeedback = {
  noPrereqText : simcity.StringID.PrereqCityDep,
  additionalWarningText : function (a) {
    return [[a.Student >= a.SpotsForKids + a.Student - a.OverCrowding, ["0x0e65bcee"]]]
  }
};
goog.object.extend(simcity.RolloverItems.kSecondaryEducationTextFeedback, simcity.RolloverItems.kGenericStudentTextFeedback);
simcity.RolloverItems.kEducationTextFeedback = {
  noPrereqText : simcity.StringID.PrereqCityDep,
  additionalWarningText : function (a) {
    return [[a.Student >= a.SpotsForKids.amount + a.Student - a.OverCrowding, ["0x0e65bc89"]]]
  }
};
goog.object.extend(simcity.RolloverItems.kEducationTextFeedback, simcity.RolloverItems.kGenericStudentTextFeedback);
simcity.RolloverItems.kPowerProducerTextFeedback = {
  noPrereqText : simcity.StringID.PrereqTownHall,
  additionalInitQueries : function () {
    return {
      production : [simcity.kDataResourceAmount, simcity.kResourcePowerProduction],
      needed : [simcity.kDataBinAmount, simcity.kResourceIDPowerNeeded]
    }
  },
  additionalWarningText : function (a) {
    return [[a.needed >= a.production, ["0x0e571dd3"]]]
  },
  getNormalText : function () {
    return [["0x0e571dc8"], 0]
  }
};
goog.object.extend(simcity.RolloverItems.kPowerProducerTextFeedback, simcity.RolloverItems.kBasicToyTextFeedback);
simcity.RolloverItems.kPowerProducerSolarTextFeedback = {
  noPrereqText : simcity.StringID.PrereqTownHall,
  additionalInitQueries : function (a) {
    return {
      ActivePowerModules : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDActivePowerModules],
      production : [simcity.kDataResourceAmount, simcity.kResourcePowerProduction],
      peak : ["connectedUnits", a, "bins", simcity.kResourceIDPeakPower],
      powerToTransmit : ["connectedUnits", a, "bins", simcity.kResourceIDPowerToTransmit],
      hour : [simcity.kDataBinAmount, simcity.kResourceIDHour],
      needed : [simcity.kDataBinAmount, simcity.kResourceIDPowerNeeded],
      stored : ["connectedUnits", a, "bins", simcity.kResourceIDStoredPower],
      numberOfSolarBatteries : ["units", a, "bins", simcity.kResourceIDPower_NumberOfSolarBatteries],
      onFlag : ["units", a, "flags", simcity.kUnitFlagActiveBuilding]
    }
  },
  additionalWarningText : function (a) {
    return [[1 > a.powerToTransmit.amount && a.onFlag, ["0x0e571dd5"]], [6 > a.hour || 18 <= a.hour, ["0x0e571dd4"]], [a.needed >= a.production.amount, ["0x0e571dd3"]]]
  },
  getNormalText : function () {
    return [["0x0e571dc8"],
      0]
  }
};
goog.object.extend(simcity.RolloverItems.kPowerProducerSolarTextFeedback, simcity.RolloverItems.kBasicToyTextFeedback);
simcity.RolloverItems.kPowerProducerWindTextFeedback = {
  noPrereqText : simcity.StringID.PrereqTownHall,
  additionalInitQueries : function (a) {
    return {
      ActivePowerModules : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDActivePowerModules],
      production : [simcity.kDataResourceAmount, simcity.kResourcePowerProduction],
      peak : ["units", a, "bins", simcity.kResourceIDPeakPower],
      windSpeed : ["connectedUnits", a, "bins", simcity.kResourceIDWindSpeed],
      powerToTransmit : ["connectedUnits", a, "bins", simcity.kResourceIDPowerToTransmit],
      powerToTransmitLocal : ["units", a, "bins", simcity.kResourceIDPowerToTransmit],
      needed : [simcity.kDataBinAmount, simcity.kResourceIDPowerNeeded],
      stored : ["connectedUnits", a, "bins", simcity.kResourceIDStoredPower],
      numberOfWindBatteries : ["units", a, "bins", simcity.kResourceIDPower_NumberOfWindBatteries]
    }
  },
  additionalWarningText : function (a) {
    var b = a.powerToTransmit.amount - a.powerToTransmitLocal.amount,
    c = 0 < a.numberOfWindBatteries.amount,
    d = b < a.peak.amount / 2 && 10 > a.stored.amount;
    return [[b < a.peak.amount / 2 && 9 < a.stored.amount &&
        0 < a.numberOfWindBatteries.amount, ["0x0e571dd4"]], [d && c ? 1 : 0, ["0x0e571dd5"]], [0 === a.windSpeed.amount && b <= a.peak.amount / 2, ["0x0e571dd1"]], [d && a.ActivePowerModules <= a.numberOfWindBatteries.amount ? 10 : 0, ["0x0f06bb2c"]], [a.needed >= a.production.amount, ["0x0e571dd3"]]]
  },
  getNormalText : function () {
    return [["0x0e571dc8"], 0]
  }
};
goog.object.extend(simcity.RolloverItems.kPowerProducerWindTextFeedback, simcity.RolloverItems.kBasicToyTextFeedback);
simcity.RolloverItems.kResourceBasedPowerPlantTextFeedback = {
  SkipUnpowered : !0,
  additionalInitQueries : function (a) {
    var b = {
      ActivePowerModules : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDActivePowerModules],
      production : [simcity.kDataResourceAmount, simcity.kResourcePowerProduction],
      needed : [simcity.kDataBinAmount, simcity.kResourceIDPowerNeeded],
      inputAmount : [simcity.kDataConnectedUnits, a, simcity.kDataProperties, simcity.kPropPowerProducer_ResourceInputAmount]
    };
    this.additionalQueries &&
    goog.object.extend(b, this.additionalQueries(a));
    return b
  },
  additionalUrgentText : function (a) {
    return [[a.resource.amount < a.inputAmount ? 100 : 0, ["0x0e61e10a"]], [a.resource.amount < a.inputAmount ? 100 : 0, ["0x0e61e10a"]]]
  },
  additionalWarningText : function (a) {
    var b = a.resource.amount,
    c = a.resource.capacity;
    return [[0 < b && b < 0.1 * c, ["0x0d9e25d5"]], [b > 0.1 * c && b < 0.25 * c, ["0x0d9e25b7"]], [0 == a.ActivePowerModules, ["0x0f06bb2a"]], [a.needed >= a.production, ["0x0e571dd3"]]]
  },
  getNormalText : function () {
    return [["0x0e571dc8"], 0]
  }
};
goog.object.extend(simcity.RolloverItems.kResourceBasedPowerPlantTextFeedback, simcity.RolloverItems.kBasicToyTextFeedback);
simcity.RolloverItems.kCoalPowerPlantTextFeedback = {
  additionalQueries : function (a) {
    return {
      resource : [simcity.kDataConnectedUnits, a, simcity.kDataBins, simcity.kResourceIDCoal]
    }
  },
  UpdateAdditionalText : function () {
    return {
      resource : scrui.TextFromLocaleProperty({
        tableID : simcity.StringID.TableResource,
        stringID : simcity.StringID.Coal
      })
    }
  }
};
goog.object.extend(simcity.RolloverItems.kCoalPowerPlantTextFeedback, simcity.RolloverItems.kResourceBasedPowerPlantTextFeedback);
simcity.RolloverItems.kOilPowerPlantTextFeedback = {
  additionalQueries : function (a) {
    return {
      resource : [simcity.kDataConnectedUnits, a, simcity.kDataBins, simcity.kResourceIDOilCrude]
    }
  },
  UpdateAdditionalText : function () {
    return {
      resource : scrui.TextFromLocaleProperty({
        tableID : simcity.StringID.TableResource,
        stringID : simcity.StringID.Oil
      })
    }
  }
};
goog.object.extend(simcity.RolloverItems.kOilPowerPlantTextFeedback, simcity.RolloverItems.kResourceBasedPowerPlantTextFeedback);
simcity.RolloverItems.kNuclearPowerPlantTextFeedback = {
  SkipUnpowered : !0,
  additionalInitQueries : function (a) {
    return {
      ActivePowerModules : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDActivePowerModules],
      LowSkill : ["connectedUnits", a, simcity.kDataBinAmount, simcity.kResourceIDLowSkill],
      production : [simcity.kDataBinAmount, simcity.kResourcePowerProduction],
      needed : [simcity.kDataBinAmount, simcity.kResourceIDPowerNeeded],
      meltDownImminent : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount,
        simcity.kResourceIDMeltdown_TimerImminent],
      meltdownRecent : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDDisasterMeltdown_TimerRecentMeltdown]
    }
  },
  additionalUrgentText : function (a) {
    return [[0 < a.meltDownImminent, ["0x0f0fb266"]]]
  },
  additionalWarningText : function (a) {
    return [[a.needed >= a.production, ["0x0e571dd3"]], [0 < a.LowSkill, ["0x0df17979"]], [0 == a.ActivePowerModules, ["0x0f06bb2a"]], [0 < a.meltdownRecent, ["0x0f0fb267"]]]
  },
  getNormalText : function () {
    return [["0x0e571dc8"], 0]
  }
};
goog.object.extend(simcity.RolloverItems.kNuclearPowerPlantTextFeedback, simcity.RolloverItems.kBasicToyTextFeedback);
simcity.RolloverItems.kManufacturingTextFeedback = {
  noPrereqText : simcity.StringID.PrereqCityDep,
  outputText : 0,
  outputTextInputOffset : 2,
  additionalInitQueries : function (a) {
    var b = {
      activeBuilding : ["connectedUnits", a, "bins", simcity.kResourceIDActiveBuilding]
    };
    this.additionalInitQueries2 && goog.object.extend(b, this.additionalInitQueries2(a));
    return b
  },
  additionalUrgentText : function (a) {
    if (0 == a.activeBuilding.amount)
      return [[0, ["0x0e6820cb"]]];
    if (1 < a.activeBuilding.amount) {
      var b = [];
      this.updateRecipies && goog.object.extend(b,
        this.updateRecipies(a));
      for (var c, d, e = 0, f = this.outputText = 0; f < b.length; f++)
        c = b[f][0], 0 < c.capacity && (e = b[f][6], e = [scrui.TextFromLocaleProperty({
              tableID : simcity.StringID.TableResource,
              stringID : b[f][1]
            }), e], c.capacity == c.amount ? e.full = 1 : (e.full = 0, c = b[f][2], d = b[f][4], c && 0 == c.amount && e.push(scrui.TextFromLocaleProperty({
                  tableID : simcity.StringID.TableResource,
                  stringID : b[f][3]
                })), d && 0 == d.amount && e.push(scrui.TextFromLocaleProperty({
                  tableID : simcity.StringID.TableResource,
                  stringID : b[f][5]
                }))), this.outputText ?
          this.outputText.push(e) : this.outputText = [e])
    }
    d = e = b = 0;
    if (this.outputText) {
      this.outputText.sort(function (a, b) {
        return a.length < b.length ? 1 : a.length > b.length ? -1 : 0
      });
      for (f = 0; f < this.outputText.length; f++)
        c = this.outputText[f], e++, c.full ? d++ : c.length > this.outputTextInputOffset && b++
    }
    f = 0;
    if (1 == a.activeBuilding.amount || 0 == e)
      f = 2;
    return [[f, ["0x0e6965b5"]], [b && e == b, ["0x0e6820cb"]], [d && e == d, ["0x0e6820cd"]]]
  },
  additionalWarningText : function () {
    var a = 0,
    b = 0,
    c = 0;
    if (this.outputText)
      for (var d = 0; d < this.outputText.length; d++) {
        var e =
          this.outputText[d];
        b++;
        e.full ? c++ : e.length > this.outputTextInputOffset && a++
      }
    return [[a && b > a, ["0x0e6820ca"]], [c && b > c, ["0x0e6820cc"]]]
  },
  getNormalText : function (a) {
    if (this.getNormalTextOverride && (a = this.getNormalTextOverride(a)))
      return a;
    a = [["0x0e6964b6"], 0];
    switch (this.outputText.length) {
    case 1:
      a = [["0x0e6820ce"], 0];
      break;
    case 2:
      a = [["0x0e6820cf"], 0];
      break;
    case 3:
      a = [["0x0ef18e41"], 0]
    }
    return a
  },
  UpdateAdditionalText : function () {
    var a = 0,
    b = ["null", "null"],
    c = ["null", "null", "null"],
    d = [0, 0],
    e = "null";
    if (this.outputText)
      for (var f =
          0; f < this.outputText.length; f++) {
        a = this.outputText[f];
        a.full && (e = a[0]);
        b[f] = a[0];
        d[f] = a[1];
        for (var g = this.outputTextInputOffset; g < a.length; g++)
          c[g - this.outputTextInputOffset] = a[g]
      }
    return {
      requiredBuilding : scrui.TextFromLocaleProperty({
        tableID : simcity.StringID.TableUnits,
        stringID : simcity.StringID.DepUtilities
      }),
      outputFull : e,
      input : c[0],
      output : b[0],
      output1 : b[1],
      output2 : b[2],
      amount : d[0],
      amount1 : d[1]
    }
  }
};
goog.object.extend(simcity.RolloverItems.kManufacturingTextFeedback, simcity.RolloverItems.kBasicToyTextFeedback);
simcity.RolloverItems.kSmeltingTextFeedback = {
  additionalInitQueries2 : function (a) {
    return {
      Alloy : ["connectedUnits", a, "bins", simcity.kResourceIDAlloy],
      AlloyProduced : ["connectedUnits", a, "bins", simcity.kResourceIDAlloyProducedDisplay],
      Coal : ["connectedUnits", a, "bins", simcity.kResourceIDCoal],
      Metal : ["connectedUnits", a, "bins", simcity.kResourceIDMetal],
      MetalProduced : ["connectedUnits", a, "bins", simcity.kResourceIDMetalProducedDisplay],
      Ore : ["connectedUnits", a, "bins", simcity.kResourceIDOreRaw]
    }
  },
  updateRecipies : function (a) {
    return [[a.Alloy,
        simcity.StringID.Alloy, a.Ore, simcity.StringID.Ore, a.Coal, simcity.StringID.Coal, a.AlloyProduced.amount], [a.Metal, simcity.StringID.Metal, a.Ore, simcity.StringID.Ore, 0, "null", a.MetalProduced.amount]]
  }
};
goog.object.extend(simcity.RolloverItems.kSmeltingTextFeedback, simcity.RolloverItems.kManufacturingTextFeedback);
simcity.RolloverItems.kRefineryTextFeedback = {
  additionalInitQueries2 : function (a) {
    return {
      Fuel : ["connectedUnits", a, "bins", simcity.kResourceIDFuel],
      FuelProduced : ["connectedUnits", a, "bins", simcity.kResourceIDFuelProducedDisplay],
      OilCrude : ["connectedUnits", a, "bins", simcity.kResourceIDOilCrude],
      Plastic : ["connectedUnits", a, "bins", simcity.kResourceIDPlastic],
      PlasticProduced : ["connectedUnits", a, "bins", simcity.kResourceIDPlasticProducedDisplay]
    }
  },
  updateRecipies : function (a) {
    return [[a.Fuel, simcity.StringID.Fuel,
        a.OilCrude, simcity.StringID.Oil, 0, "null", a.FuelProduced.amount], [a.Plastic, simcity.StringID.Plastic, a.OilCrude, simcity.StringID.Oil, 0, "null", a.PlasticProduced.amount]]
  }
};
goog.object.extend(simcity.RolloverItems.kRefineryTextFeedback, simcity.RolloverItems.kManufacturingTextFeedback);
simcity.RolloverItems.kElectronicsT1TextFeedback = {
  additionalInitQueries2 : function (a) {
    return {
      Electronics : ["connectedUnits", a, "bins", simcity.kResourceIDElectronics],
      ElectronicsProduced : ["connectedUnits", a, "bins", simcity.kResourceIDElectronicsProducedDisplay],
      Plastic : ["connectedUnits", a, "bins", simcity.kResourceIDPlastic],
      Alloy : ["connectedUnits", a, "bins", simcity.kResourceIDAlloy]
    }
  },
  updateRecipies : function (a) {
    return [[a.Electronics, simcity.StringID.Electronics, a.Alloy, simcity.StringID.Alloy, a.Plastic, simcity.StringID.Plastic,
        a.ElectronicsProduced.amount]]
  }
};
goog.object.extend(simcity.RolloverItems.kElectronicsT1TextFeedback, simcity.RolloverItems.kManufacturingTextFeedback);
simcity.RolloverItems.kElectronicsT2TextFeedback = {
  additionalInitQueries2 : function (a) {
    return {
      Computer : ["connectedUnits", a, "bins", simcity.kResourceIDComputer],
      ComputerProduced : ["connectedUnits", a, "bins", simcity.kResourceIDComputerProducedDisplay],
      Television : ["connectedUnits", a, "bins", simcity.kResourceIDTelevision],
      TelevisionProduced : ["connectedUnits", a, "bins", simcity.kResourceIDTelevisionProducedDisplay],
      Electronics : ["connectedUnits", a, "bins", simcity.kResourceIDElectronics],
      Plastic : ["connectedUnits",
        a, "bins", simcity.kResourceIDPlastic],
      Alloy : ["connectedUnits", a, "bins", simcity.kResourceIDAlloy]
    }
  },
  updateRecipies : function (a) {
    return [[a.Computer, simcity.StringID.Computer, a.Electronics, simcity.StringID.Electronics, a.Alloy, simcity.StringID.Alloy, a.ComputerProduced.amount], [a.Television, simcity.StringID.Television, a.Electronics, simcity.StringID.Electronics, a.Plastic, simcity.StringID.Plastic, a.TelevisionProduced.amount]]
  }
};
goog.object.extend(simcity.RolloverItems.kElectronicsT2TextFeedback, simcity.RolloverItems.kManufacturingTextFeedback);
simcity.RolloverItems.kRecyclingCenterTextFeedback = {
  noPrereqText : simcity.StringID.PrereqCityDep,
  additionalInitQueries2 : function (a) {
    return {
      RecyclingTruck : ["connectedUnits", a, "bins", simcity.kResourceIDRecyclingTruck],
      Plastic : ["connectedUnits", a, "bins", simcity.kResourceIDPlastic],
      PlasticProduced : ["connectedUnits", a, "bins", simcity.kResourceIDPlasticProducedDisplay],
      Alloy : ["connectedUnits", a, "bins", simcity.kResourceIDAlloy],
      AlloyProduced : ["connectedUnits", a, "bins", simcity.kResourceIDAlloyProducedDisplay],
      Metal : ["connectedUnits", a, "bins", simcity.kResourceIDMetal],
      MetalProduced : ["connectedUnits", a, "bins", simcity.kResourceIDMetalProducedDisplay],
      recyclables : ["connectedUnits", a, "bins", simcity.kResourceIDRecyclables]
    }
  },
  updateRecipies : function (a) {
    return [[a.Alloy, simcity.StringID.Alloy, a.recyclables, simcity.StringID.Recyclables, 0, "null", a.AlloyProduced.amount], [a.Metal, simcity.StringID.Metal, a.recyclables, simcity.StringID.Recyclables, 0, "null", a.AlloyProduced.amount], [a.Plastic, simcity.StringID.Plastic, a.recyclables,
        simcity.StringID.Recyclables, 0, "null", a.PlasticProduced.amount]]
  },
  getNormalTextOverride : function (a) {
    return a.RecyclingTruck.amount == a.RecyclingTruck.capacity ? [["0x0e572e5a"], 0] : null
  }
};
goog.object.extend(simcity.RolloverItems.kRecyclingCenterTextFeedback, simcity.RolloverItems.kManufacturingTextFeedback);
simcity.RolloverItems.kFireStationTemplateTextFeedback = {
  additionalWarningText : function (a) {
    return [[0 == a.FireTruck.amount && 0 !== a.FireTruck.capacity, ["0x0e572e07"]]]
  },
  getNormalText : function (a) {
    var b = [["0x0e572ddf"], 0];
    a.FireTruck.amount < a.FireTruck.capacity && 0 !== a.FireTruck.capacity && (b = [["0x0e572e06"], 0]);
    return b
  }
};
goog.object.extend(simcity.RolloverItems.kFireStationTemplateTextFeedback, simcity.RolloverItems.kBasicToyTextFeedback);
simcity.RolloverItems.kT2FireStationTextFeedback = {
  noPrereqText : simcity.StringID.PrereqCityDep,
  additionalInitQueries : function (a) {
    return {
      FireTruck : ["connectedUnits", a, "bins", simcity.kResourceIDFireTruckT2]
    }
  },
  UpdateAdditionalText : function () {
    return {
      requiredBuilding : scrui.TextFromLocaleProperty({
        tableID : simcity.StringID.TableUnits,
        stringID : simcity.StringID.DepSafety
      })
    }
  }
};
goog.object.extend(simcity.RolloverItems.kT2FireStationTextFeedback, simcity.RolloverItems.kFireStationTemplateTextFeedback);
simcity.RolloverItems.kT1FireStationTextFeedback = {
  noPrereqText : simcity.StringID.PrereqTownHall,
  additionalInitQueries : function (a) {
    return {
      FireTruck : ["connectedUnits", a, "bins", simcity.kResourceIDFireTruckT1]
    }
  }
};
goog.object.extend(simcity.RolloverItems.kT1FireStationTextFeedback, simcity.RolloverItems.kFireStationTemplateTextFeedback);
simcity.RolloverItems.PoliceStationTextFeedback = {
  noPrereqText : simcity.StringID.PrereqCityDep,
  additionalInitQueries : function (a) {
    return {
      Police : ["connectedUnits", a, "bins", simcity.kResourceIDPolice],
      TotalCells : ["connectedUnits", a, "bins", simcity.kResourceIDTotalCells],
      OpenCells : ["connectedUnits", a, "bins", simcity.kResourceIDOpenCells]
    }
  },
  additionalWarningText : function (a) {
    return [[0 == a.Police.amount && 0 !== a.Police.capacity, ["0x0e61e104"]], [0 < a.OpenCells.amount && a.TotalCells.amount - a.OpenCells.amount >= 0.8 * a.TotalCells.amount,
        ["0x0e61e105"]], [0 == a.OpenCells.amount, ["0x0e61e106"]]]
  },
  getNormalText : function (a) {
    var b = [["0x0e61df6f"], 0];
    a.Police.amount < a.Police.capacity && 0 !== a.Police.capacity && (b = [["0x0e61e103"], 0]);
    return b
  },
  UpdateAdditionalText : function () {
    return {
      requiredBuilding : scrui.TextFromLocaleProperty({
        tableID : simcity.StringID.TableUnits,
        stringID : simcity.StringID.DepSafety
      })
    }
  }
};
goog.object.extend(simcity.RolloverItems.PoliceStationTextFeedback, simcity.RolloverItems.kBasicToyTextFeedback);
simcity.RolloverItems.kGarbageDumpTextFeedback = {
  noPrereqText : simcity.StringID.PrereqTownHall,
  additionalInitQueries : function (a) {
    return {
      garbage : ["connectedUnits", a, "bins", simcity.kResourceIDGarbage],
      garbageTruck : ["connectedUnits", a, "bins", simcity.kResourceIDGarbageTruck],
      hour : [simcity.kDataBinAmount, simcity.kResourceIDHour]
    }
  },
  additionalUrgentText : function (a) {
    return [[a.garbage.amount >= a.garbage.capacity, ["0x0e572e40"]]]
  },
  additionalWarningText : function (a) {
    return [[a.garbage.amount > 0.95 * a.garbage.capacity,
        ["0x0e572e3f"]]]
  },
  getNormalText : function (a) {
    return a.garbageTruck.amount < a.garbageTruck.capacity ? [["0x0e572e3e"], 0] : [["0x0e572e5a"], 0]
  }
};
goog.object.extend(simcity.RolloverItems.kGarbageDumpTextFeedback, simcity.RolloverItems.kBasicToyTextFeedback);
simcity.RolloverItems.kRecyclingTextFeedback = {
  noPrereqText : simcity.StringID.PrereqTownHall,
  additionalInitQueries : function (a) {
    return {
      recyclables : ["connectedUnits", a, "bins", simcity.kResourceIDRecyclables],
      plastic : ["connectedUnits", a, "bins", simcity.kResourceIDPlastic],
      metal : ["connectedUnits", a, "bins", simcity.kResourceIDMetal],
      alloy : ["connectedUnits", a, "bins", simcity.kResourceIDAlloy],
      rTruck : ["connectedUnits", a, "bins", simcity.kResourceIDRecyclingTruck],
      hour : [simcity.kDataBinAmount, simcity.kResourceIDHour]
    }
  },
  additionalWarningText : function (a) {
    return [[10 < a.recyclables.amount, ["0x0e561e40"]], [5E3 <= a.plastic.amount, ["0x0e561e43"]], [5E3 <= a.metal.amount, ["0x0e561e41"]], [5E3 <= a.alloy.amount, ["0x0e561e42"]]]
  },
  getNormalText : function (a) {
    return 0 === a.rTruck.amount ? [["0x0e572e3a"], 0] : [["0x0e572e5a"], 0]
  }
};
goog.object.extend(simcity.RolloverItems.kRecyclingTextFeedback, simcity.RolloverItems.kBasicToyTextFeedback);
simcity.RolloverItems.kWaterProducerTextFeedback = {
  noPrereqText : simcity.StringID.PrereqCityDep,
  additionalInitQueries : function (a) {
    return {
      germs : [simcity.kDataConnectedUnits, a, simcity.kDataBins, simcity.kResourceIDGermsInPump],
      openForBusiness : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDOpenForBusiness],
      WaterTableDry : [simcity.kDataConnectedUnits, a, simcity.kDataBins, simcity.kResourceIDWaterTableDry],
      WaterInMap : [simcity.kDataConnectedUnits, a, simcity.kDataBins, simcity.kResourceIDWaterInMap]
    }
  },
  additionalUrgentText : function (a) {
    return [[100 * (a.germs.amount / a.germs.capacity) > simcity.Water.kPollutionHigh, ["0x0e572e7a"]], [0 < a.WaterTableDry.amount, ["0x0e572e7c"]], [1 >= a.openForBusiness, ["0x0f0bb956"]]]
  },
  additionalWarningText : function (a) {
    return [[100 * (a.germs / a.germs.capacity) > simcity.Water.kPollutionMedium, ["0x0e572e7a"]], [a.WaterInMap.amount <= 0.1 * a.WaterInMap.capacity, ["0x0e572e7b"]]]
  },
  getNormalText : function () {
    return [["0x0e572e79"], 0]
  },
  UpdateAdditionalText : function () {
    return {
      requiredBuilding : scrui.TextFromLocaleProperty({
        tableID : simcity.StringID.TableUnits,
        stringID : simcity.StringID.DepUtilities
      })
    }
  }
};
goog.object.extend(simcity.RolloverItems.kWaterProducerTextFeedback, simcity.RolloverItems.kBasicToyTextFeedback);
simcity.RolloverItems.kWaterProducerTextFeedback_NoJobs = {
  additionalInitQueries : function (a) {
    return {
      germs : [simcity.kDataConnectedUnits, a, simcity.kDataBins, simcity.kResourceIDGermsInPump],
      WaterTableDry : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDWaterTableDry],
      WaterInMap : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDWaterInMap]
    }
  },
  additionalUrgentText : function (a) {
    return [[100 * (a.germs.amount / a.germs.capacity) > simcity.Water.kPollutionHigh, ["0x0e572e7a"]], [0 < a.WaterTableDry.amount,
        ["0x0e572e7c"]]]
  },
  additionalWarningText : function (a) {
    return [[100 * (a.germs.amount / a.germs.capacity) > simcity.Water.kPollutionMedium, ["0x0e572e7a"]], [a.WaterInMap.amount <= 0.1 * a.WaterInMap.capacity, ["0x0e572e7b"]]]
  },
  getNormalText : function () {
    return [["0x0e572e79"], 0]
  }
};
goog.object.extend(simcity.RolloverItems.kWaterProducerTextFeedback_NoJobs, simcity.RolloverItems.kBasicToyTextFeedback_NoJobs);
simcity.RolloverItems.kCulturalVenueTextFeedback = {
  additionalInitQueries : function (a) {
    return {
      patrons : ["connectedUnits", a, "bins", simcity.kResourceIDTotalShoppers]
    }
  },
  additionalWarningText : function (a) {
    return [[a.patrons.amount >= 0.75 * a.patrons.capacity, ["0x0d780ae8"]]]
  },
  additionalUrgentText : function (a) {
    return [[a.patrons.amount >= a.patrons.capacity, ["0x0d780a7a"]]]
  }
};
goog.object.extend(simcity.RolloverItems.kCulturalVenueTextFeedback, simcity.RolloverItems.kBasicToyTextFeedback);
simcity.RolloverItems.kParkTextFeedback = {
  additionalInitQueries : function (a) {
    return {
      homeless : ["connectedUnits", a, "bins", simcity.kResourceIDHomeless]
    }
  },
  additionalWarningText : function (a) {
    return [[3 < a.homeless.amount, ["0x0d70daf4"]]]
  },
  additionalUrgentText : function (a) {
    return [[20 < a.homeless.amount, ["0x0d70daf6"]]]
  }
};
goog.object.extend(simcity.RolloverItems.kParkTextFeedback, simcity.RolloverItems.kBasicToyTextFeedback);
simcity.RolloverItems.kHealthTemplateTextFeedback = {
  iconPath : "Graphics/Common/Icons/icn_similian_white.png",
  additionalInitQueries : function (a) {
    return {
      unitName : [simcity.kDataUnits, a, simcity.kDataUnitName],
      waitingRoom : ["connectedUnits", a, "bins", simcity.kResourceIDWaitingRoom],
      roomsOccupied : ["connectedUnits", a, "bins", simcity.kResourceIDRoomsOccupied]
    }
  },
  additionalWarningText : function (a) {
    return [[a.waitingRoom.amount >= 0.8 * a.waitingRoom.capacity, ["0x0e61df6d"]]]
  },
  additionalUrgentText : function (a) {
    return [[a.waitingRoom.amount ===
        a.waitingRoom.capacity, ["0x0e61df6e"]]]
  },
  getNormalText : function () {
    return [["0x0e61df6c"], 0]
  },
  UpdateAdditionalText : function (a) {
    return {
      requiredBuilding : scrui.TextFromLocaleProperty({
        tableID : simcity.StringID.TableUnits,
        stringID : simcity.StringID.DepSafety
      }),
      patients : a.roomsOccupied.amount,
      unitName : scrui.TextFromLocaleProperty({
        tableID : a.unitName.tableID,
        stringID : a.unitName.stringID
      })
    }
  }
};
goog.object.extend(simcity.RolloverItems.kHealthTemplateTextFeedback, simcity.RolloverItems.kBasicToyTextFeedback);
simcity.RolloverItems.kHospitalTextFeedback = {
  noPrereqText : simcity.StringID.PrereqCityDep
};
goog.object.extend(simcity.RolloverItems.kHospitalTextFeedback, simcity.RolloverItems.kHealthTemplateTextFeedback);
simcity.RolloverItems.kClinicTextFeedback = {
  noPrereqText : simcity.StringID.PrereqTownHall
};
goog.object.extend(simcity.RolloverItems.kClinicTextFeedback, simcity.RolloverItems.kHealthTemplateTextFeedback);
simcity.RolloverItems.kCityServiceTextFeedback = {
  noPrereqText : simcity.StringID.PrereqTownHall
};
goog.object.extend(simcity.RolloverItems.kCityServiceTextFeedback, simcity.RolloverItems.kBasicToyTextFeedback);
simcity.RolloverItems.kSewagePlantTextFeedback = {
  noPrereqText : simcity.StringID.PrereqCityDep,
  additionalInitQueries : function (a) {
    return {
      SewageTreated : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDSewageTreatedDisplay],
      SewageProcessed : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDSewageProcessedDisplay],
      SewageMainStorage : [simcity.kDataUnits, a, simcity.kDataBins, simcity.kResourceIDSewageMainStorage],
      SewageTreatmentCapacityPerDay : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount,
        simcity.kResourceIDSewageTreatment_Capacity]
    }
  },
  additionalUrgentText : function (a) {
    return [[0.95 <= a.SewageProcessed / (a.SewageTreatmentCapacityPerDay / 24 + 3 * a.SewageMainStorage.capacity), ["0x0ec204c3"]], [a.SewageMainStorage.amount == a.SewageMainStorage.capacity, ["0x0ec20462"]]]
  },
  additionalWarningText : function (a) {
    return [[0.8 <= a.SewageProcessed / (a.SewageTreatmentCapacityPerDay / 24 + 3 * a.SewageMainStorage.capacity), ["0x0ec204c3"]], [a.SewageProcessed > a.SewageTreated, ["0x0d5f0bac"]]]
  },
  getNormalText : function () {
    return [["0x0ec204c3"],
      0]
  },
  UpdateAdditionalText : function () {
    return {
      requiredBuilding : scrui.TextFromLocaleProperty({
        tableID : simcity.StringID.TableUnits,
        stringID : simcity.StringID.DepUtilities
      })
    }
  }
};
goog.object.extend(simcity.RolloverItems.kSewagePlantTextFeedback, simcity.RolloverItems.kBasicToyTextFeedback);
simcity.RolloverItems.kSewageProducerTextFeedback = {
  additionalInitQueries : function (a) {
    return {
      SewageMainStorage : ["units", a, "bins", simcity.kResourceIDSewageMainStorage_ThisHour],
      SewageMainStorage_Last : ["units", a, "bins", simcity.kResourceIDSewageMainStorage_Last]
    }
  },
  additionalUrgentText : function (a) {
    return [[a.SewageMainStorage_Last.amount >= a.SewageMainStorage.capacity, ["0x0e55b3eb"]]]
  },
  additionalWarningText : function (a) {
    return [[a.SewageMainStorage_Last.amount > 0.8 * a.SewageMainStorage.capacity, ["0x0e55b328"]]]
  },
  getNormalText : function () {
    return [["0x0e55b527"], 0]
  }
};
goog.object.extend(simcity.RolloverItems.kSewageProducerTextFeedback, simcity.RolloverItems.kBasicToyTextFeedback_NoJobs);
simcity.RolloverItems.kStadiumTextFeedback = {
  noPrereqText : simcity.StringID.PrereqCityDep,
  additionalInitQueries : function (a) {
    return {
      ToggledOff : ["units", a, "bins", simcity.kResourceIDFailureDueToToggledOff],
      NoWorkers : ["units", a, "bins", simcity.kResourceIDFailureDueToNoWorkers],
      NoPower : ["units", a, "bins", simcity.kResourceIDFailureDueToNoPower],
      NoWater : ["units", a, "bins", simcity.kResourceIDFailureDueToNoWater]
    }
  },
  additionalUrgentText : function (a) {
    return [[a.NoWorkers.amount == a.NoWorkers.capacity, ["0x0ec896f8"]],
      [a.NoPower.amount == a.NoPower.capacity, ["0x0ec896f9"]], [a.NoWater.amount == a.NoWater.capacity, ["0x0ec896fa"]]]
  },
  additionalWarningText : function (a) {
    return [[a.ToggledOff.amount == a.ToggledOff.capacity, ["0x0ec896f7"]]]
  },
  UpdateAdditionalText : function () {
    return {
      requiredBuilding : scrui.TextFromLocaleProperty({
        tableID : simcity.StringID.TableUnits,
        stringID : simcity.StringID.DepTourism
      })
    }
  }
};
goog.object.extend(simcity.RolloverItems.kStadiumTextFeedback, simcity.RolloverItems.kBasicToyTextFeedback);
simcity.RolloverItems.kCoalMineTextFeedback = {
  additionalInitQueries : function (a) {
    return {
      coal : ["connectedUnits", a, "bins", simcity.kResourceIDCoal],
      lowCoalMap : ["connectedUnits", a, "bins", simcity.kResourceIDExtractorMapLow],
      noCoalMap : ["connectedUnits", a, "bins", simcity.kResourceIDExtractorMapEmpty]
    }
  },
  additionalUrgentText : function (a) {
    return [[0 < a.lowCoalMap.amount, ["0x0d5cc178"]], [a.noCoalMap.amount === a.noCoalMap.capacity, ["0x0d5cc179"]], [a.coal.amount === a.coal.capacity, ["0x0d799007"]]]
  },
  UpdateAdditionalText : function () {
    return {
      resource : scrui.TextFromLocaleProperty({
        tableID : simcity.StringID.TableResource,
        stringID : simcity.StringID.Coal
      })
    }
  }
};
goog.object.extend(simcity.RolloverItems.kCoalMineTextFeedback, simcity.RolloverItems.kBasicToyTextFeedback);
simcity.RolloverItems.kOreMineTextFeedback = {
  additionalInitQueries : function (a) {
    return {
      ore : ["connectedUnits", a, "bins", simcity.kResourceIDOreRaw],
      lowOreMap : ["connectedUnits", a, "bins", simcity.kResourceIDExtractorMapLow],
      noOreMap : ["connectedUnits", a, "bins", simcity.kResourceIDExtractorMapEmpty]
    }
  },
  additionalUrgentText : function (a) {
    return [[0 < a.lowOreMap.amount, ["0x0d5cc178"]], [a.noOreMap.amount === a.noOreMap.capacity, ["0x0d5cc179"]], [a.ore.amount === a.ore.capacity, ["0x0d799007"]]]
  },
  UpdateAdditionalText : function () {
    return {
      resource : scrui.TextFromLocaleProperty({
        tableID : simcity.StringID.TableResource,
        stringID : simcity.StringID.Ore
      })
    }
  }
};
goog.object.extend(simcity.RolloverItems.kOreMineTextFeedback, simcity.RolloverItems.kBasicToyTextFeedback);
simcity.RolloverItems.kOilWellTextFeedback = {
  additionalInitQueries : function (a) {
    return {
      oil : ["connectedUnits", a, "bins", simcity.kResourceIDOilCrude],
      map : [simcity.kDataMaps, simcity.kMapIDOilReservoir, simcity.kDataSum]
    }
  },
  additionalUrgentText : function (a) {
    return [[0 < a.map.amount && 1E7 > a.map, ["0x0d5cc178"]], [0 === a.map.amount, ["0x0d5cc179"]], [a.oil.amount === a.oil.capacity, ["0x0d799007"]]]
  },
  UpdateAdditionalText : function () {
    return {
      resource : scrui.TextFromLocaleProperty({
        tableID : simcity.StringID.TableResource,
        stringID : simcity.StringID.Oil
      })
    }
  }
};
goog.object.extend(simcity.RolloverItems.kOilWellTextFeedback, simcity.RolloverItems.kBasicToyTextFeedback);
simcity.RolloverItems.kGenericStadiumFeedback = {
  iconPath : "icn_rollover_budget.png",
  layoutPath : "Layouts/Rollovers/RolloverImage.js",
  init : function (a) {
    a.imageWindow = a.layout.FindControlByID(simcity.cRolloverUI.kWinIDRolloverItemToyTaskImage);
    a.textControl = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemValue);
    a.textControlBackground = a.layout.FindControlByID(235047007);
    a.eventTextControl = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTitle)
  },
  updateQueries : function (a) {
    var b = {
      prepTime : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDEventPreparation],
      eventTimer : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDEventTimer],
      eventSelection : [simcity.kDataUnits, a, simcity.kDataBinAmount, simcity.kResourceIDEventSelection],
      eventSelected : [simcity.kDataUnits, a, simcity.kDataFlags, simcity.kUnitFlagIDEventSet],
      turnedOn : ["units", a, "flags", simcity.kUnitFlagOpenForBusiness],
      normal : ["units", a, "flags", simcity.kUnitFlagNormal],
      active : ["units",
        a, "flags", simcity.kUnitFlagActiveBuilding]
    };
    this.additionalQueries && goog.object.extend(b, this.additionalQueries(a));
    return b
  },
  update : function (a, b) {
    var c = b.turnedOn && b.normal && b.active || b.eventSelected;
    if (b.tourismWingOn && 0 == b.tourismWingOn.amount || !c)
      this.minimize = !0;
    else {
      c = this.minimize = !1;
      this.GetResearchDatabinding && (c = this.GetResearchDatabinding(a, b));
      var d = c && b.eventSelected;
      a.textControlBackground.SetVisibility(d);
      d ? (a.eventTextControl.SetVisibility(!0), a.imageWindow.SetWindowImage(c.marqueeImage),
        a.eventTextControl.SetLocaleText(c.eventTitleText), 0 < b.prepTime ? c = "0x0dd3073c" : (c = "0x0dd30cac", 7 <= b.eventTimer ? c = "0x0dd325a0" : 1 <= b.eventTimer && (c = "0x0dd332fb"))) : (a.imageWindow.SetWindowImage("eventClickPanel00.png"), a.eventTextControl.SetVisibility(!1), c = "0x0e72f0ed");
      a.textControl.SetLocaleText(new scrui.cLocaleString("TextFeedbackToyRollover.json", c, "kGenericStadiumFeedback"));
      a.textControl.SetVisibility(!0)
    }
  }
};
simcity.RolloverItems.kStadiumFeedback = {
  additionalQueries : function () {
    return {
      tourismWingOn : ["bins", simcity.kResourceIDHQ_CityHall_Tourism_Module_IsOn]
    }
  },
  GetResearchDatabinding : function (a, b) {
    return simcity.ToyTaskPanelDataBindingsStadium[b.eventSelection - 1]
  }
};
goog.object.extend(simcity.RolloverItems.kStadiumFeedback, simcity.RolloverItems.kGenericStadiumFeedback);
simcity.RolloverItems.kExpoHallFeedback = {
  GetResearchDatabinding : function (a, b) {
    return simcity.ToyTaskPanelDataBindingsExpoHall[b.eventSelection - 1]
  }
};
goog.object.extend(simcity.RolloverItems.kExpoHallFeedback, simcity.RolloverItems.kGenericStadiumFeedback);
simcity.RolloverItems.kGlobeTheaterFeedback = {
  additionalQueries : function () {
    return {
      tourismWingOn : ["bins", simcity.kResourceIDHQ_CityHall_Tourism_Module_IsOn]
    }
  },
  GetResearchDatabinding : function (a, b) {
    return simcity.ToyTaskPanelDataBindingsGlobeTheater[b.eventSelection - 1]
  }
};
goog.object.extend(simcity.RolloverItems.kGlobeTheaterFeedback, simcity.RolloverItems.kGenericStadiumFeedback);
simcity.RolloverItems.kOsloOperaFeedback = {
  additionalQueries : function () {
    return {
      tourismWingOn : ["bins", simcity.kResourceIDHQ_CityHall_Tourism_Module_IsOn]
    }
  },
  GetResearchDatabinding : function (a, b) {
    return simcity.ToyTaskPanelDataBindingsOsloOpera[b.eventSelection - 1]
  }
};
goog.object.extend(simcity.RolloverItems.kOsloOperaFeedback, simcity.RolloverItems.kGenericStadiumFeedback);
simcity.RolloverItems.kSydneyOperaFeedback = {
  additionalQueries : function () {
    return {
      tourismWingOn : ["bins", simcity.kResourceIDHQ_CityHall_Tourism_Module_IsOn]
    }
  },
  GetResearchDatabinding : function (a, b) {
    return simcity.ToyTaskPanelDataBindingsSydneyOpera[b.eventSelection - 1]
  }
};
goog.object.extend(simcity.RolloverItems.kSydneyOperaFeedback, simcity.RolloverItems.kGenericStadiumFeedback);
simcity.RolloverItems.kBlockLocalandTouristByWealth = {
  layoutPath : "Layouts/Rollovers/RolloverBlockTextTitle3Row2Column.js",
  init : function (a) {
    a.textControlTitle = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTitle);
    a.textControlTitleRight = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTitleRight);
    a.textControlLeft1 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextLeft1);
    a.textControlRight1 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextRight1);
    a.textControlLeft2 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextLeft2);
    a.textControlRight2 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextRight2);
    a.textControlLeft3 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextLeft3);
    a.textControlRight3 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTextRight3)
  },
  updateQueries : function (a) {
    return {
      shoppers : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTotalShoppers],
      openShoppers : [simcity.kDataConnectedUnits, a, "bins", simcity.kResourceIDOpenShoppers],
      TouristsAllowedW1 : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTouristsAllowedW1],
      TouristsAllowedW2 : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTouristsAllowedW2],
      TouristsAllowedW3 : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTouristsAllowedW3],
      MaxOccupancy : ["units", a, "properties", simcity.kPropStadium_MaxAttendance],
      ShopperW1 : [simcity.kDataConnectedUnits,
        a, simcity.kDataBinAmount, simcity.kResourceIDShopperW1],
      ShopperW2 : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDShopperW2],
      ShopperW3 : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDShopperW3],
      TouristW1 : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTouristW1],
      TouristW2 : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTouristW2],
      TouristW3 : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTouristW3]
    }
  },
  update : function (a, b) {
    var c = b.MaxOccupancy;
    a.textControlTitle.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0ee2eb75", "kBlockCasinoGamblers"));
    a.textControlTitleRight.SetVisibility(!0);
    a.textControlTitleRight.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0e6ae893", "kBlockCasinoGamblers"), {
      amount : b.shoppers,
      capacity : c
    });
    a.textControlLeft1.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0e850c85", "kBlockCasinoGamblers"), {
      level : scrui.TextFromLocaleProperty({
        tableID : simcity.StringID.TableBuildingRollover,
        stringID : 240664736
      })
    });
    a.textControlRight1.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0e6ae894", "kBlockCasinoGamblers"), {
      amount : b.ShopperW1 + b.TouristW1
    });
    a.textControlLeft2.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0e850c85", "kBlockCasinoGamblers"), {
      level : scrui.TextFromLocaleProperty({
        tableID : simcity.StringID.TableBuildingRollover,
        stringID : 240664737
      })
    });
    a.textControlRight2.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0e6ae894", "kBlockCasinoGamblers"), {
      amount : b.ShopperW2 + b.TouristW2
    });
    a.textControlLeft3.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0e850c85", "kBlockCasinoGamblers"), {
      level : scrui.TextFromLocaleProperty({
        tableID : simcity.StringID.TableBuildingRollover,
        stringID : 240664738
      })
    });
    a.textControlRight3.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0e6ae894", "kBlockCasinoGamblers"), {
      amount : b.ShopperW3 + b.TouristW3
    })
  }
};
simcity.RolloverItems.kStadiumLastPayoutMeter = {
  stringData : {
    tableID : "BuildingRollover.json",
    stringID : "0x0ee2f78d",
    placeholder : "kStadiumLastPayoutMeter"
  },
  iconPath : "icn_rollover_budget.png",
  layoutPath : "Layouts/Rollovers/RolloverItemMultiColorMeterAndText.js",
  init : function (a) {
    a.textControl = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemValue);
    a.meterBacking = a.layout.FindControlByID(simcity.cRolloverUI.kWinIDRolloverItemMeterBacking);
    a.meterGreenFillBar = a.layout.FindControlByID(simcity.cRolloverUI.kWinIDRolloverItemGreenMeterFillBar);
    a.meterYellowFillBar = a.layout.FindControlByID(simcity.cRolloverUI.kWinIDRolloverItemYellowMeterFillBar);
    a.meterRedFillBar = a.layout.FindControlByID(simcity.cRolloverUI.kWinIDRolloverItemRedMeterFillBar)
  },
  updateQueries : function (a) {
    return {
      totalShoppers : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTotalShoppers],
      payout : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDPayout],
      lastPayout : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDPayout_Prior],
      eventCost : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDEventCost],
      eventSet : [simcity.kDataUnits, a, simcity.kDataFlags, simcity.kUnitFlagIDEventSet],
      TouristsAllowedW1 : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTouristsAllowedW1],
      TouristsAllowedW2 : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTouristsAllowedW2],
      TouristsAllowedW3 : [simcity.kDataConnectedUnits, a, simcity.kDataBinAmount, simcity.kResourceIDTouristsAllowedW3]
    }
  },
  update : function (a, b) {
    var c = b.payout * (b.TouristsAllowedW1 + b.TouristsAllowedW2 + b.TouristsAllowedW3),
    d = 0;
    if (b.eventSet)
      var e = "0x0ee2f78d", d = b.payout * b.totalShoppers;
    else
      e = "0x0ee30236", d = b.lastPayout;
    a.meterGreenFillBar.SetWidth(0);
    a.meterYellowFillBar.SetWidth(0);
    a.meterRedFillBar.SetWidth(0);
    a.textControl.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", e, "kBlockCasinoGamblers"), {
      amount : d - b.eventCost
    });
    c = d / c;
    d > b.eventCost ? a.meterGreenFillBar.SetWidth(a.meterBacking.mWidth * c) : a.meterYellowFillBar.SetWidth(a.meterBacking.mWidth *
      c)
  }
};
simcity.RolloverItems.kStadiumEventTimer_IgnorePrereq = {
  stringData : {
    tableID : "BuildingRollover.json",
    stringID : "0x0de189e2",
    placeholder : "kStadiumEventTimer"
  },
  iconPath : "Graphics/Common/Icons/icn_alert.png",
  layoutPath : "Layouts/Rollovers/RolloverToyTaskNoImage.js",
  stadiumID : 0,
  init : function (a) {
    a.textControl = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemTitle);
    a.buttonControl = a.layout.FindControlByID(simcity.cRolloverUI.kWinIDRolloverItemButton)
  },
  updateQueries : function (a) {
    var b = {
      eventSelected : ["units", a,
        "flags", simcity.kUnitFlagIDEventSet],
      turnedOn : ["units", a, "flags", simcity.kUnitFlagOpenForBusiness],
      stadiumID : ["units", a, "bins", simcity.kResourceIDStadiumID],
      normal : ["units", a, "flags", simcity.kUnitFlagNormal],
      active : ["units", a, "flags", simcity.kUnitFlagActiveBuilding]
    };
    this.additionalQueries && goog.object.extend(b, this.additionalQueries(a));
    return b
  },
  update : function (a, b) {
    b.tourismWingOn && 0 == b.tourismWingOn.amount ? this.minimize = !0 : (this.minimize = b.turnedOn && b.normal && b.active || b.eventSelected ? !1 : !0, b.eventSelected ?
        (a.eventActive = !0, a.textControl.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0e0d5125", "Cancel Stadium Event"))) : (a.eventActive = !1, a.textControl.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0e0e9428", "Set Stadium Event")), simcity.gGlobalUIHandler.mToyTaskPanelUIHandler.SetUnit(simcity.gRolloverManager.mRolloverUI.mSelectedUnitRef)), this.stadiumID = b.stadiumID.amount)
  },
  onItemClicked : function (a) {
    if (!0 == a.eventActive)
      scrui.PostGameCommand(scrui.BuildCommand(["runSelectedUnitPlayerRule",
            simcity.kRuleIDSCPlayerRuleCancelResearch]));
    else
      switch (this.stadiumID) {
      case 1:
        simcity.gGlobalUIHandler.mToyTaskPanelUIHandler.Start(simcity.ToyTaskPanelDataBindingsExpoHall);
        break;
      case 2:
        simcity.gGlobalUIHandler.mToyTaskPanelUIHandler.Start(simcity.ToyTaskPanelDataBindingsStadium);
        break;
      case 3:
        simcity.gGlobalUIHandler.mToyTaskPanelUIHandler.Start(simcity.ToyTaskPanelDataBindingsGlobeTheater);
        break;
      case 4:
        simcity.gGlobalUIHandler.mToyTaskPanelUIHandler.Start(simcity.ToyTaskPanelDataBindingsOsloOpera);
        break;
      case 5:
        simcity.gGlobalUIHandler.mToyTaskPanelUIHandler.Start(simcity.ToyTaskPanelDataBindingsSydneyOpera)
      }
    scrui.PostGameCommand(scrui.BuildCommand(["deselectUnit"]))
  }
};
simcity.RolloverItems.kStadiumEventTimer = {
  additionalQueries : function () {
    return {
      tourismWingOn : ["bins", simcity.kResourceIDHQ_CityHall_Tourism_Module_IsOn]
    }
  }
};
goog.object.extend(simcity.RolloverItems.kStadiumEventTimer, simcity.RolloverItems.kStadiumEventTimer_IgnorePrereq);
simcity.RolloverItems.kGarbageStored = {
  stringData : {
    tableID : "BuildingRollover.json",
    stringID : "0x0c1877a2",
    placeholder : "kGarbageStored"
  },
  iconPath : "Graphics/Icons/TradeIcons/icn-trade-garbage.png",
  layoutPath : "Layouts/Rollovers/RolloverItemNeutralColorMeterAndText.js",
  init : function (a) {
    a.meterBacking = a.layout.FindControlByID(simcity.cRolloverUI.kWinIDRolloverItemMeterBacking);
    a.meterFillbar = a.layout.FindControlByID(simcity.cRolloverUI.kWinIDRolloverItemMeterFillBar);
    a.textControl = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemValue);
    a.meterYellowFillBar = a.layout.FindControlByID(simcity.cRolloverUI.kWinIDRolloverItemYellowMeterFillBar);
    a.meterNeutralFillBar = a.layout.FindControlByID(simcity.cRolloverUI.kWinIDRolloverItemNeutralMeterFillBar)
  },
  updateQueries : function (a) {
    return {
      garbage : ["connectedUnits", a, "bins", simcity.kResourceIDGarbage]
    }
  },
  update : function (a, b) {
    var c = simcity.FormatLargeNumberForTons(b.garbage.amount),
    d = simcity.FormatLargeNumberForTons(b.garbage.capacity);
    a.textControl.UpdateLocaleText({
      garbage_amount : c.number,
      garbage_capacity : d.number,
      exponent : d.exponent
    });
    c = b.garbage.amount / b.garbage.capacity;
    d = 0.9 < c;
    a.meterYellowFillBar.SetVisibility(d);
    a.meterNeutralFillBar.SetVisibility(!d);
    a.meterFillbar.SetWidth(a.meterBacking.mWidth * c)
  }
};
simcity.RolloverItems.kDumpZoneGarbage = {
  stringData : {
    tableID : "BuildingRollover.json",
    stringID : "0x0c1877a2",
    placeholder : "kDumpZoneGarbage"
  },
  iconPath : "Graphics/Icons/TradeIcons/icn-trade-garbage.png",
  layoutPath : "Layouts/Rollovers/RolloverItemMultiColorMeterAndText.js",
  init : function (a) {
    a.textControl = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemValue);
    a.meterBacking = a.layout.FindControlByID(simcity.cRolloverUI.kWinIDRolloverItemMeterBacking);
    a.meterGreenFillBar = a.layout.FindControlByID(simcity.cRolloverUI.kWinIDRolloverItemGreenMeterFillBar);
    a.meterYellowFillBar = a.layout.FindControlByID(simcity.cRolloverUI.kWinIDRolloverItemYellowMeterFillBar);
    a.meterRedFillBar = a.layout.FindControlByID(simcity.cRolloverUI.kWinIDRolloverItemRedMeterFillBar);
    a.meterFillbar = a.layout.FindControlByID(simcity.cRolloverUI.kWinIDRolloverItemMeterFillBar)
  },
  updateQueries : function (a) {
    return {
      garbage : ["units", a, "bins", simcity.kResourceIDGarbage]
    }
  },
  update : function (a, b) {
    var c = simcity.FormatLargeNumberForTons(b.garbage.amount),
    d = simcity.FormatLargeNumberForTons(b.garbage.capacity);
    a.textControl.UpdateLocaleText({
      garbage_amount : c.number,
      garbage_capacity : d.number,
      exponent : d.exponent
    });
    c = b.garbage.amount / b.garbage.capacity;
    a.meterGreenFillBar.SetVisibility(!1);
    a.meterYellowFillBar.SetVisibility(!1);
    a.meterRedFillBar.SetVisibility(!1);
    a.meterFillbar.SetWidth(a.meterBacking.mWidth * c);
    0.5 > c ? a.meterGreenFillBar.SetVisibility(!0) : 0.75 > c ? a.meterYellowFillBar.SetVisibility(!0) : a.meterRedFillBar.SetVisibility(!0)
  }
};
simcity.RolloverItems.kWaterPollution = {
  stringData : {
    tableID : "BuildingRollover.json",
    stringID : "0x0bccedde",
    placeholder : "kWaterPollution"
  },
  iconPath : "Graphics/Common/Icons/icn-layers-pollution.png",
  layoutPath : "Layouts/Rollovers/RolloverItemIconValue.js",
  init : function (a) {
    a.textControl = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemValue)
  },
  updateQueries : function (a) {
    return {
      pollution : [simcity.kDataConnectedUnits, a, simcity.kDataBins, simcity.kResourceIDGermsInPump]
    }
  },
  update : function (a, b) {
    a.textControl.UpdateLocaleText({
      water_pollution_percent : 100 *
      (b.pollution.amount / b.pollution.capacity)
    })
  }
};
simcity.RolloverItems.kCollegeHours = {
  stringData : {
    tableID : "BuildingRollover.json",
    stringID : "0x0f31dfe7",
    placeholder : "kCollegeHours"
  },
  iconPath : "Graphics/Common/Icons/icn-population.png",
  layoutPath : "Layouts/Rollovers/RolloverItemNormalTextCenter2Row.js",
  init : function (a) {
    a.textControl = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemValue);
    a.textControl2 = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemValue2)
  },
  update : function (a) {
    a.textControl2.SetVisibility(!1);
    a.textControl.UpdateLocaleText({
      start1 : new Date(2E3,
        0, 1, 6, 0, 0, 0),
      start2 : new Date(2E3, 0, 1, 9, 0, 0, 0),
      start3 : new Date(2E3, 0, 1, 12, 0, 0, 0),
      start4 : new Date(2E3, 0, 1, 15, 0, 0, 0)
    })
  }
};
simcity.RolloverItems.kStudentHours = {
  stringData : {
    tableID : "BuildingRollover.json",
    stringID : "0x0e69caba",
    placeholder : "kStudentsE2Hours"
  },
  iconPath : "Graphics/Common/Icons/icn-population.png",
  layoutPath : "Layouts/Rollovers/RolloverItemNormalTextCenter.js",
  init : function (a) {
    a.textControl = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemValue)
  },
  updateQueries : function (a) {
    return {
      StudentsNeeded_00 : [simcity.kDataConnectedUnits, a, simcity.kDataBins, simcity.kResourceIDStudentsNeeded_00],
      StudentsNeeded_03 : [simcity.kDataConnectedUnits,
        a, simcity.kDataBins, simcity.kResourceIDStudentsNeeded_03],
      StudentsNeeded_06 : [simcity.kDataConnectedUnits, a, simcity.kDataBins, simcity.kResourceIDStudentsNeeded_06],
      StudentsNeeded_09 : [simcity.kDataConnectedUnits, a, simcity.kDataBins, simcity.kResourceIDStudentsNeeded_09],
      StudentsNeeded_12 : [simcity.kDataConnectedUnits, a, simcity.kDataBins, simcity.kResourceIDStudentsNeeded_12],
      StudentsNeeded_15 : [simcity.kDataConnectedUnits, a, simcity.kDataBins, simcity.kResourceIDStudentsNeeded_15],
      StudentsNeeded_18 : [simcity.kDataConnectedUnits,
        a, simcity.kDataBins, simcity.kResourceIDStudentsNeeded_18],
      StudentsNeeded_21 : [simcity.kDataConnectedUnits, a, simcity.kDataBins, simcity.kResourceIDStudentsNeeded_21]
    }
  },
  update : function (a, b) {
    var c = 0,
    d = 0;
    b.StudentsNeeded_00.amount < b.StudentsNeeded_03.amount ? c += 3 : b.StudentsNeeded_03.amount < b.StudentsNeeded_06.amount ? c += 6 : b.StudentsNeeded_06.amount < b.StudentsNeeded_09.amount ? c += 9 : b.StudentsNeeded_09.amount < b.StudentsNeeded_12.amount ? c += 12 : b.StudentsNeeded_12.amount < b.StudentsNeeded_15.amount ? c += 15 : b.StudentsNeeded_15.amount <
    b.StudentsNeeded_18.amount ? c += 18 : b.StudentsNeeded_18.amount < b.StudentsNeeded_21.amount ? c += 21 : b.StudentsNeeded_21.amount < b.StudentsNeeded_00.amount && (c += 0);
    b.StudentsNeeded_21.amount < b.StudentsNeeded_18.amount ? d += 21 : b.StudentsNeeded_18.amount < b.StudentsNeeded_15.amount ? d += 18 : b.StudentsNeeded_15.amount < b.StudentsNeeded_12.amount ? d += 15 : b.StudentsNeeded_12.amount < b.StudentsNeeded_09.amount ? d += 12 : b.StudentsNeeded_09.amount < b.StudentsNeeded_06.amount ? d += 9 : b.StudentsNeeded_06.amount < b.StudentsNeeded_03.amount ?
    d += 6 : b.StudentsNeeded_03.amount < b.StudentsNeeded_00.amount ? d += 3 : b.StudentsNeeded_00.amount < b.StudentsNeeded_21.amount && (d += 0);
    a.textControl.UpdateLocaleText({
      hours_begin : new Date(2E3, 0, 1, c, 0, 0, 0),
      hours_end : new Date(2E3, 0, 1, d, 0, 0, 0)
    })
  }
};
simcity.RolloverItems.kConstructionProgress = {
  stringData : {
    tableID : "BuildingRollover.json",
    stringID : "0x0cca4221",
    placeholder : "kRolloverItemConstructionProgress"
  },
  iconPath : "Graphics/Common/Icons/icn_rollover_Construction.png",
  layoutPath : "Layouts/Rollovers/RolloverItemIconMeterAndText.js",
  init : function (a) {
    a.meterBacking = a.layout.FindControlByID(simcity.cRolloverUI.kWinIDRolloverItemMeterBacking);
    a.meterFillBar = a.layout.FindControlByID(simcity.cRolloverUI.kWinIDRolloverItemMeterFillBar);
    a.textControl =
      a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemValue)
  },
  updateQueries : function (a) {
    return {
      constructionprogress : ["units", a, "bins", simcity.kResourceIDConstructionProgress]
    }
  },
  update : function (a, b) {
    var c = b.constructionprogress.amount / b.constructionprogress.capacity;
    a.meterFillBar.SetWidth(a.meterBacking.mWidth * c);
    a.textControl.UpdateLocaleText({
      constructionprogress : c
    })
  }
};
simcity.RolloverItems.kUniversityResearchPanel = {
  stringData : {
    tableID : "BuildingRollover.json",
    stringID : "0x0de189e2",
    placeholder : "kStadiumEventTimer"
  },
  iconPath : "Graphics/Common/Icons/icn_alert.png",
  layoutPath : "Layouts/Rollovers/RolloverToyTask.js",
  init : function (a) {
    a.researchNameTextControl = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemAdditionalText);
    a.textControl = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemValue);
    a.backgroundImage = a.layout.FindControlByID(simcity.cRolloverUI.kWinIDRolloverToyTaskBackground);
    a.cancelTextControl = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverCancelEvent)
  },
  updateQueries : function (a) {
    return {
      researchProject : ["units", a, "bins", simcity.kResourceIDActiveEventResearch],
      research : ["units", a, "bins", simcity.kResourceIDResearch],
      researchNeeded : ["units", a, "bins", simcity.kResourceIDResearchNeeded]
    }
  },
  update : function (a, b) {
    if (0 < b.researchProject.amount) {
      a.eventActive = !0;
      a.backgroundImage.SetVisibility(!0);
      a.researchNameTextControl.SetVisibility(!0);
      a.textControl.SetVisibility(!0);
      a.cancelTextControl.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0e0d513f", "RESEARCH CANCEL PLACEHOLDER"));
      a.textControl.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0d941932", "RESEARCH PROGRESS PLACEHOLDER"));
      var c = simcity.ToyTaskPanelDataBindingsUniversityResearch[b.researchProject.amount - 1];
      a.researchNameTextControl.SetLocaleText(c.eventTitleText);
      a.backgroundImage.SetWindowImage(c.marqueeImage);
      a.textControl.UpdateLocaleText({
        research_amount : 0 < b.researchNeeded.amount ?
        Math.floor(100 * (b.research.amount / b.researchNeeded.amount)) : 0
      })
    } else
      a.eventActive = !1, a.backgroundImage.SetVisibility(!0), a.textControl.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0e292a31", "RESEARCH NEED PROJECT PLACEHOLDER")), a.researchNameTextControl.SetVisibility(!1), a.backgroundImage.SetWindowImage("noResearchProject.png"), a.cancelTextControl.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0e0e942d", "RESEARCH PLACEHOLDER TEXT")), simcity.gGlobalUIHandler.mToyTaskPanelUIHandler.SetUnit(simcity.gRolloverManager.mRolloverUI.mSelectedUnitRef)
  },
  onItemClicked : function (a) {
    !0 == a.eventActive ? scrui.PostGameCommand(scrui.BuildCommand(["runSelectedUnitPlayerRule", simcity.kRuleIDSCPlayerRuleCancelResearch])) : simcity.gGlobalUIHandler.mToyTaskPanelUIHandler.Start(simcity.ToyTaskPanelDataBindingsUniversityResearch);
    scrui.PostGameCommand(scrui.BuildCommand(["deselectUnit"]))
  }
};
simcity.RolloverItems.kCoalHQResearchPanel = {
  stringData : {
    tableID : "BuildingRollover.json",
    stringID : "0x0de189e2",
    placeholder : "kStadiumEventTimer"
  },
  iconPath : "Graphics/Common/Icons/icn_alert.png",
  layoutPath : "Layouts/Rollovers/RolloverToyTask.js",
  init : function (a) {
    a.researchNameTextControl = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemAdditionalText);
    a.textControl = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemValue);
    a.backgroundImage = a.layout.FindControlByID(simcity.cRolloverUI.kWinIDRolloverToyTaskBackground);
    a.cancelTextControl = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverCancelEvent)
  },
  updateQueries : function (a) {
    return {
      researchProject : ["units", a, "bins", simcity.kResourceIDActiveEventResearch],
      research : ["units", a, "bins", simcity.kResourceIDResearch],
      researchNeeded : ["units", a, "bins", simcity.kResourceIDResearchNeeded]
    }
  },
  update : function (a, b) {
    if (0 < b.researchProject.amount) {
      a.eventActive = !0;
      a.backgroundImage.SetVisibility(!0);
      a.researchNameTextControl.SetVisibility(!0);
      a.researchNameTextControl.SetTextColor("white");
      a.textControl.SetVisibility(!0);
      a.textControl.SetTextColor("white");
      a.cancelTextControl.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0e0d513f", "RESEARCH CANCEL PLACEHOLDER"));
      a.textControl.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0d941932", "RESEARCH PROGRESS PLACEHOLDER"));
      var c = simcity.ToyTaskPanelDataBindingsCoalHQResearch[b.researchProject.amount - 1];
      a.researchNameTextControl.SetLocaleText(c.eventTitleText);
      a.backgroundImage.SetWindowImage(c.marqueeImage);
      a.textControl.UpdateLocaleText({
        research_amount : 0 < b.researchNeeded.amount ? Math.floor(100 * (b.research.amount / b.researchNeeded.amount)) : 0
      })
    } else
      a.eventActive = !1, a.backgroundImage.SetVisibility(!0), a.textControl.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0e292a31", "RESEARCH NEED PROJECT PLACEHOLDER")), a.researchNameTextControl.SetVisibility(!1), a.backgroundImage.SetWindowImage("noResearchProject.png"), a.cancelTextControl.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json",
          "0x0e0e942d", "RESEARCH PLACEHOLDER TEXT")), simcity.gGlobalUIHandler.mToyTaskPanelUIHandler.SetUnit(simcity.gRolloverManager.mRolloverUI.mSelectedUnitRef)
  },
  onItemClicked : function (a) {
    !0 == a.eventActive ? scrui.PostGameCommand(scrui.BuildCommand(["runSelectedUnitPlayerRule", simcity.kRuleIDSCPlayerRuleCancelResearch])) : simcity.gGlobalUIHandler.mToyTaskPanelUIHandler.Start(simcity.ToyTaskPanelDataBindingsCoalHQResearch);
    scrui.PostGameCommand(scrui.BuildCommand(["deselectUnit"]))
  }
};
simcity.RolloverItems.kOilHQResearchPanel = {
  stringData : {
    tableID : "BuildingRollover.json",
    stringID : "0x0de189e2",
    placeholder : "kStadiumEventTimer"
  },
  iconPath : "Graphics/Common/Icons/icn_alert.png",
  layoutPath : "Layouts/Rollovers/RolloverToyTask.js",
  init : function (a) {
    a.researchNameTextControl = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemAdditionalText);
    a.textControl = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemValue);
    a.backgroundImage = a.layout.FindControlByID(simcity.cRolloverUI.kWinIDRolloverToyTaskBackground);
    a.cancelTextControl = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverCancelEvent)
  },
  updateQueries : function (a) {
    return {
      researchProject : ["units", a, "bins", simcity.kResourceIDActiveEventResearch],
      research : ["units", a, "bins", simcity.kResourceIDResearch],
      researchNeeded : ["units", a, "bins", simcity.kResourceIDResearchNeeded]
    }
  },
  update : function (a, b) {
    if (0 < b.researchProject.amount) {
      a.eventActive = !0;
      a.backgroundImage.SetVisibility(!0);
      a.researchNameTextControl.SetVisibility(!0);
      a.researchNameTextControl.SetTextColor("white");
      a.textControl.SetVisibility(!0);
      a.textControl.SetTextColor("white");
      a.cancelTextControl.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0e0d513f", "RESEARCH CANCEL PLACEHOLDER"));
      a.textControl.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0d941932", "RESEARCH PROGRESS PLACEHOLDER"));
      var c = simcity.ToyTaskPanelDataBindingsOilHQResearch[b.researchProject.amount - 1];
      a.researchNameTextControl.SetLocaleText(c.eventTitleText);
      a.backgroundImage.SetWindowImage(c.marqueeImage);
      a.textControl.UpdateLocaleText({
        research_amount : 0 < b.researchNeeded.amount ? Math.floor(100 * (b.research.amount / b.researchNeeded.amount)) : 0
      })
    } else
      a.eventActive = !1, a.backgroundImage.SetVisibility(!0), a.textControl.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0e292a31", "RESEARCH NEED PROJECT PLACEHOLDER")), a.researchNameTextControl.SetVisibility(!1), a.backgroundImage.SetWindowImage("noResearchProject.png"), a.cancelTextControl.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json",
          "0x0e0e942d", "RESEARCH PLACEHOLDER TEXT")), simcity.gGlobalUIHandler.mToyTaskPanelUIHandler.SetUnit(simcity.gRolloverManager.mRolloverUI.mSelectedUnitRef)
  },
  onItemClicked : function (a) {
    !0 == a.eventActive ? scrui.PostGameCommand(scrui.BuildCommand(["runSelectedUnitPlayerRule", simcity.kRuleIDSCPlayerRuleCancelResearch])) : simcity.gGlobalUIHandler.mToyTaskPanelUIHandler.Start(simcity.ToyTaskPanelDataBindingsOilHQResearch);
    scrui.PostGameCommand(scrui.BuildCommand(["deselectUnit"]))
  }
};
simcity.RolloverItems.kElectronicsHQResearchPanel = {
  stringData : {
    tableID : "BuildingRollover.json",
    stringID : "0x0de189e2",
    placeholder : "kStadiumEventTimer"
  },
  iconPath : "Graphics/Common/Icons/icn_alert.png",
  layoutPath : "Layouts/Rollovers/RolloverToyTask.js",
  init : function (a) {
    a.researchNameTextControl = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemAdditionalText);
    a.textControl = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemValue);
    a.backgroundImage = a.layout.FindControlByID(simcity.cRolloverUI.kWinIDRolloverToyTaskBackground);
    a.cancelTextControl = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverCancelEvent)
  },
  updateQueries : function (a) {
    return {
      researchProject : ["units", a, "bins", simcity.kResourceIDActiveEventResearch],
      research : ["units", a, "bins", simcity.kResourceIDResearch],
      researchNeeded : ["units", a, "bins", simcity.kResourceIDResearchNeeded]
    }
  },
  update : function (a, b) {
    if (0 < b.researchProject.amount) {
      a.eventActive = !0;
      a.backgroundImage.SetVisibility(!0);
      a.researchNameTextControl.SetVisibility(!0);
      a.researchNameTextControl.SetTextColor("white");
      a.textControl.SetVisibility(!0);
      a.textControl.SetTextColor("white");
      a.cancelTextControl.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0e0d513f", "RESEARCH CANCEL PLACEHOLDER"));
      a.textControl.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0d941932", "RESEARCH PROGRESS PLACEHOLDER"));
      var c = simcity.ToyTaskPanelDataBindingsElectronicsHQResearch[b.researchProject.amount - 1];
      a.researchNameTextControl.SetLocaleText(c.eventTitleText);
      a.backgroundImage.SetWindowImage(c.marqueeImage);
      a.textControl.UpdateLocaleText({
        research_amount : 0 < b.researchNeeded.amount ? Math.floor(100 * (b.research.amount / b.researchNeeded.amount)) : 0
      })
    } else
      a.eventActive = !1, a.backgroundImage.SetVisibility(!0), a.textControl.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0e292a31", "RESEARCH NEED PROJECT PLACEHOLDER")), a.researchNameTextControl.SetVisibility(!1), a.backgroundImage.SetWindowImage("noResearchProject.png"), a.cancelTextControl.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json",
          "0x0e0e942d", "RESEARCH PLACEHOLDER TEXT")), simcity.gGlobalUIHandler.mToyTaskPanelUIHandler.SetUnit(simcity.gRolloverManager.mRolloverUI.mSelectedUnitRef)
  },
  onItemClicked : function (a) {
    !0 == a.eventActive ? scrui.PostGameCommand(scrui.BuildCommand(["runSelectedUnitPlayerRule", simcity.kRuleIDSCPlayerRuleCancelResearch])) : simcity.gGlobalUIHandler.mToyTaskPanelUIHandler.Start(simcity.ToyTaskPanelDataBindingsElectronicsHQResearch);
    scrui.PostGameCommand(scrui.BuildCommand(["deselectUnit"]))
  }
};
simcity.RolloverItems.kShowPowerDealStatus = {
  iconPath : "Graphics/Common/Icons/icn_alert.png",
  layoutPath : "Layouts/Rollovers/RolloverItemIconValue.js",
  init : function (a) {
    a.textControl = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemValue)
  },
  updateQueries : function (a) {
    return {
      dealStatus : ["units", a, "bins", simcity.kResourceIDTradeDealPowerStatus]
    }
  },
  update : function (a, b) {
    a.textControl.SetTextColor("white");
    0 == b.dealStatus.amount ? a.textControl.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json",
        "0x0e01a19f", "No Deal")) : 1 == b.dealStatus.amount ? a.textControl.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0e01a1a0", "Pending Deal")) : a.textControl.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0e01a1a1", "Deal Agreed"))
  }
};
simcity.RolloverItems.kShowWaterDealStatus = {
  iconPath : "Graphics/Common/Icons/icn_alert.png",
  layoutPath : "Layouts/Rollovers/RolloverItemIconValue.js",
  init : function (a) {
    a.textControl = a.layout.FindControlByID(simcity.cRolloverUI.kTxtIDRolloverItemValue)
  },
  updateQueries : function (a) {
    return {
      dealStatus : ["units", a, "bins", simcity.kResourceIDTradeDealWaterStatus]
    }
  },
  update : function (a, b) {
    a.textControl.SetTextColor("white");
    0 == b.dealStatus.amount ? a.textControl.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json",
        "0x0e01a19f", "No Deal")) : 1 == b.dealStatus.amount ? a.textControl.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0e01a1a0", "Pending Deal")) : a.textControl.SetLocaleText(new scrui.cLocaleString("BuildingRollover.json", "0x0e01a1a1", "Deal Agreed"))
  }
};
simcity.GenerateRolloverItemDataBindingMap = function () {
  var a = {},
  b;
  for (b in simcity.RolloverItems)
    simcity.RolloverItems.hasOwnProperty(b) && (a[scrui.IDFromName(b)] = simcity.RolloverItems[b]);
  return a
};
simcity.LoadNotifier = {};
simcity.cLoadNotifier = function (a, b) {
  this.mLayout = gUIManager.FindControlByID(a).FindControlByID(b);
  this.mReferenceCount = 0
};
simcity.cLoadNotifier.prototype.LoadStart = function () {
  this.mReferenceCount++;
  this.mLayout.SetVisibility(!0)
};
simcity.cLoadNotifier.prototype.LoadFinish = function () {
  this.mReferenceCount--;
  0 > this.mReferenceCount && (this.mReferenceCount = 0);
  1 > this.mReferenceCount && this.mLayout.SetVisibility(!1)
};
simcity.PanelTab = {};
simcity.cPanelTab = function () {
  this.mNoDataMsgControl = this.mLoadNotifier = null
};
simcity.cPanelTab.kIDNoDataMsgConnectionError = 253131660;
simcity.cPanelTab.kIDNoDataMsgLoadFailed = 255036541;
simcity.cPanelTab.prototype.InitTab = function (a) {
  this.mListeners = [];
  this.mControl = a
};
simcity.cPanelTab.prototype.Show = function () {
  this.mControl.SetVisibility(!0)
};
simcity.cPanelTab.prototype.Hide = function () {
  this.mControl.SetVisibility(!1)
};
simcity.cPanelTab.prototype.SetLoadNotifier = function (a) {
  this.mLoadNotifier = a
};
simcity.cPanelTab.prototype.LoadStart = function () {
  this.mLoadNotifier && this.mLoadNotifier.LoadStart()
};
simcity.cPanelTab.prototype.LoadFinish = function () {
  this.mLoadNotifier && this.mLoadNotifier.LoadFinish()
};
simcity.cPanelTab.prototype.SetNoDataMsgControl = function (a) {
  this.mNoDataMsgControl = this.FindControlByID(a)
};
simcity.cPanelTab.prototype.ShowNoDataMessage = function (a) {
  this.mNoDataMsgControl && (!0 === a ? (this.mNoDataMsgControl.FindControlByID(simcity.cPanelTab.kIDNoDataMsgConnectionError).SetVisibility(!0), this.mNoDataMsgControl.FindControlByID(simcity.cPanelTab.kIDNoDataMsgLoadFailed).SetVisibility(!1)) : (this.mNoDataMsgControl.FindControlByID(simcity.cPanelTab.kIDNoDataMsgConnectionError).SetVisibility(!1), this.mNoDataMsgControl.FindControlByID(simcity.cPanelTab.kIDNoDataMsgLoadFailed).SetVisibility(!0)), this.mNoDataMsgControl.SetVisibility(!0))
};
simcity.cPanelTab.prototype.HideNoDataMessage = function () {
  this.mNoDataMsgControl && this.mNoDataMsgControl.SetVisibility(!1)
};
simcity.cPanelTab.prototype.Destroy = function () {};
simcity.cPanelTab.prototype.GetControl = function () {
  return this.mControl
};
simcity.cPanelTab.prototype.HideControlById = function (a) {
  a = this.FindControlByID(a);
  null != a && a.SetVisibility(!1)
};
simcity.cPanelTab.prototype.ShowControlById = function (a) {
  a = this.FindControlByID(a);
  null != a && a.SetVisibility(!0)
};
simcity.cPanelTab.prototype.FindControlByID = function (a) {
  return !a ? null : this.mControl.FindControlByID(a)
};
simcity.cPanelTab.prototype.FindAnimationByID = function (a) {
  return !a ? null : this.mControl.FindAnimationByID(a)
};
simcity.cPanelTab.prototype.ClearViewByID = function (a) {
  (a = this.FindControlByID(a)) && a.DestroyChildren()
};
simcity.cPanelTab.prototype.AddEventListener = function (a, b, c) {
  var d = this;
  this.mListeners.push({
    func : function () {
      c.apply(d, arguments)
    },
    event : a,
    controlId : b
  })
};
simcity.cPanelTab.prototype.AddEventListeners = function () {
  for (var a in this.mListeners) {
    var b = this.mListeners[a];
    simcity.gEventManager.AddEventListener(b.event, b.controlId, b.func)
  }
};
simcity.cPanelTab.prototype.RemoveEventListeners = function () {
  for (var a in this.mListeners) {
    var b = this.mListeners[a];
    simcity.gEventManager.RemoveEventListener(b.event, b.controlId)
  }
};
simcity.ChallengeTab = {};
simcity.cChallenges = function () {
  this.mUIToolbox = this.mTabContainer = this.mContent = null;
  this.mIsLoading = !1;
  this.mControlIds = {
    CONTENT_WINDOW : 242223614,
    CURRENT_CHALLENGE_PARENT_WINDOW_BOX : 245847489,
    CURRENT_CHALLENGE_WINDOW_CONTAINER : 242399125,
    CURRENT_CHALLENGE_NAME : 242220081,
    CURRENT_CHALLENGE_IMAGE : 242220096,
    CURRENT_CHALLENGE_DESCRIPTION : 242220101,
    CURRENT_CHALLENGE_REWARD_IMAGE : 249673422,
    CURRENT_CHALLENGE_ACHIEVEMENT_INFO : 249673462,
    CURRENT_CHALLENGE_TIME_LEFT_TEXT : 243960454,
    CURRENT_CHALLENGE_TIME_LEFT_VALUE : 243960466,
    UPCOMING_CHALLENGE_PARENT_WINDOW_BOX : 245847484,
    UPCOMING_CHALLENGE_WINDOW_CONTAINER : 242399039,
    UPCOMING_CHALLENGE_NAME : 242220889,
    UPCOMING_CHALLENGE_IMAGE : 242220860,
    UPCOMING_CHALLENGE_TIME_TO_START : 249677562,
    FIRST_PREV_CHALLENGE_PARENT_WINDOW_BOX : 245848272,
    FIRST_PREV_CHALLENGE_WINDOW_CONTAINER : 242401145,
    FIRST_PREV_CHALLENGE_NAME : 242221075,
    FIRST_PREV_CHALLENGE_IMAGE : 242221062,
    FIRST_PREV_CHALLENGE_ENDTIME_LABEL : 242221085,
    BACK_TO_ALL_CHALLENGES_BUTTON : 242221548,
    REGIONAL_CHALLENGE_CONTENT_PARENT : 253366833,
    REGIONAL_CHALLENGE_NAME : 242221628,
    REGIONAL_CHALLENGE_SCHEDULE_TYPE : 249686965,
    REGIONAL_CHALLENGE_CALL_TO_ACTION : 242221711,
    REGIONAL_CHALLENGE_CALL_TO_ACTION_BG : 253801061,
    REGIONAL_CHALLENGE_REWARD_INFO : 249675112,
    REGIONAL_CHALLENGE_IMAGE : 242221719,
    REGIONAL_CHALLENGE_TIME_LEFT_PREFIX_LABEL : 243092453,
    REGIONAL_CHALLENGE_TIME_LEFT : 242221742,
    REGIONAL_CHALLENGE_ENDS_IN_TEXT : 253656931,
    REGIONAL_CHALLENGE_ENDS_IN_TEXT_BG : 253730054,
    REGIONAL_CHALLENGE_REWARD_IMAGE : 242221793,
    REGIONAL_CHALLENGE_DESCRIPTION : 242221889,
    REGIONAL_CHALLENGE_SCHEDULE_TAG : 249747839,
    REGIONAL_CHALLENGE_SCHEDULE_TAGLINE : 249747828,
    REGIONAL_CHALLENGE_SCHEDULE_TIME : 249748040,
    TOP_X_PERCENT_BUTTON_TEXT : 243962747,
    TOP_X_PERCENT_BUTTON : 242222008,
    MY_REGIONS_BUTTON : 242222015,
    MY_REGIONS_LIST_CONTAINER : 247855021,
    TOP_REGIONS_LIST_CONTAINER : 242222054,
    TOP_REGIONS_LIST_NO_DATA_MSG : 242589457,
    TOP_REGIONS_CHALLENGE_NOT_STARTED_MSG : 250358726,
    MY_COMPLETED_REGIONS_TEXT : 253379371,
    MY_INPROGRESS_REGIONS_TEXT : 253379374,
    LIST_ITEM_REGULAR_BG : 248797130,
    LIST_ITEM_USERS_OWN_BG : 248797123,
    TOP_REGION_LIST_ITEM_BTN : 242562846,
    TOP_X_PERCENT_MARKER : 242226840,
    ITEM_INDEX : 242226852,
    ITEM_REGION_NAME : 242226873,
    ITEM_COMPLETION_TIME : 249688190,
    ITEM_PROGRESS_VALUE : 242226914,
    ITEM_CURRENT_REGION_MARKER : 254945626,
    ITEM_EXPANDED_DETAILS_WINDOW : 247778337,
    LEADERBOARD_PAGINATION_FOOTER : 247846520,
    LEADERBOARD_PAGINATION_BUTTON : 247846910,
    EXPANDED_ENTRY_CONTAINER : 254951296,
    ABANDONED_CITY_ICON_BOX : 248795178,
    AVATAR_ICON_LAYOUT : 248794986,
    REGION_CITY_TIME : 253824456,
    REGION_PLAYER_NAME : 242227036,
    REGION_CITY_NAME : 253824232,
    PLAYER_AVATAR_IMAGE : 228928751,
    PLAYER_AVATAR_FRAME : 243609590,
    REGION_PLAYER_CONTRIBUTION : 242227046,
    GLOBAL_CHALLENGE_NAME : 242335086,
    GLOBAL_CHALLENGE_OVERVIEW : 242335067,
    GLOBAL_CHALLENGE_IMAGE : 242335046,
    GLOBAL_PROGRESS_COMPLETED_UNITS : 242335034,
    GLOBAL_PROGRESS_TOTAL : 242335037,
    GLOBAL_CHALLENGE_PROGRESS_BAR : 242499549,
    GLOBAL_CHALLENGE_MY_CONTRIBUTION_UNITS : 242335080,
    GLOBAL_CHALLENGE_DESCRIPTION : 242335072,
    GLOBAL_CHALLENGE_REWARD_IMAGE : 242335025,
    GLOBAL_CHALLENGE_COMPLETE_MARKER : 242404038,
    VIEW_CURR_CHALLENGE_LINK : 253382626,
    VIEW_PREV_CHALLENGE_LINK : 253382638,
    VIEW_UPCOMING_CHALLENGE_LINK : 256227943,
    NO_CHALLENGE_ACTIVE_MSG : 242223560,
    LB_UPDATES_DISCLAIMER : 255798882
  };
  this.mAnimIDs = {
    TOPREGION_ITEM_EXPAND_ANIM : 247773748
  };
  this.mAnimKeyframes = {
    TOPREGION_DETAILS_CONTAINER_HEIGHT : 247775250,
    LEADERBOARD_ENTRY_LAYOUT_HEIGHT : 247775237
  };
  this.mChallengeType = {
    ALL : "All",
    REGIONAL : "Regional",
    GLOBAL : "Global"
  };
  this.mChallengeScheduleType = {
    CURRENT : "current",
    UPCOMING : "upcoming",
    PREVIOUS : "previous",
    NONE : "none"
  };
  this.mTopRegionsActivePanels = {
    TOP_X_PERCENT : "topXpercent",
    MY_REGIONS : "myregions"
  };
  this.mContentLayersIds = {
    ALL_CHALLENGES : 242219692,
    REGIONAL_CHALLENGE_DETAIL : 242219739,
    GLOBAL_CHALLENGE_DETAIL : 242333748
  };
  this.mMessages = {
    CHALLENGE_FAILED : new scrui.cLocaleString("GameEntry.json", "0x0e3a3a3f", "Failed"),
    CHALLENGE_COMPLETED : new scrui.cLocaleString("GameEntry.json", "0x0e3a3a61", "Complete")
  };
  this.mLayouts = {
    TOP_REGION_LIST_ITEM : "Layouts/SimCityWorld/ChallengeLBEntry.js",
    TOP_REGION_LIST_ITEM_EXPANDED : "Layouts/SimCityWorld/ChallengeLBExpandedEntry.js",
    PAGINATION_FOOTER : "Layouts/SimCityWorld/ChallengeLBPaginationFooter.js",
    MY_REGION_LEADERBOARD_DIVIDER : "Layouts/SimCityWorld/ChallengeLBMyRegionsDivider.js"
  };
  this.mIcons = {
    REGIONAL_CHALLENGE_ICON : "Graphics/GameEntry/SimCityWorld/Challenges-RegionalIcon.png",
    GLOBAL_CHALLENGE_ICON : "Graphics/GameEntry/SimCityWorld/Challenges-GlobalIcon.png"
  };
  this.kLocaleStrings = {
    CURRENT_CHALLENGE_TEXT : new scrui.cLocaleString("GameEntry.json", "0x16309ed3", "Current Challenge"),
    UPCOMING_CHALLENGE_TEXT : new scrui.cLocaleString("GameEntry.json", "0x621abdf0", "Upcoming Challenge"),
    PREVIOUS_CHALLENGE_TEXT : new scrui.cLocaleString("GameEntry.json",
      "0x16c8adfc"),
    ENDTIME_TEXT : new scrui.cLocaleString("GameEntry.json", "0x9e43cae7", "~endtime~"),
    TIME_TO_START_TEXT : new scrui.cLocaleString("GameEntry.json", "0x7093c6e0"),
    CHALLENGE_ENDED_TEXT : new scrui.cLocaleString("GameEntry.json", "0xf8804ebd"),
    CHALLENGE_STARTS_IN_TEXT : new scrui.cLocaleString("GameEntry.json", "0x0e3e1015"),
    CHALLENGE_ENDS_IN_TEXT : new scrui.cLocaleString("GameEntry.json", "0x0f1e7c0c"),
    MY_CONTRIBUTION_TEXT : new scrui.cLocaleString("GameEntry.json", "0x53403b16", "My Contribution: ~contrinum~ ~unit~"),
    TOP_X_PERCENT_TEXT : new scrui.cLocaleString("GameEntry.json", "0x207cd2cf"),
    CHALLENGE_WINNERS_TEXT : new scrui.cLocaleString("GameEntry.json", "0xe1e22234"),
    TOP_X_PERCENT_CHALLENGE_ACHV_MSG : new scrui.cLocaleString("GameEntry.json", "0x5dab3749"),
    DATA_NOT_AVAILABLE_TEXT : new scrui.cLocaleString("GameEntry.json", "0x9ec7c1d7"),
    LB_UPDATES_DISCLAIMER_TEXT : new scrui.cLocaleString("GameEntry.json", "0x0f361834"),
    ABANDONED_CITY_TEXT : new scrui.cLocaleString("GameEntry.json", "0x3daa1708")
  };
  this.mDeepLinkPaths = {
    mProfilePath : "PROFILE",
    mRegionPath : "region",
    mMyRegionPath : "myRegion"
  };
  this.kMaxGlobalProgressBarWidth = 395;
  this.mRefreshTimer = null;
  this.kRefreshInterval = 0;
  this.mChallengeListCache = [];
  this.mTopRegionsActivePanel = this.mMyRegionsAccordian = this.mTopRegionsAccordian = this.mCurrRegionalChallengeTimer = this.mChallengeWindowControlIDs = this.mRegionalChallengeContentParent = this.mChallengeToShow = this.mLastUpdate = null;
  this.mTopRegionData = {
    IsLoading : null,
    Cache : null,
    CacheUpdated : !1,
    ChallengeID : null,
    kPageSize : 50,
    PaginationPageIndex : 0,
    IsLastPage : !1
  };
  this.mMyRegionsData = {
    Cache : null
  }
};
goog.inherits(simcity.cChallenges, simcity.cPanelTab);
simcity.cChallenges.prototype.InitTab = function (a) {
  simcity.cPanelTab.prototype.InitTab.call(this, a);
  var b = this.mControlIds;
  this.mTabContainer = a;
  this.mTopRegionsActivePanel = this.mTopRegionsActivePanels.MY_REGIONS;
  this.mTabContainer.FindControlByID(b.MY_REGIONS_BUTTON).SetSelected(!0);
  this.mRegionalChallengeContentParent = this.FindControlByID(b.REGIONAL_CHALLENGE_CONTENT_PARENT);
  for (var c in this.mLayouts)
    gUIManager.CacheLayout(this.mLayouts[c]);
  this.mChallengeWindowControlIDs = {
    CurrChallenge : {
      ChallengeParentBoxId : b.CURRENT_CHALLENGE_PARENT_WINDOW_BOX,
      ChallengeButtonId : b.CURRENT_CHALLENGE_WINDOW_CONTAINER,
      ChallengeNameLabelId : b.CURRENT_CHALLENGE_NAME,
      ChallengeImagelId : b.CURRENT_CHALLENGE_IMAGE,
      ChallengeTimeLeftTextId : b.CURRENT_CHALLENGE_TIME_LEFT_TEXT,
      ChallengeTimeLeftValueId : b.CURRENT_CHALLENGE_TIME_LEFT_VALUE,
      ChallengeHeadlineId : b.CURRENT_CHALLENGE_DESCRIPTION,
      ChallengeRewardImage : b.CURRENT_CHALLENGE_REWARD_IMAGE,
      ChallengeAchievementInfo : b.CURRENT_CHALLENGE_ACHIEVEMENT_INFO
    },
    UpcomingChallenge : {
      ChallengeParentBoxId : b.UPCOMING_CHALLENGE_PARENT_WINDOW_BOX,
      ChallengeButtonId : b.UPCOMING_CHALLENGE_WINDOW_CONTAINER,
      ChallengeNameLabelId : b.UPCOMING_CHALLENGE_NAME,
      ChallengeImagelId : b.UPCOMING_CHALLENGE_IMAGE,
      ChallengeTimeToStartId : b.UPCOMING_CHALLENGE_TIME_TO_START
    },
    FirstPrevChallenge : {
      ChallengeParentBoxId : b.FIRST_PREV_CHALLENGE_PARENT_WINDOW_BOX,
      ChallengeButtonId : b.FIRST_PREV_CHALLENGE_WINDOW_CONTAINER,
      ChallengeNameLabelId : b.FIRST_PREV_CHALLENGE_NAME,
      ChallengeImagelId : b.FIRST_PREV_CHALLENGE_IMAGE,
      ChallengeEndtimeId : b.FIRST_PREV_CHALLENGE_ENDTIME_LABEL
    }
  };
  this.AddEventListener(simcity.gEventTypes.CLICK, b.BACK_TO_ALL_CHALLENGES_BUTTON, this.ShowAllChallengesOverview);
  this.AddEventListener(simcity.gEventTypes.CLICK, b.CURRENT_CHALLENGE_WINDOW_CONTAINER, this.ChallengeClickHandler);
  this.AddEventListener(simcity.gEventTypes.CLICK, b.UPCOMING_CHALLENGE_WINDOW_CONTAINER, this.ChallengeClickHandler);
  this.AddEventListener(simcity.gEventTypes.CLICK, b.FIRST_PREV_CHALLENGE_WINDOW_CONTAINER, this.ChallengeClickHandler);
  this.AddEventListener(simcity.gEventTypes.CLICK,
    b.TOP_X_PERCENT_BUTTON, this.ShowTopTenPercentList);
  this.AddEventListener(simcity.gEventTypes.CLICK, b.MY_REGIONS_BUTTON, this.ShowMyRegionsProgressList);
  this.AddEventListener(simcity.gEventTypes.CLICK, b.LEADERBOARD_PAGINATION_BUTTON, this.LoadNextLeaderboardsPage);
  this.AddEventListener(simcity.gEventTypes.MOUSEUP, b.TOP_REGION_LIST_ITEM_BTN, this.RegionDetailItemClickHandler);
  this.AddEventListener(simcity.gEventTypes.MOUSEDOWN, b.VIEW_CURR_CHALLENGE_LINK, this.ViewRegionalChallenge);
  this.AddEventListener(simcity.gEventTypes.MOUSEDOWN,
    b.VIEW_UPCOMING_CHALLENGE_LINK, this.ViewRegionalChallenge);
  this.AddEventListener(simcity.gEventTypes.MOUSEDOWN, b.VIEW_PREV_CHALLENGE_LINK, this.ViewPreviousChallenge);
  this.HideGoBackButton();
  this.HideRegionalChallengeContent();
  a = simcity.cConstants.kLeaderboardsUpdateFreqDisclaimerTime;
  c = this.kLocaleStrings.LB_UPDATES_DISCLAIMER_TEXT;
  this.FindControlByID(b.LB_UPDATES_DISCLAIMER).SetLocaleText(c, {
    leaderboardUpdateMinutes : a
  })
};
simcity.cChallenges.prototype.Show = function (a) {
  var b = null;
  simcity.AddTelemetry("SC_UI_CHALLENGES_CLICK", 112);
  var c = this;
  (b = a ? function () {
    for (var b = 0; b < c.mChallengeListCache.length; b++)
      if (a === c.mChallengeListCache[b].challengeId) {
        c.ShowChallengeDetails(c.mChallengeListCache[b]);
        break
      }
  }
     : function () {
    c.ViewRegionalChallenge()
  }) ? this.Private_LoadData(b) : this.ShowAllChallengesOverview()
};
simcity.cChallenges.prototype.Hide = function () {
  this.mRefreshTimer && clearInterval(this.mRefreshTimer);
  this.mRefreshTimer = null;
  this.StopAllRegionalChallengeTimers();
  this.HideRegionalChallengeContent();
  simcity.cPanelTab.prototype.Hide.call(this)
};
simcity.cChallenges.prototype.Destroy = function () {
  this.StopAllRegionalChallengeTimers(!0);
  this.mRefreshTimer && (clearInterval(this.mRefreshTimer), this.mRefreshTimer = null);
  this.mChallengeListCache = [];
  this.mTopRegionsActivePanel = this.mChallengeToShow = this.mLastUpdate = null;
  this.mTopRegionData = {}

};
simcity.cChallenges.prototype.Private_LoadData = function (a) {
  if (this.mIsLoading)
    a && "function" === typeof a && a();
  else if (null == this.mLastUpdate || this.mLastUpdate + this.kRefreshInterval < (new Date).getTime()) {
    this.mLastUpdate = (new Date).getTime();
    this.mIsLoading = !0;
    var b = this;
    this.ShowLoading();
    this.HideNoDataMessage();
    simcity.gSimCityWorldController.Challenges.LoadChallenges(function (c) {
      b.HideLoading();
      b.mIsLoading = !1;
      c && (b.mChallengeListCache.length = 0, b.mChallengeListCache = [].concat(c));
      a && "function" ===
      typeof a ? a() : b.ShowChallenges(b.mChallengeListCache)
    }, function (a) {
      b.HideLoading();
      b.mIsLoading = !1;
      b.ShowNoDataMessage(simcity.gNetworkStateManager.CheckNetworkError(a))
    })
  } else
    this.ShowChallenges(this.mChallengeListCache), a && "function" === typeof a && a()
};
simcity.cChallenges.prototype.Private_StartRefresh = function () {
  this.mRefreshTimer && clearInterval(this.mRefreshTimer);
  var a = this;
  this.mRefreshTimer = setInterval(function () {
      a.Private_LoadData()
    }, this.kRefreshInterval)
};
simcity.cChallenges.prototype.ViewRegionalChallenge = function () {
  this.CheckChallengeExistsByType(this.mChallengeScheduleType.CURRENT) ? this.ViewCurrentChallenge() : this.CheckChallengeExistsByType(this.mChallengeScheduleType.UPCOMING) ? this.ViewUpcomingChallenge() : this.ShowNoRegionalChallengesMsg()
};
simcity.cChallenges.prototype.ViewCurrentChallenge = function () {
  var a = this.GetChallengeByType("Regional", this.mChallengeScheduleType.CURRENT);
  this.ShowChallengeDetails(a)
};
simcity.cChallenges.prototype.ViewPreviousChallenge = function () {
  var a = this.GetChallengeByType("Regional", this.mChallengeScheduleType.PREVIOUS);
  this.ShowChallengeDetails(a)
};
simcity.cChallenges.prototype.ViewUpcomingChallenge = function () {
  var a = this.GetChallengeByType("Regional", this.mChallengeScheduleType.UPCOMING);
  this.ShowChallengeDetails(a)
};
simcity.cChallenges.prototype.ShowChallengeLink = function (a) {
  var b = this.mControlIds;
  a === this.mChallengeScheduleType.NONE ? (this.FindControlByID(b.VIEW_CURR_CHALLENGE_LINK).SetVisibility(!1), this.FindControlByID(b.VIEW_PREV_CHALLENGE_LINK).SetVisibility(!1), this.FindControlByID(b.VIEW_UPCOMING_CHALLENGE_LINK).SetVisibility(!1)) : a === this.mChallengeScheduleType.CURRENT ? (this.FindControlByID(b.VIEW_CURR_CHALLENGE_LINK).SetVisibility(!0), this.FindControlByID(b.VIEW_PREV_CHALLENGE_LINK).SetVisibility(!1),
    this.FindControlByID(b.VIEW_UPCOMING_CHALLENGE_LINK).SetVisibility(!1)) : a === this.mChallengeScheduleType.PREVIOUS ? (this.FindControlByID(b.VIEW_CURR_CHALLENGE_LINK).SetVisibility(!1), this.FindControlByID(b.VIEW_PREV_CHALLENGE_LINK).SetVisibility(!0), this.FindControlByID(b.VIEW_UPCOMING_CHALLENGE_LINK).SetVisibility(!1)) : a === this.mChallengeScheduleType.UPCOMING && (this.FindControlByID(b.VIEW_CURR_CHALLENGE_LINK).SetVisibility(!1), this.FindControlByID(b.VIEW_PREV_CHALLENGE_LINK).SetVisibility(!1), this.FindControlByID(b.VIEW_UPCOMING_CHALLENGE_LINK).SetVisibility(!0))
};
simcity.cChallenges.prototype.GetChallengeByType = function (a, b) {
  for (var c = null, d = 0; d < this.mChallengeListCache.length; d++) {
    var e = this.mChallengeListCache[d];
    if (this.GetChallengeScheduleType(e) == b && e.challengeType === a) {
      c = e;
      break
    }
  }
  return c
};
simcity.cChallenges.prototype.CheckChallengeExistsByType = function (a) {
  return null !== this.GetChallengeByType("Regional", a)
};
simcity.cChallenges.prototype.HideRegionalChallengeContent = function () {
  this.mRegionalChallengeContentParent.SetVisibility(!1)
};
simcity.cChallenges.prototype.ShowRegionalChallengeDetails = function () {
  this.HideGoBackButton();
  var a = this.mChallengeToShow,
  b = this;
  if (a) {
    var c = this.mControlIds,
    d = this.GetChallengeScheduleType(a),
    e = d == this.mChallengeScheduleType.CURRENT ? this.kLocaleStrings.CURRENT_CHALLENGE_TEXT : d == this.mChallengeScheduleType.PREVIOUS ? this.kLocaleStrings.PREVIOUS_CHALLENGE_TEXT : this.kLocaleStrings.UPCOMING_CHALLENGE_TEXT;
    this.mTabContainer.FindControlByID(c.REGIONAL_CHALLENGE_SCHEDULE_TYPE).SetLocaleText(e);
    this.mTabContainer.FindControlByID(c.REGIONAL_CHALLENGE_NAME).SetRawText(a.headline);
    this.mTabContainer.FindControlByID(c.REGIONAL_CHALLENGE_IMAGE).SetWindowImage(a.largeBkgImage);
    var e = a.longDescription.split("<br><br>").map(simcity.gUIToolbox.TrimString),
    f = this.mTabContainer.FindControlByID(c.REGIONAL_CHALLENGE_CALL_TO_ACTION);
    f.SetRawText(e[1]);
    this.mTabContainer.FindControlByID(c.REGIONAL_CHALLENGE_DESCRIPTION).SetRawText(e.join(" "));
    e = {
      topXpercentagenumber : a.rewardPercentage / 100,
      challengeachievementname : a.achievementName
    };
    this.mTabContainer.FindControlByID(c.REGIONAL_CHALLENGE_REWARD_INFO).SetLocaleText(this.kLocaleStrings.TOP_X_PERCENT_CHALLENGE_ACHV_MSG,
      e);
    this.mTopRegionsActivePanel = this.mTopRegionsActivePanels.MY_REGIONS;
    this.mTabContainer.FindControlByID(c.MY_REGIONS_BUTTON).SetSelected(!0);
    this.mTopRegionData.ChallengeID && this.mTopRegionData.ChallengeID != a.challengeId && this.mTabContainer.FindControlByID(c.TOP_REGIONS_LIST_CONTAINER).DestroyChildren();
    e = this.FindControlByID(c.REGIONAL_CHALLENGE_ENDS_IN_TEXT_BG);
    if (d == this.mChallengeScheduleType.CURRENT) {
      this.FindControlByID(c.REGIONAL_CHALLENGE_SCHEDULE_TAG).SetVisibility(!1);
      var g = simcity.gUIToolbox.PrettyDateUtcMs((new Date).getTime() +
          a.timeLeftToEndInMs);
      e.FindControlByID(c.REGIONAL_CHALLENGE_ENDS_IN_TEXT).SetLocaleText(this.kLocaleStrings.CHALLENGE_ENDS_IN_TEXT, {
        endsintime : g
      });
      e.SetVisibility(!0);
      this.CheckChallengeExistsByType(this.mChallengeScheduleType.PREVIOUS) ? this.ShowChallengeLink(this.mChallengeScheduleType.PREVIOUS) : this.ShowChallengeLink(this.mChallengeScheduleType.NONE)
    } else {
      e.SetVisibility(!1);
      var g = this.FindControlByID(c.REGIONAL_CHALLENGE_SCHEDULE_TAG),
      h = g.FindControlByID(c.REGIONAL_CHALLENGE_SCHEDULE_TAGLINE),
      e = g.FindControlByID(c.REGIONAL_CHALLENGE_SCHEDULE_TIME);
      g.SetVisibility(!0);
      d == this.mChallengeScheduleType.PREVIOUS ? (h.SetLocaleText(this.kLocaleStrings.CHALLENGE_ENDED_TEXT), g = simcity.gUIToolbox.PrettyDateUtcMs((new Date).getTime() + a.timeLeftToEndInMs), e.SetLocaleText(this.kLocaleStrings.ENDTIME_TEXT, {
          endtime : g
        }), this.CheckChallengeExistsByType(this.mChallengeScheduleType.CURRENT) || !this.CheckChallengeExistsByType(this.mChallengeScheduleType.UPCOMING) ? this.ShowChallengeLink(this.mChallengeScheduleType.CURRENT) :
        this.ShowChallengeLink(this.mChallengeScheduleType.UPCOMING)) : (h.SetLocaleText(this.kLocaleStrings.CHALLENGE_STARTS_IN_TEXT), g = simcity.gUIToolbox.PrettyDateUtcMs((new Date).getTime() + a.timeLeftToStartInMs), e.SetLocaleText(this.kLocaleStrings.TIME_TO_START_TEXT, {
          timetostartchallenge : g
        }), this.CheckChallengeExistsByType(this.mChallengeScheduleType.PREVIOUS) ? this.ShowChallengeLink(this.mChallengeScheduleType.PREVIOUS) : this.ShowChallengeLink(this.mChallengeScheduleType.NONE))
    }
    d !== this.mChallengeScheduleType.PREVIOUS ?
    (e = a.rewardPercentage / 100, this.mTabContainer.FindControlByID(c.TOP_X_PERCENT_BUTTON_TEXT).SetLocaleText(this.kLocaleStrings.TOP_X_PERCENT_TEXT, {
        topxnumber : e
      })) : this.mTabContainer.FindControlByID(c.TOP_X_PERCENT_BUTTON_TEXT).SetLocaleText(this.kLocaleStrings.CHALLENGE_WINNERS_TEXT);
    this.mMyRegionsAccordian = this.mTopRegionsAccordian = null;
    this.mTopRegionData.PaginationPageIndex = 0;
    this.mTopRegionData.IsLastPage = !1;
    this.mTopRegionData.Cache = null;
    this.mMyRegionsData.Cache = null;
    this.mTopRegionData.CacheUpdated =
      !1;
    this.mTabContainer.FindControlByID(c.TOP_REGIONS_LIST_CONTAINER).DestroyChildren();
    d === this.mChallengeScheduleType.UPCOMING ? this.mTabContainer.FindControlByID(c.TOP_REGIONS_CHALLENGE_NOT_STARTED_MSG).SetVisibility(!0) : (this.mTabContainer.FindControlByID(c.TOP_REGIONS_CHALLENGE_NOT_STARTED_MSG).SetVisibility(!1), this.LoadTopRegionsData(a.challengeId));
    this.mTabContainer.FindControlByID(c.REGIONAL_CHALLENGE_REWARD_IMAGE).SetWindowImage(a.achievementImage);
    this.mRegionalChallengeContentParent.SetVisibility(!0);
    this.FindControlByID(this.mControlIds.NO_CHALLENGE_ACTIVE_MSG).SetVisibility(!1);
    var i = function () {
      var a = f.GetTextHeight();
      a === 0 ? setTimeout(i, 200) : b.mTabContainer.FindControlByID(c.REGIONAL_CHALLENGE_CALL_TO_ACTION_BG).SetHeight(a + 15)
    };
    setTimeout(i, 200)
  }
};
simcity.cChallenges.prototype.GetChallengeScheduleType = function (a) {
  return "undefined" === typeof a.timeLeftToEndInMs ? "undefined" != typeof a.timeLeftToStartInMs && 0 < a.timeLeftToStartInMs ? this.mChallengeScheduleType.UPCOMING : null : 0 < a.timeLeftToEndInMs ? this.mChallengeScheduleType.CURRENT : 0 >= a.timeLeftToEndInMs ? this.mChallengeScheduleType.PREVIOUS : this.mChallengeScheduleType.UPCOMING
};
simcity.cChallenges.prototype.LoadTopRegionsData = function (a) {
  this.mTopRegionData.IsLoading ? this.ShowTopRegionsData() : (this.mTopRegionData.ChallengeID = a, this.LoadNextLeaderboardsPage())
};
simcity.cChallenges.prototype.LoadNextLeaderboardsPage = function () {
  if (!this.mTopRegionData.IsLoading) {
    this.mTopRegionData.IsLoading = !0;
    var a = this;
    this.ShowRegionListLoading();
    simcity.gSimCityWorldController.Challenges.LoadRegionalChallengeLeaderboards(this.mTopRegionData.ChallengeID, this.mTopRegionData.kPageSize, this.mTopRegionData.PaginationPageIndex, function (b, c) {
      a.mTopRegionData.IsLoading = !1;
      a.HideRegionListLoading();
      if (a.mTopRegionData.Cache) {
        var d = a.mTopRegionData.Cache.topRegions.concat(b.topRegions);
        a.mTopRegionData.Cache = b;
        a.mTopRegionData.Cache.topRegions = d
      } else
        a.mTopRegionData.Cache = b;
      a.mTopRegionData.CacheUpdated = !0;
      var d = {},
      e = b.myRegions[0];
      if (e.myCompletedRegions && 0 < e.myCompletedRegions.length)
        for (var f in e.myCompletedRegions) {
          var g = e.myCompletedRegions[f];
          d[g.regionId] = g.challenge
        }
      if (e.myInProgressRegions && 0 < e.myInProgressRegions.length)
        for (f in e.myInProgressRegions)
          g = e.myInProgressRegions[f], d[g.regionId] = g.challenge;
      a.mMyRegionsData.Cache = d;
      a.mTopRegionData.PaginationPageIndex++;
      a.mTopRegionData.IsLastPage = c;
      a.ShowTopRegionsData()
    }, function (b) {
      a.mTopRegionData.IsLoading = !1;
      a.HideRegionListLoading();
      simcity.gNetworkStateManager.CheckNetworkError(b)
    })
  }
};
simcity.cChallenges.prototype.ShowTopRegionsData = function () {
  switch (this.mTopRegionsActivePanel) {
  case this.mTopRegionsActivePanels.TOP_X_PERCENT:
    this.Private_ShowTopXPercentData();
    break;
  case this.mTopRegionsActivePanels.MY_REGIONS:
    if (this.mTopRegionData.CacheUpdated) {
      var a = this.mTabContainer.FindControlByID(this.mControlIds.TOP_REGIONS_LIST_CONTAINER);
      this.Private_LoadTopXPercentLeaderboardTiles(a, this.mTopRegionData.Cache.topRegions)
    }
    this.Private_ShowMyRegionsProgress()
  }
};
simcity.cChallenges.prototype.RegionDetailItemClickHandler = function (a) {
  !0 === a.mIsSelected ? a.SetSelected(!1) : a.SetSelected(!0);
  this.Private_LoadRegionDetails(a)
};
simcity.cChallenges.prototype.Private_LoadRegionDetails = function (a) {
  var b,
  c,
  d = this;
  switch (this.mTopRegionsActivePanel) {
  case this.mTopRegionsActivePanels.TOP_X_PERCENT:
    c = this.mTopRegionsAccordian;
    b = function (b) {
      d.HideRegionListLoading();
      d.Private_InsertRegionUsersDetails(b, a);
      d.mTopRegionsAccordian.ToggleClick(a)
    };
    break;
  case this.mTopRegionsActivePanels.MY_REGIONS:
    c = this.mMyRegionsAccordian;
    b = function (b) {
      d.HideRegionListLoading();
      d.Private_InsertRegionUsersDetails(b, a);
      d.mMyRegionsAccordian.ToggleClick(a)
    };
    break;
  default:
    b = function () {
      d.HideRegionListLoading()
    }
  }
  !0 === a.itemRef.isOpen ? c.ToggleClick(a) : (c = function (a) {
    d.HideRegionListLoading();
    simcity.gNetworkStateManager.CheckNetworkError(a)
  }, this.ShowRegionListLoading(), !0 === a.isMyRegion && this.mMyRegionsData.Cache[a.regionId] ? b([this.mMyRegionsData.Cache[a.regionId]]) : simcity.gSimCityWorldController.Challenges.LoadRegionalChallengeRegionDetails(a.regionId, this.mChallengeToShow.challengeId, b, c))
};
simcity.cChallenges.prototype.ShowTopTenPercentList = function () {
  this.mTopRegionsActivePanel === this.mTopRegionsActivePanels.MY_REGIONS && (this.mTopRegionsActivePanel = this.mTopRegionsActivePanels.TOP_X_PERCENT, this.Private_ShowTopXPercentData(!0))
};
simcity.cChallenges.prototype.ShowMyRegionsProgressList = function () {
  this.mTopRegionsActivePanel === this.mTopRegionsActivePanels.TOP_X_PERCENT && (this.mTopRegionsActivePanel = this.mTopRegionsActivePanels.MY_REGIONS, this.Private_ShowMyRegionsProgress())
};
simcity.cChallenges.prototype.Private_ShowTopXPercentData = function (a) {
  this.mTabContainer.FindControlByID(this.mControlIds.MY_REGIONS_LIST_CONTAINER).SetVisibility(!1);
  var b = this.mTabContainer.FindControlByID(this.mControlIds.TOP_REGIONS_LIST_CONTAINER);
  b.SetVisibility(!0);
  if (this.mTopRegionData.Cache) {
    var c = this.mTopRegionData.Cache.topRegions;
    !c || 0 === c.length ? this.mTabContainer.FindControlByID(this.mControlIds.TOP_REGIONS_LIST_NO_DATA_MSG).SetVisibility(!0) : (this.mTabContainer.FindControlByID(this.mControlIds.TOP_REGIONS_LIST_NO_DATA_MSG).SetVisibility(!1),
      a || this.Private_LoadTopXPercentLeaderboardTiles(b, c, a))
  }
};
simcity.cChallenges.prototype.Private_LoadTopXPercentLeaderboardTiles = function (a, b, c) {
  var d = this.mControlIds;
  a.FindControlByID(this.mControlIds.LEADERBOARD_PAGINATION_FOOTER) && this.mTopRegionsAccordian.mItems.pop().DestroyControl();
  this.mTopRegionsAccordian || (this.mTopRegionsAccordian = new simcity.cAccordion(a, this.mLayouts.TOP_REGION_LIST_ITEM, null, this.mAnimIDs.TOPREGION_ITEM_EXPAND_ANIM));
  for (c = void 0 !== typeof c && !0 == c ? 0 : (this.mTopRegionData.PaginationPageIndex - 1) * this.mTopRegionData.kPageSize; b &&
    c < b.length; c++) {
    var e = b[c],
    a = this.mTopRegionsAccordian.CreateItem();
    a.FindControlByID(d.ITEM_INDEX).SetRawText(c + 1);
    a.FindControlByID(d.ITEM_REGION_NAME).SetRawText(e.regionName);
    a.FindControlByID(d.ITEM_COMPLETION_TIME).SetRawText(this.FormatDateInShorthand(6E4 * e.regionalTicks));
    a.FindControlByID(d.ITEM_PROGRESS_VALUE).SetRawText(scrui.LocalizeNumber(e.regionalScore) + " " + e.unit);
    var f = a.FindControlByID(d.TOP_REGION_LIST_ITEM_BTN);
    f.itemRef = a;
    f.regionId = e.regionId;
    f.yOffset = f.mHeight;
    !0 === e.myRegion &&
    (a.FindControlByID(d.LIST_ITEM_REGULAR_BG).SetVisibility(!1), a.FindControlByID(d.LIST_ITEM_USERS_OWN_BG).SetVisibility(!0), f.isMyRegion = !0, simcity.gGlobalUIHandler && simcity.gGlobalUIHandler.mRegionID === e.regionId ? a.FindControlByID(d.ITEM_CURRENT_REGION_MARKER).SetVisibility(!0) : a.FindControlByID(d.ITEM_CURRENT_REGION_MARKER).SetVisibility(!1))
  }
  b && (0 < b.length && !1 === this.mTopRegionData.IsLastPage) && this.mTopRegionsAccordian.CreateItem(this.mLayouts.PAGINATION_FOOTER);
  this.mTopRegionData.CacheUpdated =
    !1
};
simcity.cChallenges.prototype.Private_ShowMyRegionsProgress = function (a) {
  var b = this.mControlIds;
  this.mTabContainer.FindControlByID(b.TOP_REGIONS_LIST_CONTAINER).SetVisibility(!1);
  var c = this.mTabContainer.FindControlByID(b.MY_REGIONS_LIST_CONTAINER);
  c.DestroyChildren();
  c.SetVisibility(!0);
  var d,
  e;
  if (this.mTopRegionData.Cache) {
    if (this.mTopRegionData.Cache.myRegions && this.mTopRegionData.Cache.myRegions.length)
      for (var f in this.mTopRegionData.Cache.myRegions) {
        var g = this.mTopRegionData.Cache.myRegions[f];
        g.myCompletedRegions &&
        (d = g.myCompletedRegions);
        g.myInProgressRegions && (e = g.myInProgressRegions)
      }
    if (!d && !e || d && 0 === d.length && e && 0 === e.length || d && 0 === d.length && !e || !d && e && 0 === e.length)
      this.mTabContainer.FindControlByID(b.TOP_REGIONS_LIST_NO_DATA_MSG).SetVisibility(!0);
    else {
      this.mTabContainer.FindControlByID(b.TOP_REGIONS_LIST_NO_DATA_MSG).SetVisibility(!1);
      this.mMyRegionsAccordian || (this.mMyRegionsAccordian = new simcity.cAccordion(c, this.mLayouts.TOP_REGION_LIST_ITEM, null, this.mAnimIDs.TOPREGION_ITEM_EXPAND_ANIM));
      c = null;
      if (d) {
        f = this.mMyRegionsAccordian.CreateItem(this.mLayouts.MY_REGION_LEADERBOARD_DIVIDER);
        f.FindControlByID(b.MY_INPROGRESS_REGIONS_TEXT).SetVisibility(!1);
        f.FindControlByID(b.MY_COMPLETED_REGIONS_TEXT).SetVisibility(!0);
        for (var g = 0, h = d.length; g < h; g++) {
          var i = d[g];
          f = this.mMyRegionsAccordian.CreateItem();
          f.FindControlByID(b.ITEM_INDEX).SetRawText(g + 1);
          f.FindControlByID(b.ITEM_REGION_NAME).SetRawText(i.regionName);
          f.FindControlByID(b.ITEM_COMPLETION_TIME).SetRawText(this.FormatDateInShorthand(6E4 * i.regionalTicks));
          f.FindControlByID(b.ITEM_PROGRESS_VALUE).SetRawText(scrui.LocalizeNumber(i.regionalScore) + " " + i.unit);
          f.FindControlByID(b.LIST_ITEM_REGULAR_BG).SetVisibility(!1);
          f.FindControlByID(b.LIST_ITEM_USERS_OWN_BG).SetVisibility(!0);
          !0 === i.topRegion ? f.FindControlByID(b.TOP_X_PERCENT_MARKER).SetVisibility(!0) : f.FindControlByID(b.TOP_X_PERCENT_MARKER).SetVisibility(!1);
          simcity.gGlobalUIHandler && simcity.gGlobalUIHandler.mRegionID === i.regionId ? f.FindControlByID(b.ITEM_CURRENT_REGION_MARKER).SetVisibility(!0) :
          f.FindControlByID(b.ITEM_CURRENT_REGION_MARKER).SetVisibility(!1);
          var j = f.FindControlByID(b.TOP_REGION_LIST_ITEM_BTN);
          j.itemRef = f;
          j.regionId = i.regionId;
          j.yOffset = j.mHeight;
          j.isMyRegion = !0;
          a && i.regionId === a && (c = j)
        }
      }
      if (e && 0 < e.length) {
        f = this.mMyRegionsAccordian.CreateItem(this.mLayouts.MY_REGION_LEADERBOARD_DIVIDER);
        f.FindControlByID(b.MY_COMPLETED_REGIONS_TEXT).SetVisibility(!1);
        f.FindControlByID(b.MY_INPROGRESS_REGIONS_TEXT).SetVisibility(!0);
        g = 0;
        for (h = e.length; g < h; g++)
          i = e[g], f = this.mMyRegionsAccordian.CreateItem(),
          f.FindControlByID(b.ITEM_INDEX).SetRawText(g + 1), f.FindControlByID(b.ITEM_REGION_NAME).SetRawText(i.regionName), f.FindControlByID(b.ITEM_PROGRESS_VALUE).SetRawText(scrui.LocalizeNumber(i.regionalScore) + " " + i.unit), f.FindControlByID(b.ITEM_COMPLETION_TIME).SetRawText(this.FormatDateInShorthand(6E4 * i.regionalTicks)), f.FindControlByID(b.LIST_ITEM_REGULAR_BG).SetVisibility(!1), f.FindControlByID(b.LIST_ITEM_USERS_OWN_BG).SetVisibility(!0), f.FindControlByID(b.TOP_X_PERCENT_MARKER).SetVisibility(!1), simcity.gGlobalUIHandler &&
          simcity.gGlobalUIHandler.mRegionID === i.regionId ? f.FindControlByID(b.ITEM_CURRENT_REGION_MARKER).SetVisibility(!0) : f.FindControlByID(b.ITEM_CURRENT_REGION_MARKER).SetVisibility(!1), j = f.FindControlByID(b.TOP_REGION_LIST_ITEM_BTN), j.itemRef = f, j.regionId = i.regionId, j.yOffset = j.mHeight, j.isMyRegion = !0, a && i.regionId === a && (c = j);
        return c
      }
    }
  }
};
simcity.cChallenges.prototype.Private_InsertRegionUsersDetails = function (a, b) {
  var c,
  d = this.mControlIds,
  e = b.regionId,
  f = b.itemRef,
  g = f.FindControlByID(d.ITEM_EXPANDED_DETAILS_WINDOW),
  h = b.yOffset,
  i = 0,
  j;
  g.mChildren && g.DestroyChildren();
  try {
    var k = a[0].playingRegions[0].regionalTarget[0].regionalParticipants
  } catch (l) {}

  if (k)
    for (var m = 0, n = k.length; m < n; m++) {
      c = gUIManager.LoadAndCacheLayout(this.mLayouts.TOP_REGION_LIST_ITEM_EXPANDED, g);
      c.SetPosition(0, i);
      var i = i + c.mHeight,
      p;
      p = k[m].userId == simcity.gSessionManager.mUserID ?
        [this.mDeepLinkPaths.mMyRegionPath, e].join() : [this.mDeepLinkPaths.mRegionPath, e].join();
      var q = c.FindControlByID(d.EXPANDED_ENTRY_CONTAINER);
      simcity.gDeepLinkManager.mDeepLink.WrapControl(q, p);
      void 0 === j && (j = c.mHeight, p = j * k.length, q = f.FindAnimationByID(this.mAnimIDs.TOPREGION_ITEM_EXPAND_ANIM), q.FindKeyFrameByID(this.mAnimKeyframes.TOPREGION_DETAILS_CONTAINER_HEIGHT).mValue = p, q.FindKeyFrameByID(this.mAnimKeyframes.LEADERBOARD_ENTRY_LAYOUT_HEIGHT).mValue = p + h);
      c.FindControlByID(d.REGION_PLAYER_CONTRIBUTION).SetRawText(scrui.LocalizeNumber(k[m].contribution.boxScore) +
        " " + a[0].unit);
      void 0 !== k[m].userName && void 0 !== k[m].userId ? (c.FindControlByID(d.REGION_PLAYER_NAME).SetRawText(k[m].userName), p = c.FindControlByID(d.PLAYER_AVATAR_IMAGE), simcity.gUIToolbox.SetAvatar(p, k[m].userName), q = [this.mDeepLinkPaths.mProfilePath, k[m].userId].join(), simcity.gDeepLinkManager.mDeepLink.WrapControl(p, q)) : (c.FindControlByID(d.REGION_PLAYER_NAME).SetRawText(this.kLocaleStrings.ABANDONED_CITY_TEXT.LoadAndGetTextSynchronous()), c.FindControlByID(d.AVATAR_ICON_LAYOUT).SetVisibility(!1),
        c.FindControlByID(d.ABANDONED_CITY_ICON_BOX).SetVisibility(!0));
      p = {
        id : k[m].userId,
        isOnline : k[m].onlineStatus,
        currentPlayingBoxId : k[m].currentPlayingBoxId,
        currentPlayingRegionId : k[m].currentPlayingRegionId
      };
      c.FindControlByID(d.PLAYER_AVATAR_FRAME).SetWindowImage(simcity.gUIToolbox.GetAvatarFrame(p, e, k[m].boxId));
      c.FindControlByID(d.REGION_CITY_NAME).SetRawText(k[m].boxName);
      p = k[m].contribution.boxTicks;
      c.FindControlByID(d.REGION_CITY_TIME).SetRawText(this.FormatDateInShorthand(6E4 * p))
    }
};
simcity.cChallenges.prototype.ShowChallenges = function (a) {
  if (a && 0 != this.mChallengeListCache.length) {
    for (var a = this.Private_SortChallenges(), a = a.CurrChallenges.concat(a.UpcomingChallenges, a.PreviousChallenges), b = 0; b < a.length; b++) {
      var c = a[b],
      d = c.ControlIDs,
      e = c.Challenge,
      f = c.ChallengeScheduleType,
      c = this.mTabContainer.FindControlByID(d.ChallengeParentBoxId),
      g = c.FindControlByID(d.ChallengeImagelId);
      g.FindControlByID(d.ChallengeButtonId).linkedChallenge = e;
      g.SetWindowImage(e.smallBkgImage);
      c.FindControlByID(d.ChallengeNameLabelId).SetText(e.headline);
      if (f == this.mChallengeScheduleType.CURRENT && "Regional" == e.challengeType) {
        var h = g.FindControlByID(d.ChallengeTimeLeftValueId);
        g.FindControlByID(d.ChallengeTimeLeftTextId).SetVisibility(!0);
        e.countDownTimer || (e.countDownTimer = new simcity.cChallenges.CountDownTimer(e.timeLeftToEndInMs, this));
        this.UpdateTimeLeftTextLabel(e.countDownTimer.GetMillisLeft(), h);
        e.countDownTimer.Start(1E3, h, function (a, b) {
          this.UpdateTimeLeftTextLabel(a, b)
        })
      } else
        d.ChallengeTimeLeftTextId && g.FindControlByID(d.ChallengeTimeLeftTextId).SetVisibility(!1);
      f == this.mChallengeScheduleType.CURRENT ? (g.FindControlByID(d.ChallengeHeadlineId).SetText(e.longDescription), c.FindControlByID(d.ChallengeRewardImage).SetWindowImage(e.achievementImage), c = {
          topXpercentagenumber : e.rewardPercentage / 100,
          challengeachievementname : e.achievementName
        }, this.mTabContainer.FindControlByID(d.ChallengeAchievementInfo).SetLocaleText(this.kLocaleStrings.TOP_X_PERCENT_CHALLENGE_ACHV_MSG, c)) : f == this.mChallengeScheduleType.PREVIOUS ? (e = simcity.gUIToolbox.PrettyDateUtcMs((new Date).getTime() +
            e.timeLeftToEndInMs), c.FindControlByID(d.ChallengeEndtimeId).SetLocaleText(this.kLocaleStrings.ENDTIME_TEXT, {
          endtime : e
        })) : f == this.mChallengeScheduleType.UPCOMING && (e = simcity.gUIToolbox.PrettyDateUtcMs((new Date).getTime() + e.timeLeftToStartInMs), c.FindControlByID(d.ChallengeTimeToStartId).SetLocaleText(this.kLocaleStrings.TIME_TO_START_TEXT, {
          timetostartchallenge : e
        }))
    }
    this.FindControlByID(this.mControlIds.CONTENT_WINDOW).SetVisibility(!0)
  }
};
simcity.cChallenges.prototype.Private_SortChallenges = function () {
  for (var a = this.mChallengeWindowControlIDs, b = {
      CurrChallenges : [],
      UpcomingChallenges : [],
      PreviousChallenges : []
    }, c = 0; this.mChallengeListCache && c < this.mChallengeListCache.length; c++) {
    var d = this.mChallengeListCache[c],
    e = this.GetChallengeScheduleType(d),
    d = {
      Challenge : d,
      ChallengeScheduleType : e
    };
    e == this.mChallengeScheduleType.CURRENT && 0 === b.CurrChallenges.length && (d.ControlIDs = a.CurrChallenge, b.CurrChallenges.push(d));
    e == this.mChallengeScheduleType.UPCOMING &&
    0 === b.UpcomingChallenges.length && (d.ControlIDs = a.UpcomingChallenge, b.UpcomingChallenges.push(d));
    e == this.mChallengeScheduleType.PREVIOUS && 0 === b.PreviousChallenges.length && (d.ControlIDs = a.FirstPrevChallenge, b.PreviousChallenges.push(d))
  }
  return b
};
simcity.cChallenges.prototype.ShowGlobalChallengeDetails = function () {
  var a = this.mChallengeToShow;
  if (a) {
    var b = this.mControlIds,
    c = this.GetChallengeScheduleType(a),
    d = this,
    e = function (c) {
      d.mTabContainer.FindControlByID(b.GLOBAL_PROGRESS_COMPLETED_UNITS).SetText(scrui.LocalizeNumber(c.totalsContribution));
      d.mTabContainer.FindControlByID(b.GLOBAL_PROGRESS_TOTAL).SetText("/ " + scrui.LocalizeNumber(c.requiredContribution) + " " + c.totalContributionText);
      d.mTabContainer.FindControlByID(b.GLOBAL_CHALLENGE_MY_CONTRIBUTION_UNITS).SetLocaleText(d.kLocaleStrings.MY_CONTRIBUTION_TEXT, {
        contrinum : scrui.LocalizeNumber(c.playerContribution),
        unit : a.unit
      })
    };
    simcity.gSimCityWorldController.Challenges.LoadGlobalChallengeDetails(a.challengeId, e, e);
    this.mTabContainer.FindControlByID(b.GLOBAL_CHALLENGE_NAME).SetText(a.headline);
    this.mTabContainer.FindControlByID(b.GLOBAL_CHALLENGE_OVERVIEW).SetText(a.shortDescription);
    this.mTabContainer.FindControlByID(b.GLOBAL_CHALLENGE_IMAGE).SetWindowImage(a.largeBkgImage);
    this.mTabContainer.FindControlByID(b.GLOBAL_CHALLENGE_DESCRIPTION).SetText(a.longDescription);
    this.mTabContainer.FindControlByID(b.GLOBAL_CHALLENGE_REWARD_IMAGE).SetWindowImage(a.achievementImage);
    e = a.totalsContribution / a.requiredContribution * this.kMaxGlobalProgressBarWidth;
    this.mTabContainer.FindControlByID(b.GLOBAL_CHALLENGE_PROGRESS_BAR).SetWidth(e);
    c == this.mChallengeScheduleType.PREVIOUS ? (this.mTabContainer.FindControlByID(b.GLOBAL_CHALLENGE_COMPLETE_MARKER).SetVisibility(!0), this.mTabContainer.FindControlByID(b.GLOBAL_PROGRESS_COMPLETED_UNITS).SetVisibility(!1)) : (this.mTabContainer.FindControlByID(b.GLOBAL_CHALLENGE_COMPLETE_MARKER).SetVisibility(!1),
      this.mTabContainer.FindControlByID(b.GLOBAL_PROGRESS_COMPLETED_UNITS).SetVisibility(!0))
  }
};
simcity.cChallenges.prototype.StartRegionalChallengeCountDownTimer = function (a, b) {
  a.countDownTimer || (a.countDownTimer = new simcity.cChallenges.CountDownTimer(a.timeLeftToEndInMs, this));
  this.mCurrRegionalChallengeTimer = a.countDownTimer;
  this.UpdateTimeLeftTextLabel(this.mCurrRegionalChallengeTimer.GetMillisLeft(), b);
  this.mCurrRegionalChallengeTimer.Start(1E3, b, function (a, b) {
    this.UpdateTimeLeftTextLabel(a, b)
  })
};
simcity.cChallenges.prototype.ShowRegionListLoading = function () {
  simcity.cPanelTab.prototype.LoadStart.call(this)
};
simcity.cChallenges.prototype.HideRegionListLoading = function () {
  simcity.cPanelTab.prototype.LoadFinish.call(this)
};
simcity.cChallenges.prototype.UpdateTimeLeftTextLabel = function (a, b) {
  b.SetText(this.FormatDate(a))
};
simcity.cChallenges.prototype.ChallengeClickHandler = function (a) {
  a.isDisabled && !0 === a.isDisabled || (this.StopAllRegionalChallengeTimers(), this.ShowChallengeDetails(a.linkedChallenge))
};
simcity.cChallenges.prototype.ShowChallengeDetails = function (a) {
  if (this.mChallengeToShow = a)
    "Regional" === this.mChallengeToShow.challengeType ? (simcity.gGlobalUIHandler || this.ShowChallengeByType(this.mChallengeType.REGIONAL), this.ShowRegionalChallengeDetails()) : "Global" === this.mChallengeToShow.challengeType && (simcity.gGlobalUIHandler || this.ShowChallengeByType(this.mChallengeType.GLOBAL), this.ShowGlobalChallengeDetails())
};
simcity.cChallenges.prototype.ShowChallengeByType = function (a) {
  switch (a) {
  case this.mChallengeType.ALL:
    this.mTabContainer.FindControlByID(this.mContentLayersIds.ALL_CHALLENGES).SetVisibility(!0);
    this.mTabContainer.FindControlByID(this.mContentLayersIds.REGIONAL_CHALLENGE_DETAIL).SetVisibility(!1);
    this.mTabContainer.FindControlByID(this.mContentLayersIds.GLOBAL_CHALLENGE_DETAIL).SetVisibility(!1);
    this.mTabContainer.FindControlByID(this.mControlIds.BACK_TO_ALL_CHALLENGES_BUTTON).SetVisibility(!1);
    break;
  case this.mChallengeType.REGIONAL:
    this.mTabContainer.FindControlByID(this.mContentLayersIds.ALL_CHALLENGES).SetVisibility(!1);
    this.mTabContainer.FindControlByID(this.mContentLayersIds.REGIONAL_CHALLENGE_DETAIL).SetVisibility(!0);
    this.mTabContainer.FindControlByID(this.mContentLayersIds.GLOBAL_CHALLENGE_DETAIL).SetVisibility(!1);
    this.mTabContainer.FindControlByID(this.mControlIds.BACK_TO_ALL_CHALLENGES_BUTTON).SetVisibility(!0);
    break;
  case this.mChallengeType.GLOBAL:
    this.mTabContainer.FindControlByID(this.mContentLayersIds.ALL_CHALLENGES).SetVisibility(!1),
    this.mTabContainer.FindControlByID(this.mContentLayersIds.REGIONAL_CHALLENGE_DETAIL).SetVisibility(!1),
    this.mTabContainer.FindControlByID(this.mContentLayersIds.GLOBAL_CHALLENGE_DETAIL).SetVisibility(!0),
    this.mTabContainer.FindControlByID(this.mControlIds.BACK_TO_ALL_CHALLENGES_BUTTON).SetVisibility(!0)
  }
};
simcity.cChallenges.prototype.ShowAllChallengesOverview = function () {
  this.ShowChallengeByType(this.mChallengeType.ALL);
  this.StopCurrentRegionalChallengeTimer();
  this.Private_LoadData();
  this.mChallengeToShow = null
};
simcity.cChallenges.prototype.StopCurrentRegionalChallengeTimer = function () {
  this.mCurrRegionalChallengeTimer && (this.mCurrRegionalChallengeTimer.Stop(), this.mCurrRegionalChallengeTimer = null)
};
simcity.cChallenges.prototype.StopAllRegionalChallengeTimers = function (a) {
  this.StopCurrentRegionalChallengeTimer();
  for (var b in this.mChallengeListCache) {
    var c = this.mChallengeListCache[b];
    c.hasOwnProperty("countDownTimer") && (c.countDownTimer.Stop(), a && !0 === a && (c.countDownTimer = null))
  }
};
simcity.cChallenges.prototype.ShowLoading = function () {
  this.LoadStart()
};
simcity.cChallenges.prototype.HideLoading = function () {
  this.LoadFinish()
};
simcity.cChallenges.prototype.ShowNoRegionalChallengesMsg = function () {
  this.HideRegionalChallengeContent();
  var a = this.FindControlByID(this.mControlIds.NO_CHALLENGE_ACTIVE_MSG);
  this.CheckChallengeExistsByType(this.mChallengeScheduleType.PREVIOUS) ? a.FindControlByID(this.mControlIds.VIEW_PREV_CHALLENGE_LINK).SetVisibility(!0) : a.FindControlByID(this.mControlIds.VIEW_PREV_CHALLENGE_LINK).SetVisibility(!1);
  a.SetVisibility(!0)
};
simcity.cChallenges.prototype.HideGoBackButton = function () {
  try {
    this.FindControlByID(this.mControlIds.BACK_TO_ALL_CHALLENGES_BUTTON).SetVisibility(!1)
  } catch (a) {}

};
simcity.cChallenges.prototype.FormatDate = function (a, b) {
  return simcity.gUIToolbox.ConvertMillisToTimeString(a, b)
};
simcity.cChallenges.prototype.FormatDateInShorthand = function (a) {
  return simcity.gUIToolbox.GetDurationInShorthandFormat(a)
};
simcity.cChallenges.CountDownTimer = function (a, b) {
  this.UpdateTimer = null;
  this.ParentTab = b;
  this.TargetMilliSeconds = a + (new Date).getTime()
};
simcity.cChallenges.CountDownTimer.prototype.Start = function (a, b, c) {
  var d = this;
  this.UpdateTimer && clearInterval(this.UpdateTimer);
  this.UpdateTimer = setInterval(function () {
      c.call(d.ParentTab, d.TargetMilliSeconds - (new Date).getTime(), b)
    }, a)
};
simcity.cChallenges.CountDownTimer.prototype.Stop = function () {
  this.UpdateTimer && clearInterval(this.UpdateTimer);
  this.UpdateTimer = null
};
simcity.cChallenges.CountDownTimer.prototype.GetTargetMillis = function () {
  return this.TargetMilliSeconds
};
simcity.cChallenges.CountDownTimer.prototype.GetMillisLeft = function () {
  return this.TargetMilliSeconds - (new Date).getTime()
};
simcity.ChallengePanel = {};
simcity.cChallengePanel = function () {
  this.mChallengesPanelWindow = null;
  this.mControlIds = {
    CHALLENGE_TAB : 253301804,
    CHALLENGE_TAB_BUTTON : 253303853,
    CLOSE_BUTTON : 253303513
  };
  this.kParentControlId = 253303667;
  this.kAnimationId = 253303632;
  this.kSpinnerId = 253378587;
  this.kNoDataMsgId = 253366894
};
goog.inherits(simcity.cChallengePanel, simcity.cPanel2D);
simcity.cChallengePanel.prototype.Initialize = function () {
  var a = gUIManager.FindControlByID(this.kParentControlId),
  b = a.FindAnimationByID(this.kAnimationId);
  this.mChallengesPanelWindow = a;
  this.InitPanel(a, b);
  a = new simcity.cChallenges;
  b = new simcity.cLoadNotifier(this.kParentControlId, this.kSpinnerId);
  a.SetLoadNotifier(b);
  this.AddTab("CHALLENGE_TAB", a, this.mControlIds.CHALLENGE_TAB, this.mControlIds.CHALLENGE_TAB_BUTTON);
  this.mCurrentTabKey = "CHALLENGE_TAB";
  a.SetNoDataMsgControl(this.kNoDataMsgId);
  this.AddEventListener(simcity.gEventTypes.CLICK,
    this.mControlIds.CLOSE_BUTTON, this.ClosePanel)
};
simcity.cChallengePanel.prototype.ClosePanel = function () {
  this.Hide()
};
simcity.cChallengePanel.prototype.IsShowing = function () {
  return this.mChallengesPanelWindow.IsControlVisible()
};
simcity.ErrorAlertsUIHandler = {};
simcity.cErrorAlertsUIHandler = function () {
  this.UIHandler = scrui.cUIHandler;
  this.UIHandler();
  this.mAlertMsgsQueue = null;
  this.mIsShowingAlert = !1;
  this.mIconPulseAnim = this.mAlertsWindowFadeAnim = null;
  this.mIsAlertsQueuePaused = !1;
  this.mAlertsContainer = this.mAlertAnimPauseMS = null;
  this.mControlIDs = {
    ALERTS_WINDOW : 247937397,
    ALERTS_FADE_ANIM : 248027484,
    ALERT_TEXT_LABEL_NORMAL : 247533845,
    ALERT_TEXT_LABEL_CRITICAL : 253584378,
    ICON_ALERT_CONTAINER : 252691912,
    ALERT_ICON : 252691899,
    ALERT_ICON_PULSE_ANIM : 253583745,
    ICON_ALERT_TEXT_LABEL_CRITICAL : 252691906,
    ICON_ALERT_TEXT_LABEL_NORMAL : 253583731
  };
  this.mAinmKeyFrames = {
    ALERT_PAUSE_KEYFRAME : 252700938,
    JUST_BEFORE_END_KEYFRAME : 252702112,
    START_ICON_PULSING_KEYFRAME : 253300096
  };
  this.Init()
};
goog.inherits(simcity.cErrorAlertsUIHandler, scrui.cUIHandler);
simcity.cErrorAlertsUIHandler.prototype.Init = function () {
  this.mAlertMsgsQueue = [];
  this.mAlertsContainer = gUIManager.FindControlByID(this.mControlIDs.ALERTS_WINDOW);
  this.mAlertsWindowFadeAnim = this.mAlertsContainer.FindAnimationByID(this.mControlIDs.ALERTS_FADE_ANIM);
  this.mIconPulseAnim = this.mAlertsContainer.FindAnimationByID(this.mControlIDs.ALERT_ICON_PULSE_ANIM);
  this.mAlertAnimPauseMS = this.mAlertsWindowFadeAnim.FindKeyFrameByID(this.mAinmKeyFrames.ALERT_PAUSE_KEYFRAME).mTimeMS
};
simcity.cErrorAlertsUIHandler.prototype.AddAlert = function (a, b, c, d, e, f, g) {
  this.mAlertMsgsQueue.push({
    text : a,
    icon : b,
    pulseIcon : c,
    critical : d,
    pauseQueue : e,
    onShowCallback : f,
    onHideCallback : g
  });
  this.ShowAlert()
};
simcity.cErrorAlertsUIHandler.prototype.OverrideCurrentAlert = function (a, b, c, d, e, f, g) {
  this.mAlertMsgsQueue.unshift({
    text : a,
    icon : b,
    pulseIcon : c,
    critical : d,
    pauseQueue : e,
    onShowCallback : f,
    onHideCallback : g
  });
  this.mAlertsWindowFadeAnim.StopAtTime(null);
  this.mAlertsWindowFadeAnim.JumpToKeyFrame(this.mAinmKeyFrames.JUST_BEFORE_END_KEYFRAME);
  this.mIsAlertsQueuePaused ? (this.mIsAlertsQueuePaused = !1, this.mAlertsWindowFadeAnim.Start()) : this.ShowAlert()
};
simcity.cErrorAlertsUIHandler.prototype.Start = function () {
  this.mIsAlertsQueuePaused && (this.mIsAlertsQueuePaused = !1, this.mAlertsWindowFadeAnim.Start())
};
simcity.cErrorAlertsUIHandler.prototype.ShowAlert = function () {
  this.mIsShowingAlert || (this.mIsShowingAlert = !0, this.Private_ShowNextAlert())
};
simcity.cErrorAlertsUIHandler.prototype.Private_ShowNextAlert = function () {
  var a = this;
  if (0 < this.mAlertMsgsQueue.length) {
    var b = this.mAlertMsgsQueue.shift(),
    c = function (d) {
      var e = d.animation.mCurrentTimeMS,
      d = d.animation.GetDurationMS();
      if (e == d && "function" === typeof b.onHideCallback)
        b.onHideCallback();
      e == a.mAlertAnimPauseMS && !0 === b.pauseQueue ? (a.mIsAlertsQueuePaused = !0, a.mAlertsWindowFadeAnim.Stop()) : a.mIsAlertsQueuePaused || (a.mAlertsWindowFadeAnim.UnregisterEventCallback(scrui.cAnimation.kEventStopped, c),
        a.mAlertsWindowFadeAnim.Stop(), a.Private_ShowNextAlert())
    };
    this.Private_ShowAlert(b, c)
  } else
    this.mIsShowingAlert = !1
};
simcity.cErrorAlertsUIHandler.prototype.Private_ShowAlert = function (a, b) {
  var c = this;
  this.SetAlertControls(a.text, a.icon, a.critical);
  var d = function (a) {
    a.keyFrameID === c.mAinmKeyFrames.START_ICON_PULSING_KEYFRAME && (c.mIconPulseAnim.Restart(), c.mAlertsWindowFadeAnim.UnregisterEventCallback(scrui.cAnimation.kEventKeyFrameHit, d))
  };
  if (this.mAlertsWindowFadeAnim && (this.mAlertsWindowFadeAnim.RegisterEventCallback(scrui.cAnimation.kEventStopped, b), !0 === a.pauseQueue && this.mAlertsWindowFadeAnim.StopAtKeyFrame(this.mAinmKeyFrames.ALERT_PAUSE_KEYFRAME),
      a.icon && !0 === a.pulseIcon && this.mAlertsWindowFadeAnim.RegisterEventCallback(scrui.cAnimation.kEventKeyFrameHit, d), this.mAlertsWindowFadeAnim.Restart(), "function" === typeof a.onShowCallback))
    a.onShowCallback()
};
simcity.cErrorAlertsUIHandler.prototype.SetAlertControls = function (a, b, c) {
  var d = this.mControlIDs;
  if (void 0 === b || null === b)
    c ? (b = this.mAlertsContainer.FindControlByID(d.ALERT_TEXT_LABEL_CRITICAL), this.mAlertsContainer.FindControlByID(d.ALERT_TEXT_LABEL_NORMAL).SetVisibility(!1)) : (b = this.mAlertsContainer.FindControlByID(d.ALERT_TEXT_LABEL_NORMAL), this.mAlertsContainer.FindControlByID(d.ALERT_TEXT_LABEL_CRITICAL).SetVisibility(!1)), this.mAlertsContainer.FindControlByID(this.mControlIDs.ICON_ALERT_CONTAINER).SetVisibility(!1);
  else {
    var e = this.mAlertsContainer.FindControlByID(this.mControlIDs.ICON_ALERT_CONTAINER);
    e.FindControlByID(this.mControlIDs.ALERT_ICON).SetWindowImage(b);
    c ? (b = e.FindControlByID(d.ICON_ALERT_TEXT_LABEL_CRITICAL), this.mAlertsContainer.FindControlByID(d.ICON_ALERT_TEXT_LABEL_NORMAL).SetVisibility(!1)) : (b = e.FindControlByID(d.ICON_ALERT_TEXT_LABEL_NORMAL), this.mAlertsContainer.FindControlByID(d.ICON_ALERT_TEXT_LABEL_CRITICAL).SetVisibility(!1));
    this.mAlertsContainer.FindControlByID(this.mControlIDs.ALERT_TEXT_LABEL_NORMAL).SetVisibility(!1);
    this.mAlertsContainer.FindControlByID(this.mControlIDs.ALERT_TEXT_LABEL_CRITICAL).SetVisibility(!1);
    e.SetVisibility(!0)
  }
  b.SetRawText(a);
  b.SetVisibility(!0)
};
simcity.cErrorAlertsUIHandler.prototype.ShowAlertFromErrorData = function (a) {
  var b = a.message,
  c = a.alertIcon,
  d = a.pulseIcon,
  e = a.isCritical,
  f = simcity.gNetworkStateManager;
  switch (a.code) {
  case scrui.kErrorCode_NetworkDisconnectAlert:
    simcity.gNetworkStateManager.mIsServerDownAlertDisplayed ? this.OverrideCurrentAlert(b, c, d, e, !0, function () {
      simcity.gNetworkStateManager.mIsServerDownAlertDisplayed = false
    }) : this.AddAlert(b, c, d, e, !0);
    break;
  case scrui.kErrorCode_NetworkReconnectAlert:
    this.OverrideCurrentAlert(b, c,
      d, e);
    break;
  case scrui.kErrorCode_ServerDisconnectAlert:
    this.AddAlert(b, c, d, e, !0, function () {
      f.mIsServerDownAlertDisplayed = true
    }, function () {
      f.mIsServerDownAlertDisplayed = false
    });
    break;
  case scrui.kErrorCode_ServerReconnectAlert:
    this.OverrideCurrentAlert(b, c, d, e);
    break;
  default:
    this.AddAlert(b, c, d, e)
  }
};
simcity.TaxesBasicUI = {};
simcity.cTaxesBasicUIHandler = function () {
  this.UIHandler = scrui.cUIHandler;
  this.UIHandler();
  this.mTaxRateQuery = this.mTaxesCurrentUILayout = this.mTaxesComplexUILayout = this.mTaxesIntermediateUILayout = this.mTaxesBasicUILayout = this.mParentControl = null;
  this.mTaxMode = 0
};
goog.inherits(simcity.cTaxesBasicUIHandler, scrui.cUIHandler);
simcity.cTaxesBasicUIHandler.kBtnIDDone = 220004550;
simcity.cTaxesBasicUIHandler.kBaseSpinnerID = 212750336;
simcity.cTaxesBasicUIHandler.kNumSpinners = 1;
simcity.cTaxesBasicUIHandler.kBtnIDIncrementRate = 212690936;
simcity.cTaxesBasicUIHandler.kBtnIDDecrementRate = 212691588;
simcity.cTaxesBasicUIHandler.kTextIDRate = 212691646;
simcity.cTaxesBasicUIHandler.kTaxModeNone = 0;
simcity.cTaxesBasicUIHandler.kTaxModeBasic = 1;
simcity.cTaxesBasicUIHandler.kTaxModeIntermediate = 2;
simcity.cTaxesBasicUIHandler.kTaxModeComplex = 3;
simcity.cTaxesBasicUIHandler.kTaxRateQueries = [scrui.BuildRequestQuery(["bins", 2546641224]), scrui.BuildRequestQuery(["bins", 2546641227]), scrui.BuildRequestQuery(["bins", 2546641226]), scrui.BuildRequestQuery(["bins", 2544228497]), scrui.BuildRequestQuery(["bins", 2544228498]), scrui.BuildRequestQuery(["bins", 2544228499]), scrui.BuildRequestQuery(["bins", 2543242791]), scrui.BuildRequestQuery(["bins", 2543242788]), scrui.BuildRequestQuery(["bins", 2543242789])];
simcity.cTaxesBasicUIHandler.kBaseUnitNameIncrease = "T_Govt_HQ_TaxIncrease";
simcity.cTaxesBasicUIHandler.kBaseUnitNameDecrease = "T_Govt_HQ_TaxDecrease";
simcity.cTaxesBasicUIHandler.kUnitNameSuffix = "_01_01_N";
simcity.cTaxesBasicUIHandler.kUnitNameCode = ["R", "C", "I"];
simcity.cTaxesBasicUIHandler.kUnitWealthCode = ["W1", "W2", "W3"];
simcity.cTaxesBasicUIHandler.kUnitNameAndWealthCode = "RW1 RW2 RW3 CW1 CW2 CW3 IW1 IW2 IW3".split(" ");
simcity.cTaxesBasicUIHandler.prototype.Init = function (a) {
  scrui.Assert(null !== a);
  this.mParentControl = a;
  this.mTaxesBasicUILayout = a.FindControlByID(241966048);
  this.mTaxesIntermediateUILayout = a.FindControlByID(241966049);
  this.mTaxesComplexUILayout = a.FindControlByID(241966050);
  this.mTaxesCurrentUILayout = a.FindControlByID(241966048)
};
simcity.cTaxesBasicUIHandler.prototype.HandleUIMessage = function (a, b, c) {
  scrui.cUIHandler.prototype.HandleUIMessage.call(this, a, b, c);
  switch (a) {
  case scrui.kMsgTypeButtonClicked:
    switch (b) {
    case simcity.cTaxesBasicUIHandler.kBtnIDDone:
      this.Hide();
      break;
    case simcity.cTaxesBasicUIHandler.kBtnIDIncrementRate:
      this.ChangeTaxRate(c, !0);
      break;
    case simcity.cTaxesBasicUIHandler.kBtnIDDecrementRate:
      this.ChangeTaxRate(c, !1)
    }
  }
};
simcity.cTaxesBasicUIHandler.prototype.Show = function () {
  this.UpdateTaxRates()
};
simcity.cTaxesBasicUIHandler.prototype.IsShowing = function () {
  return this.mTaxesBasicUILayout && this.mTaxesBasicUILayout.mIsVisible
};
simcity.cTaxesBasicUIHandler.prototype.SetTaxMode = function (a) {
  this.mTaxMode = a;
  switch (a) {
  case simcity.cTaxesBasicUIHandler.kTaxModeBasic:
    this.mTaxesCurrentUILayout = this.mTaxesBasicUILayout;
    break;
  case simcity.cTaxesBasicUIHandler.kTaxModeIntermediate:
    this.mTaxesCurrentUILayout = this.mTaxesIntermediateUILayout;
    break;
  case simcity.cTaxesBasicUIHandler.kTaxModeComplex:
    this.mTaxesCurrentUILayout = this.mTaxesComplexUILayout;
    break;
  default:
    this.mTaxesCurrentUILayout = null
  }
};
simcity.cTaxesBasicUIHandler.prototype.UpdateTaxRates = function () {
  var a = this;
  a.mTaxesCurrentUILayout && scrui.RequestGameData(simcity.cTaxesBasicUIHandler.kTaxRateQueries, function (b) {
    var c;
    for (c = 0; c < b.length; c++) {
      var d = a.mTaxesCurrentUILayout.FindControlByID(simcity.cTaxesBasicUIHandler.kBaseSpinnerID + c);
      d && (simcity.gGlobalUIHandler.mIsSpectatorMode && (d.FindControlByID(simcity.cTaxesBasicUIHandler.kBtnIDIncrementRate).SetVisibility(!1), d.FindControlByID(simcity.cTaxesBasicUIHandler.kBtnIDDecrementRate).SetVisibility(!1)),
        d.FindControlByID(simcity.cTaxesBasicUIHandler.kTextIDRate).UpdateLocaleText({
          taxlevel : b[c].amount
        }))
    }
  })
};
simcity.cTaxesBasicUIHandler.prototype.ChangeTaxRate = function (a, b) {
  var c,
  d = a.GetParentLayout().mUserData;
  void 0 === d && (d = 0);
  if (this.mTaxMode === simcity.cTaxesBasicUIHandler.kTaxModeBasic)
    for (var e = 0; e < simcity.cTaxesBasicUIHandler.kUnitNameCode.length; e++)
      for (d = 0; d < simcity.cTaxesBasicUIHandler.kUnitWealthCode.length; d++)
        c = b ? simcity.cTaxesBasicUIHandler.kBaseUnitNameIncrease : simcity.cTaxesBasicUIHandler.kBaseUnitNameDecrease, c += simcity.cTaxesBasicUIHandler.kUnitNameCode[e], c += simcity.cTaxesBasicUIHandler.kUnitWealthCode[d],
        c += simcity.cTaxesBasicUIHandler.kUnitNameSuffix, c = scrui.IDFromName(c), scrui.PostGameCommand(scrui.BuildCommand(["createUnit", c]));
  else if (this.mTaxMode === simcity.cTaxesBasicUIHandler.kTaxModeIntermediate)
    for (e = 0; e < simcity.cTaxesBasicUIHandler.kUnitWealthCode.length; e++)
      c = b ? simcity.cTaxesBasicUIHandler.kBaseUnitNameIncrease : simcity.cTaxesBasicUIHandler.kBaseUnitNameDecrease, c += simcity.cTaxesBasicUIHandler.kUnitNameCode[d], c += simcity.cTaxesBasicUIHandler.kUnitWealthCode[e], c += simcity.cTaxesBasicUIHandler.kUnitNameSuffix,
      c = scrui.IDFromName(c), scrui.PostGameCommand(scrui.BuildCommand(["createUnit", c]));
  else
    this.mTaxMode === simcity.cTaxesBasicUIHandler.kTaxModeComplex && (c = b ? simcity.cTaxesBasicUIHandler.kBaseUnitNameIncrease : simcity.cTaxesBasicUIHandler.kBaseUnitNameDecrease, c += simcity.cTaxesBasicUIHandler.kUnitNameAndWealthCode[d], c += simcity.cTaxesBasicUIHandler.kUnitNameSuffix, c = scrui.IDFromName(c), scrui.PostGameCommand(scrui.BuildCommand(["createUnit", c])))
};
simcity.cTaxesBasicUIHandler.prototype.Update = scrui.Client_ProfZone("cTaxesBasicUIHandler.Update", function () {
    this.IsShowing() && this.UpdateTaxRates()
  });
simcity.GameDeepLinkMethodInfo = {};
simcity.gGameDeepLinkMethodInfo = {
  jsonObj : {
    showProfile : function () {},
    showRegion : function () {},
    showAchievement : function () {},
    showGlobalLeaderboard : function () {},
    showFriendsLeaderboard : function () {},
    showGlobalChallenge : function () {},
    showRegionalChallenge : function () {},
    showGlobalMarket : function () {}

  }
};
simcity.InGameRegionMapController = {};
var RegionMapController = function (a, b, c, d, e, f) {
  this.mParentDivObj = this.mParentDivID = null;
  this.mRegionData = c;
  this.mOnTerrain = this.mOnCityHover = this.mOnClaim = this.mOnPlay = this.mOnCityVisit = this.mOnCitySelect = this.mOnCityDetails = this.mSelectedCity = this.mSVGMapObj = this.mMapName = null;
  this.mIsGameEntry = !0;
  this.mUserID = d;
  this.mYScalePercent = this.mXScalePercent = 100;
  this.mIconScale = f || 2;
  this.mDefaultMapHeight = this.mDefaultMapWidth = 2048;
  this.mXCenter = this.mDefaultMapWidth / 2;
  this.mYCenter = this.mDefaultMapHeight /
    2;
  this.mHighlights = [];
  this.mContextPath = "";
  this.images = [["smallCity", "smallCityIcon.png", 95, 110], ["smallCity-hover", "smallCityIcon-hover.png", 95, 110], ["mediumCity", "mediumCityIcon.png", 95, 110], ["mediumCity-hover", "mediumCityIcon-hover.png", 95, 110], ["largeCity", "cityIcon-developed.png", 95, 110], ["largeCity-hover", "cityIcon-developed-hover.png", 95, 110], ["unclaimedCity", "unclaimedCityIcon.png", 95, 110], ["unclaimedCity-hover", "unclaimedCityIcon-hover.png", 95, 110], ["greyDisc", "cityGreyDiscBg.png", 95, 110],
    ["selected-city", "selected-city.png", 124, 75], ["yellowDisc", "cityYellowDiscBg.png", 95, 110]];
  this.mSVGRoadStyles = {
    sidewalk : {
      fill : "none",
      stroke : "#efefef",
      "stroke-linecap" : "butt",
      "stroke-linejoin" : "butt",
      "stroke-width" : "8"
    },
    road : {
      fill : "none",
      stroke : "#333",
      "stroke-linecap" : "butt",
      "stroke-linejoin" : "butt",
      "stroke-width" : "6"
    },
    dash : {
      fill : "none",
      stroke : "#ffc740",
      "stroke-linecap" : "butt",
      "stroke-linejoin" : "butt",
      "stroke-dasharray" : "- ",
      "stroke-width" : "1"
    }
  };
  this.selectedY = this.selectedX = 0;
  this.Init();
  this.LoadMap(a,
    b, c)
};
RegionMapController.prototype.Init = function () {
  for (var a = this.images.length, b = 0; b < a; b++) {
    var c = new Image,
    d = this.images[b];
    document.getElementById(d[0]) || (c.setAttribute("id", d[0]), c.id = d[0], c.src = this.mContextPath + "Graphics/RegionMaps/" + d[1], c.width = d[2], c.height = d[3], c.style.display = "none", document.body.appendChild(c))
  }
};
RegionMapController.prototype.LoadMap = function (a, b, c) {
  this.mParentDivID = a;
  this.mParentDivObj = "object" === typeof this.mParentDivID ? this.mParentDivID : document.getElementById(this.mParentDivID);
  this.mRegionData = c;
  this.mMapName = b;
  this.CreateSVGCanvas()
};
RegionMapController.prototype.CreateSVGCanvas = function () {
  var a = this;
  0 < this.mParentDivObj.children.length && this.mParentDivObj.removeChild(this.mParentDivObj.children[0]);
  this.mYScalePercent = this.mXScalePercent = 100 * (this.mParentDivObj.offsetHeight / this.mDefaultMapHeight);
  var b = this.mDefaultMapWidth * 0.01 * this.mXScalePercent,
  c = this.mDefaultMapHeight * 0.01 * this.mYScalePercent;
  this.mParentDivObj.style.width = b + "px";
  this.mParentDivObj.style.height = c + "px";
  this.mSVGMapObj = Raphael(this.mParentDivID, "100%", "100%");
  this.mSVGMapObj.image(this.mContextPath + "Graphics/Launcher3D/demoMap.jpg", 0, 0, b, c).click(function () {
    "function" == typeof a.mOnTerrain && a.mOnTerrain(a.mRegionData)
  })
};
RegionMapController.prototype.ShowMap = function () {
  if (this.mParentDivObj) {
    var a = null;
    this.mRegionData.cities && (this.mRegionData.boxes = this.mRegionData.cities);
    if (a = this.mRegionData.boxes) {
      if (this.mRegionData.segments) {
        var b = [],
        c;
        for (c in this.mRegionData.segments) {
          var d = this.mRegionData.segments[c],
          e = this.RemapX(d.start.x),
          f = this.RemapY(d.start.y),
          g = this.RemapX(d.end.x),
          h = this.RemapY(d.end.y);
          if (d.tangents) {
            var i = this.RemapX(d.start.x + d.tangents[0].x),
            j = this.RemapY(d.start.y + d.tangents[0].y),
            k = this.RemapX(d.end.x +
                d.tangents[1].x),
            d = this.RemapY(d.end.y + d.tangents[1].y);
            b.push(["M", e, f]);
            b.push(["C", i, j, k, d, g, h])
          } else
            b.push(["M", e, f]), b.push(["L", g, h])
        }
        for (var l in this.mSVGRoadStyles)
          this.mSVGMapObj.path(b).attr(this.mSVGRoadStyles[l])
      }
      if (this.mRegionData.map && this.mRegionData.map.segments) {
        b = [];
        for (c in this.mRegionData.map.segments)
          d = this.mRegionData.map.segments[c], e = this.RemapX(d.start.x), f = this.RemapY(d.start.y), g = this.RemapX(d.end.x), h = this.RemapY(d.end.y), d.tangents ? (i = this.RemapX(d.start.x + d.tangents[0].x),
            j = this.RemapY(d.start.y + d.tangents[0].y), k = this.RemapX(d.end.x + d.tangents[1].x), d = this.RemapY(d.end.y + d.tangents[1].y), b.push(["M", e, f]), b.push(["C", i, j, k, d, g, h])) : (b.push(["M", e, f]), b.push(["L", g, h]));
        for (l in this.mSVGRoadStyles)
          this.mSVGMapObj.path(b).attr(this.mSVGRoadStyles[l])
      }
      for (b = 0; b < a.length; b++)
        c = a[b], e = null, e = "true" == c.isClaimed ? 100 >= Number(c.population) ? "smallCity" : 100 < Number(c.population) && 1E3 >= Number(c.population) ? "mediumCity" : "largeCity" : "unclaimedCity", this.CreateCityIcon(e, c.x + this.mXCenter -
          35, -1 * c.y + this.mYCenter, c, b)
    }
  }
};
RegionMapController.prototype.DestroyMap = function () {
  if (this.mParentDivObj) {
    var a = this.mParentDivObj.children,
    b;
    for (b in a)
      "object" == typeof a[b] && this.mParentDivObj.removeChild(a[b]);
    this.mMapName = this.mRegionData = this.mParentDivObj = this.mParentDivID = null
  }
};
RegionMapController.prototype.CreateCityIcon = function (a, b, c, d, e) {
  var f = document.getElementById(a),
  g = document.getElementById("greyDisc"),
  h = document.getElementById("yellowDisc");
  document.getElementById(a + "-hover");
  var i = document.getElementById("selected-city"),
  j = this;
  if (f) {
    var a = this.mIconScale,
    k = f.width * (0.01 * this.mXScalePercent) * a,
    l = f.height * (0.01 * this.mYScalePercent) * a,
    b = 0.01 * b * this.mXScalePercent - k / 2,
    c = 0.01 * c * this.mYScalePercent - l / 1.4,
    i = this.mSVGMapObj.image(i.src, b - 7, c + 10, 0.01 * (i.width * this.mXScalePercent) *
        a, 0.01 * (i.height * this.mXScalePercent) * a);
    i.hide();
    var m = d.id ? d.id : e;
    this.mHighlights[m] = i;
    "true" == d.isClaimed && (d.creator.id == this.mUserID ? this.mSVGMapObj.image(h.src, b, c, 0.01 * (h.width * this.mXScalePercent) * a, 0.01 * (h.height * this.mXScalePercent) * a) : this.mSVGMapObj.image(g.src, b, c, 0.01 * (g.width * this.mXScalePercent) * a, 0.01 * (g.height * this.mXScalePercent) * a));
    var n = this.mSVGMapObj.image(f.src, b, c, k, l);
    n.data("xLoc", b);
    n.data("yLoc", c);
    n.data("uid", d.uid);
    n.setSelectedState = function (a) {
      a ? j.mOnCitySelect(m) :
      j.mOnCitySelect(-1)
    };
    n.setHoverState = function (a, b, c, d, e) {
      j.mOnCityHover && j.mOnCityHover(a, b, c, d, e)
    };
    n.mouseover(function (a, b, c) {
      n.setHoverState(!0, d, a, b, c)
    });
    n.mouseout(function () {
      n.setHoverState(!1)
    });
    n.mousedown(function () {
      j.selectedX = n.data("xLoc");
      j.selectedY = n.data("yLoc");
      j.mSelectedCity = m;
      j.mIsGameEntry ? j.SelectCity(m) : (j.HideHighlights(), j.mHighlights[m] && j.mHighlights[m].show(), j.mOnCitySelect(d))
    })
  }
};
RegionMapController.prototype.HideHighlights = function () {
  var a = this.mHighlights;
  if (a && a.length)
    for (var b in a)
      a[b].hide()
};
RegionMapController.prototype.GetXCoord = function () {
  return this.selectedX
};
RegionMapController.prototype.GetYCoord = function () {
  return this.selectedY
};
RegionMapController.prototype.RemapX = function (a) {
  return 0.01 * (a + this.mXCenter) * this.mXScalePercent
};
RegionMapController.prototype.RemapY = function (a) {
  return 0.01 * (-1 * a + this.mYCenter) * this.mYScalePercent
};
RegionMapController.prototype.GetSelectedCity = function () {
  return this.mSelectedCity
};
RegionMapController.prototype.SelectCity = function (a) {
  this.mSelectedCity = a;
  this.HideHighlights();
  this.mHighlights[a] && this.mHighlights[a].show();
  var b = this.GetCityByID(a);
  if (!b)
    return null;
  b.creatorId == this.mUserID ? this.mOnCityDetails(a) : "true" == b.isClaimed ? this.mOnCityVisit(a) : this.mOnCitySelect(a)
};
RegionMapController.prototype.GetUnclaimedCity = function () {
  var a = this.mRegionData.boxes;
  if (a && a.length)
    for (var b = 0; b < a.length; b++)
      if ("false" == a[b].isClaimed)
        return a[b].id;
  return null
};
RegionMapController.prototype.IsUnclaimedCity = function (a) {
  var b = this.mRegionData.boxes;
  if (b && b.length)
    for (var c = 0; c < b.length; c++)
      if (b[c].id == a && "false" == b[c].isClaimed)
        return !0;
  return !1
};
RegionMapController.prototype.GetCityByID = function (a) {
  var b = this.mRegionData.boxes;
  if (b && b.length)
    for (var c = 0; c < b.length; c++)
      if (b[c].id == a)
        return b[c];
  return null
};
simcity.APIServerData = {};
simcity.kRestQueryTime = 6E4;
simcity.kMsgTypeAPIServerDataUpdated = 229009072;
simcity.GetBoxName = function (a) {
  return (a = simcity.gGlobalUIHandler.mAPIServerDataUIHandler.GetClaimedBox(a.sourceBoxUID)) ? a.name : ""
};
simcity.GetBoxOwner = function (a) {
  var a = (a = simcity.gGlobalUIHandler.mAPIServerDataUIHandler.GetClaimedBox(a.sourceBoxUID)) && a.creator ? a.creator.screenName : "",
  b = simcity.gUIToolbox.GetAvatarUrl(a);
  return {
    screenName : a,
    avatar : b
  }
};
simcity.cAPIServerDataHandler = function () {
  this.UIHandler = scrui.cUIHandler;
  this.UIHandler();
  this.mTimeSinceLastRestQuery = simcity.kRestQueryTime;
  this.mActiveRegionID = 0;
  this.mMyBoxDataSet = this.mServerDataSet = !1
};
goog.inherits(simcity.cAPIServerDataHandler, scrui.cUIHandler);
simcity.cAPIServerDataHandler.prototype.Box = function (a) {
  var a = a || {},
  b = {
    unitRef : null,
    uri : null,
    uid : 0,
    id : 0,
    x : 0,
    y : 0,
    ticks : 0,
    image : null,
    name : "",
    simTime : null,
    created : null,
    updated : null,
    isClaimed : null,
    isFriend : null,
    creatorId : 0,
    creator : {},
    privacySetting : null,
    offensive : null,
    status : null,
    abandoned : !1
  };
  simcity.gGlobalUIHandler.mAPIServerDataUIHandler.SetBoxData(b, a);
  return b
};
simcity.cAPIServerDataHandler.prototype.Creator = function (a) {
  a.isOnline = a.isOnline || !1;
  return {
    avatarImage : simcity.gUIToolbox.GetAvatarUrl(a.screenName),
    id : a.id || 0,
    lastLogin : a.lastLogin || null,
    nucleusId : a.nucleusId || 0,
    screenName : a.screenName || "",
    isOnline : "true" == a.isOnline ? !0 : !1
  }
};
simcity.cAPIServerDataHandler.prototype.Update = scrui.Client_ProfZone("cAPIServerDataHandler.Update", function (a) {
    0 !== simcity.gGlobalUIHandler.mRegionID && (this.mActiveRegionID = simcity.gGlobalUIHandler.mRegionID, this.mTimeSinceLastRestQuery += a, this.mTimeSinceLastRestQuery > simcity.kRestQueryTime && (this.mTimeSinceLastRestQuery = 0, this.RefreshRegionAPIData()))
  });
simcity.cAPIServerDataHandler.prototype.Init = function (a) {
  0 < a.length && !isNaN(a) && (this.mActiveRegionID = Number(a))
};
simcity.cAPIServerDataHandler.prototype.RefreshRegionAPIData = function () {
  var a = this,
  b = simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData;
  if (0 !== simcity.gGlobalUIHandler.mRegionID) {
    var c = scrui.BuildRequestQuery(["region", simcity.gGlobalUIHandler.mRegionID]);
    simcity.gGlobalUIHandler.mRegionViewUIHandler.mHasAPIComeBack = !1;
    scrui.RequestRestData([c], [], "get", function (c) {
      if (c && (c = c.json) && c.template && c.name) {
        simcity.gGlobalUIHandler.mRegionViewUIHandler.mHasAPIComeBack = !0;
        simcity.IsMainTutorialInProgress() &&
        (c = simcity.AssignFakeTutorialUserData(c));
        simcity.gGlobalUIHandler.mIsServerSandbox = c.sandbox && "true" == c.sandbox;
        b.mRegionName = c.name;
        b.mMapData = c.map;
        b.mRegionTypeName = c.template ? c.template.name : null;
        b.mCityDefaultData = simcity.kRegionalDefaultCityInfo[b.mRegionTypeName];
        if (c.boxes) {
          b.mBoxes = {};
          b.mPlayers = {};
          var e = 0;
          b.mTotals.players = 0;
          b.mTotals.boxes = 0;
          b.mTotals.cities = 0;
          for (var f in c.boxes) {
            var g = c.boxes[f],
            h = g.uid.toString();
            b.mBoxes[h] = new a.Box(g);
            b.mBoxes[h].x = b.mMapData.cities[e].x;
            b.mBoxes[h].y =
              b.mMapData.cities[e].y;
            b.mMapData.cities[e] = b.mBoxes[h];
            b.mTotals.boxes++;
            if (g.isClaimed && "true" == g.isClaimed)
              if (g = b.mBoxes[h], g.uid == simcity.gGlobalUIHandler.mActiveBoxUID && (simcity.gGlobalUIHandler.mActiveBoxID = g.id, b.mPlayingBox = g), b.mCities[h] = g, b.mTotals.cities++, h = new a.Creator(g.creator), b.mPlayers.hasOwnProperty(h.id)) {
                for (var h = b.mPlayers[h.id].cities, i = h.length, j = !1, k = 0; k < i; k++)
                  h[k].uid === g.uid && (j = !0, h[k] = g);
                j || h.push(g)
              } else
                h.cities = [g], b.mPlayers[h.id.toString()] = h, b.mTotals.players++;
            e++
          }
        }
        a.mServerDataSet = !0;
        gUIManager.SendMessage(simcity.kMsgTypeAPIServerDataUpdated, a)
      }
    }, function () {
      a.mServerDataSet || gErrorManager.PostError(scrui.kErrorCode_NetworkCommError, "quitToFrontEnd")
    })
  } else
    simcity.DEBUG && simcity.gGlobalUIHandler.mTicker.Init()
};
simcity.cAPIServerDataHandler.prototype.SetBoxData = function (a, b) {
  var c = simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData;
  if (("string" == typeof a || "object" == typeof a) && "object" == typeof b)
    if (c = "string" == typeof a ? c.mBoxes[a] : a)
      for (var d in b)
        c.hasOwnProperty(d) && (c[d] = b[d])
};
simcity.cAPIServerDataHandler.prototype.GetBoxByRegionID = function (a, b) {
  var c = simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData;
  if (!c.mBoxes.hasOwnProperty(a))
    if (b)
      c.mBoxes[a] = new this.Box;
    else
      return null;
  return c.mBoxes[a]
};
simcity.cAPIServerDataHandler.prototype.GetBoxByBoxUID = function (a) {
  var b = simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData,
  c;
  for (c in b.mBoxes)
    if (b.mBoxes[c].id == a)
      return b.mBoxes[c];
  return null
};
simcity.cAPIServerDataHandler.prototype.GetBoxByUnitRefString = function (a) {
  var b = simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData,
  c;
  for (c in b.mBoxes)
    if (b.mBoxes[c].unitRef == a)
      return b.mBoxes[c];
  return null
};
simcity.cAPIServerDataHandler.prototype.GetMyClaimedBox = function () {
  return this.GetBoxByRegionID(simcity.gGlobalUIHandler.mActiveBoxUID)
};
simcity.PresenceManager = {};
simcity.cPresenceManager = function () {
  this.mPresence = simcity.cPresenceManager.Presence.kOffline;
  this.mMsSinceUpdate = 0
};
goog.inherits(simcity.cPresenceManager, scrui.cUIHandler);
simcity.cPresenceManager.Presence = {
  kOffline : {
    id : "OFFLINE",
    text : new scrui.cLocaleString("GameEntry.json", "0x0e9fa25e", "Invisible")
  },
  kOnline : {
    id : "ONLINE",
    text : new scrui.cLocaleString("GameEntry.json", "0x0e9fa25d", "Online")
  }
};
simcity.cPresenceManager.PresenceList = [simcity.cPresenceManager.Presence.kOnline, simcity.cPresenceManager.Presence.kOffline];
simcity.cPresenceManager.kSetPreferencesPath = "userPreferenceService/setUserPreferences";
simcity.cPresenceManager.kGetUserStatusPath = "user";
simcity.cPresenceManager.kMsgTypePresenceChanged = 241625882;
simcity.cPresenceManager.kUpdateInterval = 5E3;
simcity.cPresenceManager.kTrackingFirstGameEntry = "USER_FIRST_GAME_ENTRY";
simcity.cPresenceManager.prototype.Init = function () {
  gUIManager.RegisterUIHandler(this)
};
simcity.cPresenceManager.prototype.GetPresence = function () {
  return this.mPresence
};
simcity.cPresenceManager.prototype.GetPresenceIndex = function () {
  return this.PresenceIndex(this.mPresence)
};
simcity.cPresenceManager.prototype.PresenceIndex = function (a) {
  for (var b = 0; b < simcity.cPresenceManager.PresenceList.length; ++b)
    if (simcity.cPresenceManager.PresenceList[b] === a)
      return b;
  return -1
};
simcity.cPresenceManager.prototype.IsOffline = function () {
  return this.mPresence === simcity.cPresenceManager.Presence.kOffline
};
simcity.cPresenceManager.prototype.SetPresence = function (a) {
  if (a != this.mPresence) {
    var b = this;
    this.Private_SetPresenceOnServer(a, function () {
      b.mPresence = a;
      gUIManager.SendMessage(simcity.cPresenceManager.kMsgTypePresenceChanged, a)
    }, function () {
      gUIManager.SendMessage(simcity.cPresenceManager.kMsgTypePresenceChanged, b.mPresence)
    })
  }
};
simcity.cPresenceManager.prototype.SetPresenceIndex = function (a) {
  this.SetPresence(simcity.cPresenceManager.PresenceList[a])
};
simcity.cPresenceManager.prototype.Private_SetPresenceOnServer = function (a, b, c) {
  var d = scrui.GetRestPath().replace("/simcity/rest", "/citylog/json"),
  e = function (a) {
    "function" == typeof c && c(a)
  };
  scrui.XHR.Request({
    url : d + simcity.cPresenceManager.kSetPreferencesPath,
    params : [["invisible", a === simcity.cPresenceManager.Presence.kOffline]],
    onSuccess : function (a) {
      a.json && a.json.error ? e(a) : "function" == typeof b && b(a)
    },
    onError : e,
    method : "get"
  })
};
simcity.cPresenceManager.prototype.SetLocalPresence = function (a) {
  a != this.mPresence && (this.mPresence = a, gUIManager.SendMessage(simcity.cPresenceManager.kMsgTypePresenceChanged, a))
};
simcity.cPresenceManager.prototype.RefreshPresenceFromServer = function (a) {
  var b = this,
  c = function () {
    b.SetLocalPresence(simcity.cPresenceManager.Presence.kOffline)
  },
  d = {
    url : scrui.GetRestPath() + simcity.cPresenceManager.kGetUserStatusPath + ".json",
    onSuccess : function (d) {
      d.json && d.json.error ? c(d) : (b.SetLocalPresence(!0 == d.json.isOnline || "true" === d.json.isOnline ? simcity.cPresenceManager.Presence.kOnline : simcity.cPresenceManager.Presence.kOffline), "function" == typeof a && a())
    },
    onError : c,
    method : "get"
  };
  scrui.XHR.Request(d)
};
simcity.cPresenceManager.prototype.SyncInvisibleState = function () {
  var a = this;
  simcity.gUIToolbox.GetTrackingValue(simcity.cPresenceManager.kTrackingFirstGameEntry, function (b) {
    b || (simcity.gUIToolbox.SetTrackingValue(simcity.cPresenceManager.kTrackingFirstGameEntry), a.SetPresence(simcity.cPresenceManager.Presence.kOnline))
  }, function () {})
};
simcity.gPresenceManager = new simcity.cPresenceManager;
simcity.SessionManager = {};
simcity.cSessionManager = function () {
  this.mUserID = this.mUserSessionID = this.mScreenName = null;
  this.mCookieName = "SCC";
  this.mRememberLogin = !1;
  this.mEmail = null;
  this.mSessionTimeout = 5;
  this.msTimeout = 6E4 * this.mSessionTimeout;
  this.mNucleusId = this.mSessCheckTimeout = null;
  this.mExpireDays = 30;
  this.mLoadCount = 1;
  this.mSkipMovie = !1;
  this.mBoxTarget = this.mRegionTarget = 0
};
simcity.cSessionManager.prototype.StartSession = function (a, b) {
  scrui.PostOriginLoggedInGameCommand();
  null !== b && (this.mScreenName = b.screenName, this.mUserID = b.id, this.mNucleusId = b.extraData ? simcity.gUIToolbox.UnwrapId(b.extraData) : b.nucleusId, this.SetSessionCookie(), this.LoginUser(a), simcity.gPresenceManager.SetLocalPresence(!0 == b.isOnline || "true" == b.isOnline ? simcity.cPresenceManager.Presence.kOnline : simcity.cPresenceManager.Presence.kOffline))
};
simcity.cSessionManager.prototype.LoginUser = function (a, b) {
  b && simcity.gSessionManager.StartSession(b.sessionID, b)
};
simcity.cSessionManager.prototype.IsUserLoggedIn = function () {
  return null != this.mUserID
};
simcity.cSessionManager.prototype.EndSession = function () {
  this.mUserData = {};
  this.DestroySession()
};
simcity.cSessionManager.prototype.GetSessionCookie = function () {
  return simcity.utils.GetCookie(this.mCookieName)
};
simcity.cSessionManager.prototype.SetSessionCookie = function () {
  var a = "{'session': '" + this.mUserSessionID + "', 'name': '" + this.mScreenName + "', 'userId' : '" + this.mUserID + "', 'loadCount' : '" + this.mLoadCount + "', 'skipMovie' : '" + this.mSkipMovie + "', 'regionTarget' : '" + this.mRegionTarget + "', 'boxTarget' : '" + this.mBoxTarget + "'}";
  simcity.utils.DeleteCookie(this.mCookieName);
  simcity.utils.SetCookie(this.mCookieName, a, this.mRememberLogin ? this.mExpireDays : 0, "/")
};
simcity.cSessionManager.prototype.LoadPage = function () {
  this.mLoadCount++;
  this.SetSessionCookie()
};
simcity.cSessionManager.prototype.SetSkipMovie = function (a) {
  this.mSkipMovie = a;
  this.SetSessionCookie()
};
simcity.cSessionManager.prototype.SetBoxTarget = function (a, b) {
  this.mRegionTarget = a;
  this.mBoxTarget = b;
  this.SetSessionCookie()
};
simcity.cSessionManager.prototype.ResetBoxTarget = function () {
  this.mBoxTarget = this.mRegionTarget = 0;
  this.SetSessionCookie()
};
simcity.cSessionManager.prototype.DestroySession = function () {
  this.mUserID = this.mUserSessionID = this.mScreenName = null;
  simcity.utils.DeleteCookie(this.mCookieName, "/")
};
simcity.cSessionManager.prototype.IsSessionActive = function () {
  var a = !1,
  b = this.GetSessionCookie();
  null !== b && (null === this.mUserSessionID ? (a = eval("[" + b + "]")[0], this.mScreenName = a.name, this.mUserSessionID = a.session, this.mUserID = a.userId, this.mLoadCount = a.loadCount, this.mSkipMovie = a.skipMovie, this.mRegionTarget = a.regionTarget, this.mBoxTarget = a.boxTarget, a = !0) : a = !1);
  return a
};
simcity.cSessionManager.prototype.ServerPing = function () {};
simcity.cSessionManager.prototype.HandlePingResponse = function (a) {
  (a = eval("[" + a.contentText + "]")[0]) && "true" === a.isValid ? simcity.gSessionManager.mSessCheckTimeout = setTimeout("simcity.gSessionManager.ServerPing()", simcity.gSessionManager.msTimeout) : (simcity.gPageStateHandler.mLoginPageManager.DoLogout(), simcity.gPageStateHandler.mModalManager.Show("Session timeout", "Your session timed out. Please log in again.;<div align=center><input type=button value='OK' onclick='simcity.gPageStateHandler.mModalManager.Hide()'></div>"))
};
simcity.gSessionManager = new simcity.cSessionManager;
simcity.GameResourceDataMath = {};
simcity.CalculateTotalPower = function (a, b) {
  return a - b
};
simcity.RoadSelectUI = {};
simcity.cRoadSelectUIHandler = function () {
  this.UIHandler = scrui.cUIHandler;
  this.UIHandler();
  this.mWinLeftArrow = this.mWinRightArrow = this.mTxtBeautify = this.mBtnBeautify = this.mTxtDowngrade = this.mBtnDowngrade = this.mTxtUpgrade = this.mBtnUpgrade = this.mTxtRoadType = this.mWinBackground = this.mRoadSelectUILayout = this.mParentControl = null
};
goog.inherits(simcity.cRoadSelectUIHandler, scrui.cUIHandler);
simcity.cRoadSelectUIHandler.kWinBackground = 247939637;
simcity.cRoadSelectUIHandler.kTxtIDRoadType = 247764469;
simcity.cRoadSelectUIHandler.kBtnIDUpgrade = 247762688;
simcity.cRoadSelectUIHandler.kBtnIDDowngrade = 247762686;
simcity.cRoadSelectUIHandler.kBtnIDBeautify = 247762610;
simcity.cRoadSelectUIHandler.kTxtIDButtonTxt = 247762631;
simcity.cRoadSelectUIHandler.kWinRightArrow = 215183969;
simcity.cRoadSelectUIHandler.kWinLeftArrow = 215183970;
simcity.cRoadSelectUIHandler.kColorEnabled = "#008000";
simcity.cRoadSelectUIHandler.kColorDisabled = "#FF0000";
simcity.cRoadSelectUIHandler.kColorUnavailable = "#080808";
simcity.cRoadSelectUIHandler.kLayoutHeightWithBeautifyButton = 177;
simcity.cRoadSelectUIHandler.kLayoutHeightWithoutBeautifyButton = 134;
simcity.cRoadSelectUIHandler.kBackgroundLayoutDiff = 6;
simcity.cRoadSelectUIHandler.roadSelectQueries = [scrui.BuildRequestQuery(["selectedtool", "toolRoadSelect"])];
simcity.cRoadSelectUIHandler.prototype.Init = function (a) {
  this.mParentControl = a;
  this.mRoadSelectUILayout = gUIManager.LoadAndCacheLayout("Layouts/Rollovers/RoadSelect.js", a);
  this.mTxtRoadType = this.mRoadSelectUILayout.FindControlByID(simcity.cRoadSelectUIHandler.kTxtIDRoadType);
  this.mWinBackground = this.mRoadSelectUILayout.FindControlByID(simcity.cRoadSelectUIHandler.kWinBackground);
  this.mBtnUpgrade = this.mRoadSelectUILayout.FindControlByID(simcity.cRoadSelectUIHandler.kBtnIDUpgrade);
  this.mTxtUpgrade = this.mBtnUpgrade.FindControlByID(simcity.cRoadSelectUIHandler.kTxtIDButtonTxt);
  this.mBtnDowngrade = this.mRoadSelectUILayout.FindControlByID(simcity.cRoadSelectUIHandler.kBtnIDDowngrade);
  this.mTxtDowngrade = this.mBtnDowngrade.FindControlByID(simcity.cRoadSelectUIHandler.kTxtIDButtonTxt);
  this.mBtnBeautify = this.mRoadSelectUILayout.FindControlByID(simcity.cRoadSelectUIHandler.kBtnIDBeautify);
  this.mTxtBeautify = this.mBtnBeautify.FindControlByID(simcity.cRoadSelectUIHandler.kTxtIDButtonTxt);
  this.mWinRightArrow = this.mRoadSelectUILayout.FindControlByID(simcity.cRoadSelectUIHandler.kWinRightArrow);
  this.mWinLeftArrow = this.mRoadSelectUILayout.FindControlByID(simcity.cRoadSelectUIHandler.kWinLeftArrow);
  this.mRoadSelectUILayout.SetVisibility(!1);
  this.mShouldUpdate = !1
};
simcity.cRoadSelectUIHandler.prototype.HandleUIMessage = function (a, b, c) {
  scrui.cUIHandler.prototype.HandleUIMessage.call(this, a, b, c);
  switch (a) {
  case scrui.kMsgTypeButtonClicked:
    switch (b) {
    case simcity.cRoadSelectUIHandler.kBtnIDUpgrade:
      scrui.PostGameCommand(scrui.BuildCommand([simcity.kDataToolMessage, scrui.IDFromName("DoUpgrade")]));
      break;
    case simcity.cRoadSelectUIHandler.kBtnIDDowngrade:
      scrui.PostGameCommand(scrui.BuildCommand([simcity.kDataToolMessage, scrui.IDFromName("DoDowngrade")]));
      break;
    case simcity.cRoadSelectUIHandler.kBtnIDBeautify:
      scrui.PostGameCommand(scrui.BuildCommand([simcity.kDataToolMessage,
            scrui.IDFromName("DoBeautify")]))
    }
  }
};
simcity.cRoadSelectUIHandler.prototype.HandleGameEvent = function (a) {
  switch (a) {
  case simcity.kGameMessageRoadSelected:
    this.mRoadSelectUILayout.SetVisibility(!0);
    this.mShouldUpdate = !0;
    break;
  case simcity.kGameMessageRoadDeselected:
    this.mRoadSelectUILayout.SetVisibility(!1),
    this.mShouldUpdate = !1
  }
};
simcity.cRoadSelectUIHandler.prototype.Update = scrui.Client_ProfZone("cRoadSelectUIHandler.Update", function () {
    if (this.mShouldUpdate) {
      var a = this;
      scrui.RequestGameData(simcity.cRoadSelectUIHandler.roadSelectQueries, function (b) {
        if (b = b[0]) {
          a.PositionSelected(b.screenPosition);
          a.mTxtRoadType.SetLocaleText(scrui.LocaleStringFromLocaleProperty(b.pathTypeText));
          var c = scrui.TextFromLocaleProperty(b.upgradePath);
          a.mTxtUpgrade.SetLocaleText(scrui.LocaleStringFromLocaleProperty(b.upgradeText), {
            cost : b.upgradeCost,
            roadType : c
          });
          b.upgradeAvailable ? b.canUpgrade ? a.mTxtUpgrade.SetTextColor(simcity.cRoadSelectUIHandler.kColorEnabled) : a.mTxtUpgrade.SetTextColor(simcity.cRoadSelectUIHandler.kColorDisabled) : a.mTxtUpgrade.SetTextColor(simcity.cRoadSelectUIHandler.kColorUnavailable);
          a.mBtnUpgrade.SetEnabled(b.upgradeAvailable && b.canUpgrade);
          c = scrui.TextFromLocaleProperty(b.downgradePath);
          a.mTxtDowngrade.SetLocaleText(scrui.LocaleStringFromLocaleProperty(b.downgradeText), {
            cost : b.downgradeCost,
            roadType : c
          });
          b.downgradeAvailable ?
          b.canDowngrade ? a.mTxtDowngrade.SetTextColor(simcity.cRoadSelectUIHandler.kColorEnabled) : a.mTxtDowngrade.SetTextColor(simcity.cRoadSelectUIHandler.kColorDisabled) : a.mTxtDowngrade.SetTextColor(simcity.cRoadSelectUIHandler.kColorUnavailable);
          a.mBtnDowngrade.SetEnabled(b.downgradeAvailable && b.canDowngrade);
          b.beautifyAvailable ? (a.mRoadSelectUILayout.SetHeight(simcity.cRoadSelectUIHandler.kLayoutHeightWithBeautifyButton), a.mWinBackground.SetHeight(a.mRoadSelectUILayout.mHeight - simcity.cRoadSelectUIHandler.kBackgroundLayoutDiff),
            c = scrui.TextFromLocaleProperty(b.beautifyPath), a.mTxtBeautify.SetLocaleText(scrui.LocaleStringFromLocaleProperty(b.beautifyText), {
              cost : b.beautifyCost,
              roadType : c
            }), b.canBeautify ? a.mTxtBeautify.SetTextColor(simcity.cRoadSelectUIHandler.kColorEnabled) : a.mTxtBeautify.SetTextColor(simcity.cRoadSelectUIHandler.kColorDisabled), a.mBtnBeautify.SetEnabled(b.canBeautify)) : (a.mRoadSelectUILayout.SetHeight(simcity.cRoadSelectUIHandler.kLayoutHeightWithoutBeautifyButton), a.mWinBackground.SetHeight(a.mRoadSelectUILayout.mHeight -
              simcity.cRoadSelectUIHandler.kBackgroundLayoutDiff));
          a.mBtnBeautify.SetVisibility(b.beautifyAvailable)
        }
      })
    }
  });
simcity.cRoadSelectUIHandler.prototype.PositionSelected = function (a) {
  if (a)
    if (0 > a[0] || 0 > a[1] || a[0] > this.mParentControl.mWidth || a[1] > this.mParentControl.mHeight)
      this.mRoadSelectUILayout.SetVisibility(!1);
    else {
      this.mRoadSelectUILayout.SetVisibility(!0);
      var b = this.mRoadSelectUILayout.mHeight / 2;
      0 > a[1] - b ? b -= b - a[1] : a[1] + b > this.mParentControl.mHeight && (b -= this.mParentControl.mHeight - (a[1] + b));
      var c = this.mRoadSelectUILayout.mWidth / 1.5;
      if (a[0] + this.mRoadSelectUILayout.mWidth > this.mParentControl.mWidth) {
        c *= -1;
        this.mWinRightArrow.SetVisibility(!0);
        this.mWinLeftArrow.SetVisibility(!1);
        var d = this.mRoadSelectUILayout.ConvertAbsoluteToParentSpace(a[0], a[1], d);
        this.mWinRightArrow.SetPosition(this.mWinRightArrow.mLeft, a[1] - this.mRoadSelectUILayout.mTop)
      } else
        this.mWinRightArrow.SetVisibility(!1), this.mWinLeftArrow.SetVisibility(!0), this.mRoadSelectUILayout.ConvertAbsoluteToParentSpace(a[0], a[1], d), this.mWinLeftArrow.SetPosition(this.mWinLeftArrow.mLeft, a[1] - this.mRoadSelectUILayout.mTop);
      this.mRoadSelectUILayout.SetPosition(a[0] -
        this.mRoadSelectUILayout.mWidth / 2 + c, a[1] - b)
    }
  else
    this.mRoadSelectUILayout.SetVisibility(!1)
};
simcity.NewspaperUI = {};
simcity.cNewspaperUIHandler = function () {
  this.UIHandler = scrui.cUIHandler;
  this.UIHandler();
  this.mParentControl = this.mMouseEaterWindow = null;
  this.mNewArticlesArrived = !1;
  this.mReady = !0;
  this.mTimeSinceLastUpdate = 0;
  this.mTimelineData = {
    money : [],
    budgetDelta : [],
    population : [],
    mayorRating : [],
    simticks : []
  }
};
goog.inherits(simcity.cNewspaperUIHandler, scrui.cUIHandler);
simcity.cNewspaperUIHandler.kTimelineUpdateTime = 3E4;
simcity.cNewspaperUIHandler.kKeyTriggerShow = 268435494;
simcity.cNewspaperUIHandler.kWindowGlobalUIContainer = 230914006;
simcity.cNewspaperUIHandler.kWindowNewspaperLayoutID = 231246262;
simcity.cNewspaperUIHandler.kWindowArticleContainer = 230913565;
simcity.cNewspaperUIHandler.kBtnIDRegionView = 230136032;
simcity.cNewspaperUIHandler.kBtnIDZoomToSpeechBalloon = 223569595;
simcity.cNewspaperUIHandler.kWindowPopoutContainer = 220101781;
simcity.cNewspaperUIHandler.kBtnStoryButton = 221133781;
simcity.cNewspaperUIHandler.kWindowThumbnail = 227098163;
simcity.cNewspaperUIHandler.kWindowCategoryRollover = 227099879;
simcity.cNewspaperUIHandler.kTxtPopout = 221148166;
simcity.cNewspaperUIHandler.kTxtTimePane = 221160756;
simcity.cNewspaperUIHandler.kIcnNewPane = 221223092;
simcity.cNewspaperUIHandler.WindowHighlight = 227185964;
simcity.cNewspaperUIHandler.kArticleRolloverWindow = 173348062;
simcity.cNewspaperUIHandler.kArticleRolloverWindowContainer = 231327336;
simcity.cNewspaperUIHandler.kArticleRolloverText = 173349051;
simcity.cNewspaperUIHandler.kWindowPopOutText = 219774262;
simcity.cNewspaperUIHandler.kWindowPopOutTextBacking = 223668340;
simcity.cNewspaperUIHandler.kWindowPopOutThumbnail = 219777487;
simcity.cNewspaperUIHandler.kWindowPopoutAnim = 224005840;
simcity.cNewspaperUIHandler.kWindowInterruptText = 228401142;
simcity.cNewspaperUIHandler.kWindowInterruptTextBacking = 228401156;
simcity.cNewspaperUIHandler.kWindowInterruptIncidentContainer = 228401169;
simcity.cNewspaperUIHandler.kAnimIncident = 228480853;
simcity.cNewspaperUIHandler.kAnimInterruptReveal = 228415657;
simcity.cNewspaperUIHandler.kBtnCharts = 227796327;
simcity.cNewspaperUIHandler.kWindowTickerGlowDefault = 224854213;
simcity.cNewspaperUIHandler.kWindowTickerGlowFire = 224855344;
simcity.cNewspaperUIHandler.kWindowTickerGlowIDs = [simcity.cNewspaperUIHandler.kWindowTickerGlowDefault, simcity.cNewspaperUIHandler.kWindowTickerGlowFire];
simcity.cNewsStory = function (a, b, c) {
  var d = simcity.gGlobalUIHandler.mNewspaperUIHandler;
  this.mHash = a.hash;
  this.mRolloverCategoryImage = a.rolloverCategoryImage;
  this.mCategory = a.category;
  this.mPopoutThumbnail = a.popoutThumbnail;
  this.mPopoutText = a.popoutText;
  this.mLargeImage = a.largeImage;
  this.mBodyText = a.bodyText;
  this.mHyperLink = a.hyperlink;
  this.mSpeechBalloon = a.speechBalloon;
  b && (this.mDetokenizer = b);
  c ? (this.mIsNew = !1, this.mTime = c) : this.mIsNew = !0;
  this.mIsNew ? (this.mTime = d.mDate, d.mStoryQueue.unshift(this)) :
  d.mStoryQueue.push(this)
};
function html_entity_decode(a) {
  var a = a.replace(/\//gi, ""),
  a = a.replace(/%20/gi, " "),
  a = a.replace(/\\/gi, "/"),
  b = document.createElement("pre");
  b.innerHTML = a;
  return b.firstChild.nodeValue
}
simcity.cNewspaperUIHandler.prototype.AddNewsStory = function (a, b) {
  var c = this,
  d = scrui.BuildRequestQuery(["boxBroken"]);
  scrui.RequestGameData([d], function (d) {
    d[0] ? scrui.Assert(0, "Box is reported as broken; not adding news story") : (new simcity.cNewsStory(a, b), c.mNewArticlesArrived = !0, c.addPane(), c.IsShowing() && c.showStories())
  })
};
simcity.cNewspaperUIHandler.prototype.addPane = function () {
  this.mArticleWindowLayouts[this.mStoryCount] = gUIManager.LoadAndCacheLayout("Layouts/News/newsarticle.js", this.mArticleContainerWindow);
  this.mArticleWindowLayouts[this.mStoryCount].SetPosition(this.mStoryCount * this.mArticleWindowLayouts[this.mStoryCount].mWidth, 0);
  this.mArticleWindowLayouts[this.mStoryCount].mUserData = this.mStoryCount;
  this.mStoryCount++;
  this.IsShowing() && (this.mPaneAddedWhileNewsVisible = !0);
  var a = this;
  gUIManager.FindAnimationByID(simcity.cNewspaperUIHandler.kWindowPopoutAnim).RegisterEventCallback(scrui.cAnimation.kEventStopped,
    function () {
    if (a.IsShowing())
      a.mPaneAddedWhileNewsVisible = false
  })
};
simcity.cNewspaperUIHandler.prototype.Init = function (a) {
  scrui.Assert(null !== a);
  this.mParentControl = a;
  this.mNewspaperUILayout = gUIManager.FindControlByID(simcity.cNewspaperUIHandler.kWindowNewspaperLayoutID);
  this.mNewspaperUILayout.SetVisibility(!1);
  this.mArticleContainerWindow = gUIManager.FindControlByID(simcity.cNewspaperUIHandler.kWindowArticleContainer);
  this.mArticleContainerWindow.SetVisibility(!1);
  this.mArticleContainerWindow.mRootElement.style.overflowX = "scroll";
  this.mArticleContainerWindow.mRootElement.style.overflowY =
    "hidden";
  this.mArticleRollover = gUIManager.LoadLayout("Layouts/News/ArticleRollover.js", gUIManager.FindControlByID(simcity.cNewspaperUIHandler.kArticleRolloverWindowContainer));
  this.mArticleRollover.SetVisibility(!1);
  this.mSelectedStory = -1;
  this.mStoryQueue = [];
  this.mBoxID = simcity.gGlobalUIHandler.GetBoxID();
  this.mPopOutWindow = gUIManager.LoadLayout("Layouts/News/newsUnlock.js", gUIManager.FindControlByID(simcity.cNewspaperUIHandler.kWindowPopoutContainer));
  this.mPopOutWindow.SetVisibility(!1);
  this.mInterruptWindow =
    gUIManager.LoadLayout("Layouts/News/newsinterupt.js", gUIManager.FindControlByID(simcity.cNewspaperUIHandler.kWindowPopoutContainer));
  this.mInterruptWindow.SetVisibility(!1);
  this.mIncidentLayout = null;
  this.mArticleWindowLayouts = [];
  this.mStoryCount = 0;
  this.mPaneAddedWhileNewsVisible = !1;
  this.mChart = this.mRaphaelPaper = null;
  this.mTimelineHistoryOn = !1;
  this.mDate = "empty"
};
simcity.cNewspaperUIHandler.prototype.DateUpdate = function (a) {
  this.mDate = a
};
simcity.cNewspaperUIHandler.prototype.Shutdown = function () {
  this.destroyCharts();
  this.mNewArticlesArrived && this.SaveNewspaperHistory()
};
simcity.cNewspaperUIHandler.prototype.Update = scrui.Client_ProfZone("cNewspaperUIHandler.Update", function (a) {
    this.mTimeSinceLastUpdate += a;
    if (this.mTimelineHistoryOn && this.mTimeSinceLastUpdate > simcity.cNewspaperUIHandler.kTimelineUpdateTime) {
      var b = this,
      a = scrui.BuildRequestQuery(["simticks"]);
      scrui.RequestGameData([a], function (a) {
        b.mTimelineData.simticks.push(a[0]);
        b.mTimelineData.money.push(simcity.gGlobalUIHandler.mLastMoney);
        b.mTimelineData.budgetDelta.push(simcity.gGlobalUIHandler.mLastBudgetDelta);
        b.mTimelineData.population.push(simcity.gGlobalUIHandler.mLastPopulation);
        b.mTimelineData.mayorRating.push(simcity.gGlobalUIHandler.mMayorRating);
        b.mTimeSinceLastUpdate = 0
      })
    }
  });
simcity.cNewspaperUIHandler.prototype.HandleGameEvent = function (a, b) {
  switch (a) {
  case simcity.kMessageKeyTrigger:
    b.triggerCode == simcity.cNewspaperUIHandler.kKeyTriggerShow && (this.IsShowing() ? this.Hide() : this.Show())
  }
};
simcity.cNewspaperUIHandler.prototype.HandleUIMessage = function (a, b, c) {
  scrui.cUIHandler.prototype.HandleUIMessage.call(this, a, b, c);
  var d = !1;
  switch (a) {
  case scrui.kMsgTypeButtonGainFocus:
    switch (b.controlID) {
    case simcity.cNewspaperUIHandler.kBtnStoryButton:
      a = c.mParentControl.mUserData,
      this.mStoryQueue.length && a <= this.mStoryQueue.length && (this.mSelectedStory = a, d = !0)
    }
    break;
  case scrui.kMsgTypeButtonLoseFocus:
    switch (b.controlID) {
    case simcity.cNewspaperUIHandler.kBtnStoryButton:
      this.mSelectedStory = -1,
      d = !0
    }
    break;
  case scrui.kMsgTypeButtonClicked:
    switch (b) {
    case simcity.cNewspaperUIHandler.kBtnIDRegionView:
      this.Hide();
      scrui.PostGameCommand(simcity.gGlobalUIHandler.mRegionViewCommand);
      break;
    case simcity.cNewspaperUIHandler.kBtnIDZoomToSpeechBalloon:
      a = c.GetParentLayout().mUserData,
      this.mStoryQueue.length && a <= this.mStoryQueue.length && (a = this.mStoryQueue[a], a.mHyperLink === simcity.cTicker.kHyperlinkRegionView ? (this.Hide(), simcity.gGlobalUIHandler.GetVisibility() && scrui.PostGameCommand(simcity.gGlobalUIHandler.mRegionViewCommand)) :
        null !== a.mSpeechBalloon && (this.Hide(), simcity.gGlobalUIHandler.mSpeechBalloonHandler.OpenSpeechBalloon(a.mSpeechBalloon)))
    }
  }
  d && this.showStories()
};
simcity.cNewspaperUIHandler.prototype.drawCharts = function () {
  this.mTimelineData.simticks.length && this.mTimelineHistoryOn && (windowPosition = windowBackground.GetAbsolutePosition(), this.mChart = this.mChart = this.mRaphaelPaper = null, this.mChartLabelX = this.mRaphaelPaper.text(320, 272, "Time"), this.mChartLabelX.attr({
      font : "12px Helvetica, Arial",
      fill : "#fff"
    }), this.mChartLabelYPop = this.mRaphaelPaper.text(80, 160, "Population"), this.mChartLabelYPop.attr({
      font : "12px Helvetica, Arial",
      fill : "#33ccff"
    }), this.mChartLabelYBudget =
      this.mRaphaelPaper.text(80, 180, "Budget"), this.mChartLabelYBudget.attr({
      font : "12px Helvetica, Arial",
      fill : "#33ff00"
    }))
};
simcity.cNewspaperUIHandler.prototype.showStories = function () {
  var a = gUIManager.FindControlByID(simcity.cNewspaperUIHandler.kArticleRolloverText);
  this.mArticleRollover.SetVisibility(!1);
  for (var b = 0; b < this.mStoryCount; ++b) {
    var c = this.mArticleWindowLayouts[b];
    c.SetVisibility(!1);
    var d = c.FindControlByID(simcity.cNewspaperUIHandler.kTxtPopout),
    e = c.FindControlByID(simcity.cNewspaperUIHandler.kTxtTimePane),
    f = c.FindControlByID(simcity.cNewspaperUIHandler.kWindowThumbnail),
    g = c.FindControlByID(simcity.cNewspaperUIHandler.WindowHighlight),
    h = c.FindControlByID(simcity.cNewspaperUIHandler.kIcnNewPane),
    i = c.FindControlByID(simcity.cNewspaperUIHandler.kBtnIDZoomToSpeechBalloon);
    e.SetVisibility(!1);
    f.SetVisibility(!1);
    d.SetVisibility(!1);
    g.SetVisibility(!1);
    h.SetVisibility(!1);
    if (b < this.mStoryQueue.length) {
      var j = this.mStoryQueue[b];
      this.mPaneAddedWhileNewsVisible && 0 == b ? c.SetVisibility(!1) : c.SetVisibility(!0);
      e.SetVisibility(!0);
      e.SetRawText(j.mTime);
      d.SetVisibility(!0);
      d.SetRawText(" " + j.mPopoutText, !1);
      h.SetVisibility(j.mIsNew);
      j.hasOwnProperty("mPopoutThumbnail") &&
      (f.SetVisibility(!0), f.SetWindowImage(j.mPopoutThumbnail));
      j.hasOwnProperty("mRolloverCategoryImage");
      i.SetVisibility(null !== j.mSpeechBalloon || j.mHyperLink === simcity.cTicker.kHyperlinkRegionView);
      b == this.mSelectedStory && (this.mArticleRollover.SetVisibility(!0), a.SetRawText(j.mBodyText), d = c.mLeft + c.mChildren[0].mWidth / 2 - this.mArticleRollover.mChildren[0].mWidth / 2 - this.mArticleContainerWindow.mRootElement.scrollLeft, e = a.GetTextHeight() + 28, this.mArticleRollover.SetPosition(d, c.mTop, this.mArticleRollover.mWidth,
          e), g.SetVisibility(!0))
    }
  }
};
simcity.cNewspaperUIHandler.prototype.Show = function () {
  this.mNewspaperUILayout.SetVisibility(!0);
  this.mArticleContainerWindow.SetVisibility(!0);
  this.showStories();
  simcity.SendSoundEvent(simcity.audio.kGlobalSoundObjectID, simcity.audio.kInstanceUIWireWinOpen);
  simcity.AddTelemetry("SC_UI_BTN_NEWSPAPER", 12, {
    info : "opened"
  })
};
simcity.cNewspaperUIHandler.prototype.Hide = function () {
  this.ClearNewArticleFlags();
  this.mNewspaperUILayout.SetVisibility(!1);
  this.mArticleContainerWindow.SetVisibility(!1);
  this.mIncidentLayout && this.mIncidentLayout.SetVisibility(!1);
  this.destroyCharts();
  simcity.SendSoundEvent(simcity.audio.kGlobalSoundObjectID, simcity.audio.kInstanceUIWireWinClose)
};
simcity.cNewspaperUIHandler.prototype.destroyCharts = function () {
  null !== this.mChart && (this.mChart.remove(), this.mChart = null);
  null !== this.mRaphaelPaper && (this.mRaphaelPaper.clear(), this.mRaphaelPaper.remove(), this.mRaphaelPaper = null)
};
simcity.cNewspaperUIHandler.prototype.ClearNewArticleFlags = function () {
  for (var a = 0; a < this.mStoryQueue.length; ++a)
    this.mStoryQueue[a].mIsNew = !1
};
simcity.cNewspaperUIHandler.prototype.IsShowing = function () {
  return this.mArticleContainerWindow.IsControlVisible()
};
simcity.cNewspaperUIHandler.prototype.ShowPopOutPicture = function (a, b, c) {
  var d = gUIManager.FindControlByID(simcity.cNewspaperUIHandler.kWindowPopOutText),
  e = gUIManager.FindControlByID(simcity.cNewspaperUIHandler.kWindowPopOutTextBacking),
  f = gUIManager.FindControlByID(simcity.cNewspaperUIHandler.kWindowPopOutThumbnail);
  null != d ? (d.SetRawText(a), e.SetVisibility(!0), d.SetVisibility(!0)) : (e.SetVisibility(!1), d.SetVisibility(!1));
  c ? (a = simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData.mPlayers[c]) &&
  simcity.gUIToolbox.SetAvatar(f, a.screenName) : f.SetWindowImage(b);
  this.mPopOutWindow.SetVisibility(!0);
  gUIManager.FindAnimationByID(simcity.cNewspaperUIHandler.kWindowPopoutAnim).RegisterEventCallback(scrui.cAnimation.kEventStopped, function () {
    simcity.gGlobalUIHandler.mTicker.PopoutAnimDone()
  })
};
simcity.cNewspaperUIHandler.prototype.ShowInterrupt = function (a, b) {
  var c = gUIManager.FindControlByID(simcity.cNewspaperUIHandler.kWindowInterruptText),
  d = gUIManager.FindControlByID(simcity.cNewspaperUIHandler.kWindowInterruptTextBacking);
  this.mIncidentLayout = gUIManager.LoadLayout("Layouts/News/" + b, gUIManager.FindControlByID(simcity.cNewspaperUIHandler.kWindowInterruptIncidentContainer));
  var e = gUIManager.FindAnimationByID(simcity.cNewspaperUIHandler.kAnimIncident);
  null != a ? (c.SetRawText(a), d.SetVisibility(!0),
    c.SetVisibility(!0)) : (d.SetVisibility(!1), c.SetVisibility(!1));
  this.mInterruptWindow.SetVisibility(!0);
  this.mIncidentLayout.SetVisibility(!1);
  this.mIncidentLayout.SetVisibility(!0);
  e && e.Start()
};
simcity.cNewspaperUIHandler.prototype.SetRolloverCategoryImage = function () {};
simcity.cNewspaperUIHandler.prototype.IsPopoutVisible = function () {
  return this.mPopOutWindow.IsControlVisible() || this.mInterruptWindow.IsControlVisible()
};
simcity.cNewspaperUIHandler.prototype.SaveNewspaperHistory = function () {
  if (0 != this.mBoxID && this.mNewArticlesArrived) {
    var a = this.mStoryQueue.length;
    if (a) {
      scrui.PostGameCommand(scrui.BuildCommand(["newspaperSave", "start"]));
      for (var b = 0; b < a; b++) {
        var c = this.mStoryQueue[b];
        scrui.PostGameCommand(scrui.BuildCommand(["newspaperSave", c.mHash, c.mTime, "detokenizer"]))
      }
      scrui.PostGameCommand(scrui.BuildCommand(["newspaperSave", "end"]))
    }
    if (this.mTimelineHistoryOn && (a = this.mTimelineData.money.length)) {
      scrui.PostGameCommand(scrui.BuildCommand(["timelineSave",
            "start"]));
      for (b = 0; b < a; b++)
        scrui.PostGameCommand(scrui.BuildCommand(["timelineSave", this.mTimelineData.money[b], this.mTimelineData.budgetDelta[b], this.mTimelineData.population[b], this.mTimelineData.mayorRating[b], this.mTimelineData.simticks[b]]));
      scrui.PostGameCommand(scrui.BuildCommand(["timelineSave", "end"]))
    }
  }
};
simcity.cNewspaperUIHandler.prototype.SetReady = function (a) {
  this.mReady = a
};
simcity.cNewspaperUIHandler.prototype.IsReady = function () {
  return this.mReady
};
simcity.IME = {};
simcity.kHACKScrollLeftBuffer = 20;
simcity.kCandidateListOffset = 5;
simcity.cIME = function () {
  this.UIHandler = scrui.cUIHandler;
  this.UIHandler();
  this.mFinalizedText = this.mCurrentTextInput = this.mCandidateListLayout = null;
  this.mCharactersToAppend = "";
  this.mCandidateListLeftPosition = this.mOriginalSelectionEnd = 0
};
goog.inherits(simcity.cIME, scrui.cUIHandler);
simcity.cIME.prototype.HandleGameEvent = function (a, b) {
  switch (a) {
  case simcity.kMessageIMECompositionStringUpdated:
    this.mCurrentTextInput && this.UpdateText(b);
    break;
  case simcity.kMessageIMECandidateListUpdate:
    this.mCurrentTextInput && this.UpdateCandidateList(b);
    break;
  case simcity.kMessageIMECompositionFinalized:
    this.mCurrentTextInput && (this.UpdateText(b + this.mCharactersToAppend), this.End());
    break;
  case simcity.kMessageIMECompositionCanceled:
    this.Reset();
  case simcity.kMessageIMECandidateListClosed:
    this.DestroyCandidateList()
  }
};
simcity.cIME.prototype.HandleUIMessage = function (a, b, c) {
  switch (a) {
  case scrui.kMsgTypeControlTextCharacter:
    null !== this.mFinalizedText && b.charCodeAt(0) !== scrui.kKeyCodeEscape && (this.mCharactersToAppend += b);
    break;
  case scrui.kMsgTypeControlTextFocus:
    this.mCurrentTextInput = c;
    break;
  case scrui.kMsgTypeControlTextBlur:
    scrui.PostGameCommand(scrui.BuildCommand(["cancelActiveComposition"])),
    this.Reset(),
    this.DestroyCandidateList(),
    this.mCurrentTextInput = null
  }
};
simcity.cIME.prototype.UpdateText = function (a) {
  null === this.mFinalizedText && (this.mFinalizedText = this.mCurrentTextInput.GetText(), this.mOriginalSelectionEnd = this.mCurrentTextInput.mTextElement.selectionEnd);
  var b = this.mFinalizedText.substr(0, this.mOriginalSelectionEnd) + a;
  this.HACKGetTextLengthBeforeCaret(b);
  var c = b + this.mFinalizedText.substr(this.mOriginalSelectionEnd);
  this.mCurrentTextInput.SetRawText(c);
  this.mCurrentTextInput.mTextElement.selectionStart = this.mOriginalSelectionEnd + a.length;
  this.mCurrentTextInput.mTextElement.selectionEnd =
    this.mOriginalSelectionEnd + a.length;
  this.HACKUpdateScroll(b)
};
simcity.cIME.prototype.UpdateCandidateList = function (a) {
  this.mCandidateListLayout || (this.mCandidateListLayout = gUIManager.LoadAndCacheLayout("Layouts/IMECandidateList.js", gUIManager.GetRootWindow()), this.mCandidateListLayout.SetZIndex(scrui.kZIndexIME));
  for (var b = "", c = 0, d = a.length; c < d; ++c)
    b && (b += "<br>"), b += c + 1 + " " + a[c];
  a = this.mCandidateListLayout.FindControlByID(255537744);
  d = a.mHeight;
  c = a.mWidth;
  a.SetRawText(b);
  b = this.mCandidateListLayout.mHeight + a.GetTextHeight() - d;
  b = Math.max(this.mCandidateListLayout.mHeight,
      b);
  a = this.mCandidateListLayout.mWidth + a.GetTextWidth() - c;
  d = gUIManager.mKeyCaptureControl.GetAbsolutePosition();
  c = 0;
  c = 0 <= d[1] - b - simcity.kCandidateListOffset ? d[1] - b - simcity.kCandidateListOffset : d[1] + this.mCurrentTextInput.mHeight + simcity.kCandidateListOffset;
  if (0 === this.mCandidateListLeftPosition) {
    var e = this.mCurrentTextInput.GetText().substr(0, this.mCurrentTextInput.mTextElement.selectionStart);
    this.mCandidateListLeftPosition = this.HACKGetTextLengthBeforeCaret(e) - this.mCurrentTextInput.mTextElement.scrollLeft
  }
  d =
    Math.min(this.mCandidateListLeftPosition + d[0], d[0] + this.mCurrentTextInput.mTextElement.clientWidth - a);
  this.mCandidateListLayout.SetPosition(d, c, a, b)
};
simcity.cIME.prototype.HACKGetTextLengthBeforeCaret = function (a) {
  var b = 0;
  if (this.mCurrentTextInput) {
    var c = null !== this.mCandidateListLayout;
    this.mCandidateListLayout || (this.mCandidateListLayout = gUIManager.LoadAndCacheLayout("Layouts/IMECandidateList.js", gUIManager.GetRootWindow()));
    var d = this.mCandidateListLayout.FindControlByID(255626874);
    d.SetTextStyle(this.mCurrentTextInput.mStyleList[0]);
    d.SetVisibility(!0);
    a = a.replace(/\s/g, "&nbsp;");
    d.SetText(a);
    b = d.GetTextWidth();
    d.SetVisibility(!1);
    c || this.DestroyCandidateList()
  }
  return b
};
simcity.cIME.prototype.HACKUpdateScroll = function (a) {
  a = this.HACKGetTextLengthBeforeCaret(a);
  a - this.mCurrentTextInput.mTextElement.scrollLeft > this.mCurrentTextInput.mTextElement.clientWidth - simcity.kHACKScrollLeftBuffer && (this.mCurrentTextInput.mTextElement.scrollLeft = a - this.mCurrentTextInput.mTextElement.clientWidth + simcity.kHACKScrollLeftBuffer)
};
simcity.cIME.prototype.Reset = function () {
  this.mFinalizedText && this.mCurrentTextInput && (this.mCurrentTextInput.SetRawText(this.mFinalizedText), this.mCurrentTextInput.mTextElement.selectionStart = this.mOriginalSelectionEnd, this.mCurrentTextInput.mTextElement.selectionEnd = this.mOriginalSelectionEnd);
  this.End()
};
simcity.cIME.prototype.End = function () {
  this.mFinalizedText = null;
  this.mCandidateListLeftPosition = 0;
  this.mCharactersToAppend = ""
};
simcity.cIME.prototype.DestroyCandidateList = function () {
  this.mCandidateListLayout && (this.mCandidateListLayout.DestroyControl(), this.mCandidateListLayout = null)
};
simcity.RegisterIME = function () {
  var a = new simcity.cIME;
  gUIManager.RegisterUIHandler(a)
};
simcity.LeaderboardTab = {};
simcity.cLeaderboards = function () {
  this.mCurrentGuid = null;
  this.kScrollbarWidth = 20;
  this.mCurrentLeaderboardTab = this.mCurrentScope = null;
  this.mIsLoading = !1;
  this.mCurrentRegionRef = this.statsAccordion = this.mLeaderboardGuids = this.mCurrentUnit = null;
  this.mCurrentBigBusinessEntriesPosition = 0;
  this.mControlIds = {
    STATS_LEADERBOARD_TAB : 223124608,
    STATS_TAB_CONTENTS : 228503849,
    STATS_LEADERBOARD_MENU : 241804828,
    BIG_BUSINESS_LEADERBOARD_TAB : 242304475,
    BIG_BUSINESS_TAB_CONTENTS : 242304490,
    BIG_BUSINESS_LEADERBOARD_MENU : 242319377,
    LEADERBOARD_ENTRY_WINDOW : 235836196,
    LEADERBOARD_TITLE : 228924886,
    LEADERBOARD_UNIT : 238158549,
    LEADER_RANK : 228928770,
    LEADER_AVATAR : 228928751,
    LEADER_AVATAR_FRAME : 243609590,
    LEADER_NAME : 228928761,
    LEADER_NUMBER : 228928779,
    LEADER_BAR : 229704282,
    LEADER_CITY_NAME : 234536668,
    LEADER_ENTRY_CONTAINER : 229711530,
    LEADER_SCORE_CONTAINER : 229774251,
    ERROR_WINDOW : 229625760,
    ERROR_TEXT : 223747244,
    SELECTED_LEADERBOARD_TEXT : 238088087,
    LEADER_CATEGORY_WINDOW : 228844875,
    TEXT_GLOBAL : 223124059,
    TEXT_FRIENDS : 223123796,
    TEXT_MY_ENTRIES : 244903158,
    TEXT_RANKED_BY : 245787890,
    FOOTER_WINDOW : 246809291,
    REGION_ENTRY_WINDOW : 242329352,
    REGION_RANK : 242329368,
    REGION_SCORE : 242329374,
    REGION_NAME : 242329361,
    REGION_PERCENTILE : 242329364,
    REGION_UNITS : 242329371,
    REGION_ENTRY_BUTTON : 242331123,
    REGION_NEXT_TILE_CONATINER : 245931280,
    REGION_EXPANDED_CITY_WINDOW : 245866018,
    REGION_EXPAND_CITY_ANIM : 245866024,
    REGION_ACTIVE_MARKER : 246546913,
    BOX_ACTIVE_MARKER : 246548553,
    ABANDONED_CITY_BOX : 248804914,
    AVATAR_BOX : 248874975,
    STATS_BUTTON_GROUP : 245174317,
    BIG_BUSINESS_BUTTON_GROUP : 245174992,
    MENU_LABEL : 245176664,
    MENU_ICON : 245176661,
    MENU_BUTTON : 245176825,
    BUTTON_FRIENDS : 223123761,
    BUTTON_GLOBAL : 223124041,
    BUTTON_MY_TOP_ENTRIES : 238865899,
    BUTTON_STATS_TAB : 241805561,
    BUTTON_BIG_BUSINESS_TAB : 241807219,
    BUTTON_LOAD_MORE_RESULTS : 245862973,
    LB_UPDATES_DISCLAIMER : 255212607
  };
  this.mProgressPageLayouts = {
    mBoxEntryLayout : "Layouts/SimCityWorld/LeaderboardCityEntry.js",
    mUserBoxEntryLayout : "Layouts/SimCityWorld/LeaderboardUserCityEntry.js",
    mTabPanel : "Layouts/SimCityWorld/LeaderboardContent.js",
    mRegionEntry : "Layouts/SimCityWorld/LeaderboardRegionEntry.js",
    mUserRegionEntry : "Layouts/SimCityWorld/LeaderboardUserRegionEntry.js",
    mRegionEntryExpandedView : "Layouts/SimCityWorld/LeaderboardRegionExpandedView.js",
    mLeaderboardMenuItem : "Layouts/SimCityWorld/Leaderboard-Button.js",
    mPaginator : "Layouts/SimCityWorld/LeaderboardPaginator.js"
  };
  this.mImages = {
    SELECTED_REGION_ENTRY_BUTTON_IMAGE : "Graphics/GameEntry/SimCityWorld/Leaderboard-SelectedEntryBG.png",
    SELECTED_HOVER_REGION_ENTRY_BUTTON_IMAGE : "Graphics/GameEntry/SimCityWorld/Leaderboard-SelectedEntryBG-Hover.png"
  };
  this.mStyles = {
    LEADERBOARD_SELECTED_ENTRY : "LeaderboardSelectedEntry",
    LEADERBOARD_ENTRY_GRAY : "LeaderboardEntryGray",
    LEADERBOARD_ENTRY_WHITE : "LeaderboardEntryWhite"
  };
  this.mLeaderboardScope = {
    GLOBAL : "GLOBAL",
    FRIENDS : "FRIENDS",
    MINE : "MINE"
  };
  this.mDeepLinkPaths = {
    PROFILE_PATH : "profile",
    REGION_PATH : "region",
    MY_REGION_PATH : "myRegion"
  };
  this.kLocaleStrings = {
    MY_CITIES : new scrui.cLocaleString("GameEntry.json", "0x0e3ceeec"),
    MY_REGIONS : new scrui.cLocaleString("GameEntry.json", "0x0e98dd82"),
    TOP_PERCENTAGE : new scrui.cLocaleString("GameEntry.json",
      "0x0e9f6fac"),
    RANKED_BY_REGION : new scrui.cLocaleString("GameEntry.json", "0x0ea775bd"),
    RANKED_BY_CITY : new scrui.cLocaleString("GameEntry.json", "0x0ea775e4"),
    NO_LEADERBOARD_DATA : new scrui.cLocaleString("GameEntry.json", "0x0eb2232c"),
    ERROR_LOADING_LEADERBOARD : new scrui.cLocaleString("GameEntry.json", "0x0eb2241b"),
    BIG_BUSINESS_UNITS : new scrui.cLocaleString("GameEntry.json", "0x0edec4af"),
    LB_UPDATES_DISCLAIMER_TEXT : new scrui.cLocaleString("GameEntry.json", "0x0f361834"),
    ABANDONED_CITY_TEXT : new scrui.cLocaleString("GameEntry.json",
      "0x3daa1708")
  };
  this.mLeaderboardType = {
    STATS : "STATS",
    BIG_BUSINESS : "BIG_BUSINESS"
  };
  this.mAnimKeyframes = {
    CITY_LAYOUT_HEIGHT : 245949944,
    REGION_ENTRY_LAYOUT_HEIGHT : 247241845
  }
};
goog.inherits(simcity.cLeaderboards, simcity.cPanelTab);
simcity.cLeaderboards.prototype.InitTab = function (a) {
  simcity.cPanelTab.prototype.InitTab.call(this, a);
  for (var b in this.mProgressPageLayouts)
    gUIManager.CacheLayout(this.mProgressPageLayouts[b]);
  this.mLeaderboardGuids = simcity.gSimCityWorldController.Leaderboards.mLeaderboardGuids;
  this.AddLeaderboardMenuItems();
  this.AddEventListener(simcity.gEventTypes.CLICK, this.mControlIds.BUTTON_GLOBAL, this.ShowGlobal);
  this.AddEventListener(simcity.gEventTypes.CLICK, this.mControlIds.BUTTON_FRIENDS, this.ShowFriends);
  this.AddEventListener(simcity.gEventTypes.CLICK, this.mControlIds.BUTTON_MY_TOP_ENTRIES, this.ShowMyTopCities);
  this.AddEventListener(simcity.gEventTypes.CLICK, this.mControlIds.BUTTON_STATS_TAB, this.ShowStatsLeaderboard);
  this.AddEventListener(simcity.gEventTypes.CLICK, this.mControlIds.BUTTON_BIG_BUSINESS_TAB, this.ShowBigBusinessLeaderboard);
  this.AddEventListener(simcity.gEventTypes.CLICK, this.mControlIds.REGION_ENTRY_BUTTON, this.ShowRegionDetails);
  this.AddEventListener(simcity.gEventTypes.CLICK, this.mControlIds.MENU_BUTTON,
    this.OnCategoryClickHandler);
  this.AddEventListener(simcity.gEventTypes.CLICK, this.mControlIds.BUTTON_LOAD_MORE_RESULTS, this.LoadMoreResults);
  a = simcity.cConstants.kLeaderboardsUpdateFreqDisclaimerTime;
  b = this.kLocaleStrings.LB_UPDATES_DISCLAIMER_TEXT;
  this.FindControlByID(this.mControlIds.LB_UPDATES_DISCLAIMER).SetLocaleText(b, {
    leaderboardUpdateMinutes : a
  })
};
simcity.cLeaderboards.prototype.AddLeaderboardMenuItems = function () {
  var a = this.mControlIds,
  b;
  for (b in this.mLeaderboardGuids) {
    var c = null,
    d = 0,
    e = this.mLeaderboardGuids[b];
    if (c = b == this.mLeaderboardType.STATS ? this.FindControlByID(a.STATS_BUTTON_GROUP) : this.FindControlByID(a.BIG_BUSINESS_BUTTON_GROUP)) {
      c.mChildren && c.DestroyChildren();
      for (var f in e) {
        var g = e[f],
        h = gUIManager.LoadLayout(this.mProgressPageLayouts.mLeaderboardMenuItem, c),
        i = h.FindControlByID(a.MENU_LABEL),
        j = h.FindControlByID(a.MENU_ICON),
        k =
          h.FindControlByID(a.MENU_BUTTON);
        j.SetWindowImage(g.iconNormal);
        i.SetLocaleText(g.label);
        k.id = g.id;
        h.SetPosition(0, d);
        d += h.mHeight + 5
      }
    }
  }
};
simcity.cLeaderboards.prototype.ShowGlobal = function () {
  this.LoadTab(this.mLeaderboardScope.GLOBAL)
};
simcity.cLeaderboards.prototype.ShowFriends = function () {
  this.LoadTab(this.mLeaderboardScope.FRIENDS)
};
simcity.cLeaderboards.prototype.ShowMyTopCities = function () {
  this.LoadTab(this.mLeaderboardScope.MINE)
};
simcity.cLeaderboards.prototype.ShowStatsLeaderboard = function () {
  this.mCurrentLeaderboardTab = this.mLeaderboardType.STATS;
  this.ShowLeaderboard(this.mLeaderboardGuids.STATS.LARGEST_POPULATION.id, this.mCurrentScope)
};
simcity.cLeaderboards.prototype.ShowBigBusinessLeaderboard = function () {
  this.mCurrentLeaderboardTab = this.mLeaderboardType.BIG_BUSINESS;
  this.ShowLeaderboard(this.mLeaderboardGuids.BIG_BUSINESS.TRADING.id, this.mCurrentScope)
};
simcity.cLeaderboards.prototype.ShowRegionDetails = function (a) {
  this.mCurrentRegionRef = a.itemRef;
  a.SetButtonImage(this.mImages.SELECTED_REGION_ENTRY_BUTTON_IMAGE, 4);
  a.SetButtonImage(this.mImages.SELECTED_HOVER_REGION_ENTRY_BUTTON_IMAGE, 5);
  this.statsAccordion.ToggleClick(a);
  var b = this,
  c = function (c) {
    c && c.boxes && b.Private_InsertRegionUsersDetails(c, a);
    b.HideLoading()
  },
  d = function () {
    b.HideLoading()
  };
  a.mIsSelected ? c() : (this.ShowLoading(), simcity.gSimCityWorldController.Leaderboards.LoadRegionDetails(a.regionId,
      this.mCurrentGuid, c, d))
};
simcity.cLeaderboards.prototype.OnCategoryClickHandler = function (a) {
  this.ShowLeaderboard(a.id)
};
simcity.cLeaderboards.prototype.Hide = function () {
  simcity.cPanelTab.prototype.Hide.call(this);
  simcity.gSimCityWorldController.Leaderboards.ClearLeaderboardCache()
};
simcity.cLeaderboards.prototype.GetLeaderboardTypeByGuid = function (a) {
  var b = this.mLeaderboardGuids,
  c;
  for (c in b) {
    var d = b[c],
    e;
    for (e in d)
      if (d[e].id == a)
        return c
  }
  return -1
};
simcity.cLeaderboards.prototype.SetLeaderboardCategory = function (a, b) {
  var c = null;
  this.mCurrentLeaderboardTab = this.GetLeaderboardTypeByGuid(a);
  this.mCurrentLeaderboardTab == this.mLeaderboardType.STATS ? (this.FindControlByID(this.mControlIds.TEXT_MY_ENTRIES).SetLocaleText(this.kLocaleStrings.MY_REGIONS), this.FindControlByID(this.mControlIds.TEXT_RANKED_BY).SetLocaleText(this.kLocaleStrings.RANKED_BY_REGION), c = this.FindControlByID(this.mControlIds.STATS_BUTTON_GROUP), this.FindControlByID(this.mControlIds.BIG_BUSINESS_LEADERBOARD_MENU).SetVisibility(!1),
    this.FindControlByID(this.mControlIds.STATS_LEADERBOARD_MENU).SetVisibility(!0)) : (this.FindControlByID(this.mControlIds.TEXT_MY_ENTRIES).SetLocaleText(this.kLocaleStrings.MY_CITIES), this.FindControlByID(this.mControlIds.TEXT_RANKED_BY).SetLocaleText(this.kLocaleStrings.RANKED_BY_CITY), c = this.FindControlByID(this.mControlIds.BIG_BUSINESS_BUTTON_GROUP), this.FindControlByID(this.mControlIds.BIG_BUSINESS_LEADERBOARD_MENU).SetVisibility(!0), this.FindControlByID(this.mControlIds.STATS_LEADERBOARD_MENU).SetVisibility(!1));
  if (c && c.mChildren && c && c.mChildren) {
    var d = this.mLeaderboardGuids[this.mCurrentLeaderboardTab],
    e;
    for (e in d)
      for (var f = d[e], g = 0; g < c.mChildren.length; g++) {
        var h = c.mChildren[g],
        i = h.FindControlByID(this.mControlIds.MENU_ICON),
        h = h.FindControlByID(this.mControlIds.MENU_BUTTON);
        h.id == f.id && (h.id == a ? (i.SetWindowImage(f.iconSelected), h.SetSelected(!0)) : i.SetWindowImage(f.iconNormal))
      }
  }
  b && (b == this.mLeaderboardScope.GLOBAL ? this.FindControlByID(this.mControlIds.BUTTON_GLOBAL).SetSelected(!0) : b == this.mLeaderboardScope.FRIENDS ?
    this.FindControlByID(this.mControlIds.BUTTON_FRIENDS).SetSelected(!0) : b == this.mLeaderboardScope.MINE && this.FindControlByID(this.mControlIds.BUTTON_MY_TOP_ENTRIES).SetSelected(!0))
};
simcity.cLeaderboards.prototype.Show = function (a, b) {
  simcity.AddTelemetry("SC_UI_LEADERBOARD_CLICK", 112);
  !a && !this.mCurrentGuid && (a = this.mLeaderboardGuids.STATS.LARGEST_POPULATION.id);
  a && (this.mCurrentGuid = a);
  this.ShowLeaderboard(this.mCurrentGuid, b, !0);
  this.mCurrentLeaderboardTab == this.mLeaderboardType.STATS ? this.FindControlByID(this.mControlIds.BUTTON_STATS_TAB).SetSelected(!0) : this.FindControlByID(this.mControlIds.BUTTON_BIG_BUSINESS_TAB).SetSelected(!0)
};
simcity.cLeaderboards.prototype.ShowLeaderboard = function (a, b, c) {
  a && (this.mCurrentGuid = a);
  b && (this.mCurrentScope = b);
  this.mCurrentScope || (this.mCurrentScope = this.mLeaderboardScope.FRIENDS);
  this.SetLeaderboardCategory(this.mCurrentGuid, this.mCurrentScope);
  if (!this.mIsLoading) {
    this.ShowLoading();
    var d = this,
    a = function () {
      d.LoadTab(d.mCurrentScope);
      d.HideLoading();
      d.mIsLoading = false
    },
    b = function (a) {
      d.HideLoading();
      d.mIsLoading = false;
      var b = d.ClearAndGetLeaderboardContainer();
      d.ShowNoDataMessage(simcity.gNetworkStateManager.CheckNetworkError(a));
      b && b.SetVisibility(true)
    };
    !0 === c && simcity.gSimCityWorldController.Leaderboards.ClearLeaderboardCache();
    this.mIsLoading = !0;
    this.HideNoDataMessage();
    !c && simcity.gSimCityWorldController.Leaderboards.mLeaderboardCache && simcity.gSimCityWorldController.Leaderboards.mLeaderboardCache[this.mCurrentGuid] ? simcity.gSimCityWorldController.Leaderboards.LoadLeaderboardByGuid(this.mCurrentGuid, a, b, !1) : simcity.gSimCityWorldController.Leaderboards.LoadLeaderboardByGuid(this.mCurrentGuid, a, b, !0)
  }
};
simcity.cLeaderboards.prototype.ShowLoading = function () {
  this.LoadStart()
};
simcity.cLeaderboards.prototype.HideLoading = function () {
  this.LoadFinish()
};
simcity.cLeaderboards.prototype.LoadTab = function (a) {
  this.mCurrentScope = a;
  var b = this.ClearAndGetLeaderboardContainer();
  if (b) {
    b.SetVisibility(!0);
    a = null;
    try {
      a = simcity.gSimCityWorldController.Leaderboards.mLeaderboardCache[this.mCurrentGuid][this.mCurrentScope]
    } catch (c) {
      scrui.DebugPrint(c)
    }
    a ? (this.HideError(b), a.unit && (this.mCurrentUnit = a.unit), a = a.leaderboardEntries, this.mCurrentLeaderboardTab == this.mLeaderboardType.STATS ? this.LoadStatLeaderboard(a, b) : this.LoadBigBusinessLeaderboard(a, b)) : this.HandleError(this.kLocaleStrings.NO_LEADERBOARD_DATA,
      b)
  } else
    scrui.DebugPrint("No tab found for scope: " + a)
};
simcity.cLeaderboards.prototype.ClearAndGetLeaderboardContainer = function () {
  var a = null,
  b = null;
  this.mCurrentLeaderboardTab == this.mLeaderboardType.STATS ? (this.FindControlByID(this.mControlIds.STATS_LEADERBOARD_TAB).SetVisibility(!0), this.FindControlByID(this.mControlIds.BIG_BUSINESS_LEADERBOARD_TAB).SetVisibility(!1), a = this.FindControlByID(this.mControlIds.STATS_LEADERBOARD_TAB), b = a.FindControlByID(this.mControlIds.STATS_TAB_CONTENTS)) : (this.FindControlByID(this.mControlIds.STATS_LEADERBOARD_TAB).SetVisibility(!1), this.FindControlByID(this.mControlIds.BIG_BUSINESS_LEADERBOARD_TAB).SetVisibility(!0),
    a = this.FindControlByID(this.mControlIds.BIG_BUSINESS_LEADERBOARD_TAB), b = a.FindControlByID(this.mControlIds.BIG_BUSINESS_TAB_CONTENTS));
  b && b.DestroyChildren();
  return a
};
simcity.cLeaderboards.prototype.LoadMoreResults = function () {
  var a = this;
  this.mIsLoading = !0;
  this.ShowLoading();
  simcity.gSimCityWorldController.Leaderboards.LoadNextPageLeaderboard(this.mCurrentScope, this.mCurrentGuid, function (b) {
    var c = simcity.gSimCityWorldController.Leaderboards.mLeaderboardCache[a.mCurrentGuid][a.mCurrentScope].hasMoreData;
    if (a.mCurrentLeaderboardTab == a.mLeaderboardType.STATS) {
      var d = a.FindControlByID(a.mControlIds.STATS_LEADERBOARD_TAB);
      a.LoadStatEntries(b, d, c)
    } else
      a.mCurrentLeaderboardTab ==
      a.mLeaderboardType.BIG_BUSINESS && (d = a.FindControlByID(a.mControlIds.BIG_BUSINESS_LEADERBOARD_TAB), a.LoadBigBusinessLeaderboardEntries(b, d, c));
    a.HideLoading();
    a.mIsLoading = !1
  }, function () {
    a.HideLoading();
    a.mIsLoading = !1;
    var b = a.ClearAndGetLeaderboardContainer();
    b && b.SetVisibility(!0)
  })
};
simcity.cLeaderboards.prototype.LoadStatLeaderboard = function (a, b) {
  var c = b.FindControlByID(this.mControlIds.STATS_TAB_CONTENTS),
  d = !1;
  this.statsAccordion = new simcity.cAccordion(c, this.mProgressPageLayouts.mRegionEntry, null, this.mControlIds.REGION_EXPAND_CITY_ANIM);
  simcity.gSimCityWorldController.Leaderboards.mLeaderboardCache[this.mCurrentGuid][this.mCurrentScope].hasMoreData && (d = !0);
  this.LoadStatEntries(a, b, d);
  !a || 0 == a.length ? this.HandleError(this.kLocaleStrings.NO_LEADERBOARD_DATA, b) : this.HideError(b)
};
simcity.cLeaderboards.prototype.LoadStatEntries = function (a, b, c) {
  var d = null,
  e = b.FindControlByID(this.mControlIds.FOOTER_WINDOW);
  e && this.statsAccordion.mItems.pop().DestroyControl();
  for (e = 0; a && e < a.length; ++e) {
    var f = a[e];
    if (!0 === f.isMyRegion) {
      d = this.statsAccordion.CreateItem(this.mProgressPageLayouts.mUserRegionEntry);
      try {
        simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData.mRegionID == f.regionID && d.FindControlByID(this.mControlIds.REGION_ACTIVE_MARKER).SetVisibility(!0)
      } catch (g) {}

    } else
      d = this.statsAccordion.CreateItem();
    if (f.regionName) {
      var h = d.FindControlByID(this.mControlIds.REGION_NAME);
      h.SetRawText(f.regionName)
    }
    h = d.FindControlByID(this.mControlIds.REGION_RANK);
    h.SetRawText(f.rank);
    h = d.FindControlByID(this.mControlIds.REGION_ENTRY_BUTTON);
    h.regionId = f.regionID;
    h.itemRef = d;
    h = d.FindControlByID(this.mControlIds.REGION_UNITS);
    this.mCurrentUnit && h.SetRawText(this.mCurrentUnit);
    var h = d.FindControlByID(this.mControlIds.REGION_SCORE),
    i = simcity.gUIToolbox.NumberToString(f.score, 2);
    this.mCurrentGuid === this.mLeaderboardGuids.STATS.MAYOR_RATING.id &&
    (i += "%");
    h.SetRawText(i);
    if (f.percentile && (i = 100 - f.percentile, i = 5 >= i ? 5 : 5 < i && 10 >= i ? 10 : 10 < i && 25 >= i ? 25 : 25 < i && 50 >= i ? 50 : null))
      h = d.FindControlByID(this.mControlIds.REGION_PERCENTILE), h.SetLocaleText(this.kLocaleStrings.TOP_PERCENTAGE, {
        percent : i / 100
      });
    d.regionId = f.regionID;
    d = d.FindAnimationByID(this.mControlIds.REGION_EXPAND_CITY_ANIM);
    d.FindKeyFrameByID(this.mAnimKeyframes.CITY_LAYOUT_HEIGHT).mValue = 44 * f.cityCount;
    d.FindKeyFrameByID(this.mAnimKeyframes.REGION_ENTRY_LAYOUT_HEIGHT).mValue = 44 * f.cityCount +
      44
  }
  e = b.FindControlByID(this.mControlIds.FOOTER_WINDOW);
  !e && c && (e = this.statsAccordion.CreateItem(this.mProgressPageLayouts.mPaginator), e.SetVisibility(!0))
};
simcity.cLeaderboards.prototype.Private_InsertRegionUsersDetails = function (a, b) {
  a && this.LoadExpandedRegionView(a.boxes, b)
};
simcity.cLeaderboards.prototype.LoadExpandedRegionView = function (a, b) {
  var c = b.regionId,
  d = b.GetParentLayout().FindControlByID(this.mControlIds.REGION_EXPANDED_CITY_WINDOW),
  e = 0;
  if (d) {
    d.mChildren && d.DestroyChildren();
    for (var f = 0; a && f < a.length; ++f) {
      var g = a[f];
      g.regionID = c;
      var h = gUIManager.LoadLayout(this.mProgressPageLayouts.mRegionEntryExpandedView, d),
      i;
      i = g.userId == simcity.gSessionManager.mUserID ? [this.mDeepLinkPaths.MY_REGION_PATH, c].join() : [this.mDeepLinkPaths.REGION_PATH, c].join();
      var j = h.FindControlByID(this.mControlIds.LEADERBOARD_ENTRY_WINDOW);
      simcity.gDeepLinkManager.mDeepLink.WrapControl(j, i);
      h.SetPosition(0, e, h.mWidth, h.mHeight);
      e += h.mHeight;
      i = h.FindControlByID(this.mControlIds.LEADER_AVATAR);
      this.DisplayUserAvatar(h, g, i);
      i = h.FindControlByID(this.mControlIds.LEADER_NAME);
      g.screenName ? i.SetRawText(g.screenName) : g.userId ? g.userId == simcity.gSessionManager.mUserID ? i.SetRawText(simcity.gSessionManager.mScreenName) : i.SetRawText("") : i.SetLocaleText(this.kLocaleStrings.ABANDONED_CITY_TEXT);
      g.boxName && (i = h.FindControlByID(this.mControlIds.LEADER_CITY_NAME),
        i.SetRawText(g.boxName));
      i = h.FindControlByID(this.mControlIds.LEADERBOARD_UNIT);
      this.mCurrentUnit && i.SetRawText(this.mCurrentUnit);
      g = simcity.gUIToolbox.NumberToString(g.score, 2);
      i = h.FindControlByID(this.mControlIds.LEADER_NUMBER);
      i.SetRawText(g)
    }
  }
};
simcity.cLeaderboards.prototype.LoadBigBusinessLeaderboard = function (a, b) {
  var c = !1;
  this.mCurrentBigBusinessEntriesPosition = 0;
  simcity.gSimCityWorldController.Leaderboards.mLeaderboardCache[this.mCurrentGuid][this.mCurrentScope].hasMoreData && (c = !0);
  this.LoadBigBusinessLeaderboardEntries(a, b, c);
  !a || 0 == a.length ? this.HandleError(this.kLocaleStrings.NO_LEADERBOARD_DATA, b) : this.HideError(b)
};
simcity.cLeaderboards.prototype.LoadBigBusinessLeaderboardEntries = function (a, b, c) {
  var d = b.FindControlByID(this.mControlIds.BIG_BUSINESS_TAB_CONTENTS),
  e = b.FindControlByID(this.mControlIds.FOOTER_WINDOW);
  e && e.DestroyControl();
  for (e = 0; a && e < a.length; ++e) {
    var f = a[e],
    g = null;
    if (!0 === f.isMyRegion) {
      g = gUIManager.LoadLayout(this.mProgressPageLayouts.mUserBoxEntryLayout, d);
      try {
        simcity.gGlobalUIHandler.mRegionViewUIHandler.mRegionData.mPlayingBox.id == f.boxId && g.FindControlByID(this.mControlIds.BOX_ACTIVE_MARKER).SetVisibility(!0)
      } catch (h) {}

    } else
      g =
        gUIManager.LoadLayout(this.mProgressPageLayouts.mBoxEntryLayout, d);
    g.SetPosition(0, this.mCurrentBigBusinessEntriesPosition, g.mWidth, g.mHeight);
    this.mCurrentBigBusinessEntriesPosition += g.mHeight;
    var i = g.FindControlByID(this.mControlIds.LEADER_AVATAR);
    this.DisplayUserAvatar(g, f, i);
    var i = f.userId == simcity.gSessionManager.mUserID ? [this.mDeepLinkPaths.MY_REGION_PATH, f.regionID].join() : [this.mDeepLinkPaths.REGION_PATH, f.regionID].join(),
    j = g.FindControlByID(this.mControlIds.LEADERBOARD_ENTRY_WINDOW);
    simcity.gDeepLinkManager.mDeepLink.WrapControl(j,
      i);
    i = g.FindControlByID(this.mControlIds.LEADER_NAME);
    f.screenName ? i.SetRawText(f.screenName) : f.userId ? f.userId == simcity.gSessionManager.mUserID ? i.SetRawText(simcity.gSessionManager.mScreenName) : i.SetRawText("") : i.SetLocaleText(this.kLocaleStrings.ABANDONED_CITY_TEXT);
    f.boxName && (i = g.FindControlByID(this.mControlIds.LEADER_CITY_NAME), i.SetRawText(f.boxName));
    i = g.FindControlByID(this.mControlIds.LEADER_RANK);
    i.SetRawText(f.rank);
    i = g.FindControlByID(this.mControlIds.LEADERBOARD_UNIT);
    this.mCurrentUnit &&
    i.SetRawText(this.mCurrentUnit);
    i = g.FindControlByID(this.mControlIds.LEADER_NUMBER);
    i.SetLocaleText(this.kLocaleStrings.BIG_BUSINESS_UNITS, {
      unit : f.score
    })
  }
  e = b.FindControlByID(this.mControlIds.FOOTER_WINDOW);
  !e && c && (e = gUIManager.LoadLayout(this.mProgressPageLayouts.mPaginator, d), e.SetPosition(0, this.mCurrentBigBusinessEntriesPosition), e.SetVisibility(!0))
};
simcity.cLeaderboards.prototype.DisplayUserAvatar = function (a, b, c) {
  if (b.userId) {
    simcity.gUIToolbox.SetAvatar(c, b.screenName);
    var d = {
      id : b.userId,
      isOnline : b.isOnline,
      currentPlayingBoxId : b.currentPlayingBoxId,
      currentPlayingRegionId : b.currentPlayingRegionId
    };
    a.FindControlByID(this.mControlIds.LEADER_AVATAR_FRAME).SetWindowImage(simcity.gUIToolbox.GetAvatarFrame(d, b.regionID, b.boxId));
    a = [this.mDeepLinkPaths.PROFILE_PATH, b.userId].join();
    simcity.gDeepLinkManager.mDeepLink.WrapControl(c, a)
  } else
    a.FindControlByID(this.mControlIds.AVATAR_BOX).SetVisibility(!1),
    a.FindControlByID(this.mControlIds.ABANDONED_CITY_BOX).SetVisibility(!0)
};
simcity.cLeaderboards.prototype.HideError = function (a) {
  a.FindControlByID(this.mControlIds.ERROR_TEXT).SetRawText("")
};
simcity.cLeaderboards.prototype.HandleError = function (a, b) {
  b.FindControlByID(this.mControlIds.ERROR_TEXT).SetLocaleText(a)
};
simcity.GlobalMarketTab = {};
simcity.cGlobalMarket = function () {
  this.mPanel = null;
  this.mAttribute = {
    BUY : "buyPrice",
    SELL : "sellPrice"
  };
  this.mMarket = "truck";
  this.mPriceAttribute = this.mAttribute.BUY;
  this.mNumberOfDays = 1;
  this.mSelectedResources = [];
  this.mMenuLoaded = !1;
  this.mControlIds = {
    GLOBAL_MARKET_CONTENTS : 238616411,
    USER_MESSAGE : 242479654,
    MENU_WINDOW : 242227242,
    MENU_ITEM_TEXT : 242227033,
    MENU_ITEM_BUTTON : 242231672,
    MENU_RESOURCE_IMAGE : 242934280,
    MENU_RESOURCE_ICON : 255024348,
    BUTTON_MONTH : 242236211,
    BUTTON_WEEK : 242236207,
    BUTTON_DAY : 242236186,
    BUTTON_DAY_ANIMATION : 242579675,
    CHART_WINDOW : 242241097,
    CHART_OVERLAY : 242731058,
    CHART_LABEL_VALUE : 242728823,
    CHART_LABEL_DELTA : 242728841,
    CHART_LABEL_COLOR : 242729476,
    CHART_LABEL_ARROW : 242728899
  };
  this.mPageLayouts = {
    mTabPanel : "Layouts/SimCityWorld/GlobalMarketLiveTab.js",
    mChartItem : "Layouts/SimCityWorld/GlobalMarketButton.js",
    mChartLabel : "Layouts/SimCityWorld/GlobalMarketChartLabel.js"
  };
  this.mImages = {
    mUpArrow : "Graphics/GameEntry/SimCityWorld/GlobalMarket_Arrow_Triangle_Green.png",
    mDownArrow : "Graphics/GameEntry/SimCityWorld/GlobalMarket_Arrow_Triangle_Red.png"
  };
  this.mMessages = {
    NO_DATA : new scrui.cLocaleString("GameEntry.json", "0x17f8ce24"),
    NO_CHANGE : new scrui.cLocaleString("GameEntry.json", "0xd370f5d4"),
    NONE_SELECTED : new scrui.cLocaleString("GameEntry.json", "0x7760ef18"),
    POSITIVE_SIMOLEONS : new scrui.cLocaleString("GameEntry.json", "0xc6daac35", "+\u00a7~unit:number~"),
    NEGATIVE_SIMOLEONS : new scrui.cLocaleString("GameEntry.json", "0x49f880ed", "-\u00a7~unit:number~"),
    SIMOLEONS : new scrui.cLocaleString("GameEntry.json", "0x0edec4af")
  };
  this.kMarkets = {
    TRUCK : "truck",
    SEA : "sea",
    AIR : "air"
  };
  this.mChartObject = null
};
goog.inherits(simcity.cGlobalMarket, simcity.cPanelTab);
simcity.cGlobalMarket.prototype.InitTab = function (a) {
  var b = this.mControlIds;
  simcity.cPanelTab.prototype.InitTab.call(this, a);
  for (var c in this.mPageLayouts)
    gUIManager.CacheLayout(this.mPageLayouts[c]);
  a = this.FindControlByID(b.GLOBAL_MARKET_CONTENTS);
  this.mPanel || (this.mPanel = gUIManager.LoadLayout(this.mPageLayouts.mTabPanel, a));
  if ((a = simcity.gUIToolbox.GetKeys(simcity.gSimCityWorldController.GlobalMarket.kResourceList)) && a.length)
    this.mSelectedResources = a[0];
  this.AddEventListener(simcity.gEventTypes.CLICK,
    b.BUTTON_DAY, this.SetToOneDay);
  this.AddEventListener(simcity.gEventTypes.CLICK, b.BUTTON_WEEK, this.SetToOneWeek);
  this.AddEventListener(simcity.gEventTypes.CLICK, b.BUTTON_MONTH, this.SetToOneMonth);
  this.AddEventListener(simcity.gEventTypes.CLICK, b.MENU_ITEM_BUTTON, this.ToggleMenuItem);
  a = gUIManager.FindControlByID(b.GLOBAL_MARKET_CONTENTS);
  a.FindControlByID(b.BUTTON_DAY).SetSelected(!0);
  a.FindAnimationByID(b.BUTTON_DAY_ANIMATION).Start();
  this.GetMarketData(null, "buy")
};
simcity.cGlobalMarket.prototype.Show = function () {
  simcity.cPanelTab.prototype.Show.call(this);
  this.mMenuLoaded ? (0 == this.GetSelectedMenuItems().length && (this.mSelectedResources = [simcity.gUIToolbox.GetKeys(simcity.gSimCityWorldController.GlobalMarket.kResourceList)[0]]), this.RedrawChartFromCache()) : this.GetMarketData(null, "buy")
};
simcity.cGlobalMarket.prototype.ShowGlobalMarket = function () {
  gUIManager.FindControlByID(this.mControlIds.GLOBAL_MARKET_CONTENTS).SetVisibility(!0)
};
simcity.cGlobalMarket.prototype.Hide = function () {
  gUIManager.FindControlByID(this.mControlIds.GLOBAL_MARKET_CONTENTS);
  simcity.cPanelTab.prototype.Hide.call(this)
};
simcity.cGlobalMarket.prototype.DrawChart = function (a) {
  var b = this.mControlIds,
  c = this.mPanel.FindControlByID(b.USER_MESSAGE),
  d = this.mPanel.FindControlByID(b.CHART_WINDOW),
  e = this.mPanel.FindControlByID(b.CHART_OVERLAY),
  d = this.mPanel.FindControlByID(b.CHART_WINDOW),
  f = simcity.gSimCityWorldController.GlobalMarket.kResourceList,
  g = d.mWidth,
  h = d.mHeight,
  i = this;
  c.SetRawText("");
  this.ClearViewByKey("CHART_OVERLAY");
  this.mChartPadding = [0, 0, 0, 0];
  this.mChartObject && this.mChartObject.DestroyChart();
  this.mChartObject =
    new simcity.cLineChart(d.mRootElement, g, h, this.mChartPadding);
  this.mChartObject.mOnErrorHandler = function () {
    simcity.cLauncher3D.mDialogManager.HideLoading();
    c.SetLocaleText(i.mMessages.NO_DATA)
  };
  this.mChartObject.mOnClearLabels = function () {
    i.ClearViewByKey("CHART_OVERLAY")
  };
  this.mChartObject.mOnDrawLabel = function (a, c, d) {
    var g = gUIManager.LoadLayout(i.mPageLayouts.mChartLabel, e),
    h = "Graphics/GameEntry/SimCityWorld/" + f[a].tri,
    a = g.FindControlByID(b.CHART_LABEL_DELTA),
    p = g.FindControlByID(b.CHART_LABEL_ARROW),
    q = g.FindControlByID(b.CHART_LABEL_VALUE),
    o = g.FindControlByID(b.CHART_LABEL_COLOR);
    if (c.yVal && d.y) {
      g.SetVisibility(!0);
      var r = c.yVal,
      d = d.y;
      g.SetPosition(c.x - 9, c.y - 28);
      q.SetLocaleText(i.mMessages.SIMOLEONS, {
        unit : r
      });
      o.SetWindowImage(h);
      c = Math.abs(Math.floor(r - d));
      0 == c ? (p.SetWindowImage("Graphics/GameEntry/SimCityWorld/GlobalMarkets_Arrow_Dash_Grey.png"), a.SetLocaleText(i.mMessages.NO_CHANGE)) : r >= d ? (p.SetWindowImage("Graphics/GameEntry/SimCityWorld/GlobalMarkets_Arrow_Triangle_Green.png"), a.SetLocaleText(i.mMessages.POSITIVE_SIMOLEONS, {
          unit : c
        })) : (p.SetWindowImage("Graphics/GameEntry/SimCityWorld/GlobalMarkets_Arrow_Triangle_Red.png"), a.SetLocaleText(i.mMessages.NEGATIVE_SIMOLEONS, {
          unit : c
        }))
    } else
      a.SetRawText(""), g.SetVisibility(!1)
  };
  this.mChartObject.DrawLineChart(a)
};
simcity.cGlobalMarket.prototype.SetToBuy = function () {
  this.mPriceAttribute = this.mAttribute.BUY;
  this.RedrawChartFromCache()
};
simcity.cGlobalMarket.prototype.SetToSell = function () {
  this.mPriceAttribute = this.mAttribute.SELL;
  this.RedrawChartFromCache()
};
simcity.cGlobalMarket.prototype.ToggleMenuItem = function (a) {
  this.UpdateResourceMenuItem(a);
  (this.mSelectedResources = this.GetSelectedMenuItems()) && 0 == this.mSelectedResources.length ? (a.SetSelected(!0), this.UpdateResourceMenuItem(a)) : this.RedrawChartFromCache()
};
simcity.cGlobalMarket.prototype.RedrawChartFromCache = function () {
  this.DrawChart(this.ParseChartData(this.mChartCache))
};
simcity.cGlobalMarket.prototype.SetToOneDay = function () {
  1 != this.mNumberOfDays ? (this.mNumberOfDays = 1, this.GetResourcesData()) : this.RedrawChartFromCache()
};
simcity.cGlobalMarket.prototype.SetToOneWeek = function () {
  8 != this.mNumberOfDays ? (this.mNumberOfDays = 8, this.GetResourcesData()) : this.RedrawChartFromCache()
};
simcity.cGlobalMarket.prototype.SetToOneMonth = function () {
  31 != this.mNumberOfDays ? (this.mNumberOfDays = 31, this.GetResourcesData()) : this.RedrawChartFromCache()
};
simcity.cGlobalMarket.prototype.GetMarketData = function (a, b) {
  var c = this;
  this.ShowLoading();
  simcity.gSimCityWorldController.GlobalMarket.GetMarket(this.mMarket, this.mNumberOfDays, function (d) {
    c.OnMarketData(d, a, b);
    c.mMenuLoaded = !0;
    c.HideLoading()
  }, function () {
    c.mMenuLoaded = !1;
    c.HideLoading()
  })
};
simcity.cGlobalMarket.prototype.OnMarketData = function (a, b) {
  this.ClearViewByKey("MENU_WINDOW");
  for (var c = 0, d = simcity.gSimCityWorldController.GlobalMarket.kResourceOrder, e = 0, f = d.length; e < f; e++) {
    var g = this.DrawResourceMenuItem(e, a[d[e]], b);
    g && (g.SetPosition(0, c), c += Math.floor(g.mHeight))
  }
  this.mSelectedResources = this.GetSelectedMenuItems();
  this.mPriceAttribute = this.mAttribute.BUY;
  this.GetResourcesData()
};
simcity.cGlobalMarket.prototype.DrawResourceMenuItem = function (a, b, c) {
  if (!b || !b.name)
    return null;
  var d = this.mControlIds,
  e = this.mPanel.FindControlByID(d.MENU_WINDOW),
  e = gUIManager.LoadLayout(this.mPageLayouts.mChartItem, e),
  f = e.FindControlByID(d.MENU_ITEM_BUTTON),
  d = e.FindControlByID(d.MENU_ITEM_TEXT);
  e.name = b.name;
  var g = b.localizedName;
  g && d.SetRawText(g);
  d = !1;
  b = parseInt(b.guid);
  if (c && c == b || !c && 0 == a)
    d = !0;
  f.SetSelected(d);
  this.UpdateResourceMenuItem(f);
  return e
};
simcity.cGlobalMarket.prototype.UpdateResourceMenuItem = function (a) {
  var b = a.GetParentLayout(),
  c = b.name,
  d = this.mControlIds,
  e = simcity.gSimCityWorldController.GlobalMarket.kResourceList,
  f = b.FindControlByID(d.MENU_RESOURCE_IMAGE),
  b = b.FindControlByID(d.MENU_RESOURCE_ICON),
  d = "Graphics/GameEntry/SimCityWorld/" + e[c].dot,
  g = "Graphics/GameEntry/SimCityWorld/" + e[c].onIcon,
  h = "Graphics/GameEntry/SimCityWorld/" + e[c].offIcon,
  a = a.mIsSelected;
  c && (a ? (e[c].dot && f.SetWindowImage(d), e[c].onIcon && b.SetWindowImage(g)) : (f.SetWindowImage("Graphics/GameEntry/SimCityWorld/GlobalMarket-Dot-Off.png"),
      e[c].onIcon && b.SetWindowImage(h)))
};
simcity.cGlobalMarket.prototype.GetResourcesData = function () {
  var a = this,
  b = simcity.gUIToolbox.GetKeys(simcity.gSimCityWorldController.GlobalMarket.kResourceList);
  this.ShowLoading();
  this.HideNoDataMessage();
  simcity.gSimCityWorldController.GlobalMarket.GetResources(this.mMarket, b, this.mNumberOfDays, function (b) {
    a.OnResourcesData(b);
    a.ShowGlobalMarket();
    a.HideLoading()
  }, function (b) {
    a.ShowNoDataMessage(simcity.gNetworkStateManager.CheckNetworkError(b));
    a.HideLoading()
  })
};
simcity.cGlobalMarket.prototype.OnResourcesData = function (a) {
  this.mChartCache = a.marketResourcePrices;
  this.DrawChart(this.ParseChartData(this.mChartCache));
  simcity.cLauncher3D.mDialogManager.HideLoading()
};
simcity.cGlobalMarket.prototype.ParseChartData = function (a) {
  var b = {};
  b.metadata = simcity.gSimCityWorldController.GlobalMarket.kResourceList;
  b.selected = this.mSelectedResources;
  b.data = {};
  var c = null,
  d = null,
  e = null,
  f = null,
  g = null,
  h = null,
  i = null,
  j = null;
  if (a && a.length) {
    for (var k = 0, l = a.length; k < l; k++) {
      var m = a[k].resource,
      n = a[k].pricing;
      if (n.length) {
        j || (j = n[0].priceSet);
        i || (i = n[0].priceSet);
        h || (h = n[0][this.mPriceAttribute]);
        g || (g = n[0][this.mPriceAttribute]);
        for (var p = 0, q = n.length; p < q; p++)
          j = Math.min(j, n[p].priceSet),
          i = Math.max(i, n[p].priceSet), h = Math.min(h, n[p][this.mPriceAttribute]), g = Math.max(g, n[p][this.mPriceAttribute])
      }
      -1 != this.mSelectedResources.indexOf(m) && (b.data[m] = this.ParsePricing(n, "priceSet", this.mPriceAttribute))
    }
    a = simcity.gUIToolbox.GetKeys(b.data);
    for (k = 0; k < a.length; k++)
      if (m = a[k], n = b.data[m], n.length) {
        c || (c = n[0].x);
        d || (d = n[0].x);
        e || (e = n[0].y);
        f || (f = n[0].y);
        p = 0;
        for (l = n.length; p < l; p++)
          var q = n[p].x, o = n[p].y, c = Math.min(c, q), d = Math.max(d, q), e = Math.min(e, o), f = Math.max(f, o);
        n[0].x < i && (n.unshift({
            x : i,
            y : n[0].y
          }), b.data[m] = n)
      }
  }
  b.xMin = c;
  b.xMax = d;
  b.yMin = e;
  b.yMax = f;
  b.yMinAll = h;
  b.yMaxAll = g;
  b.xMinAll = j;
  b.xMaxAll = i;
  c = this.GetPreviousTradingDay(i);
  return b = this.AttachPreviousClosingPrice(b, c)
};
simcity.cGlobalMarket.prototype.GetPreviousTradingDay = function (a) {
  a = new Date(a);
  a.setHours(0, 0, 0, 0);
  return (new Date(a.valueOf() - 36E5)).valueOf()
};
simcity.cGlobalMarket.prototype.AttachPreviousClosingPrice = function (a) {
  var b = simcity.gUIToolbox.GetKeys(a.data);
  if (b.length) {
    a.previousClosing = {};
    for (var c = 0, d = b.length; c < d; c++) {
      var e = b[c],
      f = a.data[e],
      g = f.length - 1;
      0 < g && (a.previousClosing[e] = f[g])
    }
  }
  return a
};
simcity.cGlobalMarket.prototype.ParsePricing = function (a, b, c) {
  var d = [],
  e = 1;
  1 < this.mNumberOfDays && (e = Math.floor(Math.max(a.length / 24, 1)));
  for (var f = 0, g = a.length; f < g; f += e)
    d.push({
      x : a[f][b],
      y : a[f][c]
    });
  return d
};
simcity.cGlobalMarket.prototype.GetSelectedMenuItems = function () {
  var a = this.mControlIds,
  b = this.mPanel.FindControlByID(a.MENU_WINDOW);
  return b ? simcity.gUIToolbox.GetSelectedIdsFromControl(b, a.MENU_ITEM_BUTTON, "name") : []
};
simcity.cGlobalMarket.prototype.ToTimestamp = function (a) {
  a = simcity.gUIToolbox.PrettyDate(a);
  return "object" == typeof a ? a.valueOf() : 0
};
simcity.cGlobalMarket.prototype.ClearViewByKey = function (a) {
  this.ClearViewByID(this.mControlIds[a])
};
simcity.cGlobalMarket.prototype.ShowLoading = function () {
  this.LoadStart()
};
simcity.cGlobalMarket.prototype.HideLoading = function () {
  this.LoadFinish()
};
simcity.LineChart = {};
simcity.cLineChart = function (a, b, c, d) {
  this.kStyles = {
    VERTICAL_GRID_LINE : {
      "stroke-width" : 1,
      stroke : "#f2f2f2",
      "stroke-dasharray" : "--"
    },
    HORIZONTAL_GRID_LINE : {
      "stroke-width" : 1,
      stroke : "#e5e5e5"
    },
    GRAPH_FILL : {
      fill : "90-#8cc63f:5-#006837:95",
      stroke : "#fff",
      opacity : 0.8
    },
    CHART_BG : {
      fill : "#fff",
      "stroke-width" : 0
    },
    ZERO_POINT : {
      "font-family" : "EAAGSimCityStdBk",
      "font-size" : "10pt",
      fill : "#a0a0a0",
      cursor : "default"
    },
    VERTICAL_TICK_MARK : {
      "text-anchor" : "end",
      "font-family" : "EAAGSimCityStdBk",
      "font-size" : "10pt",
      fill : "#a0a0a0",
      cursor : "default"
    },
    FIRST_HORIZONTAL_TICK_MARK : {
      "text-anchor" : "start",
      "font-family" : "EAAGSimCityStdBk",
      "font-size" : "10pt",
      fill : "#a0a0a0",
      cursor : "default"
    },
    HORIZONTAL_TICK_MARK : {
      "font-family" : "EAAGSimCityStdBk",
      "font-size" : "10pt",
      fill : "#a0a0a0",
      cursor : "default"
    }
  };
  this.kDefaultLineColor = "#f00";
  this.mDrawPoints = !1;
  this.svgObj = null;
  this.mAutoRescaleYAxis = this.mZeroBasedYAxis = !0;
  this.mContainer = a;
  this.mWidth = b;
  this.mHeight = c;
  this.mGridSpace = 80;
  this.mRoundTo = 1E4;
  this.mTopPadding = d[0];
  this.mRightPadding = d[1];
  this.mBottomPadding = d[2];
  this.mLeftPadding = d[3];
  this.mChartWidth = this.mWidth - this.mLeftPadding - this.mRightPadding;
  this.mChartHeight = this.mHeight - this.mTopPadding - this.mBottomPadding;
  this.mContainer.children && 0 < this.mContainer.children.length && this.mContainer.removeChild(this.mContainer.children[0]);
  this.mContainer.style.width = this.mWidth + "px";
  this.mContainer.style.height = this.mHeight + "px";
  this.svgObj = Raphael(this.mContainer, this.mWidth, this.mHeight)
};
simcity.cLineChart.kLocaleString = {
  kVerticalTick : new scrui.cLocaleString("GameEntry.json", "0x0ef9668c")
};
simcity.cLineChart.prototype.DestroyChart = function () {
  if (this.mContainer) {
    var a = this.mContainer.children,
    b;
    for (b in a)
      "object" == typeof a[b] && this.mContainer.removeChild(a[b]);
    this.mContainer = null
  }
};
simcity.cLineChart.prototype.DrawLineChart = function (a) {
  var b = a.metadata,
  c = a.selected,
  d = this.mAutoRescaleYAxis ? a.yMin : a.yMinAll,
  e = this.GetTopInterval(this.mAutoRescaleYAxis ? a.yMax : a.yMaxAll, this.mRoundTo),
  d = this.GetBottomInterval(d, this.mRoundTo),
  f = this.GetLeftInterval(a.xMinAll, this.mRoundTo),
  g = this.GetRightInterval(a.xMaxAll, this.mRoundTo);
  if (this.IsValid(a)) {
    this.DrawGrid();
    for (var h in b)
      if (-1 != c.indexOf(h)) {
        var i = b[h].color ? b[h].color : this.kDefaultLineColor,
        j = this.ToPoints(a, h);
        this.DrawLines(j,
          d, e, f, g, i, h, a.previousClosing[h])
      }
    this.DrawVerticalTickMarks(d, e, 4);
    this.DrawHorizontalTickMarks(a.xMinAll, a.xMaxAll, 4)
  } else
    "function" == typeof this.mOnErrorHandler && this.mOnErrorHandler()
};
simcity.cLineChart.prototype.DrawLines = function (a, b, c, d, e, f, g, h) {
  var i = this,
  c = {
    "stroke-width" : 20,
    "stroke-linejoin" : "miter",
    "stroke-linecap" : "square",
    color : "#000000",
    opacity : 0
  },
  j = {
    "stroke-width" : 2,
    "stroke-linejoin" : "miter",
    "stroke-linecap" : "square",
    stroke : f
  },
  k = {
    "stroke-width" : 3.5,
    "stroke-linejoin" : "miter",
    "stroke-linecap" : "square",
    stroke : f
  },
  f = {
    fill : "#efefef",
    stroke : f,
    "stroke-width" : 2
  };
  if (a && a.length && 0 < a.length) {
    b = "M" + a[0].x + "," + a[0].y;
    d = 1;
    for (e = a.length; d < e; d++)
      b = b + " L" + a[d].x + "," + a[d].y;
    d = a.length -
      1;
    a[d].x && 0 < a[d].x && (b = b + " L0," + a[d].y);
    var c = this.svgObj.path(b).attr(c),
    l = this.svgObj.path(b).attr(j),
    d = this.svgObj.set();
    d.push(c);
    d.push(l);
    d.mouseover(function () {
      l.animate(k, 50);
      i.ClearLabels();
      i.DrawLabel(g, a[0], h);
      scrui.Play2DSound(scrui.IDFromName("Play_rolloverb"))
    });
    d.mouseout(function () {
      l.animate(j, 50)
    });
    if (this.mDrawPoints) {
      d = 0;
      for (e = a.length; d < e; d++)
        b = b + "L" + a[d].x + "," + a[d].y, this.svgObj.circle(a[d].x, a[d].y, 3).attr(f).data("yVal", a[d].yVal)
    }
  }
};
simcity.cLineChart.prototype.DrawLabel = function (a, b, c) {
  "function" == typeof this.mOnDrawLabel && (b && c) && this.mOnDrawLabel(a, b, c)
};
simcity.cLineChart.prototype.ClearLabels = function () {
  "function" == typeof this.mOnClearLabels && this.mOnClearLabels()
};
simcity.cLineChart.prototype.GetTopInterval = function (a, b) {
  return 0 < a % b ? a - a % b + b : a
};
simcity.cLineChart.prototype.GetBottomInterval = function (a, b) {
  return this.mZeroBasedYAxis ? 0 : 0 < a % b ? a - a % b : a
};
simcity.cLineChart.prototype.GetLeftInterval = function (a, b) {
  return 0 < a % b ? a - a % b : a
};
simcity.cLineChart.prototype.GetRightInterval = function (a, b) {
  return 0 < a % b ? a - a % b + b : a
};
simcity.cLineChart.prototype.DrawVerticalTickMarks = function (a, b, c) {
  var d = b - a,
  b = d / c,
  e = this.mChartHeight / d;
  this.mVerticalTickMarks && this.mVerticalTickMarks.remove();
  this.svgObj.setStart();
  if (0 < d) {
    for (d = 1; d < c + 1; d++) {
      var f = simcity.cLineChart.kLocaleString.kVerticalTick.LoadAndGetTextSynchronous({
          unit : a + b * d
        }),
      g = this.mChartWidth - this.mRightPadding - 10,
      h = this.mChartHeight + this.mTopPadding - b * d * e + 10;
      d == c ? this.svgObj.text(g - 10, h + 5, f).attr(this.kStyles.VERTICAL_TICK_MARK) : this.svgObj.text(g - 10, h, f).attr(this.kStyles.VERTICAL_TICK_MARK)
    }
    this.svgObj.text(this.mChartWidth -
      15, this.mChartHeight - 15, "0").attr(this.kStyles.ZERO_POINT)
  } else
    this.svgObj.text(g, this.mChartHeight + this.mTopPadding, a);
  this.mVerticalTickMarks = this.svgObj.setFinish()
};
simcity.cLineChart.prototype.DrawHorizontalTickMarks = function (a, b, c) {
  var d = this.mHeight - this.mBottomPadding - 15,
  e = b - a,
  a = e / c,
  e = this.mChartWidth / e;
  this.mHorizontalTickMarks && this.mHorizontalTickMarks.remove();
  this.svgObj.setStart();
  for (var f = c; 0 < f; f--) {
    var g = simcity.gUIToolbox.PrettyDate(new Date(b - a * f)),
    h = this.mWidth - this.mRightPadding - a * f * e;
    f == c ? this.svgObj.text(h + 10, d, g).attr(this.kStyles.FIRST_HORIZONTAL_TICK_MARK) : this.svgObj.text(h, d, g).attr(this.kStyles.HORIZONTAL_TICK_MARK)
  }
  this.mHorizontalTickMarks =
    this.svgObj.setFinish()
};
simcity.cLineChart.prototype.DrawGrid = function () {
  var a = [0.25, 0.5, 0.75];
  this.svgObj.rect(this.mLeftPadding, this.mTopPadding, this.mChartWidth, this.mChartHeight).attr(this.kStyles.CHART_BG);
  for (var b = 0; b < a.length; b++) {
    var c = this.mTopPadding + this.mChartHeight * a[b],
    c = "M" + this.mLeftPadding + ", " + c + "L" + (this.mWidth - this.mRightPadding) + ", " + c;
    this.svgObj.path(c).attr(this.kStyles.HORIZONTAL_GRID_LINE)
  }
  for (b = 0; b < a.length; b++)
    c = this.mLeftPadding + this.mChartWidth * a[b], c = "M" + c + ", " + this.mTopPadding + "L" + c + ", " +
      (this.mHeight - this.mBottomPadding), this.svgObj.path(c).attr(this.kStyles.VERTICAL_GRID_LINE)
};
simcity.cLineChart.prototype.ToPoints = function (a, b) {
  var c = [],
  d = a.data[b];
  if (d.length) {
    var e = this.mAutoRescaleYAxis ? a.yMin : a.yMinAll,
    f = this.GetTopInterval(this.mAutoRescaleYAxis ? a.yMax : a.yMaxAll, this.mRoundTo),
    e = this.GetBottomInterval(e, this.mRoundTo),
    g = a.xMaxAll - a.xMinAll;
    0 == g && (g = 1);
    g = this.mChartWidth / g;
    f -= e;
    0 == f && (f = 1);
    for (var f = this.mChartHeight / f, h = 0, i = 0, j = 0, k = d.length; j < k; j++)
      h = Math.floor(this.mLeftPadding + (d[j].x - a.xMinAll) * g), i = this.mZeroBasedYAxis ? Math.floor(this.mTopPadding + this.mChartHeight -
          d[j].y * f) : Math.floor(this.mTopPadding + this.mChartHeight - (d[j].y - e) * f), c.push({
        x : h,
        y : i,
        xVal : d[j].x,
        yVal : d[j].y
      })
  }
  return c
};
simcity.cLineChart.prototype.IsValid = function (a) {
  if (!a)
    return !1;
  var b = a.data,
  c = a.metadata,
  a = a.selected;
  if (!b || !c || !a)
    return !1;
  if (a && a.length)
    for (var c = simcity.gUIToolbox.GetKeys(c), a = 0, d = c.length; a < d; a++)
      if (b[c[a]] && b[c[a]].length)
        return !0
};
simcity.cLineChart.prototype.GetLabelPositions = function () {};
simcity.LeaderboardPanel = {};
simcity.cLeaderboardPanel = function () {
  this.mLeaderboardPanelWindow = null;
  this.mControlIds = {
    IDLE_TAB : 228845943,
    LEADERBOARDS_TAB : 246034434,
    LEADERBOARDS_BUTTON : 246035160,
    CLOSE_BUTTON : 246714539
  };
  this.kParentControlId = 245273465;
  this.kAnimationId = 246030537;
  this.kSpinnerId = 254852197;
  this.kNoDataMsgId = 253133608;
  this.mPageLayouts = {
    LOADING : "Layouts/LoadingModal.js"
  }
};
goog.inherits(simcity.cLeaderboardPanel, simcity.cPanel2D);
simcity.cLeaderboardPanel.prototype.Initialize = function () {
  for (var a in this.mPageLayouts)
    gUIManager.CacheLayout(this.mPageLayouts[a]);
  a = gUIManager.FindControlByID(this.kParentControlId);
  var b = a.FindAnimationByID(this.kAnimationId);
  this.mLeaderboardPanelWindow = a;
  this.InitPanel(a, b);
  a = new simcity.cLeaderboards;
  b = new simcity.cLoadNotifier(this.kParentControlId, this.kSpinnerId);
  a.SetLoadNotifier(b);
  this.AddTab("LEADERBOARDS_TAB", a, this.mControlIds.LEADERBOARDS_TAB, this.mControlIds.LEADERBOARDS_BUTTON);
  this.mCurrentTabKey = "LEADERBOARDS_TAB";
  a.SetNoDataMsgControl(this.kNoDataMsgId);
  this.AddEventListener(simcity.gEventTypes.CLICK, this.mControlIds.CLOSE_BUTTON, this.ClosePanel)
};
simcity.cLeaderboardPanel.prototype.ClosePanel = function () {
  this.Hide()
};
simcity.cLeaderboardPanel.prototype.IsShowing = function () {
  return this.mLeaderboardPanelWindow.IsControlVisible()
};
simcity.globalui.project = {};
